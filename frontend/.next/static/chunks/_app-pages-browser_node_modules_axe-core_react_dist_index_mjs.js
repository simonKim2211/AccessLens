/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_axe-core_react_dist_index_mjs"],{

/***/ "(app-pages-browser)/./node_modules/@axe-core/react/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@axe-core/react/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ reactAxe),\n/* harmony export */   logToConsole: () => (/* binding */ logToConsole)\n/* harmony export */ });\n/* harmony import */ var axe_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axe-core */ \"(app-pages-browser)/./node_modules/axe-core/axe.js\");\n/* harmony import */ var requestidlecallback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! requestidlecallback */ \"(app-pages-browser)/./node_modules/requestidlecallback/index.js\");\n// index.ts\n\n\n\n// after.ts\nvar restoreFunctions = [];\nfunction after(host, name, cb) {\n  const originalFn = host[name];\n  let restoreFn;\n  if (originalFn) {\n    host[name] = function(...args) {\n      originalFn.apply(this, args);\n      cb(host);\n    };\n    restoreFn = function() {\n      host[name] = originalFn;\n    };\n  } else {\n    host[name] = function() {\n      cb(host);\n    };\n    restoreFn = function() {\n      delete host[name];\n    };\n  }\n  restoreFunctions.push(restoreFn);\n}\nafter.restorePatchedMethods = function() {\n  restoreFunctions.forEach((restoreFn) => restoreFn());\n  restoreFunctions = [];\n};\n\n// cache.ts\nvar _cache = {};\nvar cache = {\n  set(key, value) {\n    _cache[key] = value;\n  },\n  get(key) {\n    return _cache[key];\n  },\n  clear() {\n    Object.keys(_cache).forEach((key) => {\n      delete _cache[key];\n    });\n  }\n};\nvar cache_default = cache;\n\n// index.ts\nvar requestIdleCallback = requestidlecallback__WEBPACK_IMPORTED_MODULE_1__.request;\nvar cancelIdleCallback = requestidlecallback__WEBPACK_IMPORTED_MODULE_1__.cancel;\nvar React;\nvar ReactDOM;\nvar logger;\nvar lightTheme = {\n  serious: \"#d93251\",\n  minor: \"#d24700\",\n  text: \"black\"\n};\nvar darkTheme = {\n  serious: \"#ffb3b3\",\n  minor: \"#ffd500\",\n  text: \"white\"\n};\nvar theme = window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? darkTheme : lightTheme;\nvar boldCourier = \"font-weight:bold;font-family:Courier;\";\nvar critical = `color:${theme.serious};font-weight:bold;`;\nvar serious = `color:${theme.serious};font-weight:normal;`;\nvar moderate = `color:${theme.minor};font-weight:bold;`;\nvar minor = `color:${theme.minor};font-weight:normal;`;\nvar defaultReset = `font-color:${theme.text};font-weight:normal;`;\nvar idleId;\nvar timeout;\nvar context;\nvar conf;\nvar _createElement;\nvar components = {};\nvar nodes = [document.documentElement];\nfunction debounce(func, wait, immediate) {\n  let _timeout;\n  return function(...args) {\n    const later = () => {\n      _timeout = null;\n      if (!immediate) func.apply(this, args);\n    };\n    const callNow = immediate && !_timeout;\n    clearTimeout(_timeout);\n    _timeout = setTimeout(later, wait);\n    if (callNow) func.apply(this, args);\n  };\n}\nfunction getPath(node) {\n  const path = [node];\n  while (node && node.nodeName.toLowerCase() !== \"html\") {\n    path.push(node.parentNode);\n    node = node.parentNode;\n  }\n  if (!node || !node.parentNode) {\n    return null;\n  }\n  return path.reverse();\n}\nfunction getCommonParent(nodes2) {\n  let path;\n  let nextPath;\n  if (nodes2.length === 1) {\n    return nodes2.pop();\n  }\n  while (!path && nodes2.length) {\n    path = getPath(nodes2.pop());\n  }\n  while (nodes2.length) {\n    nextPath = getPath(nodes2.pop());\n    if (nextPath) {\n      path = path.filter((node, index) => {\n        return nextPath.length > index && nextPath[index] === node;\n      });\n    }\n  }\n  return path ? path[path.length - 1] : document;\n}\nfunction logElement(node, logFn) {\n  const el = document.querySelector(node.target.toString());\n  if (!el) {\n    logFn(\"Selector: %c%s\", boldCourier, node.target.toString());\n  } else {\n    logFn(\"Element: %o\", el);\n  }\n}\nfunction logHtml(node) {\n  console.log(\"HTML: %c%s\", boldCourier, node.html);\n}\nfunction logFailureMessage(node, key) {\n  const message = axe_core__WEBPACK_IMPORTED_MODULE_0__._audit.data.failureSummaries[key].failureMessage(\n    node[key].map((check) => check.message || \"\")\n  );\n  console.error(message);\n}\nfunction failureSummary(node, key) {\n  if (node[key].length > 0) {\n    logElement(node, console.groupCollapsed);\n    logHtml(node);\n    logFailureMessage(node, key);\n    let relatedNodes = [];\n    node[key].forEach((check) => {\n      relatedNodes = relatedNodes.concat(check.relatedNodes);\n    });\n    if (relatedNodes.length > 0) {\n      console.groupCollapsed(\"Related nodes\");\n      relatedNodes.forEach((relatedNode) => {\n        logElement(relatedNode, console.log);\n        logHtml(relatedNode);\n      });\n      console.groupEnd();\n    }\n    console.groupEnd();\n  }\n}\nfunction checkAndReport(node, timeout2) {\n  const disableDeduplicate = conf[\"disableDeduplicate\"];\n  if (idleId) {\n    cancelIdleCallback(idleId);\n    idleId = void 0;\n  }\n  return new Promise((resolve, reject) => {\n    nodes.push(node);\n    idleId = requestIdleCallback(\n      () => {\n        let n = context;\n        if (n === void 0) {\n          n = getCommonParent(nodes.filter((node2) => node2.isConnected));\n          if (n.nodeName.toLowerCase() === \"html\") {\n            n = document;\n          }\n        }\n        axe_core__WEBPACK_IMPORTED_MODULE_0__.configure({ allowedOrigins: [\"<unsafe_all_origins>\"] });\n        axe_core__WEBPACK_IMPORTED_MODULE_0__.run(\n          n,\n          { reporter: \"v2\" },\n          function(error, results) {\n            if (error) {\n              return reject(error);\n            }\n            results.violations = results.violations.filter((result) => {\n              result.nodes = result.nodes.filter((node2) => {\n                const key = node2.target.toString() + result.id;\n                const retVal = !cache_default.get(key);\n                cache_default.set(key, key);\n                return disableDeduplicate || retVal;\n              });\n              return !!result.nodes.length;\n            });\n            if (results.violations.length) {\n              logger(results);\n            }\n            resolve();\n          }\n        );\n      },\n      {\n        timeout: timeout2\n      }\n    );\n  });\n}\nfunction checkNode(component) {\n  let node;\n  try {\n    node = ReactDOM.findDOMNode(component);\n  } catch (e) {\n    console.group(\"%caxe error: could not check node\", critical);\n    console.group(\"%cComponent\", serious);\n    console.error(component);\n    console.groupEnd();\n    console.group(\"%cError\", serious);\n    console.error(e);\n    console.groupEnd();\n    console.groupEnd();\n  }\n  if (node) {\n    checkAndReport(node, timeout);\n  }\n}\nfunction componentAfterRender(component) {\n  const debounceCheckNode = debounce(checkNode, timeout, true);\n  after(component, \"componentDidMount\", debounceCheckNode);\n  after(component, \"componentDidUpdate\", debounceCheckNode);\n}\nfunction addComponent(component) {\n  const reactInstance = component._reactInternalInstance || {};\n  const reactInstanceDebugID = reactInstance._debugID;\n  const reactFiberInstance = component._reactInternalFiber || {};\n  const reactFiberInstanceDebugID = reactFiberInstance._debugID;\n  const reactInternals = component._reactInternals || {};\n  const reactInternalsDebugID = reactInternals._debugID;\n  if (reactInstanceDebugID && !components[reactInstanceDebugID]) {\n    components[reactInstanceDebugID] = component;\n    componentAfterRender(component);\n  } else if (reactFiberInstanceDebugID && !components[reactFiberInstanceDebugID]) {\n    components[reactFiberInstanceDebugID] = component;\n    componentAfterRender(component);\n  } else if (reactInternalsDebugID && !components[reactInternalsDebugID]) {\n    components[reactInternalsDebugID] = component;\n    componentAfterRender(component);\n  }\n}\nfunction logToConsole(results) {\n  console.group(\"%cNew axe issues\", serious);\n  results.violations.forEach((result) => {\n    let fmt;\n    switch (result.impact) {\n      case \"critical\":\n        fmt = critical;\n        break;\n      case \"serious\":\n        fmt = serious;\n        break;\n      case \"moderate\":\n        fmt = moderate;\n        break;\n      case \"minor\":\n        fmt = minor;\n        break;\n      default:\n        fmt = minor;\n        break;\n    }\n    console.groupCollapsed(\n      \"%c%s: %c%s %s\",\n      fmt,\n      result.impact,\n      defaultReset,\n      result.help,\n      result.helpUrl\n    );\n    result.nodes.forEach((node) => {\n      failureSummary(node, \"any\");\n      failureSummary(node, \"none\");\n    });\n    console.groupEnd();\n  });\n  console.groupEnd();\n}\nfunction reactAxe(_React, _ReactDOM, _timeout, _conf = {}, _context, _logger) {\n  React = _React;\n  ReactDOM = _ReactDOM;\n  timeout = _timeout;\n  context = _context;\n  conf = _conf;\n  logger = _logger || logToConsole;\n  const runOnly = conf[\"runOnly\"];\n  if (runOnly) {\n    conf[\"rules\"] = axe_core__WEBPACK_IMPORTED_MODULE_0__.getRules(runOnly).map((rule) => ({ ...rule, id: rule.ruleId, enabled: true }));\n    conf[\"disableOtherRules\"] = true;\n  }\n  if (Object.keys(conf).length > 0) {\n    axe_core__WEBPACK_IMPORTED_MODULE_0__.configure(conf);\n  }\n  axe_core__WEBPACK_IMPORTED_MODULE_0__.configure({ allowedOrigins: [\"<unsafe_all_origins>\"] });\n  if (!_createElement) {\n    _createElement = React.createElement;\n    React.createElement = function(...args) {\n      const reactEl = _createElement.apply(this, args);\n      if (reactEl._owner && reactEl._owner._instance) {\n        addComponent(reactEl._owner._instance);\n      } else if (reactEl._owner && reactEl._owner.stateNode) {\n        addComponent(reactEl._owner.stateNode);\n      }\n      return reactEl;\n    };\n  }\n  return checkAndReport(document.body, timeout);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@axe-core/react/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/axe-core/axe.js":
/*!**************************************!*\
  !*** ./node_modules/axe-core/axe.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;/*! axe v4.10.3\n * Copyright (c) 2015 - 2025 Deque Systems, Inc.\n *\n * Your use of this Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This entire copyright notice must appear in every copy of this file you\n * distribute or in any file that contains substantial portions of this source\n * code.\n */\n(function axeFunction(window) {\n  var global = window;\n  var document = window.document;\n  'use strict';\n  function _typeof(o) {\n    '@babel/helpers - typeof';\n    return _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function(o) {\n      return typeof o;\n    } : function(o) {\n      return o && 'function' == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o;\n    }, _typeof(o);\n  }\n  var axe = axe || {};\n  axe.version = '4.10.3';\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return axe;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  if (( false ? 0 : _typeof(module)) === 'object' && module.exports && typeof axeFunction.toString === 'function') {\n    axe.source = '(' + axeFunction.toString() + ')(typeof window === \"object\" ? window : this);';\n    module.exports = axe;\n  }\n  if (typeof window.getComputedStyle === 'function') {\n    window.axe = axe;\n  }\n  var commons;\n  function SupportError(error) {\n    this.name = 'SupportError';\n    this.cause = error.cause;\n    this.message = '`'.concat(error.cause, '` - feature unsupported in your environment.');\n    if (error.ruleId) {\n      this.ruleId = error.ruleId;\n      this.message += ' Skipping '.concat(this.ruleId, ' rule.');\n    }\n    this.stack = new Error().stack;\n  }\n  SupportError.prototype = Object.create(Error.prototype);\n  SupportError.prototype.constructor = SupportError;\n  'use strict';\n  var _excluded = [ 'node' ], _excluded2 = [ 'relatedNodes' ], _excluded3 = [ 'node' ], _excluded4 = [ 'variant' ], _excluded5 = [ 'matches' ], _excluded6 = [ 'chromium' ], _excluded7 = [ 'noImplicit' ], _excluded8 = [ 'noPresentational' ], _excluded9 = [ 'precision', 'format', 'inGamut' ], _excluded10 = [ 'space' ], _excluded11 = [ 'algorithm' ], _excluded12 = [ 'method' ], _excluded13 = [ 'maxDeltaE', 'deltaEMethod', 'steps', 'maxSteps' ], _excluded14 = [ 'node' ], _excluded15 = [ 'environmentData' ], _excluded16 = [ 'environmentData' ], _excluded17 = [ 'environmentData' ], _excluded18 = [ 'environmentData' ], _excluded19 = [ 'environmentData' ];\n  function _toArray(r) {\n    return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();\n  }\n  function _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n      value: t,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[r] = t, e;\n  }\n  function _construct(t, e, r) {\n    if (_isNativeReflectConstruct()) {\n      return Reflect.construct.apply(null, arguments);\n    }\n    var o = [ null ];\n    o.push.apply(o, e);\n    var p = new (t.bind.apply(t, o))();\n    return r && _setPrototypeOf(p, r.prototype), p;\n  }\n  function _callSuper(t, o, e) {\n    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n  }\n  function _possibleConstructorReturn(t, e) {\n    if (e && ('object' == _typeof(e) || 'function' == typeof e)) {\n      return e;\n    }\n    if (void 0 !== e) {\n      throw new TypeError('Derived constructors may only return object or undefined');\n    }\n    return _assertThisInitialized(t);\n  }\n  function _assertThisInitialized(e) {\n    if (void 0 === e) {\n      throw new ReferenceError('this hasn\\'t been initialised - super() hasn\\'t been called');\n    }\n    return e;\n  }\n  function _isNativeReflectConstruct() {\n    try {\n      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n      return !!t;\n    })();\n  }\n  function _getPrototypeOf(t) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, _getPrototypeOf(t);\n  }\n  function _inherits(t, e) {\n    if ('function' != typeof e && null !== e) {\n      throw new TypeError('Super expression must either be null or a function');\n    }\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), Object.defineProperty(t, 'prototype', {\n      writable: !1\n    }), e && _setPrototypeOf(t, e);\n  }\n  function _setPrototypeOf(t, e) {\n    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {\n      return t.__proto__ = e, t;\n    }, _setPrototypeOf(t, e);\n  }\n  function _classPrivateFieldInitSpec(e, t, a) {\n    _checkPrivateRedeclaration(e, t), t.set(e, a);\n  }\n  function _classPrivateMethodInitSpec(e, a) {\n    _checkPrivateRedeclaration(e, a), a.add(e);\n  }\n  function _checkPrivateRedeclaration(e, t) {\n    if (t.has(e)) {\n      throw new TypeError('Cannot initialize the same private elements twice on an object');\n    }\n  }\n  function _classPrivateFieldGet(s, a) {\n    return s.get(_assertClassBrand(s, a));\n  }\n  function _classPrivateFieldSet(s, a, r) {\n    return s.set(_assertClassBrand(s, a), r), r;\n  }\n  function _assertClassBrand(e, t, n) {\n    if ('function' == typeof e ? e === t : e.has(t)) {\n      return arguments.length < 3 ? t : n;\n    }\n    throw new TypeError('Private element is not present on this object');\n  }\n  function _objectWithoutProperties(e, t) {\n    if (null == e) {\n      return {};\n    }\n    var o, r, i = _objectWithoutPropertiesLoose(e, t);\n    if (Object.getOwnPropertySymbols) {\n      var s = Object.getOwnPropertySymbols(e);\n      for (r = 0; r < s.length; r++) {\n        o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n      }\n    }\n    return i;\n  }\n  function _objectWithoutPropertiesLoose(r, e) {\n    if (null == r) {\n      return {};\n    }\n    var t = {};\n    for (var n in r) {\n      if ({}.hasOwnProperty.call(r, n)) {\n        if (e.includes(n)) {\n          continue;\n        }\n        t[n] = r[n];\n      }\n    }\n    return t;\n  }\n  function _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n  }\n  function _nonIterableSpread() {\n    throw new TypeError('Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');\n  }\n  function _iterableToArray(r) {\n    if ('undefined' != typeof Symbol && null != r[Symbol.iterator] || null != r['@@iterator']) {\n      return Array.from(r);\n    }\n  }\n  function _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) {\n      return _arrayLikeToArray(r);\n    }\n  }\n  function _extends() {\n    return _extends = Object.assign ? Object.assign.bind() : function(n) {\n      for (var e = 1; e < arguments.length; e++) {\n        var t = arguments[e];\n        for (var r in t) {\n          ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n        }\n      }\n      return n;\n    }, _extends.apply(null, arguments);\n  }\n  function _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n  }\n  function _nonIterableRest() {\n    throw new TypeError('Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');\n  }\n  function _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : 'undefined' != typeof Symbol && r[Symbol.iterator] || r['@@iterator'];\n    if (null != t) {\n      var e, n, i, u, a = [], f = !0, o = !1;\n      try {\n        if (i = (t = t.call(r)).next, 0 === l) {\n          if (Object(t) !== t) {\n            return;\n          }\n          f = !1;\n        } else {\n          for (;!(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0) {}\n        }\n      } catch (r) {\n        o = !0, n = r;\n      } finally {\n        try {\n          if (!f && null != t['return'] && (u = t['return'](), Object(u) !== u)) {\n            return;\n          }\n        } finally {\n          if (o) {\n            throw n;\n          }\n        }\n      }\n      return a;\n    }\n  }\n  function _arrayWithHoles(r) {\n    if (Array.isArray(r)) {\n      return r;\n    }\n  }\n  function _classCallCheck(a, n) {\n    if (!(a instanceof n)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n  function _defineProperties(e, r) {\n    for (var t = 0; t < r.length; t++) {\n      var o = r[t];\n      o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), \n      Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n  }\n  function _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), \n    Object.defineProperty(e, 'prototype', {\n      writable: !1\n    }), e;\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, 'string');\n    return 'symbol' == _typeof(i) ? i : i + '';\n  }\n  function _toPrimitive(t, r) {\n    if ('object' != _typeof(t) || !t) {\n      return t;\n    }\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || 'default');\n      if ('object' != _typeof(i)) {\n        return i;\n      }\n      throw new TypeError('@@toPrimitive must return a primitive value.');\n    }\n    return ('string' === r ? String : Number)(t);\n  }\n  function _createForOfIteratorHelper(r, e) {\n    var t = 'undefined' != typeof Symbol && r[Symbol.iterator] || r['@@iterator'];\n    if (!t) {\n      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && 'number' == typeof r.length) {\n        t && (r = t);\n        var _n = 0, F = function F() {};\n        return {\n          s: F,\n          n: function n() {\n            return _n >= r.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: r[_n++]\n            };\n          },\n          e: function e(r) {\n            throw r;\n          },\n          f: F\n        };\n      }\n      throw new TypeError('Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');\n    }\n    var o, a = !0, u = !1;\n    return {\n      s: function s() {\n        t = t.call(r);\n      },\n      n: function n() {\n        var r = t.next();\n        return a = r.done, r;\n      },\n      e: function e(r) {\n        u = !0, o = r;\n      },\n      f: function f() {\n        try {\n          a || null == t['return'] || t['return']();\n        } finally {\n          if (u) {\n            throw o;\n          }\n        }\n      }\n    };\n  }\n  function _unsupportedIterableToArray(r, a) {\n    if (r) {\n      if ('string' == typeof r) {\n        return _arrayLikeToArray(r, a);\n      }\n      var t = {}.toString.call(r).slice(8, -1);\n      return 'Object' === t && r.constructor && (t = r.constructor.name), 'Map' === t || 'Set' === t ? Array.from(r) : 'Arguments' === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n  }\n  function _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for (var e = 0, n = Array(a); e < a; e++) {\n      n[e] = r[e];\n    }\n    return n;\n  }\n  function _typeof(o) {\n    '@babel/helpers - typeof';\n    return _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function(o) {\n      return typeof o;\n    } : function(o) {\n      return o && 'function' == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o;\n    }, _typeof(o);\n  }\n  (function(_Class_brand, _path, _CSS, _space, _r, _g, _b, _red, _green, _blue, _Class3_brand) {\n    var __create = Object.create;\n    var __defProp = Object.defineProperty;\n    var __getProtoOf = Object.getPrototypeOf;\n    var __hasOwnProp = Object.prototype.hasOwnProperty;\n    var __getOwnPropNames = Object.getOwnPropertyNames;\n    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n    var __defNormalProp = function __defNormalProp(obj, key, value) {\n      return key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: value\n      }) : obj[key] = value;\n    };\n    var __markAsModule = function __markAsModule(target) {\n      return __defProp(target, '__esModule', {\n        value: true\n      });\n    };\n    var __commonJS = function __commonJS(cb, mod) {\n      return function() {\n        return mod || cb((mod = {\n          exports: {}\n        }).exports, mod), mod.exports;\n      };\n    };\n    var __export = function __export(target, all) {\n      for (var name in all) {\n        __defProp(target, name, {\n          get: all[name],\n          enumerable: true\n        });\n      }\n    };\n    var __exportStar = function __exportStar(target, module, desc) {\n      if (module && _typeof(module) === 'object' || typeof module === 'function') {\n        var _iterator = _createForOfIteratorHelper(__getOwnPropNames(module)), _step;\n        try {\n          var _loop = function _loop() {\n            var key = _step.value;\n            if (!__hasOwnProp.call(target, key) && key !== 'default') {\n              __defProp(target, key, {\n                get: function get() {\n                  return module[key];\n                },\n                enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable\n              });\n            }\n          };\n          for (_iterator.s(); !(_step = _iterator.n()).done; ) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return target;\n    };\n    var __toModule = function __toModule(module) {\n      return __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, 'default', module && module.__esModule && 'default' in module ? {\n        get: function get() {\n          return module['default'];\n        },\n        enumerable: true\n      } : {\n        value: module,\n        enumerable: true\n      })), module);\n    };\n    var __publicField = function __publicField(obj, key, value) {\n      __defNormalProp(obj, _typeof(key) !== 'symbol' ? key + '' : key, value);\n      return value;\n    };\n    var require_noop = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function() {};\n    });\n    var require_is_value = __commonJS(function(exports, module) {\n      'use strict';\n      var _undefined = require_noop()();\n      module.exports = function(val) {\n        return val !== _undefined && val !== null;\n      };\n    });\n    var require_normalize_options = __commonJS(function(exports, module) {\n      'use strict';\n      var isValue = require_is_value();\n      var forEach = Array.prototype.forEach;\n      var create = Object.create;\n      var process2 = function process2(src, obj) {\n        var key;\n        for (key in src) {\n          obj[key] = src[key];\n        }\n      };\n      module.exports = function(opts1) {\n        var result = create(null);\n        forEach.call(arguments, function(options) {\n          if (!isValue(options)) {\n            return;\n          }\n          process2(Object(options), result);\n        });\n        return result;\n      };\n    });\n    var require_is_implemented = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function() {\n        var sign = Math.sign;\n        if (typeof sign !== 'function') {\n          return false;\n        }\n        return sign(10) === 1 && sign(-20) === -1;\n      };\n    });\n    var require_shim = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(value) {\n        value = Number(value);\n        if (isNaN(value) || value === 0) {\n          return value;\n        }\n        return value > 0 ? 1 : -1;\n      };\n    });\n    var require_sign = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_is_implemented()() ? Math.sign : require_shim();\n    });\n    var require_to_integer = __commonJS(function(exports, module) {\n      'use strict';\n      var sign = require_sign();\n      var abs = Math.abs;\n      var floor = Math.floor;\n      module.exports = function(value) {\n        if (isNaN(value)) {\n          return 0;\n        }\n        value = Number(value);\n        if (value === 0 || !isFinite(value)) {\n          return value;\n        }\n        return sign(value) * floor(abs(value));\n      };\n    });\n    var require_to_pos_integer = __commonJS(function(exports, module) {\n      'use strict';\n      var toInteger = require_to_integer();\n      var max2 = Math.max;\n      module.exports = function(value) {\n        return max2(0, toInteger(value));\n      };\n    });\n    var require_resolve_length = __commonJS(function(exports, module) {\n      'use strict';\n      var toPosInt = require_to_pos_integer();\n      module.exports = function(optsLength, fnLength, isAsync) {\n        var length;\n        if (isNaN(optsLength)) {\n          length = fnLength;\n          if (!(length >= 0)) {\n            return 1;\n          }\n          if (isAsync && length) {\n            return length - 1;\n          }\n          return length;\n        }\n        if (optsLength === false) {\n          return false;\n        }\n        return toPosInt(optsLength);\n      };\n    });\n    var require_valid_callable = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(fn) {\n        if (typeof fn !== 'function') {\n          throw new TypeError(fn + ' is not a function');\n        }\n        return fn;\n      };\n    });\n    var require_valid_value = __commonJS(function(exports, module) {\n      'use strict';\n      var isValue = require_is_value();\n      module.exports = function(value) {\n        if (!isValue(value)) {\n          throw new TypeError('Cannot use null or undefined');\n        }\n        return value;\n      };\n    });\n    var require_iterate = __commonJS(function(exports, module) {\n      'use strict';\n      var callable = require_valid_callable();\n      var value = require_valid_value();\n      var bind = Function.prototype.bind;\n      var call = Function.prototype.call;\n      var keys = Object.keys;\n      var objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n      module.exports = function(method, defVal) {\n        return function(obj, cb) {\n          var list, thisArg = arguments[2], compareFn = arguments[3];\n          obj = Object(value(obj));\n          callable(cb);\n          list = keys(obj);\n          if (compareFn) {\n            list.sort(typeof compareFn === 'function' ? bind.call(compareFn, obj) : void 0);\n          }\n          if (typeof method !== 'function') {\n            method = list[method];\n          }\n          return call.call(method, list, function(key, index) {\n            if (!objPropertyIsEnumerable.call(obj, key)) {\n              return defVal;\n            }\n            return call.call(cb, thisArg, obj[key], key, obj, index);\n          });\n        };\n      };\n    });\n    var require_for_each = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_iterate()('forEach');\n    });\n    var require_registered_extensions = __commonJS(function() {\n      'use strict';\n    });\n    var require_is_implemented2 = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function() {\n        var assign = Object.assign, obj;\n        if (typeof assign !== 'function') {\n          return false;\n        }\n        obj = {\n          foo: 'raz'\n        };\n        assign(obj, {\n          bar: 'dwa'\n        }, {\n          trzy: 'trzy'\n        });\n        return obj.foo + obj.bar + obj.trzy === 'razdwatrzy';\n      };\n    });\n    var require_is_implemented3 = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function() {\n        try {\n          Object.keys('primitive');\n          return true;\n        } catch (e) {\n          return false;\n        }\n      };\n    });\n    var require_shim2 = __commonJS(function(exports, module) {\n      'use strict';\n      var isValue = require_is_value();\n      var keys = Object.keys;\n      module.exports = function(object) {\n        return keys(isValue(object) ? Object(object) : object);\n      };\n    });\n    var require_keys = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_is_implemented3()() ? Object.keys : require_shim2();\n    });\n    var require_shim3 = __commonJS(function(exports, module) {\n      'use strict';\n      var keys = require_keys();\n      var value = require_valid_value();\n      var max2 = Math.max;\n      module.exports = function(dest, src) {\n        var error, i, length = max2(arguments.length, 2), assign;\n        dest = Object(value(dest));\n        assign = function assign(key) {\n          try {\n            dest[key] = src[key];\n          } catch (e) {\n            if (!error) {\n              error = e;\n            }\n          }\n        };\n        for (i = 1; i < length; ++i) {\n          src = arguments[i];\n          keys(src).forEach(assign);\n        }\n        if (error !== void 0) {\n          throw error;\n        }\n        return dest;\n      };\n    });\n    var require_assign = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_is_implemented2()() ? Object.assign : require_shim3();\n    });\n    var require_is_object = __commonJS(function(exports, module) {\n      'use strict';\n      var isValue = require_is_value();\n      var map = {\n        function: true,\n        object: true\n      };\n      module.exports = function(value) {\n        return isValue(value) && map[_typeof(value)] || false;\n      };\n    });\n    var require_custom = __commonJS(function(exports, module) {\n      'use strict';\n      var assign = require_assign();\n      var isObject = require_is_object();\n      var isValue = require_is_value();\n      var captureStackTrace = Error.captureStackTrace;\n      module.exports = function(message) {\n        var err2 = new Error(message), code = arguments[1], ext = arguments[2];\n        if (!isValue(ext)) {\n          if (isObject(code)) {\n            ext = code;\n            code = null;\n          }\n        }\n        if (isValue(ext)) {\n          assign(err2, ext);\n        }\n        if (isValue(code)) {\n          err2.code = code;\n        }\n        if (captureStackTrace) {\n          captureStackTrace(err2, module.exports);\n        }\n        return err2;\n      };\n    });\n    var require_mixin = __commonJS(function(exports, module) {\n      'use strict';\n      var value = require_valid_value();\n      var defineProperty = Object.defineProperty;\n      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n      var getOwnPropertyNames = Object.getOwnPropertyNames;\n      var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n      module.exports = function(target, source) {\n        var error, sourceObject = Object(value(source));\n        target = Object(value(target));\n        getOwnPropertyNames(sourceObject).forEach(function(name) {\n          try {\n            defineProperty(target, name, getOwnPropertyDescriptor(source, name));\n          } catch (e) {\n            error = e;\n          }\n        });\n        if (typeof getOwnPropertySymbols === 'function') {\n          getOwnPropertySymbols(sourceObject).forEach(function(symbol) {\n            try {\n              defineProperty(target, symbol, getOwnPropertyDescriptor(source, symbol));\n            } catch (e) {\n              error = e;\n            }\n          });\n        }\n        if (error !== void 0) {\n          throw error;\n        }\n        return target;\n      };\n    });\n    var require_define_length = __commonJS(function(exports, module) {\n      'use strict';\n      var toPosInt = require_to_pos_integer();\n      var test = function test(arg1, arg2) {\n        return arg2;\n      };\n      var desc;\n      var defineProperty;\n      var generate;\n      var mixin;\n      try {\n        Object.defineProperty(test, 'length', {\n          configurable: true,\n          writable: false,\n          enumerable: false,\n          value: 1\n        });\n      } catch (ignore) {}\n      if (test.length === 1) {\n        desc = {\n          configurable: true,\n          writable: false,\n          enumerable: false\n        };\n        defineProperty = Object.defineProperty;\n        module.exports = function(fn, length) {\n          length = toPosInt(length);\n          if (fn.length === length) {\n            return fn;\n          }\n          desc.value = length;\n          return defineProperty(fn, 'length', desc);\n        };\n      } else {\n        mixin = require_mixin();\n        generate = function() {\n          var cache2 = [];\n          return function(length) {\n            var args, i = 0;\n            if (cache2[length]) {\n              return cache2[length];\n            }\n            args = [];\n            while (length--) {\n              args.push('a' + (++i).toString(36));\n            }\n            return new Function('fn', 'return function (' + args.join(', ') + ') { return fn.apply(this, arguments); };');\n          };\n        }();\n        module.exports = function(src, length) {\n          var target;\n          length = toPosInt(length);\n          if (src.length === length) {\n            return src;\n          }\n          target = generate(length)(src);\n          try {\n            mixin(target, src);\n          } catch (ignore) {}\n          return target;\n        };\n      }\n    });\n    var require_is = __commonJS(function(exports, module) {\n      'use strict';\n      var _undefined = void 0;\n      module.exports = function(value) {\n        return value !== _undefined && value !== null;\n      };\n    });\n    var require_is2 = __commonJS(function(exports, module) {\n      'use strict';\n      var isValue = require_is();\n      var possibleTypes = {\n        object: true,\n        function: true,\n        undefined: true\n      };\n      module.exports = function(value) {\n        if (!isValue(value)) {\n          return false;\n        }\n        return hasOwnProperty.call(possibleTypes, _typeof(value));\n      };\n    });\n    var require_is3 = __commonJS(function(exports, module) {\n      'use strict';\n      var isObject = require_is2();\n      module.exports = function(value) {\n        if (!isObject(value)) {\n          return false;\n        }\n        try {\n          if (!value.constructor) {\n            return false;\n          }\n          return value.constructor.prototype === value;\n        } catch (error) {\n          return false;\n        }\n      };\n    });\n    var require_is4 = __commonJS(function(exports, module) {\n      'use strict';\n      var isPrototype = require_is3();\n      module.exports = function(value) {\n        if (typeof value !== 'function') {\n          return false;\n        }\n        if (!hasOwnProperty.call(value, 'length')) {\n          return false;\n        }\n        try {\n          if (typeof value.length !== 'number') {\n            return false;\n          }\n          if (typeof value.call !== 'function') {\n            return false;\n          }\n          if (typeof value.apply !== 'function') {\n            return false;\n          }\n        } catch (error) {\n          return false;\n        }\n        return !isPrototype(value);\n      };\n    });\n    var require_is5 = __commonJS(function(exports, module) {\n      'use strict';\n      var isFunction = require_is4();\n      var classRe = /^\\s*class[\\s{/}]/;\n      var functionToString = Function.prototype.toString;\n      module.exports = function(value) {\n        if (!isFunction(value)) {\n          return false;\n        }\n        if (classRe.test(functionToString.call(value))) {\n          return false;\n        }\n        return true;\n      };\n    });\n    var require_is_implemented4 = __commonJS(function(exports, module) {\n      'use strict';\n      var str = 'razdwatrzy';\n      module.exports = function() {\n        if (typeof str.contains !== 'function') {\n          return false;\n        }\n        return str.contains('dwa') === true && str.contains('foo') === false;\n      };\n    });\n    var require_shim4 = __commonJS(function(exports, module) {\n      'use strict';\n      var indexOf = String.prototype.indexOf;\n      module.exports = function(searchString) {\n        return indexOf.call(this, searchString, arguments[1]) > -1;\n      };\n    });\n    var require_contains = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_is_implemented4()() ? String.prototype.contains : require_shim4();\n    });\n    var require_d = __commonJS(function(exports, module) {\n      'use strict';\n      var isValue = require_is();\n      var isPlainFunction = require_is5();\n      var assign = require_assign();\n      var normalizeOpts = require_normalize_options();\n      var contains3 = require_contains();\n      var d2 = module.exports = function(dscr, value) {\n        var c4, e, w, options, desc;\n        if (arguments.length < 2 || typeof dscr !== 'string') {\n          options = value;\n          value = dscr;\n          dscr = null;\n        } else {\n          options = arguments[2];\n        }\n        if (isValue(dscr)) {\n          c4 = contains3.call(dscr, 'c');\n          e = contains3.call(dscr, 'e');\n          w = contains3.call(dscr, 'w');\n        } else {\n          c4 = w = true;\n          e = false;\n        }\n        desc = {\n          value: value,\n          configurable: c4,\n          enumerable: e,\n          writable: w\n        };\n        return !options ? desc : assign(normalizeOpts(options), desc);\n      };\n      d2.gs = function(dscr, get2, set2) {\n        var c4, e, options, desc;\n        if (typeof dscr !== 'string') {\n          options = set2;\n          set2 = get2;\n          get2 = dscr;\n          dscr = null;\n        } else {\n          options = arguments[3];\n        }\n        if (!isValue(get2)) {\n          get2 = void 0;\n        } else if (!isPlainFunction(get2)) {\n          options = get2;\n          get2 = set2 = void 0;\n        } else if (!isValue(set2)) {\n          set2 = void 0;\n        } else if (!isPlainFunction(set2)) {\n          options = set2;\n          set2 = void 0;\n        }\n        if (isValue(dscr)) {\n          c4 = contains3.call(dscr, 'c');\n          e = contains3.call(dscr, 'e');\n        } else {\n          c4 = true;\n          e = false;\n        }\n        desc = {\n          get: get2,\n          set: set2,\n          configurable: c4,\n          enumerable: e\n        };\n        return !options ? desc : assign(normalizeOpts(options), desc);\n      };\n    });\n    var require_event_emitter = __commonJS(function(exports, module) {\n      'use strict';\n      var d2 = require_d();\n      var callable = require_valid_callable();\n      var apply = Function.prototype.apply;\n      var call = Function.prototype.call;\n      var create = Object.create;\n      var defineProperty = Object.defineProperty;\n      var defineProperties = Object.defineProperties;\n      var hasOwnProperty2 = Object.prototype.hasOwnProperty;\n      var descriptor = {\n        configurable: true,\n        enumerable: false,\n        writable: true\n      };\n      var on;\n      var once;\n      var off;\n      var emit;\n      var methods;\n      var descriptors;\n      var base;\n      on = function on(type2, listener) {\n        var data;\n        callable(listener);\n        if (!hasOwnProperty2.call(this, '__ee__')) {\n          data = descriptor.value = create(null);\n          defineProperty(this, '__ee__', descriptor);\n          descriptor.value = null;\n        } else {\n          data = this.__ee__;\n        }\n        if (!data[type2]) {\n          data[type2] = listener;\n        } else if (_typeof(data[type2]) === 'object') {\n          data[type2].push(listener);\n        } else {\n          data[type2] = [ data[type2], listener ];\n        }\n        return this;\n      };\n      once = function once(type2, listener) {\n        var _once, self2;\n        callable(listener);\n        self2 = this;\n        on.call(this, type2, _once = function once2() {\n          off.call(self2, type2, _once);\n          apply.call(listener, this, arguments);\n        });\n        _once.__eeOnceListener__ = listener;\n        return this;\n      };\n      off = function off(type2, listener) {\n        var data, listeners, candidate, i;\n        callable(listener);\n        if (!hasOwnProperty2.call(this, '__ee__')) {\n          return this;\n        }\n        data = this.__ee__;\n        if (!data[type2]) {\n          return this;\n        }\n        listeners = data[type2];\n        if (_typeof(listeners) === 'object') {\n          for (i = 0; candidate = listeners[i]; ++i) {\n            if (candidate === listener || candidate.__eeOnceListener__ === listener) {\n              if (listeners.length === 2) {\n                data[type2] = listeners[i ? 0 : 1];\n              } else {\n                listeners.splice(i, 1);\n              }\n            }\n          }\n        } else {\n          if (listeners === listener || listeners.__eeOnceListener__ === listener) {\n            delete data[type2];\n          }\n        }\n        return this;\n      };\n      emit = function emit(type2) {\n        var i, l, listener, listeners, args;\n        if (!hasOwnProperty2.call(this, '__ee__')) {\n          return;\n        }\n        listeners = this.__ee__[type2];\n        if (!listeners) {\n          return;\n        }\n        if (_typeof(listeners) === 'object') {\n          l = arguments.length;\n          args = new Array(l - 1);\n          for (i = 1; i < l; ++i) {\n            args[i - 1] = arguments[i];\n          }\n          listeners = listeners.slice();\n          for (i = 0; listener = listeners[i]; ++i) {\n            apply.call(listener, this, args);\n          }\n        } else {\n          switch (arguments.length) {\n           case 1:\n            call.call(listeners, this);\n            break;\n\n           case 2:\n            call.call(listeners, this, arguments[1]);\n            break;\n\n           case 3:\n            call.call(listeners, this, arguments[1], arguments[2]);\n            break;\n\n           default:\n            l = arguments.length;\n            args = new Array(l - 1);\n            for (i = 1; i < l; ++i) {\n              args[i - 1] = arguments[i];\n            }\n            apply.call(listeners, this, args);\n          }\n        }\n      };\n      methods = {\n        on: on,\n        once: once,\n        off: off,\n        emit: emit\n      };\n      descriptors = {\n        on: d2(on),\n        once: d2(once),\n        off: d2(off),\n        emit: d2(emit)\n      };\n      base = defineProperties({}, descriptors);\n      module.exports = exports = function exports(o) {\n        return o == null ? create(base) : defineProperties(Object(o), descriptors);\n      };\n      exports.methods = methods;\n    });\n    var require_is_implemented5 = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function() {\n        var from = Array.from, arr, result;\n        if (typeof from !== 'function') {\n          return false;\n        }\n        arr = [ 'raz', 'dwa' ];\n        result = from(arr);\n        return Boolean(result && result !== arr && result[1] === 'dwa');\n      };\n    });\n    var require_is_implemented6 = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function() {\n        if ((typeof globalThis === 'undefined' ? 'undefined' : _typeof(globalThis)) !== 'object') {\n          return false;\n        }\n        if (!globalThis) {\n          return false;\n        }\n        return globalThis.Array === Array;\n      };\n    });\n    var require_implementation = __commonJS(function(exports, module) {\n      var naiveFallback = function naiveFallback() {\n        if ((typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self) {\n          return self;\n        }\n        if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window) {\n          return window;\n        }\n        throw new Error('Unable to resolve global `this`');\n      };\n      module.exports = function() {\n        if (this) {\n          return this;\n        }\n        try {\n          Object.defineProperty(Object.prototype, '__global__', {\n            get: function get() {\n              return this;\n            },\n            configurable: true\n          });\n        } catch (error) {\n          return naiveFallback();\n        }\n        try {\n          if (!__global__) {\n            return naiveFallback();\n          }\n          return __global__;\n        } finally {\n          delete Object.prototype.__global__;\n        }\n      }();\n    });\n    var require_global_this = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_is_implemented6()() ? globalThis : require_implementation();\n    });\n    var require_is_implemented7 = __commonJS(function(exports, module) {\n      'use strict';\n      var global2 = require_global_this();\n      var validTypes = {\n        object: true,\n        symbol: true\n      };\n      module.exports = function() {\n        var Symbol2 = global2.Symbol;\n        var symbol;\n        if (typeof Symbol2 !== 'function') {\n          return false;\n        }\n        symbol = Symbol2('test symbol');\n        try {\n          String(symbol);\n        } catch (e) {\n          return false;\n        }\n        if (!validTypes[_typeof(Symbol2.iterator)]) {\n          return false;\n        }\n        if (!validTypes[_typeof(Symbol2.toPrimitive)]) {\n          return false;\n        }\n        if (!validTypes[_typeof(Symbol2.toStringTag)]) {\n          return false;\n        }\n        return true;\n      };\n    });\n    var require_is_symbol = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(value) {\n        if (!value) {\n          return false;\n        }\n        if (_typeof(value) === 'symbol') {\n          return true;\n        }\n        if (!value.constructor) {\n          return false;\n        }\n        if (value.constructor.name !== 'Symbol') {\n          return false;\n        }\n        return value[value.constructor.toStringTag] === 'Symbol';\n      };\n    });\n    var require_validate_symbol = __commonJS(function(exports, module) {\n      'use strict';\n      var isSymbol = require_is_symbol();\n      module.exports = function(value) {\n        if (!isSymbol(value)) {\n          throw new TypeError(value + ' is not a symbol');\n        }\n        return value;\n      };\n    });\n    var require_generate_name = __commonJS(function(exports, module) {\n      'use strict';\n      var d2 = require_d();\n      var create = Object.create;\n      var defineProperty = Object.defineProperty;\n      var objPrototype = Object.prototype;\n      var created = create(null);\n      module.exports = function(desc) {\n        var postfix = 0, name, ie11BugWorkaround;\n        while (created[desc + (postfix || '')]) {\n          ++postfix;\n        }\n        desc += postfix || '';\n        created[desc] = true;\n        name = '@@' + desc;\n        defineProperty(objPrototype, name, d2.gs(null, function(value) {\n          if (ie11BugWorkaround) {\n            return;\n          }\n          ie11BugWorkaround = true;\n          defineProperty(this, name, d2(value));\n          ie11BugWorkaround = false;\n        }));\n        return name;\n      };\n    });\n    var require_standard_symbols = __commonJS(function(exports, module) {\n      'use strict';\n      var d2 = require_d();\n      var NativeSymbol = require_global_this().Symbol;\n      module.exports = function(SymbolPolyfill) {\n        return Object.defineProperties(SymbolPolyfill, {\n          hasInstance: d2('', NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill('hasInstance')),\n          isConcatSpreadable: d2('', NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill('isConcatSpreadable')),\n          iterator: d2('', NativeSymbol && NativeSymbol.iterator || SymbolPolyfill('iterator')),\n          match: d2('', NativeSymbol && NativeSymbol.match || SymbolPolyfill('match')),\n          replace: d2('', NativeSymbol && NativeSymbol.replace || SymbolPolyfill('replace')),\n          search: d2('', NativeSymbol && NativeSymbol.search || SymbolPolyfill('search')),\n          species: d2('', NativeSymbol && NativeSymbol.species || SymbolPolyfill('species')),\n          split: d2('', NativeSymbol && NativeSymbol.split || SymbolPolyfill('split')),\n          toPrimitive: d2('', NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill('toPrimitive')),\n          toStringTag: d2('', NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill('toStringTag')),\n          unscopables: d2('', NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill('unscopables'))\n        });\n      };\n    });\n    var require_symbol_registry = __commonJS(function(exports, module) {\n      'use strict';\n      var d2 = require_d();\n      var validateSymbol = require_validate_symbol();\n      var registry = Object.create(null);\n      module.exports = function(SymbolPolyfill) {\n        return Object.defineProperties(SymbolPolyfill, {\n          for: d2(function(key) {\n            if (registry[key]) {\n              return registry[key];\n            }\n            return registry[key] = SymbolPolyfill(String(key));\n          }),\n          keyFor: d2(function(symbol) {\n            var key;\n            validateSymbol(symbol);\n            for (key in registry) {\n              if (registry[key] === symbol) {\n                return key;\n              }\n            }\n            return void 0;\n          })\n        });\n      };\n    });\n    var require_polyfill = __commonJS(function(exports, module) {\n      'use strict';\n      var d2 = require_d();\n      var validateSymbol = require_validate_symbol();\n      var NativeSymbol = require_global_this().Symbol;\n      var generateName = require_generate_name();\n      var setupStandardSymbols = require_standard_symbols();\n      var setupSymbolRegistry = require_symbol_registry();\n      var create = Object.create;\n      var defineProperties = Object.defineProperties;\n      var defineProperty = Object.defineProperty;\n      var SymbolPolyfill;\n      var HiddenSymbol;\n      var isNativeSafe;\n      if (typeof NativeSymbol === 'function') {\n        try {\n          String(NativeSymbol());\n          isNativeSafe = true;\n        } catch (ignore) {}\n      } else {\n        NativeSymbol = null;\n      }\n      HiddenSymbol = function Symbol2(description) {\n        if (this instanceof HiddenSymbol) {\n          throw new TypeError('Symbol is not a constructor');\n        }\n        return SymbolPolyfill(description);\n      };\n      module.exports = SymbolPolyfill = function Symbol2(description) {\n        var symbol;\n        if (this instanceof Symbol2) {\n          throw new TypeError('Symbol is not a constructor');\n        }\n        if (isNativeSafe) {\n          return NativeSymbol(description);\n        }\n        symbol = create(HiddenSymbol.prototype);\n        description = description === void 0 ? '' : String(description);\n        return defineProperties(symbol, {\n          __description__: d2('', description),\n          __name__: d2('', generateName(description))\n        });\n      };\n      setupStandardSymbols(SymbolPolyfill);\n      setupSymbolRegistry(SymbolPolyfill);\n      defineProperties(HiddenSymbol.prototype, {\n        constructor: d2(SymbolPolyfill),\n        toString: d2('', function() {\n          return this.__name__;\n        })\n      });\n      defineProperties(SymbolPolyfill.prototype, {\n        toString: d2(function() {\n          return 'Symbol (' + validateSymbol(this).__description__ + ')';\n        }),\n        valueOf: d2(function() {\n          return validateSymbol(this);\n        })\n      });\n      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d2('', function() {\n        var symbol = validateSymbol(this);\n        if (_typeof(symbol) === 'symbol') {\n          return symbol;\n        }\n        return symbol.toString();\n      }));\n      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d2('c', 'Symbol'));\n      defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d2('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));\n      defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d2('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));\n    });\n    var require_es6_symbol = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_is_implemented7()() ? require_global_this().Symbol : require_polyfill();\n    });\n    var require_is_arguments = __commonJS(function(exports, module) {\n      'use strict';\n      var objToString = Object.prototype.toString;\n      var id = objToString.call(function() {\n        return arguments;\n      }());\n      module.exports = function(value) {\n        return objToString.call(value) === id;\n      };\n    });\n    var require_is_function = __commonJS(function(exports, module) {\n      'use strict';\n      var objToString = Object.prototype.toString;\n      var isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);\n      module.exports = function(value) {\n        return typeof value === 'function' && isFunctionStringTag(objToString.call(value));\n      };\n    });\n    var require_is_string = __commonJS(function(exports, module) {\n      'use strict';\n      var objToString = Object.prototype.toString;\n      var id = objToString.call('');\n      module.exports = function(value) {\n        return typeof value === 'string' || value && _typeof(value) === 'object' && (value instanceof String || objToString.call(value) === id) || false;\n      };\n    });\n    var require_shim5 = __commonJS(function(exports, module) {\n      'use strict';\n      var iteratorSymbol = require_es6_symbol().iterator;\n      var isArguments = require_is_arguments();\n      var isFunction = require_is_function();\n      var toPosInt = require_to_pos_integer();\n      var callable = require_valid_callable();\n      var validValue = require_valid_value();\n      var isValue = require_is_value();\n      var isString2 = require_is_string();\n      var isArray = Array.isArray;\n      var call = Function.prototype.call;\n      var desc = {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: null\n      };\n      var defineProperty = Object.defineProperty;\n      module.exports = function(arrayLike) {\n        var mapFn = arguments[1], thisArg = arguments[2], Context2, i, j, arr, length, code, iterator, result, getIterator, value;\n        arrayLike = Object(validValue(arrayLike));\n        if (isValue(mapFn)) {\n          callable(mapFn);\n        }\n        if (!this || this === Array || !isFunction(this)) {\n          if (!mapFn) {\n            if (isArguments(arrayLike)) {\n              length = arrayLike.length;\n              if (length !== 1) {\n                return Array.apply(null, arrayLike);\n              }\n              arr = new Array(1);\n              arr[0] = arrayLike[0];\n              return arr;\n            }\n            if (isArray(arrayLike)) {\n              arr = new Array(length = arrayLike.length);\n              for (i = 0; i < length; ++i) {\n                arr[i] = arrayLike[i];\n              }\n              return arr;\n            }\n          }\n          arr = [];\n        } else {\n          Context2 = this;\n        }\n        if (!isArray(arrayLike)) {\n          if ((getIterator = arrayLike[iteratorSymbol]) !== void 0) {\n            iterator = callable(getIterator).call(arrayLike);\n            if (Context2) {\n              arr = new Context2();\n            }\n            result = iterator.next();\n            i = 0;\n            while (!result.done) {\n              value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;\n              if (Context2) {\n                desc.value = value;\n                defineProperty(arr, i, desc);\n              } else {\n                arr[i] = value;\n              }\n              result = iterator.next();\n              ++i;\n            }\n            length = i;\n          } else if (isString2(arrayLike)) {\n            length = arrayLike.length;\n            if (Context2) {\n              arr = new Context2();\n            }\n            for (i = 0, j = 0; i < length; ++i) {\n              value = arrayLike[i];\n              if (i + 1 < length) {\n                code = value.charCodeAt(0);\n                if (code >= 55296 && code <= 56319) {\n                  value += arrayLike[++i];\n                }\n              }\n              value = mapFn ? call.call(mapFn, thisArg, value, j) : value;\n              if (Context2) {\n                desc.value = value;\n                defineProperty(arr, j, desc);\n              } else {\n                arr[j] = value;\n              }\n              ++j;\n            }\n            length = j;\n          }\n        }\n        if (length === void 0) {\n          length = toPosInt(arrayLike.length);\n          if (Context2) {\n            arr = new Context2(length);\n          }\n          for (i = 0; i < length; ++i) {\n            value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];\n            if (Context2) {\n              desc.value = value;\n              defineProperty(arr, i, desc);\n            } else {\n              arr[i] = value;\n            }\n          }\n        }\n        if (Context2) {\n          desc.value = null;\n          arr.length = length;\n        }\n        return arr;\n      };\n    });\n    var require_from = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_is_implemented5()() ? Array.from : require_shim5();\n    });\n    var require_to_array = __commonJS(function(exports, module) {\n      'use strict';\n      var from = require_from();\n      var isArray = Array.isArray;\n      module.exports = function(arrayLike) {\n        return isArray(arrayLike) ? arrayLike : from(arrayLike);\n      };\n    });\n    var require_resolve_resolve = __commonJS(function(exports, module) {\n      'use strict';\n      var toArray2 = require_to_array();\n      var isValue = require_is_value();\n      var callable = require_valid_callable();\n      var slice = Array.prototype.slice;\n      var resolveArgs;\n      resolveArgs = function resolveArgs(args) {\n        return this.map(function(resolve, i) {\n          return resolve ? resolve(args[i]) : args[i];\n        }).concat(slice.call(args, this.length));\n      };\n      module.exports = function(resolvers) {\n        resolvers = toArray2(resolvers);\n        resolvers.forEach(function(resolve) {\n          if (isValue(resolve)) {\n            callable(resolve);\n          }\n        });\n        return resolveArgs.bind(resolvers);\n      };\n    });\n    var require_resolve_normalize = __commonJS(function(exports, module) {\n      'use strict';\n      var callable = require_valid_callable();\n      module.exports = function(userNormalizer) {\n        var normalizer;\n        if (typeof userNormalizer === 'function') {\n          return {\n            set: userNormalizer,\n            get: userNormalizer\n          };\n        }\n        normalizer = {\n          get: callable(userNormalizer.get)\n        };\n        if (userNormalizer.set !== void 0) {\n          normalizer.set = callable(userNormalizer.set);\n          if (userNormalizer['delete']) {\n            normalizer['delete'] = callable(userNormalizer['delete']);\n          }\n          if (userNormalizer.clear) {\n            normalizer.clear = callable(userNormalizer.clear);\n          }\n          return normalizer;\n        }\n        normalizer.set = normalizer.get;\n        return normalizer;\n      };\n    });\n    var require_configure_map = __commonJS(function(exports, module) {\n      'use strict';\n      var customError = require_custom();\n      var defineLength = require_define_length();\n      var d2 = require_d();\n      var ee = require_event_emitter().methods;\n      var resolveResolve = require_resolve_resolve();\n      var resolveNormalize = require_resolve_normalize();\n      var apply = Function.prototype.apply;\n      var call = Function.prototype.call;\n      var create = Object.create;\n      var defineProperties = Object.defineProperties;\n      var _on = ee.on;\n      var emit = ee.emit;\n      module.exports = function(original, length, options) {\n        var cache2 = create(null), conf, memLength, get2, set2, del, _clear, extDel, extGet, extHas, normalizer, getListeners, setListeners, deleteListeners, memoized, resolve;\n        if (length !== false) {\n          memLength = length;\n        } else if (isNaN(original.length)) {\n          memLength = 1;\n        } else {\n          memLength = original.length;\n        }\n        if (options.normalizer) {\n          normalizer = resolveNormalize(options.normalizer);\n          get2 = normalizer.get;\n          set2 = normalizer.set;\n          del = normalizer['delete'];\n          _clear = normalizer.clear;\n        }\n        if (options.resolvers != null) {\n          resolve = resolveResolve(options.resolvers);\n        }\n        if (get2) {\n          memoized = defineLength(function(arg) {\n            var id, result, args = arguments;\n            if (resolve) {\n              args = resolve(args);\n            }\n            id = get2(args);\n            if (id !== null) {\n              if (hasOwnProperty.call(cache2, id)) {\n                if (getListeners) {\n                  conf.emit('get', id, args, this);\n                }\n                return cache2[id];\n              }\n            }\n            if (args.length === 1) {\n              result = call.call(original, this, args[0]);\n            } else {\n              result = apply.call(original, this, args);\n            }\n            if (id === null) {\n              id = get2(args);\n              if (id !== null) {\n                throw customError('Circular invocation', 'CIRCULAR_INVOCATION');\n              }\n              id = set2(args);\n            } else if (hasOwnProperty.call(cache2, id)) {\n              throw customError('Circular invocation', 'CIRCULAR_INVOCATION');\n            }\n            cache2[id] = result;\n            if (setListeners) {\n              conf.emit('set', id, null, result);\n            }\n            return result;\n          }, memLength);\n        } else if (length === 0) {\n          memoized = function memoized() {\n            var result;\n            if (hasOwnProperty.call(cache2, 'data')) {\n              if (getListeners) {\n                conf.emit('get', 'data', arguments, this);\n              }\n              return cache2.data;\n            }\n            if (arguments.length) {\n              result = apply.call(original, this, arguments);\n            } else {\n              result = call.call(original, this);\n            }\n            if (hasOwnProperty.call(cache2, 'data')) {\n              throw customError('Circular invocation', 'CIRCULAR_INVOCATION');\n            }\n            cache2.data = result;\n            if (setListeners) {\n              conf.emit('set', 'data', null, result);\n            }\n            return result;\n          };\n        } else {\n          memoized = function memoized(arg) {\n            var result, args = arguments, id;\n            if (resolve) {\n              args = resolve(arguments);\n            }\n            id = String(args[0]);\n            if (hasOwnProperty.call(cache2, id)) {\n              if (getListeners) {\n                conf.emit('get', id, args, this);\n              }\n              return cache2[id];\n            }\n            if (args.length === 1) {\n              result = call.call(original, this, args[0]);\n            } else {\n              result = apply.call(original, this, args);\n            }\n            if (hasOwnProperty.call(cache2, id)) {\n              throw customError('Circular invocation', 'CIRCULAR_INVOCATION');\n            }\n            cache2[id] = result;\n            if (setListeners) {\n              conf.emit('set', id, null, result);\n            }\n            return result;\n          };\n        }\n        conf = {\n          original: original,\n          memoized: memoized,\n          profileName: options.profileName,\n          get: function get(args) {\n            if (resolve) {\n              args = resolve(args);\n            }\n            if (get2) {\n              return get2(args);\n            }\n            return String(args[0]);\n          },\n          has: function has(id) {\n            return hasOwnProperty.call(cache2, id);\n          },\n          delete: function _delete(id) {\n            var result;\n            if (!hasOwnProperty.call(cache2, id)) {\n              return;\n            }\n            if (del) {\n              del(id);\n            }\n            result = cache2[id];\n            delete cache2[id];\n            if (deleteListeners) {\n              conf.emit('delete', id, result);\n            }\n          },\n          clear: function clear() {\n            var oldCache = cache2;\n            if (_clear) {\n              _clear();\n            }\n            cache2 = create(null);\n            conf.emit('clear', oldCache);\n          },\n          on: function on(type2, listener) {\n            if (type2 === 'get') {\n              getListeners = true;\n            } else if (type2 === 'set') {\n              setListeners = true;\n            } else if (type2 === 'delete') {\n              deleteListeners = true;\n            }\n            return _on.call(this, type2, listener);\n          },\n          emit: emit,\n          updateEnv: function updateEnv() {\n            original = conf.original;\n          }\n        };\n        if (get2) {\n          extDel = defineLength(function(arg) {\n            var id, args = arguments;\n            if (resolve) {\n              args = resolve(args);\n            }\n            id = get2(args);\n            if (id === null) {\n              return;\n            }\n            conf['delete'](id);\n          }, memLength);\n        } else if (length === 0) {\n          extDel = function extDel() {\n            return conf['delete']('data');\n          };\n        } else {\n          extDel = function extDel(arg) {\n            if (resolve) {\n              arg = resolve(arguments)[0];\n            }\n            return conf['delete'](arg);\n          };\n        }\n        extGet = defineLength(function() {\n          var id, args = arguments;\n          if (length === 0) {\n            return cache2.data;\n          }\n          if (resolve) {\n            args = resolve(args);\n          }\n          if (get2) {\n            id = get2(args);\n          } else {\n            id = String(args[0]);\n          }\n          return cache2[id];\n        });\n        extHas = defineLength(function() {\n          var id, args = arguments;\n          if (length === 0) {\n            return conf.has('data');\n          }\n          if (resolve) {\n            args = resolve(args);\n          }\n          if (get2) {\n            id = get2(args);\n          } else {\n            id = String(args[0]);\n          }\n          if (id === null) {\n            return false;\n          }\n          return conf.has(id);\n        });\n        defineProperties(memoized, {\n          __memoized__: d2(true),\n          delete: d2(extDel),\n          clear: d2(conf.clear),\n          _get: d2(extGet),\n          _has: d2(extHas)\n        });\n        return conf;\n      };\n    });\n    var require_plain = __commonJS(function(exports, module) {\n      'use strict';\n      var callable = require_valid_callable();\n      var forEach = require_for_each();\n      var extensions = require_registered_extensions();\n      var configure4 = require_configure_map();\n      var resolveLength = require_resolve_length();\n      module.exports = function self2(fn) {\n        var options, length, conf;\n        callable(fn);\n        options = Object(arguments[1]);\n        if (options.async && options.promise) {\n          throw new Error('Options \\'async\\' and \\'promise\\' cannot be used together');\n        }\n        if (hasOwnProperty.call(fn, '__memoized__') && !options.force) {\n          return fn;\n        }\n        length = resolveLength(options.length, fn.length, options.async && extensions.async);\n        conf = configure4(fn, length, options);\n        forEach(extensions, function(extFn, name) {\n          if (options[name]) {\n            extFn(options[name], conf, options);\n          }\n        });\n        if (self2.__profiler__) {\n          self2.__profiler__(conf);\n        }\n        conf.updateEnv();\n        return conf.memoized;\n      };\n    });\n    var require_primitive = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(args) {\n        var id, i, length = args.length;\n        if (!length) {\n          return '\\x02';\n        }\n        id = String(args[i = 0]);\n        while (--length) {\n          id += '\\x01' + args[++i];\n        }\n        return id;\n      };\n    });\n    var require_get_primitive_fixed = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(length) {\n        if (!length) {\n          return function() {\n            return '';\n          };\n        }\n        return function(args) {\n          var id = String(args[0]), i = 0, currentLength = length;\n          while (--currentLength) {\n            id += '\\x01' + args[++i];\n          }\n          return id;\n        };\n      };\n    });\n    var require_is_implemented8 = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function() {\n        var numberIsNaN = Number.isNaN;\n        if (typeof numberIsNaN !== 'function') {\n          return false;\n        }\n        return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);\n      };\n    });\n    var require_shim6 = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(value) {\n        return value !== value;\n      };\n    });\n    var require_is_nan = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = require_is_implemented8()() ? Number.isNaN : require_shim6();\n    });\n    var require_e_index_of = __commonJS(function(exports, module) {\n      'use strict';\n      var numberIsNaN = require_is_nan();\n      var toPosInt = require_to_pos_integer();\n      var value = require_valid_value();\n      var indexOf = Array.prototype.indexOf;\n      var objHasOwnProperty = Object.prototype.hasOwnProperty;\n      var abs = Math.abs;\n      var floor = Math.floor;\n      module.exports = function(searchElement) {\n        var i, length, fromIndex, val;\n        if (!numberIsNaN(searchElement)) {\n          return indexOf.apply(this, arguments);\n        }\n        length = toPosInt(value(this).length);\n        fromIndex = arguments[1];\n        if (isNaN(fromIndex)) {\n          fromIndex = 0;\n        } else if (fromIndex >= 0) {\n          fromIndex = floor(fromIndex);\n        } else {\n          fromIndex = toPosInt(this.length) - floor(abs(fromIndex));\n        }\n        for (i = fromIndex; i < length; ++i) {\n          if (objHasOwnProperty.call(this, i)) {\n            val = this[i];\n            if (numberIsNaN(val)) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n    });\n    var require_get = __commonJS(function(exports, module) {\n      'use strict';\n      var indexOf = require_e_index_of();\n      var create = Object.create;\n      module.exports = function() {\n        var lastId = 0, map = [], cache2 = create(null);\n        return {\n          get: function get(args) {\n            var index = 0, set2 = map, i, length = args.length;\n            if (length === 0) {\n              return set2[length] || null;\n            }\n            if (set2 = set2[length]) {\n              while (index < length - 1) {\n                i = indexOf.call(set2[0], args[index]);\n                if (i === -1) {\n                  return null;\n                }\n                set2 = set2[1][i];\n                ++index;\n              }\n              i = indexOf.call(set2[0], args[index]);\n              if (i === -1) {\n                return null;\n              }\n              return set2[1][i] || null;\n            }\n            return null;\n          },\n          set: function set(args) {\n            var index = 0, set2 = map, i, length = args.length;\n            if (length === 0) {\n              set2[length] = ++lastId;\n            } else {\n              if (!set2[length]) {\n                set2[length] = [ [], [] ];\n              }\n              set2 = set2[length];\n              while (index < length - 1) {\n                i = indexOf.call(set2[0], args[index]);\n                if (i === -1) {\n                  i = set2[0].push(args[index]) - 1;\n                  set2[1].push([ [], [] ]);\n                }\n                set2 = set2[1][i];\n                ++index;\n              }\n              i = indexOf.call(set2[0], args[index]);\n              if (i === -1) {\n                i = set2[0].push(args[index]) - 1;\n              }\n              set2[1][i] = ++lastId;\n            }\n            cache2[lastId] = args;\n            return lastId;\n          },\n          delete: function _delete(id) {\n            var index = 0, set2 = map, i, args = cache2[id], length = args.length, path = [];\n            if (length === 0) {\n              delete set2[length];\n            } else if (set2 = set2[length]) {\n              while (index < length - 1) {\n                i = indexOf.call(set2[0], args[index]);\n                if (i === -1) {\n                  return;\n                }\n                path.push(set2, i);\n                set2 = set2[1][i];\n                ++index;\n              }\n              i = indexOf.call(set2[0], args[index]);\n              if (i === -1) {\n                return;\n              }\n              id = set2[1][i];\n              set2[0].splice(i, 1);\n              set2[1].splice(i, 1);\n              while (!set2[0].length && path.length) {\n                i = path.pop();\n                set2 = path.pop();\n                set2[0].splice(i, 1);\n                set2[1].splice(i, 1);\n              }\n            }\n            delete cache2[id];\n          },\n          clear: function clear() {\n            map = [];\n            cache2 = create(null);\n          }\n        };\n      };\n    });\n    var require_get_1 = __commonJS(function(exports, module) {\n      'use strict';\n      var indexOf = require_e_index_of();\n      module.exports = function() {\n        var lastId = 0, argsMap = [], cache2 = [];\n        return {\n          get: function get(args) {\n            var index = indexOf.call(argsMap, args[0]);\n            return index === -1 ? null : cache2[index];\n          },\n          set: function set(args) {\n            argsMap.push(args[0]);\n            cache2.push(++lastId);\n            return lastId;\n          },\n          delete: function _delete(id) {\n            var index = indexOf.call(cache2, id);\n            if (index !== -1) {\n              argsMap.splice(index, 1);\n              cache2.splice(index, 1);\n            }\n          },\n          clear: function clear() {\n            argsMap = [];\n            cache2 = [];\n          }\n        };\n      };\n    });\n    var require_get_fixed = __commonJS(function(exports, module) {\n      'use strict';\n      var indexOf = require_e_index_of();\n      var create = Object.create;\n      module.exports = function(length) {\n        var lastId = 0, map = [ [], [] ], cache2 = create(null);\n        return {\n          get: function get(args) {\n            var index = 0, set2 = map, i;\n            while (index < length - 1) {\n              i = indexOf.call(set2[0], args[index]);\n              if (i === -1) {\n                return null;\n              }\n              set2 = set2[1][i];\n              ++index;\n            }\n            i = indexOf.call(set2[0], args[index]);\n            if (i === -1) {\n              return null;\n            }\n            return set2[1][i] || null;\n          },\n          set: function set(args) {\n            var index = 0, set2 = map, i;\n            while (index < length - 1) {\n              i = indexOf.call(set2[0], args[index]);\n              if (i === -1) {\n                i = set2[0].push(args[index]) - 1;\n                set2[1].push([ [], [] ]);\n              }\n              set2 = set2[1][i];\n              ++index;\n            }\n            i = indexOf.call(set2[0], args[index]);\n            if (i === -1) {\n              i = set2[0].push(args[index]) - 1;\n            }\n            set2[1][i] = ++lastId;\n            cache2[lastId] = args;\n            return lastId;\n          },\n          delete: function _delete(id) {\n            var index = 0, set2 = map, i, path = [], args = cache2[id];\n            while (index < length - 1) {\n              i = indexOf.call(set2[0], args[index]);\n              if (i === -1) {\n                return;\n              }\n              path.push(set2, i);\n              set2 = set2[1][i];\n              ++index;\n            }\n            i = indexOf.call(set2[0], args[index]);\n            if (i === -1) {\n              return;\n            }\n            id = set2[1][i];\n            set2[0].splice(i, 1);\n            set2[1].splice(i, 1);\n            while (!set2[0].length && path.length) {\n              i = path.pop();\n              set2 = path.pop();\n              set2[0].splice(i, 1);\n              set2[1].splice(i, 1);\n            }\n            delete cache2[id];\n          },\n          clear: function clear() {\n            map = [ [], [] ];\n            cache2 = create(null);\n          }\n        };\n      };\n    });\n    var require_map = __commonJS(function(exports, module) {\n      'use strict';\n      var callable = require_valid_callable();\n      var forEach = require_for_each();\n      var call = Function.prototype.call;\n      module.exports = function(obj, cb) {\n        var result = {}, thisArg = arguments[2];\n        callable(cb);\n        forEach(obj, function(value, key, targetObj, index) {\n          result[key] = call.call(cb, thisArg, value, key, targetObj, index);\n        });\n        return result;\n      };\n    });\n    var require_next_tick = __commonJS(function(exports, module) {\n      'use strict';\n      var ensureCallable = function ensureCallable(fn) {\n        if (typeof fn !== 'function') {\n          throw new TypeError(fn + ' is not a function');\n        }\n        return fn;\n      };\n      var byObserver = function byObserver(Observer) {\n        var node = document.createTextNode(''), queue2, currentQueue, i = 0;\n        new Observer(function() {\n          var callback;\n          if (!queue2) {\n            if (!currentQueue) {\n              return;\n            }\n            queue2 = currentQueue;\n          } else if (currentQueue) {\n            queue2 = currentQueue.concat(queue2);\n          }\n          currentQueue = queue2;\n          queue2 = null;\n          if (typeof currentQueue === 'function') {\n            callback = currentQueue;\n            currentQueue = null;\n            callback();\n            return;\n          }\n          node.data = i = ++i % 2;\n          while (currentQueue) {\n            callback = currentQueue.shift();\n            if (!currentQueue.length) {\n              currentQueue = null;\n            }\n            callback();\n          }\n        }).observe(node, {\n          characterData: true\n        });\n        return function(fn) {\n          ensureCallable(fn);\n          if (queue2) {\n            if (typeof queue2 === 'function') {\n              queue2 = [ queue2, fn ];\n            } else {\n              queue2.push(fn);\n            }\n            return;\n          }\n          queue2 = fn;\n          node.data = i = ++i % 2;\n        };\n      };\n      module.exports = function() {\n        if ((typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && process && typeof process.nextTick === 'function') {\n          return process.nextTick;\n        }\n        if (typeof queueMicrotask === 'function') {\n          return function(cb) {\n            queueMicrotask(ensureCallable(cb));\n          };\n        }\n        if ((typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object' && document) {\n          if (typeof MutationObserver === 'function') {\n            return byObserver(MutationObserver);\n          }\n          if (typeof WebKitMutationObserver === 'function') {\n            return byObserver(WebKitMutationObserver);\n          }\n        }\n        if (typeof setImmediate === 'function') {\n          return function(cb) {\n            setImmediate(ensureCallable(cb));\n          };\n        }\n        if (typeof setTimeout === 'function' || (typeof setTimeout === 'undefined' ? 'undefined' : _typeof(setTimeout)) === 'object') {\n          return function(cb) {\n            setTimeout(ensureCallable(cb), 0);\n          };\n        }\n        return null;\n      }();\n    });\n    var require_async = __commonJS(function() {\n      'use strict';\n      var aFrom = require_from();\n      var objectMap = require_map();\n      var mixin = require_mixin();\n      var defineLength = require_define_length();\n      var nextTick = require_next_tick();\n      var slice = Array.prototype.slice;\n      var apply = Function.prototype.apply;\n      var create = Object.create;\n      require_registered_extensions().async = function(tbi, conf) {\n        var waiting = create(null), cache2 = create(null), base = conf.memoized, original = conf.original, currentCallback, currentContext, currentArgs;\n        conf.memoized = defineLength(function(arg) {\n          var args = arguments, last2 = args[args.length - 1];\n          if (typeof last2 === 'function') {\n            currentCallback = last2;\n            args = slice.call(args, 0, -1);\n          }\n          return base.apply(currentContext = this, currentArgs = args);\n        }, base);\n        try {\n          mixin(conf.memoized, base);\n        } catch (ignore) {}\n        conf.on('get', function(id) {\n          var cb, context, args;\n          if (!currentCallback) {\n            return;\n          }\n          if (waiting[id]) {\n            if (typeof waiting[id] === 'function') {\n              waiting[id] = [ waiting[id], currentCallback ];\n            } else {\n              waiting[id].push(currentCallback);\n            }\n            currentCallback = null;\n            return;\n          }\n          cb = currentCallback;\n          context = currentContext;\n          args = currentArgs;\n          currentCallback = currentContext = currentArgs = null;\n          nextTick(function() {\n            var data;\n            if (hasOwnProperty.call(cache2, id)) {\n              data = cache2[id];\n              conf.emit('getasync', id, args, context);\n              apply.call(cb, data.context, data.args);\n            } else {\n              currentCallback = cb;\n              currentContext = context;\n              currentArgs = args;\n              base.apply(context, args);\n            }\n          });\n        });\n        conf.original = function() {\n          var args, cb, origCb, result;\n          if (!currentCallback) {\n            return apply.call(original, this, arguments);\n          }\n          args = aFrom(arguments);\n          cb = function self2(err2) {\n            var cb2, args2, id = self2.id;\n            if (id == null) {\n              nextTick(apply.bind(self2, this, arguments));\n              return void 0;\n            }\n            delete self2.id;\n            cb2 = waiting[id];\n            delete waiting[id];\n            if (!cb2) {\n              return void 0;\n            }\n            args2 = aFrom(arguments);\n            if (conf.has(id)) {\n              if (err2) {\n                conf['delete'](id);\n              } else {\n                cache2[id] = {\n                  context: this,\n                  args: args2\n                };\n                conf.emit('setasync', id, typeof cb2 === 'function' ? 1 : cb2.length);\n              }\n            }\n            if (typeof cb2 === 'function') {\n              result = apply.call(cb2, this, args2);\n            } else {\n              cb2.forEach(function(cb3) {\n                result = apply.call(cb3, this, args2);\n              }, this);\n            }\n            return result;\n          };\n          origCb = currentCallback;\n          currentCallback = currentContext = currentArgs = null;\n          args.push(cb);\n          result = apply.call(original, this, args);\n          cb.cb = origCb;\n          currentCallback = cb;\n          return result;\n        };\n        conf.on('set', function(id) {\n          if (!currentCallback) {\n            conf['delete'](id);\n            return;\n          }\n          if (waiting[id]) {\n            if (typeof waiting[id] === 'function') {\n              waiting[id] = [ waiting[id], currentCallback.cb ];\n            } else {\n              waiting[id].push(currentCallback.cb);\n            }\n          } else {\n            waiting[id] = currentCallback.cb;\n          }\n          delete currentCallback.cb;\n          currentCallback.id = id;\n          currentCallback = null;\n        });\n        conf.on('delete', function(id) {\n          var result;\n          if (hasOwnProperty.call(waiting, id)) {\n            return;\n          }\n          if (!cache2[id]) {\n            return;\n          }\n          result = cache2[id];\n          delete cache2[id];\n          conf.emit('deleteasync', id, slice.call(result.args, 1));\n        });\n        conf.on('clear', function() {\n          var oldCache = cache2;\n          cache2 = create(null);\n          conf.emit('clearasync', objectMap(oldCache, function(data) {\n            return slice.call(data.args, 1);\n          }));\n        });\n      };\n    });\n    var require_primitive_set = __commonJS(function(exports, module) {\n      'use strict';\n      var forEach = Array.prototype.forEach;\n      var create = Object.create;\n      module.exports = function(arg) {\n        var set2 = create(null);\n        forEach.call(arguments, function(name) {\n          set2[name] = true;\n        });\n        return set2;\n      };\n    });\n    var require_is_callable = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(obj) {\n        return typeof obj === 'function';\n      };\n    });\n    var require_validate_stringifiable = __commonJS(function(exports, module) {\n      'use strict';\n      var isCallable = require_is_callable();\n      module.exports = function(stringifiable) {\n        try {\n          if (stringifiable && isCallable(stringifiable.toString)) {\n            return stringifiable.toString();\n          }\n          return String(stringifiable);\n        } catch (e) {\n          throw new TypeError('Passed argument cannot be stringifed');\n        }\n      };\n    });\n    var require_validate_stringifiable_value = __commonJS(function(exports, module) {\n      'use strict';\n      var ensureValue = require_valid_value();\n      var stringifiable = require_validate_stringifiable();\n      module.exports = function(value) {\n        return stringifiable(ensureValue(value));\n      };\n    });\n    var require_safe_to_string = __commonJS(function(exports, module) {\n      'use strict';\n      var isCallable = require_is_callable();\n      module.exports = function(value) {\n        try {\n          if (value && isCallable(value.toString)) {\n            return value.toString();\n          }\n          return String(value);\n        } catch (e) {\n          return '<Non-coercible to string value>';\n        }\n      };\n    });\n    var require_to_short_string_representation = __commonJS(function(exports, module) {\n      'use strict';\n      var safeToString = require_safe_to_string();\n      var reNewLine = /[\\n\\r\\u2028\\u2029]/g;\n      module.exports = function(value) {\n        var string = safeToString(value);\n        if (string.length > 100) {\n          string = string.slice(0, 99) + '\\u2026';\n        }\n        string = string.replace(reNewLine, function(_char) {\n          return JSON.stringify(_char).slice(1, -1);\n        });\n        return string;\n      };\n    });\n    var require_is_promise = __commonJS(function(exports, module) {\n      module.exports = isPromise;\n      module.exports['default'] = isPromise;\n      function isPromise(obj) {\n        return !!obj && (_typeof(obj) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n      }\n    });\n    var require_promise = __commonJS(function() {\n      'use strict';\n      var objectMap = require_map();\n      var primitiveSet = require_primitive_set();\n      var ensureString = require_validate_stringifiable_value();\n      var toShortString = require_to_short_string_representation();\n      var isPromise = require_is_promise();\n      var nextTick = require_next_tick();\n      var create = Object.create;\n      var supportedModes = primitiveSet('then', 'then:finally', 'done', 'done:finally');\n      require_registered_extensions().promise = function(mode, conf) {\n        var waiting = create(null), cache2 = create(null), promises = create(null);\n        if (mode === true) {\n          mode = null;\n        } else {\n          mode = ensureString(mode);\n          if (!supportedModes[mode]) {\n            throw new TypeError('\\'' + toShortString(mode) + '\\' is not valid promise mode');\n          }\n        }\n        conf.on('set', function(id, ignore, promise) {\n          var isFailed = false;\n          if (!isPromise(promise)) {\n            cache2[id] = promise;\n            conf.emit('setasync', id, 1);\n            return;\n          }\n          waiting[id] = 1;\n          promises[id] = promise;\n          var onSuccess = function onSuccess(result) {\n            var count = waiting[id];\n            if (isFailed) {\n              throw new Error('Memoizee error: Detected unordered then|done & finally resolution, which in turn makes proper detection of success/failure impossible (when in \\'done:finally\\' mode)\\nConsider to rely on \\'then\\' or \\'done\\' mode instead.');\n            }\n            if (!count) {\n              return;\n            }\n            delete waiting[id];\n            cache2[id] = result;\n            conf.emit('setasync', id, count);\n          };\n          var onFailure = function onFailure() {\n            isFailed = true;\n            if (!waiting[id]) {\n              return;\n            }\n            delete waiting[id];\n            delete promises[id];\n            conf['delete'](id);\n          };\n          var resolvedMode = mode;\n          if (!resolvedMode) {\n            resolvedMode = 'then';\n          }\n          if (resolvedMode === 'then') {\n            var nextTickFailure = function nextTickFailure() {\n              nextTick(onFailure);\n            };\n            promise = promise.then(function(result) {\n              nextTick(onSuccess.bind(this, result));\n            }, nextTickFailure);\n            if (typeof promise['finally'] === 'function') {\n              promise['finally'](nextTickFailure);\n            }\n          } else if (resolvedMode === 'done') {\n            if (typeof promise.done !== 'function') {\n              throw new Error('Memoizee error: Retrieved promise does not implement \\'done\\' in \\'done\\' mode');\n            }\n            promise.done(onSuccess, onFailure);\n          } else if (resolvedMode === 'done:finally') {\n            if (typeof promise.done !== 'function') {\n              throw new Error('Memoizee error: Retrieved promise does not implement \\'done\\' in \\'done:finally\\' mode');\n            }\n            if (typeof promise['finally'] !== 'function') {\n              throw new Error('Memoizee error: Retrieved promise does not implement \\'finally\\' in \\'done:finally\\' mode');\n            }\n            promise.done(onSuccess);\n            promise['finally'](onFailure);\n          }\n        });\n        conf.on('get', function(id, args, context) {\n          var promise;\n          if (waiting[id]) {\n            ++waiting[id];\n            return;\n          }\n          promise = promises[id];\n          var emit = function emit() {\n            conf.emit('getasync', id, args, context);\n          };\n          if (isPromise(promise)) {\n            if (typeof promise.done === 'function') {\n              promise.done(emit);\n            } else {\n              promise.then(function() {\n                nextTick(emit);\n              });\n            }\n          } else {\n            emit();\n          }\n        });\n        conf.on('delete', function(id) {\n          delete promises[id];\n          if (waiting[id]) {\n            delete waiting[id];\n            return;\n          }\n          if (!hasOwnProperty.call(cache2, id)) {\n            return;\n          }\n          var result = cache2[id];\n          delete cache2[id];\n          conf.emit('deleteasync', id, [ result ]);\n        });\n        conf.on('clear', function() {\n          var oldCache = cache2;\n          cache2 = create(null);\n          waiting = create(null);\n          promises = create(null);\n          conf.emit('clearasync', objectMap(oldCache, function(data) {\n            return [ data ];\n          }));\n        });\n      };\n    });\n    var require_dispose = __commonJS(function() {\n      'use strict';\n      var callable = require_valid_callable();\n      var forEach = require_for_each();\n      var extensions = require_registered_extensions();\n      var apply = Function.prototype.apply;\n      extensions.dispose = function(dispose, conf, options) {\n        var del;\n        callable(dispose);\n        if (options.async && extensions.async || options.promise && extensions.promise) {\n          conf.on('deleteasync', del = function del(id, resultArray) {\n            apply.call(dispose, null, resultArray);\n          });\n          conf.on('clearasync', function(cache2) {\n            forEach(cache2, function(result, id) {\n              del(id, result);\n            });\n          });\n          return;\n        }\n        conf.on('delete', del = function del(id, result) {\n          dispose(result);\n        });\n        conf.on('clear', function(cache2) {\n          forEach(cache2, function(result, id) {\n            del(id, result);\n          });\n        });\n      };\n    });\n    var require_max_timeout = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = 2147483647;\n    });\n    var require_valid_timeout = __commonJS(function(exports, module) {\n      'use strict';\n      var toPosInt = require_to_pos_integer();\n      var maxTimeout = require_max_timeout();\n      module.exports = function(value) {\n        value = toPosInt(value);\n        if (value > maxTimeout) {\n          throw new TypeError(value + ' exceeds maximum possible timeout');\n        }\n        return value;\n      };\n    });\n    var require_max_age = __commonJS(function() {\n      'use strict';\n      var aFrom = require_from();\n      var forEach = require_for_each();\n      var nextTick = require_next_tick();\n      var isPromise = require_is_promise();\n      var timeout = require_valid_timeout();\n      var extensions = require_registered_extensions();\n      var noop3 = Function.prototype;\n      var max2 = Math.max;\n      var min = Math.min;\n      var create = Object.create;\n      extensions.maxAge = function(maxAge, conf, options) {\n        var timeouts, postfix, preFetchAge, preFetchTimeouts;\n        maxAge = timeout(maxAge);\n        if (!maxAge) {\n          return;\n        }\n        timeouts = create(null);\n        postfix = options.async && extensions.async || options.promise && extensions.promise ? 'async' : '';\n        conf.on('set' + postfix, function(id) {\n          timeouts[id] = setTimeout(function() {\n            conf['delete'](id);\n          }, maxAge);\n          if (typeof timeouts[id].unref === 'function') {\n            timeouts[id].unref();\n          }\n          if (!preFetchTimeouts) {\n            return;\n          }\n          if (preFetchTimeouts[id]) {\n            if (preFetchTimeouts[id] !== 'nextTick') {\n              clearTimeout(preFetchTimeouts[id]);\n            }\n          }\n          preFetchTimeouts[id] = setTimeout(function() {\n            delete preFetchTimeouts[id];\n          }, preFetchAge);\n          if (typeof preFetchTimeouts[id].unref === 'function') {\n            preFetchTimeouts[id].unref();\n          }\n        });\n        conf.on('delete' + postfix, function(id) {\n          clearTimeout(timeouts[id]);\n          delete timeouts[id];\n          if (!preFetchTimeouts) {\n            return;\n          }\n          if (preFetchTimeouts[id] !== 'nextTick') {\n            clearTimeout(preFetchTimeouts[id]);\n          }\n          delete preFetchTimeouts[id];\n        });\n        if (options.preFetch) {\n          if (options.preFetch === true || isNaN(options.preFetch)) {\n            preFetchAge = .333;\n          } else {\n            preFetchAge = max2(min(Number(options.preFetch), 1), 0);\n          }\n          if (preFetchAge) {\n            preFetchTimeouts = {};\n            preFetchAge = (1 - preFetchAge) * maxAge;\n            conf.on('get' + postfix, function(id, args, context) {\n              if (!preFetchTimeouts[id]) {\n                preFetchTimeouts[id] = 'nextTick';\n                nextTick(function() {\n                  var result;\n                  if (preFetchTimeouts[id] !== 'nextTick') {\n                    return;\n                  }\n                  delete preFetchTimeouts[id];\n                  conf['delete'](id);\n                  if (options.async) {\n                    args = aFrom(args);\n                    args.push(noop3);\n                  }\n                  result = conf.memoized.apply(context, args);\n                  if (options.promise) {\n                    if (isPromise(result)) {\n                      if (typeof result.done === 'function') {\n                        result.done(noop3, noop3);\n                      } else {\n                        result.then(noop3, noop3);\n                      }\n                    }\n                  }\n                });\n              }\n            });\n          }\n        }\n        conf.on('clear' + postfix, function() {\n          forEach(timeouts, function(id) {\n            clearTimeout(id);\n          });\n          timeouts = {};\n          if (preFetchTimeouts) {\n            forEach(preFetchTimeouts, function(id) {\n              if (id !== 'nextTick') {\n                clearTimeout(id);\n              }\n            });\n            preFetchTimeouts = {};\n          }\n        });\n      };\n    });\n    var require_lru_queue = __commonJS(function(exports, module) {\n      'use strict';\n      var toPosInt = require_to_pos_integer();\n      var create = Object.create;\n      var hasOwnProperty2 = Object.prototype.hasOwnProperty;\n      module.exports = function(limit) {\n        var size = 0, base = 1, queue2 = create(null), map = create(null), index = 0, del;\n        limit = toPosInt(limit);\n        return {\n          hit: function hit(id) {\n            var oldIndex = map[id], nuIndex = ++index;\n            queue2[nuIndex] = id;\n            map[id] = nuIndex;\n            if (!oldIndex) {\n              ++size;\n              if (size <= limit) {\n                return;\n              }\n              id = queue2[base];\n              del(id);\n              return id;\n            }\n            delete queue2[oldIndex];\n            if (base !== oldIndex) {\n              return;\n            }\n            while (!hasOwnProperty2.call(queue2, ++base)) {\n              continue;\n            }\n          },\n          delete: del = function del(id) {\n            var oldIndex = map[id];\n            if (!oldIndex) {\n              return;\n            }\n            delete queue2[oldIndex];\n            delete map[id];\n            --size;\n            if (base !== oldIndex) {\n              return;\n            }\n            if (!size) {\n              index = 0;\n              base = 1;\n              return;\n            }\n            while (!hasOwnProperty2.call(queue2, ++base)) {\n              continue;\n            }\n          },\n          clear: function clear() {\n            size = 0;\n            base = 1;\n            queue2 = create(null);\n            map = create(null);\n            index = 0;\n          }\n        };\n      };\n    });\n    var require_max = __commonJS(function() {\n      'use strict';\n      var toPosInteger = require_to_pos_integer();\n      var lruQueue = require_lru_queue();\n      var extensions = require_registered_extensions();\n      extensions.max = function(max2, conf, options) {\n        var postfix, queue2, hit;\n        max2 = toPosInteger(max2);\n        if (!max2) {\n          return;\n        }\n        queue2 = lruQueue(max2);\n        postfix = options.async && extensions.async || options.promise && extensions.promise ? 'async' : '';\n        conf.on('set' + postfix, hit = function hit(id) {\n          id = queue2.hit(id);\n          if (id === void 0) {\n            return;\n          }\n          conf['delete'](id);\n        });\n        conf.on('get' + postfix, hit);\n        conf.on('delete' + postfix, queue2['delete']);\n        conf.on('clear' + postfix, queue2.clear);\n      };\n    });\n    var require_ref_counter = __commonJS(function() {\n      'use strict';\n      var d2 = require_d();\n      var extensions = require_registered_extensions();\n      var create = Object.create;\n      var defineProperties = Object.defineProperties;\n      extensions.refCounter = function(ignore, conf, options) {\n        var cache2, postfix;\n        cache2 = create(null);\n        postfix = options.async && extensions.async || options.promise && extensions.promise ? 'async' : '';\n        conf.on('set' + postfix, function(id, length) {\n          cache2[id] = length || 1;\n        });\n        conf.on('get' + postfix, function(id) {\n          ++cache2[id];\n        });\n        conf.on('delete' + postfix, function(id) {\n          delete cache2[id];\n        });\n        conf.on('clear' + postfix, function() {\n          cache2 = {};\n        });\n        defineProperties(conf.memoized, {\n          deleteRef: d2(function() {\n            var id = conf.get(arguments);\n            if (id === null) {\n              return null;\n            }\n            if (!cache2[id]) {\n              return null;\n            }\n            if (!--cache2[id]) {\n              conf['delete'](id);\n              return true;\n            }\n            return false;\n          }),\n          getRefCount: d2(function() {\n            var id = conf.get(arguments);\n            if (id === null) {\n              return 0;\n            }\n            if (!cache2[id]) {\n              return 0;\n            }\n            return cache2[id];\n          })\n        });\n      };\n    });\n    var require_memoizee = __commonJS(function(exports, module) {\n      'use strict';\n      var normalizeOpts = require_normalize_options();\n      var resolveLength = require_resolve_length();\n      var plain = require_plain();\n      module.exports = function(fn) {\n        var options = normalizeOpts(arguments[1]), length;\n        if (!options.normalizer) {\n          length = options.length = resolveLength(options.length, fn.length, options.async);\n          if (length !== 0) {\n            if (options.primitive) {\n              if (length === false) {\n                options.normalizer = require_primitive();\n              } else if (length > 1) {\n                options.normalizer = require_get_primitive_fixed()(length);\n              }\n            } else if (length === false) {\n              options.normalizer = require_get()();\n            } else if (length === 1) {\n              options.normalizer = require_get_1()();\n            } else {\n              options.normalizer = require_get_fixed()(length);\n            }\n          }\n        }\n        if (options.async) {\n          require_async();\n        }\n        if (options.promise) {\n          require_promise();\n        }\n        if (options.dispose) {\n          require_dispose();\n        }\n        if (options.maxAge) {\n          require_max_age();\n        }\n        if (options.max) {\n          require_max();\n        }\n        if (options.refCounter) {\n          require_ref_counter();\n        }\n        return plain(fn, options);\n      };\n    });\n    var require_utils = __commonJS(function(exports) {\n      'use strict';\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      function isIdentStart(c4) {\n        return c4 >= 'a' && c4 <= 'z' || c4 >= 'A' && c4 <= 'Z' || c4 === '-' || c4 === '_';\n      }\n      exports.isIdentStart = isIdentStart;\n      function isIdent(c4) {\n        return c4 >= 'a' && c4 <= 'z' || c4 >= 'A' && c4 <= 'Z' || c4 >= '0' && c4 <= '9' || c4 === '-' || c4 === '_';\n      }\n      exports.isIdent = isIdent;\n      function isHex(c4) {\n        return c4 >= 'a' && c4 <= 'f' || c4 >= 'A' && c4 <= 'F' || c4 >= '0' && c4 <= '9';\n      }\n      exports.isHex = isHex;\n      function escapeIdentifier(s) {\n        var len = s.length;\n        var result = '';\n        var i = 0;\n        while (i < len) {\n          var chr = s.charAt(i);\n          if (exports.identSpecialChars[chr]) {\n            result += '\\\\' + chr;\n          } else {\n            if (!(chr === '_' || chr === '-' || chr >= 'A' && chr <= 'Z' || chr >= 'a' && chr <= 'z' || i !== 0 && chr >= '0' && chr <= '9')) {\n              var charCode = chr.charCodeAt(0);\n              if ((charCode & 63488) === 55296) {\n                var extraCharCode = s.charCodeAt(i++);\n                if ((charCode & 64512) !== 55296 || (extraCharCode & 64512) !== 56320) {\n                  throw Error('UCS-2(decode): illegal sequence');\n                }\n                charCode = ((charCode & 1023) << 10) + (extraCharCode & 1023) + 65536;\n              }\n              result += '\\\\' + charCode.toString(16) + ' ';\n            } else {\n              result += chr;\n            }\n          }\n          i++;\n        }\n        return result;\n      }\n      exports.escapeIdentifier = escapeIdentifier;\n      function escapeStr(s) {\n        var len = s.length;\n        var result = '';\n        var i = 0;\n        var replacement;\n        while (i < len) {\n          var chr = s.charAt(i);\n          if (chr === '\"') {\n            chr = '\\\\\"';\n          } else if (chr === '\\\\') {\n            chr = '\\\\\\\\';\n          } else if ((replacement = exports.strReplacementsRev[chr]) !== void 0) {\n            chr = replacement;\n          }\n          result += chr;\n          i++;\n        }\n        return '\"' + result + '\"';\n      }\n      exports.escapeStr = escapeStr;\n      exports.identSpecialChars = {\n        '!': true,\n        '\"': true,\n        '#': true,\n        $: true,\n        '%': true,\n        '&': true,\n        '\\'': true,\n        '(': true,\n        ')': true,\n        '*': true,\n        '+': true,\n        ',': true,\n        '.': true,\n        '/': true,\n        ';': true,\n        '<': true,\n        '=': true,\n        '>': true,\n        '?': true,\n        '@': true,\n        '[': true,\n        '\\\\': true,\n        ']': true,\n        '^': true,\n        '`': true,\n        '{': true,\n        '|': true,\n        '}': true,\n        '~': true\n      };\n      exports.strReplacementsRev = {\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t',\n        '\\f': '\\\\f',\n        '\\v': '\\\\v'\n      };\n      exports.singleQuoteEscapeChars = {\n        n: '\\n',\n        r: '\\r',\n        t: '\\t',\n        f: '\\f',\n        '\\\\': '\\\\',\n        '\\'': '\\''\n      };\n      exports.doubleQuotesEscapeChars = {\n        n: '\\n',\n        r: '\\r',\n        t: '\\t',\n        f: '\\f',\n        '\\\\': '\\\\',\n        '\"': '\"'\n      };\n    });\n    var require_parser_context = __commonJS(function(exports) {\n      'use strict';\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      var utils_1 = require_utils();\n      function parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {\n        var l = str.length;\n        var chr = '';\n        function getStr(quote, escapeTable) {\n          var result = '';\n          pos++;\n          chr = str.charAt(pos);\n          while (pos < l) {\n            if (chr === quote) {\n              pos++;\n              return result;\n            } else if (chr === '\\\\') {\n              pos++;\n              chr = str.charAt(pos);\n              var esc = void 0;\n              if (chr === quote) {\n                result += quote;\n              } else if ((esc = escapeTable[chr]) !== void 0) {\n                result += esc;\n              } else if (utils_1.isHex(chr)) {\n                var hex = chr;\n                pos++;\n                chr = str.charAt(pos);\n                while (utils_1.isHex(chr)) {\n                  hex += chr;\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                if (chr === ' ') {\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                result += String.fromCharCode(parseInt(hex, 16));\n                continue;\n              } else {\n                result += chr;\n              }\n            } else {\n              result += chr;\n            }\n            pos++;\n            chr = str.charAt(pos);\n          }\n          return result;\n        }\n        function getIdent() {\n          var result = '';\n          chr = str.charAt(pos);\n          while (pos < l) {\n            if (utils_1.isIdent(chr)) {\n              result += chr;\n            } else if (chr === '\\\\') {\n              pos++;\n              if (pos >= l) {\n                throw Error('Expected symbol but end of file reached.');\n              }\n              chr = str.charAt(pos);\n              if (utils_1.identSpecialChars[chr]) {\n                result += chr;\n              } else if (utils_1.isHex(chr)) {\n                var hex = chr;\n                pos++;\n                chr = str.charAt(pos);\n                while (utils_1.isHex(chr)) {\n                  hex += chr;\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                if (chr === ' ') {\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                result += String.fromCharCode(parseInt(hex, 16));\n                continue;\n              } else {\n                result += chr;\n              }\n            } else {\n              return result;\n            }\n            pos++;\n            chr = str.charAt(pos);\n          }\n          return result;\n        }\n        function skipWhitespace() {\n          chr = str.charAt(pos);\n          var result = false;\n          while (chr === ' ' || chr === '\\t' || chr === '\\n' || chr === '\\r' || chr === '\\f') {\n            result = true;\n            pos++;\n            chr = str.charAt(pos);\n          }\n          return result;\n        }\n        function parse3() {\n          var res = parseSelector();\n          if (pos < l) {\n            throw Error('Rule expected but \"' + str.charAt(pos) + '\" found.');\n          }\n          return res;\n        }\n        function parseSelector() {\n          var selector = parseSingleSelector();\n          if (!selector) {\n            return null;\n          }\n          var res = selector;\n          chr = str.charAt(pos);\n          while (chr === ',') {\n            pos++;\n            skipWhitespace();\n            if (res.type !== 'selectors') {\n              res = {\n                type: 'selectors',\n                selectors: [ selector ]\n              };\n            }\n            selector = parseSingleSelector();\n            if (!selector) {\n              throw Error('Rule expected after \",\".');\n            }\n            res.selectors.push(selector);\n          }\n          return res;\n        }\n        function parseSingleSelector() {\n          skipWhitespace();\n          var selector = {\n            type: 'ruleSet'\n          };\n          var rule = parseRule();\n          if (!rule) {\n            return null;\n          }\n          var currentRule = selector;\n          while (rule) {\n            rule.type = 'rule';\n            currentRule.rule = rule;\n            currentRule = rule;\n            skipWhitespace();\n            chr = str.charAt(pos);\n            if (pos >= l || chr === ',' || chr === ')') {\n              break;\n            }\n            if (ruleNestingOperators[chr]) {\n              var op = chr;\n              pos++;\n              skipWhitespace();\n              rule = parseRule();\n              if (!rule) {\n                throw Error('Rule expected after \"' + op + '\".');\n              }\n              rule.nestingOperator = op;\n            } else {\n              rule = parseRule();\n              if (rule) {\n                rule.nestingOperator = null;\n              }\n            }\n          }\n          return selector;\n        }\n        function parseRule() {\n          var rule = null;\n          while (pos < l) {\n            chr = str.charAt(pos);\n            if (chr === '*') {\n              pos++;\n              (rule = rule || {}).tagName = '*';\n            } else if (utils_1.isIdentStart(chr) || chr === '\\\\') {\n              (rule = rule || {}).tagName = getIdent();\n            } else if (chr === '.') {\n              pos++;\n              rule = rule || {};\n              (rule.classNames = rule.classNames || []).push(getIdent());\n            } else if (chr === '#') {\n              pos++;\n              (rule = rule || {}).id = getIdent();\n            } else if (chr === '[') {\n              pos++;\n              skipWhitespace();\n              var attr = {\n                name: getIdent()\n              };\n              skipWhitespace();\n              if (chr === ']') {\n                pos++;\n              } else {\n                var operator = '';\n                if (attrEqualityMods[chr]) {\n                  operator = chr;\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                if (pos >= l) {\n                  throw Error('Expected \"=\" but end of file reached.');\n                }\n                if (chr !== '=') {\n                  throw Error('Expected \"=\" but \"' + chr + '\" found.');\n                }\n                attr.operator = operator + '=';\n                pos++;\n                skipWhitespace();\n                var attrValue = '';\n                attr.valueType = 'string';\n                if (chr === '\"') {\n                  attrValue = getStr('\"', utils_1.doubleQuotesEscapeChars);\n                } else if (chr === '\\'') {\n                  attrValue = getStr('\\'', utils_1.singleQuoteEscapeChars);\n                } else if (substitutesEnabled && chr === '$') {\n                  pos++;\n                  attrValue = getIdent();\n                  attr.valueType = 'substitute';\n                } else {\n                  while (pos < l) {\n                    if (chr === ']') {\n                      break;\n                    }\n                    attrValue += chr;\n                    pos++;\n                    chr = str.charAt(pos);\n                  }\n                  attrValue = attrValue.trim();\n                }\n                skipWhitespace();\n                if (pos >= l) {\n                  throw Error('Expected \"]\" but end of file reached.');\n                }\n                if (chr !== ']') {\n                  throw Error('Expected \"]\" but \"' + chr + '\" found.');\n                }\n                pos++;\n                attr.value = attrValue;\n              }\n              rule = rule || {};\n              (rule.attrs = rule.attrs || []).push(attr);\n            } else if (chr === ':') {\n              pos++;\n              var pseudoName = getIdent();\n              var pseudo = {\n                name: pseudoName\n              };\n              if (chr === '(') {\n                pos++;\n                var value = '';\n                skipWhitespace();\n                if (pseudos[pseudoName] === 'selector') {\n                  pseudo.valueType = 'selector';\n                  value = parseSelector();\n                } else {\n                  pseudo.valueType = pseudos[pseudoName] || 'string';\n                  if (chr === '\"') {\n                    value = getStr('\"', utils_1.doubleQuotesEscapeChars);\n                  } else if (chr === '\\'') {\n                    value = getStr('\\'', utils_1.singleQuoteEscapeChars);\n                  } else if (substitutesEnabled && chr === '$') {\n                    pos++;\n                    value = getIdent();\n                    pseudo.valueType = 'substitute';\n                  } else {\n                    while (pos < l) {\n                      if (chr === ')') {\n                        break;\n                      }\n                      value += chr;\n                      pos++;\n                      chr = str.charAt(pos);\n                    }\n                    value = value.trim();\n                  }\n                  skipWhitespace();\n                }\n                if (pos >= l) {\n                  throw Error('Expected \")\" but end of file reached.');\n                }\n                if (chr !== ')') {\n                  throw Error('Expected \")\" but \"' + chr + '\" found.');\n                }\n                pos++;\n                pseudo.value = value;\n              }\n              rule = rule || {};\n              (rule.pseudos = rule.pseudos || []).push(pseudo);\n            } else {\n              break;\n            }\n          }\n          return rule;\n        }\n        return parse3();\n      }\n      exports.parseCssSelector = parseCssSelector;\n    });\n    var require_render = __commonJS(function(exports) {\n      'use strict';\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      var utils_1 = require_utils();\n      function renderEntity(entity) {\n        var res = '';\n        switch (entity.type) {\n         case 'ruleSet':\n          var currentEntity = entity.rule;\n          var parts = [];\n          while (currentEntity) {\n            if (currentEntity.nestingOperator) {\n              parts.push(currentEntity.nestingOperator);\n            }\n            parts.push(renderEntity(currentEntity));\n            currentEntity = currentEntity.rule;\n          }\n          res = parts.join(' ');\n          break;\n\n         case 'selectors':\n          res = entity.selectors.map(renderEntity).join(', ');\n          break;\n\n         case 'rule':\n          if (entity.tagName) {\n            if (entity.tagName === '*') {\n              res = '*';\n            } else {\n              res = utils_1.escapeIdentifier(entity.tagName);\n            }\n          }\n          if (entity.id) {\n            res += '#' + utils_1.escapeIdentifier(entity.id);\n          }\n          if (entity.classNames) {\n            res += entity.classNames.map(function(cn) {\n              return '.' + utils_1.escapeIdentifier(cn);\n            }).join('');\n          }\n          if (entity.attrs) {\n            res += entity.attrs.map(function(attr) {\n              if ('operator' in attr) {\n                if (attr.valueType === 'substitute') {\n                  return '[' + utils_1.escapeIdentifier(attr.name) + attr.operator + '$' + attr.value + ']';\n                } else {\n                  return '[' + utils_1.escapeIdentifier(attr.name) + attr.operator + utils_1.escapeStr(attr.value) + ']';\n                }\n              } else {\n                return '[' + utils_1.escapeIdentifier(attr.name) + ']';\n              }\n            }).join('');\n          }\n          if (entity.pseudos) {\n            res += entity.pseudos.map(function(pseudo) {\n              if (pseudo.valueType) {\n                if (pseudo.valueType === 'selector') {\n                  return ':' + utils_1.escapeIdentifier(pseudo.name) + '(' + renderEntity(pseudo.value) + ')';\n                } else if (pseudo.valueType === 'substitute') {\n                  return ':' + utils_1.escapeIdentifier(pseudo.name) + '($' + pseudo.value + ')';\n                } else if (pseudo.valueType === 'numeric') {\n                  return ':' + utils_1.escapeIdentifier(pseudo.name) + '(' + pseudo.value + ')';\n                } else {\n                  return ':' + utils_1.escapeIdentifier(pseudo.name) + '(' + utils_1.escapeIdentifier(pseudo.value) + ')';\n                }\n              } else {\n                return ':' + utils_1.escapeIdentifier(pseudo.name);\n              }\n            }).join('');\n          }\n          break;\n\n         default:\n          throw Error('Unknown entity type: \"' + entity.type + '\".');\n        }\n        return res;\n      }\n      exports.renderEntity = renderEntity;\n    });\n    var require_lib = __commonJS(function(exports) {\n      'use strict';\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      var parser_context_1 = require_parser_context();\n      var render_1 = require_render();\n      var CssSelectorParser3 = function() {\n        function CssSelectorParser4() {\n          this.pseudos = {};\n          this.attrEqualityMods = {};\n          this.ruleNestingOperators = {};\n          this.substitutesEnabled = false;\n        }\n        CssSelectorParser4.prototype.registerSelectorPseudos = function() {\n          var pseudos = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            pseudos[_i] = arguments[_i];\n          }\n          for (var _a = 0, pseudos_1 = pseudos; _a < pseudos_1.length; _a++) {\n            var pseudo = pseudos_1[_a];\n            this.pseudos[pseudo] = 'selector';\n          }\n          return this;\n        };\n        CssSelectorParser4.prototype.unregisterSelectorPseudos = function() {\n          var pseudos = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            pseudos[_i] = arguments[_i];\n          }\n          for (var _a = 0, pseudos_2 = pseudos; _a < pseudos_2.length; _a++) {\n            var pseudo = pseudos_2[_a];\n            delete this.pseudos[pseudo];\n          }\n          return this;\n        };\n        CssSelectorParser4.prototype.registerNumericPseudos = function() {\n          var pseudos = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            pseudos[_i] = arguments[_i];\n          }\n          for (var _a = 0, pseudos_3 = pseudos; _a < pseudos_3.length; _a++) {\n            var pseudo = pseudos_3[_a];\n            this.pseudos[pseudo] = 'numeric';\n          }\n          return this;\n        };\n        CssSelectorParser4.prototype.unregisterNumericPseudos = function() {\n          var pseudos = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            pseudos[_i] = arguments[_i];\n          }\n          for (var _a = 0, pseudos_4 = pseudos; _a < pseudos_4.length; _a++) {\n            var pseudo = pseudos_4[_a];\n            delete this.pseudos[pseudo];\n          }\n          return this;\n        };\n        CssSelectorParser4.prototype.registerNestingOperators = function() {\n          var operators = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            operators[_i] = arguments[_i];\n          }\n          for (var _a = 0, operators_1 = operators; _a < operators_1.length; _a++) {\n            var operator = operators_1[_a];\n            this.ruleNestingOperators[operator] = true;\n          }\n          return this;\n        };\n        CssSelectorParser4.prototype.unregisterNestingOperators = function() {\n          var operators = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            operators[_i] = arguments[_i];\n          }\n          for (var _a = 0, operators_2 = operators; _a < operators_2.length; _a++) {\n            var operator = operators_2[_a];\n            delete this.ruleNestingOperators[operator];\n          }\n          return this;\n        };\n        CssSelectorParser4.prototype.registerAttrEqualityMods = function() {\n          var mods = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            mods[_i] = arguments[_i];\n          }\n          for (var _a = 0, mods_1 = mods; _a < mods_1.length; _a++) {\n            var mod = mods_1[_a];\n            this.attrEqualityMods[mod] = true;\n          }\n          return this;\n        };\n        CssSelectorParser4.prototype.unregisterAttrEqualityMods = function() {\n          var mods = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            mods[_i] = arguments[_i];\n          }\n          for (var _a = 0, mods_2 = mods; _a < mods_2.length; _a++) {\n            var mod = mods_2[_a];\n            delete this.attrEqualityMods[mod];\n          }\n          return this;\n        };\n        CssSelectorParser4.prototype.enableSubstitutes = function() {\n          this.substitutesEnabled = true;\n          return this;\n        };\n        CssSelectorParser4.prototype.disableSubstitutes = function() {\n          this.substitutesEnabled = false;\n          return this;\n        };\n        CssSelectorParser4.prototype.parse = function(str) {\n          return parser_context_1.parseCssSelector(str, 0, this.pseudos, this.attrEqualityMods, this.ruleNestingOperators, this.substitutesEnabled);\n        };\n        CssSelectorParser4.prototype.render = function(path) {\n          return render_1.renderEntity(path).trim();\n        };\n        return CssSelectorParser4;\n      }();\n      exports.CssSelectorParser = CssSelectorParser3;\n    });\n    var require_es6_promise = __commonJS(function(exports, module) {\n      (function(global2, factory) {\n        _typeof(exports) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n      })(exports, function() {\n        'use strict';\n        function objectOrFunction(x) {\n          var type2 = _typeof(x);\n          return x !== null && (type2 === 'object' || type2 === 'function');\n        }\n        function isFunction(x) {\n          return typeof x === 'function';\n        }\n        var _isArray = void 0;\n        if (Array.isArray) {\n          _isArray = Array.isArray;\n        } else {\n          _isArray = function _isArray(x) {\n            return Object.prototype.toString.call(x) === '[object Array]';\n          };\n        }\n        var isArray = _isArray;\n        var len = 0;\n        var vertxNext = void 0;\n        var customSchedulerFn = void 0;\n        var asap = function asap2(callback, arg) {\n          queue2[len] = callback;\n          queue2[len + 1] = arg;\n          len += 2;\n          if (len === 2) {\n            if (customSchedulerFn) {\n              customSchedulerFn(flush);\n            } else {\n              scheduleFlush();\n            }\n          }\n        };\n        function setScheduler(scheduleFn) {\n          customSchedulerFn = scheduleFn;\n        }\n        function setAsap(asapFn) {\n          asap = asapFn;\n        }\n        var browserWindow = typeof window !== 'undefined' ? window : void 0;\n        var browserGlobal = browserWindow || {};\n        var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n        var isNode2 = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n        var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n        function useNextTick() {\n          return function() {\n            return process.nextTick(flush);\n          };\n        }\n        function useVertxTimer() {\n          if (typeof vertxNext !== 'undefined') {\n            return function() {\n              vertxNext(flush);\n            };\n          }\n          return useSetTimeout();\n        }\n        function useMutationObserver() {\n          var iterations = 0;\n          var observer = new BrowserMutationObserver(flush);\n          var node = document.createTextNode('');\n          observer.observe(node, {\n            characterData: true\n          });\n          return function() {\n            node.data = iterations = ++iterations % 2;\n          };\n        }\n        function useMessageChannel() {\n          var channel = new MessageChannel();\n          channel.port1.onmessage = flush;\n          return function() {\n            return channel.port2.postMessage(0);\n          };\n        }\n        function useSetTimeout() {\n          var globalSetTimeout = setTimeout;\n          return function() {\n            return globalSetTimeout(flush, 1);\n          };\n        }\n        var queue2 = new Array(1e3);\n        function flush() {\n          for (var i = 0; i < len; i += 2) {\n            var callback = queue2[i];\n            var arg = queue2[i + 1];\n            callback(arg);\n            queue2[i] = void 0;\n            queue2[i + 1] = void 0;\n          }\n          len = 0;\n        }\n        function attemptVertx() {\n          try {\n            var vertx = Function('return this')().require('vertx');\n            vertxNext = vertx.runOnLoop || vertx.runOnContext;\n            return useVertxTimer();\n          } catch (e) {\n            return useSetTimeout();\n          }\n        }\n        var scheduleFlush = void 0;\n        if (isNode2) {\n          scheduleFlush = useNextTick();\n        } else if (BrowserMutationObserver) {\n          scheduleFlush = useMutationObserver();\n        } else if (isWorker) {\n          scheduleFlush = useMessageChannel();\n        } else if (browserWindow === void 0 && true) {\n          scheduleFlush = attemptVertx();\n        } else {\n          scheduleFlush = useSetTimeout();\n        }\n        function then(onFulfillment, onRejection) {\n          var parent = this;\n          var child = new this.constructor(noop3);\n          if (child[PROMISE_ID] === void 0) {\n            makePromise(child);\n          }\n          var _state = parent._state;\n          if (_state) {\n            var callback = arguments[_state - 1];\n            asap(function() {\n              return invokeCallback(_state, child, callback, parent._result);\n            });\n          } else {\n            subscribe2(parent, child, onFulfillment, onRejection);\n          }\n          return child;\n        }\n        function resolve$1(object) {\n          var Constructor = this;\n          if (object && _typeof(object) === 'object' && object.constructor === Constructor) {\n            return object;\n          }\n          var promise = new Constructor(noop3);\n          resolve(promise, object);\n          return promise;\n        }\n        var PROMISE_ID = Math.random().toString(36).substring(2);\n        function noop3() {}\n        var PENDING = void 0;\n        var FULFILLED = 1;\n        var REJECTED = 2;\n        function selfFulfillment() {\n          return new TypeError('You cannot resolve a promise with itself');\n        }\n        function cannotReturnOwn() {\n          return new TypeError('A promises callback cannot return that same promise.');\n        }\n        function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n          try {\n            then$$1.call(value, fulfillmentHandler, rejectionHandler);\n          } catch (e) {\n            return e;\n          }\n        }\n        function handleForeignThenable(promise, thenable, then$$1) {\n          asap(function(promise2) {\n            var sealed = false;\n            var error = tryThen(then$$1, thenable, function(value) {\n              if (sealed) {\n                return;\n              }\n              sealed = true;\n              if (thenable !== value) {\n                resolve(promise2, value);\n              } else {\n                fulfill(promise2, value);\n              }\n            }, function(reason) {\n              if (sealed) {\n                return;\n              }\n              sealed = true;\n              reject(promise2, reason);\n            }, 'Settle: ' + (promise2._label || ' unknown promise'));\n            if (!sealed && error) {\n              sealed = true;\n              reject(promise2, error);\n            }\n          }, promise);\n        }\n        function handleOwnThenable(promise, thenable) {\n          if (thenable._state === FULFILLED) {\n            fulfill(promise, thenable._result);\n          } else if (thenable._state === REJECTED) {\n            reject(promise, thenable._result);\n          } else {\n            subscribe2(thenable, void 0, function(value) {\n              return resolve(promise, value);\n            }, function(reason) {\n              return reject(promise, reason);\n            });\n          }\n        }\n        function handleMaybeThenable(promise, maybeThenable, then$$1) {\n          if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n            handleOwnThenable(promise, maybeThenable);\n          } else {\n            if (then$$1 === void 0) {\n              fulfill(promise, maybeThenable);\n            } else if (isFunction(then$$1)) {\n              handleForeignThenable(promise, maybeThenable, then$$1);\n            } else {\n              fulfill(promise, maybeThenable);\n            }\n          }\n        }\n        function resolve(promise, value) {\n          if (promise === value) {\n            reject(promise, selfFulfillment());\n          } else if (objectOrFunction(value)) {\n            var then$$1 = void 0;\n            try {\n              then$$1 = value.then;\n            } catch (error) {\n              reject(promise, error);\n              return;\n            }\n            handleMaybeThenable(promise, value, then$$1);\n          } else {\n            fulfill(promise, value);\n          }\n        }\n        function publishRejection(promise) {\n          if (promise._onerror) {\n            promise._onerror(promise._result);\n          }\n          publish(promise);\n        }\n        function fulfill(promise, value) {\n          if (promise._state !== PENDING) {\n            return;\n          }\n          promise._result = value;\n          promise._state = FULFILLED;\n          if (promise._subscribers.length !== 0) {\n            asap(publish, promise);\n          }\n        }\n        function reject(promise, reason) {\n          if (promise._state !== PENDING) {\n            return;\n          }\n          promise._state = REJECTED;\n          promise._result = reason;\n          asap(publishRejection, promise);\n        }\n        function subscribe2(parent, child, onFulfillment, onRejection) {\n          var _subscribers = parent._subscribers;\n          var length = _subscribers.length;\n          parent._onerror = null;\n          _subscribers[length] = child;\n          _subscribers[length + FULFILLED] = onFulfillment;\n          _subscribers[length + REJECTED] = onRejection;\n          if (length === 0 && parent._state) {\n            asap(publish, parent);\n          }\n        }\n        function publish(promise) {\n          var subscribers = promise._subscribers;\n          var settled = promise._state;\n          if (subscribers.length === 0) {\n            return;\n          }\n          var child = void 0, callback = void 0, detail = promise._result;\n          for (var i = 0; i < subscribers.length; i += 3) {\n            child = subscribers[i];\n            callback = subscribers[i + settled];\n            if (child) {\n              invokeCallback(settled, child, callback, detail);\n            } else {\n              callback(detail);\n            }\n          }\n          promise._subscribers.length = 0;\n        }\n        function invokeCallback(settled, promise, callback, detail) {\n          var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;\n          if (hasCallback) {\n            try {\n              value = callback(detail);\n            } catch (e) {\n              succeeded = false;\n              error = e;\n            }\n            if (promise === value) {\n              reject(promise, cannotReturnOwn());\n              return;\n            }\n          } else {\n            value = detail;\n          }\n          if (promise._state !== PENDING) {} else if (hasCallback && succeeded) {\n            resolve(promise, value);\n          } else if (succeeded === false) {\n            reject(promise, error);\n          } else if (settled === FULFILLED) {\n            fulfill(promise, value);\n          } else if (settled === REJECTED) {\n            reject(promise, value);\n          }\n        }\n        function initializePromise(promise, resolver) {\n          try {\n            resolver(function resolvePromise(value) {\n              resolve(promise, value);\n            }, function rejectPromise(reason) {\n              reject(promise, reason);\n            });\n          } catch (e) {\n            reject(promise, e);\n          }\n        }\n        var id = 0;\n        function nextId() {\n          return id++;\n        }\n        function makePromise(promise) {\n          promise[PROMISE_ID] = id++;\n          promise._state = void 0;\n          promise._result = void 0;\n          promise._subscribers = [];\n        }\n        function validationError() {\n          return new Error('Array Methods must be provided an Array');\n        }\n        var Enumerator = function() {\n          function Enumerator2(Constructor, input) {\n            this._instanceConstructor = Constructor;\n            this.promise = new Constructor(noop3);\n            if (!this.promise[PROMISE_ID]) {\n              makePromise(this.promise);\n            }\n            if (isArray(input)) {\n              this.length = input.length;\n              this._remaining = input.length;\n              this._result = new Array(this.length);\n              if (this.length === 0) {\n                fulfill(this.promise, this._result);\n              } else {\n                this.length = this.length || 0;\n                this._enumerate(input);\n                if (this._remaining === 0) {\n                  fulfill(this.promise, this._result);\n                }\n              }\n            } else {\n              reject(this.promise, validationError());\n            }\n          }\n          Enumerator2.prototype._enumerate = function _enumerate(input) {\n            for (var i = 0; this._state === PENDING && i < input.length; i++) {\n              this._eachEntry(input[i], i);\n            }\n          };\n          Enumerator2.prototype._eachEntry = function _eachEntry(entry, i) {\n            var c4 = this._instanceConstructor;\n            var resolve$$1 = c4.resolve;\n            if (resolve$$1 === resolve$1) {\n              var _then = void 0;\n              var error = void 0;\n              var didError = false;\n              try {\n                _then = entry.then;\n              } catch (e) {\n                didError = true;\n                error = e;\n              }\n              if (_then === then && entry._state !== PENDING) {\n                this._settledAt(entry._state, i, entry._result);\n              } else if (typeof _then !== 'function') {\n                this._remaining--;\n                this._result[i] = entry;\n              } else if (c4 === Promise$1) {\n                var promise = new c4(noop3);\n                if (didError) {\n                  reject(promise, error);\n                } else {\n                  handleMaybeThenable(promise, entry, _then);\n                }\n                this._willSettleAt(promise, i);\n              } else {\n                this._willSettleAt(new c4(function(resolve$$12) {\n                  return resolve$$12(entry);\n                }), i);\n              }\n            } else {\n              this._willSettleAt(resolve$$1(entry), i);\n            }\n          };\n          Enumerator2.prototype._settledAt = function _settledAt(state, i, value) {\n            var promise = this.promise;\n            if (promise._state === PENDING) {\n              this._remaining--;\n              if (state === REJECTED) {\n                reject(promise, value);\n              } else {\n                this._result[i] = value;\n              }\n            }\n            if (this._remaining === 0) {\n              fulfill(promise, this._result);\n            }\n          };\n          Enumerator2.prototype._willSettleAt = function _willSettleAt(promise, i) {\n            var enumerator = this;\n            subscribe2(promise, void 0, function(value) {\n              return enumerator._settledAt(FULFILLED, i, value);\n            }, function(reason) {\n              return enumerator._settledAt(REJECTED, i, reason);\n            });\n          };\n          return Enumerator2;\n        }();\n        function all(entries) {\n          return new Enumerator(this, entries).promise;\n        }\n        function race(entries) {\n          var Constructor = this;\n          if (!isArray(entries)) {\n            return new Constructor(function(_, reject2) {\n              return reject2(new TypeError('You must pass an array to race.'));\n            });\n          } else {\n            return new Constructor(function(resolve2, reject2) {\n              var length = entries.length;\n              for (var i = 0; i < length; i++) {\n                Constructor.resolve(entries[i]).then(resolve2, reject2);\n              }\n            });\n          }\n        }\n        function reject$1(reason) {\n          var Constructor = this;\n          var promise = new Constructor(noop3);\n          reject(promise, reason);\n          return promise;\n        }\n        function needsResolver() {\n          throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n        }\n        function needsNew() {\n          throw new TypeError('Failed to construct \\'Promise\\': Please use the \\'new\\' operator, this object constructor cannot be called as a function.');\n        }\n        var Promise$1 = function() {\n          function Promise2(resolver) {\n            this[PROMISE_ID] = nextId();\n            this._result = this._state = void 0;\n            this._subscribers = [];\n            if (noop3 !== resolver) {\n              typeof resolver !== 'function' && needsResolver();\n              this instanceof Promise2 ? initializePromise(this, resolver) : needsNew();\n            }\n          }\n          Promise2.prototype['catch'] = function _catch(onRejection) {\n            return this.then(null, onRejection);\n          };\n          Promise2.prototype['finally'] = function _finally(callback) {\n            var promise = this;\n            var constructor = promise.constructor;\n            if (isFunction(callback)) {\n              return promise.then(function(value) {\n                return constructor.resolve(callback()).then(function() {\n                  return value;\n                });\n              }, function(reason) {\n                return constructor.resolve(callback()).then(function() {\n                  throw reason;\n                });\n              });\n            }\n            return promise.then(callback, callback);\n          };\n          return Promise2;\n        }();\n        Promise$1.prototype.then = then;\n        Promise$1.all = all;\n        Promise$1.race = race;\n        Promise$1.resolve = resolve$1;\n        Promise$1.reject = reject$1;\n        Promise$1._setScheduler = setScheduler;\n        Promise$1._setAsap = setAsap;\n        Promise$1._asap = asap;\n        function polyfill() {\n          var local = void 0;\n          if (typeof global !== 'undefined') {\n            local = global;\n          } else if (typeof self !== 'undefined') {\n            local = self;\n          } else {\n            try {\n              local = Function('return this')();\n            } catch (e) {\n              throw new Error('polyfill failed because global object is unavailable in this environment');\n            }\n          }\n          var P = local.Promise;\n          if (P) {\n            var promiseToString = null;\n            try {\n              promiseToString = Object.prototype.toString.call(P.resolve());\n            } catch (e) {}\n            if (promiseToString === '[object Promise]' && !P.cast) {\n              return;\n            }\n          }\n          local.Promise = Promise$1;\n        }\n        Promise$1.polyfill = polyfill;\n        Promise$1.Promise = Promise$1;\n        return Promise$1;\n      });\n    });\n    var require_typedarray = __commonJS(function(exports) {\n      var MAX_ARRAY_LENGTH = 1e5;\n      var ECMAScript = function() {\n        var opts = Object.prototype.toString;\n        var ophop = Object.prototype.hasOwnProperty;\n        return {\n          Class: function Class(v) {\n            return opts.call(v).replace(/^\\[object *|\\]$/g, '');\n          },\n          HasProperty: function HasProperty(o, p2) {\n            return p2 in o;\n          },\n          HasOwnProperty: function HasOwnProperty(o, p2) {\n            return ophop.call(o, p2);\n          },\n          IsCallable: function IsCallable(o) {\n            return typeof o === 'function';\n          },\n          ToInt32: function ToInt32(v) {\n            return v >> 0;\n          },\n          ToUint32: function ToUint32(v) {\n            return v >>> 0;\n          }\n        };\n      }();\n      var LN2 = Math.LN2;\n      var abs = Math.abs;\n      var floor = Math.floor;\n      var log2 = Math.log;\n      var min = Math.min;\n      var pow = Math.pow;\n      var round = Math.round;\n      function clamp3(v, minimum, max2) {\n        return v < minimum ? minimum : v > max2 ? max2 : v;\n      }\n      var getOwnPropNames = Object.getOwnPropertyNames || function(o) {\n        if (o !== Object(o)) {\n          throw new TypeError('Object.getOwnPropertyNames called on non-object');\n        }\n        var props = [], p2;\n        for (p2 in o) {\n          if (ECMAScript.HasOwnProperty(o, p2)) {\n            props.push(p2);\n          }\n        }\n        return props;\n      };\n      var defineProp;\n      if (Object.defineProperty && function() {\n        try {\n          Object.defineProperty({}, 'x', {});\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }()) {\n        defineProp = Object.defineProperty;\n      } else {\n        defineProp = function defineProp(o, p2, desc) {\n          if (!o === Object(o)) {\n            throw new TypeError('Object.defineProperty called on non-object');\n          }\n          if (ECMAScript.HasProperty(desc, 'get') && Object.prototype.__defineGetter__) {\n            Object.prototype.__defineGetter__.call(o, p2, desc.get);\n          }\n          if (ECMAScript.HasProperty(desc, 'set') && Object.prototype.__defineSetter__) {\n            Object.prototype.__defineSetter__.call(o, p2, desc.set);\n          }\n          if (ECMAScript.HasProperty(desc, 'value')) {\n            o[p2] = desc.value;\n          }\n          return o;\n        };\n      }\n      function configureProperties(obj) {\n        if (getOwnPropNames && defineProp) {\n          var props = getOwnPropNames(obj), i;\n          for (i = 0; i < props.length; i += 1) {\n            defineProp(obj, props[i], {\n              value: obj[props[i]],\n              writable: false,\n              enumerable: false,\n              configurable: false\n            });\n          }\n        }\n      }\n      function makeArrayAccessors(obj) {\n        if (!defineProp) {\n          return;\n        }\n        if (obj.length > MAX_ARRAY_LENGTH) {\n          throw new RangeError('Array too large for polyfill');\n        }\n        function makeArrayAccessor(index) {\n          defineProp(obj, index, {\n            get: function get() {\n              return obj._getter(index);\n            },\n            set: function set(v) {\n              obj._setter(index, v);\n            },\n            enumerable: true,\n            configurable: false\n          });\n        }\n        var i;\n        for (i = 0; i < obj.length; i += 1) {\n          makeArrayAccessor(i);\n        }\n      }\n      function as_signed(value, bits) {\n        var s = 32 - bits;\n        return value << s >> s;\n      }\n      function as_unsigned(value, bits) {\n        var s = 32 - bits;\n        return value << s >>> s;\n      }\n      function packI8(n2) {\n        return [ n2 & 255 ];\n      }\n      function unpackI8(bytes) {\n        return as_signed(bytes[0], 8);\n      }\n      function packU8(n2) {\n        return [ n2 & 255 ];\n      }\n      function unpackU8(bytes) {\n        return as_unsigned(bytes[0], 8);\n      }\n      function packU8Clamped(n2) {\n        n2 = round(Number(n2));\n        return [ n2 < 0 ? 0 : n2 > 255 ? 255 : n2 & 255 ];\n      }\n      function packI16(n2) {\n        return [ n2 >> 8 & 255, n2 & 255 ];\n      }\n      function unpackI16(bytes) {\n        return as_signed(bytes[0] << 8 | bytes[1], 16);\n      }\n      function packU16(n2) {\n        return [ n2 >> 8 & 255, n2 & 255 ];\n      }\n      function unpackU16(bytes) {\n        return as_unsigned(bytes[0] << 8 | bytes[1], 16);\n      }\n      function packI32(n2) {\n        return [ n2 >> 24 & 255, n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255 ];\n      }\n      function unpackI32(bytes) {\n        return as_signed(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32);\n      }\n      function packU32(n2) {\n        return [ n2 >> 24 & 255, n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255 ];\n      }\n      function unpackU32(bytes) {\n        return as_unsigned(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32);\n      }\n      function packIEEE754(v, ebits, fbits) {\n        var bias = (1 << ebits - 1) - 1;\n        var s, e, f, i, bits, str, bytes;\n        function roundToEven(n2) {\n          var w = floor(n2);\n          var fl = n2 - w;\n          if (fl < .5) {\n            return w;\n          }\n          if (fl > .5) {\n            return w + 1;\n          }\n          return w % 2 ? w + 1 : w;\n        }\n        if (v !== v) {\n          e = (1 << ebits) - 1;\n          f = pow(2, fbits - 1);\n          s = 0;\n        } else if (v === Infinity || v === -Infinity) {\n          e = (1 << ebits) - 1;\n          f = 0;\n          s = v < 0 ? 1 : 0;\n        } else if (v === 0) {\n          e = 0;\n          f = 0;\n          s = 1 / v === -Infinity ? 1 : 0;\n        } else {\n          s = v < 0;\n          v = abs(v);\n          if (v >= pow(2, 1 - bias)) {\n            e = min(floor(log2(v) / LN2), 1023);\n            f = roundToEven(v / pow(2, e) * pow(2, fbits));\n            if (f / pow(2, fbits) >= 2) {\n              e = e + 1;\n              f = 1;\n            }\n            if (e > bias) {\n              e = (1 << ebits) - 1;\n              f = 0;\n            } else {\n              e = e + bias;\n              f = f - pow(2, fbits);\n            }\n          } else {\n            e = 0;\n            f = roundToEven(v / pow(2, 1 - bias - fbits));\n          }\n        }\n        bits = [];\n        for (i = fbits; i; i -= 1) {\n          bits.push(f % 2 ? 1 : 0);\n          f = floor(f / 2);\n        }\n        for (i = ebits; i; i -= 1) {\n          bits.push(e % 2 ? 1 : 0);\n          e = floor(e / 2);\n        }\n        bits.push(s ? 1 : 0);\n        bits.reverse();\n        str = bits.join('');\n        bytes = [];\n        while (str.length) {\n          bytes.push(parseInt(str.substring(0, 8), 2));\n          str = str.substring(8);\n        }\n        return bytes;\n      }\n      function unpackIEEE754(bytes, ebits, fbits) {\n        var bits = [], i, j, b2, str, bias, s, e, f;\n        for (i = bytes.length; i; i -= 1) {\n          b2 = bytes[i - 1];\n          for (j = 8; j; j -= 1) {\n            bits.push(b2 % 2 ? 1 : 0);\n            b2 = b2 >> 1;\n          }\n        }\n        bits.reverse();\n        str = bits.join('');\n        bias = (1 << ebits - 1) - 1;\n        s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n        e = parseInt(str.substring(1, 1 + ebits), 2);\n        f = parseInt(str.substring(1 + ebits), 2);\n        if (e === (1 << ebits) - 1) {\n          return f === 0 ? s * Infinity : NaN;\n        } else if (e > 0) {\n          return s * pow(2, e - bias) * (1 + f / pow(2, fbits));\n        } else if (f !== 0) {\n          return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));\n        }\n        return s < 0 ? -0 : 0;\n      }\n      function unpackF64(b2) {\n        return unpackIEEE754(b2, 11, 52);\n      }\n      function packF64(v) {\n        return packIEEE754(v, 11, 52);\n      }\n      function unpackF32(b2) {\n        return unpackIEEE754(b2, 8, 23);\n      }\n      function packF32(v) {\n        return packIEEE754(v, 8, 23);\n      }\n      (function() {\n        function ArrayBuffer(length) {\n          length = ECMAScript.ToInt32(length);\n          if (length < 0) {\n            throw new RangeError('ArrayBuffer size is not a small enough positive integer');\n          }\n          this.byteLength = length;\n          this._bytes = [];\n          this._bytes.length = length;\n          var i;\n          for (i = 0; i < this.byteLength; i += 1) {\n            this._bytes[i] = 0;\n          }\n          configureProperties(this);\n        }\n        exports.ArrayBuffer = exports.ArrayBuffer || ArrayBuffer;\n        function ArrayBufferView() {}\n        function makeConstructor(bytesPerElement, pack, unpack) {\n          var _ctor;\n          _ctor = function ctor(buffer, byteOffset, length) {\n            var array, sequence, i, s;\n            if (!arguments.length || typeof arguments[0] === 'number') {\n              this.length = ECMAScript.ToInt32(arguments[0]);\n              if (length < 0) {\n                throw new RangeError('ArrayBufferView size is not a small enough positive integer');\n              }\n              this.byteLength = this.length * this.BYTES_PER_ELEMENT;\n              this.buffer = new ArrayBuffer(this.byteLength);\n              this.byteOffset = 0;\n            } else if (_typeof(arguments[0]) === 'object' && arguments[0].constructor === _ctor) {\n              array = arguments[0];\n              this.length = array.length;\n              this.byteLength = this.length * this.BYTES_PER_ELEMENT;\n              this.buffer = new ArrayBuffer(this.byteLength);\n              this.byteOffset = 0;\n              for (i = 0; i < this.length; i += 1) {\n                this._setter(i, array._getter(i));\n              }\n            } else if (_typeof(arguments[0]) === 'object' && !(arguments[0] instanceof ArrayBuffer || ECMAScript.Class(arguments[0]) === 'ArrayBuffer')) {\n              sequence = arguments[0];\n              this.length = ECMAScript.ToUint32(sequence.length);\n              this.byteLength = this.length * this.BYTES_PER_ELEMENT;\n              this.buffer = new ArrayBuffer(this.byteLength);\n              this.byteOffset = 0;\n              for (i = 0; i < this.length; i += 1) {\n                s = sequence[i];\n                this._setter(i, Number(s));\n              }\n            } else if (_typeof(arguments[0]) === 'object' && (arguments[0] instanceof ArrayBuffer || ECMAScript.Class(arguments[0]) === 'ArrayBuffer')) {\n              this.buffer = buffer;\n              this.byteOffset = ECMAScript.ToUint32(byteOffset);\n              if (this.byteOffset > this.buffer.byteLength) {\n                throw new RangeError('byteOffset out of range');\n              }\n              if (this.byteOffset % this.BYTES_PER_ELEMENT) {\n                throw new RangeError('ArrayBuffer length minus the byteOffset is not a multiple of the element size.');\n              }\n              if (arguments.length < 3) {\n                this.byteLength = this.buffer.byteLength - this.byteOffset;\n                if (this.byteLength % this.BYTES_PER_ELEMENT) {\n                  throw new RangeError('length of buffer minus byteOffset not a multiple of the element size');\n                }\n                this.length = this.byteLength / this.BYTES_PER_ELEMENT;\n              } else {\n                this.length = ECMAScript.ToUint32(length);\n                this.byteLength = this.length * this.BYTES_PER_ELEMENT;\n              }\n              if (this.byteOffset + this.byteLength > this.buffer.byteLength) {\n                throw new RangeError('byteOffset and length reference an area beyond the end of the buffer');\n              }\n            } else {\n              throw new TypeError('Unexpected argument type(s)');\n            }\n            this.constructor = _ctor;\n            configureProperties(this);\n            makeArrayAccessors(this);\n          };\n          _ctor.prototype = new ArrayBufferView();\n          _ctor.prototype.BYTES_PER_ELEMENT = bytesPerElement;\n          _ctor.prototype._pack = pack;\n          _ctor.prototype._unpack = unpack;\n          _ctor.BYTES_PER_ELEMENT = bytesPerElement;\n          _ctor.prototype._getter = function(index) {\n            if (arguments.length < 1) {\n              throw new SyntaxError('Not enough arguments');\n            }\n            index = ECMAScript.ToUint32(index);\n            if (index >= this.length) {\n              return void 0;\n            }\n            var bytes = [];\n            for (var i = 0, o = this.byteOffset + index * this.BYTES_PER_ELEMENT; i < this.BYTES_PER_ELEMENT; i += 1, \n            o += 1) {\n              bytes.push(this.buffer._bytes[o]);\n            }\n            return this._unpack(bytes);\n          };\n          _ctor.prototype.get = _ctor.prototype._getter;\n          _ctor.prototype._setter = function(index, value) {\n            if (arguments.length < 2) {\n              throw new SyntaxError('Not enough arguments');\n            }\n            index = ECMAScript.ToUint32(index);\n            if (index < this.length) {\n              var bytes = this._pack(value);\n              var i;\n              var o;\n              for (i = 0, o = this.byteOffset + index * this.BYTES_PER_ELEMENT; i < this.BYTES_PER_ELEMENT; i += 1, \n              o += 1) {\n                this.buffer._bytes[o] = bytes[i];\n              }\n            }\n          };\n          _ctor.prototype.set = function(index, value) {\n            if (arguments.length < 1) {\n              throw new SyntaxError('Not enough arguments');\n            }\n            var array, sequence, offset, len, i, s, d2, byteOffset, byteLength, tmp;\n            if (_typeof(arguments[0]) === 'object' && arguments[0].constructor === this.constructor) {\n              array = arguments[0];\n              offset = ECMAScript.ToUint32(arguments[1]);\n              if (offset + array.length > this.length) {\n                throw new RangeError('Offset plus length of array is out of range');\n              }\n              byteOffset = this.byteOffset + offset * this.BYTES_PER_ELEMENT;\n              byteLength = array.length * this.BYTES_PER_ELEMENT;\n              if (array.buffer === this.buffer) {\n                tmp = [];\n                for (i = 0, s = array.byteOffset; i < byteLength; i += 1, s += 1) {\n                  tmp[i] = array.buffer._bytes[s];\n                }\n                for (i = 0, d2 = byteOffset; i < byteLength; i += 1, d2 += 1) {\n                  this.buffer._bytes[d2] = tmp[i];\n                }\n              } else {\n                for (i = 0, s = array.byteOffset, d2 = byteOffset; i < byteLength; i += 1, \n                s += 1, d2 += 1) {\n                  this.buffer._bytes[d2] = array.buffer._bytes[s];\n                }\n              }\n            } else if (_typeof(arguments[0]) === 'object' && typeof arguments[0].length !== 'undefined') {\n              sequence = arguments[0];\n              len = ECMAScript.ToUint32(sequence.length);\n              offset = ECMAScript.ToUint32(arguments[1]);\n              if (offset + len > this.length) {\n                throw new RangeError('Offset plus length of array is out of range');\n              }\n              for (i = 0; i < len; i += 1) {\n                s = sequence[i];\n                this._setter(offset + i, Number(s));\n              }\n            } else {\n              throw new TypeError('Unexpected argument type(s)');\n            }\n          };\n          _ctor.prototype.subarray = function(start, end) {\n            start = ECMAScript.ToInt32(start);\n            end = ECMAScript.ToInt32(end);\n            if (arguments.length < 1) {\n              start = 0;\n            }\n            if (arguments.length < 2) {\n              end = this.length;\n            }\n            if (start < 0) {\n              start = this.length + start;\n            }\n            if (end < 0) {\n              end = this.length + end;\n            }\n            start = clamp3(start, 0, this.length);\n            end = clamp3(end, 0, this.length);\n            var len = end - start;\n            if (len < 0) {\n              len = 0;\n            }\n            return new this.constructor(this.buffer, this.byteOffset + start * this.BYTES_PER_ELEMENT, len);\n          };\n          return _ctor;\n        }\n        var Int8Array = makeConstructor(1, packI8, unpackI8);\n        var Uint8Array2 = makeConstructor(1, packU8, unpackU8);\n        var Uint8ClampedArray2 = makeConstructor(1, packU8Clamped, unpackU8);\n        var Int16Array = makeConstructor(2, packI16, unpackI16);\n        var Uint16Array = makeConstructor(2, packU16, unpackU16);\n        var Int32Array = makeConstructor(4, packI32, unpackI32);\n        var Uint32Array3 = makeConstructor(4, packU32, unpackU32);\n        var Float32Array = makeConstructor(4, packF32, unpackF32);\n        var Float64Array = makeConstructor(8, packF64, unpackF64);\n        exports.Int8Array = exports.Int8Array || Int8Array;\n        exports.Uint8Array = exports.Uint8Array || Uint8Array2;\n        exports.Uint8ClampedArray = exports.Uint8ClampedArray || Uint8ClampedArray2;\n        exports.Int16Array = exports.Int16Array || Int16Array;\n        exports.Uint16Array = exports.Uint16Array || Uint16Array;\n        exports.Int32Array = exports.Int32Array || Int32Array;\n        exports.Uint32Array = exports.Uint32Array || Uint32Array3;\n        exports.Float32Array = exports.Float32Array || Float32Array;\n        exports.Float64Array = exports.Float64Array || Float64Array;\n      })();\n      (function() {\n        function r(array, index) {\n          return ECMAScript.IsCallable(array.get) ? array.get(index) : array[index];\n        }\n        var IS_BIG_ENDIAN = function() {\n          var u16array = new exports.Uint16Array([ 4660 ]), u8array = new exports.Uint8Array(u16array.buffer);\n          return r(u8array, 0) === 18;\n        }();\n        function DataView(buffer, byteOffset, byteLength) {\n          if (arguments.length === 0) {\n            buffer = new exports.ArrayBuffer(0);\n          } else if (!(buffer instanceof exports.ArrayBuffer || ECMAScript.Class(buffer) === 'ArrayBuffer')) {\n            throw new TypeError('TypeError');\n          }\n          this.buffer = buffer || new exports.ArrayBuffer(0);\n          this.byteOffset = ECMAScript.ToUint32(byteOffset);\n          if (this.byteOffset > this.buffer.byteLength) {\n            throw new RangeError('byteOffset out of range');\n          }\n          if (arguments.length < 3) {\n            this.byteLength = this.buffer.byteLength - this.byteOffset;\n          } else {\n            this.byteLength = ECMAScript.ToUint32(byteLength);\n          }\n          if (this.byteOffset + this.byteLength > this.buffer.byteLength) {\n            throw new RangeError('byteOffset and length reference an area beyond the end of the buffer');\n          }\n          configureProperties(this);\n        }\n        function makeGetter(arrayType) {\n          return function(byteOffset, littleEndian) {\n            byteOffset = ECMAScript.ToUint32(byteOffset);\n            if (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) {\n              throw new RangeError('Array index out of range');\n            }\n            byteOffset += this.byteOffset;\n            var uint8Array = new exports.Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT), bytes = [], i;\n            for (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) {\n              bytes.push(r(uint8Array, i));\n            }\n            if (Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN)) {\n              bytes.reverse();\n            }\n            return r(new arrayType(new exports.Uint8Array(bytes).buffer), 0);\n          };\n        }\n        DataView.prototype.getUint8 = makeGetter(exports.Uint8Array);\n        DataView.prototype.getInt8 = makeGetter(exports.Int8Array);\n        DataView.prototype.getUint16 = makeGetter(exports.Uint16Array);\n        DataView.prototype.getInt16 = makeGetter(exports.Int16Array);\n        DataView.prototype.getUint32 = makeGetter(exports.Uint32Array);\n        DataView.prototype.getInt32 = makeGetter(exports.Int32Array);\n        DataView.prototype.getFloat32 = makeGetter(exports.Float32Array);\n        DataView.prototype.getFloat64 = makeGetter(exports.Float64Array);\n        function makeSetter(arrayType) {\n          return function(byteOffset, value, littleEndian) {\n            byteOffset = ECMAScript.ToUint32(byteOffset);\n            if (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) {\n              throw new RangeError('Array index out of range');\n            }\n            var typeArray = new arrayType([ value ]), byteArray = new exports.Uint8Array(typeArray.buffer), bytes = [], i, byteView;\n            for (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) {\n              bytes.push(r(byteArray, i));\n            }\n            if (Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN)) {\n              bytes.reverse();\n            }\n            byteView = new exports.Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT);\n            byteView.set(bytes);\n          };\n        }\n        DataView.prototype.setUint8 = makeSetter(exports.Uint8Array);\n        DataView.prototype.setInt8 = makeSetter(exports.Int8Array);\n        DataView.prototype.setUint16 = makeSetter(exports.Uint16Array);\n        DataView.prototype.setInt16 = makeSetter(exports.Int16Array);\n        DataView.prototype.setUint32 = makeSetter(exports.Uint32Array);\n        DataView.prototype.setInt32 = makeSetter(exports.Int32Array);\n        DataView.prototype.setFloat32 = makeSetter(exports.Float32Array);\n        DataView.prototype.setFloat64 = makeSetter(exports.Float64Array);\n        exports.DataView = exports.DataView || DataView;\n      })();\n    });\n    var require_weakmap_polyfill = __commonJS(function(exports) {\n      (function(self2) {\n        'use strict';\n        if (self2.WeakMap) {\n          return;\n        }\n        var hasOwnProperty2 = Object.prototype.hasOwnProperty;\n        var hasDefine = Object.defineProperty && function() {\n          try {\n            return Object.defineProperty({}, 'x', {\n              value: 1\n            }).x === 1;\n          } catch (e) {}\n        }();\n        var defineProperty = function defineProperty(object, name, value) {\n          if (hasDefine) {\n            Object.defineProperty(object, name, {\n              configurable: true,\n              writable: true,\n              value: value\n            });\n          } else {\n            object[name] = value;\n          }\n        };\n        self2.WeakMap = function() {\n          function WeakMap2() {\n            if (this === void 0) {\n              throw new TypeError('Constructor WeakMap requires \\'new\\'');\n            }\n            defineProperty(this, '_id', genId('_WeakMap'));\n            if (arguments.length > 0) {\n              throw new TypeError('WeakMap iterable is not supported');\n            }\n          }\n          defineProperty(WeakMap2.prototype, 'delete', function(key) {\n            checkInstance(this, 'delete');\n            if (!isObject(key)) {\n              return false;\n            }\n            var entry = key[this._id];\n            if (entry && entry[0] === key) {\n              delete key[this._id];\n              return true;\n            }\n            return false;\n          });\n          defineProperty(WeakMap2.prototype, 'get', function(key) {\n            checkInstance(this, 'get');\n            if (!isObject(key)) {\n              return void 0;\n            }\n            var entry = key[this._id];\n            if (entry && entry[0] === key) {\n              return entry[1];\n            }\n            return void 0;\n          });\n          defineProperty(WeakMap2.prototype, 'has', function(key) {\n            checkInstance(this, 'has');\n            if (!isObject(key)) {\n              return false;\n            }\n            var entry = key[this._id];\n            if (entry && entry[0] === key) {\n              return true;\n            }\n            return false;\n          });\n          defineProperty(WeakMap2.prototype, 'set', function(key, value) {\n            checkInstance(this, 'set');\n            if (!isObject(key)) {\n              throw new TypeError('Invalid value used as weak map key');\n            }\n            var entry = key[this._id];\n            if (entry && entry[0] === key) {\n              entry[1] = value;\n              return this;\n            }\n            defineProperty(key, this._id, [ key, value ]);\n            return this;\n          });\n          function checkInstance(x, methodName) {\n            if (!isObject(x) || !hasOwnProperty2.call(x, '_id')) {\n              throw new TypeError(methodName + ' method called on incompatible receiver ' + _typeof(x));\n            }\n          }\n          function genId(prefix) {\n            return prefix + '_' + rand() + '.' + rand();\n          }\n          function rand() {\n            return Math.random().toString().substring(2);\n          }\n          defineProperty(WeakMap2, '_polyfill', true);\n          return WeakMap2;\n        }();\n        function isObject(x) {\n          return Object(x) === x;\n        }\n      })(typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : exports);\n    });\n    var require_global = __commonJS(function(exports, module) {\n      'use strict';\n      var check = function check(it) {\n        return it && it.Math === Math && it;\n      };\n      module.exports = check((typeof globalThis === 'undefined' ? 'undefined' : _typeof(globalThis)) == 'object' && globalThis) || check((typeof window === 'undefined' ? 'undefined' : _typeof(window)) == 'object' && window) || check((typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self) || check((typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global) || function() {\n        return this;\n      }() || exports || Function('return this')();\n    });\n    var require_fails = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(exec) {\n        try {\n          return !!exec();\n        } catch (error) {\n          return true;\n        }\n      };\n    });\n    var require_function_bind_native = __commonJS(function(exports, module) {\n      'use strict';\n      var fails = require_fails();\n      module.exports = !fails(function() {\n        var test = function() {}.bind();\n        return typeof test != 'function' || test.hasOwnProperty('prototype');\n      });\n    });\n    var require_function_apply = __commonJS(function(exports, module) {\n      'use strict';\n      var NATIVE_BIND = require_function_bind_native();\n      var FunctionPrototype = Function.prototype;\n      var apply = FunctionPrototype.apply;\n      var call = FunctionPrototype.call;\n      module.exports = (typeof Reflect === 'undefined' ? 'undefined' : _typeof(Reflect)) == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {\n        return call.apply(apply, arguments);\n      });\n    });\n    var require_function_uncurry_this = __commonJS(function(exports, module) {\n      'use strict';\n      var NATIVE_BIND = require_function_bind_native();\n      var FunctionPrototype = Function.prototype;\n      var call = FunctionPrototype.call;\n      var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);\n      module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {\n        return function() {\n          return call.apply(fn, arguments);\n        };\n      };\n    });\n    var require_classof_raw = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var toString = uncurryThis({}.toString);\n      var stringSlice = uncurryThis(''.slice);\n      module.exports = function(it) {\n        return stringSlice(toString(it), 8, -1);\n      };\n    });\n    var require_function_uncurry_this_clause = __commonJS(function(exports, module) {\n      'use strict';\n      var classofRaw = require_classof_raw();\n      var uncurryThis = require_function_uncurry_this();\n      module.exports = function(fn) {\n        if (classofRaw(fn) === 'Function') {\n          return uncurryThis(fn);\n        }\n      };\n    });\n    var require_document_all = __commonJS(function(exports, module) {\n      'use strict';\n      var documentAll = (typeof document === 'undefined' ? 'undefined' : _typeof(document)) == 'object' && document.all;\n      var IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== void 0;\n      module.exports = {\n        all: documentAll,\n        IS_HTMLDDA: IS_HTMLDDA\n      };\n    });\n    var require_is_callable2 = __commonJS(function(exports, module) {\n      'use strict';\n      var $documentAll = require_document_all();\n      var documentAll = $documentAll.all;\n      module.exports = $documentAll.IS_HTMLDDA ? function(argument) {\n        return typeof argument == 'function' || argument === documentAll;\n      } : function(argument) {\n        return typeof argument == 'function';\n      };\n    });\n    var require_descriptors = __commonJS(function(exports, module) {\n      'use strict';\n      var fails = require_fails();\n      module.exports = !fails(function() {\n        return Object.defineProperty({}, 1, {\n          get: function get() {\n            return 7;\n          }\n        })[1] !== 7;\n      });\n    });\n    var require_function_call = __commonJS(function(exports, module) {\n      'use strict';\n      var NATIVE_BIND = require_function_bind_native();\n      var call = Function.prototype.call;\n      module.exports = NATIVE_BIND ? call.bind(call) : function() {\n        return call.apply(call, arguments);\n      };\n    });\n    var require_object_property_is_enumerable = __commonJS(function(exports) {\n      'use strict';\n      var $propertyIsEnumerable = {}.propertyIsEnumerable;\n      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({\n        1: 2\n      }, 1);\n      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n        var descriptor = getOwnPropertyDescriptor(this, V);\n        return !!descriptor && descriptor.enumerable;\n      } : $propertyIsEnumerable;\n    });\n    var require_create_property_descriptor = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(bitmap, value) {\n        return {\n          enumerable: !(bitmap & 1),\n          configurable: !(bitmap & 2),\n          writable: !(bitmap & 4),\n          value: value\n        };\n      };\n    });\n    var require_indexed_object = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var fails = require_fails();\n      var classof = require_classof_raw();\n      var $Object = Object;\n      var split = uncurryThis(''.split);\n      module.exports = fails(function() {\n        return !$Object('z').propertyIsEnumerable(0);\n      }) ? function(it) {\n        return classof(it) === 'String' ? split(it, '') : $Object(it);\n      } : $Object;\n    });\n    var require_is_null_or_undefined = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(it) {\n        return it === null || it === void 0;\n      };\n    });\n    var require_require_object_coercible = __commonJS(function(exports, module) {\n      'use strict';\n      var isNullOrUndefined = require_is_null_or_undefined();\n      var $TypeError = TypeError;\n      module.exports = function(it) {\n        if (isNullOrUndefined(it)) {\n          throw new $TypeError('Can\\'t call method on ' + it);\n        }\n        return it;\n      };\n    });\n    var require_to_indexed_object = __commonJS(function(exports, module) {\n      'use strict';\n      var IndexedObject = require_indexed_object();\n      var requireObjectCoercible = require_require_object_coercible();\n      module.exports = function(it) {\n        return IndexedObject(requireObjectCoercible(it));\n      };\n    });\n    var require_is_object2 = __commonJS(function(exports, module) {\n      'use strict';\n      var isCallable = require_is_callable2();\n      var $documentAll = require_document_all();\n      var documentAll = $documentAll.all;\n      module.exports = $documentAll.IS_HTMLDDA ? function(it) {\n        return _typeof(it) == 'object' ? it !== null : isCallable(it) || it === documentAll;\n      } : function(it) {\n        return _typeof(it) == 'object' ? it !== null : isCallable(it);\n      };\n    });\n    var require_path = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = {};\n    });\n    var require_get_built_in = __commonJS(function(exports, module) {\n      'use strict';\n      var path = require_path();\n      var global2 = require_global();\n      var isCallable = require_is_callable2();\n      var aFunction = function aFunction(variable) {\n        return isCallable(variable) ? variable : void 0;\n      };\n      module.exports = function(namespace, method) {\n        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];\n      };\n    });\n    var require_object_is_prototype_of = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      module.exports = uncurryThis({}.isPrototypeOf);\n    });\n    var require_engine_user_agent = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';\n    });\n    var require_engine_v8_version = __commonJS(function(exports, module) {\n      'use strict';\n      var global2 = require_global();\n      var userAgent = require_engine_user_agent();\n      var process2 = global2.process;\n      var Deno = global2.Deno;\n      var versions = process2 && process2.versions || Deno && Deno.version;\n      var v8 = versions && versions.v8;\n      var match;\n      var version;\n      if (v8) {\n        match = v8.split('.');\n        version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n      }\n      if (!version && userAgent) {\n        match = userAgent.match(/Edge\\/(\\d+)/);\n        if (!match || match[1] >= 74) {\n          match = userAgent.match(/Chrome\\/(\\d+)/);\n          if (match) {\n            version = +match[1];\n          }\n        }\n      }\n      module.exports = version;\n    });\n    var require_symbol_constructor_detection = __commonJS(function(exports, module) {\n      'use strict';\n      var V8_VERSION = require_engine_v8_version();\n      var fails = require_fails();\n      var global2 = require_global();\n      var $String = global2.String;\n      module.exports = !!Object.getOwnPropertySymbols && !fails(function() {\n        var symbol = Symbol('symbol detection');\n        return !$String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n      });\n    });\n    var require_use_symbol_as_uid = __commonJS(function(exports, module) {\n      'use strict';\n      var NATIVE_SYMBOL = require_symbol_constructor_detection();\n      module.exports = NATIVE_SYMBOL && !Symbol.sham && _typeof(Symbol.iterator) == 'symbol';\n    });\n    var require_is_symbol2 = __commonJS(function(exports, module) {\n      'use strict';\n      var getBuiltIn = require_get_built_in();\n      var isCallable = require_is_callable2();\n      var isPrototypeOf = require_object_is_prototype_of();\n      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();\n      var $Object = Object;\n      module.exports = USE_SYMBOL_AS_UID ? function(it) {\n        return _typeof(it) == 'symbol';\n      } : function(it) {\n        var $Symbol = getBuiltIn('Symbol');\n        return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));\n      };\n    });\n    var require_try_to_string = __commonJS(function(exports, module) {\n      'use strict';\n      var $String = String;\n      module.exports = function(argument) {\n        try {\n          return $String(argument);\n        } catch (error) {\n          return 'Object';\n        }\n      };\n    });\n    var require_a_callable = __commonJS(function(exports, module) {\n      'use strict';\n      var isCallable = require_is_callable2();\n      var tryToString = require_try_to_string();\n      var $TypeError = TypeError;\n      module.exports = function(argument) {\n        if (isCallable(argument)) {\n          return argument;\n        }\n        throw new $TypeError(tryToString(argument) + ' is not a function');\n      };\n    });\n    var require_get_method = __commonJS(function(exports, module) {\n      'use strict';\n      var aCallable = require_a_callable();\n      var isNullOrUndefined = require_is_null_or_undefined();\n      module.exports = function(V, P) {\n        var func = V[P];\n        return isNullOrUndefined(func) ? void 0 : aCallable(func);\n      };\n    });\n    var require_ordinary_to_primitive = __commonJS(function(exports, module) {\n      'use strict';\n      var call = require_function_call();\n      var isCallable = require_is_callable2();\n      var isObject = require_is_object2();\n      var $TypeError = TypeError;\n      module.exports = function(input, pref) {\n        var fn, val;\n        if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) {\n          return val;\n        }\n        if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) {\n          return val;\n        }\n        if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) {\n          return val;\n        }\n        throw new $TypeError('Can\\'t convert object to primitive value');\n      };\n    });\n    var require_is_pure = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = true;\n    });\n    var require_define_global_property = __commonJS(function(exports, module) {\n      'use strict';\n      var global2 = require_global();\n      var defineProperty = Object.defineProperty;\n      module.exports = function(key, value) {\n        try {\n          defineProperty(global2, key, {\n            value: value,\n            configurable: true,\n            writable: true\n          });\n        } catch (error) {\n          global2[key] = value;\n        }\n        return value;\n      };\n    });\n    var require_shared_store = __commonJS(function(exports, module) {\n      'use strict';\n      var global2 = require_global();\n      var defineGlobalProperty = require_define_global_property();\n      var SHARED = '__core-js_shared__';\n      var store = global2[SHARED] || defineGlobalProperty(SHARED, {});\n      module.exports = store;\n    });\n    var require_shared = __commonJS(function(exports, module) {\n      'use strict';\n      var IS_PURE = require_is_pure();\n      var store = require_shared_store();\n      (module.exports = function(key, value) {\n        return store[key] || (store[key] = value !== void 0 ? value : {});\n      })('versions', []).push({\n        version: '3.33.0',\n        mode: IS_PURE ? 'pure' : 'global',\n        copyright: '\\xa9 2014-2023 Denis Pushkarev (zloirock.ru)',\n        license: 'https://github.com/zloirock/core-js/blob/v3.33.0/LICENSE',\n        source: 'https://github.com/zloirock/core-js'\n      });\n    });\n    var require_to_object = __commonJS(function(exports, module) {\n      'use strict';\n      var requireObjectCoercible = require_require_object_coercible();\n      var $Object = Object;\n      module.exports = function(argument) {\n        return $Object(requireObjectCoercible(argument));\n      };\n    });\n    var require_has_own_property = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var toObject = require_to_object();\n      var hasOwnProperty2 = uncurryThis({}.hasOwnProperty);\n      module.exports = Object.hasOwn || function hasOwn2(it, key) {\n        return hasOwnProperty2(toObject(it), key);\n      };\n    });\n    var require_uid = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var id = 0;\n      var postfix = Math.random();\n      var toString = uncurryThis(1..toString);\n      module.exports = function(key) {\n        return 'Symbol(' + (key === void 0 ? '' : key) + ')_' + toString(++id + postfix, 36);\n      };\n    });\n    var require_well_known_symbol = __commonJS(function(exports, module) {\n      'use strict';\n      var global2 = require_global();\n      var shared = require_shared();\n      var hasOwn2 = require_has_own_property();\n      var uid = require_uid();\n      var NATIVE_SYMBOL = require_symbol_constructor_detection();\n      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();\n      var Symbol2 = global2.Symbol;\n      var WellKnownSymbolsStore = shared('wks');\n      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2['for'] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;\n      module.exports = function(name) {\n        if (!hasOwn2(WellKnownSymbolsStore, name)) {\n          WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn2(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol('Symbol.' + name);\n        }\n        return WellKnownSymbolsStore[name];\n      };\n    });\n    var require_to_primitive = __commonJS(function(exports, module) {\n      'use strict';\n      var call = require_function_call();\n      var isObject = require_is_object2();\n      var isSymbol = require_is_symbol2();\n      var getMethod = require_get_method();\n      var ordinaryToPrimitive = require_ordinary_to_primitive();\n      var wellKnownSymbol = require_well_known_symbol();\n      var $TypeError = TypeError;\n      var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n      module.exports = function(input, pref) {\n        if (!isObject(input) || isSymbol(input)) {\n          return input;\n        }\n        var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n        var result;\n        if (exoticToPrim) {\n          if (pref === void 0) {\n            pref = 'default';\n          }\n          result = call(exoticToPrim, input, pref);\n          if (!isObject(result) || isSymbol(result)) {\n            return result;\n          }\n          throw new $TypeError('Can\\'t convert object to primitive value');\n        }\n        if (pref === void 0) {\n          pref = 'number';\n        }\n        return ordinaryToPrimitive(input, pref);\n      };\n    });\n    var require_to_property_key = __commonJS(function(exports, module) {\n      'use strict';\n      var toPrimitive = require_to_primitive();\n      var isSymbol = require_is_symbol2();\n      module.exports = function(argument) {\n        var key = toPrimitive(argument, 'string');\n        return isSymbol(key) ? key : key + '';\n      };\n    });\n    var require_document_create_element = __commonJS(function(exports, module) {\n      'use strict';\n      var global2 = require_global();\n      var isObject = require_is_object2();\n      var document2 = global2.document;\n      var EXISTS = isObject(document2) && isObject(document2.createElement);\n      module.exports = function(it) {\n        return EXISTS ? document2.createElement(it) : {};\n      };\n    });\n    var require_ie8_dom_define = __commonJS(function(exports, module) {\n      'use strict';\n      var DESCRIPTORS = require_descriptors();\n      var fails = require_fails();\n      var createElement = require_document_create_element();\n      module.exports = !DESCRIPTORS && !fails(function() {\n        return Object.defineProperty(createElement('div'), 'a', {\n          get: function get() {\n            return 7;\n          }\n        }).a !== 7;\n      });\n    });\n    var require_object_get_own_property_descriptor = __commonJS(function(exports) {\n      'use strict';\n      var DESCRIPTORS = require_descriptors();\n      var call = require_function_call();\n      var propertyIsEnumerableModule = require_object_property_is_enumerable();\n      var createPropertyDescriptor = require_create_property_descriptor();\n      var toIndexedObject = require_to_indexed_object();\n      var toPropertyKey = require_to_property_key();\n      var hasOwn2 = require_has_own_property();\n      var IE8_DOM_DEFINE = require_ie8_dom_define();\n      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n      exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n        O = toIndexedObject(O);\n        P = toPropertyKey(P);\n        if (IE8_DOM_DEFINE) {\n          try {\n            return $getOwnPropertyDescriptor(O, P);\n          } catch (error) {}\n        }\n        if (hasOwn2(O, P)) {\n          return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n        }\n      };\n    });\n    var require_is_forced = __commonJS(function(exports, module) {\n      'use strict';\n      var fails = require_fails();\n      var isCallable = require_is_callable2();\n      var replacement = /#|\\.prototype\\./;\n      var isForced = function isForced(feature, detection) {\n        var value = data[normalize(feature)];\n        return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;\n      };\n      var normalize = isForced.normalize = function(string) {\n        return String(string).replace(replacement, '.').toLowerCase();\n      };\n      var data = isForced.data = {};\n      var NATIVE = isForced.NATIVE = 'N';\n      var POLYFILL = isForced.POLYFILL = 'P';\n      module.exports = isForced;\n    });\n    var require_function_bind_context = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this_clause();\n      var aCallable = require_a_callable();\n      var NATIVE_BIND = require_function_bind_native();\n      var bind = uncurryThis(uncurryThis.bind);\n      module.exports = function(fn, that) {\n        aCallable(fn);\n        return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {\n          return fn.apply(that, arguments);\n        };\n      };\n    });\n    var require_v8_prototype_define_bug = __commonJS(function(exports, module) {\n      'use strict';\n      var DESCRIPTORS = require_descriptors();\n      var fails = require_fails();\n      module.exports = DESCRIPTORS && fails(function() {\n        return Object.defineProperty(function() {}, 'prototype', {\n          value: 42,\n          writable: false\n        }).prototype !== 42;\n      });\n    });\n    var require_an_object = __commonJS(function(exports, module) {\n      'use strict';\n      var isObject = require_is_object2();\n      var $String = String;\n      var $TypeError = TypeError;\n      module.exports = function(argument) {\n        if (isObject(argument)) {\n          return argument;\n        }\n        throw new $TypeError($String(argument) + ' is not an object');\n      };\n    });\n    var require_object_define_property = __commonJS(function(exports) {\n      'use strict';\n      var DESCRIPTORS = require_descriptors();\n      var IE8_DOM_DEFINE = require_ie8_dom_define();\n      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();\n      var anObject = require_an_object();\n      var toPropertyKey = require_to_property_key();\n      var $TypeError = TypeError;\n      var $defineProperty = Object.defineProperty;\n      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n      var ENUMERABLE = 'enumerable';\n      var CONFIGURABLE = 'configurable';\n      var WRITABLE = 'writable';\n      exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\n        anObject(O);\n        P = toPropertyKey(P);\n        anObject(Attributes);\n        if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n          var current = $getOwnPropertyDescriptor(O, P);\n          if (current && current[WRITABLE]) {\n            O[P] = Attributes.value;\n            Attributes = {\n              configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],\n              enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n              writable: false\n            };\n          }\n        }\n        return $defineProperty(O, P, Attributes);\n      } : $defineProperty : function defineProperty(O, P, Attributes) {\n        anObject(O);\n        P = toPropertyKey(P);\n        anObject(Attributes);\n        if (IE8_DOM_DEFINE) {\n          try {\n            return $defineProperty(O, P, Attributes);\n          } catch (error) {}\n        }\n        if ('get' in Attributes || 'set' in Attributes) {\n          throw new $TypeError('Accessors not supported');\n        }\n        if ('value' in Attributes) {\n          O[P] = Attributes.value;\n        }\n        return O;\n      };\n    });\n    var require_create_non_enumerable_property = __commonJS(function(exports, module) {\n      'use strict';\n      var DESCRIPTORS = require_descriptors();\n      var definePropertyModule = require_object_define_property();\n      var createPropertyDescriptor = require_create_property_descriptor();\n      module.exports = DESCRIPTORS ? function(object, key, value) {\n        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n      } : function(object, key, value) {\n        object[key] = value;\n        return object;\n      };\n    });\n    var require_export = __commonJS(function(exports, module) {\n      'use strict';\n      var global2 = require_global();\n      var apply = require_function_apply();\n      var uncurryThis = require_function_uncurry_this_clause();\n      var isCallable = require_is_callable2();\n      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;\n      var isForced = require_is_forced();\n      var path = require_path();\n      var bind = require_function_bind_context();\n      var createNonEnumerableProperty = require_create_non_enumerable_property();\n      var hasOwn2 = require_has_own_property();\n      var wrapConstructor = function wrapConstructor(NativeConstructor) {\n        var _Wrapper = function Wrapper(a2, b2, c4) {\n          if (this instanceof _Wrapper) {\n            switch (arguments.length) {\n             case 0:\n              return new NativeConstructor();\n\n             case 1:\n              return new NativeConstructor(a2);\n\n             case 2:\n              return new NativeConstructor(a2, b2);\n            }\n            return new NativeConstructor(a2, b2, c4);\n          }\n          return apply(NativeConstructor, this, arguments);\n        };\n        _Wrapper.prototype = NativeConstructor.prototype;\n        return _Wrapper;\n      };\n      module.exports = function(options, source) {\n        var TARGET = options.target;\n        var GLOBAL = options.global;\n        var STATIC = options.stat;\n        var PROTO = options.proto;\n        var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;\n        var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];\n        var targetPrototype = target.prototype;\n        var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;\n        var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;\n        for (key in source) {\n          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n          USE_NATIVE = !FORCED && nativeSource && hasOwn2(nativeSource, key);\n          targetProperty = target[key];\n          if (USE_NATIVE) {\n            if (options.dontCallGetSet) {\n              descriptor = getOwnPropertyDescriptor(nativeSource, key);\n              nativeProperty = descriptor && descriptor.value;\n            } else {\n              nativeProperty = nativeSource[key];\n            }\n          }\n          sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];\n          if (USE_NATIVE && _typeof(targetProperty) == _typeof(sourceProperty)) {\n            continue;\n          }\n          if (options.bind && USE_NATIVE) {\n            resultProperty = bind(sourceProperty, global2);\n          } else if (options.wrap && USE_NATIVE) {\n            resultProperty = wrapConstructor(sourceProperty);\n          } else if (PROTO && isCallable(sourceProperty)) {\n            resultProperty = uncurryThis(sourceProperty);\n          } else {\n            resultProperty = sourceProperty;\n          }\n          if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {\n            createNonEnumerableProperty(resultProperty, 'sham', true);\n          }\n          createNonEnumerableProperty(target, key, resultProperty);\n          if (PROTO) {\n            VIRTUAL_PROTOTYPE = TARGET + 'Prototype';\n            if (!hasOwn2(path, VIRTUAL_PROTOTYPE)) {\n              createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});\n            }\n            createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);\n            if (options.real && targetPrototype && (FORCED || !targetPrototype[key])) {\n              createNonEnumerableProperty(targetPrototype, key, sourceProperty);\n            }\n          }\n        }\n      };\n    });\n    var require_es_object_has_own = __commonJS(function() {\n      'use strict';\n      var $ = require_export();\n      var hasOwn2 = require_has_own_property();\n      $({\n        target: 'Object',\n        stat: true\n      }, {\n        hasOwn: hasOwn2\n      });\n    });\n    var require_has_own = __commonJS(function(exports, module) {\n      'use strict';\n      require_es_object_has_own();\n      var path = require_path();\n      module.exports = path.Object.hasOwn;\n    });\n    var require_has_own2 = __commonJS(function(exports, module) {\n      'use strict';\n      var parent = require_has_own();\n      module.exports = parent;\n    });\n    var require_has_own3 = __commonJS(function(exports, module) {\n      'use strict';\n      var parent = require_has_own2();\n      module.exports = parent;\n    });\n    var require_shared_key = __commonJS(function(exports, module) {\n      'use strict';\n      var shared = require_shared();\n      var uid = require_uid();\n      var keys = shared('keys');\n      module.exports = function(key) {\n        return keys[key] || (keys[key] = uid(key));\n      };\n    });\n    var require_correct_prototype_getter = __commonJS(function(exports, module) {\n      'use strict';\n      var fails = require_fails();\n      module.exports = !fails(function() {\n        function F() {}\n        F.prototype.constructor = null;\n        return Object.getPrototypeOf(new F()) !== F.prototype;\n      });\n    });\n    var require_object_get_prototype_of = __commonJS(function(exports, module) {\n      'use strict';\n      var hasOwn2 = require_has_own_property();\n      var isCallable = require_is_callable2();\n      var toObject = require_to_object();\n      var sharedKey = require_shared_key();\n      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();\n      var IE_PROTO = sharedKey('IE_PROTO');\n      var $Object = Object;\n      var ObjectPrototype = $Object.prototype;\n      module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {\n        var object = toObject(O);\n        if (hasOwn2(object, IE_PROTO)) {\n          return object[IE_PROTO];\n        }\n        var constructor = object.constructor;\n        if (isCallable(constructor) && object instanceof constructor) {\n          return constructor.prototype;\n        }\n        return object instanceof $Object ? ObjectPrototype : null;\n      };\n    });\n    var require_math_trunc = __commonJS(function(exports, module) {\n      'use strict';\n      var ceil = Math.ceil;\n      var floor = Math.floor;\n      module.exports = Math.trunc || function trunc(x) {\n        var n2 = +x;\n        return (n2 > 0 ? floor : ceil)(n2);\n      };\n    });\n    var require_to_integer_or_infinity = __commonJS(function(exports, module) {\n      'use strict';\n      var trunc = require_math_trunc();\n      module.exports = function(argument) {\n        var number = +argument;\n        return number !== number || number === 0 ? 0 : trunc(number);\n      };\n    });\n    var require_to_absolute_index = __commonJS(function(exports, module) {\n      'use strict';\n      var toIntegerOrInfinity = require_to_integer_or_infinity();\n      var max2 = Math.max;\n      var min = Math.min;\n      module.exports = function(index, length) {\n        var integer = toIntegerOrInfinity(index);\n        return integer < 0 ? max2(integer + length, 0) : min(integer, length);\n      };\n    });\n    var require_to_length = __commonJS(function(exports, module) {\n      'use strict';\n      var toIntegerOrInfinity = require_to_integer_or_infinity();\n      var min = Math.min;\n      module.exports = function(argument) {\n        return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;\n      };\n    });\n    var require_length_of_array_like = __commonJS(function(exports, module) {\n      'use strict';\n      var toLength = require_to_length();\n      module.exports = function(obj) {\n        return toLength(obj.length);\n      };\n    });\n    var require_array_includes = __commonJS(function(exports, module) {\n      'use strict';\n      var toIndexedObject = require_to_indexed_object();\n      var toAbsoluteIndex = require_to_absolute_index();\n      var lengthOfArrayLike = require_length_of_array_like();\n      var createMethod = function createMethod(IS_INCLUDES) {\n        return function($this, el, fromIndex) {\n          var O = toIndexedObject($this);\n          var length = lengthOfArrayLike(O);\n          var index = toAbsoluteIndex(fromIndex, length);\n          var value;\n          if (IS_INCLUDES && el !== el) {\n            while (length > index) {\n              value = O[index++];\n              if (value !== value) {\n                return true;\n              }\n            }\n          } else {\n            for (;length > index; index++) {\n              if ((IS_INCLUDES || index in O) && O[index] === el) {\n                return IS_INCLUDES || index || 0;\n              }\n            }\n          }\n          return !IS_INCLUDES && -1;\n        };\n      };\n      module.exports = {\n        includes: createMethod(true),\n        indexOf: createMethod(false)\n      };\n    });\n    var require_hidden_keys = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = {};\n    });\n    var require_object_keys_internal = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var hasOwn2 = require_has_own_property();\n      var toIndexedObject = require_to_indexed_object();\n      var indexOf = require_array_includes().indexOf;\n      var hiddenKeys = require_hidden_keys();\n      var push = uncurryThis([].push);\n      module.exports = function(object, names) {\n        var O = toIndexedObject(object);\n        var i = 0;\n        var result = [];\n        var key;\n        for (key in O) {\n          !hasOwn2(hiddenKeys, key) && hasOwn2(O, key) && push(result, key);\n        }\n        while (names.length > i) {\n          if (hasOwn2(O, key = names[i++])) {\n            ~indexOf(result, key) || push(result, key);\n          }\n        }\n        return result;\n      };\n    });\n    var require_enum_bug_keys = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = [ 'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf' ];\n    });\n    var require_object_keys = __commonJS(function(exports, module) {\n      'use strict';\n      var internalObjectKeys = require_object_keys_internal();\n      var enumBugKeys = require_enum_bug_keys();\n      module.exports = Object.keys || function keys(O) {\n        return internalObjectKeys(O, enumBugKeys);\n      };\n    });\n    var require_object_to_array = __commonJS(function(exports, module) {\n      'use strict';\n      var DESCRIPTORS = require_descriptors();\n      var fails = require_fails();\n      var uncurryThis = require_function_uncurry_this();\n      var objectGetPrototypeOf = require_object_get_prototype_of();\n      var objectKeys = require_object_keys();\n      var toIndexedObject = require_to_indexed_object();\n      var $propertyIsEnumerable = require_object_property_is_enumerable().f;\n      var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);\n      var push = uncurryThis([].push);\n      var IE_BUG = DESCRIPTORS && fails(function() {\n        var O = Object.create(null);\n        O[2] = 2;\n        return !propertyIsEnumerable(O, 2);\n      });\n      var createMethod = function createMethod(TO_ENTRIES) {\n        return function(it) {\n          var O = toIndexedObject(it);\n          var keys = objectKeys(O);\n          var IE_WORKAROUND = IE_BUG && objectGetPrototypeOf(O) === null;\n          var length = keys.length;\n          var i = 0;\n          var result = [];\n          var key;\n          while (length > i) {\n            key = keys[i++];\n            if (!DESCRIPTORS || (IE_WORKAROUND ? key in O : propertyIsEnumerable(O, key))) {\n              push(result, TO_ENTRIES ? [ key, O[key] ] : O[key]);\n            }\n          }\n          return result;\n        };\n      };\n      module.exports = {\n        entries: createMethod(true),\n        values: createMethod(false)\n      };\n    });\n    var require_es_object_values = __commonJS(function() {\n      'use strict';\n      var $ = require_export();\n      var $values = require_object_to_array().values;\n      $({\n        target: 'Object',\n        stat: true\n      }, {\n        values: function values2(O) {\n          return $values(O);\n        }\n      });\n    });\n    var require_values = __commonJS(function(exports, module) {\n      'use strict';\n      require_es_object_values();\n      var path = require_path();\n      module.exports = path.Object.values;\n    });\n    var require_values2 = __commonJS(function(exports, module) {\n      'use strict';\n      var parent = require_values();\n      module.exports = parent;\n    });\n    var require_values3 = __commonJS(function(exports, module) {\n      'use strict';\n      var parent = require_values2();\n      module.exports = parent;\n    });\n    var require_to_string_tag_support = __commonJS(function(exports, module) {\n      'use strict';\n      var wellKnownSymbol = require_well_known_symbol();\n      var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n      var test = {};\n      test[TO_STRING_TAG] = 'z';\n      module.exports = String(test) === '[object z]';\n    });\n    var require_classof = __commonJS(function(exports, module) {\n      'use strict';\n      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();\n      var isCallable = require_is_callable2();\n      var classofRaw = require_classof_raw();\n      var wellKnownSymbol = require_well_known_symbol();\n      var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n      var $Object = Object;\n      var CORRECT_ARGUMENTS = classofRaw(function() {\n        return arguments;\n      }()) === 'Arguments';\n      var tryGet = function tryGet(it, key) {\n        try {\n          return it[key];\n        } catch (error) {}\n      };\n      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {\n        var O, tag, result;\n        return it === void 0 ? 'Undefined' : it === null ? 'Null' : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n      };\n    });\n    var require_to_string = __commonJS(function(exports, module) {\n      'use strict';\n      var classof = require_classof();\n      var $String = String;\n      module.exports = function(argument) {\n        if (classof(argument) === 'Symbol') {\n          throw new TypeError('Cannot convert a Symbol value to a string');\n        }\n        return $String(argument);\n      };\n    });\n    var require_string_multibyte = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var toIntegerOrInfinity = require_to_integer_or_infinity();\n      var toString = require_to_string();\n      var requireObjectCoercible = require_require_object_coercible();\n      var charAt = uncurryThis(''.charAt);\n      var charCodeAt = uncurryThis(''.charCodeAt);\n      var stringSlice = uncurryThis(''.slice);\n      var createMethod = function createMethod(CONVERT_TO_STRING) {\n        return function($this, pos) {\n          var S = toString(requireObjectCoercible($this));\n          var position = toIntegerOrInfinity(pos);\n          var size = S.length;\n          var first, second;\n          if (position < 0 || position >= size) {\n            return CONVERT_TO_STRING ? '' : void 0;\n          }\n          first = charCodeAt(S, position);\n          return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;\n        };\n      };\n      module.exports = {\n        codeAt: createMethod(false),\n        charAt: createMethod(true)\n      };\n    });\n    var require_weak_map_basic_detection = __commonJS(function(exports, module) {\n      'use strict';\n      var global2 = require_global();\n      var isCallable = require_is_callable2();\n      var WeakMap2 = global2.WeakMap;\n      module.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));\n    });\n    var require_internal_state = __commonJS(function(exports, module) {\n      'use strict';\n      var NATIVE_WEAK_MAP = require_weak_map_basic_detection();\n      var global2 = require_global();\n      var isObject = require_is_object2();\n      var createNonEnumerableProperty = require_create_non_enumerable_property();\n      var hasOwn2 = require_has_own_property();\n      var shared = require_shared_store();\n      var sharedKey = require_shared_key();\n      var hiddenKeys = require_hidden_keys();\n      var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\n      var TypeError2 = global2.TypeError;\n      var WeakMap2 = global2.WeakMap;\n      var set2;\n      var get2;\n      var has;\n      var enforce = function enforce(it) {\n        return has(it) ? get2(it) : set2(it, {});\n      };\n      var getterFor = function getterFor(TYPE) {\n        return function(it) {\n          var state;\n          if (!isObject(it) || (state = get2(it)).type !== TYPE) {\n            throw new TypeError2('Incompatible receiver, ' + TYPE + ' required');\n          }\n          return state;\n        };\n      };\n      if (NATIVE_WEAK_MAP || shared.state) {\n        store = shared.state || (shared.state = new WeakMap2());\n        store.get = store.get;\n        store.has = store.has;\n        store.set = store.set;\n        set2 = function set2(it, metadata) {\n          if (store.has(it)) {\n            throw new TypeError2(OBJECT_ALREADY_INITIALIZED);\n          }\n          metadata.facade = it;\n          store.set(it, metadata);\n          return metadata;\n        };\n        get2 = function get2(it) {\n          return store.get(it) || {};\n        };\n        has = function has(it) {\n          return store.has(it);\n        };\n      } else {\n        STATE = sharedKey('state');\n        hiddenKeys[STATE] = true;\n        set2 = function set2(it, metadata) {\n          if (hasOwn2(it, STATE)) {\n            throw new TypeError2(OBJECT_ALREADY_INITIALIZED);\n          }\n          metadata.facade = it;\n          createNonEnumerableProperty(it, STATE, metadata);\n          return metadata;\n        };\n        get2 = function get2(it) {\n          return hasOwn2(it, STATE) ? it[STATE] : {};\n        };\n        has = function has(it) {\n          return hasOwn2(it, STATE);\n        };\n      }\n      var store;\n      var STATE;\n      module.exports = {\n        set: set2,\n        get: get2,\n        has: has,\n        enforce: enforce,\n        getterFor: getterFor\n      };\n    });\n    var require_function_name = __commonJS(function(exports, module) {\n      'use strict';\n      var DESCRIPTORS = require_descriptors();\n      var hasOwn2 = require_has_own_property();\n      var FunctionPrototype = Function.prototype;\n      var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n      var EXISTS = hasOwn2(FunctionPrototype, 'name');\n      var PROPER = EXISTS && function something() {}.name === 'something';\n      var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable);\n      module.exports = {\n        EXISTS: EXISTS,\n        PROPER: PROPER,\n        CONFIGURABLE: CONFIGURABLE\n      };\n    });\n    var require_object_define_properties = __commonJS(function(exports) {\n      'use strict';\n      var DESCRIPTORS = require_descriptors();\n      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();\n      var definePropertyModule = require_object_define_property();\n      var anObject = require_an_object();\n      var toIndexedObject = require_to_indexed_object();\n      var objectKeys = require_object_keys();\n      exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {\n        anObject(O);\n        var props = toIndexedObject(Properties);\n        var keys = objectKeys(Properties);\n        var length = keys.length;\n        var index = 0;\n        var key;\n        while (length > index) {\n          definePropertyModule.f(O, key = keys[index++], props[key]);\n        }\n        return O;\n      };\n    });\n    var require_html = __commonJS(function(exports, module) {\n      'use strict';\n      var getBuiltIn = require_get_built_in();\n      module.exports = getBuiltIn('document', 'documentElement');\n    });\n    var require_object_create = __commonJS(function(exports, module) {\n      'use strict';\n      var anObject = require_an_object();\n      var definePropertiesModule = require_object_define_properties();\n      var enumBugKeys = require_enum_bug_keys();\n      var hiddenKeys = require_hidden_keys();\n      var html = require_html();\n      var documentCreateElement = require_document_create_element();\n      var sharedKey = require_shared_key();\n      var GT = '>';\n      var LT = '<';\n      var PROTOTYPE = 'prototype';\n      var SCRIPT = 'script';\n      var IE_PROTO = sharedKey('IE_PROTO');\n      var EmptyConstructor = function EmptyConstructor() {};\n      var scriptTag = function scriptTag(content) {\n        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n      };\n      var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument2) {\n        activeXDocument2.write(scriptTag(''));\n        activeXDocument2.close();\n        var temp = activeXDocument2.parentWindow.Object;\n        activeXDocument2 = null;\n        return temp;\n      };\n      var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {\n        var iframe = documentCreateElement('iframe');\n        var JS = 'java' + SCRIPT + ':';\n        var iframeDocument;\n        iframe.style.display = 'none';\n        html.appendChild(iframe);\n        iframe.src = String(JS);\n        iframeDocument = iframe.contentWindow.document;\n        iframeDocument.open();\n        iframeDocument.write(scriptTag('document.F=Object'));\n        iframeDocument.close();\n        return iframeDocument.F;\n      };\n      var activeXDocument;\n      var _NullProtoObject = function NullProtoObject() {\n        try {\n          activeXDocument = new ActiveXObject('htmlfile');\n        } catch (error) {}\n        _NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);\n        var length = enumBugKeys.length;\n        while (length--) {\n          delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n        }\n        return _NullProtoObject();\n      };\n      hiddenKeys[IE_PROTO] = true;\n      module.exports = Object.create || function create(O, Properties) {\n        var result;\n        if (O !== null) {\n          EmptyConstructor[PROTOTYPE] = anObject(O);\n          result = new EmptyConstructor();\n          EmptyConstructor[PROTOTYPE] = null;\n          result[IE_PROTO] = O;\n        } else {\n          result = _NullProtoObject();\n        }\n        return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);\n      };\n    });\n    var require_define_built_in = __commonJS(function(exports, module) {\n      'use strict';\n      var createNonEnumerableProperty = require_create_non_enumerable_property();\n      module.exports = function(target, key, value, options) {\n        if (options && options.enumerable) {\n          target[key] = value;\n        } else {\n          createNonEnumerableProperty(target, key, value);\n        }\n        return target;\n      };\n    });\n    var require_iterators_core = __commonJS(function(exports, module) {\n      'use strict';\n      var fails = require_fails();\n      var isCallable = require_is_callable2();\n      var isObject = require_is_object2();\n      var create = require_object_create();\n      var getPrototypeOf = require_object_get_prototype_of();\n      var defineBuiltIn = require_define_built_in();\n      var wellKnownSymbol = require_well_known_symbol();\n      var IS_PURE = require_is_pure();\n      var ITERATOR = wellKnownSymbol('iterator');\n      var BUGGY_SAFARI_ITERATORS = false;\n      var IteratorPrototype;\n      var PrototypeOfArrayIteratorPrototype;\n      var arrayIterator;\n      if ([].keys) {\n        arrayIterator = [].keys();\n        if (!('next' in arrayIterator)) {\n          BUGGY_SAFARI_ITERATORS = true;\n        } else {\n          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n          if (PrototypeOfArrayIteratorPrototype !== Object.prototype) {\n            IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n          }\n        }\n      }\n      var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function() {\n        var test = {};\n        return IteratorPrototype[ITERATOR].call(test) !== test;\n      });\n      if (NEW_ITERATOR_PROTOTYPE) {\n        IteratorPrototype = {};\n      } else if (IS_PURE) {\n        IteratorPrototype = create(IteratorPrototype);\n      }\n      if (!isCallable(IteratorPrototype[ITERATOR])) {\n        defineBuiltIn(IteratorPrototype, ITERATOR, function() {\n          return this;\n        });\n      }\n      module.exports = {\n        IteratorPrototype: IteratorPrototype,\n        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n      };\n    });\n    var require_object_to_string = __commonJS(function(exports, module) {\n      'use strict';\n      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();\n      var classof = require_classof();\n      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n        return '[object ' + classof(this) + ']';\n      };\n    });\n    var require_set_to_string_tag = __commonJS(function(exports, module) {\n      'use strict';\n      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();\n      var defineProperty = require_object_define_property().f;\n      var createNonEnumerableProperty = require_create_non_enumerable_property();\n      var hasOwn2 = require_has_own_property();\n      var toString = require_object_to_string();\n      var wellKnownSymbol = require_well_known_symbol();\n      var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n      module.exports = function(it, TAG, STATIC, SET_METHOD) {\n        if (it) {\n          var target = STATIC ? it : it.prototype;\n          if (!hasOwn2(target, TO_STRING_TAG)) {\n            defineProperty(target, TO_STRING_TAG, {\n              configurable: true,\n              value: TAG\n            });\n          }\n          if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {\n            createNonEnumerableProperty(target, 'toString', toString);\n          }\n        }\n      };\n    });\n    var require_iterators = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = {};\n    });\n    var require_iterator_create_constructor = __commonJS(function(exports, module) {\n      'use strict';\n      var IteratorPrototype = require_iterators_core().IteratorPrototype;\n      var create = require_object_create();\n      var createPropertyDescriptor = require_create_property_descriptor();\n      var setToStringTag = require_set_to_string_tag();\n      var Iterators = require_iterators();\n      var returnThis = function returnThis() {\n        return this;\n      };\n      module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {\n        var TO_STRING_TAG = NAME + ' Iterator';\n        IteratorConstructor.prototype = create(IteratorPrototype, {\n          next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next)\n        });\n        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n        Iterators[TO_STRING_TAG] = returnThis;\n        return IteratorConstructor;\n      };\n    });\n    var require_function_uncurry_this_accessor = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var aCallable = require_a_callable();\n      module.exports = function(object, key, method) {\n        try {\n          return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));\n        } catch (error) {}\n      };\n    });\n    var require_a_possible_prototype = __commonJS(function(exports, module) {\n      'use strict';\n      var isCallable = require_is_callable2();\n      var $String = String;\n      var $TypeError = TypeError;\n      module.exports = function(argument) {\n        if (_typeof(argument) == 'object' || isCallable(argument)) {\n          return argument;\n        }\n        throw new $TypeError('Can\\'t set ' + $String(argument) + ' as a prototype');\n      };\n    });\n    var require_object_set_prototype_of = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThisAccessor = require_function_uncurry_this_accessor();\n      var anObject = require_an_object();\n      var aPossiblePrototype = require_a_possible_prototype();\n      module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function() {\n        var CORRECT_SETTER = false;\n        var test = {};\n        var setter;\n        try {\n          setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');\n          setter(test, []);\n          CORRECT_SETTER = test instanceof Array;\n        } catch (error) {}\n        return function setPrototypeOf(O, proto) {\n          anObject(O);\n          aPossiblePrototype(proto);\n          if (CORRECT_SETTER) {\n            setter(O, proto);\n          } else {\n            O.__proto__ = proto;\n          }\n          return O;\n        };\n      }() : void 0);\n    });\n    var require_iterator_define = __commonJS(function(exports, module) {\n      'use strict';\n      var $ = require_export();\n      var call = require_function_call();\n      var IS_PURE = require_is_pure();\n      var FunctionName = require_function_name();\n      var isCallable = require_is_callable2();\n      var createIteratorConstructor = require_iterator_create_constructor();\n      var getPrototypeOf = require_object_get_prototype_of();\n      var setPrototypeOf = require_object_set_prototype_of();\n      var setToStringTag = require_set_to_string_tag();\n      var createNonEnumerableProperty = require_create_non_enumerable_property();\n      var defineBuiltIn = require_define_built_in();\n      var wellKnownSymbol = require_well_known_symbol();\n      var Iterators = require_iterators();\n      var IteratorsCore = require_iterators_core();\n      var PROPER_FUNCTION_NAME = FunctionName.PROPER;\n      var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;\n      var IteratorPrototype = IteratorsCore.IteratorPrototype;\n      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\n      var ITERATOR = wellKnownSymbol('iterator');\n      var KEYS = 'keys';\n      var VALUES = 'values';\n      var ENTRIES = 'entries';\n      var returnThis = function returnThis() {\n        return this;\n      };\n      module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n        createIteratorConstructor(IteratorConstructor, NAME, next);\n        var getIterationMethod = function getIterationMethod(KIND) {\n          if (KIND === DEFAULT && defaultIterator) {\n            return defaultIterator;\n          }\n          if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype) {\n            return IterablePrototype[KIND];\n          }\n          switch (KIND) {\n           case KEYS:\n            return function keys() {\n              return new IteratorConstructor(this, KIND);\n            };\n\n           case VALUES:\n            return function values2() {\n              return new IteratorConstructor(this, KIND);\n            };\n\n           case ENTRIES:\n            return function entries() {\n              return new IteratorConstructor(this, KIND);\n            };\n          }\n          return function() {\n            return new IteratorConstructor(this);\n          };\n        };\n        var TO_STRING_TAG = NAME + ' Iterator';\n        var INCORRECT_VALUES_NAME = false;\n        var IterablePrototype = Iterable.prototype;\n        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];\n        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n        var anyNativeIterator = NAME === 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n        var CurrentIteratorPrototype, methods, KEY;\n        if (anyNativeIterator) {\n          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n          if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n              if (setPrototypeOf) {\n                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n              } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {\n                defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);\n              }\n            }\n            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n            if (IS_PURE) {\n              Iterators[TO_STRING_TAG] = returnThis;\n            }\n          }\n        }\n        if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n          if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {\n            createNonEnumerableProperty(IterablePrototype, 'name', VALUES);\n          } else {\n            INCORRECT_VALUES_NAME = true;\n            defaultIterator = function values2() {\n              return call(nativeIterator, this);\n            };\n          }\n        }\n        if (DEFAULT) {\n          methods = {\n            values: getIterationMethod(VALUES),\n            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n            entries: getIterationMethod(ENTRIES)\n          };\n          if (FORCED) {\n            for (KEY in methods) {\n              if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n                defineBuiltIn(IterablePrototype, KEY, methods[KEY]);\n              }\n            }\n          } else {\n            $({\n              target: NAME,\n              proto: true,\n              forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME\n            }, methods);\n          }\n        }\n        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n          defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, {\n            name: DEFAULT\n          });\n        }\n        Iterators[NAME] = defaultIterator;\n        return methods;\n      };\n    });\n    var require_create_iter_result_object = __commonJS(function(exports, module) {\n      'use strict';\n      module.exports = function(value, done) {\n        return {\n          value: value,\n          done: done\n        };\n      };\n    });\n    var require_es_string_iterator = __commonJS(function() {\n      'use strict';\n      var charAt = require_string_multibyte().charAt;\n      var toString = require_to_string();\n      var InternalStateModule = require_internal_state();\n      var defineIterator = require_iterator_define();\n      var createIterResultObject = require_create_iter_result_object();\n      var STRING_ITERATOR = 'String Iterator';\n      var setInternalState = InternalStateModule.set;\n      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n      defineIterator(String, 'String', function(iterated) {\n        setInternalState(this, {\n          type: STRING_ITERATOR,\n          string: toString(iterated),\n          index: 0\n        });\n      }, function next() {\n        var state = getInternalState(this);\n        var string = state.string;\n        var index = state.index;\n        var point;\n        if (index >= string.length) {\n          return createIterResultObject(void 0, true);\n        }\n        point = charAt(string, index);\n        state.index += point.length;\n        return createIterResultObject(point, false);\n      });\n    });\n    var require_iterator_close = __commonJS(function(exports, module) {\n      'use strict';\n      var call = require_function_call();\n      var anObject = require_an_object();\n      var getMethod = require_get_method();\n      module.exports = function(iterator, kind, value) {\n        var innerResult, innerError;\n        anObject(iterator);\n        try {\n          innerResult = getMethod(iterator, 'return');\n          if (!innerResult) {\n            if (kind === 'throw') {\n              throw value;\n            }\n            return value;\n          }\n          innerResult = call(innerResult, iterator);\n        } catch (error) {\n          innerError = true;\n          innerResult = error;\n        }\n        if (kind === 'throw') {\n          throw value;\n        }\n        if (innerError) {\n          throw innerResult;\n        }\n        anObject(innerResult);\n        return value;\n      };\n    });\n    var require_call_with_safe_iteration_closing = __commonJS(function(exports, module) {\n      'use strict';\n      var anObject = require_an_object();\n      var iteratorClose = require_iterator_close();\n      module.exports = function(iterator, fn, value, ENTRIES) {\n        try {\n          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n        } catch (error) {\n          iteratorClose(iterator, 'throw', error);\n        }\n      };\n    });\n    var require_is_array_iterator_method = __commonJS(function(exports, module) {\n      'use strict';\n      var wellKnownSymbol = require_well_known_symbol();\n      var Iterators = require_iterators();\n      var ITERATOR = wellKnownSymbol('iterator');\n      var ArrayPrototype = Array.prototype;\n      module.exports = function(it) {\n        return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n      };\n    });\n    var require_inspect_source = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var isCallable = require_is_callable2();\n      var store = require_shared_store();\n      var functionToString = uncurryThis(Function.toString);\n      if (!isCallable(store.inspectSource)) {\n        store.inspectSource = function(it) {\n          return functionToString(it);\n        };\n      }\n      module.exports = store.inspectSource;\n    });\n    var require_is_constructor = __commonJS(function(exports, module) {\n      'use strict';\n      var uncurryThis = require_function_uncurry_this();\n      var fails = require_fails();\n      var isCallable = require_is_callable2();\n      var classof = require_classof();\n      var getBuiltIn = require_get_built_in();\n      var inspectSource = require_inspect_source();\n      var noop3 = function noop3() {};\n      var empty = [];\n      var construct = getBuiltIn('Reflect', 'construct');\n      var constructorRegExp = /^\\s*(?:class|function)\\b/;\n      var exec = uncurryThis(constructorRegExp.exec);\n      var INCORRECT_TO_STRING = !constructorRegExp.test(noop3);\n      var isConstructorModern = function isConstructor(argument) {\n        if (!isCallable(argument)) {\n          return false;\n        }\n        try {\n          construct(noop3, empty, argument);\n          return true;\n        } catch (error) {\n          return false;\n        }\n      };\n      var isConstructorLegacy = function isConstructor(argument) {\n        if (!isCallable(argument)) {\n          return false;\n        }\n        switch (classof(argument)) {\n         case 'AsyncFunction':\n         case 'GeneratorFunction':\n         case 'AsyncGeneratorFunction':\n          return false;\n        }\n        try {\n          return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));\n        } catch (error) {\n          return true;\n        }\n      };\n      isConstructorLegacy.sham = true;\n      module.exports = !construct || fails(function() {\n        var called;\n        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {\n          called = true;\n        }) || called;\n      }) ? isConstructorLegacy : isConstructorModern;\n    });\n    var require_create_property = __commonJS(function(exports, module) {\n      'use strict';\n      var toPropertyKey = require_to_property_key();\n      var definePropertyModule = require_object_define_property();\n      var createPropertyDescriptor = require_create_property_descriptor();\n      module.exports = function(object, key, value) {\n        var propertyKey = toPropertyKey(key);\n        if (propertyKey in object) {\n          definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n        } else {\n          object[propertyKey] = value;\n        }\n      };\n    });\n    var require_get_iterator_method = __commonJS(function(exports, module) {\n      'use strict';\n      var classof = require_classof();\n      var getMethod = require_get_method();\n      var isNullOrUndefined = require_is_null_or_undefined();\n      var Iterators = require_iterators();\n      var wellKnownSymbol = require_well_known_symbol();\n      var ITERATOR = wellKnownSymbol('iterator');\n      module.exports = function(it) {\n        if (!isNullOrUndefined(it)) {\n          return getMethod(it, ITERATOR) || getMethod(it, '@@iterator') || Iterators[classof(it)];\n        }\n      };\n    });\n    var require_get_iterator = __commonJS(function(exports, module) {\n      'use strict';\n      var call = require_function_call();\n      var aCallable = require_a_callable();\n      var anObject = require_an_object();\n      var tryToString = require_try_to_string();\n      var getIteratorMethod = require_get_iterator_method();\n      var $TypeError = TypeError;\n      module.exports = function(argument, usingIterator) {\n        var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;\n        if (aCallable(iteratorMethod)) {\n          return anObject(call(iteratorMethod, argument));\n        }\n        throw new $TypeError(tryToString(argument) + ' is not iterable');\n      };\n    });\n    var require_array_from = __commonJS(function(exports, module) {\n      'use strict';\n      var bind = require_function_bind_context();\n      var call = require_function_call();\n      var toObject = require_to_object();\n      var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();\n      var isArrayIteratorMethod = require_is_array_iterator_method();\n      var isConstructor = require_is_constructor();\n      var lengthOfArrayLike = require_length_of_array_like();\n      var createProperty = require_create_property();\n      var getIterator = require_get_iterator();\n      var getIteratorMethod = require_get_iterator_method();\n      var $Array = Array;\n      module.exports = function from(arrayLike) {\n        var O = toObject(arrayLike);\n        var IS_CONSTRUCTOR = isConstructor(this);\n        var argumentsLength = arguments.length;\n        var mapfn = argumentsLength > 1 ? arguments[1] : void 0;\n        var mapping = mapfn !== void 0;\n        if (mapping) {\n          mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);\n        }\n        var iteratorMethod = getIteratorMethod(O);\n        var index = 0;\n        var length, result, step, iterator, next, value;\n        if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {\n          iterator = getIterator(O, iteratorMethod);\n          next = iterator.next;\n          result = IS_CONSTRUCTOR ? new this() : [];\n          for (;!(step = call(next, iterator)).done; index++) {\n            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [ step.value, index ], true) : step.value;\n            createProperty(result, index, value);\n          }\n        } else {\n          length = lengthOfArrayLike(O);\n          result = IS_CONSTRUCTOR ? new this(length) : $Array(length);\n          for (;length > index; index++) {\n            value = mapping ? mapfn(O[index], index) : O[index];\n            createProperty(result, index, value);\n          }\n        }\n        result.length = index;\n        return result;\n      };\n    });\n    var require_check_correctness_of_iteration = __commonJS(function(exports, module) {\n      'use strict';\n      var wellKnownSymbol = require_well_known_symbol();\n      var ITERATOR = wellKnownSymbol('iterator');\n      var SAFE_CLOSING = false;\n      try {\n        called = 0;\n        iteratorWithReturn = {\n          next: function next() {\n            return {\n              done: !!called++\n            };\n          },\n          return: function _return() {\n            SAFE_CLOSING = true;\n          }\n        };\n        iteratorWithReturn[ITERATOR] = function() {\n          return this;\n        };\n        Array.from(iteratorWithReturn, function() {\n          throw 2;\n        });\n      } catch (error) {}\n      var called;\n      var iteratorWithReturn;\n      module.exports = function(exec, SKIP_CLOSING) {\n        try {\n          if (!SKIP_CLOSING && !SAFE_CLOSING) {\n            return false;\n          }\n        } catch (error) {\n          return false;\n        }\n        var ITERATION_SUPPORT = false;\n        try {\n          var object = {};\n          object[ITERATOR] = function() {\n            return {\n              next: function next() {\n                return {\n                  done: ITERATION_SUPPORT = true\n                };\n              }\n            };\n          };\n          exec(object);\n        } catch (error) {}\n        return ITERATION_SUPPORT;\n      };\n    });\n    var require_es_array_from = __commonJS(function() {\n      'use strict';\n      var $ = require_export();\n      var from = require_array_from();\n      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();\n      var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {\n        Array.from(iterable);\n      });\n      $({\n        target: 'Array',\n        stat: true,\n        forced: INCORRECT_ITERATION\n      }, {\n        from: from\n      });\n    });\n    var require_from2 = __commonJS(function(exports, module) {\n      'use strict';\n      require_es_string_iterator();\n      require_es_array_from();\n      var path = require_path();\n      module.exports = path.Array.from;\n    });\n    var require_from3 = __commonJS(function(exports, module) {\n      'use strict';\n      var parent = require_from2();\n      module.exports = parent;\n    });\n    var require_from4 = __commonJS(function(exports, module) {\n      'use strict';\n      var parent = require_from3();\n      module.exports = parent;\n    });\n    var require_doT = __commonJS(function(exports, module) {\n      (function() {\n        'use strict';\n        var doT3 = {\n          name: 'doT',\n          version: '1.1.1',\n          templateSettings: {\n            evaluate: /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\n            interpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\n            encode: /\\{\\{!([\\s\\S]+?)\\}\\}/g,\n            use: /\\{\\{#([\\s\\S]+?)\\}\\}/g,\n            useParams: /(^|[^\\w$])def(?:\\.|\\[[\\'\\\"])([\\w$\\.]+)(?:[\\'\\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\n            define: /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\n            defineParams: /^\\s*([\\w$]+):([\\s\\S]+)/,\n            conditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\n            iterate: /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\n            varname: 'it',\n            strip: true,\n            append: true,\n            selfcontained: false,\n            doNotSkipEncoded: false\n          },\n          template: void 0,\n          compile: void 0,\n          log: true\n        };\n        (function() {\n          if ((typeof globalThis === 'undefined' ? 'undefined' : _typeof(globalThis)) === 'object') {\n            return;\n          }\n          try {\n            Object.defineProperty(Object.prototype, '__magic__', {\n              get: function get() {\n                return this;\n              },\n              configurable: true\n            });\n            __magic__.globalThis = __magic__;\n            delete Object.prototype.__magic__;\n          } catch (e) {\n            window.globalThis = function() {\n              if (typeof self !== 'undefined') {\n                return self;\n              }\n              if (typeof window !== 'undefined') {\n                return window;\n              }\n              if (typeof global !== 'undefined') {\n                return global;\n              }\n              if (typeof this !== 'undefined') {\n                return this;\n              }\n              throw new Error('Unable to locate global `this`');\n            }();\n          }\n        })();\n        doT3.encodeHTMLSource = function(doNotSkipEncoded) {\n          var encodeHTMLRules = {\n            '&': '&#38;',\n            '<': '&#60;',\n            '>': '&#62;',\n            '\"': '&#34;',\n            '\\'': '&#39;',\n            '/': '&#47;'\n          }, matchHTML = doNotSkipEncoded ? /[&<>\"'\\/]/g : /&(?!#?\\w+;)|<|>|\"|'|\\//g;\n          return function(code) {\n            return code ? code.toString().replace(matchHTML, function(m3) {\n              return encodeHTMLRules[m3] || m3;\n            }) : '';\n          };\n        };\n        if (typeof module !== 'undefined' && module.exports) {\n          module.exports = doT3;\n        } else if (true) {\n          !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return doT3;\n          }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        } else {}\n        var startend = {\n          append: {\n            start: '\\'+(',\n            end: ')+\\'',\n            startencode: '\\'+encodeHTML('\n          },\n          split: {\n            start: '\\';out+=(',\n            end: ');out+=\\'',\n            startencode: '\\';out+=encodeHTML('\n          }\n        }, skip = /$^/;\n        function resolveDefs(c4, block, def) {\n          return (typeof block === 'string' ? block : block.toString()).replace(c4.define || skip, function(m3, code, assign, value) {\n            if (code.indexOf('def.') === 0) {\n              code = code.substring(4);\n            }\n            if (!(code in def)) {\n              if (assign === ':') {\n                if (c4.defineParams) {\n                  value.replace(c4.defineParams, function(m4, param, v) {\n                    def[code] = {\n                      arg: param,\n                      text: v\n                    };\n                  });\n                }\n                if (!(code in def)) {\n                  def[code] = value;\n                }\n              } else {\n                new Function('def', 'def[\\'' + code + '\\']=' + value)(def);\n              }\n            }\n            return '';\n          }).replace(c4.use || skip, function(m3, code) {\n            if (c4.useParams) {\n              code = code.replace(c4.useParams, function(m4, s, d2, param) {\n                if (def[d2] && def[d2].arg && param) {\n                  var rw = (d2 + ':' + param).replace(/'|\\\\/g, '_');\n                  def.__exp = def.__exp || {};\n                  def.__exp[rw] = def[d2].text.replace(new RegExp('(^|[^\\\\w$])' + def[d2].arg + '([^\\\\w$])', 'g'), '$1' + param + '$2');\n                  return s + 'def.__exp[\\'' + rw + '\\']';\n                }\n              });\n            }\n            var v = new Function('def', 'return ' + code)(def);\n            return v ? resolveDefs(c4, v, def) : v;\n          });\n        }\n        function unescape(code) {\n          return code.replace(/\\\\('|\\\\)/g, '$1').replace(/[\\r\\t\\n]/g, ' ');\n        }\n        doT3.template = function(tmpl, c4, def) {\n          c4 = c4 || doT3.templateSettings;\n          var cse = c4.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv, str = c4.use || c4.define ? resolveDefs(c4, tmpl, def || {}) : tmpl;\n          str = ('var out=\\'' + (c4.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g, ' ').replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g, '') : str).replace(/'|\\\\/g, '\\\\$&').replace(c4.interpolate || skip, function(m3, code) {\n            return cse.start + unescape(code) + cse.end;\n          }).replace(c4.encode || skip, function(m3, code) {\n            needhtmlencode = true;\n            return cse.startencode + unescape(code) + cse.end;\n          }).replace(c4.conditional || skip, function(m3, elsecase, code) {\n            return elsecase ? code ? '\\';}else if(' + unescape(code) + '){out+=\\'' : '\\';}else{out+=\\'' : code ? '\\';if(' + unescape(code) + '){out+=\\'' : '\\';}out+=\\'';\n          }).replace(c4.iterate || skip, function(m3, iterate, vname, iname) {\n            if (!iterate) {\n              return '\\';} } out+=\\'';\n            }\n            sid += 1;\n            indv = iname || 'i' + sid;\n            iterate = unescape(iterate);\n            return '\\';var arr' + sid + '=' + iterate + ';if(arr' + sid + '){var ' + vname + ',' + indv + '=-1,l' + sid + '=arr' + sid + '.length-1;while(' + indv + '<l' + sid + '){' + vname + '=arr' + sid + '[' + indv + '+=1];out+=\\'';\n          }).replace(c4.evaluate || skip, function(m3, code) {\n            return '\\';' + unescape(code) + 'out+=\\'';\n          }) + '\\';return out;').replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t').replace(/\\r/g, '\\\\r').replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, '');\n          if (needhtmlencode) {\n            if (!c4.selfcontained && globalThis && !globalThis._encodeHTML) {\n              globalThis._encodeHTML = doT3.encodeHTMLSource(c4.doNotSkipEncoded);\n            }\n            str = 'var encodeHTML = typeof _encodeHTML !== \\'undefined\\' ? _encodeHTML : (' + doT3.encodeHTMLSource.toString() + '(' + (c4.doNotSkipEncoded || '') + '));' + str;\n          }\n          try {\n            return new Function(c4.varname, str);\n          } catch (e) {\n            if (typeof console !== 'undefined') {\n              console.log('Could not create a template function: ' + str);\n            }\n            throw e;\n          }\n        };\n        doT3.compile = function(tmpl, def) {\n          return doT3.template(tmpl, null, def);\n        };\n      })();\n    });\n    var definitions = [ {\n      name: 'NA',\n      value: 'inapplicable',\n      priority: 0,\n      group: 'inapplicable'\n    }, {\n      name: 'PASS',\n      value: 'passed',\n      priority: 1,\n      group: 'passes'\n    }, {\n      name: 'CANTTELL',\n      value: 'cantTell',\n      priority: 2,\n      group: 'incomplete'\n    }, {\n      name: 'FAIL',\n      value: 'failed',\n      priority: 3,\n      group: 'violations'\n    } ];\n    var constants = {\n      helpUrlBase: 'https://dequeuniversity.com/rules/',\n      gridSize: 200,\n      selectorSimilarFilterLimit: 700,\n      results: [],\n      resultGroups: [],\n      resultGroupMap: {},\n      impact: Object.freeze([ 'minor', 'moderate', 'serious', 'critical' ]),\n      preload: Object.freeze({\n        assets: [ 'cssom', 'media' ],\n        timeout: 1e4\n      }),\n      allOrigins: '<unsafe_all_origins>',\n      sameOrigin: '<same_origin>'\n    };\n    definitions.forEach(function(definition) {\n      var name = definition.name;\n      var value = definition.value;\n      var priority = definition.priority;\n      var group = definition.group;\n      constants[name] = value;\n      constants[name + '_PRIO'] = priority;\n      constants[name + '_GROUP'] = group;\n      constants.results[priority] = value;\n      constants.resultGroups[priority] = group;\n      constants.resultGroupMap[value] = group;\n    });\n    Object.freeze(constants.results);\n    Object.freeze(constants.resultGroups);\n    Object.freeze(constants.resultGroupMap);\n    Object.freeze(constants);\n    var constants_default = constants;\n    function log() {\n      if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object' && console.log) {\n        Function.prototype.apply.call(console.log, console, arguments);\n      }\n    }\n    var log_default = log;\n    var whitespaceRegex = /[\\t\\r\\n\\f]/g;\n    var AbstractVirtualNode = function() {\n      function AbstractVirtualNode() {\n        _classCallCheck(this, AbstractVirtualNode);\n        this.parent = void 0;\n      }\n      return _createClass(AbstractVirtualNode, [ {\n        key: 'props',\n        get: function get() {\n          throw new Error('VirtualNode class must have a \"props\" object consisting of \"nodeType\" and \"nodeName\" properties');\n        }\n      }, {\n        key: 'attrNames',\n        get: function get() {\n          throw new Error('VirtualNode class must have an \"attrNames\" property');\n        }\n      }, {\n        key: 'attr',\n        value: function attr() {\n          throw new Error('VirtualNode class must have an \"attr\" function');\n        }\n      }, {\n        key: 'hasAttr',\n        value: function hasAttr() {\n          throw new Error('VirtualNode class must have a \"hasAttr\" function');\n        }\n      }, {\n        key: 'hasClass',\n        value: function hasClass(className) {\n          var classAttr = this.attr('class');\n          if (!classAttr) {\n            return false;\n          }\n          var selector = ' ' + className + ' ';\n          return (' ' + classAttr + ' ').replace(whitespaceRegex, ' ').indexOf(selector) >= 0;\n        }\n      } ]);\n    }();\n    var abstract_virtual_node_default = AbstractVirtualNode;\n    var utils_exports = {};\n    __export(utils_exports, {\n      DqElement: function DqElement() {\n        return dq_element_default;\n      },\n      aggregate: function aggregate() {\n        return aggregate_default;\n      },\n      aggregateChecks: function aggregateChecks() {\n        return aggregate_checks_default;\n      },\n      aggregateNodeResults: function aggregateNodeResults() {\n        return aggregate_node_results_default;\n      },\n      aggregateResult: function aggregateResult() {\n        return aggregate_result_default;\n      },\n      areStylesSet: function areStylesSet() {\n        return are_styles_set_default;\n      },\n      assert: function assert() {\n        return assert_default;\n      },\n      checkHelper: function checkHelper() {\n        return check_helper_default;\n      },\n      clone: function clone() {\n        return _clone;\n      },\n      closest: function closest() {\n        return closest_default;\n      },\n      collectResultsFromFrames: function collectResultsFromFrames() {\n        return _collectResultsFromFrames;\n      },\n      contains: function contains() {\n        return _contains;\n      },\n      convertSelector: function convertSelector() {\n        return _convertSelector;\n      },\n      cssParser: function cssParser() {\n        return css_parser_default;\n      },\n      deepMerge: function deepMerge() {\n        return deep_merge_default;\n      },\n      escapeSelector: function escapeSelector() {\n        return escape_selector_default;\n      },\n      extendMetaData: function extendMetaData() {\n        return extend_meta_data_default;\n      },\n      filterHtmlAttrs: function filterHtmlAttrs() {\n        return _filterHtmlAttrs;\n      },\n      finalizeRuleResult: function finalizeRuleResult() {\n        return _finalizeRuleResult;\n      },\n      findBy: function findBy() {\n        return find_by_default;\n      },\n      getAllChecks: function getAllChecks() {\n        return get_all_checks_default;\n      },\n      getAncestry: function getAncestry() {\n        return _getAncestry;\n      },\n      getBaseLang: function getBaseLang() {\n        return get_base_lang_default;\n      },\n      getCheckMessage: function getCheckMessage() {\n        return get_check_message_default;\n      },\n      getCheckOption: function getCheckOption() {\n        return get_check_option_default;\n      },\n      getEnvironmentData: function getEnvironmentData() {\n        return _getEnvironmentData;\n      },\n      getFlattenedTree: function getFlattenedTree() {\n        return _getFlattenedTree;\n      },\n      getFrameContexts: function getFrameContexts() {\n        return _getFrameContexts;\n      },\n      getFriendlyUriEnd: function getFriendlyUriEnd() {\n        return get_friendly_uri_end_default;\n      },\n      getNodeAttributes: function getNodeAttributes() {\n        return get_node_attributes_default;\n      },\n      getNodeFromTree: function getNodeFromTree() {\n        return get_node_from_tree_default;\n      },\n      getPreloadConfig: function getPreloadConfig() {\n        return _getPreloadConfig;\n      },\n      getRootNode: function getRootNode() {\n        return get_root_node_default;\n      },\n      getRule: function getRule() {\n        return _getRule;\n      },\n      getScroll: function getScroll() {\n        return get_scroll_default;\n      },\n      getScrollState: function getScrollState() {\n        return get_scroll_state_default;\n      },\n      getSelector: function getSelector() {\n        return get_selector_default;\n      },\n      getSelectorData: function getSelectorData() {\n        return _getSelectorData;\n      },\n      getShadowSelector: function getShadowSelector() {\n        return _getShadowSelector;\n      },\n      getStandards: function getStandards() {\n        return _getStandards;\n      },\n      getStyleSheetFactory: function getStyleSheetFactory() {\n        return get_stylesheet_factory_default;\n      },\n      getXpath: function getXpath() {\n        return get_xpath_default;\n      },\n      injectStyle: function injectStyle() {\n        return inject_style_default;\n      },\n      isArrayLike: function isArrayLike() {\n        return _isArrayLike;\n      },\n      isContextObject: function isContextObject() {\n        return _isContextObject;\n      },\n      isContextProp: function isContextProp() {\n        return _isContextProp;\n      },\n      isContextSpec: function isContextSpec() {\n        return _isContextSpec;\n      },\n      isHidden: function isHidden() {\n        return is_hidden_default;\n      },\n      isHtmlElement: function isHtmlElement() {\n        return is_html_element_default;\n      },\n      isLabelledFramesSelector: function isLabelledFramesSelector() {\n        return _isLabelledFramesSelector;\n      },\n      isLabelledShadowDomSelector: function isLabelledShadowDomSelector() {\n        return _isLabelledShadowDomSelector;\n      },\n      isNodeInContext: function isNodeInContext() {\n        return _isNodeInContext;\n      },\n      isShadowRoot: function isShadowRoot() {\n        return is_shadow_root_default;\n      },\n      isValidLang: function isValidLang() {\n        return valid_langs_default;\n      },\n      isXHTML: function isXHTML() {\n        return is_xhtml_default;\n      },\n      matchAncestry: function matchAncestry() {\n        return _matchAncestry;\n      },\n      matches: function matches() {\n        return _matches;\n      },\n      matchesExpression: function matchesExpression() {\n        return _matchesExpression;\n      },\n      matchesSelector: function matchesSelector() {\n        return element_matches_default;\n      },\n      memoize: function memoize() {\n        return memoize_default;\n      },\n      mergeResults: function mergeResults() {\n        return merge_results_default;\n      },\n      nodeLookup: function nodeLookup() {\n        return _nodeLookup;\n      },\n      nodeSerializer: function nodeSerializer() {\n        return node_serializer_default;\n      },\n      nodeSorter: function nodeSorter() {\n        return node_sorter_default;\n      },\n      objectHasOwn: function objectHasOwn() {\n        return _objectHasOwn;\n      },\n      parseCrossOriginStylesheet: function parseCrossOriginStylesheet() {\n        return parse_crossorigin_stylesheet_default;\n      },\n      parseSameOriginStylesheet: function parseSameOriginStylesheet() {\n        return parse_sameorigin_stylesheet_default;\n      },\n      parseStylesheet: function parseStylesheet() {\n        return parse_stylesheet_default;\n      },\n      parseTabindex: function parseTabindex() {\n        return parse_tabindex_default;\n      },\n      performanceTimer: function performanceTimer() {\n        return performance_timer_default;\n      },\n      pollyfillElementsFromPoint: function pollyfillElementsFromPoint() {\n        return _pollyfillElementsFromPoint;\n      },\n      preload: function preload() {\n        return _preload;\n      },\n      preloadCssom: function preloadCssom() {\n        return preload_cssom_default;\n      },\n      preloadMedia: function preloadMedia() {\n        return preload_media_default;\n      },\n      processMessage: function processMessage() {\n        return process_message_default;\n      },\n      publishMetaData: function publishMetaData() {\n        return _publishMetaData;\n      },\n      querySelectorAll: function querySelectorAll() {\n        return query_selector_all_default;\n      },\n      querySelectorAllFilter: function querySelectorAllFilter() {\n        return query_selector_all_filter_default;\n      },\n      queue: function queue() {\n        return queue_default;\n      },\n      respondable: function respondable() {\n        return _respondable;\n      },\n      ruleShouldRun: function ruleShouldRun() {\n        return rule_should_run_default;\n      },\n      select: function select() {\n        return _select;\n      },\n      sendCommandToFrame: function sendCommandToFrame() {\n        return _sendCommandToFrame;\n      },\n      setScrollState: function setScrollState() {\n        return set_scroll_state_default;\n      },\n      shadowSelect: function shadowSelect() {\n        return _shadowSelect;\n      },\n      shadowSelectAll: function shadowSelectAll() {\n        return _shadowSelectAll;\n      },\n      shouldPreload: function shouldPreload() {\n        return _shouldPreload;\n      },\n      toArray: function toArray() {\n        return to_array_default;\n      },\n      tokenList: function tokenList() {\n        return token_list_default;\n      },\n      uniqueArray: function uniqueArray() {\n        return unique_array_default;\n      },\n      uuid: function uuid() {\n        return uuid_default;\n      },\n      validInputTypes: function validInputTypes() {\n        return valid_input_type_default;\n      },\n      validLangs: function validLangs() {\n        return _validLangs;\n      }\n    });\n    function aggregate(map, values2, initial) {\n      values2 = values2.slice();\n      if (initial) {\n        values2.push(initial);\n      }\n      var sorting = values2.map(function(val) {\n        return map.indexOf(val);\n      }).sort();\n      return map[sorting.pop()];\n    }\n    var aggregate_default = aggregate;\n    var CANTTELL_PRIO = constants_default.CANTTELL_PRIO, FAIL_PRIO = constants_default.FAIL_PRIO;\n    var checkMap = [];\n    checkMap[constants_default.PASS_PRIO] = true;\n    checkMap[constants_default.CANTTELL_PRIO] = null;\n    checkMap[constants_default.FAIL_PRIO] = false;\n    var checkTypes = [ 'any', 'all', 'none' ];\n    function anyAllNone(obj, functor) {\n      return checkTypes.reduce(function(out, type2) {\n        out[type2] = (obj[type2] || []).map(function(val) {\n          return functor(val, type2);\n        });\n        return out;\n      }, {});\n    }\n    function aggregateChecks(nodeResOriginal) {\n      var nodeResult = Object.assign({}, nodeResOriginal);\n      anyAllNone(nodeResult, function(check, type2) {\n        var i = typeof check.result === 'undefined' ? -1 : checkMap.indexOf(check.result);\n        check.priority = i !== -1 ? i : constants_default.CANTTELL_PRIO;\n        if (type2 === 'none') {\n          if (check.priority === constants_default.PASS_PRIO) {\n            check.priority = constants_default.FAIL_PRIO;\n          } else if (check.priority === constants_default.FAIL_PRIO) {\n            check.priority = constants_default.PASS_PRIO;\n          }\n        }\n      });\n      var priorities = {\n        all: nodeResult.all.reduce(function(a2, b2) {\n          return Math.max(a2, b2.priority);\n        }, 0),\n        none: nodeResult.none.reduce(function(a2, b2) {\n          return Math.max(a2, b2.priority);\n        }, 0),\n        any: nodeResult.any.reduce(function(a2, b2) {\n          return Math.min(a2, b2.priority);\n        }, 4) % 4\n      };\n      nodeResult.priority = Math.max(priorities.all, priorities.none, priorities.any);\n      var impacts = [];\n      checkTypes.forEach(function(type2) {\n        nodeResult[type2] = nodeResult[type2].filter(function(check) {\n          return check.priority === nodeResult.priority && check.priority === priorities[type2];\n        });\n        nodeResult[type2].forEach(function(check) {\n          return impacts.push(check.impact);\n        });\n      });\n      if ([ CANTTELL_PRIO, FAIL_PRIO ].includes(nodeResult.priority)) {\n        nodeResult.impact = aggregate_default(constants_default.impact, impacts);\n      } else {\n        nodeResult.impact = null;\n      }\n      anyAllNone(nodeResult, function(c4) {\n        delete c4.result;\n        delete c4.priority;\n      });\n      nodeResult.result = constants_default.results[nodeResult.priority];\n      delete nodeResult.priority;\n      return nodeResult;\n    }\n    var aggregate_checks_default = aggregateChecks;\n    function _finalizeRuleResult(ruleResult) {\n      var rule = axe._audit.rules.find(function(_ref) {\n        var id = _ref.id;\n        return id === ruleResult.id;\n      });\n      if (rule && rule.impact) {\n        ruleResult.nodes.forEach(function(node) {\n          [ 'any', 'all', 'none' ].forEach(function(checkType) {\n            (node[checkType] || []).forEach(function(checkResult) {\n              checkResult.impact = rule.impact;\n            });\n          });\n        });\n      }\n      Object.assign(ruleResult, aggregate_node_results_default(ruleResult.nodes));\n      delete ruleResult.nodes;\n      return ruleResult;\n    }\n    function aggregateNodeResults(nodeResults) {\n      var ruleResult = {};\n      nodeResults = nodeResults.map(function(nodeResult) {\n        if (nodeResult.any && nodeResult.all && nodeResult.none) {\n          return aggregate_checks_default(nodeResult);\n        } else if (Array.isArray(nodeResult.node)) {\n          return _finalizeRuleResult(nodeResult);\n        } else {\n          throw new TypeError('Invalid Result type');\n        }\n      });\n      if (nodeResults && nodeResults.length) {\n        var resultList = nodeResults.map(function(node) {\n          return node.result;\n        });\n        ruleResult.result = aggregate_default(constants_default.results, resultList, ruleResult.result);\n      } else {\n        ruleResult.result = 'inapplicable';\n      }\n      constants_default.resultGroups.forEach(function(group) {\n        return ruleResult[group] = [];\n      });\n      nodeResults.forEach(function(nodeResult) {\n        var groupName = constants_default.resultGroupMap[nodeResult.result];\n        ruleResult[groupName].push(nodeResult);\n      });\n      var impactGroup = constants_default.FAIL_GROUP;\n      if (ruleResult[impactGroup].length === 0) {\n        impactGroup = constants_default.CANTTELL_GROUP;\n      }\n      if (ruleResult[impactGroup].length > 0) {\n        var impactList = ruleResult[impactGroup].map(function(failure) {\n          return failure.impact;\n        });\n        ruleResult.impact = aggregate_default(constants_default.impact, impactList) || null;\n      } else {\n        ruleResult.impact = null;\n      }\n      return ruleResult;\n    }\n    var aggregate_node_results_default = aggregateNodeResults;\n    function copyToGroup(resultObject, subResult, group) {\n      var resultCopy = Object.assign({}, subResult);\n      resultCopy.nodes = (resultCopy[group] || []).concat();\n      constants_default.resultGroups.forEach(function(resultGroup) {\n        delete resultCopy[resultGroup];\n      });\n      resultObject[group].push(resultCopy);\n    }\n    function aggregateResult(results) {\n      var resultObject = {};\n      constants_default.resultGroups.forEach(function(groupName) {\n        return resultObject[groupName] = [];\n      });\n      results.forEach(function(subResult) {\n        if (subResult.error) {\n          copyToGroup(resultObject, subResult, constants_default.CANTTELL_GROUP);\n        } else if (subResult.result === constants_default.NA) {\n          copyToGroup(resultObject, subResult, constants_default.NA_GROUP);\n        } else {\n          constants_default.resultGroups.forEach(function(group) {\n            if (Array.isArray(subResult[group]) && subResult[group].length > 0) {\n              copyToGroup(resultObject, subResult, group);\n            }\n          });\n        }\n      });\n      return resultObject;\n    }\n    var aggregate_result_default = aggregateResult;\n    function areStylesSet(el, styles, stopAt) {\n      var styl = window.getComputedStyle(el, null);\n      if (!styl) {\n        return false;\n      }\n      for (var i = 0; i < styles.length; ++i) {\n        var att = styles[i];\n        if (styl.getPropertyValue(att.property) === att.value) {\n          return true;\n        }\n      }\n      if (!el.parentNode || el.nodeName.toUpperCase() === stopAt.toUpperCase()) {\n        return false;\n      }\n      return areStylesSet(el.parentNode, styles, stopAt);\n    }\n    var are_styles_set_default = areStylesSet;\n    function assert(bool, message) {\n      if (!bool) {\n        throw new Error(message);\n      }\n    }\n    var assert_default = assert;\n    function toArray(thing) {\n      return Array.prototype.slice.call(thing);\n    }\n    var to_array_default = toArray;\n    function escapeSelector(value) {\n      var string = String(value);\n      var length = string.length;\n      var index = -1;\n      var codeUnit;\n      var result = '';\n      var firstCodeUnit = string.charCodeAt(0);\n      while (++index < length) {\n        codeUnit = string.charCodeAt(index);\n        if (codeUnit == 0) {\n          result += '\\ufffd';\n          continue;\n        }\n        if (codeUnit >= 1 && codeUnit <= 31 || codeUnit == 127 || index == 0 && codeUnit >= 48 && codeUnit <= 57 || index == 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit == 45) {\n          result += '\\\\' + codeUnit.toString(16) + ' ';\n          continue;\n        }\n        if (index == 0 && length == 1 && codeUnit == 45) {\n          result += '\\\\' + string.charAt(index);\n          continue;\n        }\n        if (codeUnit >= 128 || codeUnit == 45 || codeUnit == 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {\n          result += string.charAt(index);\n          continue;\n        }\n        result += '\\\\' + string.charAt(index);\n      }\n      return result;\n    }\n    var escape_selector_default = escapeSelector;\n    function isMostlyNumbers() {\n      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return str.length !== 0 && (str.match(/[0-9]/g) || '').length >= str.length / 2;\n    }\n    function splitString(str, splitIndex) {\n      return [ str.substring(0, splitIndex), str.substring(splitIndex) ];\n    }\n    function trimRight(str) {\n      return str.replace(/\\s+$/, '');\n    }\n    function uriParser(url) {\n      var original = url;\n      var protocol = '', domain = '', port = '', path = '', query = '', hash = '';\n      if (url.includes('#')) {\n        var _splitString = splitString(url, url.indexOf('#'));\n        var _splitString2 = _slicedToArray(_splitString, 2);\n        url = _splitString2[0];\n        hash = _splitString2[1];\n      }\n      if (url.includes('?')) {\n        var _splitString3 = splitString(url, url.indexOf('?'));\n        var _splitString4 = _slicedToArray(_splitString3, 2);\n        url = _splitString4[0];\n        query = _splitString4[1];\n      }\n      if (url.includes('://')) {\n        var _url$split = url.split('://');\n        var _url$split2 = _slicedToArray(_url$split, 2);\n        protocol = _url$split2[0];\n        url = _url$split2[1];\n        var _splitString5 = splitString(url, url.indexOf('/'));\n        var _splitString6 = _slicedToArray(_splitString5, 2);\n        domain = _splitString6[0];\n        url = _splitString6[1];\n      } else if (url.substr(0, 2) === '//') {\n        url = url.substr(2);\n        var _splitString7 = splitString(url, url.indexOf('/'));\n        var _splitString8 = _slicedToArray(_splitString7, 2);\n        domain = _splitString8[0];\n        url = _splitString8[1];\n      }\n      if (domain.substr(0, 4) === 'www.') {\n        domain = domain.substr(4);\n      }\n      if (domain && domain.includes(':')) {\n        var _splitString9 = splitString(domain, domain.indexOf(':'));\n        var _splitString10 = _slicedToArray(_splitString9, 2);\n        domain = _splitString10[0];\n        port = _splitString10[1];\n      }\n      path = url;\n      return {\n        original: original,\n        protocol: protocol,\n        domain: domain,\n        port: port,\n        path: path,\n        query: query,\n        hash: hash\n      };\n    }\n    function getFriendlyUriEnd() {\n      var uri = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (uri.length <= 1 || uri.substr(0, 5) === 'data:' || uri.substr(0, 11) === 'javascript:' || uri.includes('?')) {\n        return;\n      }\n      var currentDomain = options.currentDomain, _options$maxLength = options.maxLength, maxLength = _options$maxLength === void 0 ? 25 : _options$maxLength;\n      var _uriParser = uriParser(uri), path = _uriParser.path, domain = _uriParser.domain, hash = _uriParser.hash;\n      var pathEnd = path.substr(path.substr(0, path.length - 2).lastIndexOf('/') + 1);\n      if (hash) {\n        if (pathEnd && (pathEnd + hash).length <= maxLength) {\n          return trimRight(pathEnd + hash);\n        } else if (pathEnd.length < 2 && hash.length > 2 && hash.length <= maxLength) {\n          return trimRight(hash);\n        } else {\n          return;\n        }\n      } else if (domain && domain.length < maxLength && path.length <= 1) {\n        return trimRight(domain + path);\n      }\n      if (path === '/' + pathEnd && domain && currentDomain && domain !== currentDomain && (domain + path).length <= maxLength) {\n        return trimRight(domain + path);\n      }\n      var lastDotIndex = pathEnd.lastIndexOf('.');\n      if ((lastDotIndex === -1 || lastDotIndex > 1) && (lastDotIndex !== -1 || pathEnd.length > 2) && pathEnd.length <= maxLength && !pathEnd.match(/index(\\.[a-zA-Z]{2-4})?/) && !isMostlyNumbers(pathEnd)) {\n        return trimRight(pathEnd);\n      }\n    }\n    var get_friendly_uri_end_default = getFriendlyUriEnd;\n    function getNodeAttributes(node) {\n      if (node.attributes instanceof window.NamedNodeMap) {\n        return node.attributes;\n      }\n      return node.cloneNode(false).attributes;\n    }\n    var get_node_attributes_default = getNodeAttributes;\n    var matchesSelector = function() {\n      var method;\n      function getMethod(node) {\n        var candidates = [ 'matches', 'matchesSelector', 'mozMatchesSelector', 'webkitMatchesSelector', 'msMatchesSelector' ];\n        var length = candidates.length;\n        var index, candidate;\n        for (index = 0; index < length; index++) {\n          candidate = candidates[index];\n          if (node[candidate]) {\n            return candidate;\n          }\n        }\n      }\n      return function(node, selector) {\n        if (!method || !node[method]) {\n          method = getMethod(node);\n        }\n        if (node[method]) {\n          return node[method](selector);\n        }\n        return false;\n      };\n    }();\n    var element_matches_default = matchesSelector;\n    var import_memoizee = __toModule(require_memoizee());\n    axe._memoizedFns = [];\n    function memoizeImplementation(fn) {\n      var memoized = (0, import_memoizee['default'])(fn);\n      axe._memoizedFns.push(memoized);\n      return memoized;\n    }\n    var memoize_default = memoizeImplementation;\n    var isXHTML = memoize_default(function(doc) {\n      if (!(doc !== null && doc !== void 0 && doc.createElement)) {\n        return false;\n      }\n      return doc.createElement('A').localName === 'A';\n    });\n    var is_xhtml_default = isXHTML;\n    function _getShadowSelector(generateSelector2, elm) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (!elm) {\n        return '';\n      }\n      var doc = elm.getRootNode && elm.getRootNode() || document;\n      if (doc.nodeType !== 11) {\n        return generateSelector2(elm, options, doc);\n      }\n      var stack = [];\n      while (doc.nodeType === 11) {\n        if (!doc.host) {\n          return '';\n        }\n        stack.unshift({\n          elm: elm,\n          doc: doc\n        });\n        elm = doc.host;\n        doc = elm.getRootNode();\n      }\n      stack.unshift({\n        elm: elm,\n        doc: doc\n      });\n      return stack.map(function(item) {\n        return generateSelector2(item.elm, options, item.doc);\n      });\n    }\n    var ignoredAttributes = [ 'class', 'style', 'id', 'selected', 'checked', 'disabled', 'tabindex', 'aria-checked', 'aria-selected', 'aria-invalid', 'aria-activedescendant', 'aria-busy', 'aria-disabled', 'aria-expanded', 'aria-grabbed', 'aria-pressed', 'aria-valuenow', 'xmlns' ];\n    var MAXATTRIBUTELENGTH = 31;\n    var attrCharsRegex = /([\\\\\"])/g;\n    var newlineChars = /(\\r\\n|\\r|\\n)/g;\n    function escapeAttribute(str) {\n      return str.replace(attrCharsRegex, '\\\\$1').replace(newlineChars, '\\\\a ');\n    }\n    function getAttributeNameValue(node, at) {\n      var name = at.name;\n      var atnv;\n      if (name.indexOf('href') !== -1 || name.indexOf('src') !== -1) {\n        var friendly = get_friendly_uri_end_default(node.getAttribute(name));\n        if (friendly) {\n          atnv = escape_selector_default(at.name) + '$=\"' + escapeAttribute(friendly) + '\"';\n        } else {\n          atnv = escape_selector_default(at.name) + '=\"' + escapeAttribute(node.getAttribute(name)) + '\"';\n        }\n      } else {\n        atnv = escape_selector_default(name) + '=\"' + escapeAttribute(at.value) + '\"';\n      }\n      return atnv;\n    }\n    function countSort(a2, b2) {\n      return a2.count < b2.count ? -1 : a2.count === b2.count ? 0 : 1;\n    }\n    function filterAttributes(at) {\n      return !ignoredAttributes.includes(at.name) && at.name.indexOf(':') === -1 && (!at.value || at.value.length < MAXATTRIBUTELENGTH);\n    }\n    function _getSelectorData(domTree) {\n      var data = {\n        classes: {},\n        tags: {},\n        attributes: {}\n      };\n      domTree = Array.isArray(domTree) ? domTree : [ domTree ];\n      var currentLevel = domTree.slice();\n      var stack = [];\n      var _loop2 = function _loop2() {\n        var current = currentLevel.pop();\n        var node = current.actualNode;\n        if (!!node.querySelectorAll) {\n          var tag = node.nodeName;\n          if (data.tags[tag]) {\n            data.tags[tag]++;\n          } else {\n            data.tags[tag] = 1;\n          }\n          if (node.classList) {\n            Array.from(node.classList).forEach(function(cl) {\n              var ind = escape_selector_default(cl);\n              if (data.classes[ind]) {\n                data.classes[ind]++;\n              } else {\n                data.classes[ind] = 1;\n              }\n            });\n          }\n          if (node.hasAttributes()) {\n            Array.from(get_node_attributes_default(node)).filter(filterAttributes).forEach(function(at) {\n              var atnv = getAttributeNameValue(node, at);\n              if (atnv) {\n                if (data.attributes[atnv]) {\n                  data.attributes[atnv]++;\n                } else {\n                  data.attributes[atnv] = 1;\n                }\n              }\n            });\n          }\n        }\n        if (current.children.length) {\n          stack.push(currentLevel);\n          currentLevel = current.children.slice();\n        }\n        while (!currentLevel.length && stack.length) {\n          currentLevel = stack.pop();\n        }\n      };\n      while (currentLevel.length) {\n        _loop2();\n      }\n      return data;\n    }\n    function uncommonClasses(node, selectorData) {\n      var retVal = [];\n      var classData = selectorData.classes;\n      var tagData = selectorData.tags;\n      if (node.classList) {\n        Array.from(node.classList).forEach(function(cl) {\n          var ind = escape_selector_default(cl);\n          if (classData[ind] < tagData[node.nodeName]) {\n            retVal.push({\n              name: ind,\n              count: classData[ind],\n              species: 'class'\n            });\n          }\n        });\n      }\n      return retVal.sort(countSort);\n    }\n    function getNthChildString(elm, selector) {\n      var siblings = elm.parentNode && Array.from(elm.parentNode.children || '') || [];\n      var hasMatchingSiblings = siblings.find(function(sibling) {\n        return sibling !== elm && element_matches_default(sibling, selector);\n      });\n      if (hasMatchingSiblings) {\n        var nthChild = 1 + siblings.indexOf(elm);\n        return ':nth-child(' + nthChild + ')';\n      } else {\n        return '';\n      }\n    }\n    function getElmId(elm) {\n      if (!elm.getAttribute('id')) {\n        return;\n      }\n      var doc = elm.getRootNode && elm.getRootNode() || document;\n      var id = '#' + escape_selector_default(elm.getAttribute('id') || '');\n      if (!id.match(/player_uid_/) && doc.querySelectorAll(id).length === 1) {\n        return id;\n      }\n    }\n    function getBaseSelector(elm) {\n      var xhtml = is_xhtml_default(document);\n      return escape_selector_default(xhtml ? elm.localName : elm.nodeName.toLowerCase());\n    }\n    function uncommonAttributes(node, selectorData) {\n      var retVal = [];\n      var attData = selectorData.attributes;\n      var tagData = selectorData.tags;\n      if (node.hasAttributes()) {\n        Array.from(get_node_attributes_default(node)).filter(filterAttributes).forEach(function(at) {\n          var atnv = getAttributeNameValue(node, at);\n          if (atnv && attData[atnv] < tagData[node.nodeName]) {\n            retVal.push({\n              name: atnv,\n              count: attData[atnv],\n              species: 'attribute'\n            });\n          }\n        });\n      }\n      return retVal.sort(countSort);\n    }\n    function getThreeLeastCommonFeatures(elm, selectorData) {\n      var selector = '';\n      var features;\n      var clss = uncommonClasses(elm, selectorData);\n      var atts = uncommonAttributes(elm, selectorData);\n      if (clss.length && clss[0].count === 1) {\n        features = [ clss[0] ];\n      } else if (atts.length && atts[0].count === 1) {\n        features = [ atts[0] ];\n        selector = getBaseSelector(elm);\n      } else {\n        features = clss.concat(atts);\n        features.sort(countSort);\n        features = features.slice(0, 3);\n        if (!features.some(function(feat) {\n          return feat.species === 'class';\n        })) {\n          selector = getBaseSelector(elm);\n        } else {\n          features.sort(function(a2, b2) {\n            return a2.species !== b2.species && a2.species === 'class' ? -1 : a2.species === b2.species ? 0 : 1;\n          });\n        }\n      }\n      return selector += features.reduce(function(val, feat) {\n        switch (feat.species) {\n         case 'class':\n          return val + '.' + feat.name;\n\n         case 'attribute':\n          return val + '[' + feat.name + ']';\n        }\n        return val;\n      }, '');\n    }\n    function generateSelector(elm, options, doc) {\n      if (!axe._selectorData) {\n        throw new Error('Expect axe._selectorData to be set up');\n      }\n      var _options$toRoot = options.toRoot, toRoot = _options$toRoot === void 0 ? false : _options$toRoot;\n      var selector;\n      var similar;\n      do {\n        var features = getElmId(elm);\n        if (!features) {\n          features = getThreeLeastCommonFeatures(elm, axe._selectorData);\n          features += getNthChildString(elm, features);\n        }\n        if (selector) {\n          selector = features + ' > ' + selector;\n        } else {\n          selector = features;\n        }\n        if (!similar || similar.length > constants_default.selectorSimilarFilterLimit) {\n          similar = findSimilar(doc, selector);\n        } else {\n          similar = similar.filter(function(item) {\n            return element_matches_default(item, selector);\n          });\n        }\n        elm = elm.parentElement;\n      } while ((similar.length > 1 || toRoot) && elm && elm.nodeType !== 11);\n      if (similar.length === 1) {\n        return selector;\n      } else if (selector.indexOf(' > ') !== -1) {\n        return ':root' + selector.substring(selector.indexOf(' > '));\n      }\n      return ':root';\n    }\n    function getSelector(elm, options) {\n      return _getShadowSelector(generateSelector, elm, options);\n    }\n    var get_selector_default = memoize_default(getSelector);\n    var findSimilar = memoize_default(function(doc, selector) {\n      return Array.from(doc.querySelectorAll(selector));\n    });\n    function generateAncestry(node) {\n      var nodeName2 = node.nodeName.toLowerCase();\n      var parentElement = node.parentElement;\n      var parentNode = node.parentNode;\n      var nthChild = '';\n      if (nodeName2 !== 'head' && nodeName2 !== 'body' && (parentNode === null || parentNode === void 0 ? void 0 : parentNode.children.length) > 1) {\n        var index = Array.prototype.indexOf.call(parentNode.children, node) + 1;\n        nthChild = ':nth-child('.concat(index, ')');\n      }\n      if (!parentElement) {\n        return nodeName2 + nthChild;\n      }\n      return generateAncestry(parentElement) + ' > ' + nodeName2 + nthChild;\n    }\n    function _getAncestry(elm, options) {\n      return _getShadowSelector(generateAncestry, elm, options);\n    }\n    function getXPathArray(node, path) {\n      var sibling, count;\n      if (!node) {\n        return [];\n      }\n      if (!path && node.nodeType === 9) {\n        path = [ {\n          str: 'html'\n        } ];\n        return path;\n      }\n      path = path || [];\n      if (node.parentNode && node.parentNode !== node) {\n        path = getXPathArray(node.parentNode, path);\n      }\n      if (node.previousSibling) {\n        count = 1;\n        sibling = node.previousSibling;\n        do {\n          if (sibling.nodeType === 1 && sibling.nodeName === node.nodeName) {\n            count++;\n          }\n          sibling = sibling.previousSibling;\n        } while (sibling);\n        if (count === 1) {\n          count = null;\n        }\n      } else if (node.nextSibling) {\n        sibling = node.nextSibling;\n        do {\n          if (sibling.nodeType === 1 && sibling.nodeName === node.nodeName) {\n            count = 1;\n            sibling = null;\n          } else {\n            count = null;\n            sibling = sibling.previousSibling;\n          }\n        } while (sibling);\n      }\n      if (node.nodeType === 1) {\n        var element = {};\n        element.str = node.nodeName.toLowerCase();\n        var id = node.getAttribute && escape_selector_default(node.getAttribute('id'));\n        if (id && node.ownerDocument.querySelectorAll('#' + id).length === 1) {\n          element.id = node.getAttribute('id');\n        }\n        if (count > 1) {\n          element.count = count;\n        }\n        path.push(element);\n      }\n      return path;\n    }\n    function xpathToString(xpathArray) {\n      return xpathArray.reduce(function(str, elm) {\n        if (elm.id) {\n          return '/'.concat(elm.str, '[@id=\\'').concat(elm.id, '\\']');\n        } else {\n          return str + '/'.concat(elm.str) + (elm.count > 0 ? '['.concat(elm.count, ']') : '');\n        }\n      }, '');\n    }\n    function getXpath(node) {\n      var xpathArray = getXPathArray(node);\n      return xpathToString(xpathArray);\n    }\n    var get_xpath_default = getXpath;\n    var _cache = {};\n    var cache = {\n      set: function set(key, value) {\n        validateKey(key);\n        _cache[key] = value;\n      },\n      get: function get(key, creator) {\n        validateCreator(creator);\n        if (key in _cache) {\n          return _cache[key];\n        }\n        if (typeof creator === 'function') {\n          var value = creator();\n          assert_default(value !== void 0, 'Cache creator function should not return undefined');\n          this.set(key, value);\n          return _cache[key];\n        }\n      },\n      clear: function clear() {\n        _cache = {};\n      }\n    };\n    function validateKey(key) {\n      assert_default(typeof key === 'string', 'key must be a string, ' + _typeof(key) + ' given');\n      assert_default(key !== '', 'key must not be empty');\n    }\n    function validateCreator(creator) {\n      assert_default(typeof creator === 'function' || typeof creator === 'undefined', 'creator must be a function or undefined, ' + _typeof(creator) + ' given');\n    }\n    var cache_default = cache;\n    function getNodeFromTree(vNode, node) {\n      var el = node || vNode;\n      return cache_default.get('nodeMap') ? cache_default.get('nodeMap').get(el) : null;\n    }\n    var get_node_from_tree_default = getNodeFromTree;\n    var CACHE_KEY = 'DqElm.RunOptions';\n    function truncate(str, maxLength) {\n      maxLength = maxLength || 300;\n      if (str.length > maxLength) {\n        var index = str.indexOf('>');\n        str = str.substring(0, index + 1);\n      }\n      return str;\n    }\n    function getSource(element) {\n      if (!(element !== null && element !== void 0 && element.outerHTML)) {\n        return '';\n      }\n      var source = element.outerHTML;\n      if (!source && typeof window.XMLSerializer === 'function') {\n        source = new window.XMLSerializer().serializeToString(element);\n      }\n      return truncate(source || '');\n    }\n    var DqElement = memoize_default(function DqElement2(elm, options, spec) {\n      var _options, _spec, _this$spec$selector, _this$_virtualNode;\n      (_options = options) !== null && _options !== void 0 ? _options : options = null;\n      (_spec = spec) !== null && _spec !== void 0 ? _spec : spec = {};\n      if (!options) {\n        var _cache_default$get;\n        options = (_cache_default$get = cache_default.get(CACHE_KEY)) !== null && _cache_default$get !== void 0 ? _cache_default$get : {};\n      }\n      this.spec = spec;\n      if (elm instanceof abstract_virtual_node_default) {\n        this._virtualNode = elm;\n        this._element = elm.actualNode;\n      } else {\n        this._element = elm;\n        this._virtualNode = get_node_from_tree_default(elm);\n      }\n      this.fromFrame = ((_this$spec$selector = this.spec.selector) === null || _this$spec$selector === void 0 ? void 0 : _this$spec$selector.length) > 1;\n      this._includeElementInJson = options.elementRef;\n      if (options.absolutePaths) {\n        this._options = {\n          toRoot: true\n        };\n      }\n      this.nodeIndexes = [];\n      if (Array.isArray(this.spec.nodeIndexes)) {\n        this.nodeIndexes = this.spec.nodeIndexes;\n      } else if (typeof ((_this$_virtualNode = this._virtualNode) === null || _this$_virtualNode === void 0 ? void 0 : _this$_virtualNode.nodeIndex) === 'number') {\n        this.nodeIndexes = [ this._virtualNode.nodeIndex ];\n      }\n      this.source = null;\n      if (!axe._audit.noHtml) {\n        var _this$spec$source;\n        this.source = (_this$spec$source = this.spec.source) !== null && _this$spec$source !== void 0 ? _this$spec$source : getSource(this._element);\n      }\n      return this;\n    });\n    DqElement.prototype = {\n      get selector() {\n        return this.spec.selector || [ get_selector_default(this.element, this._options) ];\n      },\n      get ancestry() {\n        return this.spec.ancestry || [ _getAncestry(this.element) ];\n      },\n      get xpath() {\n        return this.spec.xpath || [ get_xpath_default(this.element) ];\n      },\n      get element() {\n        return this._element;\n      },\n      toJSON: function toJSON() {\n        var spec = {\n          selector: this.selector,\n          source: this.source,\n          xpath: this.xpath,\n          ancestry: this.ancestry,\n          nodeIndexes: this.nodeIndexes,\n          fromFrame: this.fromFrame\n        };\n        if (this._includeElementInJson) {\n          spec.element = this._element;\n        }\n        return spec;\n      }\n    };\n    DqElement.fromFrame = function fromFrame(node, options, frame) {\n      var spec = DqElement.mergeSpecs(node, frame);\n      return new DqElement(frame.element, options, spec);\n    };\n    DqElement.mergeSpecs = function mergeSpecs(child, parentFrame) {\n      return _extends({}, child, {\n        selector: [].concat(_toConsumableArray(parentFrame.selector), _toConsumableArray(child.selector)),\n        ancestry: [].concat(_toConsumableArray(parentFrame.ancestry), _toConsumableArray(child.ancestry)),\n        xpath: [].concat(_toConsumableArray(parentFrame.xpath), _toConsumableArray(child.xpath)),\n        nodeIndexes: [].concat(_toConsumableArray(parentFrame.nodeIndexes), _toConsumableArray(child.nodeIndexes)),\n        fromFrame: true\n      });\n    };\n    DqElement.setRunOptions = function setRunOptions(_ref2) {\n      var elementRef = _ref2.elementRef, absolutePaths = _ref2.absolutePaths;\n      cache_default.set(CACHE_KEY, {\n        elementRef: elementRef,\n        absolutePaths: absolutePaths\n      });\n    };\n    var dq_element_default = DqElement;\n    function checkHelper(checkResult, options, resolve, reject) {\n      return {\n        isAsync: false,\n        async: function async() {\n          this.isAsync = true;\n          return function(result) {\n            if (result instanceof Error === false) {\n              checkResult.result = result;\n              resolve(checkResult);\n            } else {\n              reject(result);\n            }\n          };\n        },\n        data: function data(_data) {\n          checkResult.data = _data;\n        },\n        relatedNodes: function relatedNodes(nodes) {\n          if (!window.Node) {\n            return;\n          }\n          if (nodes instanceof window.Node || nodes instanceof abstract_virtual_node_default) {\n            nodes = [ nodes ];\n          } else {\n            nodes = to_array_default(nodes);\n          }\n          checkResult.relatedNodes = [];\n          nodes.forEach(function(node) {\n            if (node instanceof abstract_virtual_node_default) {\n              node = node.actualNode;\n            }\n            if (node instanceof window.Node) {\n              var dqElm = new dq_element_default(node);\n              checkResult.relatedNodes.push(dqElm);\n            }\n          });\n        }\n      };\n    }\n    var check_helper_default = checkHelper;\n    function _clone(obj) {\n      return cloneRecused(obj, new Map());\n    }\n    function cloneRecused(obj, seen) {\n      var _window, _window2;\n      if (obj === null || _typeof(obj) !== 'object') {\n        return obj;\n      }\n      if ((_window = window) !== null && _window !== void 0 && _window.Node && obj instanceof window.Node || (_window2 = window) !== null && _window2 !== void 0 && _window2.HTMLCollection && obj instanceof window.HTMLCollection || 'nodeName' in obj && 'nodeType' in obj && 'ownerDocument' in obj) {\n        return obj;\n      }\n      if (seen.has(obj)) {\n        return seen.get(obj);\n      }\n      if (Array.isArray(obj)) {\n        var out2 = [];\n        seen.set(obj, out2);\n        obj.forEach(function(value) {\n          out2.push(cloneRecused(value, seen));\n        });\n        return out2;\n      }\n      var out = {};\n      seen.set(obj, out);\n      for (var key in obj) {\n        out[key] = cloneRecused(obj[key], seen);\n      }\n      return out;\n    }\n    var import_css_selector_parser = __toModule(require_lib());\n    var parser = new import_css_selector_parser.CssSelectorParser();\n    parser.registerSelectorPseudos('not');\n    parser.registerSelectorPseudos('is');\n    parser.registerNestingOperators('>');\n    parser.registerAttrEqualityMods('^', '$', '*', '~');\n    var css_parser_default = parser;\n    function _matches(vNode, selector) {\n      var expressions = _convertSelector(selector);\n      return expressions.some(function(expression) {\n        return _matchesExpression(vNode, expression);\n      });\n    }\n    function matchesTag(vNode, exp) {\n      return vNode.props.nodeType === 1 && (exp.tag === '*' || vNode.props.nodeName === exp.tag);\n    }\n    function matchesClasses(vNode, exp) {\n      return !exp.classes || exp.classes.every(function(cl) {\n        return vNode.hasClass(cl.value);\n      });\n    }\n    function matchesAttributes(vNode, exp) {\n      return !exp.attributes || exp.attributes.every(function(att) {\n        var nodeAtt = vNode.attr(att.key);\n        return nodeAtt !== null && att.test(nodeAtt);\n      });\n    }\n    function matchesId(vNode, exp) {\n      return !exp.id || vNode.props.id === exp.id;\n    }\n    function matchesPseudos(target, exp) {\n      if (!exp.pseudos || exp.pseudos.every(function(pseudo) {\n        if (pseudo.name === 'not') {\n          return !pseudo.expressions.some(function(expression) {\n            return _matchesExpression(target, expression);\n          });\n        } else if (pseudo.name === 'is') {\n          return pseudo.expressions.some(function(expression) {\n            return _matchesExpression(target, expression);\n          });\n        }\n        throw new Error('the pseudo selector ' + pseudo.name + ' has not yet been implemented');\n      })) {\n        return true;\n      }\n      return false;\n    }\n    function matchExpression(vNode, expression) {\n      return matchesTag(vNode, expression) && matchesClasses(vNode, expression) && matchesAttributes(vNode, expression) && matchesId(vNode, expression) && matchesPseudos(vNode, expression);\n    }\n    var escapeRegExp = function() {\n      var from = /(?=[\\-\\[\\]{}()*+?.\\\\\\^$|,#\\s])/g;\n      var to2 = '\\\\';\n      return function(string) {\n        return string.replace(from, to2);\n      };\n    }();\n    var reUnescape = /\\\\/g;\n    function convertAttributes(atts) {\n      if (!atts) {\n        return;\n      }\n      return atts.map(function(att) {\n        var attributeKey = att.name.replace(reUnescape, '');\n        var attributeValue = (att.value || '').replace(reUnescape, '');\n        var test, regexp;\n        switch (att.operator) {\n         case '^=':\n          regexp = new RegExp('^' + escapeRegExp(attributeValue));\n          break;\n\n         case '$=':\n          regexp = new RegExp(escapeRegExp(attributeValue) + '$');\n          break;\n\n         case '~=':\n          regexp = new RegExp('(^|\\\\s)' + escapeRegExp(attributeValue) + '(\\\\s|$)');\n          break;\n\n         case '|=':\n          regexp = new RegExp('^' + escapeRegExp(attributeValue) + '(-|$)');\n          break;\n\n         case '=':\n          test = function test(value) {\n            return attributeValue === value;\n          };\n          break;\n\n         case '*=':\n          test = function test(value) {\n            return value && value.includes(attributeValue);\n          };\n          break;\n\n         case '!=':\n          test = function test(value) {\n            return attributeValue !== value;\n          };\n          break;\n\n         default:\n          test = function test(value) {\n            return value !== null;\n          };\n        }\n        if (attributeValue === '' && /^[*$^]=$/.test(att.operator)) {\n          test = function test() {\n            return false;\n          };\n        }\n        if (!test) {\n          test = function test(value) {\n            return value && regexp.test(value);\n          };\n        }\n        return {\n          key: attributeKey,\n          value: attributeValue,\n          type: typeof att.value === 'undefined' ? 'attrExist' : 'attrValue',\n          test: test\n        };\n      });\n    }\n    function convertClasses(classes) {\n      if (!classes) {\n        return;\n      }\n      return classes.map(function(className) {\n        className = className.replace(reUnescape, '');\n        return {\n          value: className,\n          regexp: new RegExp('(^|\\\\s)' + escapeRegExp(className) + '(\\\\s|$)')\n        };\n      });\n    }\n    function convertPseudos(pseudos) {\n      if (!pseudos) {\n        return;\n      }\n      return pseudos.map(function(p2) {\n        var expressions;\n        if ([ 'is', 'not' ].includes(p2.name)) {\n          expressions = p2.value;\n          expressions = expressions.selectors ? expressions.selectors : [ expressions ];\n          expressions = convertExpressions(expressions);\n        }\n        return {\n          name: p2.name,\n          expressions: expressions,\n          value: p2.value\n        };\n      });\n    }\n    function convertExpressions(expressions) {\n      return expressions.map(function(exp) {\n        var newExp = [];\n        var rule = exp.rule;\n        while (rule) {\n          newExp.push({\n            tag: rule.tagName ? rule.tagName.toLowerCase() : '*',\n            combinator: rule.nestingOperator ? rule.nestingOperator : ' ',\n            id: rule.id,\n            attributes: convertAttributes(rule.attrs),\n            classes: convertClasses(rule.classNames),\n            pseudos: convertPseudos(rule.pseudos)\n          });\n          rule = rule.rule;\n        }\n        return newExp;\n      });\n    }\n    function _convertSelector(selector) {\n      var expressions = css_parser_default.parse(selector);\n      expressions = expressions.selectors ? expressions.selectors : [ expressions ];\n      return convertExpressions(expressions);\n    }\n    function optimizedMatchesExpression(vNode, expressions, index, matchAnyParent) {\n      if (!vNode) {\n        return false;\n      }\n      var isArray = Array.isArray(expressions);\n      var expression = isArray ? expressions[index] : expressions;\n      var machedExpression = matchExpression(vNode, expression);\n      while (!machedExpression && matchAnyParent && vNode.parent) {\n        vNode = vNode.parent;\n        machedExpression = matchExpression(vNode, expression);\n      }\n      if (index > 0) {\n        if ([ ' ', '>' ].includes(expression.combinator) === false) {\n          throw new Error('axe.utils.matchesExpression does not support the combinator: ' + expression.combinator);\n        }\n        machedExpression = machedExpression && optimizedMatchesExpression(vNode.parent, expressions, index - 1, expression.combinator === ' ');\n      }\n      return machedExpression;\n    }\n    function _matchesExpression(vNode, expressions, matchAnyParent) {\n      return optimizedMatchesExpression(vNode, expressions, expressions.length - 1, matchAnyParent);\n    }\n    function closest(vNode, selector) {\n      while (vNode) {\n        if (_matches(vNode, selector)) {\n          return vNode;\n        }\n        if (typeof vNode.parent === 'undefined') {\n          throw new TypeError('Cannot resolve parent for non-DOM nodes');\n        }\n        vNode = vNode.parent;\n      }\n      return null;\n    }\n    var closest_default = closest;\n    function noop() {}\n    function funcGuard(f) {\n      if (typeof f !== 'function') {\n        throw new TypeError('Queue methods require functions as arguments');\n      }\n    }\n    function queue() {\n      var tasks = [];\n      var started = 0;\n      var remaining = 0;\n      var completeQueue = noop;\n      var complete = false;\n      var err2;\n      var defaultFail = function defaultFail(e) {\n        err2 = e;\n        setTimeout(function() {\n          if (err2 !== void 0 && err2 !== null) {\n            log_default('Uncaught error (of queue)', err2);\n          }\n        }, 1);\n      };\n      var failed = defaultFail;\n      function createResolve(i) {\n        return function(r) {\n          tasks[i] = r;\n          remaining -= 1;\n          if (!remaining && completeQueue !== noop) {\n            complete = true;\n            completeQueue(tasks);\n          }\n        };\n      }\n      function abort(msg) {\n        completeQueue = noop;\n        failed(msg);\n        return tasks;\n      }\n      function pop() {\n        var length = tasks.length;\n        for (;started < length; started++) {\n          var task = tasks[started];\n          try {\n            task.call(null, createResolve(started), abort);\n          } catch (e) {\n            abort(e);\n          }\n        }\n      }\n      var q = {\n        defer: function defer(fn) {\n          if (_typeof(fn) === 'object' && fn.then && fn['catch']) {\n            var defer = fn;\n            fn = function fn(resolve, reject) {\n              defer.then(resolve)['catch'](reject);\n            };\n          }\n          funcGuard(fn);\n          if (err2 !== void 0) {\n            return;\n          } else if (complete) {\n            throw new Error('Queue already completed');\n          }\n          tasks.push(fn);\n          ++remaining;\n          pop();\n          return q;\n        },\n        then: function then(fn) {\n          funcGuard(fn);\n          if (completeQueue !== noop) {\n            throw new Error('queue `then` already set');\n          }\n          if (!err2) {\n            completeQueue = fn;\n            if (!remaining) {\n              complete = true;\n              completeQueue(tasks);\n            }\n          }\n          return q;\n        },\n        catch: function _catch(fn) {\n          funcGuard(fn);\n          if (failed !== defaultFail) {\n            throw new Error('queue `catch` already set');\n          }\n          if (!err2) {\n            failed = fn;\n          } else {\n            fn(err2);\n            err2 = null;\n          }\n          return q;\n        },\n        abort: abort\n      };\n      return q;\n    }\n    var queue_default = queue;\n    var uuid;\n    var _rng;\n    var _crypto = window.crypto || window.msCrypto;\n    if (!_rng && _crypto && _crypto.getRandomValues) {\n      var _rnds8 = new Uint8Array(16);\n      _rng = function whatwgRNG() {\n        _crypto.getRandomValues(_rnds8);\n        return _rnds8;\n      };\n    }\n    if (!_rng) {\n      var _rnds = new Array(16);\n      _rng = function _rng() {\n        for (var i = 0, r; i < 16; i++) {\n          if ((i & 3) === 0) {\n            r = Math.random() * 4294967296;\n          }\n          _rnds[i] = r >>> ((i & 3) << 3) & 255;\n        }\n        return _rnds;\n      };\n    }\n    var BufferClass = typeof window.Buffer == 'function' ? window.Buffer : Array;\n    var _byteToHex = [];\n    var _hexToByte = {};\n    for (var i = 0; i < 256; i++) {\n      _byteToHex[i] = (i + 256).toString(16).substr(1);\n      _hexToByte[_byteToHex[i]] = i;\n    }\n    function parse(s, buf, offset) {\n      var i = buf && offset || 0, ii = 0;\n      buf = buf || [];\n      s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n        if (ii < 16) {\n          buf[i + ii++] = _hexToByte[oct];\n        }\n      });\n      while (ii < 16) {\n        buf[i + ii++] = 0;\n      }\n      return buf;\n    }\n    function unparse(buf, offset) {\n      var i = offset || 0, bth = _byteToHex;\n      return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];\n    }\n    var _seedBytes = _rng();\n    var _nodeId = [ _seedBytes[0] | 1, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5] ];\n    var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 16383;\n    var _lastMSecs = 0;\n    var _lastNSecs = 0;\n    function v1(options, buf, offset) {\n      var i = buf && offset || 0;\n      var b2 = buf || [];\n      options = options || {};\n      var clockseq = options.clockseq != null ? options.clockseq : _clockseq;\n      var msecs = options.msecs != null ? options.msecs : new Date().getTime();\n      var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;\n      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;\n      if (dt < 0 && options.clockseq == null) {\n        clockseq = clockseq + 1 & 16383;\n      }\n      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {\n        nsecs = 0;\n      }\n      if (nsecs >= 1e4) {\n        throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n      }\n      _lastMSecs = msecs;\n      _lastNSecs = nsecs;\n      _clockseq = clockseq;\n      msecs += 122192928e5;\n      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;\n      b2[i++] = tl >>> 24 & 255;\n      b2[i++] = tl >>> 16 & 255;\n      b2[i++] = tl >>> 8 & 255;\n      b2[i++] = tl & 255;\n      var tmh = msecs / 4294967296 * 1e4 & 268435455;\n      b2[i++] = tmh >>> 8 & 255;\n      b2[i++] = tmh & 255;\n      b2[i++] = tmh >>> 24 & 15 | 16;\n      b2[i++] = tmh >>> 16 & 255;\n      b2[i++] = clockseq >>> 8 | 128;\n      b2[i++] = clockseq & 255;\n      var node = options.node || _nodeId;\n      for (var n2 = 0; n2 < 6; n2++) {\n        b2[i + n2] = node[n2];\n      }\n      return buf ? buf : unparse(b2);\n    }\n    function v4(options, buf, offset) {\n      var i = buf && offset || 0;\n      if (typeof options == 'string') {\n        buf = options == 'binary' ? new BufferClass(16) : null;\n        options = null;\n      }\n      options = options || {};\n      var rnds = options.random || (options.rng || _rng)();\n      rnds[6] = rnds[6] & 15 | 64;\n      rnds[8] = rnds[8] & 63 | 128;\n      if (buf) {\n        for (var ii = 0; ii < 16; ii++) {\n          buf[i + ii] = rnds[ii];\n        }\n      }\n      return buf || unparse(rnds);\n    }\n    uuid = v4;\n    uuid.v1 = v1;\n    uuid.v4 = v4;\n    uuid.parse = parse;\n    uuid.unparse = unparse;\n    uuid.BufferClass = BufferClass;\n    axe._uuid = v1();\n    var uuid_default = v4;\n    var errorTypes = Object.freeze([ 'EvalError', 'RangeError', 'ReferenceError', 'SyntaxError', 'TypeError', 'URIError' ]);\n    function stringifyMessage(_ref3) {\n      var topic = _ref3.topic, channelId = _ref3.channelId, message = _ref3.message, messageId = _ref3.messageId, keepalive = _ref3.keepalive;\n      var data = {\n        channelId: channelId,\n        topic: topic,\n        messageId: messageId,\n        keepalive: !!keepalive,\n        source: getSource2()\n      };\n      if (message instanceof Error) {\n        data.error = {\n          name: message.name,\n          message: message.message,\n          stack: message.stack\n        };\n      } else {\n        data.payload = message;\n      }\n      return JSON.stringify(data);\n    }\n    function parseMessage(dataString) {\n      var data;\n      try {\n        data = JSON.parse(dataString);\n      } catch (_unused) {\n        return;\n      }\n      if (!isRespondableMessage(data)) {\n        return;\n      }\n      var _data2 = data, topic = _data2.topic, channelId = _data2.channelId, messageId = _data2.messageId, keepalive = _data2.keepalive;\n      var message = _typeof(data.error) === 'object' ? buildErrorObject(data.error) : data.payload;\n      return {\n        topic: topic,\n        message: message,\n        messageId: messageId,\n        channelId: channelId,\n        keepalive: !!keepalive\n      };\n    }\n    function isRespondableMessage(postedMessage) {\n      return postedMessage !== null && _typeof(postedMessage) === 'object' && typeof postedMessage.channelId === 'string' && postedMessage.source === getSource2();\n    }\n    function buildErrorObject(error) {\n      var msg = error.message || 'Unknown error occurred';\n      var errorName = errorTypes.includes(error.name) ? error.name : 'Error';\n      var ErrConstructor = window[errorName] || Error;\n      if (error.stack) {\n        msg += '\\n' + error.stack.replace(error.message, '');\n      }\n      return new ErrConstructor(msg);\n    }\n    function getSource2() {\n      var application = 'axeAPI';\n      var version = '';\n      if (typeof axe !== 'undefined' && axe._audit && axe._audit.application) {\n        application = axe._audit.application;\n      }\n      if (typeof axe !== 'undefined') {\n        version = axe.version;\n      }\n      return application + '.' + version;\n    }\n    function assertIsParentWindow(win) {\n      assetNotGlobalWindow(win);\n      assert_default(window.parent === win, 'Source of the response must be the parent window.');\n    }\n    function assertIsFrameWindow(win) {\n      assetNotGlobalWindow(win);\n      assert_default(win.parent === window, 'Respondable target must be a frame in the current window');\n    }\n    function assetNotGlobalWindow(win) {\n      assert_default(window !== win, 'Messages can not be sent to the same window.');\n    }\n    var channels = {};\n    function storeReplyHandler(channelId, replyHandler) {\n      var sendToParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      assert_default(!channels[channelId], 'A replyHandler already exists for this message channel.');\n      channels[channelId] = {\n        replyHandler: replyHandler,\n        sendToParent: sendToParent\n      };\n    }\n    function getReplyHandler(channelId) {\n      return channels[channelId];\n    }\n    function deleteReplyHandler(channelId) {\n      delete channels[channelId];\n    }\n    var messageIds = [];\n    function createMessageId() {\n      var uuid2 = ''.concat(v4(), ':').concat(v4());\n      if (messageIds.includes(uuid2)) {\n        return createMessageId();\n      }\n      messageIds.push(uuid2);\n      return uuid2;\n    }\n    function isNewMessage(uuid2) {\n      if (messageIds.includes(uuid2)) {\n        return false;\n      }\n      messageIds.push(uuid2);\n      return true;\n    }\n    function postMessage(win, data, sendToParent, replyHandler) {\n      sendToParent ? assertIsParentWindow(win) : assertIsFrameWindow(win);\n      if (data.message instanceof Error && !sendToParent) {\n        axe.log(data.message);\n        return false;\n      }\n      var dataString = stringifyMessage(_extends({\n        messageId: createMessageId()\n      }, data));\n      var allowedOrigins = axe._audit.allowedOrigins;\n      if (!allowedOrigins || !allowedOrigins.length) {\n        return false;\n      }\n      if (typeof replyHandler === 'function') {\n        storeReplyHandler(data.channelId, replyHandler, sendToParent);\n      }\n      allowedOrigins.forEach(function(origin) {\n        try {\n          win.postMessage(dataString, origin);\n        } catch (err2) {\n          if (err2 instanceof win.DOMException) {\n            throw new Error('allowedOrigins value \"'.concat(origin, '\" is not a valid origin'));\n          }\n          throw err2;\n        }\n      });\n      return true;\n    }\n    function processError(win, error, channelId) {\n      if (!win.parent !== window) {\n        return axe.log(error);\n      }\n      try {\n        postMessage(win, {\n          topic: null,\n          channelId: channelId,\n          message: error,\n          messageId: createMessageId(),\n          keepalive: true\n        }, true);\n      } catch (err2) {\n        return axe.log(err2);\n      }\n    }\n    function createResponder(win, channelId) {\n      var sendToParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return function respond(message, keepalive, replyHandler) {\n        var data = {\n          channelId: channelId,\n          message: message,\n          keepalive: keepalive\n        };\n        postMessage(win, data, sendToParent, replyHandler);\n      };\n    }\n    function originIsAllowed(origin) {\n      var allowedOrigins = axe._audit.allowedOrigins;\n      return allowedOrigins && allowedOrigins.includes('*') || allowedOrigins.includes(origin);\n    }\n    function messageHandler(_ref4, topicHandler) {\n      var origin = _ref4.origin, dataString = _ref4.data, win = _ref4.source;\n      try {\n        var data = parseMessage(dataString) || {};\n        var channelId = data.channelId, message = data.message, messageId = data.messageId;\n        if (!originIsAllowed(origin) || !isNewMessage(messageId)) {\n          return;\n        }\n        if (message instanceof Error && win.parent !== window) {\n          axe.log(message);\n          return false;\n        }\n        try {\n          if (data.topic) {\n            var responder = createResponder(win, channelId);\n            assertIsParentWindow(win);\n            topicHandler(data, responder);\n          } else {\n            callReplyHandler(win, data);\n          }\n        } catch (error) {\n          processError(win, error, channelId);\n        }\n      } catch (error) {\n        axe.log(error);\n        return false;\n      }\n    }\n    function callReplyHandler(win, data) {\n      var channelId = data.channelId, message = data.message, keepalive = data.keepalive;\n      var _ref5 = getReplyHandler(channelId) || {}, replyHandler = _ref5.replyHandler, sendToParent = _ref5.sendToParent;\n      if (!replyHandler) {\n        return;\n      }\n      sendToParent ? assertIsParentWindow(win) : assertIsFrameWindow(win);\n      var responder = createResponder(win, channelId, sendToParent);\n      if (!keepalive && channelId) {\n        deleteReplyHandler(channelId);\n      }\n      try {\n        replyHandler(message, keepalive, responder);\n      } catch (error) {\n        axe.log(error);\n        responder(error, keepalive);\n      }\n    }\n    var frameMessenger = {\n      open: function open(topicHandler) {\n        if (typeof window.addEventListener !== 'function') {\n          return;\n        }\n        var handler = function handler(messageEvent) {\n          messageHandler(messageEvent, topicHandler);\n        };\n        window.addEventListener('message', handler, false);\n        return function() {\n          window.removeEventListener('message', handler, false);\n        };\n      },\n      post: function post(win, data, replyHandler) {\n        if (typeof window.addEventListener !== 'function') {\n          return false;\n        }\n        return postMessage(win, data, false, replyHandler);\n      }\n    };\n    function setDefaultFrameMessenger(respondable2) {\n      respondable2.updateMessenger(frameMessenger);\n    }\n    var closeHandler;\n    var postMessage2;\n    var topicHandlers = {};\n    function _respondable(win, topic, message, keepalive, replyHandler) {\n      var data = {\n        topic: topic,\n        message: message,\n        channelId: ''.concat(v4(), ':').concat(v4()),\n        keepalive: keepalive\n      };\n      return postMessage2(win, data, replyHandler);\n    }\n    function messageListener(data, responder) {\n      var topic = data.topic, message = data.message, keepalive = data.keepalive;\n      var topicHandler = topicHandlers[topic];\n      if (!topicHandler) {\n        return;\n      }\n      try {\n        topicHandler(message, keepalive, responder);\n      } catch (error) {\n        axe.log(error);\n        responder(error, keepalive);\n      }\n    }\n    _respondable.updateMessenger = function updateMessenger(_ref6) {\n      var open = _ref6.open, post = _ref6.post;\n      assert_default(typeof open === 'function', 'open callback must be a function');\n      assert_default(typeof post === 'function', 'post callback must be a function');\n      if (closeHandler) {\n        closeHandler();\n      }\n      var close = open(messageListener);\n      if (close) {\n        assert_default(typeof close === 'function', 'open callback must return a cleanup function');\n        closeHandler = close;\n      } else {\n        closeHandler = null;\n      }\n      postMessage2 = post;\n    };\n    _respondable.subscribe = function subscribe(topic, topicHandler) {\n      assert_default(typeof topicHandler === 'function', 'Subscriber callback must be a function');\n      assert_default(!topicHandlers[topic], 'Topic '.concat(topic, ' is already registered to.'));\n      topicHandlers[topic] = topicHandler;\n    };\n    _respondable.isInFrame = function isInFrame() {\n      var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n      return !!win.frameElement;\n    };\n    setDefaultFrameMessenger(_respondable);\n    function _sendCommandToFrame(node, parameters, resolve, reject) {\n      var _parameters$options$p, _parameters$options;\n      var win = node.contentWindow;\n      var pingWaitTime = (_parameters$options$p = (_parameters$options = parameters.options) === null || _parameters$options === void 0 ? void 0 : _parameters$options.pingWaitTime) !== null && _parameters$options$p !== void 0 ? _parameters$options$p : 500;\n      if (!win) {\n        log_default('Frame does not have a content window', node);\n        resolve(null);\n        return;\n      }\n      if (pingWaitTime === 0) {\n        callAxeStart(node, parameters, resolve, reject);\n        return;\n      }\n      var timeout = setTimeout(function() {\n        timeout = setTimeout(function() {\n          if (!parameters.debug) {\n            resolve(null);\n          } else {\n            reject(err('No response from frame', node));\n          }\n        }, 0);\n      }, pingWaitTime);\n      _respondable(win, 'axe.ping', null, void 0, function() {\n        clearTimeout(timeout);\n        callAxeStart(node, parameters, resolve, reject);\n      });\n    }\n    function callAxeStart(node, parameters, resolve, reject) {\n      var _parameters$options$f, _parameters$options2;\n      var frameWaitTime = (_parameters$options$f = (_parameters$options2 = parameters.options) === null || _parameters$options2 === void 0 ? void 0 : _parameters$options2.frameWaitTime) !== null && _parameters$options$f !== void 0 ? _parameters$options$f : 6e4;\n      var win = node.contentWindow;\n      var timeout = setTimeout(function collectResultFramesTimeout() {\n        reject(err('Axe in frame timed out', node));\n      }, frameWaitTime);\n      _respondable(win, 'axe.start', parameters, void 0, function(data) {\n        clearTimeout(timeout);\n        if (data instanceof Error === false) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    }\n    function err(message, node) {\n      var selector;\n      if (axe._tree) {\n        selector = get_selector_default(node);\n      }\n      return new Error(message + ': ' + (selector || node));\n    }\n    var customSerializer = null;\n    var nodeSerializer = {\n      update: function update(serializer) {\n        assert_default(_typeof(serializer) === 'object', 'serializer must be an object');\n        customSerializer = serializer;\n      },\n      toSpec: function toSpec(node) {\n        return nodeSerializer.dqElmToSpec(new dq_element_default(node));\n      },\n      dqElmToSpec: function dqElmToSpec(dqElm, runOptions) {\n        var _customSerializer;\n        if (dqElm instanceof dq_element_default === false) {\n          return dqElm;\n        }\n        if (runOptions) {\n          dqElm = cloneLimitedDqElement(dqElm, runOptions);\n        }\n        if (typeof ((_customSerializer = customSerializer) === null || _customSerializer === void 0 ? void 0 : _customSerializer.toSpec) === 'function') {\n          return customSerializer.toSpec(dqElm);\n        }\n        return dqElm.toJSON();\n      },\n      mergeSpecs: function mergeSpecs(nodeSpec, parentFrameSpec) {\n        var _customSerializer2;\n        if (typeof ((_customSerializer2 = customSerializer) === null || _customSerializer2 === void 0 ? void 0 : _customSerializer2.mergeSpecs) === 'function') {\n          return customSerializer.mergeSpecs(nodeSpec, parentFrameSpec);\n        }\n        return dq_element_default.mergeSpecs(nodeSpec, parentFrameSpec);\n      },\n      mapRawResults: function mapRawResults(rawResults) {\n        return rawResults.map(function(rawResult) {\n          return _extends({}, rawResult, {\n            nodes: nodeSerializer.mapRawNodeResults(rawResult.nodes)\n          });\n        });\n      },\n      mapRawNodeResults: function mapRawNodeResults(nodeResults) {\n        return nodeResults === null || nodeResults === void 0 ? void 0 : nodeResults.map(function(_ref7) {\n          var node = _ref7.node, nodeResult = _objectWithoutProperties(_ref7, _excluded);\n          nodeResult.node = nodeSerializer.dqElmToSpec(node);\n          for (var _i2 = 0, _arr = [ 'any', 'all', 'none' ]; _i2 < _arr.length; _i2++) {\n            var type2 = _arr[_i2];\n            nodeResult[type2] = nodeResult[type2].map(function(_ref8) {\n              var relatedNodes = _ref8.relatedNodes, checkResult = _objectWithoutProperties(_ref8, _excluded2);\n              checkResult.relatedNodes = relatedNodes.map(nodeSerializer.dqElmToSpec);\n              return checkResult;\n            });\n          }\n          return nodeResult;\n        });\n      }\n    };\n    var node_serializer_default = nodeSerializer;\n    function cloneLimitedDqElement(dqElm, runOptions) {\n      var fromFrame2 = dqElm.fromFrame;\n      var hasAncestry = runOptions.ancestry, hasXpath = runOptions.xpath;\n      var hasSelectors = runOptions.selectors !== false || fromFrame2;\n      dqElm = new dq_element_default(dqElm.element, runOptions, {\n        source: dqElm.source,\n        nodeIndexes: dqElm.nodeIndexes,\n        selector: hasSelectors ? dqElm.selector : [ ':root' ],\n        ancestry: hasAncestry ? dqElm.ancestry : [ ':root' ],\n        xpath: hasXpath ? dqElm.xpath : '/'\n      });\n      dqElm.fromFrame = fromFrame2;\n      return dqElm;\n    }\n    function getAllChecks(object) {\n      var result = [];\n      return result.concat(object.any || []).concat(object.all || []).concat(object.none || []);\n    }\n    var get_all_checks_default = getAllChecks;\n    function findBy(array, key, value) {\n      if (Array.isArray(array)) {\n        return array.find(function(obj) {\n          return obj !== null && _typeof(obj) === 'object' && Object.hasOwn(obj, key) && obj[key] === value;\n        });\n      }\n    }\n    var find_by_default = findBy;\n    function pushFrame(resultSet, options, frameSpec) {\n      resultSet.forEach(function(res) {\n        res.node = node_serializer_default.mergeSpecs(res.node, frameSpec);\n        var checks = get_all_checks_default(res);\n        checks.forEach(function(check) {\n          check.relatedNodes = check.relatedNodes.map(function(node) {\n            return node_serializer_default.mergeSpecs(node, frameSpec);\n          });\n        });\n      });\n    }\n    function spliceNodes(target, to2) {\n      var firstFromFrame = to2[0].node;\n      var node;\n      for (var _i3 = 0; _i3 < target.length; _i3++) {\n        node = target[_i3].node;\n        var resultSort = nodeIndexSort(node.nodeIndexes, firstFromFrame.nodeIndexes);\n        if (resultSort > 0 || resultSort === 0 && firstFromFrame.selector.length < node.selector.length) {\n          target.splice.apply(target, [ _i3, 0 ].concat(_toConsumableArray(to2)));\n          return;\n        }\n      }\n      target.push.apply(target, _toConsumableArray(to2));\n    }\n    function normalizeResult(result) {\n      if (!result || !result.results) {\n        return null;\n      }\n      if (!Array.isArray(result.results)) {\n        return [ result.results ];\n      }\n      if (!result.results.length) {\n        return null;\n      }\n      return result.results;\n    }\n    function mergeResults(frameResults, options) {\n      var mergedResult = [];\n      frameResults.forEach(function(frameResult) {\n        var results = normalizeResult(frameResult);\n        if (!results || !results.length) {\n          return;\n        }\n        var frameSpec = getFrameSpec(frameResult);\n        results.forEach(function(ruleResult) {\n          if (ruleResult.nodes && frameSpec) {\n            pushFrame(ruleResult.nodes, options, frameSpec);\n          }\n          var res = find_by_default(mergedResult, 'id', ruleResult.id);\n          if (!res) {\n            mergedResult.push(ruleResult);\n          } else {\n            if (ruleResult.nodes.length) {\n              spliceNodes(res.nodes, ruleResult.nodes);\n            }\n          }\n        });\n      });\n      mergedResult.forEach(function(result) {\n        if (result.nodes) {\n          result.nodes.sort(function(nodeA, nodeB) {\n            return nodeIndexSort(nodeA.node.nodeIndexes, nodeB.node.nodeIndexes);\n          });\n        }\n      });\n      return mergedResult;\n    }\n    function nodeIndexSort() {\n      var nodeIndexesA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var nodeIndexesB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var length = Math.max(nodeIndexesA === null || nodeIndexesA === void 0 ? void 0 : nodeIndexesA.length, nodeIndexesB === null || nodeIndexesB === void 0 ? void 0 : nodeIndexesB.length);\n      for (var _i4 = 0; _i4 < length; _i4++) {\n        var indexA = nodeIndexesA === null || nodeIndexesA === void 0 ? void 0 : nodeIndexesA[_i4];\n        var indexB = nodeIndexesB === null || nodeIndexesB === void 0 ? void 0 : nodeIndexesB[_i4];\n        if (typeof indexA !== 'number' || isNaN(indexA)) {\n          return _i4 === 0 ? 1 : -1;\n        }\n        if (typeof indexB !== 'number' || isNaN(indexB)) {\n          return _i4 === 0 ? -1 : 1;\n        }\n        if (indexA !== indexB) {\n          return indexA - indexB;\n        }\n      }\n      return 0;\n    }\n    var merge_results_default = mergeResults;\n    function getFrameSpec(frameResult) {\n      if (frameResult.frameElement) {\n        return node_serializer_default.toSpec(frameResult.frameElement);\n      } else if (frameResult.frameSpec) {\n        return frameResult.frameSpec;\n      }\n      return null;\n    }\n    function _collectResultsFromFrames(parentContent, options, command, parameter, resolve, reject) {\n      options = _extends({}, options, {\n        elementRef: false\n      });\n      var q = queue_default();\n      var frames = parentContent.frames;\n      frames.forEach(function(_ref9) {\n        var frameElement = _ref9.node, context = _objectWithoutProperties(_ref9, _excluded3);\n        q.defer(function(res, rej) {\n          var params = {\n            options: options,\n            command: command,\n            parameter: parameter,\n            context: context\n          };\n          function callback(results) {\n            if (!results) {\n              return res(null);\n            }\n            return res({\n              results: results,\n              frameElement: frameElement\n            });\n          }\n          _sendCommandToFrame(frameElement, params, callback, rej);\n        });\n      });\n      q.then(function(data) {\n        resolve(merge_results_default(data, options));\n      })['catch'](reject);\n    }\n    function _contains(vNode, otherVNode) {\n      if (!vNode.shadowId && !otherVNode.shadowId && vNode.actualNode && typeof vNode.actualNode.contains === 'function') {\n        return vNode.actualNode.contains(otherVNode.actualNode);\n      }\n      do {\n        if (vNode === otherVNode) {\n          return true;\n        } else if (otherVNode.nodeIndex < vNode.nodeIndex) {\n          return false;\n        }\n        otherVNode = otherVNode.parent;\n      } while (otherVNode);\n      return false;\n    }\n    function deepMerge() {\n      var target = {};\n      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n      sources.forEach(function(source) {\n        if (!source || _typeof(source) !== 'object' || Array.isArray(source)) {\n          return;\n        }\n        for (var _i5 = 0, _Object$keys = Object.keys(source); _i5 < _Object$keys.length; _i5++) {\n          var key = _Object$keys[_i5];\n          if (!target.hasOwnProperty(key) || _typeof(source[key]) !== 'object' || Array.isArray(target[key])) {\n            target[key] = source[key];\n          } else {\n            target[key] = deepMerge(target[key], source[key]);\n          }\n        }\n      });\n      return target;\n    }\n    var deep_merge_default = deepMerge;\n    function extendMetaData(to2, from) {\n      Object.assign(to2, from);\n      Object.keys(from).filter(function(prop) {\n        return typeof from[prop] === 'function';\n      }).forEach(function(prop) {\n        to2[prop] = null;\n        try {\n          to2[prop] = from[prop](to2);\n        } catch (_unused2) {}\n      });\n    }\n    var extend_meta_data_default = extendMetaData;\n    var possibleShadowRoots = [ 'article', 'aside', 'blockquote', 'body', 'div', 'footer', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'main', 'nav', 'p', 'section', 'span' ];\n    function isShadowRoot(node) {\n      if (node.shadowRoot) {\n        var nodeName2 = node.nodeName.toLowerCase();\n        if (possibleShadowRoots.includes(nodeName2) || /^[a-z][a-z0-9_.-]*-[a-z0-9_.-]*$/.test(nodeName2)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    var is_shadow_root_default = isShadowRoot;\n    var dom_exports = {};\n    __export(dom_exports, {\n      createGrid: function createGrid() {\n        return _createGrid;\n      },\n      findElmsInContext: function findElmsInContext() {\n        return find_elms_in_context_default;\n      },\n      findNearbyElms: function findNearbyElms() {\n        return _findNearbyElms;\n      },\n      findUp: function findUp() {\n        return find_up_default;\n      },\n      findUpVirtual: function findUpVirtual() {\n        return find_up_virtual_default;\n      },\n      focusDisabled: function focusDisabled() {\n        return focus_disabled_default;\n      },\n      getComposedParent: function getComposedParent() {\n        return get_composed_parent_default;\n      },\n      getElementByReference: function getElementByReference() {\n        return get_element_by_reference_default;\n      },\n      getElementCoordinates: function getElementCoordinates() {\n        return get_element_coordinates_default;\n      },\n      getElementStack: function getElementStack() {\n        return get_element_stack_default;\n      },\n      getModalDialog: function getModalDialog() {\n        return get_modal_dialog_default;\n      },\n      getOverflowHiddenAncestors: function getOverflowHiddenAncestors() {\n        return get_overflow_hidden_ancestors_default;\n      },\n      getRootNode: function getRootNode() {\n        return get_root_node_default2;\n      },\n      getScrollOffset: function getScrollOffset() {\n        return get_scroll_offset_default;\n      },\n      getTabbableElements: function getTabbableElements() {\n        return get_tabbable_elements_default;\n      },\n      getTargetRects: function getTargetRects() {\n        return get_target_rects_default;\n      },\n      getTargetSize: function getTargetSize() {\n        return get_target_size_default;\n      },\n      getTextElementStack: function getTextElementStack() {\n        return get_text_element_stack_default;\n      },\n      getViewportSize: function getViewportSize() {\n        return get_viewport_size_default;\n      },\n      getVisibleChildTextRects: function getVisibleChildTextRects() {\n        return get_visible_child_text_rects_default;\n      },\n      hasContent: function hasContent() {\n        return has_content_default;\n      },\n      hasContentVirtual: function hasContentVirtual() {\n        return has_content_virtual_default;\n      },\n      hasLangText: function hasLangText() {\n        return _hasLangText;\n      },\n      idrefs: function idrefs() {\n        return idrefs_default;\n      },\n      insertedIntoFocusOrder: function insertedIntoFocusOrder() {\n        return inserted_into_focus_order_default;\n      },\n      isCurrentPageLink: function isCurrentPageLink() {\n        return _isCurrentPageLink;\n      },\n      isFocusable: function isFocusable() {\n        return _isFocusable;\n      },\n      isHTML5: function isHTML5() {\n        return is_html5_default;\n      },\n      isHiddenForEveryone: function isHiddenForEveryone() {\n        return _isHiddenForEveryone;\n      },\n      isHiddenWithCSS: function isHiddenWithCSS() {\n        return is_hidden_with_css_default;\n      },\n      isInTabOrder: function isInTabOrder() {\n        return _isInTabOrder;\n      },\n      isInTextBlock: function isInTextBlock() {\n        return is_in_text_block_default;\n      },\n      isInert: function isInert() {\n        return _isInert;\n      },\n      isModalOpen: function isModalOpen() {\n        return is_modal_open_default;\n      },\n      isMultiline: function isMultiline() {\n        return _isMultiline;\n      },\n      isNativelyFocusable: function isNativelyFocusable() {\n        return is_natively_focusable_default;\n      },\n      isNode: function isNode() {\n        return is_node_default;\n      },\n      isOffscreen: function isOffscreen() {\n        return is_offscreen_default;\n      },\n      isOpaque: function isOpaque() {\n        return is_opaque_default;\n      },\n      isSkipLink: function isSkipLink() {\n        return _isSkipLink;\n      },\n      isVisible: function isVisible() {\n        return is_visible_default;\n      },\n      isVisibleOnScreen: function isVisibleOnScreen() {\n        return _isVisibleOnScreen;\n      },\n      isVisibleToScreenReaders: function isVisibleToScreenReaders() {\n        return _isVisibleToScreenReaders;\n      },\n      isVisualContent: function isVisualContent() {\n        return is_visual_content_default;\n      },\n      reduceToElementsBelowFloating: function reduceToElementsBelowFloating() {\n        return reduce_to_elements_below_floating_default;\n      },\n      shadowElementsFromPoint: function shadowElementsFromPoint() {\n        return shadow_elements_from_point_default;\n      },\n      urlPropsFromAttribute: function urlPropsFromAttribute() {\n        return url_props_from_attribute_default;\n      },\n      visuallyContains: function visuallyContains() {\n        return _visuallyContains;\n      },\n      visuallyOverlaps: function visuallyOverlaps() {\n        return visually_overlaps_default;\n      },\n      visuallySort: function visuallySort() {\n        return _visuallySort;\n      }\n    });\n    function getRootNode(node) {\n      var doc = node.getRootNode && node.getRootNode() || document;\n      if (doc === node) {\n        doc = document;\n      }\n      return doc;\n    }\n    var get_root_node_default = getRootNode;\n    var get_root_node_default2 = get_root_node_default;\n    function findElmsInContext(_ref10) {\n      var context = _ref10.context, value = _ref10.value, attr = _ref10.attr, _ref10$elm = _ref10.elm, elm = _ref10$elm === void 0 ? '' : _ref10$elm;\n      var root;\n      var escapedValue = escape_selector_default(value);\n      if (context.nodeType === 9 || context.nodeType === 11) {\n        root = context;\n      } else {\n        root = get_root_node_default2(context);\n      }\n      return Array.from(root.querySelectorAll(elm + '[' + attr + '=' + escapedValue + ']'));\n    }\n    var find_elms_in_context_default = findElmsInContext;\n    function findUpVirtual(element, target) {\n      var parent;\n      parent = element.actualNode;\n      if (!element.shadowId && typeof element.actualNode.closest === 'function') {\n        var match = element.actualNode.closest(target);\n        if (match) {\n          return match;\n        }\n        return null;\n      }\n      do {\n        parent = parent.assignedSlot ? parent.assignedSlot : parent.parentNode;\n        if (parent && parent.nodeType === 11) {\n          parent = parent.host;\n        }\n      } while (parent && !element_matches_default(parent, target) && parent !== document.documentElement);\n      if (!parent) {\n        return null;\n      }\n      if (!element_matches_default(parent, target)) {\n        return null;\n      }\n      return parent;\n    }\n    var find_up_virtual_default = findUpVirtual;\n    function findUp(element, target) {\n      return find_up_virtual_default(get_node_from_tree_default(element), target);\n    }\n    var find_up_default = findUp;\n    function _rectsOverlap(rect1, rect2) {\n      return (rect1.left | 0) < (rect2.right | 0) && (rect1.right | 0) > (rect2.left | 0) && (rect1.top | 0) < (rect2.bottom | 0) && (rect1.bottom | 0) > (rect2.top | 0);\n    }\n    var getOverflowHiddenAncestors = memoize_default(function getOverflowHiddenAncestorsMemoized(vNode) {\n      var ancestors = [];\n      if (!vNode) {\n        return ancestors;\n      }\n      var overflow = vNode.getComputedStylePropertyValue('overflow');\n      if (overflow === 'hidden') {\n        ancestors.push(vNode);\n      }\n      return ancestors.concat(getOverflowHiddenAncestors(vNode.parent));\n    });\n    var get_overflow_hidden_ancestors_default = getOverflowHiddenAncestors;\n    var clipRegex = /rect\\s*\\(([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px\\s*\\)/;\n    var clipPathRegex = /(\\w+)\\((\\d+)/;\n    function nativelyHidden(vNode) {\n      return [ 'style', 'script', 'noscript', 'template' ].includes(vNode.props.nodeName);\n    }\n    function displayHidden(vNode) {\n      if (vNode.props.nodeName === 'area') {\n        return false;\n      }\n      return vNode.getComputedStylePropertyValue('display') === 'none';\n    }\n    function visibilityHidden(vNode) {\n      var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, isAncestor = _ref11.isAncestor;\n      return !isAncestor && [ 'hidden', 'collapse' ].includes(vNode.getComputedStylePropertyValue('visibility'));\n    }\n    function contentVisibiltyHidden(vNode) {\n      var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, isAncestor = _ref12.isAncestor;\n      return !!isAncestor && vNode.getComputedStylePropertyValue('content-visibility') === 'hidden';\n    }\n    function ariaHidden(vNode) {\n      return vNode.attr('aria-hidden') === 'true';\n    }\n    function opacityHidden(vNode) {\n      return vNode.getComputedStylePropertyValue('opacity') === '0';\n    }\n    function scrollHidden(vNode) {\n      var scroll = get_scroll_default(vNode.actualNode);\n      var elHeight = parseInt(vNode.getComputedStylePropertyValue('height'));\n      var elWidth = parseInt(vNode.getComputedStylePropertyValue('width'));\n      return !!scroll && (elHeight === 0 || elWidth === 0);\n    }\n    function overflowHidden(vNode) {\n      var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, isAncestor = _ref13.isAncestor;\n      if (isAncestor) {\n        return false;\n      }\n      var position = vNode.getComputedStylePropertyValue('position');\n      if (position === 'fixed') {\n        return false;\n      }\n      var nodes = get_overflow_hidden_ancestors_default(vNode);\n      if (!nodes.length) {\n        return false;\n      }\n      var rect = vNode.boundingClientRect;\n      return nodes.some(function(node) {\n        if (position === 'absolute' && !hasPositionedAncestorBetween(vNode, node) && node.getComputedStylePropertyValue('position') === 'static') {\n          return false;\n        }\n        var nodeRect = node.boundingClientRect;\n        if (nodeRect.width < 2 || nodeRect.height < 2) {\n          return true;\n        }\n        return !_rectsOverlap(rect, nodeRect);\n      });\n    }\n    function clipHidden(vNode) {\n      var matchesClip = vNode.getComputedStylePropertyValue('clip').match(clipRegex);\n      var matchesClipPath = vNode.getComputedStylePropertyValue('clip-path').match(clipPathRegex);\n      if (matchesClip && matchesClip.length === 5) {\n        var position = vNode.getComputedStylePropertyValue('position');\n        if ([ 'fixed', 'absolute' ].includes(position)) {\n          return matchesClip[3] - matchesClip[1] <= 0 && matchesClip[2] - matchesClip[4] <= 0;\n        }\n      }\n      if (matchesClipPath) {\n        var type2 = matchesClipPath[1];\n        var value = parseInt(matchesClipPath[2], 10);\n        switch (type2) {\n         case 'inset':\n          return value >= 50;\n\n         case 'circle':\n          return value === 0;\n\n         default:\n        }\n      }\n      return false;\n    }\n    function areaHidden(vNode, visibleFunction) {\n      var mapEl = closest_default(vNode, 'map');\n      if (!mapEl) {\n        return true;\n      }\n      var mapElName = mapEl.attr('name');\n      if (!mapElName) {\n        return true;\n      }\n      var mapElRootNode = get_root_node_default(vNode.actualNode);\n      if (!mapElRootNode || mapElRootNode.nodeType !== 9) {\n        return true;\n      }\n      var refs = query_selector_all_default(axe._tree, 'img[usemap=\"#'.concat(escape_selector_default(mapElName), '\"]'));\n      if (!refs || !refs.length) {\n        return true;\n      }\n      return refs.some(function(ref) {\n        return !visibleFunction(ref);\n      });\n    }\n    function detailsHidden(vNode) {\n      var _vNode$parent;\n      if (((_vNode$parent = vNode.parent) === null || _vNode$parent === void 0 ? void 0 : _vNode$parent.props.nodeName) !== 'details') {\n        return false;\n      }\n      if (vNode.props.nodeName === 'summary') {\n        var firstSummary = vNode.parent.children.find(function(node) {\n          return node.props.nodeName === 'summary';\n        });\n        if (firstSummary === vNode) {\n          return false;\n        }\n      }\n      return !vNode.parent.hasAttr('open');\n    }\n    function hasPositionedAncestorBetween(child, ancestor) {\n      var node = child.parent;\n      while (node && node !== ancestor) {\n        if ([ 'relative', 'sticky' ].includes(node.getComputedStylePropertyValue('position'))) {\n          return true;\n        }\n        node = node.parent;\n      }\n      return false;\n    }\n    var hiddenMethods = [ displayHidden, visibilityHidden, contentVisibiltyHidden, detailsHidden ];\n    function _isHiddenForEveryone(vNode) {\n      var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, skipAncestors = _ref14.skipAncestors, _ref14$isAncestor = _ref14.isAncestor, isAncestor = _ref14$isAncestor === void 0 ? false : _ref14$isAncestor;\n      vNode = _nodeLookup(vNode).vNode;\n      if (skipAncestors) {\n        return isHiddenSelf(vNode, isAncestor);\n      }\n      return isHiddenAncestors(vNode, isAncestor);\n    }\n    var isHiddenSelf = memoize_default(function isHiddenSelfMemoized(vNode, isAncestor) {\n      if (nativelyHidden(vNode)) {\n        return true;\n      }\n      if (!vNode.actualNode) {\n        return false;\n      }\n      if (hiddenMethods.some(function(method) {\n        return method(vNode, {\n          isAncestor: isAncestor\n        });\n      })) {\n        return true;\n      }\n      if (!vNode.actualNode.isConnected) {\n        return true;\n      }\n      return false;\n    });\n    var isHiddenAncestors = memoize_default(function isHiddenAncestorsMemoized(vNode, isAncestor) {\n      if (isHiddenSelf(vNode, isAncestor)) {\n        return true;\n      }\n      if (!vNode.parent) {\n        return false;\n      }\n      return isHiddenAncestors(vNode.parent, true);\n    });\n    function getComposedParent(element) {\n      if (element.assignedSlot) {\n        return getComposedParent(element.assignedSlot);\n      } else if (element.parentNode) {\n        var parentNode = element.parentNode;\n        if (parentNode.nodeType === 1) {\n          return parentNode;\n        } else if (parentNode.host) {\n          return parentNode.host;\n        }\n      }\n      return null;\n    }\n    var get_composed_parent_default = getComposedParent;\n    function getScrollOffset(element) {\n      if (!element.nodeType && element.document) {\n        element = element.document;\n      }\n      if (element.nodeType === 9) {\n        var docElement = element.documentElement, body = element.body;\n        return {\n          left: docElement && docElement.scrollLeft || body && body.scrollLeft || 0,\n          top: docElement && docElement.scrollTop || body && body.scrollTop || 0\n        };\n      }\n      return {\n        left: element.scrollLeft,\n        top: element.scrollTop\n      };\n    }\n    var get_scroll_offset_default = getScrollOffset;\n    function getElementCoordinates(element) {\n      var scrollOffset = get_scroll_offset_default(document), xOffset = scrollOffset.left, yOffset = scrollOffset.top, coords = element.getBoundingClientRect();\n      return {\n        top: coords.top + yOffset,\n        right: coords.right + xOffset,\n        bottom: coords.bottom + yOffset,\n        left: coords.left + xOffset,\n        width: coords.right - coords.left,\n        height: coords.bottom - coords.top\n      };\n    }\n    var get_element_coordinates_default = getElementCoordinates;\n    function getViewportSize(win) {\n      var doc = win.document;\n      var docElement = doc.documentElement;\n      if (win.innerWidth) {\n        return {\n          width: win.innerWidth,\n          height: win.innerHeight\n        };\n      }\n      if (docElement) {\n        return {\n          width: docElement.clientWidth,\n          height: docElement.clientHeight\n        };\n      }\n      var body = doc.body;\n      return {\n        width: body.clientWidth,\n        height: body.clientHeight\n      };\n    }\n    var get_viewport_size_default = getViewportSize;\n    function noParentScrolled(element, offset) {\n      element = get_composed_parent_default(element);\n      while (element && element.nodeName.toLowerCase() !== 'html') {\n        if (element.scrollTop) {\n          offset += element.scrollTop;\n          if (offset >= 0) {\n            return false;\n          }\n        }\n        element = get_composed_parent_default(element);\n      }\n      return true;\n    }\n    function isOffscreen(element) {\n      var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, isAncestor = _ref15.isAncestor;\n      if (isAncestor) {\n        return false;\n      }\n      var _nodeLookup2 = _nodeLookup(element), domNode = _nodeLookup2.domNode;\n      if (!domNode) {\n        return void 0;\n      }\n      var leftBoundary;\n      var docElement = document.documentElement;\n      var styl = window.getComputedStyle(domNode);\n      var dir = window.getComputedStyle(document.body || docElement).getPropertyValue('direction');\n      var coords = get_element_coordinates_default(domNode);\n      if (coords.bottom < 0 && (noParentScrolled(domNode, coords.bottom) || styl.position === 'absolute')) {\n        return true;\n      }\n      if (coords.left === 0 && coords.right === 0) {\n        return false;\n      }\n      if (dir === 'ltr') {\n        if (coords.right <= 0) {\n          return true;\n        }\n      } else {\n        leftBoundary = Math.max(docElement.scrollWidth, get_viewport_size_default(window).width);\n        if (coords.left >= leftBoundary) {\n          return true;\n        }\n      }\n      return false;\n    }\n    var is_offscreen_default = isOffscreen;\n    var hiddenMethods2 = [ opacityHidden, scrollHidden, overflowHidden, clipHidden, is_offscreen_default ];\n    function _isVisibleOnScreen(vNode) {\n      vNode = _nodeLookup(vNode).vNode;\n      return isVisibleOnScreenVirtual(vNode);\n    }\n    var isVisibleOnScreenVirtual = memoize_default(function isVisibleOnScreenMemoized(vNode, isAncestor) {\n      if (vNode.actualNode && vNode.props.nodeName === 'area') {\n        return !areaHidden(vNode, isVisibleOnScreenVirtual);\n      }\n      if (_isHiddenForEveryone(vNode, {\n        skipAncestors: true,\n        isAncestor: isAncestor\n      })) {\n        return false;\n      }\n      if (vNode.actualNode && hiddenMethods2.some(function(method) {\n        return method(vNode, {\n          isAncestor: isAncestor\n        });\n      })) {\n        return false;\n      }\n      if (!vNode.parent) {\n        return true;\n      }\n      return isVisibleOnScreenVirtual(vNode.parent, true);\n    });\n    function _getBoundingRect(rectA, rectB) {\n      var top = Math.min(rectA.top, rectB.top);\n      var right = Math.max(rectA.right, rectB.right);\n      var bottom = Math.max(rectA.bottom, rectB.bottom);\n      var left = Math.min(rectA.left, rectB.left);\n      return new window.DOMRect(left, top, right - left, bottom - top);\n    }\n    function _isPointInRect(_ref16, _ref17) {\n      var x = _ref16.x, y = _ref16.y;\n      var top = _ref17.top, right = _ref17.right, bottom = _ref17.bottom, left = _ref17.left;\n      return y >= top && x <= right && y <= bottom && x >= left;\n    }\n    var math_exports = {};\n    __export(math_exports, {\n      getBoundingRect: function getBoundingRect() {\n        return _getBoundingRect;\n      },\n      getIntersectionRect: function getIntersectionRect() {\n        return _getIntersectionRect;\n      },\n      getOffset: function getOffset() {\n        return _getOffset;\n      },\n      getRectCenter: function getRectCenter() {\n        return _getRectCenter;\n      },\n      hasVisualOverlap: function hasVisualOverlap() {\n        return _hasVisualOverlap;\n      },\n      isPointInRect: function isPointInRect() {\n        return _isPointInRect;\n      },\n      rectHasMinimumSize: function rectHasMinimumSize() {\n        return _rectHasMinimumSize;\n      },\n      rectsOverlap: function rectsOverlap() {\n        return _rectsOverlap;\n      },\n      splitRects: function splitRects() {\n        return _splitRects;\n      }\n    });\n    function _getIntersectionRect(rect1, rect2) {\n      var leftX = Math.max(rect1.left, rect2.left);\n      var rightX = Math.min(rect1.right, rect2.right);\n      var topY = Math.max(rect1.top, rect2.top);\n      var bottomY = Math.min(rect1.bottom, rect2.bottom);\n      if (leftX >= rightX || topY >= bottomY) {\n        return null;\n      }\n      return new window.DOMRect(leftX, topY, rightX - leftX, bottomY - topY);\n    }\n    function _getRectCenter(_ref18) {\n      var left = _ref18.left, top = _ref18.top, width = _ref18.width, height = _ref18.height;\n      return new window.DOMPoint(left + width / 2, top + height / 2);\n    }\n    var roundingMargin = .05;\n    function _rectHasMinimumSize(minSize, _ref19) {\n      var width = _ref19.width, height = _ref19.height;\n      return width + roundingMargin >= minSize && height + roundingMargin >= minSize;\n    }\n    function _getOffset(vTarget, vNeighbor) {\n      var minRadiusNeighbour = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;\n      var targetRects = get_target_rects_default(vTarget);\n      var neighborRects = get_target_rects_default(vNeighbor);\n      if (!targetRects.length || !neighborRects.length) {\n        return null;\n      }\n      var targetBoundingBox = targetRects.reduce(_getBoundingRect);\n      var targetCenter = _getRectCenter(targetBoundingBox);\n      var minDistance = Infinity;\n      var _iterator2 = _createForOfIteratorHelper(neighborRects), _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {\n          var rect = _step2.value;\n          if (_isPointInRect(targetCenter, rect)) {\n            return 0;\n          }\n          var closestPoint = getClosestPoint(targetCenter, rect);\n          var distance2 = pointDistance(targetCenter, closestPoint);\n          minDistance = Math.min(minDistance, distance2);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var neighborTargetSize = get_target_size_default(vNeighbor);\n      if (_rectHasMinimumSize(minRadiusNeighbour * 2, neighborTargetSize)) {\n        return minDistance;\n      }\n      var neighborBoundingBox = neighborRects.reduce(_getBoundingRect);\n      var neighborCenter = _getRectCenter(neighborBoundingBox);\n      var centerDistance = pointDistance(targetCenter, neighborCenter) - minRadiusNeighbour;\n      return Math.max(0, Math.min(minDistance, centerDistance));\n    }\n    function getClosestPoint(point, rect) {\n      var x;\n      var y;\n      if (point.x < rect.left) {\n        x = rect.left;\n      } else if (point.x > rect.right) {\n        x = rect.right;\n      } else {\n        x = point.x;\n      }\n      if (point.y < rect.top) {\n        y = rect.top;\n      } else if (point.y > rect.bottom) {\n        y = rect.bottom;\n      } else {\n        y = point.y;\n      }\n      return {\n        x: x,\n        y: y\n      };\n    }\n    function pointDistance(pointA, pointB) {\n      return Math.hypot(pointA.x - pointB.x, pointA.y - pointB.y);\n    }\n    function _hasVisualOverlap(vNodeA, vNodeB) {\n      var rectA = vNodeA.boundingClientRect;\n      var rectB = vNodeB.boundingClientRect;\n      if (rectA.left >= rectB.right || rectA.right <= rectB.left || rectA.top >= rectB.bottom || rectA.bottom <= rectB.top) {\n        return false;\n      }\n      return _visuallySort(vNodeA, vNodeB) > 0;\n    }\n    function _splitRects(outerRect, overlapRects) {\n      var uniqueRects = [ outerRect ];\n      var _iterator3 = _createForOfIteratorHelper(overlapRects), _step3;\n      try {\n        var _loop3 = function _loop3() {\n          var overlapRect = _step3.value;\n          uniqueRects = uniqueRects.reduce(function(rects, inputRect) {\n            return rects.concat(splitRect(inputRect, overlapRect));\n          }, []);\n          if (uniqueRects.length > 4e3) {\n            throw new Error('splitRects: Too many rects');\n          }\n        };\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {\n          _loop3();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return uniqueRects;\n    }\n    function splitRect(inputRect, clipRect) {\n      var top = inputRect.top, left = inputRect.left, bottom = inputRect.bottom, right = inputRect.right;\n      var yAligned = top < clipRect.bottom && bottom > clipRect.top;\n      var xAligned = left < clipRect.right && right > clipRect.left;\n      var rects = [];\n      if (between(clipRect.top, top, bottom) && xAligned) {\n        rects.push({\n          top: top,\n          left: left,\n          bottom: clipRect.top,\n          right: right\n        });\n      }\n      if (between(clipRect.right, left, right) && yAligned) {\n        rects.push({\n          top: top,\n          left: clipRect.right,\n          bottom: bottom,\n          right: right\n        });\n      }\n      if (between(clipRect.bottom, top, bottom) && xAligned) {\n        rects.push({\n          top: clipRect.bottom,\n          right: right,\n          bottom: bottom,\n          left: left\n        });\n      }\n      if (between(clipRect.left, left, right) && yAligned) {\n        rects.push({\n          top: top,\n          left: left,\n          bottom: bottom,\n          right: clipRect.left\n        });\n      }\n      if (rects.length === 0) {\n        if (isEnclosedRect(inputRect, clipRect)) {\n          return [];\n        }\n        rects.push(inputRect);\n      }\n      return rects.map(computeRect);\n    }\n    var between = function between(num, min, max2) {\n      return num > min && num < max2;\n    };\n    function computeRect(baseRect) {\n      return new window.DOMRect(baseRect.left, baseRect.top, baseRect.right - baseRect.left, baseRect.bottom - baseRect.top);\n    }\n    function isEnclosedRect(rectA, rectB) {\n      return rectA.top >= rectB.top && rectA.left >= rectB.left && rectA.bottom <= rectB.bottom && rectA.right <= rectB.right;\n    }\n    var ROOT_LEVEL = 0;\n    var DEFAULT_LEVEL = .1;\n    var FLOAT_LEVEL = .2;\n    var POSITION_LEVEL = .3;\n    var nodeIndex = 0;\n    function _createGrid() {\n      var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;\n      var rootGrid = arguments.length > 1 ? arguments[1] : undefined;\n      var parentVNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (cache_default.get('gridCreated') && !parentVNode) {\n        return constants_default.gridSize;\n      }\n      cache_default.set('gridCreated', true);\n      if (!parentVNode) {\n        var _rootGrid;\n        var vNode = get_node_from_tree_default(document.documentElement);\n        if (!vNode) {\n          vNode = new virtual_node_default(document.documentElement);\n        }\n        nodeIndex = 0;\n        vNode._stackingOrder = [ createStackingContext(ROOT_LEVEL, nodeIndex++, null) ];\n        (_rootGrid = rootGrid) !== null && _rootGrid !== void 0 ? _rootGrid : rootGrid = new Grid();\n        addNodeToGrid(rootGrid, vNode);\n        if (get_scroll_default(vNode.actualNode)) {\n          var subGrid = new Grid(vNode);\n          vNode._subGrid = subGrid;\n        }\n      }\n      var treeWalker = document.createTreeWalker(root, window.NodeFilter.SHOW_ELEMENT, null, false);\n      var node = parentVNode ? treeWalker.nextNode() : treeWalker.currentNode;\n      while (node) {\n        var _vNode = get_node_from_tree_default(node);\n        if (_vNode && _vNode.parent) {\n          parentVNode = _vNode.parent;\n        } else if (node.assignedSlot) {\n          parentVNode = get_node_from_tree_default(node.assignedSlot);\n        } else if (node.parentElement) {\n          parentVNode = get_node_from_tree_default(node.parentElement);\n        } else if (node.parentNode && get_node_from_tree_default(node.parentNode)) {\n          parentVNode = get_node_from_tree_default(node.parentNode);\n        }\n        if (!_vNode) {\n          _vNode = new axe.VirtualNode(node, parentVNode);\n        }\n        _vNode._stackingOrder = createStackingOrder(_vNode, parentVNode, nodeIndex++);\n        var scrollRegionParent = findScrollRegionParent(_vNode, parentVNode);\n        var grid = scrollRegionParent ? scrollRegionParent._subGrid : rootGrid;\n        if (get_scroll_default(_vNode.actualNode)) {\n          var _subGrid = new Grid(_vNode);\n          _vNode._subGrid = _subGrid;\n        }\n        var rect = _vNode.boundingClientRect;\n        if (rect.width !== 0 && rect.height !== 0 && _isVisibleOnScreen(node)) {\n          addNodeToGrid(grid, _vNode);\n        }\n        if (is_shadow_root_default(node)) {\n          _createGrid(node.shadowRoot, grid, _vNode);\n        }\n        node = treeWalker.nextNode();\n      }\n      return constants_default.gridSize;\n    }\n    function isStackingContext(vNode, parentVNode) {\n      var position = vNode.getComputedStylePropertyValue('position');\n      var zIndex = vNode.getComputedStylePropertyValue('z-index');\n      if (position === 'fixed' || position === 'sticky') {\n        return true;\n      }\n      if (zIndex !== 'auto' && position !== 'static') {\n        return true;\n      }\n      if (vNode.getComputedStylePropertyValue('opacity') !== '1') {\n        return true;\n      }\n      var transform = vNode.getComputedStylePropertyValue('-webkit-transform') || vNode.getComputedStylePropertyValue('-ms-transform') || vNode.getComputedStylePropertyValue('transform') || 'none';\n      if (transform !== 'none') {\n        return true;\n      }\n      var mixBlendMode = vNode.getComputedStylePropertyValue('mix-blend-mode');\n      if (mixBlendMode && mixBlendMode !== 'normal') {\n        return true;\n      }\n      var filter = vNode.getComputedStylePropertyValue('filter');\n      if (filter && filter !== 'none') {\n        return true;\n      }\n      var perspective = vNode.getComputedStylePropertyValue('perspective');\n      if (perspective && perspective !== 'none') {\n        return true;\n      }\n      var clipPath = vNode.getComputedStylePropertyValue('clip-path');\n      if (clipPath && clipPath !== 'none') {\n        return true;\n      }\n      var mask = vNode.getComputedStylePropertyValue('-webkit-mask') || vNode.getComputedStylePropertyValue('mask') || 'none';\n      if (mask !== 'none') {\n        return true;\n      }\n      var maskImage = vNode.getComputedStylePropertyValue('-webkit-mask-image') || vNode.getComputedStylePropertyValue('mask-image') || 'none';\n      if (maskImage !== 'none') {\n        return true;\n      }\n      var maskBorder = vNode.getComputedStylePropertyValue('-webkit-mask-border') || vNode.getComputedStylePropertyValue('mask-border') || 'none';\n      if (maskBorder !== 'none') {\n        return true;\n      }\n      if (vNode.getComputedStylePropertyValue('isolation') === 'isolate') {\n        return true;\n      }\n      var willChange = vNode.getComputedStylePropertyValue('will-change');\n      if (willChange === 'transform' || willChange === 'opacity') {\n        return true;\n      }\n      if (vNode.getComputedStylePropertyValue('-webkit-overflow-scrolling') === 'touch') {\n        return true;\n      }\n      var contain = vNode.getComputedStylePropertyValue('contain');\n      if ([ 'layout', 'paint', 'strict', 'content' ].includes(contain)) {\n        return true;\n      }\n      if (zIndex !== 'auto' && isFlexOrGridContainer(parentVNode)) {\n        return true;\n      }\n      return false;\n    }\n    function isFlexOrGridContainer(vNode) {\n      if (!vNode) {\n        return false;\n      }\n      var display2 = vNode.getComputedStylePropertyValue('display');\n      return [ 'flex', 'inline-flex', 'grid', 'inline-grid' ].includes(display2);\n    }\n    function createStackingOrder(vNode, parentVNode, treeOrder) {\n      var stackingOrder = parentVNode._stackingOrder.slice();\n      if (isStackingContext(vNode, parentVNode)) {\n        var index = stackingOrder.findIndex(function(_ref20) {\n          var stackLevel2 = _ref20.stackLevel;\n          return [ ROOT_LEVEL, FLOAT_LEVEL, POSITION_LEVEL ].includes(stackLevel2);\n        });\n        if (index !== -1) {\n          stackingOrder.splice(index, stackingOrder.length - index);\n        }\n      }\n      var stackLevel = getStackLevel(vNode, parentVNode);\n      if (stackLevel !== null) {\n        stackingOrder.push(createStackingContext(stackLevel, treeOrder, vNode));\n      }\n      return stackingOrder;\n    }\n    function createStackingContext(stackLevel, treeOrder, vNode) {\n      return {\n        stackLevel: stackLevel,\n        treeOrder: treeOrder,\n        vNode: vNode\n      };\n    }\n    function getStackLevel(vNode, parentVNode) {\n      var zIndex = getRealZIndex(vNode, parentVNode);\n      if (![ 'auto', '0' ].includes(zIndex)) {\n        return parseInt(zIndex);\n      }\n      if (vNode.getComputedStylePropertyValue('position') !== 'static') {\n        return POSITION_LEVEL;\n      }\n      if (vNode.getComputedStylePropertyValue('float') !== 'none') {\n        return FLOAT_LEVEL;\n      }\n      if (isStackingContext(vNode, parentVNode)) {\n        return DEFAULT_LEVEL;\n      }\n      return null;\n    }\n    function getRealZIndex(vNode, parentVNode) {\n      var position = vNode.getComputedStylePropertyValue('position');\n      if (position === 'static' && !isFlexOrGridContainer(parentVNode)) {\n        return 'auto';\n      }\n      return vNode.getComputedStylePropertyValue('z-index');\n    }\n    function findScrollRegionParent(vNode, parentVNode) {\n      var scrollRegionParent = null;\n      var checkedNodes = [ vNode ];\n      while (parentVNode) {\n        if (get_scroll_default(parentVNode.actualNode)) {\n          scrollRegionParent = parentVNode;\n          break;\n        }\n        if (parentVNode._scrollRegionParent) {\n          scrollRegionParent = parentVNode._scrollRegionParent;\n          break;\n        }\n        checkedNodes.push(parentVNode);\n        parentVNode = get_node_from_tree_default(parentVNode.actualNode.parentElement || parentVNode.actualNode.parentNode);\n      }\n      checkedNodes.forEach(function(virtualNode) {\n        return virtualNode._scrollRegionParent = scrollRegionParent;\n      });\n      return scrollRegionParent;\n    }\n    function addNodeToGrid(grid, vNode) {\n      var overflowHiddenNodes = get_overflow_hidden_ancestors_default(vNode);\n      vNode.clientRects.forEach(function(clientRect) {\n        var _vNode$_grid;\n        var visibleRect = overflowHiddenNodes.reduce(function(rect, overflowNode) {\n          return rect && _getIntersectionRect(rect, overflowNode.boundingClientRect);\n        }, clientRect);\n        if (!visibleRect) {\n          return;\n        }\n        (_vNode$_grid = vNode._grid) !== null && _vNode$_grid !== void 0 ? _vNode$_grid : vNode._grid = grid;\n        var gridRect = grid.getGridPositionOfRect(visibleRect);\n        grid.loopGridPosition(gridRect, function(gridCell) {\n          if (!gridCell.includes(vNode)) {\n            gridCell.push(vNode);\n          }\n        });\n      });\n    }\n    var Grid = function() {\n      function Grid() {\n        var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        _classCallCheck(this, Grid);\n        this.container = container;\n        this.cells = [];\n      }\n      return _createClass(Grid, [ {\n        key: 'toGridIndex',\n        value: function toGridIndex(num) {\n          return Math.floor(num / constants_default.gridSize);\n        }\n      }, {\n        key: 'getCellFromPoint',\n        value: function getCellFromPoint(_ref21) {\n          var _this$cells, _row;\n          var x = _ref21.x, y = _ref21.y;\n          assert_default(this.boundaries, 'Grid does not have cells added');\n          var rowIndex = this.toGridIndex(y);\n          var colIndex = this.toGridIndex(x);\n          assert_default(_isPointInRect({\n            y: rowIndex,\n            x: colIndex\n          }, this.boundaries), 'Element midpoint exceeds the grid bounds');\n          var row = (_this$cells = this.cells[rowIndex - this.cells._negativeIndex]) !== null && _this$cells !== void 0 ? _this$cells : [];\n          return (_row = row[colIndex - row._negativeIndex]) !== null && _row !== void 0 ? _row : [];\n        }\n      }, {\n        key: 'loopGridPosition',\n        value: function loopGridPosition(gridPosition, callback) {\n          var _gridPosition = gridPosition, left = _gridPosition.left, right = _gridPosition.right, top = _gridPosition.top, bottom = _gridPosition.bottom;\n          if (this.boundaries) {\n            gridPosition = _getBoundingRect(this.boundaries, gridPosition);\n          }\n          this.boundaries = gridPosition;\n          loopNegativeIndexMatrix(this.cells, top, bottom, function(gridRow, row) {\n            loopNegativeIndexMatrix(gridRow, left, right, function(gridCell, col) {\n              callback(gridCell, {\n                row: row,\n                col: col\n              });\n            });\n          });\n        }\n      }, {\n        key: 'getGridPositionOfRect',\n        value: function getGridPositionOfRect(_ref22) {\n          var top = _ref22.top, right = _ref22.right, bottom = _ref22.bottom, left = _ref22.left;\n          var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          top = this.toGridIndex(top - margin);\n          right = this.toGridIndex(right + margin - 1);\n          bottom = this.toGridIndex(bottom + margin - 1);\n          left = this.toGridIndex(left - margin);\n          return new window.DOMRect(left, top, right - left, bottom - top);\n        }\n      } ]);\n    }();\n    function loopNegativeIndexMatrix(matrix, start, end, callback) {\n      var _matrix$_negativeInde;\n      (_matrix$_negativeInde = matrix._negativeIndex) !== null && _matrix$_negativeInde !== void 0 ? _matrix$_negativeInde : matrix._negativeIndex = 0;\n      if (start < matrix._negativeIndex) {\n        for (var _i6 = 0; _i6 < matrix._negativeIndex - start; _i6++) {\n          matrix.splice(0, 0, []);\n        }\n        matrix._negativeIndex = start;\n      }\n      var startOffset = start - matrix._negativeIndex;\n      var endOffset = end - matrix._negativeIndex;\n      for (var index = startOffset; index <= endOffset; index++) {\n        var _index, _matrix$_index;\n        (_matrix$_index = matrix[_index = index]) !== null && _matrix$_index !== void 0 ? _matrix$_index : matrix[_index] = [];\n        callback(matrix[index], index + matrix._negativeIndex);\n      }\n    }\n    function _findNearbyElms(vNode) {\n      var _vNode$_grid2;\n      var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      _createGrid();\n      if (!((_vNode$_grid2 = vNode._grid) !== null && _vNode$_grid2 !== void 0 && (_vNode$_grid2 = _vNode$_grid2.cells) !== null && _vNode$_grid2 !== void 0 && _vNode$_grid2.length)) {\n        return [];\n      }\n      var rect = vNode.boundingClientRect;\n      var grid = vNode._grid;\n      var selfIsFixed = hasFixedPosition(vNode);\n      var gridPosition = grid.getGridPositionOfRect(rect, margin);\n      var neighbors = [];\n      grid.loopGridPosition(gridPosition, function(vNeighbors) {\n        var _iterator4 = _createForOfIteratorHelper(vNeighbors), _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {\n            var vNeighbor = _step4.value;\n            if (vNeighbor && vNeighbor !== vNode && !neighbors.includes(vNeighbor) && selfIsFixed === hasFixedPosition(vNeighbor)) {\n              neighbors.push(vNeighbor);\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      });\n      return neighbors;\n    }\n    var hasFixedPosition = memoize_default(function(vNode) {\n      if (!vNode) {\n        return false;\n      }\n      if (vNode.getComputedStylePropertyValue('position') === 'fixed') {\n        return true;\n      }\n      return hasFixedPosition(vNode.parent);\n    });\n    var getModalDialog = memoize_default(function getModalDialogMemoized() {\n      var _dialogs$find;\n      if (!axe._tree) {\n        return null;\n      }\n      var dialogs = query_selector_all_filter_default(axe._tree[0], 'dialog[open]', function(vNode) {\n        var rect = vNode.boundingClientRect;\n        var stack = document.elementsFromPoint(rect.left + 1, rect.top + 1);\n        return stack.includes(vNode.actualNode) && _isVisibleOnScreen(vNode);\n      });\n      if (!dialogs.length) {\n        return null;\n      }\n      var modalDialog = dialogs.find(function(dialog) {\n        var rect = dialog.boundingClientRect;\n        var stack = document.elementsFromPoint(rect.left - 10, rect.top - 10);\n        return stack.includes(dialog.actualNode);\n      });\n      if (modalDialog) {\n        return modalDialog;\n      }\n      return (_dialogs$find = dialogs.find(function(dialog) {\n        var _getNodeFromGrid;\n        var _ref23 = (_getNodeFromGrid = getNodeFromGrid(dialog)) !== null && _getNodeFromGrid !== void 0 ? _getNodeFromGrid : {}, vNode = _ref23.vNode, rect = _ref23.rect;\n        if (!vNode) {\n          return false;\n        }\n        var stack = document.elementsFromPoint(rect.left + 1, rect.top + 1);\n        return !stack.includes(vNode.actualNode);\n      })) !== null && _dialogs$find !== void 0 ? _dialogs$find : null;\n    });\n    var get_modal_dialog_default = getModalDialog;\n    function getNodeFromGrid(dialog) {\n      _createGrid();\n      var grid = axe._tree[0]._grid;\n      var viewRect = new window.DOMRect(0, 0, window.innerWidth, window.innerHeight);\n      if (!grid) {\n        return;\n      }\n      for (var row = 0; row < grid.cells.length; row++) {\n        var cols = grid.cells[row];\n        if (!cols) {\n          continue;\n        }\n        for (var col = 0; col < cols.length; col++) {\n          var cells = cols[col];\n          if (!cells) {\n            continue;\n          }\n          for (var _i7 = 0; _i7 < cells.length; _i7++) {\n            var vNode = cells[_i7];\n            var rect = vNode.boundingClientRect;\n            var intersection = _getIntersectionRect(rect, viewRect);\n            if (vNode.props.nodeName !== 'html' && vNode !== dialog && vNode.getComputedStylePropertyValue('pointer-events') !== 'none' && intersection) {\n              return {\n                vNode: vNode,\n                rect: intersection\n              };\n            }\n          }\n        }\n      }\n    }\n    function _isInert(vNode) {\n      var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, skipAncestors = _ref24.skipAncestors, isAncestor = _ref24.isAncestor;\n      if (skipAncestors) {\n        return isInertSelf(vNode, isAncestor);\n      }\n      return isInertAncestors(vNode, isAncestor);\n    }\n    var isInertSelf = memoize_default(function isInertSelfMemoized(vNode, isAncestor) {\n      if (vNode.hasAttr('inert')) {\n        return true;\n      }\n      if (!isAncestor && vNode.actualNode) {\n        var modalDialog = get_modal_dialog_default();\n        if (modalDialog && !_contains(modalDialog, vNode)) {\n          return true;\n        }\n      }\n      return false;\n    });\n    var isInertAncestors = memoize_default(function isInertAncestorsMemoized(vNode, isAncestor) {\n      if (isInertSelf(vNode, isAncestor)) {\n        return true;\n      }\n      if (!vNode.parent) {\n        return false;\n      }\n      return isInertAncestors(vNode.parent, true);\n    });\n    var allowedDisabledNodeNames = [ 'button', 'command', 'fieldset', 'keygen', 'optgroup', 'option', 'select', 'textarea', 'input' ];\n    function isDisabledAttrAllowed(nodeName2) {\n      return allowedDisabledNodeNames.includes(nodeName2);\n    }\n    function focusDisabled(el) {\n      var _nodeLookup3 = _nodeLookup(el), vNode = _nodeLookup3.vNode;\n      if (isDisabledAttrAllowed(vNode.props.nodeName) && vNode.hasAttr('disabled') || _isInert(vNode)) {\n        return true;\n      }\n      var parentNode = vNode.parent;\n      var ancestors = [];\n      var fieldsetDisabled = false;\n      while (parentNode && parentNode.shadowId === vNode.shadowId && !fieldsetDisabled) {\n        ancestors.push(parentNode);\n        if (parentNode.props.nodeName === 'legend') {\n          break;\n        }\n        if (parentNode._inDisabledFieldset !== void 0) {\n          fieldsetDisabled = parentNode._inDisabledFieldset;\n          break;\n        }\n        if (parentNode.props.nodeName === 'fieldset' && parentNode.hasAttr('disabled')) {\n          fieldsetDisabled = true;\n        }\n        parentNode = parentNode.parent;\n      }\n      ancestors.forEach(function(ancestor) {\n        return ancestor._inDisabledFieldset = fieldsetDisabled;\n      });\n      if (fieldsetDisabled) {\n        return true;\n      }\n      if (vNode.props.nodeName !== 'area') {\n        if (!vNode.actualNode) {\n          return false;\n        }\n        return _isHiddenForEveryone(vNode);\n      }\n      return false;\n    }\n    var focus_disabled_default = focusDisabled;\n    var angularSkipLinkRegex = /^\\/\\#/;\n    var angularRouterLinkRegex = /^#[!/]/;\n    function _isCurrentPageLink(anchor) {\n      var _window$location;\n      var href = anchor.getAttribute('href');\n      if (!href || href === '#') {\n        return false;\n      }\n      if (angularSkipLinkRegex.test(href)) {\n        return true;\n      }\n      var hash = anchor.hash, protocol = anchor.protocol, hostname = anchor.hostname, port = anchor.port, pathname = anchor.pathname;\n      if (angularRouterLinkRegex.test(hash)) {\n        return false;\n      }\n      if (href.charAt(0) === '#') {\n        return true;\n      }\n      if (typeof ((_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.origin) !== 'string' || window.location.origin.indexOf('://') === -1) {\n        return null;\n      }\n      var currentPageUrl = window.location.origin + window.location.pathname;\n      var url;\n      if (!hostname) {\n        url = window.location.origin;\n      } else {\n        url = ''.concat(protocol, '//').concat(hostname).concat(port ? ':'.concat(port) : '');\n      }\n      if (!pathname) {\n        url += window.location.pathname;\n      } else {\n        url += (pathname[0] !== '/' ? '/' : '') + pathname;\n      }\n      return url === currentPageUrl;\n    }\n    function getElementByReference(node, attr) {\n      var fragment = node.getAttribute(attr);\n      if (!fragment) {\n        return null;\n      }\n      if (attr === 'href' && !_isCurrentPageLink(node)) {\n        return null;\n      }\n      if (fragment.indexOf('#') !== -1) {\n        fragment = decodeURIComponent(fragment.substr(fragment.indexOf('#') + 1));\n      }\n      var candidate = document.getElementById(fragment);\n      if (candidate) {\n        return candidate;\n      }\n      candidate = document.getElementsByName(fragment);\n      if (candidate.length) {\n        return candidate[0];\n      }\n      return null;\n    }\n    var get_element_by_reference_default = getElementByReference;\n    function _visuallySort(a2, b2) {\n      _createGrid();\n      var length = Math.max(a2._stackingOrder.length, b2._stackingOrder.length);\n      for (var _i8 = 0; _i8 < length; _i8++) {\n        if (typeof b2._stackingOrder[_i8] === 'undefined') {\n          return -1;\n        } else if (typeof a2._stackingOrder[_i8] === 'undefined') {\n          return 1;\n        }\n        if (b2._stackingOrder[_i8].stackLevel > a2._stackingOrder[_i8].stackLevel) {\n          return 1;\n        }\n        if (b2._stackingOrder[_i8].stackLevel < a2._stackingOrder[_i8].stackLevel) {\n          return -1;\n        }\n        if (b2._stackingOrder[_i8].treeOrder !== a2._stackingOrder[_i8].treeOrder) {\n          return b2._stackingOrder[_i8].treeOrder - a2._stackingOrder[_i8].treeOrder;\n        }\n      }\n      var aNode = a2.actualNode;\n      var bNode = b2.actualNode;\n      if (aNode.getRootNode && aNode.getRootNode() !== bNode.getRootNode()) {\n        var boundaries = [];\n        while (aNode) {\n          boundaries.push({\n            root: aNode.getRootNode(),\n            node: aNode\n          });\n          aNode = aNode.getRootNode().host;\n        }\n        while (bNode && !boundaries.find(function(boundary) {\n          return boundary.root === bNode.getRootNode();\n        })) {\n          bNode = bNode.getRootNode().host;\n        }\n        aNode = boundaries.find(function(boundary) {\n          return boundary.root === bNode.getRootNode();\n        }).node;\n        if (aNode === bNode) {\n          return a2.actualNode.getRootNode() !== aNode.getRootNode() ? -1 : 1;\n        }\n      }\n      var _window$Node = window.Node, DOCUMENT_POSITION_FOLLOWING = _window$Node.DOCUMENT_POSITION_FOLLOWING, DOCUMENT_POSITION_CONTAINS = _window$Node.DOCUMENT_POSITION_CONTAINS, DOCUMENT_POSITION_CONTAINED_BY = _window$Node.DOCUMENT_POSITION_CONTAINED_BY;\n      var docPosition = aNode.compareDocumentPosition(bNode);\n      var DOMOrder = docPosition & DOCUMENT_POSITION_FOLLOWING ? 1 : -1;\n      var isDescendant = docPosition & DOCUMENT_POSITION_CONTAINS || docPosition & DOCUMENT_POSITION_CONTAINED_BY;\n      var aPosition = getPositionOrder(a2);\n      var bPosition = getPositionOrder(b2);\n      if (aPosition === bPosition || isDescendant) {\n        return DOMOrder;\n      }\n      return bPosition - aPosition;\n    }\n    function getPositionOrder(vNode) {\n      if (vNode.getComputedStylePropertyValue('display').indexOf('inline') !== -1) {\n        return 2;\n      }\n      if (isFloated(vNode)) {\n        return 1;\n      }\n      return 0;\n    }\n    function isFloated(vNode) {\n      if (!vNode) {\n        return false;\n      }\n      if (vNode._isFloated !== void 0) {\n        return vNode._isFloated;\n      }\n      var floatStyle = vNode.getComputedStylePropertyValue('float');\n      if (floatStyle !== 'none') {\n        vNode._isFloated = true;\n        return true;\n      }\n      var floated = isFloated(vNode.parent);\n      vNode._isFloated = floated;\n      return floated;\n    }\n    function getRectStack(grid, rect) {\n      var recursed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var center = _getRectCenter(rect);\n      var gridCell = grid.getCellFromPoint(center) || [];\n      var floorX = Math.floor(center.x);\n      var floorY = Math.floor(center.y);\n      var stack = gridCell.filter(function(gridCellNode) {\n        return gridCellNode.clientRects.some(function(clientRect) {\n          var rectX = clientRect.left;\n          var rectY = clientRect.top;\n          return floorX < Math.floor(rectX + clientRect.width) && floorX >= Math.floor(rectX) && floorY < Math.floor(rectY + clientRect.height) && floorY >= Math.floor(rectY);\n        });\n      });\n      var gridContainer = grid.container;\n      if (gridContainer) {\n        stack = getRectStack(gridContainer._grid, gridContainer.boundingClientRect, true).concat(stack);\n      }\n      if (!recursed) {\n        stack = stack.sort(_visuallySort).map(function(vNode) {\n          return vNode.actualNode;\n        }).concat(document.documentElement).filter(function(node, index, array) {\n          return array.indexOf(node) === index;\n        });\n      }\n      return stack;\n    }\n    function getElementStack(node) {\n      _createGrid();\n      var vNode = get_node_from_tree_default(node);\n      var grid = vNode._grid;\n      if (!grid) {\n        return [];\n      }\n      return getRectStack(grid, vNode.boundingClientRect);\n    }\n    var get_element_stack_default = getElementStack;\n    function getTabbableElements(virtualNode) {\n      var nodeAndDescendents = query_selector_all_default(virtualNode, '*');\n      var tabbableElements = nodeAndDescendents.filter(function(vNode) {\n        var isFocusable2 = vNode.isFocusable;\n        var tabIndex = parse_tabindex_default(vNode.actualNode.getAttribute('tabindex'));\n        return tabIndex !== null ? isFocusable2 && tabIndex >= 0 : isFocusable2;\n      });\n      return tabbableElements;\n    }\n    var get_tabbable_elements_default = getTabbableElements;\n    function isNativelyFocusable(el) {\n      var _nodeLookup4 = _nodeLookup(el), vNode = _nodeLookup4.vNode;\n      if (!vNode || focus_disabled_default(vNode)) {\n        return false;\n      }\n      switch (vNode.props.nodeName) {\n       case 'a':\n       case 'area':\n        if (vNode.hasAttr('href')) {\n          return true;\n        }\n        break;\n\n       case 'input':\n        return vNode.props.type !== 'hidden';\n\n       case 'textarea':\n       case 'select':\n       case 'summary':\n       case 'button':\n        return true;\n\n       case 'details':\n        return !query_selector_all_default(vNode, 'summary').length;\n      }\n      return false;\n    }\n    var is_natively_focusable_default = isNativelyFocusable;\n    function _isFocusable(el) {\n      var _nodeLookup5 = _nodeLookup(el), vNode = _nodeLookup5.vNode;\n      if (vNode.props.nodeType !== 1) {\n        return false;\n      }\n      if (focus_disabled_default(vNode)) {\n        return false;\n      } else if (is_natively_focusable_default(vNode)) {\n        return true;\n      }\n      var tabindex = parse_tabindex_default(vNode.attr('tabindex'));\n      return tabindex !== null;\n    }\n    function _isInTabOrder(el) {\n      var _nodeLookup6 = _nodeLookup(el), vNode = _nodeLookup6.vNode;\n      if (vNode.props.nodeType !== 1) {\n        return false;\n      }\n      var tabindex = parse_tabindex_default(vNode.attr('tabindex'));\n      if (tabindex <= -1) {\n        return false;\n      }\n      return _isFocusable(vNode);\n    }\n    var get_target_rects_default = memoize_default(getTargetRects);\n    function getTargetRects(vNode) {\n      var nodeRect = vNode.boundingClientRect;\n      var overlappingVNodes = _findNearbyElms(vNode).filter(function(vNeighbor) {\n        return _hasVisualOverlap(vNode, vNeighbor) && vNeighbor.getComputedStylePropertyValue('pointer-events') !== 'none' && !isDescendantNotInTabOrder(vNode, vNeighbor);\n      });\n      if (!overlappingVNodes.length) {\n        return [ nodeRect ];\n      }\n      var obscuringRects = overlappingVNodes.map(function(_ref25) {\n        var rect = _ref25.boundingClientRect;\n        return rect;\n      });\n      return _splitRects(nodeRect, obscuringRects);\n    }\n    function isDescendantNotInTabOrder(vAncestor, vNode) {\n      return _contains(vAncestor, vNode) && !_isInTabOrder(vNode);\n    }\n    var get_target_size_default = memoize_default(getTargetSize);\n    function getTargetSize(vNode, minSize) {\n      var rects = get_target_rects_default(vNode);\n      return getLargestRect(rects, minSize);\n    }\n    function getLargestRect(rects, minSize) {\n      return rects.reduce(function(rectA, rectB) {\n        var rectAisMinimum = _rectHasMinimumSize(minSize, rectA);\n        var rectBisMinimum = _rectHasMinimumSize(minSize, rectB);\n        if (rectAisMinimum !== rectBisMinimum) {\n          return rectAisMinimum ? rectA : rectB;\n        }\n        var areaA = rectA.width * rectA.height;\n        var areaB = rectB.width * rectB.height;\n        return areaA > areaB ? rectA : rectB;\n      });\n    }\n    var text_exports = {};\n    __export(text_exports, {\n      accessibleText: function accessibleText() {\n        return accessible_text_default;\n      },\n      accessibleTextVirtual: function accessibleTextVirtual() {\n        return _accessibleTextVirtual;\n      },\n      autocomplete: function autocomplete() {\n        return _autocomplete;\n      },\n      formControlValue: function formControlValue() {\n        return form_control_value_default;\n      },\n      formControlValueMethods: function formControlValueMethods() {\n        return _formControlValueMethods;\n      },\n      hasUnicode: function hasUnicode() {\n        return has_unicode_default;\n      },\n      isHumanInterpretable: function isHumanInterpretable() {\n        return is_human_interpretable_default;\n      },\n      isIconLigature: function isIconLigature() {\n        return _isIconLigature;\n      },\n      isValidAutocomplete: function isValidAutocomplete() {\n        return is_valid_autocomplete_default;\n      },\n      label: function label() {\n        return label_default;\n      },\n      labelText: function labelText() {\n        return label_text_default;\n      },\n      labelVirtual: function labelVirtual() {\n        return label_virtual_default2;\n      },\n      nativeElementType: function nativeElementType() {\n        return native_element_type_default;\n      },\n      nativeTextAlternative: function nativeTextAlternative() {\n        return _nativeTextAlternative;\n      },\n      nativeTextMethods: function nativeTextMethods() {\n        return native_text_methods_default;\n      },\n      removeUnicode: function removeUnicode() {\n        return remove_unicode_default;\n      },\n      sanitize: function sanitize() {\n        return sanitize_default;\n      },\n      subtreeText: function subtreeText() {\n        return subtree_text_default;\n      },\n      titleText: function titleText() {\n        return title_text_default;\n      },\n      unsupported: function unsupported() {\n        return unsupported_default;\n      },\n      visible: function visible() {\n        return visible_default;\n      },\n      visibleTextNodes: function visibleTextNodes() {\n        return visible_text_nodes_default;\n      },\n      visibleVirtual: function visibleVirtual() {\n        return visible_virtual_default;\n      }\n    });\n    function idrefs(node, attr) {\n      node = node.actualNode || node;\n      try {\n        var doc = get_root_node_default2(node);\n        var result = [];\n        var attrValue = node.getAttribute(attr);\n        if (attrValue) {\n          attrValue = token_list_default(attrValue);\n          for (var index = 0; index < attrValue.length; index++) {\n            result.push(doc.getElementById(attrValue[index]));\n          }\n        }\n        return result;\n      } catch (_unused3) {\n        throw new TypeError('Cannot resolve id references for non-DOM nodes');\n      }\n    }\n    var idrefs_default = idrefs;\n    function accessibleText(element, context) {\n      var virtualNode = get_node_from_tree_default(element);\n      return _accessibleTextVirtual(virtualNode, context);\n    }\n    var accessible_text_default = accessibleText;\n    function arialabelledbyText(element) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _nodeLookup7 = _nodeLookup(element), vNode = _nodeLookup7.vNode;\n      if ((vNode === null || vNode === void 0 ? void 0 : vNode.props.nodeType) !== 1) {\n        return '';\n      }\n      if (vNode.props.nodeType !== 1 || context.inLabelledByContext || context.inControlContext || !vNode.attr('aria-labelledby')) {\n        return '';\n      }\n      var refs = idrefs_default(vNode, 'aria-labelledby').filter(function(elm) {\n        return elm;\n      });\n      return refs.reduce(function(accessibleName, elm) {\n        var accessibleNameAdd = accessible_text_default(elm, _extends({\n          inLabelledByContext: true,\n          startNode: context.startNode || vNode\n        }, context));\n        if (!accessibleName) {\n          return accessibleNameAdd;\n        } else {\n          return ''.concat(accessibleName, ' ').concat(accessibleNameAdd);\n        }\n      }, '');\n    }\n    var arialabelledby_text_default = arialabelledbyText;\n    function _arialabelText(element) {\n      var _nodeLookup8 = _nodeLookup(element), vNode = _nodeLookup8.vNode;\n      if ((vNode === null || vNode === void 0 ? void 0 : vNode.props.nodeType) !== 1) {\n        return '';\n      }\n      return vNode.attr('aria-label') || '';\n    }\n    var ariaAttrs = {\n      'aria-activedescendant': {\n        type: 'idref',\n        allowEmpty: true\n      },\n      'aria-atomic': {\n        type: 'boolean',\n        global: true\n      },\n      'aria-autocomplete': {\n        type: 'nmtoken',\n        values: [ 'inline', 'list', 'both', 'none' ]\n      },\n      'aria-braillelabel': {\n        type: 'string',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-brailleroledescription': {\n        type: 'string',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-busy': {\n        type: 'boolean',\n        global: true\n      },\n      'aria-checked': {\n        type: 'nmtoken',\n        values: [ 'false', 'mixed', 'true', 'undefined' ]\n      },\n      'aria-colcount': {\n        type: 'int',\n        minValue: -1\n      },\n      'aria-colindex': {\n        type: 'int',\n        minValue: 1\n      },\n      'aria-colspan': {\n        type: 'int',\n        minValue: 1\n      },\n      'aria-controls': {\n        type: 'idrefs',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-current': {\n        type: 'nmtoken',\n        allowEmpty: true,\n        values: [ 'page', 'step', 'location', 'date', 'time', 'true', 'false' ],\n        global: true\n      },\n      'aria-describedby': {\n        type: 'idrefs',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-description': {\n        type: 'string',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-details': {\n        type: 'idref',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-disabled': {\n        type: 'boolean',\n        global: true\n      },\n      'aria-dropeffect': {\n        type: 'nmtokens',\n        values: [ 'copy', 'execute', 'link', 'move', 'none', 'popup' ],\n        global: true\n      },\n      'aria-errormessage': {\n        type: 'idref',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-expanded': {\n        type: 'nmtoken',\n        values: [ 'true', 'false', 'undefined' ]\n      },\n      'aria-flowto': {\n        type: 'idrefs',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-grabbed': {\n        type: 'nmtoken',\n        values: [ 'true', 'false', 'undefined' ],\n        global: true\n      },\n      'aria-haspopup': {\n        type: 'nmtoken',\n        allowEmpty: true,\n        values: [ 'true', 'false', 'menu', 'listbox', 'tree', 'grid', 'dialog' ],\n        global: true\n      },\n      'aria-hidden': {\n        type: 'nmtoken',\n        values: [ 'true', 'false', 'undefined' ],\n        global: true\n      },\n      'aria-invalid': {\n        type: 'nmtoken',\n        values: [ 'grammar', 'false', 'spelling', 'true' ],\n        global: true\n      },\n      'aria-keyshortcuts': {\n        type: 'string',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-label': {\n        type: 'string',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-labelledby': {\n        type: 'idrefs',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-level': {\n        type: 'int',\n        minValue: 1\n      },\n      'aria-live': {\n        type: 'nmtoken',\n        values: [ 'assertive', 'off', 'polite' ],\n        global: true\n      },\n      'aria-modal': {\n        type: 'boolean'\n      },\n      'aria-multiline': {\n        type: 'boolean'\n      },\n      'aria-multiselectable': {\n        type: 'boolean'\n      },\n      'aria-orientation': {\n        type: 'nmtoken',\n        values: [ 'horizontal', 'undefined', 'vertical' ]\n      },\n      'aria-owns': {\n        type: 'idrefs',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-placeholder': {\n        type: 'string',\n        allowEmpty: true\n      },\n      'aria-posinset': {\n        type: 'int',\n        minValue: 1\n      },\n      'aria-pressed': {\n        type: 'nmtoken',\n        values: [ 'false', 'mixed', 'true', 'undefined' ]\n      },\n      'aria-readonly': {\n        type: 'boolean'\n      },\n      'aria-relevant': {\n        type: 'nmtokens',\n        values: [ 'additions', 'all', 'removals', 'text' ],\n        global: true\n      },\n      'aria-required': {\n        type: 'boolean'\n      },\n      'aria-roledescription': {\n        type: 'string',\n        allowEmpty: true,\n        global: true\n      },\n      'aria-rowcount': {\n        type: 'int',\n        minValue: -1\n      },\n      'aria-rowindex': {\n        type: 'int',\n        minValue: 1\n      },\n      'aria-rowspan': {\n        type: 'int',\n        minValue: 0\n      },\n      'aria-selected': {\n        type: 'nmtoken',\n        values: [ 'false', 'true', 'undefined' ]\n      },\n      'aria-setsize': {\n        type: 'int',\n        minValue: -1\n      },\n      'aria-sort': {\n        type: 'nmtoken',\n        values: [ 'ascending', 'descending', 'none', 'other' ]\n      },\n      'aria-valuemax': {\n        type: 'decimal'\n      },\n      'aria-valuemin': {\n        type: 'decimal'\n      },\n      'aria-valuenow': {\n        type: 'decimal'\n      },\n      'aria-valuetext': {\n        type: 'string',\n        allowEmpty: true\n      }\n    };\n    var aria_attrs_default = ariaAttrs;\n    var ariaRoles = {\n      alert: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      alertdialog: {\n        type: 'window',\n        allowedAttrs: [ 'aria-expanded', 'aria-modal' ],\n        superclassRole: [ 'alert', 'dialog' ],\n        accessibleNameRequired: true\n      },\n      application: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-activedescendant', 'aria-expanded' ],\n        superclassRole: [ 'structure' ],\n        accessibleNameRequired: true\n      },\n      article: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-posinset', 'aria-setsize', 'aria-expanded' ],\n        superclassRole: [ 'document' ]\n      },\n      banner: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      blockquote: {\n        type: 'structure',\n        superclassRole: [ 'section' ]\n      },\n      button: {\n        type: 'widget',\n        allowedAttrs: [ 'aria-expanded', 'aria-pressed' ],\n        superclassRole: [ 'command' ],\n        accessibleNameRequired: true,\n        nameFromContent: true,\n        childrenPresentational: true\n      },\n      caption: {\n        type: 'structure',\n        requiredContext: [ 'figure', 'table', 'grid', 'treegrid' ],\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      cell: {\n        type: 'structure',\n        requiredContext: [ 'row' ],\n        allowedAttrs: [ 'aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan', 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        nameFromContent: true\n      },\n      checkbox: {\n        type: 'widget',\n        requiredAttrs: [ 'aria-checked' ],\n        allowedAttrs: [ 'aria-readonly', 'aria-expanded', 'aria-required' ],\n        superclassRole: [ 'input' ],\n        accessibleNameRequired: true,\n        nameFromContent: true,\n        childrenPresentational: true\n      },\n      code: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      columnheader: {\n        type: 'structure',\n        requiredContext: [ 'row' ],\n        allowedAttrs: [ 'aria-sort', 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-readonly', 'aria-required', 'aria-rowindex', 'aria-rowspan', 'aria-selected' ],\n        superclassRole: [ 'cell', 'gridcell', 'sectionhead' ],\n        accessibleNameRequired: false,\n        nameFromContent: true\n      },\n      combobox: {\n        type: 'widget',\n        requiredAttrs: [ 'aria-expanded', 'aria-controls' ],\n        allowedAttrs: [ 'aria-owns', 'aria-autocomplete', 'aria-readonly', 'aria-required', 'aria-activedescendant', 'aria-orientation' ],\n        superclassRole: [ 'select' ],\n        accessibleNameRequired: true\n      },\n      command: {\n        type: 'abstract',\n        superclassRole: [ 'widget' ]\n      },\n      complementary: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      composite: {\n        type: 'abstract',\n        superclassRole: [ 'widget' ]\n      },\n      contentinfo: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      comment: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-level', 'aria-posinset', 'aria-setsize' ],\n        superclassRole: [ 'article' ]\n      },\n      definition: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      deletion: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      dialog: {\n        type: 'window',\n        allowedAttrs: [ 'aria-expanded', 'aria-modal' ],\n        superclassRole: [ 'window' ],\n        accessibleNameRequired: true\n      },\n      directory: {\n        type: 'structure',\n        deprecated: true,\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'list' ],\n        nameFromContent: true\n      },\n      document: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'structure' ]\n      },\n      emphasis: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      feed: {\n        type: 'structure',\n        requiredOwned: [ 'article' ],\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'list' ]\n      },\n      figure: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        nameFromContent: true\n      },\n      form: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      grid: {\n        type: 'composite',\n        requiredOwned: [ 'rowgroup', 'row' ],\n        allowedAttrs: [ 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-activedescendant', 'aria-colcount', 'aria-expanded', 'aria-rowcount' ],\n        superclassRole: [ 'composite', 'table' ],\n        accessibleNameRequired: false\n      },\n      gridcell: {\n        type: 'widget',\n        requiredContext: [ 'row' ],\n        allowedAttrs: [ 'aria-readonly', 'aria-required', 'aria-selected', 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan' ],\n        superclassRole: [ 'cell', 'widget' ],\n        nameFromContent: true\n      },\n      group: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-activedescendant', 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      heading: {\n        type: 'structure',\n        requiredAttrs: [ 'aria-level' ],\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'sectionhead' ],\n        accessibleNameRequired: false,\n        nameFromContent: true\n      },\n      img: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        accessibleNameRequired: true,\n        childrenPresentational: true\n      },\n      input: {\n        type: 'abstract',\n        superclassRole: [ 'widget' ]\n      },\n      insertion: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      landmark: {\n        type: 'abstract',\n        superclassRole: [ 'section' ]\n      },\n      link: {\n        type: 'widget',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'command' ],\n        accessibleNameRequired: true,\n        nameFromContent: true\n      },\n      list: {\n        type: 'structure',\n        requiredOwned: [ 'listitem' ],\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      listbox: {\n        type: 'widget',\n        requiredOwned: [ 'group', 'option' ],\n        allowedAttrs: [ 'aria-multiselectable', 'aria-readonly', 'aria-required', 'aria-activedescendant', 'aria-expanded', 'aria-orientation' ],\n        superclassRole: [ 'select' ],\n        accessibleNameRequired: true\n      },\n      listitem: {\n        type: 'structure',\n        requiredContext: [ 'list' ],\n        allowedAttrs: [ 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        nameFromContent: true\n      },\n      log: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      main: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      marquee: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      math: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        childrenPresentational: true\n      },\n      menu: {\n        type: 'composite',\n        requiredOwned: [ 'group', 'menuitemradio', 'menuitem', 'menuitemcheckbox', 'menu', 'separator' ],\n        allowedAttrs: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation' ],\n        superclassRole: [ 'select' ]\n      },\n      menubar: {\n        type: 'composite',\n        requiredOwned: [ 'group', 'menuitemradio', 'menuitem', 'menuitemcheckbox', 'menu', 'separator' ],\n        allowedAttrs: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation' ],\n        superclassRole: [ 'menu' ]\n      },\n      menuitem: {\n        type: 'widget',\n        requiredContext: [ 'menu', 'menubar', 'group' ],\n        allowedAttrs: [ 'aria-posinset', 'aria-setsize', 'aria-expanded' ],\n        superclassRole: [ 'command' ],\n        accessibleNameRequired: true,\n        nameFromContent: true\n      },\n      menuitemcheckbox: {\n        type: 'widget',\n        requiredContext: [ 'menu', 'menubar', 'group' ],\n        requiredAttrs: [ 'aria-checked' ],\n        allowedAttrs: [ 'aria-expanded', 'aria-posinset', 'aria-readonly', 'aria-setsize' ],\n        superclassRole: [ 'checkbox', 'menuitem' ],\n        accessibleNameRequired: true,\n        nameFromContent: true,\n        childrenPresentational: true\n      },\n      menuitemradio: {\n        type: 'widget',\n        requiredContext: [ 'menu', 'menubar', 'group' ],\n        requiredAttrs: [ 'aria-checked' ],\n        allowedAttrs: [ 'aria-expanded', 'aria-posinset', 'aria-readonly', 'aria-setsize' ],\n        superclassRole: [ 'menuitemcheckbox', 'radio' ],\n        accessibleNameRequired: true,\n        nameFromContent: true,\n        childrenPresentational: true\n      },\n      meter: {\n        type: 'structure',\n        requiredAttrs: [ 'aria-valuenow' ],\n        allowedAttrs: [ 'aria-valuemax', 'aria-valuemin', 'aria-valuetext' ],\n        superclassRole: [ 'range' ],\n        accessibleNameRequired: true,\n        childrenPresentational: true\n      },\n      mark: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      navigation: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      none: {\n        type: 'structure',\n        superclassRole: [ 'structure' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      note: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      option: {\n        type: 'widget',\n        requiredContext: [ 'group', 'listbox' ],\n        allowedAttrs: [ 'aria-selected', 'aria-checked', 'aria-posinset', 'aria-setsize' ],\n        superclassRole: [ 'input' ],\n        accessibleNameRequired: true,\n        nameFromContent: true,\n        childrenPresentational: true\n      },\n      paragraph: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      presentation: {\n        type: 'structure',\n        superclassRole: [ 'structure' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      progressbar: {\n        type: 'widget',\n        allowedAttrs: [ 'aria-expanded', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext' ],\n        superclassRole: [ 'range' ],\n        accessibleNameRequired: true,\n        childrenPresentational: true\n      },\n      radio: {\n        type: 'widget',\n        requiredAttrs: [ 'aria-checked' ],\n        allowedAttrs: [ 'aria-posinset', 'aria-setsize', 'aria-required' ],\n        superclassRole: [ 'input' ],\n        accessibleNameRequired: true,\n        nameFromContent: true,\n        childrenPresentational: true\n      },\n      radiogroup: {\n        type: 'composite',\n        allowedAttrs: [ 'aria-readonly', 'aria-required', 'aria-activedescendant', 'aria-expanded', 'aria-orientation' ],\n        superclassRole: [ 'select' ],\n        accessibleNameRequired: false\n      },\n      range: {\n        type: 'abstract',\n        superclassRole: [ 'widget' ]\n      },\n      region: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ],\n        accessibleNameRequired: false\n      },\n      roletype: {\n        type: 'abstract',\n        superclassRole: []\n      },\n      row: {\n        type: 'structure',\n        requiredContext: [ 'grid', 'rowgroup', 'table', 'treegrid' ],\n        requiredOwned: [ 'cell', 'columnheader', 'gridcell', 'rowheader' ],\n        allowedAttrs: [ 'aria-colindex', 'aria-level', 'aria-rowindex', 'aria-selected', 'aria-activedescendant', 'aria-expanded', 'aria-posinset', 'aria-setsize' ],\n        superclassRole: [ 'group', 'widget' ],\n        nameFromContent: true\n      },\n      rowgroup: {\n        type: 'structure',\n        requiredContext: [ 'grid', 'table', 'treegrid' ],\n        requiredOwned: [ 'row' ],\n        superclassRole: [ 'structure' ],\n        nameFromContent: true\n      },\n      rowheader: {\n        type: 'structure',\n        requiredContext: [ 'row' ],\n        allowedAttrs: [ 'aria-sort', 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-readonly', 'aria-required', 'aria-rowindex', 'aria-rowspan', 'aria-selected' ],\n        superclassRole: [ 'cell', 'gridcell', 'sectionhead' ],\n        accessibleNameRequired: false,\n        nameFromContent: true\n      },\n      scrollbar: {\n        type: 'widget',\n        requiredAttrs: [ 'aria-valuenow' ],\n        allowedAttrs: [ 'aria-controls', 'aria-orientation', 'aria-valuemax', 'aria-valuemin', 'aria-valuetext' ],\n        superclassRole: [ 'range' ],\n        childrenPresentational: true\n      },\n      search: {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      searchbox: {\n        type: 'widget',\n        allowedAttrs: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-placeholder', 'aria-readonly', 'aria-required' ],\n        superclassRole: [ 'textbox' ],\n        accessibleNameRequired: true\n      },\n      section: {\n        type: 'abstract',\n        superclassRole: [ 'structure' ],\n        nameFromContent: true\n      },\n      sectionhead: {\n        type: 'abstract',\n        superclassRole: [ 'structure' ],\n        nameFromContent: true\n      },\n      select: {\n        type: 'abstract',\n        superclassRole: [ 'composite', 'group' ]\n      },\n      separator: {\n        type: 'structure',\n        requiredAttrs: [ 'aria-valuenow' ],\n        allowedAttrs: [ 'aria-valuemax', 'aria-valuemin', 'aria-orientation', 'aria-valuetext' ],\n        superclassRole: [ 'structure', 'widget' ],\n        childrenPresentational: true\n      },\n      slider: {\n        type: 'widget',\n        requiredAttrs: [ 'aria-valuenow' ],\n        allowedAttrs: [ 'aria-valuemax', 'aria-valuemin', 'aria-orientation', 'aria-readonly', 'aria-required', 'aria-valuetext' ],\n        superclassRole: [ 'input', 'range' ],\n        accessibleNameRequired: true,\n        childrenPresentational: true\n      },\n      spinbutton: {\n        type: 'widget',\n        allowedAttrs: [ 'aria-valuemax', 'aria-valuemin', 'aria-readonly', 'aria-required', 'aria-activedescendant', 'aria-valuetext', 'aria-valuenow' ],\n        superclassRole: [ 'composite', 'input', 'range' ],\n        accessibleNameRequired: true\n      },\n      status: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      strong: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      structure: {\n        type: 'abstract',\n        superclassRole: [ 'roletype' ]\n      },\n      subscript: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      superscript: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      switch: {\n        type: 'widget',\n        requiredAttrs: [ 'aria-checked' ],\n        allowedAttrs: [ 'aria-expanded', 'aria-readonly', 'aria-required' ],\n        superclassRole: [ 'checkbox' ],\n        accessibleNameRequired: true,\n        nameFromContent: true,\n        childrenPresentational: true\n      },\n      suggestion: {\n        type: 'structure',\n        requiredOwned: [ 'insertion', 'deletion' ],\n        superclassRole: [ 'section' ],\n        prohibitedAttrs: [ 'aria-label', 'aria-labelledby' ]\n      },\n      tab: {\n        type: 'widget',\n        requiredContext: [ 'tablist' ],\n        allowedAttrs: [ 'aria-posinset', 'aria-selected', 'aria-setsize', 'aria-expanded' ],\n        superclassRole: [ 'sectionhead', 'widget' ],\n        nameFromContent: true,\n        childrenPresentational: true\n      },\n      table: {\n        type: 'structure',\n        requiredOwned: [ 'rowgroup', 'row' ],\n        allowedAttrs: [ 'aria-colcount', 'aria-rowcount', 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        accessibleNameRequired: false,\n        nameFromContent: true\n      },\n      tablist: {\n        type: 'composite',\n        requiredOwned: [ 'tab' ],\n        allowedAttrs: [ 'aria-level', 'aria-multiselectable', 'aria-orientation', 'aria-activedescendant', 'aria-expanded' ],\n        superclassRole: [ 'composite' ]\n      },\n      tabpanel: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        accessibleNameRequired: false\n      },\n      term: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        nameFromContent: true\n      },\n      text: {\n        type: 'structure',\n        superclassRole: [ 'section' ],\n        nameFromContent: true\n      },\n      textbox: {\n        type: 'widget',\n        allowedAttrs: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-placeholder', 'aria-readonly', 'aria-required' ],\n        superclassRole: [ 'input' ],\n        accessibleNameRequired: true\n      },\n      time: {\n        type: 'structure',\n        superclassRole: [ 'section' ]\n      },\n      timer: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'status' ]\n      },\n      toolbar: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-orientation', 'aria-activedescendant', 'aria-expanded' ],\n        superclassRole: [ 'group' ],\n        accessibleNameRequired: true\n      },\n      tooltip: {\n        type: 'structure',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ],\n        nameFromContent: true\n      },\n      tree: {\n        type: 'composite',\n        requiredOwned: [ 'group', 'treeitem' ],\n        allowedAttrs: [ 'aria-multiselectable', 'aria-required', 'aria-activedescendant', 'aria-expanded', 'aria-orientation' ],\n        superclassRole: [ 'select' ],\n        accessibleNameRequired: false\n      },\n      treegrid: {\n        type: 'composite',\n        requiredOwned: [ 'rowgroup', 'row' ],\n        allowedAttrs: [ 'aria-activedescendant', 'aria-colcount', 'aria-expanded', 'aria-level', 'aria-multiselectable', 'aria-orientation', 'aria-readonly', 'aria-required', 'aria-rowcount' ],\n        superclassRole: [ 'grid', 'tree' ],\n        accessibleNameRequired: false\n      },\n      treeitem: {\n        type: 'widget',\n        requiredContext: [ 'group', 'tree' ],\n        allowedAttrs: [ 'aria-checked', 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-selected', 'aria-setsize' ],\n        superclassRole: [ 'listitem', 'option' ],\n        accessibleNameRequired: true,\n        nameFromContent: true\n      },\n      widget: {\n        type: 'abstract',\n        superclassRole: [ 'roletype' ]\n      },\n      window: {\n        type: 'abstract',\n        superclassRole: [ 'roletype' ]\n      }\n    };\n    var aria_roles_default = ariaRoles;\n    var dpubRoles = {\n      'doc-abstract': {\n        type: 'section',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      'doc-acknowledgments': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-afterword': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-appendix': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-backlink': {\n        type: 'link',\n        allowedAttrs: [ 'aria-expanded' ],\n        nameFromContent: true,\n        superclassRole: [ 'link' ]\n      },\n      'doc-biblioentry': {\n        type: 'listitem',\n        allowedAttrs: [ 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize' ],\n        superclassRole: [ 'listitem' ],\n        deprecated: true\n      },\n      'doc-bibliography': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-biblioref': {\n        type: 'link',\n        allowedAttrs: [ 'aria-expanded' ],\n        nameFromContent: true,\n        superclassRole: [ 'link' ]\n      },\n      'doc-chapter': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-colophon': {\n        type: 'section',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      'doc-conclusion': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-cover': {\n        type: 'img',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'img' ]\n      },\n      'doc-credit': {\n        type: 'section',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      'doc-credits': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-dedication': {\n        type: 'section',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      'doc-endnote': {\n        type: 'listitem',\n        allowedAttrs: [ 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize' ],\n        superclassRole: [ 'listitem' ],\n        deprecated: true\n      },\n      'doc-endnotes': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-epigraph': {\n        type: 'section',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      'doc-epilogue': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-errata': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-example': {\n        type: 'section',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      'doc-footnote': {\n        type: 'section',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      'doc-foreword': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-glossary': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-glossref': {\n        type: 'link',\n        allowedAttrs: [ 'aria-expanded' ],\n        nameFromContent: true,\n        superclassRole: [ 'link' ]\n      },\n      'doc-index': {\n        type: 'navigation',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'navigation' ]\n      },\n      'doc-introduction': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-noteref': {\n        type: 'link',\n        allowedAttrs: [ 'aria-expanded' ],\n        nameFromContent: true,\n        superclassRole: [ 'link' ]\n      },\n      'doc-notice': {\n        type: 'note',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'note' ]\n      },\n      'doc-pagebreak': {\n        type: 'separator',\n        allowedAttrs: [ 'aria-expanded', 'aria-orientation' ],\n        superclassRole: [ 'separator' ],\n        childrenPresentational: true\n      },\n      'doc-pagelist': {\n        type: 'navigation',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'navigation' ]\n      },\n      'doc-part': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-preface': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-prologue': {\n        type: 'landmark',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'landmark' ]\n      },\n      'doc-pullquote': {\n        type: 'none',\n        superclassRole: [ 'none' ]\n      },\n      'doc-qna': {\n        type: 'section',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'section' ]\n      },\n      'doc-subtitle': {\n        type: 'sectionhead',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'sectionhead' ]\n      },\n      'doc-tip': {\n        type: 'note',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'note' ]\n      },\n      'doc-toc': {\n        type: 'navigation',\n        allowedAttrs: [ 'aria-expanded' ],\n        superclassRole: [ 'navigation' ]\n      }\n    };\n    var dpub_roles_default = dpubRoles;\n    var graphicsRoles = {\n      'graphics-document': {\n        type: 'structure',\n        superclassRole: [ 'document' ],\n        accessibleNameRequired: true\n      },\n      'graphics-object': {\n        type: 'structure',\n        superclassRole: [ 'group' ],\n        nameFromContent: true\n      },\n      'graphics-symbol': {\n        type: 'structure',\n        superclassRole: [ 'img' ],\n        accessibleNameRequired: true,\n        childrenPresentational: true\n      }\n    };\n    var graphics_roles_default = graphicsRoles;\n    var htmlElms = {\n      a: {\n        variant: {\n          href: {\n            matches: '[href]',\n            contentTypes: [ 'interactive', 'phrasing', 'flow' ],\n            allowedRoles: [ 'button', 'checkbox', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'radio', 'switch', 'tab', 'treeitem', 'doc-backlink', 'doc-biblioref', 'doc-glossref', 'doc-noteref' ],\n            namingMethods: [ 'subtreeText' ]\n          },\n          default: {\n            contentTypes: [ 'phrasing', 'flow' ],\n            allowedRoles: true\n          }\n        }\n      },\n      abbr: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      address: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: true\n      },\n      area: {\n        variant: {\n          href: {\n            matches: '[href]',\n            allowedRoles: false\n          },\n          default: {\n            allowedRoles: [ 'button', 'link' ]\n          }\n        },\n        contentTypes: [ 'phrasing', 'flow' ],\n        namingMethods: [ 'altText' ]\n      },\n      article: {\n        contentTypes: [ 'sectioning', 'flow' ],\n        allowedRoles: [ 'feed', 'presentation', 'none', 'document', 'application', 'main', 'region' ],\n        shadowRoot: true\n      },\n      aside: {\n        contentTypes: [ 'sectioning', 'flow' ],\n        allowedRoles: [ 'feed', 'note', 'presentation', 'none', 'region', 'search', 'doc-dedication', 'doc-example', 'doc-footnote', 'doc-glossary', 'doc-pullquote', 'doc-tip' ]\n      },\n      audio: {\n        variant: {\n          controls: {\n            matches: '[controls]',\n            contentTypes: [ 'interactive', 'embedded', 'phrasing', 'flow' ]\n          },\n          default: {\n            contentTypes: [ 'embedded', 'phrasing', 'flow' ]\n          }\n        },\n        allowedRoles: [ 'application' ],\n        chromiumRole: 'Audio'\n      },\n      b: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      base: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      bdi: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      bdo: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      blockquote: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: true,\n        shadowRoot: true\n      },\n      body: {\n        allowedRoles: false,\n        shadowRoot: true\n      },\n      br: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: [ 'presentation', 'none' ],\n        namingMethods: [ 'titleText', 'singleSpace' ]\n      },\n      button: {\n        contentTypes: [ 'interactive', 'phrasing', 'flow' ],\n        allowedRoles: [ 'checkbox', 'combobox', 'gridcell', 'link', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'radio', 'separator', 'slider', 'switch', 'tab', 'treeitem' ],\n        namingMethods: [ 'subtreeText' ]\n      },\n      canvas: {\n        allowedRoles: true,\n        contentTypes: [ 'embedded', 'phrasing', 'flow' ],\n        chromiumRole: 'Canvas'\n      },\n      caption: {\n        allowedRoles: false\n      },\n      cite: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      code: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      col: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      colgroup: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      data: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      datalist: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        noAriaAttrs: true,\n        implicitAttrs: {\n          'aria-multiselectable': 'false'\n        }\n      },\n      dd: {\n        allowedRoles: false\n      },\n      del: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      dfn: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      details: {\n        contentTypes: [ 'interactive', 'flow' ],\n        allowedRoles: false\n      },\n      dialog: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'alertdialog' ]\n      },\n      div: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: true,\n        shadowRoot: true\n      },\n      dl: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'group', 'list', 'presentation', 'none' ],\n        chromiumRole: 'DescriptionList'\n      },\n      dt: {\n        allowedRoles: [ 'listitem' ]\n      },\n      em: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      embed: {\n        contentTypes: [ 'interactive', 'embedded', 'phrasing', 'flow' ],\n        allowedRoles: [ 'application', 'document', 'img', 'presentation', 'none' ],\n        chromiumRole: 'EmbeddedObject'\n      },\n      fieldset: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'none', 'presentation', 'radiogroup' ],\n        namingMethods: [ 'fieldsetLegendText' ]\n      },\n      figcaption: {\n        allowedRoles: [ 'group', 'none', 'presentation' ]\n      },\n      figure: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: true,\n        namingMethods: [ 'figureText', 'titleText' ]\n      },\n      footer: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'group', 'none', 'presentation', 'doc-footnote' ],\n        shadowRoot: true\n      },\n      form: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'form', 'search', 'none', 'presentation' ]\n      },\n      h1: {\n        contentTypes: [ 'heading', 'flow' ],\n        allowedRoles: [ 'none', 'presentation', 'tab', 'doc-subtitle' ],\n        shadowRoot: true,\n        implicitAttrs: {\n          'aria-level': '1'\n        }\n      },\n      h2: {\n        contentTypes: [ 'heading', 'flow' ],\n        allowedRoles: [ 'none', 'presentation', 'tab', 'doc-subtitle' ],\n        shadowRoot: true,\n        implicitAttrs: {\n          'aria-level': '2'\n        }\n      },\n      h3: {\n        contentTypes: [ 'heading', 'flow' ],\n        allowedRoles: [ 'none', 'presentation', 'tab', 'doc-subtitle' ],\n        shadowRoot: true,\n        implicitAttrs: {\n          'aria-level': '3'\n        }\n      },\n      h4: {\n        contentTypes: [ 'heading', 'flow' ],\n        allowedRoles: [ 'none', 'presentation', 'tab', 'doc-subtitle' ],\n        shadowRoot: true,\n        implicitAttrs: {\n          'aria-level': '4'\n        }\n      },\n      h5: {\n        contentTypes: [ 'heading', 'flow' ],\n        allowedRoles: [ 'none', 'presentation', 'tab', 'doc-subtitle' ],\n        shadowRoot: true,\n        implicitAttrs: {\n          'aria-level': '5'\n        }\n      },\n      h6: {\n        contentTypes: [ 'heading', 'flow' ],\n        allowedRoles: [ 'none', 'presentation', 'tab', 'doc-subtitle' ],\n        shadowRoot: true,\n        implicitAttrs: {\n          'aria-level': '6'\n        }\n      },\n      head: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      header: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'group', 'none', 'presentation', 'doc-footnote' ],\n        shadowRoot: true\n      },\n      hgroup: {\n        contentTypes: [ 'heading', 'flow' ],\n        allowedRoles: true\n      },\n      hr: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'none', 'presentation', 'doc-pagebreak' ],\n        namingMethods: [ 'titleText', 'singleSpace' ]\n      },\n      html: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      i: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      iframe: {\n        contentTypes: [ 'interactive', 'embedded', 'phrasing', 'flow' ],\n        allowedRoles: [ 'application', 'document', 'img', 'none', 'presentation' ],\n        chromiumRole: 'Iframe'\n      },\n      img: {\n        variant: {\n          nonEmptyAlt: {\n            matches: [ {\n              attributes: {\n                alt: '/.+/'\n              }\n            }, {\n              hasAccessibleName: true\n            } ],\n            allowedRoles: [ 'button', 'checkbox', 'link', 'math', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'meter', 'option', 'progressbar', 'radio', 'scrollbar', 'separator', 'slider', 'switch', 'tab', 'treeitem', 'doc-cover' ]\n          },\n          usemap: {\n            matches: '[usemap]',\n            contentTypes: [ 'interactive', 'embedded', 'flow' ]\n          },\n          default: {\n            allowedRoles: [ 'presentation', 'none' ],\n            contentTypes: [ 'embedded', 'flow' ]\n          }\n        },\n        namingMethods: [ 'altText' ]\n      },\n      input: {\n        variant: {\n          button: {\n            matches: {\n              properties: {\n                type: 'button'\n              }\n            },\n            allowedRoles: [ 'checkbox', 'combobox', 'link', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'radio', 'switch', 'tab' ]\n          },\n          buttonType: {\n            matches: {\n              properties: {\n                type: [ 'button', 'submit', 'reset' ]\n              }\n            },\n            namingMethods: [ 'valueText', 'titleText', 'buttonDefaultText' ]\n          },\n          checkboxPressed: {\n            matches: {\n              properties: {\n                type: 'checkbox'\n              },\n              attributes: {\n                'aria-pressed': '/.*/'\n              }\n            },\n            allowedRoles: [ 'button', 'menuitemcheckbox', 'option', 'switch' ],\n            implicitAttrs: {\n              'aria-checked': 'false'\n            }\n          },\n          checkbox: {\n            matches: {\n              properties: {\n                type: 'checkbox'\n              },\n              attributes: {\n                'aria-pressed': null\n              }\n            },\n            allowedRoles: [ 'menuitemcheckbox', 'option', 'switch' ],\n            implicitAttrs: {\n              'aria-checked': 'false'\n            }\n          },\n          noRoles: {\n            matches: {\n              properties: {\n                type: [ 'color', 'date', 'datetime-local', 'file', 'month', 'number', 'password', 'range', 'reset', 'submit', 'time', 'week' ]\n              }\n            },\n            allowedRoles: false\n          },\n          hidden: {\n            matches: {\n              properties: {\n                type: 'hidden'\n              }\n            },\n            contentTypes: [ 'flow' ],\n            allowedRoles: false,\n            noAriaAttrs: true\n          },\n          image: {\n            matches: {\n              properties: {\n                type: 'image'\n              }\n            },\n            allowedRoles: [ 'link', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'radio', 'switch' ],\n            namingMethods: [ 'altText', 'valueText', 'labelText', 'titleText', 'buttonDefaultText' ]\n          },\n          radio: {\n            matches: {\n              properties: {\n                type: 'radio'\n              }\n            },\n            allowedRoles: [ 'menuitemradio' ],\n            implicitAttrs: {\n              'aria-checked': 'false'\n            }\n          },\n          textWithList: {\n            matches: {\n              properties: {\n                type: 'text'\n              },\n              attributes: {\n                list: '/.*/'\n              }\n            },\n            allowedRoles: false\n          },\n          default: {\n            contentTypes: [ 'interactive', 'flow' ],\n            allowedRoles: [ 'combobox', 'searchbox', 'spinbutton' ],\n            implicitAttrs: {\n              'aria-valuenow': ''\n            },\n            namingMethods: [ 'labelText', 'placeholderText' ]\n          }\n        }\n      },\n      ins: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      kbd: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      label: {\n        contentTypes: [ 'interactive', 'phrasing', 'flow' ],\n        allowedRoles: false,\n        chromiumRole: 'Label'\n      },\n      legend: {\n        allowedRoles: false\n      },\n      li: {\n        allowedRoles: [ 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'none', 'presentation', 'radio', 'separator', 'tab', 'treeitem', 'doc-biblioentry', 'doc-endnote' ],\n        implicitAttrs: {\n          'aria-setsize': '1',\n          'aria-posinset': '1'\n        }\n      },\n      link: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      main: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: false,\n        shadowRoot: true\n      },\n      map: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      math: {\n        contentTypes: [ 'embedded', 'phrasing', 'flow' ],\n        allowedRoles: false\n      },\n      mark: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      menu: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'directory', 'group', 'listbox', 'menu', 'menubar', 'none', 'presentation', 'radiogroup', 'tablist', 'toolbar', 'tree' ]\n      },\n      meta: {\n        variant: {\n          itemprop: {\n            matches: '[itemprop]',\n            contentTypes: [ 'phrasing', 'flow' ]\n          }\n        },\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      meter: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        chromiumRole: 'progressbar'\n      },\n      nav: {\n        contentTypes: [ 'sectioning', 'flow' ],\n        allowedRoles: [ 'doc-index', 'doc-pagelist', 'doc-toc', 'menu', 'menubar', 'none', 'presentation', 'tablist' ],\n        shadowRoot: true\n      },\n      noscript: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      object: {\n        variant: {\n          usemap: {\n            matches: '[usemap]',\n            contentTypes: [ 'interactive', 'embedded', 'phrasing', 'flow' ]\n          },\n          default: {\n            contentTypes: [ 'embedded', 'phrasing', 'flow' ]\n          }\n        },\n        allowedRoles: [ 'application', 'document', 'img' ],\n        chromiumRole: 'PluginObject'\n      },\n      ol: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'directory', 'group', 'listbox', 'menu', 'menubar', 'none', 'presentation', 'radiogroup', 'tablist', 'toolbar', 'tree' ]\n      },\n      optgroup: {\n        allowedRoles: false\n      },\n      option: {\n        allowedRoles: false,\n        implicitAttrs: {\n          'aria-selected': 'false'\n        }\n      },\n      output: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true,\n        namingMethods: [ 'subtreeText' ]\n      },\n      p: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: true,\n        shadowRoot: true\n      },\n      param: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      picture: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      pre: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: true\n      },\n      progress: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        implicitAttrs: {\n          'aria-valuemax': '100',\n          'aria-valuemin': '0',\n          'aria-valuenow': '0'\n        }\n      },\n      q: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      rp: {\n        allowedRoles: true\n      },\n      rt: {\n        allowedRoles: true\n      },\n      ruby: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      s: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      samp: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      script: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      search: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'form', 'group', 'none', 'presentation', 'region', 'search' ]\n      },\n      section: {\n        contentTypes: [ 'sectioning', 'flow' ],\n        allowedRoles: [ 'alert', 'alertdialog', 'application', 'banner', 'complementary', 'contentinfo', 'dialog', 'document', 'feed', 'group', 'log', 'main', 'marquee', 'navigation', 'none', 'note', 'presentation', 'search', 'status', 'tabpanel', 'doc-abstract', 'doc-acknowledgments', 'doc-afterword', 'doc-appendix', 'doc-bibliography', 'doc-chapter', 'doc-colophon', 'doc-conclusion', 'doc-credit', 'doc-credits', 'doc-dedication', 'doc-endnotes', 'doc-epigraph', 'doc-epilogue', 'doc-errata', 'doc-example', 'doc-foreword', 'doc-glossary', 'doc-index', 'doc-introduction', 'doc-notice', 'doc-pagelist', 'doc-part', 'doc-preface', 'doc-prologue', 'doc-pullquote', 'doc-qna', 'doc-toc' ],\n        shadowRoot: true\n      },\n      select: {\n        variant: {\n          combobox: {\n            matches: {\n              attributes: {\n                multiple: null,\n                size: [ null, '1' ]\n              }\n            },\n            allowedRoles: [ 'menu' ]\n          },\n          default: {\n            allowedRoles: false\n          }\n        },\n        contentTypes: [ 'interactive', 'phrasing', 'flow' ],\n        implicitAttrs: {\n          'aria-valuenow': ''\n        },\n        namingMethods: [ 'labelText' ]\n      },\n      slot: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      small: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      source: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      span: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true,\n        shadowRoot: true\n      },\n      strong: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      style: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      svg: {\n        contentTypes: [ 'embedded', 'phrasing', 'flow' ],\n        allowedRoles: true,\n        chromiumRole: 'SVGRoot',\n        namingMethods: [ 'svgTitleText' ]\n      },\n      sub: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      summary: {\n        allowedRoles: false,\n        namingMethods: [ 'subtreeText' ]\n      },\n      sup: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      table: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: true,\n        namingMethods: [ 'tableCaptionText', 'tableSummaryText' ]\n      },\n      tbody: {\n        allowedRoles: true\n      },\n      template: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      textarea: {\n        contentTypes: [ 'interactive', 'phrasing', 'flow' ],\n        allowedRoles: false,\n        implicitAttrs: {\n          'aria-valuenow': '',\n          'aria-multiline': 'true'\n        },\n        namingMethods: [ 'labelText', 'placeholderText' ]\n      },\n      tfoot: {\n        allowedRoles: true\n      },\n      thead: {\n        allowedRoles: true\n      },\n      time: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      title: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      td: {\n        allowedRoles: true\n      },\n      th: {\n        allowedRoles: true\n      },\n      tr: {\n        allowedRoles: true\n      },\n      track: {\n        allowedRoles: false,\n        noAriaAttrs: true\n      },\n      u: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      ul: {\n        contentTypes: [ 'flow' ],\n        allowedRoles: [ 'directory', 'group', 'listbox', 'menu', 'menubar', 'none', 'presentation', 'radiogroup', 'tablist', 'toolbar', 'tree' ]\n      },\n      var: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: true\n      },\n      video: {\n        variant: {\n          controls: {\n            matches: '[controls]',\n            contentTypes: [ 'interactive', 'embedded', 'phrasing', 'flow' ]\n          },\n          default: {\n            contentTypes: [ 'embedded', 'phrasing', 'flow' ]\n          }\n        },\n        allowedRoles: [ 'application' ],\n        chromiumRole: 'video'\n      },\n      wbr: {\n        contentTypes: [ 'phrasing', 'flow' ],\n        allowedRoles: [ 'presentation', 'none' ]\n      }\n    };\n    var html_elms_default = htmlElms;\n    var cssColors = {\n      aliceblue: [ 240, 248, 255 ],\n      antiquewhite: [ 250, 235, 215 ],\n      aqua: [ 0, 255, 255 ],\n      aquamarine: [ 127, 255, 212 ],\n      azure: [ 240, 255, 255 ],\n      beige: [ 245, 245, 220 ],\n      bisque: [ 255, 228, 196 ],\n      black: [ 0, 0, 0 ],\n      blanchedalmond: [ 255, 235, 205 ],\n      blue: [ 0, 0, 255 ],\n      blueviolet: [ 138, 43, 226 ],\n      brown: [ 165, 42, 42 ],\n      burlywood: [ 222, 184, 135 ],\n      cadetblue: [ 95, 158, 160 ],\n      chartreuse: [ 127, 255, 0 ],\n      chocolate: [ 210, 105, 30 ],\n      coral: [ 255, 127, 80 ],\n      cornflowerblue: [ 100, 149, 237 ],\n      cornsilk: [ 255, 248, 220 ],\n      crimson: [ 220, 20, 60 ],\n      cyan: [ 0, 255, 255 ],\n      darkblue: [ 0, 0, 139 ],\n      darkcyan: [ 0, 139, 139 ],\n      darkgoldenrod: [ 184, 134, 11 ],\n      darkgray: [ 169, 169, 169 ],\n      darkgreen: [ 0, 100, 0 ],\n      darkgrey: [ 169, 169, 169 ],\n      darkkhaki: [ 189, 183, 107 ],\n      darkmagenta: [ 139, 0, 139 ],\n      darkolivegreen: [ 85, 107, 47 ],\n      darkorange: [ 255, 140, 0 ],\n      darkorchid: [ 153, 50, 204 ],\n      darkred: [ 139, 0, 0 ],\n      darksalmon: [ 233, 150, 122 ],\n      darkseagreen: [ 143, 188, 143 ],\n      darkslateblue: [ 72, 61, 139 ],\n      darkslategray: [ 47, 79, 79 ],\n      darkslategrey: [ 47, 79, 79 ],\n      darkturquoise: [ 0, 206, 209 ],\n      darkviolet: [ 148, 0, 211 ],\n      deeppink: [ 255, 20, 147 ],\n      deepskyblue: [ 0, 191, 255 ],\n      dimgray: [ 105, 105, 105 ],\n      dimgrey: [ 105, 105, 105 ],\n      dodgerblue: [ 30, 144, 255 ],\n      firebrick: [ 178, 34, 34 ],\n      floralwhite: [ 255, 250, 240 ],\n      forestgreen: [ 34, 139, 34 ],\n      fuchsia: [ 255, 0, 255 ],\n      gainsboro: [ 220, 220, 220 ],\n      ghostwhite: [ 248, 248, 255 ],\n      gold: [ 255, 215, 0 ],\n      goldenrod: [ 218, 165, 32 ],\n      gray: [ 128, 128, 128 ],\n      green: [ 0, 128, 0 ],\n      greenyellow: [ 173, 255, 47 ],\n      grey: [ 128, 128, 128 ],\n      honeydew: [ 240, 255, 240 ],\n      hotpink: [ 255, 105, 180 ],\n      indianred: [ 205, 92, 92 ],\n      indigo: [ 75, 0, 130 ],\n      ivory: [ 255, 255, 240 ],\n      khaki: [ 240, 230, 140 ],\n      lavender: [ 230, 230, 250 ],\n      lavenderblush: [ 255, 240, 245 ],\n      lawngreen: [ 124, 252, 0 ],\n      lemonchiffon: [ 255, 250, 205 ],\n      lightblue: [ 173, 216, 230 ],\n      lightcoral: [ 240, 128, 128 ],\n      lightcyan: [ 224, 255, 255 ],\n      lightgoldenrodyellow: [ 250, 250, 210 ],\n      lightgray: [ 211, 211, 211 ],\n      lightgreen: [ 144, 238, 144 ],\n      lightgrey: [ 211, 211, 211 ],\n      lightpink: [ 255, 182, 193 ],\n      lightsalmon: [ 255, 160, 122 ],\n      lightseagreen: [ 32, 178, 170 ],\n      lightskyblue: [ 135, 206, 250 ],\n      lightslategray: [ 119, 136, 153 ],\n      lightslategrey: [ 119, 136, 153 ],\n      lightsteelblue: [ 176, 196, 222 ],\n      lightyellow: [ 255, 255, 224 ],\n      lime: [ 0, 255, 0 ],\n      limegreen: [ 50, 205, 50 ],\n      linen: [ 250, 240, 230 ],\n      magenta: [ 255, 0, 255 ],\n      maroon: [ 128, 0, 0 ],\n      mediumaquamarine: [ 102, 205, 170 ],\n      mediumblue: [ 0, 0, 205 ],\n      mediumorchid: [ 186, 85, 211 ],\n      mediumpurple: [ 147, 112, 219 ],\n      mediumseagreen: [ 60, 179, 113 ],\n      mediumslateblue: [ 123, 104, 238 ],\n      mediumspringgreen: [ 0, 250, 154 ],\n      mediumturquoise: [ 72, 209, 204 ],\n      mediumvioletred: [ 199, 21, 133 ],\n      midnightblue: [ 25, 25, 112 ],\n      mintcream: [ 245, 255, 250 ],\n      mistyrose: [ 255, 228, 225 ],\n      moccasin: [ 255, 228, 181 ],\n      navajowhite: [ 255, 222, 173 ],\n      navy: [ 0, 0, 128 ],\n      oldlace: [ 253, 245, 230 ],\n      olive: [ 128, 128, 0 ],\n      olivedrab: [ 107, 142, 35 ],\n      orange: [ 255, 165, 0 ],\n      orangered: [ 255, 69, 0 ],\n      orchid: [ 218, 112, 214 ],\n      palegoldenrod: [ 238, 232, 170 ],\n      palegreen: [ 152, 251, 152 ],\n      paleturquoise: [ 175, 238, 238 ],\n      palevioletred: [ 219, 112, 147 ],\n      papayawhip: [ 255, 239, 213 ],\n      peachpuff: [ 255, 218, 185 ],\n      peru: [ 205, 133, 63 ],\n      pink: [ 255, 192, 203 ],\n      plum: [ 221, 160, 221 ],\n      powderblue: [ 176, 224, 230 ],\n      purple: [ 128, 0, 128 ],\n      rebeccapurple: [ 102, 51, 153 ],\n      red: [ 255, 0, 0 ],\n      rosybrown: [ 188, 143, 143 ],\n      royalblue: [ 65, 105, 225 ],\n      saddlebrown: [ 139, 69, 19 ],\n      salmon: [ 250, 128, 114 ],\n      sandybrown: [ 244, 164, 96 ],\n      seagreen: [ 46, 139, 87 ],\n      seashell: [ 255, 245, 238 ],\n      sienna: [ 160, 82, 45 ],\n      silver: [ 192, 192, 192 ],\n      skyblue: [ 135, 206, 235 ],\n      slateblue: [ 106, 90, 205 ],\n      slategray: [ 112, 128, 144 ],\n      slategrey: [ 112, 128, 144 ],\n      snow: [ 255, 250, 250 ],\n      springgreen: [ 0, 255, 127 ],\n      steelblue: [ 70, 130, 180 ],\n      tan: [ 210, 180, 140 ],\n      teal: [ 0, 128, 128 ],\n      thistle: [ 216, 191, 216 ],\n      tomato: [ 255, 99, 71 ],\n      turquoise: [ 64, 224, 208 ],\n      violet: [ 238, 130, 238 ],\n      wheat: [ 245, 222, 179 ],\n      white: [ 255, 255, 255 ],\n      whitesmoke: [ 245, 245, 245 ],\n      yellow: [ 255, 255, 0 ],\n      yellowgreen: [ 154, 205, 50 ]\n    };\n    var css_colors_default = cssColors;\n    var originals = {\n      ariaAttrs: aria_attrs_default,\n      ariaRoles: _extends({}, aria_roles_default, dpub_roles_default, graphics_roles_default),\n      htmlElms: html_elms_default,\n      cssColors: css_colors_default\n    };\n    var standards = _extends({}, originals);\n    function configureStandards(config) {\n      Object.keys(standards).forEach(function(propName) {\n        if (config[propName]) {\n          standards[propName] = deep_merge_default(standards[propName], config[propName]);\n        }\n      });\n    }\n    function resetStandards() {\n      Object.keys(standards).forEach(function(propName) {\n        standards[propName] = originals[propName];\n      });\n    }\n    var standards_default = standards;\n    function isUnsupportedRole(role) {\n      var roleDefinition = standards_default.ariaRoles[role];\n      return roleDefinition ? !!roleDefinition.unsupported : false;\n    }\n    var is_unsupported_role_default = isUnsupportedRole;\n    function isValidRole(role) {\n      var _ref26 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, allowAbstract = _ref26.allowAbstract, _ref26$flagUnsupporte = _ref26.flagUnsupported, flagUnsupported = _ref26$flagUnsupporte === void 0 ? false : _ref26$flagUnsupporte;\n      var roleDefinition = standards_default.ariaRoles[role];\n      var isRoleUnsupported = is_unsupported_role_default(role);\n      if (!roleDefinition || flagUnsupported && isRoleUnsupported) {\n        return false;\n      }\n      return allowAbstract ? true : roleDefinition.type !== 'abstract';\n    }\n    var is_valid_role_default = isValidRole;\n    function getExplicitRole(vNode) {\n      var _ref27 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, fallback = _ref27.fallback, abstracts = _ref27.abstracts, dpub = _ref27.dpub;\n      vNode = vNode instanceof abstract_virtual_node_default ? vNode : get_node_from_tree_default(vNode);\n      if (vNode.props.nodeType !== 1) {\n        return null;\n      }\n      var roleAttr = (vNode.attr('role') || '').trim().toLowerCase();\n      var roleList = fallback ? token_list_default(roleAttr) : [ roleAttr ];\n      var firstValidRole = roleList.find(function(role) {\n        if (!dpub && role.substr(0, 4) === 'doc-') {\n          return false;\n        }\n        return is_valid_role_default(role, {\n          allowAbstract: abstracts\n        });\n      });\n      return firstValidRole || null;\n    }\n    var get_explicit_role_default = getExplicitRole;\n    function getElementsByContentType(type2) {\n      return Object.keys(standards_default.htmlElms).filter(function(nodeName2) {\n        var elm = standards_default.htmlElms[nodeName2];\n        if (elm.contentTypes) {\n          return elm.contentTypes.includes(type2);\n        }\n        if (!elm.variant) {\n          return false;\n        }\n        if (elm.variant['default'] && elm.variant['default'].contentTypes) {\n          return elm.variant['default'].contentTypes.includes(type2);\n        }\n        return false;\n      });\n    }\n    var get_elements_by_content_type_default = getElementsByContentType;\n    function getGlobalAriaAttrs() {\n      return cache_default.get('globalAriaAttrs', function() {\n        return Object.keys(standards_default.ariaAttrs).filter(function(attrName) {\n          return standards_default.ariaAttrs[attrName].global;\n        });\n      });\n    }\n    var get_global_aria_attrs_default = getGlobalAriaAttrs;\n    function toGrid(node) {\n      var table = [];\n      var rows = node.rows;\n      for (var _i9 = 0, rowLength = rows.length; _i9 < rowLength; _i9++) {\n        var cells = rows[_i9].cells;\n        table[_i9] = table[_i9] || [];\n        var columnIndex = 0;\n        for (var j = 0, cellLength = cells.length; j < cellLength; j++) {\n          for (var colSpan = 0; colSpan < cells[j].colSpan; colSpan++) {\n            var rowspanAttr = cells[j].getAttribute('rowspan');\n            var rowspanValue = parseInt(rowspanAttr) === 0 || cells[j].rowspan === 0 ? rows.length : cells[j].rowSpan;\n            for (var rowSpan = 0; rowSpan < rowspanValue; rowSpan++) {\n              table[_i9 + rowSpan] = table[_i9 + rowSpan] || [];\n              while (table[_i9 + rowSpan][columnIndex]) {\n                columnIndex++;\n              }\n              table[_i9 + rowSpan][columnIndex] = cells[j];\n            }\n            columnIndex++;\n          }\n        }\n      }\n      return table;\n    }\n    var to_grid_default = memoize_default(toGrid);\n    function getCellPosition(cell, tableGrid) {\n      var rowIndex, index;\n      if (!tableGrid) {\n        tableGrid = to_grid_default(find_up_default(cell, 'table'));\n      }\n      for (rowIndex = 0; rowIndex < tableGrid.length; rowIndex++) {\n        if (tableGrid[rowIndex]) {\n          index = tableGrid[rowIndex].indexOf(cell);\n          if (index !== -1) {\n            return {\n              x: index,\n              y: rowIndex\n            };\n          }\n        }\n      }\n    }\n    var get_cell_position_default = memoize_default(getCellPosition);\n    function _getScope(el) {\n      var _nodeLookup9 = _nodeLookup(el), vNode = _nodeLookup9.vNode, cell = _nodeLookup9.domNode;\n      var scope = vNode.attr('scope');\n      var role = vNode.attr('role');\n      if (![ 'td', 'th' ].includes(vNode.props.nodeName)) {\n        throw new TypeError('Expected TD or TH element');\n      }\n      if (role === 'columnheader') {\n        return 'col';\n      } else if (role === 'rowheader') {\n        return 'row';\n      } else if (scope === 'col' || scope === 'row') {\n        return scope;\n      } else if (vNode.props.nodeName !== 'th') {\n        return false;\n      } else if (!vNode.actualNode) {\n        return 'auto';\n      }\n      var tableGrid = to_grid_default(find_up_default(cell, 'table'));\n      var pos = get_cell_position_default(cell, tableGrid);\n      var headerRow = tableGrid[pos.y].every(function(node) {\n        return node.nodeName.toUpperCase() === 'TH';\n      });\n      if (headerRow) {\n        return 'col';\n      }\n      var headerCol = tableGrid.map(function(col) {\n        return col[pos.x];\n      }).every(function(node) {\n        return node && node.nodeName.toUpperCase() === 'TH';\n      });\n      if (headerCol) {\n        return 'row';\n      }\n      return 'auto';\n    }\n    function isColumnHeader(element) {\n      return [ 'col', 'auto' ].indexOf(_getScope(element)) !== -1;\n    }\n    var is_column_header_default = isColumnHeader;\n    function isRowHeader(cell) {\n      return [ 'row', 'auto' ].includes(_getScope(cell));\n    }\n    var is_row_header_default = isRowHeader;\n    function sanitize(str) {\n      if (!str) {\n        return '';\n      }\n      return str.replace(/\\r\\n/g, '\\n').replace(/\\u00A0/g, ' ').replace(/[\\s]{2,}/g, ' ').trim();\n    }\n    var sanitize_default = sanitize;\n    var getSectioningContentSelector = function getSectioningContentSelector() {\n      return cache_default.get('sectioningContentSelector', function() {\n        return get_elements_by_content_type_default('sectioning').map(function(nodeName2) {\n          return ''.concat(nodeName2, ':not([role])');\n        }).join(', ') + ' , [role=article], [role=complementary], [role=navigation], [role=region]';\n      });\n    };\n    var getSectioningContentPlusMainSelector = function getSectioningContentPlusMainSelector() {\n      return cache_default.get('sectioningContentPlusMainSelector', function() {\n        return getSectioningContentSelector() + ' , main:not([role]), [role=main]';\n      });\n    };\n    function hasAccessibleName(vNode) {\n      var _ref28 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref28$checkTitle = _ref28.checkTitle, checkTitle = _ref28$checkTitle === void 0 ? false : _ref28$checkTitle;\n      return !!(sanitize_default(arialabelledby_text_default(vNode)) || sanitize_default(_arialabelText(vNode)) || checkTitle && (vNode === null || vNode === void 0 ? void 0 : vNode.props.nodeType) === 1 && sanitize_default(vNode.attr('title')));\n    }\n    var implicitHtmlRoles = {\n      a: function a(vNode) {\n        return vNode.hasAttr('href') ? 'link' : null;\n      },\n      area: function area(vNode) {\n        return vNode.hasAttr('href') ? 'link' : null;\n      },\n      article: 'article',\n      aside: function aside(vNode) {\n        if (closest_default(vNode.parent, getSectioningContentSelector()) && !hasAccessibleName(vNode, {\n          checkTitle: true\n        })) {\n          return null;\n        }\n        return 'complementary';\n      },\n      body: 'document',\n      button: 'button',\n      datalist: 'listbox',\n      dd: 'definition',\n      dfn: 'term',\n      details: 'group',\n      dialog: 'dialog',\n      dt: 'term',\n      fieldset: 'group',\n      figure: 'figure',\n      footer: function footer(vNode) {\n        var sectioningElement = closest_default(vNode, getSectioningContentPlusMainSelector());\n        return !sectioningElement ? 'contentinfo' : null;\n      },\n      form: function form(vNode) {\n        return hasAccessibleName(vNode) ? 'form' : null;\n      },\n      h1: 'heading',\n      h2: 'heading',\n      h3: 'heading',\n      h4: 'heading',\n      h5: 'heading',\n      h6: 'heading',\n      header: function header(vNode) {\n        var sectioningElement = closest_default(vNode, getSectioningContentPlusMainSelector());\n        return !sectioningElement ? 'banner' : null;\n      },\n      hr: 'separator',\n      img: function img(vNode) {\n        var emptyAlt = vNode.hasAttr('alt') && !vNode.attr('alt');\n        var hasGlobalAria = get_global_aria_attrs_default().find(function(attr) {\n          return vNode.hasAttr(attr);\n        });\n        return emptyAlt && !hasGlobalAria && !_isFocusable(vNode) ? 'presentation' : 'img';\n      },\n      input: function input(vNode) {\n        var suggestionsSourceElement;\n        if (vNode.hasAttr('list')) {\n          var listElement = idrefs_default(vNode.actualNode, 'list').filter(function(node) {\n            return !!node;\n          })[0];\n          suggestionsSourceElement = listElement && listElement.nodeName.toLowerCase() === 'datalist';\n        }\n        switch (vNode.props.type) {\n         case 'checkbox':\n          return 'checkbox';\n\n         case 'number':\n          return 'spinbutton';\n\n         case 'radio':\n          return 'radio';\n\n         case 'range':\n          return 'slider';\n\n         case 'search':\n          return !suggestionsSourceElement ? 'searchbox' : 'combobox';\n\n         case 'button':\n         case 'image':\n         case 'reset':\n         case 'submit':\n          return 'button';\n\n         case 'text':\n         case 'tel':\n         case 'url':\n         case 'email':\n         case '':\n          return !suggestionsSourceElement ? 'textbox' : 'combobox';\n\n         default:\n          return 'textbox';\n        }\n      },\n      li: 'listitem',\n      main: 'main',\n      math: 'math',\n      menu: 'list',\n      meter: 'meter',\n      nav: 'navigation',\n      ol: 'list',\n      optgroup: 'group',\n      option: 'option',\n      output: 'status',\n      progress: 'progressbar',\n      search: 'search',\n      section: function section(vNode) {\n        return hasAccessibleName(vNode) ? 'region' : null;\n      },\n      select: function select(vNode) {\n        return vNode.hasAttr('multiple') || parseInt(vNode.attr('size')) > 1 ? 'listbox' : 'combobox';\n      },\n      summary: 'button',\n      table: 'table',\n      tbody: 'rowgroup',\n      td: function td(vNode) {\n        var table = closest_default(vNode, 'table');\n        var role = get_explicit_role_default(table);\n        return [ 'grid', 'treegrid' ].includes(role) ? 'gridcell' : 'cell';\n      },\n      textarea: 'textbox',\n      tfoot: 'rowgroup',\n      th: function th(vNode) {\n        if (is_column_header_default(vNode)) {\n          return 'columnheader';\n        }\n        if (is_row_header_default(vNode)) {\n          return 'rowheader';\n        }\n      },\n      thead: 'rowgroup',\n      tr: 'row',\n      ul: 'list'\n    };\n    var implicit_html_roles_default = implicitHtmlRoles;\n    function fromPrimative(someString, matcher) {\n      var matcherType = _typeof(matcher);\n      if (Array.isArray(matcher) && typeof someString !== 'undefined') {\n        return matcher.includes(someString);\n      }\n      if (matcherType === 'function') {\n        return !!matcher(someString);\n      }\n      if (someString !== null && someString !== void 0) {\n        if (matcher instanceof RegExp) {\n          return matcher.test(someString);\n        }\n        if (/^\\/.*\\/$/.test(matcher)) {\n          var pattern = matcher.substring(1, matcher.length - 1);\n          return new RegExp(pattern).test(someString);\n        }\n      }\n      return matcher === someString;\n    }\n    var from_primative_default = fromPrimative;\n    function hasAccessibleName2(vNode, matcher) {\n      return from_primative_default(!!_accessibleTextVirtual(vNode), matcher);\n    }\n    var has_accessible_name_default = hasAccessibleName2;\n    function fromFunction(getValue, matcher) {\n      var matcherType = _typeof(matcher);\n      if (matcherType !== 'object' || Array.isArray(matcher) || matcher instanceof RegExp) {\n        throw new Error('Expect matcher to be an object');\n      }\n      return Object.keys(matcher).every(function(propName) {\n        return from_primative_default(getValue(propName), matcher[propName]);\n      });\n    }\n    var from_function_default = fromFunction;\n    function attributes(vNode, matcher) {\n      vNode = _nodeLookup(vNode).vNode;\n      return from_function_default(function(attrName) {\n        return vNode.attr(attrName);\n      }, matcher);\n    }\n    var attributes_default = attributes;\n    function condition(arg, matcher) {\n      return !!matcher(arg);\n    }\n    function explicitRole(vNode, matcher) {\n      return from_primative_default(get_explicit_role_default(vNode), matcher);\n    }\n    var explicit_role_default = explicitRole;\n    function implicitRole(vNode, matcher) {\n      return from_primative_default(implicit_role_default(vNode), matcher);\n    }\n    var implicit_role_default2 = implicitRole;\n    function nodeName(vNode, matcher) {\n      vNode = _nodeLookup(vNode).vNode;\n      return from_primative_default(vNode.props.nodeName, matcher);\n    }\n    var node_name_default = nodeName;\n    function properties(vNode, matcher) {\n      vNode = _nodeLookup(vNode).vNode;\n      return from_function_default(function(propName) {\n        return vNode.props[propName];\n      }, matcher);\n    }\n    var properties_default = properties;\n    function semanticRole(vNode, matcher) {\n      return from_primative_default(get_role_default(vNode), matcher);\n    }\n    var semantic_role_default = semanticRole;\n    var matchers = {\n      hasAccessibleName: has_accessible_name_default,\n      attributes: attributes_default,\n      condition: condition,\n      explicitRole: explicit_role_default,\n      implicitRole: implicit_role_default2,\n      nodeName: node_name_default,\n      properties: properties_default,\n      semanticRole: semantic_role_default\n    };\n    function fromDefinition(vNode, definition) {\n      vNode = _nodeLookup(vNode).vNode;\n      if (Array.isArray(definition)) {\n        return definition.some(function(definitionItem) {\n          return fromDefinition(vNode, definitionItem);\n        });\n      }\n      if (typeof definition === 'string') {\n        return _matches(vNode, definition);\n      }\n      return Object.keys(definition).every(function(matcherName) {\n        if (!matchers[matcherName]) {\n          throw new Error('Unknown matcher type \"'.concat(matcherName, '\"'));\n        }\n        var matchMethod = matchers[matcherName];\n        var matcher = definition[matcherName];\n        return matchMethod(vNode, matcher);\n      });\n    }\n    var from_definition_default = fromDefinition;\n    function matches2(vNode, definition) {\n      return from_definition_default(vNode, definition);\n    }\n    var matches_default = matches2;\n    matches_default.hasAccessibleName = has_accessible_name_default;\n    matches_default.attributes = attributes_default;\n    matches_default.condition = condition;\n    matches_default.explicitRole = explicit_role_default;\n    matches_default.fromDefinition = from_definition_default;\n    matches_default.fromFunction = from_function_default;\n    matches_default.fromPrimative = from_primative_default;\n    matches_default.implicitRole = implicit_role_default2;\n    matches_default.nodeName = node_name_default;\n    matches_default.properties = properties_default;\n    matches_default.semanticRole = semantic_role_default;\n    var matches_default2 = matches_default;\n    function getElementSpec(vNode) {\n      var _ref29 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref29$noMatchAccessi = _ref29.noMatchAccessibleName, noMatchAccessibleName = _ref29$noMatchAccessi === void 0 ? false : _ref29$noMatchAccessi;\n      var standard = standards_default.htmlElms[vNode.props.nodeName];\n      if (!standard) {\n        return {};\n      }\n      if (!standard.variant) {\n        return standard;\n      }\n      var variant = standard.variant, spec = _objectWithoutProperties(standard, _excluded4);\n      for (var variantName in variant) {\n        if (!variant.hasOwnProperty(variantName) || variantName === 'default') {\n          continue;\n        }\n        var _variant$variantName = variant[variantName], matches4 = _variant$variantName.matches, props = _objectWithoutProperties(_variant$variantName, _excluded5);\n        var matchProperties = Array.isArray(matches4) ? matches4 : [ matches4 ];\n        for (var _i10 = 0; _i10 < matchProperties.length && noMatchAccessibleName; _i10++) {\n          if (matchProperties[_i10].hasOwnProperty('hasAccessibleName')) {\n            return standard;\n          }\n        }\n        if (matches_default2(vNode, matches4)) {\n          for (var propName in props) {\n            if (props.hasOwnProperty(propName)) {\n              spec[propName] = props[propName];\n            }\n          }\n        }\n      }\n      for (var _propName in variant['default']) {\n        if (variant['default'].hasOwnProperty(_propName) && typeof spec[_propName] === 'undefined') {\n          spec[_propName] = variant['default'][_propName];\n        }\n      }\n      return spec;\n    }\n    var get_element_spec_default = getElementSpec;\n    function implicitRole2(node) {\n      var _ref30 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, chromium = _ref30.chromium;\n      var vNode = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);\n      node = vNode.actualNode;\n      if (!vNode) {\n        throw new ReferenceError('Cannot get implicit role of a node outside the current scope.');\n      }\n      var nodeName2 = vNode.props.nodeName;\n      var role = implicit_html_roles_default[nodeName2];\n      if (!role && chromium) {\n        var _get_element_spec_def = get_element_spec_default(vNode), chromiumRole = _get_element_spec_def.chromiumRole;\n        return chromiumRole || null;\n      }\n      if (typeof role === 'function') {\n        return role(vNode);\n      }\n      return role || null;\n    }\n    var implicit_role_default = implicitRole2;\n    var inheritsPresentationChain = {\n      td: [ 'tr' ],\n      th: [ 'tr' ],\n      tr: [ 'thead', 'tbody', 'tfoot', 'table' ],\n      thead: [ 'table' ],\n      tbody: [ 'table' ],\n      tfoot: [ 'table' ],\n      li: [ 'ol', 'ul' ],\n      dt: [ 'dl', 'div' ],\n      dd: [ 'dl', 'div' ],\n      div: [ 'dl' ]\n    };\n    function getInheritedRole(vNode, explicitRoleOptions) {\n      var parentNodeNames = inheritsPresentationChain[vNode.props.nodeName];\n      if (!parentNodeNames) {\n        return null;\n      }\n      if (!vNode.parent) {\n        if (!vNode.actualNode) {\n          return null;\n        }\n        throw new ReferenceError('Cannot determine role presentational inheritance of a required parent outside the current scope.');\n      }\n      if (!parentNodeNames.includes(vNode.parent.props.nodeName)) {\n        return null;\n      }\n      var parentRole = get_explicit_role_default(vNode.parent, explicitRoleOptions);\n      if ([ 'none', 'presentation' ].includes(parentRole) && !hasConflictResolution(vNode.parent)) {\n        return parentRole;\n      }\n      if (parentRole) {\n        return null;\n      }\n      return getInheritedRole(vNode.parent, explicitRoleOptions);\n    }\n    function resolveImplicitRole(vNode, _ref31) {\n      var chromium = _ref31.chromium, explicitRoleOptions = _objectWithoutProperties(_ref31, _excluded6);\n      var implicitRole3 = implicit_role_default(vNode, {\n        chromium: chromium\n      });\n      if (!implicitRole3) {\n        return null;\n      }\n      var presentationalRole = getInheritedRole(vNode, explicitRoleOptions);\n      if (presentationalRole) {\n        return presentationalRole;\n      }\n      return implicitRole3;\n    }\n    function hasConflictResolution(vNode) {\n      var hasGlobalAria = get_global_aria_attrs_default().some(function(attr) {\n        return vNode.hasAttr(attr);\n      });\n      return hasGlobalAria || _isFocusable(vNode);\n    }\n    function resolveRole(node) {\n      var _ref32 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var noImplicit = _ref32.noImplicit, roleOptions = _objectWithoutProperties(_ref32, _excluded7);\n      var _nodeLookup10 = _nodeLookup(node), vNode = _nodeLookup10.vNode;\n      if (vNode.props.nodeType !== 1) {\n        return null;\n      }\n      var explicitRole2 = get_explicit_role_default(vNode, roleOptions);\n      if (!explicitRole2) {\n        return noImplicit ? null : resolveImplicitRole(vNode, roleOptions);\n      }\n      if (![ 'presentation', 'none' ].includes(explicitRole2)) {\n        return explicitRole2;\n      }\n      if (hasConflictResolution(vNode)) {\n        return noImplicit ? null : resolveImplicitRole(vNode, roleOptions);\n      }\n      return explicitRole2;\n    }\n    function getRole(node) {\n      var _ref33 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var noPresentational = _ref33.noPresentational, options = _objectWithoutProperties(_ref33, _excluded8);\n      var role = resolveRole(node, options);\n      if (noPresentational && [ 'presentation', 'none' ].includes(role)) {\n        return null;\n      }\n      return role;\n    }\n    var get_role_default = getRole;\n    var alwaysTitleElements = [ 'iframe' ];\n    function titleText(node) {\n      var _nodeLookup11 = _nodeLookup(node), vNode = _nodeLookup11.vNode;\n      if (vNode.props.nodeType !== 1 || !node.hasAttr('title')) {\n        return '';\n      }\n      if (!matches_default(vNode, alwaysTitleElements) && [ 'none', 'presentation' ].includes(get_role_default(vNode))) {\n        return '';\n      }\n      return vNode.attr('title');\n    }\n    var title_text_default = titleText;\n    function namedFromContents(vNode) {\n      var _ref34 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, strict = _ref34.strict;\n      vNode = vNode instanceof abstract_virtual_node_default ? vNode : get_node_from_tree_default(vNode);\n      if (vNode.props.nodeType !== 1) {\n        return false;\n      }\n      var role = get_role_default(vNode);\n      var roleDef = standards_default.ariaRoles[role];\n      if (roleDef && roleDef.nameFromContent) {\n        return true;\n      }\n      if (strict) {\n        return false;\n      }\n      return !roleDef || [ 'presentation', 'none' ].includes(role);\n    }\n    var named_from_contents_default = namedFromContents;\n    function getOwnedVirtual(virtualNode) {\n      var actualNode = virtualNode.actualNode, children = virtualNode.children;\n      if (!children) {\n        throw new Error('getOwnedVirtual requires a virtual node');\n      }\n      if (virtualNode.hasAttr('aria-owns')) {\n        var owns = idrefs_default(actualNode, 'aria-owns').filter(function(element) {\n          return !!element;\n        }).map(function(element) {\n          return axe.utils.getNodeFromTree(element);\n        });\n        return [].concat(_toConsumableArray(children), _toConsumableArray(owns));\n      }\n      return _toConsumableArray(children);\n    }\n    var get_owned_virtual_default = getOwnedVirtual;\n    var unsupported_default = {\n      accessibleNameFromFieldValue: [ 'progressbar' ]\n    };\n    function _isVisibleToScreenReaders(vNode) {\n      vNode = _nodeLookup(vNode).vNode;\n      return isVisibleToScreenReadersVirtual(vNode);\n    }\n    var isVisibleToScreenReadersVirtual = memoize_default(function isVisibleToScreenReadersMemoized(vNode, isAncestor) {\n      if (ariaHidden(vNode) || _isInert(vNode, {\n        skipAncestors: true,\n        isAncestor: isAncestor\n      })) {\n        return false;\n      }\n      if (vNode.actualNode && vNode.props.nodeName === 'area') {\n        return !areaHidden(vNode, isVisibleToScreenReadersVirtual);\n      }\n      if (_isHiddenForEveryone(vNode, {\n        skipAncestors: true,\n        isAncestor: isAncestor\n      })) {\n        return false;\n      }\n      if (!vNode.parent) {\n        return true;\n      }\n      return isVisibleToScreenReadersVirtual(vNode.parent, true);\n    });\n    function visibleVirtual(element, screenReader, noRecursing) {\n      var _nodeLookup12 = _nodeLookup(element), vNode = _nodeLookup12.vNode;\n      var visibleMethod = screenReader ? _isVisibleToScreenReaders : _isVisibleOnScreen;\n      var visible2 = !element.actualNode || element.actualNode && visibleMethod(element);\n      var result = vNode.children.map(function(child) {\n        var _child$props = child.props, nodeType = _child$props.nodeType, nodeValue = _child$props.nodeValue;\n        if (nodeType === 3) {\n          if (nodeValue && visible2) {\n            return nodeValue;\n          }\n        } else if (!noRecursing) {\n          return visibleVirtual(child, screenReader);\n        }\n      }).join('');\n      return sanitize_default(result);\n    }\n    var visible_virtual_default = visibleVirtual;\n    var nonTextInputTypes = [ 'button', 'checkbox', 'color', 'file', 'hidden', 'image', 'password', 'radio', 'reset', 'submit' ];\n    function isNativeTextbox(node) {\n      node = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);\n      var nodeName2 = node.props.nodeName;\n      return nodeName2 === 'textarea' || nodeName2 === 'input' && !nonTextInputTypes.includes((node.attr('type') || '').toLowerCase());\n    }\n    var is_native_textbox_default = isNativeTextbox;\n    function isNativeSelect(node) {\n      node = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);\n      var nodeName2 = node.props.nodeName;\n      return nodeName2 === 'select';\n    }\n    var is_native_select_default = isNativeSelect;\n    function isAriaTextbox(node) {\n      var role = get_explicit_role_default(node);\n      return role === 'textbox';\n    }\n    var is_aria_textbox_default = isAriaTextbox;\n    function isAriaListbox(node) {\n      var role = get_explicit_role_default(node);\n      return role === 'listbox';\n    }\n    var is_aria_listbox_default = isAriaListbox;\n    function isAriaCombobox(node) {\n      var role = get_explicit_role_default(node);\n      return role === 'combobox';\n    }\n    var is_aria_combobox_default = isAriaCombobox;\n    var rangeRoles = [ 'progressbar', 'scrollbar', 'slider', 'spinbutton' ];\n    function isAriaRange(node) {\n      var role = get_explicit_role_default(node);\n      return rangeRoles.includes(role);\n    }\n    var is_aria_range_default = isAriaRange;\n    var controlValueRoles = [ 'textbox', 'progressbar', 'scrollbar', 'slider', 'spinbutton', 'combobox', 'listbox' ];\n    var _formControlValueMethods = {\n      nativeTextboxValue: nativeTextboxValue,\n      nativeSelectValue: nativeSelectValue,\n      ariaTextboxValue: ariaTextboxValue,\n      ariaListboxValue: ariaListboxValue,\n      ariaComboboxValue: ariaComboboxValue,\n      ariaRangeValue: ariaRangeValue\n    };\n    function formControlValue(virtualNode) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var actualNode = virtualNode.actualNode;\n      var unsupportedRoles = unsupported_default.accessibleNameFromFieldValue || [];\n      var role = get_role_default(virtualNode);\n      if (context.startNode === virtualNode || !controlValueRoles.includes(role) || unsupportedRoles.includes(role)) {\n        return '';\n      }\n      var valueMethods = Object.keys(_formControlValueMethods).map(function(name) {\n        return _formControlValueMethods[name];\n      });\n      var valueString = valueMethods.reduce(function(accName, step) {\n        return accName || step(virtualNode, context);\n      }, '');\n      if (context.debug) {\n        log_default(valueString || '{empty-value}', actualNode, context);\n      }\n      return valueString;\n    }\n    function nativeTextboxValue(node) {\n      var _nodeLookup13 = _nodeLookup(node), vNode = _nodeLookup13.vNode;\n      if (is_native_textbox_default(vNode)) {\n        return vNode.props.value || '';\n      }\n      return '';\n    }\n    function nativeSelectValue(node) {\n      var _nodeLookup14 = _nodeLookup(node), vNode = _nodeLookup14.vNode;\n      if (!is_native_select_default(vNode)) {\n        return '';\n      }\n      var options = query_selector_all_default(vNode, 'option');\n      var selectedOptions = options.filter(function(option) {\n        return option.props.selected;\n      });\n      if (!selectedOptions.length) {\n        selectedOptions.push(options[0]);\n      }\n      return selectedOptions.map(function(option) {\n        return visible_virtual_default(option);\n      }).join(' ') || '';\n    }\n    function ariaTextboxValue(node) {\n      var _nodeLookup15 = _nodeLookup(node), vNode = _nodeLookup15.vNode, domNode = _nodeLookup15.domNode;\n      if (!is_aria_textbox_default(vNode)) {\n        return '';\n      }\n      if (!domNode || domNode && !_isHiddenForEveryone(domNode)) {\n        return visible_virtual_default(vNode, true);\n      } else {\n        return domNode.textContent;\n      }\n    }\n    function ariaListboxValue(node, context) {\n      var _nodeLookup16 = _nodeLookup(node), vNode = _nodeLookup16.vNode;\n      if (!is_aria_listbox_default(vNode)) {\n        return '';\n      }\n      var selected = get_owned_virtual_default(vNode).filter(function(owned) {\n        return get_role_default(owned) === 'option' && owned.attr('aria-selected') === 'true';\n      });\n      if (selected.length === 0) {\n        return '';\n      }\n      return _accessibleTextVirtual(selected[0], context);\n    }\n    function ariaComboboxValue(node, context) {\n      var _nodeLookup17 = _nodeLookup(node), vNode = _nodeLookup17.vNode;\n      if (!is_aria_combobox_default(vNode)) {\n        return '';\n      }\n      var listbox = get_owned_virtual_default(vNode).filter(function(elm) {\n        return get_role_default(elm) === 'listbox';\n      })[0];\n      return listbox ? ariaListboxValue(listbox, context) : '';\n    }\n    function ariaRangeValue(node) {\n      var _nodeLookup18 = _nodeLookup(node), vNode = _nodeLookup18.vNode;\n      if (!is_aria_range_default(vNode) || !vNode.hasAttr('aria-valuenow')) {\n        return '';\n      }\n      var valueNow = +vNode.attr('aria-valuenow');\n      return !isNaN(valueNow) ? String(valueNow) : '0';\n    }\n    var form_control_value_default = formControlValue;\n    function subtreeText(virtualNode) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var alreadyProcessed2 = _accessibleTextVirtual.alreadyProcessed;\n      context.startNode = context.startNode || virtualNode;\n      var _context = context, strict = _context.strict, inControlContext = _context.inControlContext, inLabelledByContext = _context.inLabelledByContext;\n      var role = get_role_default(virtualNode);\n      var _get_element_spec_def2 = get_element_spec_default(virtualNode, {\n        noMatchAccessibleName: true\n      }), contentTypes = _get_element_spec_def2.contentTypes;\n      if (alreadyProcessed2(virtualNode, context) || virtualNode.props.nodeType !== 1 || contentTypes !== null && contentTypes !== void 0 && contentTypes.includes('embedded') || controlValueRoles.includes(role)) {\n        return '';\n      }\n      if (!context.subtreeDescendant && !context.inLabelledByContext && !named_from_contents_default(virtualNode, {\n        strict: strict\n      })) {\n        return '';\n      }\n      if (!strict) {\n        var subtreeDescendant = !inControlContext && !inLabelledByContext;\n        context = _extends({\n          subtreeDescendant: subtreeDescendant\n        }, context);\n      }\n      return get_owned_virtual_default(virtualNode).reduce(function(contentText, child) {\n        return appendAccessibleText(contentText, child, context);\n      }, '');\n    }\n    var phrasingElements = get_elements_by_content_type_default('phrasing').concat([ '#text' ]);\n    function appendAccessibleText(contentText, virtualNode, context) {\n      var nodeName2 = virtualNode.props.nodeName;\n      var contentTextAdd = _accessibleTextVirtual(virtualNode, context);\n      if (!contentTextAdd) {\n        return contentText;\n      }\n      if (!phrasingElements.includes(nodeName2)) {\n        if (contentTextAdd[0] !== ' ') {\n          contentTextAdd += ' ';\n        }\n        if (contentText && contentText[contentText.length - 1] !== ' ') {\n          contentTextAdd = ' ' + contentTextAdd;\n        }\n      }\n      return contentText + contentTextAdd;\n    }\n    var subtree_text_default = subtreeText;\n    function labelText(virtualNode) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var alreadyProcessed2 = _accessibleTextVirtual.alreadyProcessed;\n      if (context.inControlContext || context.inLabelledByContext || alreadyProcessed2(virtualNode, context)) {\n        return '';\n      }\n      if (!context.startNode) {\n        context.startNode = virtualNode;\n      }\n      var labelContext = _extends({\n        inControlContext: true\n      }, context);\n      var explicitLabels = getExplicitLabels(virtualNode);\n      var implicitLabel = closest_default(virtualNode, 'label');\n      var labels;\n      if (implicitLabel) {\n        labels = [].concat(_toConsumableArray(explicitLabels), [ implicitLabel.actualNode ]);\n        labels.sort(node_sorter_default);\n      } else {\n        labels = explicitLabels;\n      }\n      return labels.map(function(label3) {\n        return accessible_text_default(label3, labelContext);\n      }).filter(function(text) {\n        return text !== '';\n      }).join(' ');\n    }\n    function getExplicitLabels(virtualNode) {\n      if (!virtualNode.attr('id')) {\n        return [];\n      }\n      if (!virtualNode.actualNode) {\n        throw new TypeError('Cannot resolve explicit label reference for non-DOM nodes');\n      }\n      return find_elms_in_context_default({\n        elm: 'label',\n        attr: 'for',\n        value: virtualNode.attr('id'),\n        context: virtualNode.actualNode\n      });\n    }\n    var label_text_default = labelText;\n    var defaultButtonValues = {\n      submit: 'Submit',\n      image: 'Submit',\n      reset: 'Reset',\n      button: ''\n    };\n    var nativeTextMethods = {\n      valueText: function valueText(vNode) {\n        return vNode.props.value || '';\n      },\n      buttonDefaultText: function buttonDefaultText(vNode) {\n        return defaultButtonValues[vNode.props.type] || '';\n      },\n      tableCaptionText: descendantText.bind(null, 'caption'),\n      figureText: descendantText.bind(null, 'figcaption'),\n      svgTitleText: descendantText.bind(null, 'title'),\n      fieldsetLegendText: descendantText.bind(null, 'legend'),\n      altText: attrText.bind(null, 'alt'),\n      tableSummaryText: attrText.bind(null, 'summary'),\n      titleText: title_text_default,\n      subtreeText: subtree_text_default,\n      labelText: label_text_default,\n      singleSpace: function singleSpace() {\n        return ' ';\n      },\n      placeholderText: attrText.bind(null, 'placeholder')\n    };\n    function attrText(attr, vNode) {\n      return vNode.attr(attr) || '';\n    }\n    function descendantText(nodeName2, _ref35, context) {\n      var actualNode = _ref35.actualNode;\n      nodeName2 = nodeName2.toLowerCase();\n      var nodeNames2 = [ nodeName2, actualNode.nodeName.toLowerCase() ].join(',');\n      var candidate = actualNode.querySelector(nodeNames2);\n      if (!candidate || candidate.nodeName.toLowerCase() !== nodeName2) {\n        return '';\n      }\n      return accessible_text_default(candidate, context);\n    }\n    var native_text_methods_default = nativeTextMethods;\n    function _nativeTextAlternative(virtualNode) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var actualNode = virtualNode.actualNode;\n      if (virtualNode.props.nodeType !== 1 || [ 'presentation', 'none' ].includes(get_role_default(virtualNode))) {\n        return '';\n      }\n      var textMethods = findTextMethods(virtualNode);\n      var accessibleName = textMethods.reduce(function(accName, step) {\n        return accName || step(virtualNode, context);\n      }, '');\n      if (context.debug) {\n        axe.log(accessibleName || '{empty-value}', actualNode, context);\n      }\n      return accessibleName;\n    }\n    function findTextMethods(virtualNode) {\n      var elmSpec = get_element_spec_default(virtualNode, {\n        noMatchAccessibleName: true\n      });\n      var methods = elmSpec.namingMethods || [];\n      return methods.map(function(methodName) {\n        return native_text_methods_default[methodName];\n      });\n    }\n    function getUnicodeNonBmpRegExp() {\n      return /[\\u1D00-\\u1D7F\\u1D80-\\u1DBF\\u1DC0-\\u1DFF\\u20A0-\\u20CF\\u20D0-\\u20FF\\u2100-\\u214F\\u2150-\\u218F\\u2190-\\u21FF\\u2200-\\u22FF\\u2300-\\u23FF\\u2400-\\u243F\\u2440-\\u245F\\u2460-\\u24FF\\u2500-\\u257F\\u2580-\\u259F\\u25A0-\\u25FF\\u2600-\\u26FF\\u2700-\\u27BF\\uE000-\\uF8FF]/g;\n    }\n    function getPunctuationRegExp() {\n      return /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&\\xa3\\xa2\\xa5\\xa7\\u20ac()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~\\xb1]/g;\n    }\n    function getSupplementaryPrivateUseRegExp() {\n      return /[\\uDB80-\\uDBBF][\\uDC00-\\uDFFF]/g;\n    }\n    function getCategoryFormatRegExp() {\n      return /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD80D[\\uDC30-\\uDC38]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/g;\n    }\n    var emoji_regex_default = function emoji_regex_default() {\n      return /[#*0-9]\\uFE0F?\\u20E3|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26AA\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C8\\u26CF\\u26D1\\u26E9\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B55\\u3030\\u303D\\u3297\\u3299]\\uFE0F?|[\\u261D\\u270C\\u270D](?:\\uD83C[\\uDFFB-\\uDFFF]|\\uFE0F)?|[\\u270A\\u270B](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u2693\\u26A1\\u26AB\\u26C5\\u26CE\\u26D4\\u26EA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2795-\\u2797\\u27B0\\u27BF\\u2B50]|\\u26D3\\uFE0F?(?:\\u200D\\uD83D\\uDCA5)?|\\u26F9(?:\\uD83C[\\uDFFB-\\uDFFF]|\\uFE0F)?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\u2764\\uFE0F?(?:\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDC04\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]\\uFE0F?|[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDFCB\\uDFCC](?:\\uD83C[\\uDFFB-\\uDFFF]|\\uFE0F)?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF43\\uDF45-\\uDF4A\\uDF4C-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF7\\uDDFA-\\uDDFF]|\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF]|\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uDF44(?:\\u200D\\uD83D\\uDFEB)?|\\uDF4B(?:\\u200D\\uD83D\\uDFE9)?|\\uDFC3(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F?(?:\\u200D\\u27A1\\uFE0F?)?|\\u27A1\\uFE0F?))?|\\uDFF3\\uFE0F?(?:\\u200D(?:\\u26A7\\uFE0F?|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F?|\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40(?:\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F)?)|\\uD83D(?:[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3]\\uFE0F?|[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4\\uDEB5](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD74\\uDD90](?:\\uD83C[\\uDFFB-\\uDFFF]|\\uFE0F)?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE41\\uDE43\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEDF\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC08(?:\\u200D\\u2B1B)?|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC26(?:\\u200D(?:\\u2B1B|\\uD83D\\uDD25))?|\\uDC3B(?:\\u200D\\u2744\\uFE0F?)?|\\uDC41\\uFE0F?(?:\\u200D\\uD83D\\uDDE8\\uFE0F?)?|\\uDC68(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDC68\\uDC69]\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC69(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?[\\uDC68\\uDC69]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?|\\uDC69\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?))|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDD75(?:\\uD83C[\\uDFFB-\\uDFFF]|\\uFE0F)?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F?)?|\\uDE42(?:\\u200D[\\u2194\\u2195]\\uFE0F?)?|\\uDEB6(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F?(?:\\u200D\\u27A1\\uFE0F?)?|\\u27A1\\uFE0F?))?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0\\uDEF2-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC2\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9]|\\uDD3C(?:\\u200D[\\u2640\\u2642]\\uFE0F?|\\uD83C[\\uDFFB-\\uDFFF])?|\\uDDCE(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F?(?:\\u200D\\u27A1\\uFE0F?)?|\\u27A1\\uFE0F?))?|\\uDDD1(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1|\\uDDD1\\u200D\\uD83E\\uDDD2(?:\\u200D\\uD83E\\uDDD2)?|\\uDDD2(?:\\u200D\\uD83E\\uDDD2)?))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFC-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFD-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFD\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFE]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?))?|\\uDEF1(?:\\uD83C(?:\\uDFFB(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFC-\\uDFFF])?|\\uDFFC(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])?|\\uDFFD(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])?|\\uDFFE(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])?|\\uDFFF(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFE])?))?)/g;\n    };\n    function hasUnicode(str, options) {\n      var emoji = options.emoji, nonBmp = options.nonBmp, punctuations = options.punctuations;\n      var value = false;\n      if (emoji) {\n        value || (value = emoji_regex_default().test(str));\n      }\n      if (nonBmp) {\n        value || (value = getUnicodeNonBmpRegExp().test(str) || getSupplementaryPrivateUseRegExp().test(str) || getCategoryFormatRegExp().test(str));\n      }\n      if (punctuations) {\n        value || (value = getPunctuationRegExp().test(str));\n      }\n      return value;\n    }\n    var has_unicode_default = hasUnicode;\n    function _isIconLigature(textVNode) {\n      var differenceThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .15;\n      var occurrenceThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n      var nodeValue = textVNode.actualNode.nodeValue.trim();\n      if (!sanitize_default(nodeValue) || has_unicode_default(nodeValue, {\n        emoji: true,\n        nonBmp: true\n      })) {\n        return false;\n      }\n      var canvasContext = cache_default.get('canvasContext', function() {\n        return document.createElement('canvas').getContext('2d', {\n          willReadFrequently: true\n        });\n      });\n      var canvas = canvasContext.canvas;\n      var fonts = cache_default.get('fonts', function() {\n        return {};\n      });\n      var style = window.getComputedStyle(textVNode.parent.actualNode);\n      var fontFamily = style.getPropertyValue('font-family');\n      if (!fonts[fontFamily]) {\n        fonts[fontFamily] = {\n          occurrences: 0,\n          numLigatures: 0\n        };\n      }\n      var font = fonts[fontFamily];\n      if (font.occurrences >= occurrenceThreshold) {\n        if (font.numLigatures / font.occurrences === 1) {\n          return true;\n        } else if (font.numLigatures === 0) {\n          return false;\n        }\n      }\n      font.occurrences++;\n      var fontSize = 30;\n      var fontStyle = ''.concat(fontSize, 'px ').concat(fontFamily);\n      canvasContext.font = fontStyle;\n      var firstChar = nodeValue.charAt(0);\n      var width = canvasContext.measureText(firstChar).width;\n      if (width === 0) {\n        font.numLigatures++;\n        return true;\n      }\n      if (width < 30) {\n        var diff = 30 / width;\n        width *= diff;\n        fontSize *= diff;\n        fontStyle = ''.concat(fontSize, 'px ').concat(fontFamily);\n      }\n      canvas.width = width;\n      canvas.height = fontSize;\n      canvasContext.font = fontStyle;\n      canvasContext.textAlign = 'left';\n      canvasContext.textBaseline = 'top';\n      canvasContext.fillText(firstChar, 0, 0);\n      var compareData = new Uint32Array(canvasContext.getImageData(0, 0, width, fontSize).data.buffer);\n      if (!compareData.some(function(pixel) {\n        return pixel;\n      })) {\n        font.numLigatures++;\n        return true;\n      }\n      canvasContext.clearRect(0, 0, width, fontSize);\n      canvasContext.fillText(nodeValue, 0, 0);\n      var compareWith = new Uint32Array(canvasContext.getImageData(0, 0, width, fontSize).data.buffer);\n      var differences = compareData.reduce(function(diff, pixel, i) {\n        if (pixel === 0 && compareWith[i] === 0) {\n          return diff;\n        }\n        if (pixel !== 0 && compareWith[i] !== 0) {\n          return diff;\n        }\n        return ++diff;\n      }, 0);\n      var expectedWidth = nodeValue.split('').reduce(function(totalWidth, _char2) {\n        return totalWidth + canvasContext.measureText(_char2).width;\n      }, 0);\n      var actualWidth = canvasContext.measureText(nodeValue).width;\n      var pixelDifference = differences / compareData.length;\n      var sizeDifference = 1 - actualWidth / expectedWidth;\n      if (pixelDifference >= differenceThreshold && sizeDifference >= differenceThreshold) {\n        font.numLigatures++;\n        return true;\n      }\n      return false;\n    }\n    function _accessibleTextVirtual(virtualNode) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      context = prepareContext(virtualNode, context);\n      if (shouldIgnoreHidden(virtualNode, context)) {\n        return '';\n      }\n      if (shouldIgnoreIconLigature(virtualNode, context)) {\n        return '';\n      }\n      var computationSteps = [ arialabelledby_text_default, _arialabelText, _nativeTextAlternative, form_control_value_default, subtree_text_default, textNodeValue, title_text_default ];\n      var accessibleName = computationSteps.reduce(function(accName, step) {\n        if (context.startNode === virtualNode) {\n          accName = sanitize_default(accName);\n        }\n        if (accName !== '') {\n          return accName;\n        }\n        return step(virtualNode, context);\n      }, '');\n      if (context.debug) {\n        axe.log(accessibleName || '{empty-value}', virtualNode.actualNode, context);\n      }\n      return accessibleName;\n    }\n    function textNodeValue(virtualNode) {\n      if (virtualNode.props.nodeType !== 3) {\n        return '';\n      }\n      return virtualNode.props.nodeValue;\n    }\n    function shouldIgnoreHidden(virtualNode, context) {\n      if (!virtualNode) {\n        return false;\n      }\n      if (virtualNode.props.nodeType !== 1 || context.includeHidden) {\n        return false;\n      }\n      return !_isVisibleToScreenReaders(virtualNode);\n    }\n    function shouldIgnoreIconLigature(virtualNode, context) {\n      var _context$occurrenceTh;\n      var ignoreIconLigature = context.ignoreIconLigature, pixelThreshold = context.pixelThreshold;\n      var occurrenceThreshold = (_context$occurrenceTh = context.occurrenceThreshold) !== null && _context$occurrenceTh !== void 0 ? _context$occurrenceTh : context.occuranceThreshold;\n      if (virtualNode.props.nodeType !== 3 || !ignoreIconLigature) {\n        return false;\n      }\n      return _isIconLigature(virtualNode, pixelThreshold, occurrenceThreshold);\n    }\n    function prepareContext(virtualNode, context) {\n      if (!context.startNode) {\n        context = _extends({\n          startNode: virtualNode\n        }, context);\n      }\n      if (virtualNode.props.nodeType === 1 && context.inLabelledByContext && context.includeHidden === void 0) {\n        context = _extends({\n          includeHidden: !_isVisibleToScreenReaders(virtualNode)\n        }, context);\n      }\n      return context;\n    }\n    _accessibleTextVirtual.alreadyProcessed = function alreadyProcessed(virtualnode, context) {\n      context.processed = context.processed || [];\n      if (context.processed.includes(virtualnode)) {\n        return true;\n      }\n      context.processed.push(virtualnode);\n      return false;\n    };\n    function removeUnicode(str, options) {\n      var emoji = options.emoji, nonBmp = options.nonBmp, punctuations = options.punctuations;\n      if (emoji) {\n        str = str.replace(emoji_regex_default(), '');\n      }\n      if (nonBmp) {\n        str = str.replace(getUnicodeNonBmpRegExp(), '').replace(getSupplementaryPrivateUseRegExp(), '').replace(getCategoryFormatRegExp(), '');\n      }\n      if (punctuations) {\n        str = str.replace(getPunctuationRegExp(), '');\n      }\n      return str;\n    }\n    var remove_unicode_default = removeUnicode;\n    function isHumanInterpretable(str) {\n      if (isEmpty(str) || isNonDigitCharacter(str) || isSymbolicText(str) || isUnicodeOrPunctuation(str)) {\n        return 0;\n      }\n      return 1;\n    }\n    function isEmpty(str) {\n      return sanitize_default(str).length === 0;\n    }\n    function isNonDigitCharacter(str) {\n      return str.length === 1 && str.match(/\\D/);\n    }\n    function isSymbolicText(str) {\n      var symbolicText = [ 'aa', 'abc' ];\n      return symbolicText.includes(str.toLowerCase());\n    }\n    function isUnicodeOrPunctuation(str) {\n      var noUnicodeStr = remove_unicode_default(str, {\n        emoji: true,\n        nonBmp: true,\n        punctuations: true\n      });\n      return !sanitize_default(noUnicodeStr);\n    }\n    var is_human_interpretable_default = isHumanInterpretable;\n    var _autocomplete = {\n      stateTerms: [ 'on', 'off' ],\n      standaloneTerms: [ 'name', 'honorific-prefix', 'given-name', 'additional-name', 'family-name', 'honorific-suffix', 'nickname', 'username', 'new-password', 'current-password', 'organization-title', 'organization', 'street-address', 'address-line1', 'address-line2', 'address-line3', 'address-level4', 'address-level3', 'address-level2', 'address-level1', 'country', 'country-name', 'postal-code', 'cc-name', 'cc-given-name', 'cc-additional-name', 'cc-family-name', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc', 'cc-type', 'transaction-currency', 'transaction-amount', 'language', 'bday', 'bday-day', 'bday-month', 'bday-year', 'sex', 'url', 'photo', 'one-time-code' ],\n      qualifiers: [ 'home', 'work', 'mobile', 'fax', 'pager' ],\n      qualifiedTerms: [ 'tel', 'tel-country-code', 'tel-national', 'tel-area-code', 'tel-local', 'tel-local-prefix', 'tel-local-suffix', 'tel-extension', 'email', 'impp' ],\n      locations: [ 'billing', 'shipping' ]\n    };\n    function isValidAutocomplete(autocompleteValue) {\n      var _ref36 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref36$looseTyped = _ref36.looseTyped, looseTyped = _ref36$looseTyped === void 0 ? false : _ref36$looseTyped, _ref36$stateTerms = _ref36.stateTerms, stateTerms = _ref36$stateTerms === void 0 ? [] : _ref36$stateTerms, _ref36$locations = _ref36.locations, locations = _ref36$locations === void 0 ? [] : _ref36$locations, _ref36$qualifiers = _ref36.qualifiers, qualifiers = _ref36$qualifiers === void 0 ? [] : _ref36$qualifiers, _ref36$standaloneTerm = _ref36.standaloneTerms, standaloneTerms = _ref36$standaloneTerm === void 0 ? [] : _ref36$standaloneTerm, _ref36$qualifiedTerms = _ref36.qualifiedTerms, qualifiedTerms = _ref36$qualifiedTerms === void 0 ? [] : _ref36$qualifiedTerms, _ref36$ignoredValues = _ref36.ignoredValues, ignoredValues = _ref36$ignoredValues === void 0 ? [] : _ref36$ignoredValues;\n      autocompleteValue = autocompleteValue.toLowerCase().trim();\n      stateTerms = stateTerms.concat(_autocomplete.stateTerms);\n      if (stateTerms.includes(autocompleteValue) || autocompleteValue === '') {\n        return true;\n      }\n      qualifiers = qualifiers.concat(_autocomplete.qualifiers);\n      locations = locations.concat(_autocomplete.locations);\n      standaloneTerms = standaloneTerms.concat(_autocomplete.standaloneTerms);\n      qualifiedTerms = qualifiedTerms.concat(_autocomplete.qualifiedTerms);\n      var autocompleteTerms = autocompleteValue.split(/\\s+/g);\n      if (autocompleteTerms[autocompleteTerms.length - 1] === 'webauthn') {\n        autocompleteTerms.pop();\n        if (autocompleteTerms.length === 0) {\n          return false;\n        }\n      }\n      if (!looseTyped) {\n        if (autocompleteTerms[0].length > 8 && autocompleteTerms[0].substr(0, 8) === 'section-') {\n          autocompleteTerms.shift();\n        }\n        if (locations.includes(autocompleteTerms[0])) {\n          autocompleteTerms.shift();\n        }\n        if (qualifiers.includes(autocompleteTerms[0])) {\n          autocompleteTerms.shift();\n          standaloneTerms = [];\n        }\n        if (autocompleteTerms.length !== 1) {\n          return false;\n        }\n      }\n      var purposeTerm = autocompleteTerms[autocompleteTerms.length - 1];\n      if (ignoredValues.includes(purposeTerm)) {\n        return void 0;\n      }\n      return standaloneTerms.includes(purposeTerm) || qualifiedTerms.includes(purposeTerm);\n    }\n    var is_valid_autocomplete_default = isValidAutocomplete;\n    function labelVirtual(virtualNode) {\n      var ref, candidate;\n      if (virtualNode.attr('aria-labelledby')) {\n        ref = idrefs_default(virtualNode.actualNode, 'aria-labelledby');\n        candidate = ref.map(function(thing) {\n          var vNode = get_node_from_tree_default(thing);\n          return vNode ? visible_virtual_default(vNode) : '';\n        }).join(' ').trim();\n        if (candidate) {\n          return candidate;\n        }\n      }\n      candidate = virtualNode.attr('aria-label');\n      if (candidate) {\n        candidate = sanitize_default(candidate);\n        if (candidate) {\n          return candidate;\n        }\n      }\n      return null;\n    }\n    var label_virtual_default = labelVirtual;\n    function visible(element, screenReader, noRecursing) {\n      element = get_node_from_tree_default(element);\n      return visible_virtual_default(element, screenReader, noRecursing);\n    }\n    var visible_default = visible;\n    function labelVirtual2(virtualNode) {\n      var ref, candidate, doc;\n      candidate = label_virtual_default(virtualNode);\n      if (candidate) {\n        return candidate;\n      }\n      if (virtualNode.attr('id')) {\n        if (!virtualNode.actualNode) {\n          throw new TypeError('Cannot resolve explicit label reference for non-DOM nodes');\n        }\n        var id = escape_selector_default(virtualNode.attr('id'));\n        doc = get_root_node_default2(virtualNode.actualNode);\n        ref = doc.querySelector('label[for=\"' + id + '\"]');\n        candidate = ref && visible_default(ref, true);\n        if (candidate) {\n          return candidate;\n        }\n      }\n      ref = closest_default(virtualNode, 'label');\n      candidate = ref && visible_virtual_default(ref, true);\n      if (candidate) {\n        return candidate;\n      }\n      return null;\n    }\n    var label_virtual_default2 = labelVirtual2;\n    function label(node) {\n      node = get_node_from_tree_default(node);\n      return label_virtual_default2(node);\n    }\n    var label_default = label;\n    var nativeElementType = [ {\n      matches: [ {\n        nodeName: 'textarea'\n      }, {\n        nodeName: 'input',\n        properties: {\n          type: [ 'text', 'password', 'search', 'tel', 'email', 'url' ]\n        }\n      } ],\n      namingMethods: 'labelText'\n    }, {\n      matches: {\n        nodeName: 'input',\n        properties: {\n          type: [ 'button', 'submit', 'reset' ]\n        }\n      },\n      namingMethods: [ 'valueText', 'titleText', 'buttonDefaultText' ]\n    }, {\n      matches: {\n        nodeName: 'input',\n        properties: {\n          type: 'image'\n        }\n      },\n      namingMethods: [ 'altText', 'valueText', 'labelText', 'titleText', 'buttonDefaultText' ]\n    }, {\n      matches: 'button',\n      namingMethods: 'subtreeText'\n    }, {\n      matches: 'fieldset',\n      namingMethods: 'fieldsetLegendText'\n    }, {\n      matches: 'OUTPUT',\n      namingMethods: 'subtreeText'\n    }, {\n      matches: [ {\n        nodeName: 'select'\n      }, {\n        nodeName: 'input',\n        properties: {\n          type: /^(?!text|password|search|tel|email|url|button|submit|reset)/\n        }\n      } ],\n      namingMethods: 'labelText'\n    }, {\n      matches: 'summary',\n      namingMethods: 'subtreeText'\n    }, {\n      matches: 'figure',\n      namingMethods: [ 'figureText', 'titleText' ]\n    }, {\n      matches: 'img',\n      namingMethods: 'altText'\n    }, {\n      matches: 'table',\n      namingMethods: [ 'tableCaptionText', 'tableSummaryText' ]\n    }, {\n      matches: [ 'hr', 'br' ],\n      namingMethods: [ 'titleText', 'singleSpace' ]\n    } ];\n    var native_element_type_default = nativeElementType;\n    function visibleTextNodes(vNode) {\n      var parentVisible = _isVisibleOnScreen(vNode);\n      var nodes = [];\n      vNode.children.forEach(function(child) {\n        if (child.actualNode.nodeType === 3) {\n          if (parentVisible) {\n            nodes.push(child);\n          }\n        } else {\n          nodes = nodes.concat(visibleTextNodes(child));\n        }\n      });\n      return nodes;\n    }\n    var visible_text_nodes_default = visibleTextNodes;\n    var getVisibleChildTextRects = memoize_default(function getVisibleChildTextRectsMemoized(node) {\n      var vNode = get_node_from_tree_default(node);\n      var nodeRect = vNode.boundingClientRect;\n      var clientRects = [];\n      var overflowHiddenNodes = get_overflow_hidden_ancestors_default(vNode);\n      node.childNodes.forEach(function(textNode) {\n        if (textNode.nodeType !== 3 || sanitize_default(textNode.nodeValue) === '') {\n          return;\n        }\n        var contentRects = getContentRects(textNode);\n        if (isOutsideNodeBounds(contentRects, nodeRect)) {\n          return;\n        }\n        clientRects.push.apply(clientRects, _toConsumableArray(filterHiddenRects(contentRects, overflowHiddenNodes)));\n      });\n      return clientRects.length ? clientRects : filterHiddenRects([ nodeRect ], overflowHiddenNodes);\n    });\n    var get_visible_child_text_rects_default = getVisibleChildTextRects;\n    function getContentRects(node) {\n      var range2 = document.createRange();\n      range2.selectNodeContents(node);\n      return Array.from(range2.getClientRects());\n    }\n    function isOutsideNodeBounds(rects, nodeRect) {\n      return rects.some(function(rect) {\n        var centerPoint = _getRectCenter(rect);\n        return !_isPointInRect(centerPoint, nodeRect);\n      });\n    }\n    function filterHiddenRects(contentRects, overflowHiddenNodes) {\n      var visibleRects = [];\n      contentRects.forEach(function(contentRect) {\n        if (contentRect.width < 1 || contentRect.height < 1) {\n          return;\n        }\n        var visibleRect = overflowHiddenNodes.reduce(function(rect, overflowNode) {\n          return rect && _getIntersectionRect(rect, overflowNode.boundingClientRect);\n        }, contentRect);\n        if (visibleRect) {\n          visibleRects.push(visibleRect);\n        }\n      });\n      return visibleRects;\n    }\n    function getTextElementStack(node) {\n      _createGrid();\n      var vNode = get_node_from_tree_default(node);\n      var grid = vNode._grid;\n      if (!grid) {\n        return [];\n      }\n      var clientRects = get_visible_child_text_rects_default(node);\n      return clientRects.map(function(rect) {\n        return getRectStack(grid, rect);\n      });\n    }\n    var get_text_element_stack_default = getTextElementStack;\n    var visualRoles = [ 'checkbox', 'img', 'meter', 'progressbar', 'scrollbar', 'radio', 'slider', 'spinbutton', 'textbox' ];\n    function isVisualContent(el) {\n      var _nodeLookup19 = _nodeLookup(el), vNode = _nodeLookup19.vNode;\n      var role = axe.commons.aria.getExplicitRole(vNode);\n      if (role) {\n        return visualRoles.indexOf(role) !== -1;\n      }\n      switch (vNode.props.nodeName) {\n       case 'img':\n       case 'iframe':\n       case 'object':\n       case 'video':\n       case 'audio':\n       case 'canvas':\n       case 'svg':\n       case 'math':\n       case 'button':\n       case 'select':\n       case 'textarea':\n       case 'keygen':\n       case 'progress':\n       case 'meter':\n        return true;\n\n       case 'input':\n        return vNode.props.type !== 'hidden';\n\n       default:\n        return false;\n      }\n    }\n    var is_visual_content_default = isVisualContent;\n    var hiddenTextElms = [ 'head', 'title', 'template', 'script', 'style', 'iframe', 'object', 'video', 'audio', 'noscript' ];\n    function hasChildTextNodes(elm) {\n      if (hiddenTextElms.includes(elm.props.nodeName)) {\n        return false;\n      }\n      return elm.children.some(function(_ref37) {\n        var props = _ref37.props;\n        return props.nodeType === 3 && props.nodeValue.trim();\n      });\n    }\n    function hasContentVirtual(elm, noRecursion, ignoreAria) {\n      return hasChildTextNodes(elm) || is_visual_content_default(elm.actualNode) || !ignoreAria && !!label_virtual_default(elm) || !noRecursion && elm.children.some(function(child) {\n        return child.actualNode.nodeType === 1 && hasContentVirtual(child);\n      });\n    }\n    var has_content_virtual_default = hasContentVirtual;\n    function hasContent(elm, noRecursion, ignoreAria) {\n      elm = get_node_from_tree_default(elm);\n      return has_content_virtual_default(elm, noRecursion, ignoreAria);\n    }\n    var has_content_default = hasContent;\n    function _hasLangText(virtualNode) {\n      if (typeof virtualNode.children === 'undefined' || hasChildTextNodes(virtualNode)) {\n        return true;\n      }\n      if (virtualNode.props.nodeType === 1 && is_visual_content_default(virtualNode)) {\n        return !!axe.commons.text.accessibleTextVirtual(virtualNode);\n      }\n      return virtualNode.children.some(function(child) {\n        return !child.attr('lang') && _hasLangText(child) && !_isHiddenForEveryone(child);\n      });\n    }\n    function insertedIntoFocusOrder(el) {\n      var tabIndex = parse_tabindex_default(el.getAttribute('tabindex'));\n      return tabIndex > -1 && _isFocusable(el) && !is_natively_focusable_default(el);\n    }\n    var inserted_into_focus_order_default = insertedIntoFocusOrder;\n    function isHiddenWithCSS(el, descendentVisibilityValue) {\n      var _nodeLookup20 = _nodeLookup(el), vNode = _nodeLookup20.vNode, domNode = _nodeLookup20.domNode;\n      if (!vNode) {\n        return _isHiddenWithCSS(domNode, descendentVisibilityValue);\n      }\n      if (vNode._isHiddenWithCSS === void 0) {\n        vNode._isHiddenWithCSS = _isHiddenWithCSS(domNode, descendentVisibilityValue);\n      }\n      return vNode._isHiddenWithCSS;\n    }\n    function _isHiddenWithCSS(el, descendentVisibilityValue) {\n      if (el.nodeType === 9) {\n        return false;\n      }\n      if (el.nodeType === 11) {\n        el = el.host;\n      }\n      if ([ 'STYLE', 'SCRIPT' ].includes(el.nodeName.toUpperCase())) {\n        return false;\n      }\n      var style = window.getComputedStyle(el, null);\n      if (!style) {\n        throw new Error('Style does not exist for the given element.');\n      }\n      var displayValue = style.getPropertyValue('display');\n      if (displayValue === 'none') {\n        return true;\n      }\n      var HIDDEN_VISIBILITY_VALUES = [ 'hidden', 'collapse' ];\n      var visibilityValue = style.getPropertyValue('visibility');\n      if (HIDDEN_VISIBILITY_VALUES.includes(visibilityValue) && !descendentVisibilityValue) {\n        return true;\n      }\n      if (HIDDEN_VISIBILITY_VALUES.includes(visibilityValue) && descendentVisibilityValue && HIDDEN_VISIBILITY_VALUES.includes(descendentVisibilityValue)) {\n        return true;\n      }\n      var parent = get_composed_parent_default(el);\n      if (parent && !HIDDEN_VISIBILITY_VALUES.includes(visibilityValue)) {\n        return isHiddenWithCSS(parent, visibilityValue);\n      }\n      return false;\n    }\n    var is_hidden_with_css_default = isHiddenWithCSS;\n    function isHTML5(doc) {\n      var node = doc.doctype;\n      if (node === null) {\n        return false;\n      }\n      return node.name === 'html' && !node.publicId && !node.systemId;\n    }\n    var is_html5_default = isHTML5;\n    function getRoleType(role) {\n      var _window3;\n      if (role instanceof abstract_virtual_node_default || (_window3 = window) !== null && _window3 !== void 0 && _window3.Node && role instanceof window.Node) {\n        role = axe.commons.aria.getRole(role);\n      }\n      var roleDef = standards_default.ariaRoles[role];\n      return (roleDef === null || roleDef === void 0 ? void 0 : roleDef.type) || null;\n    }\n    var get_role_type_default = getRoleType;\n    function walkDomNode(node, functor) {\n      if (functor(node.actualNode) !== false) {\n        node.children.forEach(function(child) {\n          return walkDomNode(child, functor);\n        });\n      }\n    }\n    var blockLike = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];\n    function isBlock(elm) {\n      var display2 = window.getComputedStyle(elm).getPropertyValue('display');\n      return blockLike.includes(display2) || display2.substr(0, 6) === 'table-';\n    }\n    function getBlockParent(node) {\n      var parentBlock = get_composed_parent_default(node);\n      while (parentBlock && !isBlock(parentBlock)) {\n        parentBlock = get_composed_parent_default(parentBlock);\n      }\n      return get_node_from_tree_default(parentBlock);\n    }\n    function isInTextBlock(node, options) {\n      if (isBlock(node)) {\n        return false;\n      }\n      var virtualParent = getBlockParent(node);\n      var parentText = '';\n      var widgetText = '';\n      var inBrBlock = 0;\n      walkDomNode(virtualParent, function(currNode) {\n        if (inBrBlock === 2) {\n          return false;\n        }\n        if (currNode.nodeType === 3) {\n          parentText += currNode.nodeValue;\n        }\n        if (currNode.nodeType !== 1) {\n          return;\n        }\n        var nodeName2 = (currNode.nodeName || '').toUpperCase();\n        if (currNode === node) {\n          inBrBlock = 1;\n        }\n        if ([ 'BR', 'HR' ].includes(nodeName2)) {\n          if (inBrBlock === 0) {\n            parentText = '';\n            widgetText = '';\n          } else {\n            inBrBlock = 2;\n          }\n        } else if (currNode.style.display === 'none' || currNode.style.overflow === 'hidden' || ![ '', null, 'none' ].includes(currNode.style['float']) || ![ '', null, 'relative' ].includes(currNode.style.position)) {\n          return false;\n        } else if (get_role_type_default(currNode) === 'widget') {\n          widgetText += currNode.textContent;\n          return false;\n        }\n      });\n      parentText = sanitize_default(parentText);\n      if (options !== null && options !== void 0 && options.noLengthCompare) {\n        return parentText.length !== 0;\n      }\n      widgetText = sanitize_default(widgetText);\n      return parentText.length > widgetText.length;\n    }\n    var is_in_text_block_default = isInTextBlock;\n    function isModalOpen(options) {\n      options = options || {};\n      var modalPercent = options.modalPercent || .75;\n      if (cache_default.get('isModalOpen')) {\n        return cache_default.get('isModalOpen');\n      }\n      var definiteModals = query_selector_all_filter_default(axe._tree[0], 'dialog, [role=dialog], [aria-modal=true]', _isVisibleOnScreen);\n      if (definiteModals.length) {\n        cache_default.set('isModalOpen', true);\n        return true;\n      }\n      var viewport = get_viewport_size_default(window);\n      var percentWidth = viewport.width * modalPercent;\n      var percentHeight = viewport.height * modalPercent;\n      var x = (viewport.width - percentWidth) / 2;\n      var y = (viewport.height - percentHeight) / 2;\n      var points = [ {\n        x: x,\n        y: y\n      }, {\n        x: viewport.width - x,\n        y: y\n      }, {\n        x: viewport.width / 2,\n        y: viewport.height / 2\n      }, {\n        x: x,\n        y: viewport.height - y\n      }, {\n        x: viewport.width - x,\n        y: viewport.height - y\n      } ];\n      var stacks = points.map(function(point) {\n        return Array.from(document.elementsFromPoint(point.x, point.y));\n      });\n      var _loop4 = function _loop4() {\n        var modalElement = stacks[_i11].find(function(elm) {\n          var style = window.getComputedStyle(elm);\n          return parseInt(style.width, 10) >= percentWidth && parseInt(style.height, 10) >= percentHeight && style.getPropertyValue('pointer-events') !== 'none' && (style.position === 'absolute' || style.position === 'fixed');\n        });\n        if (modalElement && stacks.every(function(stack) {\n          return stack.includes(modalElement);\n        })) {\n          cache_default.set('isModalOpen', true);\n          return {\n            v: true\n          };\n        }\n      }, _ret;\n      for (var _i11 = 0; _i11 < stacks.length; _i11++) {\n        _ret = _loop4();\n        if (_ret) {\n          return _ret.v;\n        }\n      }\n      cache_default.set('isModalOpen', void 0);\n      return void 0;\n    }\n    var is_modal_open_default = isModalOpen;\n    function _isMultiline(domNode) {\n      var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var range2 = domNode.ownerDocument.createRange();\n      range2.setStart(domNode, 0);\n      range2.setEnd(domNode, domNode.childNodes.length);\n      var lastLineEnd = 0;\n      var lineCount = 0;\n      var _iterator5 = _createForOfIteratorHelper(range2.getClientRects()), _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {\n          var rect = _step5.value;\n          if (rect.height <= margin) {\n            continue;\n          }\n          if (lastLineEnd > rect.top + margin) {\n            lastLineEnd = Math.max(lastLineEnd, rect.bottom);\n          } else if (lineCount === 0) {\n            lastLineEnd = rect.bottom;\n            lineCount++;\n          } else {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return false;\n    }\n    function isNode(element) {\n      return element instanceof window.Node;\n    }\n    var is_node_default = isNode;\n    var cacheKey = 'color.incompleteData';\n    var incompleteData = {\n      set: function set(key, reason) {\n        if (typeof key !== 'string') {\n          throw new Error('Incomplete data: key must be a string');\n        }\n        var data = cache_default.get(cacheKey, function() {\n          return {};\n        });\n        if (reason) {\n          data[key] = reason;\n        }\n        return data[key];\n      },\n      get: function get(key) {\n        var data = cache_default.get(cacheKey);\n        return data === null || data === void 0 ? void 0 : data[key];\n      },\n      clear: function clear() {\n        cache_default.set(cacheKey, {});\n      }\n    };\n    var incomplete_data_default = incompleteData;\n    function elementHasImage(elm, style) {\n      var graphicNodes = [ 'IMG', 'CANVAS', 'OBJECT', 'IFRAME', 'VIDEO', 'SVG' ];\n      var nodeName2 = elm.nodeName.toUpperCase();\n      if (graphicNodes.includes(nodeName2)) {\n        incomplete_data_default.set('bgColor', 'imgNode');\n        return true;\n      }\n      style = style || window.getComputedStyle(elm);\n      var bgImageStyle = style.getPropertyValue('background-image');\n      var hasBgImage = bgImageStyle !== 'none';\n      if (hasBgImage) {\n        var hasGradient = /gradient/.test(bgImageStyle);\n        incomplete_data_default.set('bgColor', hasGradient ? 'bgGradient' : 'bgImage');\n      }\n      return hasBgImage;\n    }\n    var element_has_image_default = elementHasImage;\n    var imports_exports = {};\n    __export(imports_exports, {\n      ArrayFrom: function ArrayFrom() {\n        return import_from2['default'];\n      },\n      Colorjs: function Colorjs() {\n        return _Color;\n      },\n      CssSelectorParser: function CssSelectorParser() {\n        return import_css_selector_parser2.CssSelectorParser;\n      },\n      doT: function doT() {\n        return import_dot['default'];\n      },\n      emojiRegexText: function emojiRegexText() {\n        return emoji_regex_default;\n      },\n      memoize: function memoize() {\n        return import_memoizee2['default'];\n      }\n    });\n    var import_es6_promise = __toModule(require_es6_promise());\n    var import_typedarray = __toModule(require_typedarray());\n    var import_weakmap_polyfill = __toModule(require_weakmap_polyfill());\n    var import_has_own = __toModule(require_has_own3());\n    var import_values = __toModule(require_values3());\n    var import_from = __toModule(require_from4());\n    if (!('hasOwn' in Object)) {\n      Object.hasOwn = import_has_own['default'];\n    }\n    if (!('values' in Object)) {\n      Object.values = import_values['default'];\n    }\n    if (!('Promise' in window)) {\n      import_es6_promise['default'].polyfill();\n    }\n    if (!('Uint32Array' in window)) {\n      window.Uint32Array = import_typedarray.Uint32Array;\n    }\n    if (window.Uint32Array) {\n      if (!('some' in window.Uint32Array.prototype)) {\n        Object.defineProperty(window.Uint32Array.prototype, 'some', {\n          value: Array.prototype.some\n        });\n      }\n      if (!('reduce' in window.Uint32Array.prototype)) {\n        Object.defineProperty(window.Uint32Array.prototype, 'reduce', {\n          value: Array.prototype.reduce\n        });\n      }\n    }\n    if (typeof Object.assign !== 'function') {\n      (function() {\n        Object.assign = function(target) {\n          if (target === void 0 || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n          }\n          var output = Object(target);\n          for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== void 0 && source !== null) {\n              for (var nextKey in source) {\n                if (source.hasOwnProperty(nextKey)) {\n                  output[nextKey] = source[nextKey];\n                }\n              }\n            }\n          }\n          return output;\n        };\n      })();\n    }\n    if (!Array.prototype.find) {\n      Object.defineProperty(Array.prototype, 'find', {\n        value: function value(predicate) {\n          if (this === null) {\n            throw new TypeError('Array.prototype.find called on null or undefined');\n          }\n          if (typeof predicate !== 'function') {\n            throw new TypeError('predicate must be a function');\n          }\n          var list = Object(this);\n          var length = list.length >>> 0;\n          var thisArg = arguments[1];\n          var value;\n          for (var _i12 = 0; _i12 < length; _i12++) {\n            value = list[_i12];\n            if (predicate.call(thisArg, value, _i12, list)) {\n              return value;\n            }\n          }\n          return void 0;\n        }\n      });\n    }\n    if (!Array.prototype.findIndex) {\n      Object.defineProperty(Array.prototype, 'findIndex', {\n        value: function value(predicate, thisArg) {\n          if (this === null) {\n            throw new TypeError('Array.prototype.find called on null or undefined');\n          }\n          if (typeof predicate !== 'function') {\n            throw new TypeError('predicate must be a function');\n          }\n          var list = Object(this);\n          var length = list.length >>> 0;\n          var value;\n          for (var _i13 = 0; _i13 < length; _i13++) {\n            value = list[_i13];\n            if (predicate.call(thisArg, value, _i13, list)) {\n              return _i13;\n            }\n          }\n          return -1;\n        }\n      });\n    }\n    if (!Array.prototype.includes) {\n      Object.defineProperty(Array.prototype, 'includes', {\n        value: function value(searchElement) {\n          var O = Object(this);\n          var len = parseInt(O.length, 10) || 0;\n          if (len === 0) {\n            return false;\n          }\n          var n2 = parseInt(arguments[1], 10) || 0;\n          var k;\n          if (n2 >= 0) {\n            k = n2;\n          } else {\n            k = len + n2;\n            if (k < 0) {\n              k = 0;\n            }\n          }\n          var currentElement;\n          while (k < len) {\n            currentElement = O[k];\n            if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {\n              return true;\n            }\n            k++;\n          }\n          return false;\n        }\n      });\n    }\n    if (!Array.prototype.some) {\n      Object.defineProperty(Array.prototype, 'some', {\n        value: function value(fun) {\n          if (this == null) {\n            throw new TypeError('Array.prototype.some called on null or undefined');\n          }\n          if (typeof fun !== 'function') {\n            throw new TypeError();\n          }\n          var t = Object(this);\n          var len = t.length >>> 0;\n          var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n          for (var _i14 = 0; _i14 < len; _i14++) {\n            if (_i14 in t && fun.call(thisArg, t[_i14], _i14, t)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      });\n    }\n    if (!Array.from) {\n      Array.from = import_from['default'];\n    }\n    if (!String.prototype.includes) {\n      String.prototype.includes = function(search, start) {\n        if (typeof start !== 'number') {\n          start = 0;\n        }\n        if (start + search.length > this.length) {\n          return false;\n        } else {\n          return this.indexOf(search, start) !== -1;\n        }\n      };\n    }\n    if (!Array.prototype.flat) {\n      Object.defineProperty(Array.prototype, 'flat', {\n        configurable: true,\n        value: function flat() {\n          var depth = isNaN(arguments[0]) ? 1 : Number(arguments[0]);\n          return depth ? Array.prototype.reduce.call(this, function(acc, cur) {\n            if (Array.isArray(cur)) {\n              acc.push.apply(acc, flat.call(cur, depth - 1));\n            } else {\n              acc.push(cur);\n            }\n            return acc;\n          }, []) : Array.prototype.slice.call(this);\n        },\n        writable: true\n      });\n    }\n    if (window.Node && !('isConnected' in window.Node.prototype)) {\n      Object.defineProperty(window.Node.prototype, 'isConnected', {\n        get: function get() {\n          return !this.ownerDocument || !(this.ownerDocument.compareDocumentPosition(this) & this.DOCUMENT_POSITION_DISCONNECTED);\n        }\n      });\n    }\n    var import_css_selector_parser2 = __toModule(require_lib());\n    var import_dot = __toModule(require_doT());\n    var import_memoizee2 = __toModule(require_memoizee());\n    function multiplyMatrices(A, B) {\n      var m3 = A.length;\n      if (!Array.isArray(A[0])) {\n        A = [ A ];\n      }\n      if (!Array.isArray(B[0])) {\n        B = B.map(function(x) {\n          return [ x ];\n        });\n      }\n      var p2 = B[0].length;\n      var B_cols = B[0].map(function(_, i) {\n        return B.map(function(x) {\n          return x[i];\n        });\n      });\n      var product = A.map(function(row) {\n        return B_cols.map(function(col) {\n          var ret = 0;\n          if (!Array.isArray(row)) {\n            var _iterator6 = _createForOfIteratorHelper(col), _step6;\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {\n                var c4 = _step6.value;\n                ret += row * c4;\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n            return ret;\n          }\n          for (var _i15 = 0; _i15 < row.length; _i15++) {\n            ret += row[_i15] * (col[_i15] || 0);\n          }\n          return ret;\n        });\n      });\n      if (m3 === 1) {\n        product = product[0];\n      }\n      if (p2 === 1) {\n        return product.map(function(x) {\n          return x[0];\n        });\n      }\n      return product;\n    }\n    function isString(str) {\n      return type(str) === 'string';\n    }\n    function type(o) {\n      var str = Object.prototype.toString.call(o);\n      return (str.match(/^\\[object\\s+(.*?)\\]$/)[1] || '').toLowerCase();\n    }\n    function toPrecision(n2, precision) {\n      n2 = +n2;\n      precision = +precision;\n      var integerLength = (Math.floor(n2) + '').length;\n      if (precision > integerLength) {\n        return +n2.toFixed(precision - integerLength);\n      } else {\n        var p10 = Math.pow(10, integerLength - precision);\n        return Math.round(n2 / p10) * p10;\n      }\n    }\n    function parseFunction(str) {\n      if (!str) {\n        return;\n      }\n      str = str.trim();\n      var isFunctionRegex = /^([a-z]+)\\((.+?)\\)$/i;\n      var isNumberRegex = /^-?[\\d.]+$/;\n      var parts = str.match(isFunctionRegex);\n      if (parts) {\n        var args = [];\n        parts[2].replace(/\\/?\\s*([-\\w.]+(?:%|deg)?)/g, function($0, arg) {\n          if (/%$/.test(arg)) {\n            arg = new Number(arg.slice(0, -1) / 100);\n            arg.type = '<percentage>';\n          } else if (/deg$/.test(arg)) {\n            arg = new Number(+arg.slice(0, -3));\n            arg.type = '<angle>';\n            arg.unit = 'deg';\n          } else if (isNumberRegex.test(arg)) {\n            arg = new Number(arg);\n            arg.type = '<number>';\n          }\n          if ($0.startsWith('/')) {\n            arg = arg instanceof Number ? arg : new Number(arg);\n            arg.alpha = true;\n          }\n          args.push(arg);\n        });\n        return {\n          name: parts[1].toLowerCase(),\n          rawName: parts[1],\n          rawArgs: parts[2],\n          args: args\n        };\n      }\n    }\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n    function interpolate(start, end, p2) {\n      if (isNaN(start)) {\n        return end;\n      }\n      if (isNaN(end)) {\n        return start;\n      }\n      return start + (end - start) * p2;\n    }\n    function interpolateInv(start, end, value) {\n      return (value - start) / (end - start);\n    }\n    function mapRange(from, to2, value) {\n      return interpolate(to2[0], to2[1], interpolateInv(from[0], from[1], value));\n    }\n    function parseCoordGrammar(coordGrammars) {\n      return coordGrammars.map(function(coordGrammar2) {\n        return coordGrammar2.split('|').map(function(type2) {\n          type2 = type2.trim();\n          var range2 = type2.match(/^(<[a-z]+>)\\[(-?[.\\d]+),\\s*(-?[.\\d]+)\\]?$/);\n          if (range2) {\n            var ret = new String(range2[1]);\n            ret.range = [ +range2[2], +range2[3] ];\n            return ret;\n          }\n          return type2;\n        });\n      });\n    }\n    var util = Object.freeze({\n      __proto__: null,\n      isString: isString,\n      type: type,\n      toPrecision: toPrecision,\n      parseFunction: parseFunction,\n      last: last,\n      interpolate: interpolate,\n      interpolateInv: interpolateInv,\n      mapRange: mapRange,\n      parseCoordGrammar: parseCoordGrammar,\n      multiplyMatrices: multiplyMatrices\n    });\n    var Hooks = function() {\n      function Hooks() {\n        _classCallCheck(this, Hooks);\n      }\n      return _createClass(Hooks, [ {\n        key: 'add',\n        value: function add(name, callback, first) {\n          if (typeof arguments[0] != 'string') {\n            for (var name in arguments[0]) {\n              this.add(name, arguments[0][name], arguments[1]);\n            }\n            return;\n          }\n          (Array.isArray(name) ? name : [ name ]).forEach(function(name2) {\n            this[name2] = this[name2] || [];\n            if (callback) {\n              this[name2][first ? 'unshift' : 'push'](callback);\n            }\n          }, this);\n        }\n      }, {\n        key: 'run',\n        value: function run(name, env) {\n          this[name] = this[name] || [];\n          this[name].forEach(function(callback) {\n            callback.call(env && env.context ? env.context : env, env);\n          });\n        }\n      } ]);\n    }();\n    var hooks = new Hooks();\n    var defaults = {\n      gamut_mapping: 'lch.c',\n      precision: 5,\n      deltaE: '76'\n    };\n    var WHITES = {\n      D50: [ .3457 / .3585, 1, (1 - .3457 - .3585) / .3585 ],\n      D65: [ .3127 / .329, 1, (1 - .3127 - .329) / .329 ]\n    };\n    function getWhite(name) {\n      if (Array.isArray(name)) {\n        return name;\n      }\n      return WHITES[name];\n    }\n    function adapt$1(W1, W2, XYZ) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      W1 = getWhite(W1);\n      W2 = getWhite(W2);\n      if (!W1 || !W2) {\n        throw new TypeError('Missing white point to convert '.concat(!W1 ? 'from' : '').concat(!W1 && !W2 ? '/' : '').concat(!W2 ? 'to' : ''));\n      }\n      if (W1 === W2) {\n        return XYZ;\n      }\n      var env = {\n        W1: W1,\n        W2: W2,\n        XYZ: XYZ,\n        options: options\n      };\n      hooks.run('chromatic-adaptation-start', env);\n      if (!env.M) {\n        if (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {\n          env.M = [ [ 1.0479298208405488, .022946793341019088, -.05019222954313557 ], [ .029627815688159344, .990434484573249, -.01707382502938514 ], [ -.009243058152591178, .015055144896577895, .7518742899580008 ] ];\n        } else if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {\n          env.M = [ [ .9554734527042182, -.023098536874261423, .0632593086610217 ], [ -.028369706963208136, 1.0099954580058226, .021041398966943008 ], [ .012314001688319899, -.020507696433477912, 1.3303659366080753 ] ];\n        }\n      }\n      hooks.run('chromatic-adaptation-end', env);\n      if (env.M) {\n        return multiplyMatrices(env.M, env.XYZ);\n      } else {\n        throw new TypeError('Only Bradford CAT with white points D50 and D65 supported for now.');\n      }\n    }\n    var \\u03b5$4 = 75e-6;\n    var _ColorSpace2 = (_Class_brand = new WeakSet(), _path = new WeakMap(), function() {\n      function _ColorSpace(options) {\n        var _options$coords, _ref38, _options$white, _options$formats, _this$formats$functio, _this$formats, _this$formats2;\n        _classCallCheck(this, _ColorSpace);\n        _classPrivateMethodInitSpec(this, _Class_brand);\n        _classPrivateFieldInitSpec(this, _path, void 0);\n        this.id = options.id;\n        this.name = options.name;\n        this.base = options.base ? _ColorSpace2.get(options.base) : null;\n        this.aliases = options.aliases;\n        if (this.base) {\n          this.fromBase = options.fromBase;\n          this.toBase = options.toBase;\n        }\n        var _coords = (_options$coords = options.coords) !== null && _options$coords !== void 0 ? _options$coords : this.base.coords;\n        this.coords = _coords;\n        var white2 = (_ref38 = (_options$white = options.white) !== null && _options$white !== void 0 ? _options$white : this.base.white) !== null && _ref38 !== void 0 ? _ref38 : 'D65';\n        this.white = getWhite(white2);\n        this.formats = (_options$formats = options.formats) !== null && _options$formats !== void 0 ? _options$formats : {};\n        for (var name in this.formats) {\n          var format = this.formats[name];\n          format.type || (format.type = 'function');\n          format.name || (format.name = name);\n        }\n        if (options.cssId && !((_this$formats$functio = this.formats.functions) !== null && _this$formats$functio !== void 0 && _this$formats$functio.color)) {\n          this.formats.color = {\n            id: options.cssId\n          };\n          Object.defineProperty(this, 'cssId', {\n            value: options.cssId\n          });\n        } else if ((_this$formats = this.formats) !== null && _this$formats !== void 0 && _this$formats.color && !((_this$formats2 = this.formats) !== null && _this$formats2 !== void 0 && _this$formats2.color.id)) {\n          this.formats.color.id = this.id;\n        }\n        this.referred = options.referred;\n        _classPrivateFieldSet(_path, this, _assertClassBrand(_Class_brand, this, _getPath).call(this).reverse());\n        hooks.run('colorspace-init-end', this);\n      }\n      return _createClass(_ColorSpace, [ {\n        key: 'inGamut',\n        value: function inGamut(coords) {\n          var _ref39 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref39$epsilon = _ref39.epsilon, epsilon = _ref39$epsilon === void 0 ? \\u03b5$4 : _ref39$epsilon;\n          if (this.isPolar) {\n            coords = this.toBase(coords);\n            return this.base.inGamut(coords, {\n              epsilon: epsilon\n            });\n          }\n          var coordMeta = Object.values(this.coords);\n          return coords.every(function(c4, i) {\n            var meta = coordMeta[i];\n            if (meta.type !== 'angle' && meta.range) {\n              if (Number.isNaN(c4)) {\n                return true;\n              }\n              var _meta$range = _slicedToArray(meta.range, 2), min = _meta$range[0], max2 = _meta$range[1];\n              return (min === void 0 || c4 >= min - epsilon) && (max2 === void 0 || c4 <= max2 + epsilon);\n            }\n            return true;\n          });\n        }\n      }, {\n        key: 'cssId',\n        get: function get() {\n          var _this$formats$functio2;\n          return ((_this$formats$functio2 = this.formats.functions) === null || _this$formats$functio2 === void 0 || (_this$formats$functio2 = _this$formats$functio2.color) === null || _this$formats$functio2 === void 0 ? void 0 : _this$formats$functio2.id) || this.id;\n        }\n      }, {\n        key: 'isPolar',\n        get: function get() {\n          for (var id in this.coords) {\n            if (this.coords[id].type === 'angle') {\n              return true;\n            }\n          }\n          return false;\n        }\n      }, {\n        key: 'getFormat',\n        value: function getFormat(format) {\n          if (_typeof(format) === 'object') {\n            format = _assertClassBrand(_Class_brand, this, _processFormat).call(this, format);\n            return format;\n          }\n          var ret;\n          if (format === 'default') {\n            ret = Object.values(this.formats)[0];\n          } else {\n            ret = this.formats[format];\n          }\n          if (ret) {\n            ret = _assertClassBrand(_Class_brand, this, _processFormat).call(this, ret);\n            return ret;\n          }\n          return null;\n        }\n      }, {\n        key: 'to',\n        value: function to(space, coords) {\n          if (arguments.length === 1) {\n            var _ref40 = [ space.space, space.coords ];\n            space = _ref40[0];\n            coords = _ref40[1];\n          }\n          space = _ColorSpace2.get(space);\n          if (this === space) {\n            return coords;\n          }\n          coords = coords.map(function(c4) {\n            return Number.isNaN(c4) ? 0 : c4;\n          });\n          var myPath = _classPrivateFieldGet(_path, this);\n          var otherPath = _classPrivateFieldGet(_path, space);\n          var connectionSpace, connectionSpaceIndex;\n          for (var _i16 = 0; _i16 < myPath.length; _i16++) {\n            if (myPath[_i16] === otherPath[_i16]) {\n              connectionSpace = myPath[_i16];\n              connectionSpaceIndex = _i16;\n            } else {\n              break;\n            }\n          }\n          if (!connectionSpace) {\n            throw new Error('Cannot convert between color spaces '.concat(this, ' and ').concat(space, ': no connection space was found'));\n          }\n          for (var _i17 = myPath.length - 1; _i17 > connectionSpaceIndex; _i17--) {\n            coords = myPath[_i17].toBase(coords);\n          }\n          for (var _i18 = connectionSpaceIndex + 1; _i18 < otherPath.length; _i18++) {\n            coords = otherPath[_i18].fromBase(coords);\n          }\n          return coords;\n        }\n      }, {\n        key: 'from',\n        value: function from(space, coords) {\n          if (arguments.length === 1) {\n            var _ref41 = [ space.space, space.coords ];\n            space = _ref41[0];\n            coords = _ref41[1];\n          }\n          space = _ColorSpace2.get(space);\n          return space.to(this, coords);\n        }\n      }, {\n        key: 'toString',\n        value: function toString() {\n          return ''.concat(this.name, ' (').concat(this.id, ')');\n        }\n      }, {\n        key: 'getMinCoords',\n        value: function getMinCoords() {\n          var ret = [];\n          for (var id in this.coords) {\n            var _range2$min;\n            var meta = this.coords[id];\n            var range2 = meta.range || meta.refRange;\n            ret.push((_range2$min = range2 === null || range2 === void 0 ? void 0 : range2.min) !== null && _range2$min !== void 0 ? _range2$min : 0);\n          }\n          return ret;\n        }\n      } ], [ {\n        key: 'all',\n        get: function get() {\n          return _toConsumableArray(new Set(Object.values(_ColorSpace2.registry)));\n        }\n      }, {\n        key: 'register',\n        value: function register(id, space) {\n          if (arguments.length === 1) {\n            space = arguments[0];\n            id = space.id;\n          }\n          space = this.get(space);\n          if (this.registry[id] && this.registry[id] !== space) {\n            throw new Error('Duplicate color space registration: \\''.concat(id, '\\''));\n          }\n          this.registry[id] = space;\n          if (arguments.length === 1 && space.aliases) {\n            var _iterator7 = _createForOfIteratorHelper(space.aliases), _step7;\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {\n                var alias = _step7.value;\n                this.register(alias, space);\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n          return space;\n        }\n      }, {\n        key: 'get',\n        value: function get(space) {\n          if (!space || space instanceof _ColorSpace2) {\n            return space;\n          }\n          var argType = type(space);\n          if (argType === 'string') {\n            var ret = _ColorSpace2.registry[space.toLowerCase()];\n            if (!ret) {\n              throw new TypeError('No color space found with id = \"'.concat(space, '\"'));\n            }\n            return ret;\n          }\n          for (var _len2 = arguments.length, alternatives = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            alternatives[_key2 - 1] = arguments[_key2];\n          }\n          if (alternatives.length) {\n            return _ColorSpace2.get.apply(_ColorSpace2, alternatives);\n          }\n          throw new TypeError(''.concat(space, ' is not a valid color space'));\n        }\n      }, {\n        key: 'resolveCoord',\n        value: function resolveCoord(ref, workingSpace) {\n          var coordType = type(ref);\n          var space, coord;\n          if (coordType === 'string') {\n            if (ref.includes('.')) {\n              var _ref$split = ref.split('.');\n              var _ref$split2 = _slicedToArray(_ref$split, 2);\n              space = _ref$split2[0];\n              coord = _ref$split2[1];\n            } else {\n              space = void 0;\n              coord = ref;\n            }\n          } else if (Array.isArray(ref)) {\n            var _ref42 = _slicedToArray(ref, 2);\n            space = _ref42[0];\n            coord = _ref42[1];\n          } else {\n            space = ref.space;\n            coord = ref.coordId;\n          }\n          space = _ColorSpace2.get(space);\n          if (!space) {\n            space = workingSpace;\n          }\n          if (!space) {\n            throw new TypeError('Cannot resolve coordinate reference '.concat(ref, ': No color space specified and relative references are not allowed here'));\n          }\n          coordType = type(coord);\n          if (coordType === 'number' || coordType === 'string' && coord >= 0) {\n            var meta = Object.entries(space.coords)[coord];\n            if (meta) {\n              return _extends({\n                space: space,\n                id: meta[0],\n                index: coord\n              }, meta[1]);\n            }\n          }\n          space = _ColorSpace2.get(space);\n          var normalizedCoord = coord.toLowerCase();\n          var i = 0;\n          for (var id in space.coords) {\n            var _meta$name;\n            var _meta = space.coords[id];\n            if (id.toLowerCase() === normalizedCoord || ((_meta$name = _meta.name) === null || _meta$name === void 0 ? void 0 : _meta$name.toLowerCase()) === normalizedCoord) {\n              return _extends({\n                space: space,\n                id: id,\n                index: i\n              }, _meta);\n            }\n            i++;\n          }\n          throw new TypeError('No \"'.concat(coord, '\" coordinate found in ').concat(space.name, '. Its coordinates are: ').concat(Object.keys(space.coords).join(', ')));\n        }\n      } ]);\n    }());\n    function _processFormat(format) {\n      if (format.coords && !format.coordGrammar) {\n        format.type || (format.type = 'function');\n        format.name || (format.name = 'color');\n        format.coordGrammar = parseCoordGrammar(format.coords);\n        var coordFormats = Object.entries(this.coords).map(function(_ref150, i) {\n          var _ref151 = _slicedToArray(_ref150, 2), id = _ref151[0], coordMeta = _ref151[1];\n          var outputType = format.coordGrammar[i][0];\n          var fromRange = coordMeta.range || coordMeta.refRange;\n          var toRange = outputType.range, suffix = '';\n          if (outputType == '<percentage>') {\n            toRange = [ 0, 100 ];\n            suffix = '%';\n          } else if (outputType == '<angle>') {\n            suffix = 'deg';\n          }\n          return {\n            fromRange: fromRange,\n            toRange: toRange,\n            suffix: suffix\n          };\n        });\n        format.serializeCoords = function(coords, precision) {\n          return coords.map(function(c4, i) {\n            var _coordFormats$i = coordFormats[i], fromRange = _coordFormats$i.fromRange, toRange = _coordFormats$i.toRange, suffix = _coordFormats$i.suffix;\n            if (fromRange && toRange) {\n              c4 = mapRange(fromRange, toRange, c4);\n            }\n            c4 = toPrecision(c4, precision);\n            if (suffix) {\n              c4 += suffix;\n            }\n            return c4;\n          });\n        };\n      }\n      return format;\n    }\n    function _getPath() {\n      var ret = [ this ];\n      for (var _space2 = this; _space2 = _space2.base; ) {\n        ret.push(_space2);\n      }\n      return ret;\n    }\n    var ColorSpace = _ColorSpace2;\n    __publicField(ColorSpace, 'registry', {});\n    __publicField(ColorSpace, 'DEFAULT_FORMAT', {\n      type: 'functions',\n      name: 'color'\n    });\n    var XYZ_D65 = new ColorSpace({\n      id: 'xyz-d65',\n      name: 'XYZ D65',\n      coords: {\n        x: {\n          name: 'X'\n        },\n        y: {\n          name: 'Y'\n        },\n        z: {\n          name: 'Z'\n        }\n      },\n      white: 'D65',\n      formats: {\n        color: {\n          ids: [ 'xyz-d65', 'xyz' ]\n        }\n      },\n      aliases: [ 'xyz' ]\n    });\n    var RGBColorSpace = function(_ColorSpace3) {\n      function RGBColorSpace(options) {\n        var _options$referred;\n        var _this;\n        _classCallCheck(this, RGBColorSpace);\n        if (!options.coords) {\n          options.coords = {\n            r: {\n              range: [ 0, 1 ],\n              name: 'Red'\n            },\n            g: {\n              range: [ 0, 1 ],\n              name: 'Green'\n            },\n            b: {\n              range: [ 0, 1 ],\n              name: 'Blue'\n            }\n          };\n        }\n        if (!options.base) {\n          options.base = XYZ_D65;\n        }\n        if (options.toXYZ_M && options.fromXYZ_M) {\n          var _options$toBase, _options$fromBase;\n          (_options$toBase = options.toBase) !== null && _options$toBase !== void 0 ? _options$toBase : options.toBase = function(rgb) {\n            var xyz = multiplyMatrices(options.toXYZ_M, rgb);\n            if (_this.white !== _this.base.white) {\n              xyz = adapt$1(_this.white, _this.base.white, xyz);\n            }\n            return xyz;\n          };\n          (_options$fromBase = options.fromBase) !== null && _options$fromBase !== void 0 ? _options$fromBase : options.fromBase = function(xyz) {\n            xyz = adapt$1(_this.base.white, _this.white, xyz);\n            return multiplyMatrices(options.fromXYZ_M, xyz);\n          };\n        }\n        (_options$referred = options.referred) !== null && _options$referred !== void 0 ? _options$referred : options.referred = 'display';\n        return _this = _callSuper(this, RGBColorSpace, [ options ]);\n      }\n      _inherits(RGBColorSpace, _ColorSpace3);\n      return _createClass(RGBColorSpace);\n    }(ColorSpace);\n    function parse2(str) {\n      var _String;\n      var env = {\n        str: (_String = String(str)) === null || _String === void 0 ? void 0 : _String.trim()\n      };\n      hooks.run('parse-start', env);\n      if (env.color) {\n        return env.color;\n      }\n      env.parsed = parseFunction(env.str);\n      if (env.parsed) {\n        var name = env.parsed.name;\n        if (name === 'color') {\n          var id = env.parsed.args.shift();\n          var alpha = env.parsed.rawArgs.indexOf('/') > 0 ? env.parsed.args.pop() : 1;\n          var _iterator8 = _createForOfIteratorHelper(ColorSpace.all), _step8;\n          try {\n            var _loop5 = function _loop5() {\n              var space = _step8.value;\n              var colorSpec = space.getFormat('color');\n              if (colorSpec) {\n                var _colorSpec$ids;\n                if (id === colorSpec.id || (_colorSpec$ids = colorSpec.ids) !== null && _colorSpec$ids !== void 0 && _colorSpec$ids.includes(id)) {\n                  var argCount = Object.keys(space.coords).length;\n                  var coords = Array(argCount).fill(0);\n                  coords.forEach(function(_, i) {\n                    return coords[i] = env.parsed.args[i] || 0;\n                  });\n                  return {\n                    v: {\n                      spaceId: space.id,\n                      coords: coords,\n                      alpha: alpha\n                    }\n                  };\n                }\n              }\n            }, _ret2;\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {\n              _ret2 = _loop5();\n              if (_ret2) {\n                return _ret2.v;\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n          var didYouMean = '';\n          if (id in ColorSpace.registry) {\n            var _ColorSpace$registry$;\n            var cssId = (_ColorSpace$registry$ = ColorSpace.registry[id].formats) === null || _ColorSpace$registry$ === void 0 || (_ColorSpace$registry$ = _ColorSpace$registry$.functions) === null || _ColorSpace$registry$ === void 0 || (_ColorSpace$registry$ = _ColorSpace$registry$.color) === null || _ColorSpace$registry$ === void 0 ? void 0 : _ColorSpace$registry$.id;\n            if (cssId) {\n              didYouMean = 'Did you mean color('.concat(cssId, ')?');\n            }\n          }\n          throw new TypeError('Cannot parse color('.concat(id, '). ') + (didYouMean || 'Missing a plugin?'));\n        } else {\n          var _iterator9 = _createForOfIteratorHelper(ColorSpace.all), _step9;\n          try {\n            var _loop6 = function _loop6() {\n              var space = _step9.value;\n              var format = space.getFormat(name);\n              if (format && format.type === 'function') {\n                var _alpha = 1;\n                if (format.lastAlpha || last(env.parsed.args).alpha) {\n                  _alpha = env.parsed.args.pop();\n                }\n                var coords = env.parsed.args;\n                if (format.coordGrammar) {\n                  Object.entries(space.coords).forEach(function(_ref43, i) {\n                    var _coords$i;\n                    var _ref44 = _slicedToArray(_ref43, 2), id = _ref44[0], coordMeta = _ref44[1];\n                    var coordGrammar2 = format.coordGrammar[i];\n                    var providedType = (_coords$i = coords[i]) === null || _coords$i === void 0 ? void 0 : _coords$i.type;\n                    coordGrammar2 = coordGrammar2.find(function(c4) {\n                      return c4 == providedType;\n                    });\n                    if (!coordGrammar2) {\n                      var coordName = coordMeta.name || id;\n                      throw new TypeError(''.concat(providedType, ' not allowed for ').concat(coordName, ' in ').concat(name, '()'));\n                    }\n                    var fromRange = coordGrammar2.range;\n                    if (providedType === '<percentage>') {\n                      fromRange || (fromRange = [ 0, 1 ]);\n                    }\n                    var toRange = coordMeta.range || coordMeta.refRange;\n                    if (fromRange && toRange) {\n                      coords[i] = mapRange(fromRange, toRange, coords[i]);\n                    }\n                  });\n                }\n                return {\n                  v: {\n                    spaceId: space.id,\n                    coords: coords,\n                    alpha: _alpha\n                  }\n                };\n              }\n            }, _ret3;\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {\n              _ret3 = _loop6();\n              if (_ret3) {\n                return _ret3.v;\n              }\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n      } else {\n        var _iterator10 = _createForOfIteratorHelper(ColorSpace.all), _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {\n            var space = _step10.value;\n            for (var formatId in space.formats) {\n              var format = space.formats[formatId];\n              if (format.type !== 'custom') {\n                continue;\n              }\n              if (format.test && !format.test(env.str)) {\n                continue;\n              }\n              var color = format.parse(env.str);\n              if (color) {\n                var _color$alpha;\n                (_color$alpha = color.alpha) !== null && _color$alpha !== void 0 ? _color$alpha : color.alpha = 1;\n                return color;\n              }\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n      throw new TypeError('Could not parse '.concat(str, ' as a color. Missing a plugin?'));\n    }\n    function getColor(color) {\n      if (!color) {\n        throw new TypeError('Empty color reference');\n      }\n      if (isString(color)) {\n        color = parse2(color);\n      }\n      var space = color.space || color.spaceId;\n      if (!(space instanceof ColorSpace)) {\n        color.space = ColorSpace.get(space);\n      }\n      if (color.alpha === void 0) {\n        color.alpha = 1;\n      }\n      return color;\n    }\n    function getAll(color, space) {\n      space = ColorSpace.get(space);\n      return space.from(color);\n    }\n    function get(color, prop) {\n      var _ColorSpace$resolveCo = ColorSpace.resolveCoord(prop, color.space), space = _ColorSpace$resolveCo.space, index = _ColorSpace$resolveCo.index;\n      var coords = getAll(color, space);\n      return coords[index];\n    }\n    function setAll(color, space, coords) {\n      space = ColorSpace.get(space);\n      color.coords = space.to(color.space, coords);\n      return color;\n    }\n    function set(color, prop, value) {\n      color = getColor(color);\n      if (arguments.length === 2 && type(arguments[1]) === 'object') {\n        var object = arguments[1];\n        for (var p2 in object) {\n          set(color, p2, object[p2]);\n        }\n      } else {\n        if (typeof value === 'function') {\n          value = value(get(color, prop));\n        }\n        var _ColorSpace$resolveCo2 = ColorSpace.resolveCoord(prop, color.space), space = _ColorSpace$resolveCo2.space, index = _ColorSpace$resolveCo2.index;\n        var coords = getAll(color, space);\n        coords[index] = value;\n        setAll(color, space, coords);\n      }\n      return color;\n    }\n    var XYZ_D50 = new ColorSpace({\n      id: 'xyz-d50',\n      name: 'XYZ D50',\n      white: 'D50',\n      base: XYZ_D65,\n      fromBase: function fromBase(coords) {\n        return adapt$1(XYZ_D65.white, 'D50', coords);\n      },\n      toBase: function toBase(coords) {\n        return adapt$1('D50', XYZ_D65.white, coords);\n      },\n      formats: {\n        color: {}\n      }\n    });\n    var \\u03b5$3 = 216 / 24389;\n    var \\u03b53$1 = 24 / 116;\n    var \\u03ba$1 = 24389 / 27;\n    var white$1 = WHITES.D50;\n    var lab = new ColorSpace({\n      id: 'lab',\n      name: 'Lab',\n      coords: {\n        l: {\n          refRange: [ 0, 100 ],\n          name: 'L'\n        },\n        a: {\n          refRange: [ -125, 125 ]\n        },\n        b: {\n          refRange: [ -125, 125 ]\n        }\n      },\n      white: white$1,\n      base: XYZ_D50,\n      fromBase: function fromBase(XYZ) {\n        var xyz = XYZ.map(function(value, i) {\n          return value / white$1[i];\n        });\n        var f = xyz.map(function(value) {\n          return value > \\u03b5$3 ? Math.cbrt(value) : (\\u03ba$1 * value + 16) / 116;\n        });\n        return [ 116 * f[1] - 16, 500 * (f[0] - f[1]), 200 * (f[1] - f[2]) ];\n      },\n      toBase: function toBase(Lab) {\n        var f = [];\n        f[1] = (Lab[0] + 16) / 116;\n        f[0] = Lab[1] / 500 + f[1];\n        f[2] = f[1] - Lab[2] / 200;\n        var xyz = [ f[0] > \\u03b53$1 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / \\u03ba$1, Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / \\u03ba$1, f[2] > \\u03b53$1 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / \\u03ba$1 ];\n        return xyz.map(function(value, i) {\n          return value * white$1[i];\n        });\n      },\n      formats: {\n        lab: {\n          coords: [ '<number> | <percentage>', '<number>', '<number>' ]\n        }\n      }\n    });\n    function constrain(angle) {\n      return (angle % 360 + 360) % 360;\n    }\n    function adjust(arc, angles) {\n      if (arc === 'raw') {\n        return angles;\n      }\n      var _angles$map = angles.map(constrain), _angles$map2 = _slicedToArray(_angles$map, 2), a1 = _angles$map2[0], a2 = _angles$map2[1];\n      var angleDiff = a2 - a1;\n      if (arc === 'increasing') {\n        if (angleDiff < 0) {\n          a2 += 360;\n        }\n      } else if (arc === 'decreasing') {\n        if (angleDiff > 0) {\n          a1 += 360;\n        }\n      } else if (arc === 'longer') {\n        if (-180 < angleDiff && angleDiff < 180) {\n          if (angleDiff > 0) {\n            a2 += 360;\n          } else {\n            a1 += 360;\n          }\n        }\n      } else if (arc === 'shorter') {\n        if (angleDiff > 180) {\n          a1 += 360;\n        } else if (angleDiff < -180) {\n          a2 += 360;\n        }\n      }\n      return [ a1, a2 ];\n    }\n    var lch = new ColorSpace({\n      id: 'lch',\n      name: 'LCH',\n      coords: {\n        l: {\n          refRange: [ 0, 100 ],\n          name: 'Lightness'\n        },\n        c: {\n          refRange: [ 0, 150 ],\n          name: 'Chroma'\n        },\n        h: {\n          refRange: [ 0, 360 ],\n          type: 'angle',\n          name: 'Hue'\n        }\n      },\n      base: lab,\n      fromBase: function fromBase(Lab) {\n        var _Lab = _slicedToArray(Lab, 3), L = _Lab[0], a2 = _Lab[1], b2 = _Lab[2];\n        var hue;\n        var \\u03b52 = .02;\n        if (Math.abs(a2) < \\u03b52 && Math.abs(b2) < \\u03b52) {\n          hue = NaN;\n        } else {\n          hue = Math.atan2(b2, a2) * 180 / Math.PI;\n        }\n        return [ L, Math.sqrt(Math.pow(a2, 2) + Math.pow(b2, 2)), constrain(hue) ];\n      },\n      toBase: function toBase(LCH) {\n        var _LCH = _slicedToArray(LCH, 3), Lightness = _LCH[0], Chroma = _LCH[1], Hue = _LCH[2];\n        if (Chroma < 0) {\n          Chroma = 0;\n        }\n        if (isNaN(Hue)) {\n          Hue = 0;\n        }\n        return [ Lightness, Chroma * Math.cos(Hue * Math.PI / 180), Chroma * Math.sin(Hue * Math.PI / 180) ];\n      },\n      formats: {\n        lch: {\n          coords: [ '<number> | <percentage>', '<number>', '<number> | <angle>' ]\n        }\n      }\n    });\n    var Gfactor = Math.pow(25, 7);\n    var \\u03c0$1 = Math.PI;\n    var r2d = 180 / \\u03c0$1;\n    var d2r$1 = \\u03c0$1 / 180;\n    function deltaE2000(color, sample) {\n      var _ref45 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref45$kL = _ref45.kL, kL = _ref45$kL === void 0 ? 1 : _ref45$kL, _ref45$kC = _ref45.kC, kC = _ref45$kC === void 0 ? 1 : _ref45$kC, _ref45$kH = _ref45.kH, kH = _ref45$kH === void 0 ? 1 : _ref45$kH;\n      var _lab$from = lab.from(color), _lab$from2 = _slicedToArray(_lab$from, 3), L1 = _lab$from2[0], a1 = _lab$from2[1], b1 = _lab$from2[2];\n      var C1 = lch.from(lab, [ L1, a1, b1 ])[1];\n      var _lab$from3 = lab.from(sample), _lab$from4 = _slicedToArray(_lab$from3, 3), L2 = _lab$from4[0], a2 = _lab$from4[1], b2 = _lab$from4[2];\n      var C2 = lch.from(lab, [ L2, a2, b2 ])[1];\n      if (C1 < 0) {\n        C1 = 0;\n      }\n      if (C2 < 0) {\n        C2 = 0;\n      }\n      var Cbar = (C1 + C2) / 2;\n      var C7 = Math.pow(Cbar, 7);\n      var G = .5 * (1 - Math.sqrt(C7 / (C7 + Gfactor)));\n      var adash1 = (1 + G) * a1;\n      var adash2 = (1 + G) * a2;\n      var Cdash1 = Math.sqrt(Math.pow(adash1, 2) + Math.pow(b1, 2));\n      var Cdash2 = Math.sqrt(Math.pow(adash2, 2) + Math.pow(b2, 2));\n      var h1 = adash1 === 0 && b1 === 0 ? 0 : Math.atan2(b1, adash1);\n      var h2 = adash2 === 0 && b2 === 0 ? 0 : Math.atan2(b2, adash2);\n      if (h1 < 0) {\n        h1 += 2 * \\u03c0$1;\n      }\n      if (h2 < 0) {\n        h2 += 2 * \\u03c0$1;\n      }\n      h1 *= r2d;\n      h2 *= r2d;\n      var \\u0394L = L2 - L1;\n      var \\u0394C = Cdash2 - Cdash1;\n      var hdiff = h2 - h1;\n      var hsum = h1 + h2;\n      var habs = Math.abs(hdiff);\n      var \\u0394h;\n      if (Cdash1 * Cdash2 === 0) {\n        \\u0394h = 0;\n      } else if (habs <= 180) {\n        \\u0394h = hdiff;\n      } else if (hdiff > 180) {\n        \\u0394h = hdiff - 360;\n      } else if (hdiff < -180) {\n        \\u0394h = hdiff + 360;\n      } else {\n        console.log('the unthinkable has happened');\n      }\n      var \\u0394H = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(\\u0394h * d2r$1 / 2);\n      var Ldash = (L1 + L2) / 2;\n      var Cdash = (Cdash1 + Cdash2) / 2;\n      var Cdash7 = Math.pow(Cdash, 7);\n      var hdash;\n      if (Cdash1 * Cdash2 === 0) {\n        hdash = hsum;\n      } else if (habs <= 180) {\n        hdash = hsum / 2;\n      } else if (hsum < 360) {\n        hdash = (hsum + 360) / 2;\n      } else {\n        hdash = (hsum - 360) / 2;\n      }\n      var lsq = Math.pow(Ldash - 50, 2);\n      var SL = 1 + .015 * lsq / Math.sqrt(20 + lsq);\n      var SC = 1 + .045 * Cdash;\n      var T = 1;\n      T -= .17 * Math.cos((hdash - 30) * d2r$1);\n      T += .24 * Math.cos(2 * hdash * d2r$1);\n      T += .32 * Math.cos((3 * hdash + 6) * d2r$1);\n      T -= .2 * Math.cos((4 * hdash - 63) * d2r$1);\n      var SH = 1 + .015 * Cdash * T;\n      var \\u0394\\u03b8 = 30 * Math.exp(-1 * Math.pow((hdash - 275) / 25, 2));\n      var RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));\n      var RT = -1 * Math.sin(2 * \\u0394\\u03b8 * d2r$1) * RC;\n      var dE = Math.pow(\\u0394L / (kL * SL), 2);\n      dE += Math.pow(\\u0394C / (kC * SC), 2);\n      dE += Math.pow(\\u0394H / (kH * SH), 2);\n      dE += RT * (\\u0394C / (kC * SC)) * (\\u0394H / (kH * SH));\n      return Math.sqrt(dE);\n    }\n    var \\u03b5$2 = 75e-6;\n    function inGamut(color) {\n      var space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : color.space;\n      var _ref46 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref46$epsilon = _ref46.epsilon, epsilon = _ref46$epsilon === void 0 ? \\u03b5$2 : _ref46$epsilon;\n      color = getColor(color);\n      space = ColorSpace.get(space);\n      var coords = color.coords;\n      if (space !== color.space) {\n        coords = space.from(color);\n      }\n      return space.inGamut(coords, {\n        epsilon: epsilon\n      });\n    }\n    function clone2(color) {\n      return {\n        space: color.space,\n        coords: color.coords.slice(),\n        alpha: color.alpha\n      };\n    }\n    function toGamut(color) {\n      var _ref47 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref47$method = _ref47.method, method = _ref47$method === void 0 ? defaults.gamut_mapping : _ref47$method, _ref47$space = _ref47.space, space = _ref47$space === void 0 ? color.space : _ref47$space;\n      if (isString(arguments[1])) {\n        space = arguments[1];\n      }\n      space = ColorSpace.get(space);\n      if (inGamut(color, space, {\n        epsilon: 0\n      })) {\n        return color;\n      }\n      var spaceColor = to(color, space);\n      if (method !== 'clip' && !inGamut(color, space)) {\n        var clipped = toGamut(clone2(spaceColor), {\n          method: 'clip',\n          space: space\n        });\n        if (deltaE2000(color, clipped) > 2) {\n          var coordMeta = ColorSpace.resolveCoord(method);\n          var mapSpace = coordMeta.space;\n          var coordId = coordMeta.id;\n          var mappedColor = to(spaceColor, mapSpace);\n          var bounds = coordMeta.range || coordMeta.refRange;\n          var min = bounds[0];\n          var \\u03b52 = .01;\n          var low = min;\n          var high = get(mappedColor, coordId);\n          while (high - low > \\u03b52) {\n            var clipped2 = clone2(mappedColor);\n            clipped2 = toGamut(clipped2, {\n              space: space,\n              method: 'clip'\n            });\n            var deltaE2 = deltaE2000(mappedColor, clipped2);\n            if (deltaE2 - 2 < \\u03b52) {\n              low = get(mappedColor, coordId);\n            } else {\n              high = get(mappedColor, coordId);\n            }\n            set(mappedColor, coordId, (low + high) / 2);\n          }\n          spaceColor = to(mappedColor, space);\n        } else {\n          spaceColor = clipped;\n        }\n      }\n      if (method === 'clip' || !inGamut(spaceColor, space, {\n        epsilon: 0\n      })) {\n        var _bounds = Object.values(space.coords).map(function(c4) {\n          return c4.range || [];\n        });\n        spaceColor.coords = spaceColor.coords.map(function(c4, i) {\n          var _bounds$i = _slicedToArray(_bounds[i], 2), min = _bounds$i[0], max2 = _bounds$i[1];\n          if (min !== void 0) {\n            c4 = Math.max(min, c4);\n          }\n          if (max2 !== void 0) {\n            c4 = Math.min(c4, max2);\n          }\n          return c4;\n        });\n      }\n      if (space !== color.space) {\n        spaceColor = to(spaceColor, color.space);\n      }\n      color.coords = spaceColor.coords;\n      return color;\n    }\n    toGamut.returns = 'color';\n    function to(color, space) {\n      var _ref48 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, inGamut2 = _ref48.inGamut;\n      color = getColor(color);\n      space = ColorSpace.get(space);\n      var coords = space.from(color);\n      var ret = {\n        space: space,\n        coords: coords,\n        alpha: color.alpha\n      };\n      if (inGamut2) {\n        ret = toGamut(ret);\n      }\n      return ret;\n    }\n    to.returns = 'color';\n    function serialize(color) {\n      var _ref50, _color$space$getForma;\n      var _ref49 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _ref49$precision = _ref49.precision, precision = _ref49$precision === void 0 ? defaults.precision : _ref49$precision, _ref49$format = _ref49.format, format = _ref49$format === void 0 ? 'default' : _ref49$format, _ref49$inGamut = _ref49.inGamut, inGamut$1 = _ref49$inGamut === void 0 ? true : _ref49$inGamut, customOptions = _objectWithoutProperties(_ref49, _excluded9);\n      var ret;\n      color = getColor(color);\n      var formatId = format;\n      format = (_ref50 = (_color$space$getForma = color.space.getFormat(format)) !== null && _color$space$getForma !== void 0 ? _color$space$getForma : color.space.getFormat('default')) !== null && _ref50 !== void 0 ? _ref50 : ColorSpace.DEFAULT_FORMAT;\n      inGamut$1 || (inGamut$1 = format.toGamut);\n      var coords = color.coords;\n      coords = coords.map(function(c4) {\n        return c4 ? c4 : 0;\n      });\n      if (inGamut$1 && !inGamut(color)) {\n        coords = toGamut(clone2(color), inGamut$1 === true ? void 0 : inGamut$1).coords;\n      }\n      if (format.type === 'custom') {\n        customOptions.precision = precision;\n        if (format.serialize) {\n          ret = format.serialize(coords, color.alpha, customOptions);\n        } else {\n          throw new TypeError('format '.concat(formatId, ' can only be used to parse colors, not for serialization'));\n        }\n      } else {\n        var name = format.name || 'color';\n        if (format.serializeCoords) {\n          coords = format.serializeCoords(coords, precision);\n        } else {\n          if (precision !== null) {\n            coords = coords.map(function(c4) {\n              return toPrecision(c4, precision);\n            });\n          }\n        }\n        var args = _toConsumableArray(coords);\n        if (name === 'color') {\n          var _format$ids;\n          var cssId = format.id || ((_format$ids = format.ids) === null || _format$ids === void 0 ? void 0 : _format$ids[0]) || color.space.id;\n          args.unshift(cssId);\n        }\n        var alpha = color.alpha;\n        if (precision !== null) {\n          alpha = toPrecision(alpha, precision);\n        }\n        var strAlpha = color.alpha < 1 && !format.noAlpha ? ''.concat(format.commas ? ',' : ' /', ' ').concat(alpha) : '';\n        ret = ''.concat(name, '(').concat(args.join(format.commas ? ', ' : ' ')).concat(strAlpha, ')');\n      }\n      return ret;\n    }\n    var toXYZ_M$5 = [ [ .6369580483012914, .14461690358620832, .1688809751641721 ], [ .2627002120112671, .6779980715188708, .05930171646986196 ], [ 0, .028072693049087428, 1.060985057710791 ] ];\n    var fromXYZ_M$5 = [ [ 1.716651187971268, -.355670783776392, -.25336628137366 ], [ -.666684351832489, 1.616481236634939, .0157685458139111 ], [ .017639857445311, -.042770613257809, .942103121235474 ] ];\n    var REC2020Linear = new RGBColorSpace({\n      id: 'rec2020-linear',\n      name: 'Linear REC.2020',\n      white: 'D65',\n      toXYZ_M: toXYZ_M$5,\n      fromXYZ_M: fromXYZ_M$5,\n      formats: {\n        color: {}\n      }\n    });\n    var \\u03b1 = 1.09929682680944;\n    var \\u03b2 = .018053968510807;\n    var REC2020 = new RGBColorSpace({\n      id: 'rec2020',\n      name: 'REC.2020',\n      base: REC2020Linear,\n      toBase: function toBase(RGB) {\n        return RGB.map(function(val) {\n          if (val < \\u03b2 * 4.5) {\n            return val / 4.5;\n          }\n          return Math.pow((val + \\u03b1 - 1) / \\u03b1, 1 / .45);\n        });\n      },\n      fromBase: function fromBase(RGB) {\n        return RGB.map(function(val) {\n          if (val >= \\u03b2) {\n            return \\u03b1 * Math.pow(val, .45) - (\\u03b1 - 1);\n          }\n          return 4.5 * val;\n        });\n      },\n      formats: {\n        color: {}\n      }\n    });\n    var toXYZ_M$4 = [ [ .4865709486482162, .26566769316909306, .1982172852343625 ], [ .2289745640697488, .6917385218365064, .079286914093745 ], [ 0, .04511338185890264, 1.043944368900976 ] ];\n    var fromXYZ_M$4 = [ [ 2.493496911941425, -.9313836179191239, -.40271078445071684 ], [ -.8294889695615747, 1.7626640603183463, .023624685841943577 ], [ .03584583024378447, -.07617238926804182, .9568845240076872 ] ];\n    var P3Linear = new RGBColorSpace({\n      id: 'p3-linear',\n      name: 'Linear P3',\n      white: 'D65',\n      toXYZ_M: toXYZ_M$4,\n      fromXYZ_M: fromXYZ_M$4\n    });\n    var toXYZ_M$3 = [ [ .41239079926595934, .357584339383878, .1804807884018343 ], [ .21263900587151027, .715168678767756, .07219231536073371 ], [ .01933081871559182, .11919477979462598, .9505321522496607 ] ];\n    var fromXYZ_M$3 = [ [ 3.2409699419045226, -1.537383177570094, -.4986107602930034 ], [ -.9692436362808796, 1.8759675015077202, .04155505740717559 ], [ .05563007969699366, -.20397695888897652, 1.0569715142428786 ] ];\n    var sRGBLinear = new RGBColorSpace({\n      id: 'srgb-linear',\n      name: 'Linear sRGB',\n      white: 'D65',\n      toXYZ_M: toXYZ_M$3,\n      fromXYZ_M: fromXYZ_M$3,\n      formats: {\n        color: {}\n      }\n    });\n    var KEYWORDS = {\n      aliceblue: [ 240 / 255, 248 / 255, 1 ],\n      antiquewhite: [ 250 / 255, 235 / 255, 215 / 255 ],\n      aqua: [ 0, 1, 1 ],\n      aquamarine: [ 127 / 255, 1, 212 / 255 ],\n      azure: [ 240 / 255, 1, 1 ],\n      beige: [ 245 / 255, 245 / 255, 220 / 255 ],\n      bisque: [ 1, 228 / 255, 196 / 255 ],\n      black: [ 0, 0, 0 ],\n      blanchedalmond: [ 1, 235 / 255, 205 / 255 ],\n      blue: [ 0, 0, 1 ],\n      blueviolet: [ 138 / 255, 43 / 255, 226 / 255 ],\n      brown: [ 165 / 255, 42 / 255, 42 / 255 ],\n      burlywood: [ 222 / 255, 184 / 255, 135 / 255 ],\n      cadetblue: [ 95 / 255, 158 / 255, 160 / 255 ],\n      chartreuse: [ 127 / 255, 1, 0 ],\n      chocolate: [ 210 / 255, 105 / 255, 30 / 255 ],\n      coral: [ 1, 127 / 255, 80 / 255 ],\n      cornflowerblue: [ 100 / 255, 149 / 255, 237 / 255 ],\n      cornsilk: [ 1, 248 / 255, 220 / 255 ],\n      crimson: [ 220 / 255, 20 / 255, 60 / 255 ],\n      cyan: [ 0, 1, 1 ],\n      darkblue: [ 0, 0, 139 / 255 ],\n      darkcyan: [ 0, 139 / 255, 139 / 255 ],\n      darkgoldenrod: [ 184 / 255, 134 / 255, 11 / 255 ],\n      darkgray: [ 169 / 255, 169 / 255, 169 / 255 ],\n      darkgreen: [ 0, 100 / 255, 0 ],\n      darkgrey: [ 169 / 255, 169 / 255, 169 / 255 ],\n      darkkhaki: [ 189 / 255, 183 / 255, 107 / 255 ],\n      darkmagenta: [ 139 / 255, 0, 139 / 255 ],\n      darkolivegreen: [ 85 / 255, 107 / 255, 47 / 255 ],\n      darkorange: [ 1, 140 / 255, 0 ],\n      darkorchid: [ 153 / 255, 50 / 255, 204 / 255 ],\n      darkred: [ 139 / 255, 0, 0 ],\n      darksalmon: [ 233 / 255, 150 / 255, 122 / 255 ],\n      darkseagreen: [ 143 / 255, 188 / 255, 143 / 255 ],\n      darkslateblue: [ 72 / 255, 61 / 255, 139 / 255 ],\n      darkslategray: [ 47 / 255, 79 / 255, 79 / 255 ],\n      darkslategrey: [ 47 / 255, 79 / 255, 79 / 255 ],\n      darkturquoise: [ 0, 206 / 255, 209 / 255 ],\n      darkviolet: [ 148 / 255, 0, 211 / 255 ],\n      deeppink: [ 1, 20 / 255, 147 / 255 ],\n      deepskyblue: [ 0, 191 / 255, 1 ],\n      dimgray: [ 105 / 255, 105 / 255, 105 / 255 ],\n      dimgrey: [ 105 / 255, 105 / 255, 105 / 255 ],\n      dodgerblue: [ 30 / 255, 144 / 255, 1 ],\n      firebrick: [ 178 / 255, 34 / 255, 34 / 255 ],\n      floralwhite: [ 1, 250 / 255, 240 / 255 ],\n      forestgreen: [ 34 / 255, 139 / 255, 34 / 255 ],\n      fuchsia: [ 1, 0, 1 ],\n      gainsboro: [ 220 / 255, 220 / 255, 220 / 255 ],\n      ghostwhite: [ 248 / 255, 248 / 255, 1 ],\n      gold: [ 1, 215 / 255, 0 ],\n      goldenrod: [ 218 / 255, 165 / 255, 32 / 255 ],\n      gray: [ 128 / 255, 128 / 255, 128 / 255 ],\n      green: [ 0, 128 / 255, 0 ],\n      greenyellow: [ 173 / 255, 1, 47 / 255 ],\n      grey: [ 128 / 255, 128 / 255, 128 / 255 ],\n      honeydew: [ 240 / 255, 1, 240 / 255 ],\n      hotpink: [ 1, 105 / 255, 180 / 255 ],\n      indianred: [ 205 / 255, 92 / 255, 92 / 255 ],\n      indigo: [ 75 / 255, 0, 130 / 255 ],\n      ivory: [ 1, 1, 240 / 255 ],\n      khaki: [ 240 / 255, 230 / 255, 140 / 255 ],\n      lavender: [ 230 / 255, 230 / 255, 250 / 255 ],\n      lavenderblush: [ 1, 240 / 255, 245 / 255 ],\n      lawngreen: [ 124 / 255, 252 / 255, 0 ],\n      lemonchiffon: [ 1, 250 / 255, 205 / 255 ],\n      lightblue: [ 173 / 255, 216 / 255, 230 / 255 ],\n      lightcoral: [ 240 / 255, 128 / 255, 128 / 255 ],\n      lightcyan: [ 224 / 255, 1, 1 ],\n      lightgoldenrodyellow: [ 250 / 255, 250 / 255, 210 / 255 ],\n      lightgray: [ 211 / 255, 211 / 255, 211 / 255 ],\n      lightgreen: [ 144 / 255, 238 / 255, 144 / 255 ],\n      lightgrey: [ 211 / 255, 211 / 255, 211 / 255 ],\n      lightpink: [ 1, 182 / 255, 193 / 255 ],\n      lightsalmon: [ 1, 160 / 255, 122 / 255 ],\n      lightseagreen: [ 32 / 255, 178 / 255, 170 / 255 ],\n      lightskyblue: [ 135 / 255, 206 / 255, 250 / 255 ],\n      lightslategray: [ 119 / 255, 136 / 255, 153 / 255 ],\n      lightslategrey: [ 119 / 255, 136 / 255, 153 / 255 ],\n      lightsteelblue: [ 176 / 255, 196 / 255, 222 / 255 ],\n      lightyellow: [ 1, 1, 224 / 255 ],\n      lime: [ 0, 1, 0 ],\n      limegreen: [ 50 / 255, 205 / 255, 50 / 255 ],\n      linen: [ 250 / 255, 240 / 255, 230 / 255 ],\n      magenta: [ 1, 0, 1 ],\n      maroon: [ 128 / 255, 0, 0 ],\n      mediumaquamarine: [ 102 / 255, 205 / 255, 170 / 255 ],\n      mediumblue: [ 0, 0, 205 / 255 ],\n      mediumorchid: [ 186 / 255, 85 / 255, 211 / 255 ],\n      mediumpurple: [ 147 / 255, 112 / 255, 219 / 255 ],\n      mediumseagreen: [ 60 / 255, 179 / 255, 113 / 255 ],\n      mediumslateblue: [ 123 / 255, 104 / 255, 238 / 255 ],\n      mediumspringgreen: [ 0, 250 / 255, 154 / 255 ],\n      mediumturquoise: [ 72 / 255, 209 / 255, 204 / 255 ],\n      mediumvioletred: [ 199 / 255, 21 / 255, 133 / 255 ],\n      midnightblue: [ 25 / 255, 25 / 255, 112 / 255 ],\n      mintcream: [ 245 / 255, 1, 250 / 255 ],\n      mistyrose: [ 1, 228 / 255, 225 / 255 ],\n      moccasin: [ 1, 228 / 255, 181 / 255 ],\n      navajowhite: [ 1, 222 / 255, 173 / 255 ],\n      navy: [ 0, 0, 128 / 255 ],\n      oldlace: [ 253 / 255, 245 / 255, 230 / 255 ],\n      olive: [ 128 / 255, 128 / 255, 0 ],\n      olivedrab: [ 107 / 255, 142 / 255, 35 / 255 ],\n      orange: [ 1, 165 / 255, 0 ],\n      orangered: [ 1, 69 / 255, 0 ],\n      orchid: [ 218 / 255, 112 / 255, 214 / 255 ],\n      palegoldenrod: [ 238 / 255, 232 / 255, 170 / 255 ],\n      palegreen: [ 152 / 255, 251 / 255, 152 / 255 ],\n      paleturquoise: [ 175 / 255, 238 / 255, 238 / 255 ],\n      palevioletred: [ 219 / 255, 112 / 255, 147 / 255 ],\n      papayawhip: [ 1, 239 / 255, 213 / 255 ],\n      peachpuff: [ 1, 218 / 255, 185 / 255 ],\n      peru: [ 205 / 255, 133 / 255, 63 / 255 ],\n      pink: [ 1, 192 / 255, 203 / 255 ],\n      plum: [ 221 / 255, 160 / 255, 221 / 255 ],\n      powderblue: [ 176 / 255, 224 / 255, 230 / 255 ],\n      purple: [ 128 / 255, 0, 128 / 255 ],\n      rebeccapurple: [ 102 / 255, 51 / 255, 153 / 255 ],\n      red: [ 1, 0, 0 ],\n      rosybrown: [ 188 / 255, 143 / 255, 143 / 255 ],\n      royalblue: [ 65 / 255, 105 / 255, 225 / 255 ],\n      saddlebrown: [ 139 / 255, 69 / 255, 19 / 255 ],\n      salmon: [ 250 / 255, 128 / 255, 114 / 255 ],\n      sandybrown: [ 244 / 255, 164 / 255, 96 / 255 ],\n      seagreen: [ 46 / 255, 139 / 255, 87 / 255 ],\n      seashell: [ 1, 245 / 255, 238 / 255 ],\n      sienna: [ 160 / 255, 82 / 255, 45 / 255 ],\n      silver: [ 192 / 255, 192 / 255, 192 / 255 ],\n      skyblue: [ 135 / 255, 206 / 255, 235 / 255 ],\n      slateblue: [ 106 / 255, 90 / 255, 205 / 255 ],\n      slategray: [ 112 / 255, 128 / 255, 144 / 255 ],\n      slategrey: [ 112 / 255, 128 / 255, 144 / 255 ],\n      snow: [ 1, 250 / 255, 250 / 255 ],\n      springgreen: [ 0, 1, 127 / 255 ],\n      steelblue: [ 70 / 255, 130 / 255, 180 / 255 ],\n      tan: [ 210 / 255, 180 / 255, 140 / 255 ],\n      teal: [ 0, 128 / 255, 128 / 255 ],\n      thistle: [ 216 / 255, 191 / 255, 216 / 255 ],\n      tomato: [ 1, 99 / 255, 71 / 255 ],\n      turquoise: [ 64 / 255, 224 / 255, 208 / 255 ],\n      violet: [ 238 / 255, 130 / 255, 238 / 255 ],\n      wheat: [ 245 / 255, 222 / 255, 179 / 255 ],\n      white: [ 1, 1, 1 ],\n      whitesmoke: [ 245 / 255, 245 / 255, 245 / 255 ],\n      yellow: [ 1, 1, 0 ],\n      yellowgreen: [ 154 / 255, 205 / 255, 50 / 255 ]\n    };\n    var coordGrammar = Array(3).fill('<percentage> | <number>[0, 255]');\n    var coordGrammarNumber = Array(3).fill('<number>[0, 255]');\n    var sRGB = new RGBColorSpace({\n      id: 'srgb',\n      name: 'sRGB',\n      base: sRGBLinear,\n      fromBase: function fromBase(rgb) {\n        return rgb.map(function(val) {\n          var sign = val < 0 ? -1 : 1;\n          var abs = val * sign;\n          if (abs > .0031308) {\n            return sign * (1.055 * Math.pow(abs, 1 / 2.4) - .055);\n          }\n          return 12.92 * val;\n        });\n      },\n      toBase: function toBase(rgb) {\n        return rgb.map(function(val) {\n          var sign = val < 0 ? -1 : 1;\n          var abs = val * sign;\n          if (abs < .04045) {\n            return val / 12.92;\n          }\n          return sign * Math.pow((abs + .055) / 1.055, 2.4);\n        });\n      },\n      formats: {\n        rgb: {\n          coords: coordGrammar\n        },\n        rgb_number: {\n          name: 'rgb',\n          commas: true,\n          coords: coordGrammarNumber,\n          noAlpha: true\n        },\n        color: {},\n        rgba: {\n          coords: coordGrammar,\n          commas: true,\n          lastAlpha: true\n        },\n        rgba_number: {\n          name: 'rgba',\n          commas: true,\n          coords: coordGrammarNumber\n        },\n        hex: {\n          type: 'custom',\n          toGamut: true,\n          test: function test(str) {\n            return /^#([a-f0-9]{3,4}){1,2}$/i.test(str);\n          },\n          parse: function parse(str) {\n            if (str.length <= 5) {\n              str = str.replace(/[a-f0-9]/gi, '$&$&');\n            }\n            var rgba = [];\n            str.replace(/[a-f0-9]{2}/gi, function(component) {\n              rgba.push(parseInt(component, 16) / 255);\n            });\n            return {\n              spaceId: 'srgb',\n              coords: rgba.slice(0, 3),\n              alpha: rgba.slice(3)[0]\n            };\n          },\n          serialize: function serialize(coords, alpha) {\n            var _ref51 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref51$collapse = _ref51.collapse, collapse = _ref51$collapse === void 0 ? true : _ref51$collapse;\n            if (alpha < 1) {\n              coords.push(alpha);\n            }\n            coords = coords.map(function(c4) {\n              return Math.round(c4 * 255);\n            });\n            var collapsible = collapse && coords.every(function(c4) {\n              return c4 % 17 === 0;\n            });\n            var hex = coords.map(function(c4) {\n              if (collapsible) {\n                return (c4 / 17).toString(16);\n              }\n              return c4.toString(16).padStart(2, '0');\n            }).join('');\n            return '#' + hex;\n          }\n        },\n        keyword: {\n          type: 'custom',\n          test: function test(str) {\n            return /^[a-z]+$/i.test(str);\n          },\n          parse: function parse(str) {\n            str = str.toLowerCase();\n            var ret = {\n              spaceId: 'srgb',\n              coords: null,\n              alpha: 1\n            };\n            if (str === 'transparent') {\n              ret.coords = KEYWORDS.black;\n              ret.alpha = 0;\n            } else {\n              ret.coords = KEYWORDS[str];\n            }\n            if (ret.coords) {\n              return ret;\n            }\n          }\n        }\n      }\n    });\n    var P3 = new RGBColorSpace({\n      id: 'p3',\n      name: 'P3',\n      base: P3Linear,\n      fromBase: sRGB.fromBase,\n      toBase: sRGB.toBase,\n      formats: {\n        color: {\n          id: 'display-p3'\n        }\n      }\n    });\n    defaults.display_space = sRGB;\n    if (typeof CSS !== 'undefined' && (_CSS = CSS) !== null && _CSS !== void 0 && _CSS.supports) {\n      for (var _i19 = 0, _arr2 = [ lab, REC2020, P3 ]; _i19 < _arr2.length; _i19++) {\n        var space = _arr2[_i19];\n        var coords = space.getMinCoords();\n        var color = {\n          space: space,\n          coords: coords,\n          alpha: 1\n        };\n        var str = serialize(color);\n        if (CSS.supports('color', str)) {\n          defaults.display_space = space;\n          break;\n        }\n      }\n    }\n    function _display(color) {\n      var _CSS2;\n      var _ref52 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _ref52$space = _ref52.space, space = _ref52$space === void 0 ? defaults.display_space : _ref52$space, options = _objectWithoutProperties(_ref52, _excluded10);\n      var ret = serialize(color, options);\n      if (typeof CSS === 'undefined' || (_CSS2 = CSS) !== null && _CSS2 !== void 0 && _CSS2.supports('color', ret) || !defaults.display_space) {\n        ret = new String(ret);\n        ret.color = color;\n      } else {\n        var fallbackColor = to(color, space);\n        ret = new String(serialize(fallbackColor, options));\n        ret.color = fallbackColor;\n      }\n      return ret;\n    }\n    function distance(color1, color2) {\n      var space = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'lab';\n      space = ColorSpace.get(space);\n      var coords1 = space.from(color1);\n      var coords2 = space.from(color2);\n      return Math.sqrt(coords1.reduce(function(acc, c12, i) {\n        var c22 = coords2[i];\n        if (isNaN(c12) || isNaN(c22)) {\n          return acc;\n        }\n        return acc + Math.pow(c22 - c12, 2);\n      }, 0));\n    }\n    function equals(color1, color2) {\n      color1 = getColor(color1);\n      color2 = getColor(color2);\n      return color1.space === color2.space && color1.alpha === color2.alpha && color1.coords.every(function(c4, i) {\n        return c4 === color2.coords[i];\n      });\n    }\n    function getLuminance(color) {\n      return get(color, [ XYZ_D65, 'y' ]);\n    }\n    function setLuminance(color, value) {\n      set(color, [ XYZ_D65, 'y' ], value);\n    }\n    function register$2(Color3) {\n      Object.defineProperty(Color3.prototype, 'luminance', {\n        get: function get() {\n          return getLuminance(this);\n        },\n        set: function set(value) {\n          setLuminance(this, value);\n        }\n      });\n    }\n    var luminance = Object.freeze({\n      __proto__: null,\n      getLuminance: getLuminance,\n      setLuminance: setLuminance,\n      register: register$2\n    });\n    function contrastWCAG21(color1, color2) {\n      color1 = getColor(color1);\n      color2 = getColor(color2);\n      var Y1 = Math.max(getLuminance(color1), 0);\n      var Y2 = Math.max(getLuminance(color2), 0);\n      if (Y2 > Y1) {\n        var _ref53 = [ Y2, Y1 ];\n        Y1 = _ref53[0];\n        Y2 = _ref53[1];\n      }\n      return (Y1 + .05) / (Y2 + .05);\n    }\n    var normBG = .56;\n    var normTXT = .57;\n    var revTXT = .62;\n    var revBG = .65;\n    var blkThrs = .022;\n    var blkClmp = 1.414;\n    var loClip = .1;\n    var deltaYmin = 5e-4;\n    var scaleBoW = 1.14;\n    var loBoWoffset = .027;\n    var scaleWoB = 1.14;\n    function fclamp(Y) {\n      if (Y >= blkThrs) {\n        return Y;\n      }\n      return Y + Math.pow(blkThrs - Y, blkClmp);\n    }\n    function linearize(val) {\n      var sign = val < 0 ? -1 : 1;\n      var abs = Math.abs(val);\n      return sign * Math.pow(abs, 2.4);\n    }\n    function contrastAPCA(background, foreground) {\n      foreground = getColor(foreground);\n      background = getColor(background);\n      var S;\n      var C;\n      var Sapc;\n      var R, G, B;\n      foreground = to(foreground, 'srgb');\n      var _foreground$coords = _slicedToArray(foreground.coords, 3);\n      R = _foreground$coords[0];\n      G = _foreground$coords[1];\n      B = _foreground$coords[2];\n      var lumTxt = linearize(R) * .2126729 + linearize(G) * .7151522 + linearize(B) * .072175;\n      background = to(background, 'srgb');\n      var _background$coords = _slicedToArray(background.coords, 3);\n      R = _background$coords[0];\n      G = _background$coords[1];\n      B = _background$coords[2];\n      var lumBg = linearize(R) * .2126729 + linearize(G) * .7151522 + linearize(B) * .072175;\n      var Ytxt = fclamp(lumTxt);\n      var Ybg = fclamp(lumBg);\n      var BoW = Ybg > Ytxt;\n      if (Math.abs(Ybg - Ytxt) < deltaYmin) {\n        C = 0;\n      } else {\n        if (BoW) {\n          S = Math.pow(Ybg, normBG) - Math.pow(Ytxt, normTXT);\n          C = S * scaleBoW;\n        } else {\n          S = Math.pow(Ybg, revBG) - Math.pow(Ytxt, revTXT);\n          C = S * scaleWoB;\n        }\n      }\n      if (Math.abs(C) < loClip) {\n        Sapc = 0;\n      } else if (C > 0) {\n        Sapc = C - loBoWoffset;\n      } else {\n        Sapc = C + loBoWoffset;\n      }\n      return Sapc * 100;\n    }\n    function contrastMichelson(color1, color2) {\n      color1 = getColor(color1);\n      color2 = getColor(color2);\n      var Y1 = Math.max(getLuminance(color1), 0);\n      var Y2 = Math.max(getLuminance(color2), 0);\n      if (Y2 > Y1) {\n        var _ref54 = [ Y2, Y1 ];\n        Y1 = _ref54[0];\n        Y2 = _ref54[1];\n      }\n      var denom = Y1 + Y2;\n      return denom === 0 ? 0 : (Y1 - Y2) / denom;\n    }\n    var max = 5e4;\n    function contrastWeber(color1, color2) {\n      color1 = getColor(color1);\n      color2 = getColor(color2);\n      var Y1 = Math.max(getLuminance(color1), 0);\n      var Y2 = Math.max(getLuminance(color2), 0);\n      if (Y2 > Y1) {\n        var _ref55 = [ Y2, Y1 ];\n        Y1 = _ref55[0];\n        Y2 = _ref55[1];\n      }\n      return Y2 === 0 ? max : (Y1 - Y2) / Y2;\n    }\n    function contrastLstar(color1, color2) {\n      color1 = getColor(color1);\n      color2 = getColor(color2);\n      var L1 = get(color1, [ lab, 'l' ]);\n      var L2 = get(color2, [ lab, 'l' ]);\n      return Math.abs(L1 - L2);\n    }\n    var \\u03b5$1 = 216 / 24389;\n    var \\u03b53 = 24 / 116;\n    var \\u03ba = 24389 / 27;\n    var white = WHITES.D65;\n    var lab_d65 = new ColorSpace({\n      id: 'lab-d65',\n      name: 'Lab D65',\n      coords: {\n        l: {\n          refRange: [ 0, 100 ],\n          name: 'L'\n        },\n        a: {\n          refRange: [ -125, 125 ]\n        },\n        b: {\n          refRange: [ -125, 125 ]\n        }\n      },\n      white: white,\n      base: XYZ_D65,\n      fromBase: function fromBase(XYZ) {\n        var xyz = XYZ.map(function(value, i) {\n          return value / white[i];\n        });\n        var f = xyz.map(function(value) {\n          return value > \\u03b5$1 ? Math.cbrt(value) : (\\u03ba * value + 16) / 116;\n        });\n        return [ 116 * f[1] - 16, 500 * (f[0] - f[1]), 200 * (f[1] - f[2]) ];\n      },\n      toBase: function toBase(Lab) {\n        var f = [];\n        f[1] = (Lab[0] + 16) / 116;\n        f[0] = Lab[1] / 500 + f[1];\n        f[2] = f[1] - Lab[2] / 200;\n        var xyz = [ f[0] > \\u03b53 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / \\u03ba, Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / \\u03ba, f[2] > \\u03b53 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / \\u03ba ];\n        return xyz.map(function(value, i) {\n          return value * white[i];\n        });\n      },\n      formats: {\n        'lab-d65': {\n          coords: [ '<number> | <percentage>', '<number>', '<number>' ]\n        }\n      }\n    });\n    var phi = Math.pow(5, .5) * .5 + .5;\n    function contrastDeltaPhi(color1, color2) {\n      color1 = getColor(color1);\n      color2 = getColor(color2);\n      var Lstr1 = get(color1, [ lab_d65, 'l' ]);\n      var Lstr2 = get(color2, [ lab_d65, 'l' ]);\n      var deltaPhiStar = Math.abs(Math.pow(Lstr1, phi) - Math.pow(Lstr2, phi));\n      var contrast2 = Math.pow(deltaPhiStar, 1 / phi) * Math.SQRT2 - 40;\n      return contrast2 < 7.5 ? 0 : contrast2;\n    }\n    var contrastMethods = Object.freeze({\n      __proto__: null,\n      contrastWCAG21: contrastWCAG21,\n      contrastAPCA: contrastAPCA,\n      contrastMichelson: contrastMichelson,\n      contrastWeber: contrastWeber,\n      contrastLstar: contrastLstar,\n      contrastDeltaPhi: contrastDeltaPhi\n    });\n    function contrast(background, foreground) {\n      var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (isString(o)) {\n        o = {\n          algorithm: o\n        };\n      }\n      var _o = o, algorithm = _o.algorithm, rest = _objectWithoutProperties(_o, _excluded11);\n      if (!algorithm) {\n        var algorithms = Object.keys(contrastMethods).map(function(a2) {\n          return a2.replace(/^contrast/, '');\n        }).join(', ');\n        throw new TypeError('contrast() function needs a contrast algorithm. Please specify one of: '.concat(algorithms));\n      }\n      background = getColor(background);\n      foreground = getColor(foreground);\n      for (var a2 in contrastMethods) {\n        if ('contrast' + algorithm.toLowerCase() === a2.toLowerCase()) {\n          return contrastMethods[a2](background, foreground, rest);\n        }\n      }\n      throw new TypeError('Unknown contrast algorithm: '.concat(algorithm));\n    }\n    function uv(color) {\n      var _getAll = getAll(color, XYZ_D65), _getAll2 = _slicedToArray(_getAll, 3), X = _getAll2[0], Y = _getAll2[1], Z = _getAll2[2];\n      var denom = X + 15 * Y + 3 * Z;\n      return [ 4 * X / denom, 9 * Y / denom ];\n    }\n    function xy(color) {\n      var _getAll3 = getAll(color, XYZ_D65), _getAll4 = _slicedToArray(_getAll3, 3), X = _getAll4[0], Y = _getAll4[1], Z = _getAll4[2];\n      var sum = X + Y + Z;\n      return [ X / sum, Y / sum ];\n    }\n    function register$1(Color3) {\n      Object.defineProperty(Color3.prototype, 'uv', {\n        get: function get() {\n          return uv(this);\n        }\n      });\n      Object.defineProperty(Color3.prototype, 'xy', {\n        get: function get() {\n          return xy(this);\n        }\n      });\n    }\n    var chromaticity = Object.freeze({\n      __proto__: null,\n      uv: uv,\n      xy: xy,\n      register: register$1\n    });\n    function deltaE76(color, sample) {\n      return distance(color, sample, 'lab');\n    }\n    var \\u03c0 = Math.PI;\n    var d2r = \\u03c0 / 180;\n    function deltaECMC(color, sample) {\n      var _ref56 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref56$l = _ref56.l, l = _ref56$l === void 0 ? 2 : _ref56$l, _ref56$c = _ref56.c, c4 = _ref56$c === void 0 ? 1 : _ref56$c;\n      var _lab$from5 = lab.from(color), _lab$from6 = _slicedToArray(_lab$from5, 3), L1 = _lab$from6[0], a1 = _lab$from6[1], b1 = _lab$from6[2];\n      var _lch$from = lch.from(lab, [ L1, a1, b1 ]), _lch$from2 = _slicedToArray(_lch$from, 3), C1 = _lch$from2[1], H1 = _lch$from2[2];\n      var _lab$from7 = lab.from(sample), _lab$from8 = _slicedToArray(_lab$from7, 3), L2 = _lab$from8[0], a2 = _lab$from8[1], b2 = _lab$from8[2];\n      var C2 = lch.from(lab, [ L2, a2, b2 ])[1];\n      if (C1 < 0) {\n        C1 = 0;\n      }\n      if (C2 < 0) {\n        C2 = 0;\n      }\n      var \\u0394L = L1 - L2;\n      var \\u0394C = C1 - C2;\n      var \\u0394a = a1 - a2;\n      var \\u0394b = b1 - b2;\n      var H2 = Math.pow(\\u0394a, 2) + Math.pow(\\u0394b, 2) - Math.pow(\\u0394C, 2);\n      var SL = .511;\n      if (L1 >= 16) {\n        SL = .040975 * L1 / (1 + .01765 * L1);\n      }\n      var SC = .0638 * C1 / (1 + .0131 * C1) + .638;\n      var T;\n      if (Number.isNaN(H1)) {\n        H1 = 0;\n      }\n      if (H1 >= 164 && H1 <= 345) {\n        T = .56 + Math.abs(.2 * Math.cos((H1 + 168) * d2r));\n      } else {\n        T = .36 + Math.abs(.4 * Math.cos((H1 + 35) * d2r));\n      }\n      var C4 = Math.pow(C1, 4);\n      var F = Math.sqrt(C4 / (C4 + 1900));\n      var SH = SC * (F * T + 1 - F);\n      var dE = Math.pow(\\u0394L / (l * SL), 2);\n      dE += Math.pow(\\u0394C / (c4 * SC), 2);\n      dE += H2 / Math.pow(SH, 2);\n      return Math.sqrt(dE);\n    }\n    var Yw$1 = 203;\n    var XYZ_Abs_D65 = new ColorSpace({\n      id: 'xyz-abs-d65',\n      name: 'Absolute XYZ D65',\n      coords: {\n        x: {\n          refRange: [ 0, 9504.7 ],\n          name: 'Xa'\n        },\n        y: {\n          refRange: [ 0, 1e4 ],\n          name: 'Ya'\n        },\n        z: {\n          refRange: [ 0, 10888.3 ],\n          name: 'Za'\n        }\n      },\n      base: XYZ_D65,\n      fromBase: function fromBase(XYZ) {\n        return XYZ.map(function(v) {\n          return Math.max(v * Yw$1, 0);\n        });\n      },\n      toBase: function toBase(AbsXYZ) {\n        return AbsXYZ.map(function(v) {\n          return Math.max(v / Yw$1, 0);\n        });\n      }\n    });\n    var b$1 = 1.15;\n    var g = .66;\n    var n$1 = 2610 / Math.pow(2, 14);\n    var ninv$1 = Math.pow(2, 14) / 2610;\n    var c1$2 = 3424 / Math.pow(2, 12);\n    var c2$2 = 2413 / Math.pow(2, 7);\n    var c3$2 = 2392 / Math.pow(2, 7);\n    var p = 1.7 * 2523 / Math.pow(2, 5);\n    var pinv = Math.pow(2, 5) / (1.7 * 2523);\n    var d = -.56;\n    var d0 = 16295499532821565e-27;\n    var XYZtoCone_M = [ [ .41478972, .579999, .014648 ], [ -.20151, 1.120649, .0531008 ], [ -.0166008, .2648, .6684799 ] ];\n    var ConetoXYZ_M = [ [ 1.9242264357876067, -1.0047923125953657, .037651404030618 ], [ .35031676209499907, .7264811939316552, -.06538442294808501 ], [ -.09098281098284752, -.3127282905230739, 1.5227665613052603 ] ];\n    var ConetoIab_M = [ [ .5, .5, 0 ], [ 3.524, -4.066708, .542708 ], [ .199076, 1.096799, -1.295875 ] ];\n    var IabtoCone_M = [ [ 1, .1386050432715393, .05804731615611886 ], [ .9999999999999999, -.1386050432715393, -.05804731615611886 ], [ .9999999999999998, -.09601924202631895, -.8118918960560388 ] ];\n    var Jzazbz = new ColorSpace({\n      id: 'jzazbz',\n      name: 'Jzazbz',\n      coords: {\n        jz: {\n          refRange: [ 0, 1 ],\n          name: 'Jz'\n        },\n        az: {\n          refRange: [ -.5, .5 ]\n        },\n        bz: {\n          refRange: [ -.5, .5 ]\n        }\n      },\n      base: XYZ_Abs_D65,\n      fromBase: function fromBase(XYZ) {\n        var _XYZ = _slicedToArray(XYZ, 3), Xa = _XYZ[0], Ya = _XYZ[1], Za = _XYZ[2];\n        var Xm = b$1 * Xa - (b$1 - 1) * Za;\n        var Ym = g * Ya - (g - 1) * Xa;\n        var LMS = multiplyMatrices(XYZtoCone_M, [ Xm, Ym, Za ]);\n        var PQLMS = LMS.map(function(val) {\n          var num = c1$2 + c2$2 * Math.pow(val / 1e4, n$1);\n          var denom = 1 + c3$2 * Math.pow(val / 1e4, n$1);\n          return Math.pow(num / denom, p);\n        });\n        var _multiplyMatrices = multiplyMatrices(ConetoIab_M, PQLMS), _multiplyMatrices2 = _slicedToArray(_multiplyMatrices, 3), Iz = _multiplyMatrices2[0], az = _multiplyMatrices2[1], bz = _multiplyMatrices2[2];\n        var Jz = (1 + d) * Iz / (1 + d * Iz) - d0;\n        return [ Jz, az, bz ];\n      },\n      toBase: function toBase(Jzazbz2) {\n        var _Jzazbz = _slicedToArray(Jzazbz2, 3), Jz = _Jzazbz[0], az = _Jzazbz[1], bz = _Jzazbz[2];\n        var Iz = (Jz + d0) / (1 + d - d * (Jz + d0));\n        var PQLMS = multiplyMatrices(IabtoCone_M, [ Iz, az, bz ]);\n        var LMS = PQLMS.map(function(val) {\n          var num = c1$2 - Math.pow(val, pinv);\n          var denom = c3$2 * Math.pow(val, pinv) - c2$2;\n          var x = 1e4 * Math.pow(num / denom, ninv$1);\n          return x;\n        });\n        var _multiplyMatrices3 = multiplyMatrices(ConetoXYZ_M, LMS), _multiplyMatrices4 = _slicedToArray(_multiplyMatrices3, 3), Xm = _multiplyMatrices4[0], Ym = _multiplyMatrices4[1], Za = _multiplyMatrices4[2];\n        var Xa = (Xm + (b$1 - 1) * Za) / b$1;\n        var Ya = (Ym + (g - 1) * Xa) / g;\n        return [ Xa, Ya, Za ];\n      },\n      formats: {\n        color: {}\n      }\n    });\n    var jzczhz = new ColorSpace({\n      id: 'jzczhz',\n      name: 'JzCzHz',\n      coords: {\n        jz: {\n          refRange: [ 0, 1 ],\n          name: 'Jz'\n        },\n        cz: {\n          refRange: [ 0, 1 ],\n          name: 'Chroma'\n        },\n        hz: {\n          refRange: [ 0, 360 ],\n          type: 'angle',\n          name: 'Hue'\n        }\n      },\n      base: Jzazbz,\n      fromBase: function fromBase(jzazbz) {\n        var _jzazbz = _slicedToArray(jzazbz, 3), Jz = _jzazbz[0], az = _jzazbz[1], bz = _jzazbz[2];\n        var hue;\n        var \\u03b52 = 2e-4;\n        if (Math.abs(az) < \\u03b52 && Math.abs(bz) < \\u03b52) {\n          hue = NaN;\n        } else {\n          hue = Math.atan2(bz, az) * 180 / Math.PI;\n        }\n        return [ Jz, Math.sqrt(Math.pow(az, 2) + Math.pow(bz, 2)), constrain(hue) ];\n      },\n      toBase: function toBase(jzczhz2) {\n        return [ jzczhz2[0], jzczhz2[1] * Math.cos(jzczhz2[2] * Math.PI / 180), jzczhz2[1] * Math.sin(jzczhz2[2] * Math.PI / 180) ];\n      },\n      formats: {\n        color: {}\n      }\n    });\n    function deltaEJz(color, sample) {\n      var _jzczhz$from = jzczhz.from(color), _jzczhz$from2 = _slicedToArray(_jzczhz$from, 3), Jz1 = _jzczhz$from2[0], Cz1 = _jzczhz$from2[1], Hz1 = _jzczhz$from2[2];\n      var _jzczhz$from3 = jzczhz.from(sample), _jzczhz$from4 = _slicedToArray(_jzczhz$from3, 3), Jz2 = _jzczhz$from4[0], Cz2 = _jzczhz$from4[1], Hz2 = _jzczhz$from4[2];\n      var \\u0394J = Jz1 - Jz2;\n      var \\u0394C = Cz1 - Cz2;\n      if (Number.isNaN(Hz1) && Number.isNaN(Hz2)) {\n        Hz1 = 0;\n        Hz2 = 0;\n      } else if (Number.isNaN(Hz1)) {\n        Hz1 = Hz2;\n      } else if (Number.isNaN(Hz2)) {\n        Hz2 = Hz1;\n      }\n      var \\u0394h = Hz1 - Hz2;\n      var \\u0394H = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin(\\u0394h / 2 * (Math.PI / 180));\n      return Math.sqrt(Math.pow(\\u0394J, 2) + Math.pow(\\u0394C, 2) + Math.pow(\\u0394H, 2));\n    }\n    var c1$1 = 3424 / 4096;\n    var c2$1 = 2413 / 128;\n    var c3$1 = 2392 / 128;\n    var m1 = 2610 / 16384;\n    var m2 = 2523 / 32;\n    var im1 = 16384 / 2610;\n    var im2 = 32 / 2523;\n    var XYZtoLMS_M$1 = [ [ .3592, .6976, -.0358 ], [ -.1922, 1.1004, .0755 ], [ .007, .0749, .8434 ] ];\n    var LMStoIPT_M = [ [ 2048 / 4096, 2048 / 4096, 0 ], [ 6610 / 4096, -13613 / 4096, 7003 / 4096 ], [ 17933 / 4096, -17390 / 4096, -543 / 4096 ] ];\n    var IPTtoLMS_M = [ [ .9999888965628402, .008605050147287059, .11103437159861648 ], [ 1.00001110343716, -.008605050147287059, -.11103437159861648 ], [ 1.0000320633910054, .56004913547279, -.3206339100541203 ] ];\n    var LMStoXYZ_M$1 = [ [ 2.0701800566956137, -1.326456876103021, .20661600684785517 ], [ .3649882500326575, .6804673628522352, -.04542175307585323 ], [ -.04959554223893211, -.04942116118675749, 1.1879959417328034 ] ];\n    var ictcp = new ColorSpace({\n      id: 'ictcp',\n      name: 'ICTCP',\n      coords: {\n        i: {\n          refRange: [ 0, 1 ],\n          name: 'I'\n        },\n        ct: {\n          refRange: [ -.5, .5 ],\n          name: 'CT'\n        },\n        cp: {\n          refRange: [ -.5, .5 ],\n          name: 'CP'\n        }\n      },\n      base: XYZ_Abs_D65,\n      fromBase: function fromBase(XYZ) {\n        var LMS = multiplyMatrices(XYZtoLMS_M$1, XYZ);\n        return LMStoICtCp(LMS);\n      },\n      toBase: function toBase(ICtCp) {\n        var LMS = ICtCptoLMS(ICtCp);\n        return multiplyMatrices(LMStoXYZ_M$1, LMS);\n      },\n      formats: {\n        color: {}\n      }\n    });\n    function LMStoICtCp(LMS) {\n      var PQLMS = LMS.map(function(val) {\n        var num = c1$1 + c2$1 * Math.pow(val / 1e4, m1);\n        var denom = 1 + c3$1 * Math.pow(val / 1e4, m1);\n        return Math.pow(num / denom, m2);\n      });\n      return multiplyMatrices(LMStoIPT_M, PQLMS);\n    }\n    function ICtCptoLMS(ICtCp) {\n      var PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);\n      var LMS = PQLMS.map(function(val) {\n        var num = Math.max(Math.pow(val, im2) - c1$1, 0);\n        var denom = c2$1 - c3$1 * Math.pow(val, im2);\n        return 1e4 * Math.pow(num / denom, im1);\n      });\n      return LMS;\n    }\n    function deltaEITP(color, sample) {\n      var _ictcp$from = ictcp.from(color), _ictcp$from2 = _slicedToArray(_ictcp$from, 3), I1 = _ictcp$from2[0], T1 = _ictcp$from2[1], P1 = _ictcp$from2[2];\n      var _ictcp$from3 = ictcp.from(sample), _ictcp$from4 = _slicedToArray(_ictcp$from3, 3), I2 = _ictcp$from4[0], T2 = _ictcp$from4[1], P2 = _ictcp$from4[2];\n      return 720 * Math.sqrt(Math.pow(I1 - I2, 2) + .25 * Math.pow(T1 - T2, 2) + Math.pow(P1 - P2, 2));\n    }\n    var XYZtoLMS_M = [ [ .8190224432164319, .3619062562801221, -.12887378261216414 ], [ .0329836671980271, .9292868468965546, .03614466816999844 ], [ .048177199566046255, .26423952494422764, .6335478258136937 ] ];\n    var LMStoXYZ_M = [ [ 1.2268798733741557, -.5578149965554813, .28139105017721583 ], [ -.04057576262431372, 1.1122868293970594, -.07171106666151701 ], [ -.07637294974672142, -.4214933239627914, 1.5869240244272418 ] ];\n    var LMStoLab_M = [ [ .2104542553, .793617785, -.0040720468 ], [ 1.9779984951, -2.428592205, .4505937099 ], [ .0259040371, .7827717662, -.808675766 ] ];\n    var LabtoLMS_M = [ [ .9999999984505198, .39633779217376786, .2158037580607588 ], [ 1.0000000088817609, -.10556134232365635, -.06385417477170591 ], [ 1.0000000546724108, -.08948418209496575, -1.2914855378640917 ] ];\n    var OKLab = new ColorSpace({\n      id: 'oklab',\n      name: 'OKLab',\n      coords: {\n        l: {\n          refRange: [ 0, 1 ],\n          name: 'L'\n        },\n        a: {\n          refRange: [ -.4, .4 ]\n        },\n        b: {\n          refRange: [ -.4, .4 ]\n        }\n      },\n      white: 'D65',\n      base: XYZ_D65,\n      fromBase: function fromBase(XYZ) {\n        var LMS = multiplyMatrices(XYZtoLMS_M, XYZ);\n        var LMSg = LMS.map(function(val) {\n          return Math.cbrt(val);\n        });\n        return multiplyMatrices(LMStoLab_M, LMSg);\n      },\n      toBase: function toBase(OKLab2) {\n        var LMSg = multiplyMatrices(LabtoLMS_M, OKLab2);\n        var LMS = LMSg.map(function(val) {\n          return Math.pow(val, 3);\n        });\n        return multiplyMatrices(LMStoXYZ_M, LMS);\n      },\n      formats: {\n        oklab: {\n          coords: [ '<number> | <percentage>', '<number>', '<number>' ]\n        }\n      }\n    });\n    function deltaEOK(color, sample) {\n      var _OKLab$from = OKLab.from(color), _OKLab$from2 = _slicedToArray(_OKLab$from, 3), L1 = _OKLab$from2[0], a1 = _OKLab$from2[1], b1 = _OKLab$from2[2];\n      var _OKLab$from3 = OKLab.from(sample), _OKLab$from4 = _slicedToArray(_OKLab$from3, 3), L2 = _OKLab$from4[0], a2 = _OKLab$from4[1], b2 = _OKLab$from4[2];\n      var \\u0394L = L1 - L2;\n      var \\u0394a = a1 - a2;\n      var \\u0394b = b1 - b2;\n      return Math.sqrt(Math.pow(\\u0394L, 2) + Math.pow(\\u0394a, 2) + Math.pow(\\u0394b, 2));\n    }\n    var deltaEMethods = Object.freeze({\n      __proto__: null,\n      deltaE76: deltaE76,\n      deltaECMC: deltaECMC,\n      deltaE2000: deltaE2000,\n      deltaEJz: deltaEJz,\n      deltaEITP: deltaEITP,\n      deltaEOK: deltaEOK\n    });\n    function deltaE(c12, c22) {\n      var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (isString(o)) {\n        o = {\n          method: o\n        };\n      }\n      var _o2 = o, _o2$method = _o2.method, method = _o2$method === void 0 ? defaults.deltaE : _o2$method, rest = _objectWithoutProperties(_o2, _excluded12);\n      c12 = getColor(c12);\n      c22 = getColor(c22);\n      for (var m3 in deltaEMethods) {\n        if ('deltae' + method.toLowerCase() === m3.toLowerCase()) {\n          return deltaEMethods[m3](c12, c22, rest);\n        }\n      }\n      throw new TypeError('Unknown deltaE method: '.concat(method));\n    }\n    function lighten(color) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .25;\n      var space = ColorSpace.get('oklch', 'lch');\n      var lightness = [ space, 'l' ];\n      return set(color, lightness, function(l) {\n        return l * (1 + amount);\n      });\n    }\n    function darken(color) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .25;\n      var space = ColorSpace.get('oklch', 'lch');\n      var lightness = [ space, 'l' ];\n      return set(color, lightness, function(l) {\n        return l * (1 - amount);\n      });\n    }\n    var variations = Object.freeze({\n      __proto__: null,\n      lighten: lighten,\n      darken: darken\n    });\n    function mix(c12, c22) {\n      var p2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .5;\n      var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var _ref57 = [ getColor(c12), getColor(c22) ];\n      c12 = _ref57[0];\n      c22 = _ref57[1];\n      if (type(p2) === 'object') {\n        var _ref58 = [ .5, p2 ];\n        p2 = _ref58[0];\n        o = _ref58[1];\n      }\n      var _o3 = o, space = _o3.space, outputSpace = _o3.outputSpace, premultiplied = _o3.premultiplied;\n      var r = range(c12, c22, {\n        space: space,\n        outputSpace: outputSpace,\n        premultiplied: premultiplied\n      });\n      return r(p2);\n    }\n    function steps(c12, c22) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var colorRange;\n      if (isRange(c12)) {\n        colorRange = c12;\n        options = c22;\n        var _colorRange$rangeArgs = _slicedToArray(colorRange.rangeArgs.colors, 2);\n        c12 = _colorRange$rangeArgs[0];\n        c22 = _colorRange$rangeArgs[1];\n      }\n      var _options2 = options, maxDeltaE = _options2.maxDeltaE, deltaEMethod = _options2.deltaEMethod, _options2$steps = _options2.steps, steps2 = _options2$steps === void 0 ? 2 : _options2$steps, _options2$maxSteps = _options2.maxSteps, maxSteps = _options2$maxSteps === void 0 ? 1e3 : _options2$maxSteps, rangeOptions = _objectWithoutProperties(_options2, _excluded13);\n      if (!colorRange) {\n        var _ref59 = [ getColor(c12), getColor(c22) ];\n        c12 = _ref59[0];\n        c22 = _ref59[1];\n        colorRange = range(c12, c22, rangeOptions);\n      }\n      var totalDelta = deltaE(c12, c22);\n      var actualSteps = maxDeltaE > 0 ? Math.max(steps2, Math.ceil(totalDelta / maxDeltaE) + 1) : steps2;\n      var ret = [];\n      if (maxSteps !== void 0) {\n        actualSteps = Math.min(actualSteps, maxSteps);\n      }\n      if (actualSteps === 1) {\n        ret = [ {\n          p: .5,\n          color: colorRange(.5)\n        } ];\n      } else {\n        var step = 1 / (actualSteps - 1);\n        ret = Array.from({\n          length: actualSteps\n        }, function(_, i) {\n          var p2 = i * step;\n          return {\n            p: p2,\n            color: colorRange(p2)\n          };\n        });\n      }\n      if (maxDeltaE > 0) {\n        var maxDelta = ret.reduce(function(acc, cur, i) {\n          if (i === 0) {\n            return 0;\n          }\n          var \\u0394\\u0395 = deltaE(cur.color, ret[i - 1].color, deltaEMethod);\n          return Math.max(acc, \\u0394\\u0395);\n        }, 0);\n        while (maxDelta > maxDeltaE) {\n          maxDelta = 0;\n          for (var _i20 = 1; _i20 < ret.length && ret.length < maxSteps; _i20++) {\n            var prev = ret[_i20 - 1];\n            var cur = ret[_i20];\n            var p2 = (cur.p + prev.p) / 2;\n            var _color = colorRange(p2);\n            maxDelta = Math.max(maxDelta, deltaE(_color, prev.color), deltaE(_color, cur.color));\n            ret.splice(_i20, 0, {\n              p: p2,\n              color: colorRange(p2)\n            });\n            _i20++;\n          }\n        }\n      }\n      ret = ret.map(function(a2) {\n        return a2.color;\n      });\n      return ret;\n    }\n    function range(color1, color2) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (isRange(color1)) {\n        var r = color1, options2 = color2;\n        return range.apply(void 0, _toConsumableArray(r.rangeArgs.colors).concat([ _extends({}, r.rangeArgs.options, options2) ]));\n      }\n      var space = options.space, outputSpace = options.outputSpace, progression = options.progression, premultiplied = options.premultiplied;\n      color1 = getColor(color1);\n      color2 = getColor(color2);\n      color1 = clone2(color1);\n      color2 = clone2(color2);\n      var rangeArgs = {\n        colors: [ color1, color2 ],\n        options: options\n      };\n      if (space) {\n        space = ColorSpace.get(space);\n      } else {\n        space = ColorSpace.registry[defaults.interpolationSpace] || color1.space;\n      }\n      outputSpace = outputSpace ? ColorSpace.get(outputSpace) : space;\n      color1 = to(color1, space);\n      color2 = to(color2, space);\n      color1 = toGamut(color1);\n      color2 = toGamut(color2);\n      if (space.coords.h && space.coords.h.type === 'angle') {\n        var arc = options.hue = options.hue || 'shorter';\n        var hue = [ space, 'h' ];\n        var _ref60 = [ get(color1, hue), get(color2, hue) ], \\u03b81 = _ref60[0], \\u03b82 = _ref60[1];\n        var _adjust = adjust(arc, [ \\u03b81, \\u03b82 ]);\n        var _adjust2 = _slicedToArray(_adjust, 2);\n        \\u03b81 = _adjust2[0];\n        \\u03b82 = _adjust2[1];\n        set(color1, hue, \\u03b81);\n        set(color2, hue, \\u03b82);\n      }\n      if (premultiplied) {\n        color1.coords = color1.coords.map(function(c4) {\n          return c4 * color1.alpha;\n        });\n        color2.coords = color2.coords.map(function(c4) {\n          return c4 * color2.alpha;\n        });\n      }\n      return Object.assign(function(p2) {\n        p2 = progression ? progression(p2) : p2;\n        var coords = color1.coords.map(function(start, i) {\n          var end = color2.coords[i];\n          return interpolate(start, end, p2);\n        });\n        var alpha = interpolate(color1.alpha, color2.alpha, p2);\n        var ret = {\n          space: space,\n          coords: coords,\n          alpha: alpha\n        };\n        if (premultiplied) {\n          ret.coords = ret.coords.map(function(c4) {\n            return c4 / alpha;\n          });\n        }\n        if (outputSpace !== space) {\n          ret = to(ret, outputSpace);\n        }\n        return ret;\n      }, {\n        rangeArgs: rangeArgs\n      });\n    }\n    function isRange(val) {\n      return type(val) === 'function' && !!val.rangeArgs;\n    }\n    defaults.interpolationSpace = 'lab';\n    function register(Color3) {\n      Color3.defineFunction('mix', mix, {\n        returns: 'color'\n      });\n      Color3.defineFunction('range', range, {\n        returns: 'function<color>'\n      });\n      Color3.defineFunction('steps', steps, {\n        returns: 'array<color>'\n      });\n    }\n    var interpolation = Object.freeze({\n      __proto__: null,\n      mix: mix,\n      steps: steps,\n      range: range,\n      isRange: isRange,\n      register: register\n    });\n    var HSL = new ColorSpace({\n      id: 'hsl',\n      name: 'HSL',\n      coords: {\n        h: {\n          refRange: [ 0, 360 ],\n          type: 'angle',\n          name: 'Hue'\n        },\n        s: {\n          range: [ 0, 100 ],\n          name: 'Saturation'\n        },\n        l: {\n          range: [ 0, 100 ],\n          name: 'Lightness'\n        }\n      },\n      base: sRGB,\n      fromBase: function fromBase(rgb) {\n        var max2 = Math.max.apply(Math, _toConsumableArray(rgb));\n        var min = Math.min.apply(Math, _toConsumableArray(rgb));\n        var _rgb = _slicedToArray(rgb, 3), r = _rgb[0], g2 = _rgb[1], b2 = _rgb[2];\n        var h = NaN, s = 0, l = (min + max2) / 2;\n        var d2 = max2 - min;\n        if (d2 !== 0) {\n          s = l === 0 || l === 1 ? 0 : (max2 - l) / Math.min(l, 1 - l);\n          switch (max2) {\n           case r:\n            h = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);\n            break;\n\n           case g2:\n            h = (b2 - r) / d2 + 2;\n            break;\n\n           case b2:\n            h = (r - g2) / d2 + 4;\n          }\n          h = h * 60;\n        }\n        return [ h, s * 100, l * 100 ];\n      },\n      toBase: function toBase(hsl) {\n        var _hsl = _slicedToArray(hsl, 3), h = _hsl[0], s = _hsl[1], l = _hsl[2];\n        h = h % 360;\n        if (h < 0) {\n          h += 360;\n        }\n        s /= 100;\n        l /= 100;\n        function f(n2) {\n          var k = (n2 + h / 30) % 12;\n          var a2 = s * Math.min(l, 1 - l);\n          return l - a2 * Math.max(-1, Math.min(k - 3, 9 - k, 1));\n        }\n        return [ f(0), f(8), f(4) ];\n      },\n      formats: {\n        hsl: {\n          toGamut: true,\n          coords: [ '<number> | <angle>', '<percentage>', '<percentage>' ]\n        },\n        hsla: {\n          coords: [ '<number> | <angle>', '<percentage>', '<percentage>' ],\n          commas: true,\n          lastAlpha: true\n        }\n      }\n    });\n    var HSV = new ColorSpace({\n      id: 'hsv',\n      name: 'HSV',\n      coords: {\n        h: {\n          refRange: [ 0, 360 ],\n          type: 'angle',\n          name: 'Hue'\n        },\n        s: {\n          range: [ 0, 100 ],\n          name: 'Saturation'\n        },\n        v: {\n          range: [ 0, 100 ],\n          name: 'Value'\n        }\n      },\n      base: HSL,\n      fromBase: function fromBase(hsl) {\n        var _hsl2 = _slicedToArray(hsl, 3), h = _hsl2[0], s = _hsl2[1], l = _hsl2[2];\n        s /= 100;\n        l /= 100;\n        var v = l + s * Math.min(l, 1 - l);\n        return [ h, v === 0 ? 0 : 200 * (1 - l / v), 100 * v ];\n      },\n      toBase: function toBase(hsv) {\n        var _hsv = _slicedToArray(hsv, 3), h = _hsv[0], s = _hsv[1], v = _hsv[2];\n        s /= 100;\n        v /= 100;\n        var l = v * (1 - s / 2);\n        return [ h, l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l) * 100, l * 100 ];\n      },\n      formats: {\n        color: {\n          toGamut: true\n        }\n      }\n    });\n    var hwb = new ColorSpace({\n      id: 'hwb',\n      name: 'HWB',\n      coords: {\n        h: {\n          refRange: [ 0, 360 ],\n          type: 'angle',\n          name: 'Hue'\n        },\n        w: {\n          range: [ 0, 100 ],\n          name: 'Whiteness'\n        },\n        b: {\n          range: [ 0, 100 ],\n          name: 'Blackness'\n        }\n      },\n      base: HSV,\n      fromBase: function fromBase(hsv) {\n        var _hsv2 = _slicedToArray(hsv, 3), h = _hsv2[0], s = _hsv2[1], v = _hsv2[2];\n        return [ h, v * (100 - s) / 100, 100 - v ];\n      },\n      toBase: function toBase(hwb2) {\n        var _hwb = _slicedToArray(hwb2, 3), h = _hwb[0], w = _hwb[1], b2 = _hwb[2];\n        w /= 100;\n        b2 /= 100;\n        var sum = w + b2;\n        if (sum >= 1) {\n          var gray = w / sum;\n          return [ h, 0, gray * 100 ];\n        }\n        var v = 1 - b2;\n        var s = v === 0 ? 0 : 1 - w / v;\n        return [ h, s * 100, v * 100 ];\n      },\n      formats: {\n        hwb: {\n          toGamut: true,\n          coords: [ '<number> | <angle>', '<percentage>', '<percentage>' ]\n        }\n      }\n    });\n    var toXYZ_M$2 = [ [ .5766690429101305, .1855582379065463, .1882286462349947 ], [ .29734497525053605, .6273635662554661, .07529145849399788 ], [ .02703136138641234, .07068885253582723, .9913375368376388 ] ];\n    var fromXYZ_M$2 = [ [ 2.0415879038107465, -.5650069742788596, -.34473135077832956 ], [ -.9692436362808795, 1.8759675015077202, .04155505740717557 ], [ .013444280632031142, -.11836239223101838, 1.0151749943912054 ] ];\n    var A98Linear = new RGBColorSpace({\n      id: 'a98rgb-linear',\n      name: 'Linear Adobe\\xae 98 RGB compatible',\n      white: 'D65',\n      toXYZ_M: toXYZ_M$2,\n      fromXYZ_M: fromXYZ_M$2\n    });\n    var a98rgb = new RGBColorSpace({\n      id: 'a98rgb',\n      name: 'Adobe\\xae 98 RGB compatible',\n      base: A98Linear,\n      toBase: function toBase(RGB) {\n        return RGB.map(function(val) {\n          return Math.pow(Math.abs(val), 563 / 256) * Math.sign(val);\n        });\n      },\n      fromBase: function fromBase(RGB) {\n        return RGB.map(function(val) {\n          return Math.pow(Math.abs(val), 256 / 563) * Math.sign(val);\n        });\n      },\n      formats: {\n        color: {\n          id: 'a98-rgb'\n        }\n      }\n    });\n    var toXYZ_M$1 = [ [ .7977604896723027, .13518583717574031, .0313493495815248 ], [ .2880711282292934, .7118432178101014, 8565396060525902e-20 ], [ 0, 0, .8251046025104601 ] ];\n    var fromXYZ_M$1 = [ [ 1.3457989731028281, -.25558010007997534, -.05110628506753401 ], [ -.5446224939028347, 1.5082327413132781, .02053603239147973 ], [ 0, 0, 1.2119675456389454 ] ];\n    var ProPhotoLinear = new RGBColorSpace({\n      id: 'prophoto-linear',\n      name: 'Linear ProPhoto',\n      white: 'D50',\n      base: XYZ_D50,\n      toXYZ_M: toXYZ_M$1,\n      fromXYZ_M: fromXYZ_M$1\n    });\n    var Et = 1 / 512;\n    var Et2 = 16 / 512;\n    var prophoto = new RGBColorSpace({\n      id: 'prophoto',\n      name: 'ProPhoto',\n      base: ProPhotoLinear,\n      toBase: function toBase(RGB) {\n        return RGB.map(function(v) {\n          return v < Et2 ? v / 16 : Math.pow(v, 1.8);\n        });\n      },\n      fromBase: function fromBase(RGB) {\n        return RGB.map(function(v) {\n          return v >= Et ? Math.pow(v, 1 / 1.8) : 16 * v;\n        });\n      },\n      formats: {\n        color: {\n          id: 'prophoto-rgb'\n        }\n      }\n    });\n    var oklch = new ColorSpace({\n      id: 'oklch',\n      name: 'OKLCh',\n      coords: {\n        l: {\n          refRange: [ 0, 1 ],\n          name: 'Lightness'\n        },\n        c: {\n          refRange: [ 0, .4 ],\n          name: 'Chroma'\n        },\n        h: {\n          refRange: [ 0, 360 ],\n          type: 'angle',\n          name: 'Hue'\n        }\n      },\n      white: 'D65',\n      base: OKLab,\n      fromBase: function fromBase(oklab) {\n        var _oklab = _slicedToArray(oklab, 3), L = _oklab[0], a2 = _oklab[1], b2 = _oklab[2];\n        var h;\n        var \\u03b52 = 2e-4;\n        if (Math.abs(a2) < \\u03b52 && Math.abs(b2) < \\u03b52) {\n          h = NaN;\n        } else {\n          h = Math.atan2(b2, a2) * 180 / Math.PI;\n        }\n        return [ L, Math.sqrt(Math.pow(a2, 2) + Math.pow(b2, 2)), constrain(h) ];\n      },\n      toBase: function toBase(oklch2) {\n        var _oklch = _slicedToArray(oklch2, 3), L = _oklch[0], C = _oklch[1], h = _oklch[2];\n        var a2, b2;\n        if (isNaN(h)) {\n          a2 = 0;\n          b2 = 0;\n        } else {\n          a2 = C * Math.cos(h * Math.PI / 180);\n          b2 = C * Math.sin(h * Math.PI / 180);\n        }\n        return [ L, a2, b2 ];\n      },\n      formats: {\n        oklch: {\n          coords: [ '<number> | <percentage>', '<number>', '<number> | <angle>' ]\n        }\n      }\n    });\n    var Yw = 203;\n    var n = 2610 / Math.pow(2, 14);\n    var ninv = Math.pow(2, 14) / 2610;\n    var m = 2523 / Math.pow(2, 5);\n    var minv = Math.pow(2, 5) / 2523;\n    var c1 = 3424 / Math.pow(2, 12);\n    var c2 = 2413 / Math.pow(2, 7);\n    var c3 = 2392 / Math.pow(2, 7);\n    var rec2100Pq = new RGBColorSpace({\n      id: 'rec2100pq',\n      name: 'REC.2100-PQ',\n      base: REC2020Linear,\n      toBase: function toBase(RGB) {\n        return RGB.map(function(val) {\n          var x = Math.pow(Math.max(Math.pow(val, minv) - c1, 0) / (c2 - c3 * Math.pow(val, minv)), ninv);\n          return x * 1e4 / Yw;\n        });\n      },\n      fromBase: function fromBase(RGB) {\n        return RGB.map(function(val) {\n          var x = Math.max(val * Yw / 1e4, 0);\n          var num = c1 + c2 * Math.pow(x, n);\n          var denom = 1 + c3 * Math.pow(x, n);\n          return Math.pow(num / denom, m);\n        });\n      },\n      formats: {\n        color: {\n          id: 'rec2100-pq'\n        }\n      }\n    });\n    var a = .17883277;\n    var b = .28466892;\n    var c = .55991073;\n    var scale = 3.7743;\n    var rec2100Hlg = new RGBColorSpace({\n      id: 'rec2100hlg',\n      cssid: 'rec2100-hlg',\n      name: 'REC.2100-HLG',\n      referred: 'scene',\n      base: REC2020Linear,\n      toBase: function toBase(RGB) {\n        return RGB.map(function(val) {\n          if (val <= .5) {\n            return Math.pow(val, 2) / 3 * scale;\n          }\n          return Math.exp((val - c) / a + b) / 12 * scale;\n        });\n      },\n      fromBase: function fromBase(RGB) {\n        return RGB.map(function(val) {\n          val /= scale;\n          if (val <= 1 / 12) {\n            return Math.sqrt(3 * val);\n          }\n          return a * Math.log(12 * val - b) + c;\n        });\n      },\n      formats: {\n        color: {\n          id: 'rec2100-hlg'\n        }\n      }\n    });\n    var CATs = {};\n    hooks.add('chromatic-adaptation-start', function(env) {\n      if (env.options.method) {\n        env.M = adapt(env.W1, env.W2, env.options.method);\n      }\n    });\n    hooks.add('chromatic-adaptation-end', function(env) {\n      if (!env.M) {\n        env.M = adapt(env.W1, env.W2, env.options.method);\n      }\n    });\n    function defineCAT(_ref61) {\n      var id = _ref61.id, toCone_M = _ref61.toCone_M, fromCone_M = _ref61.fromCone_M;\n      CATs[id] = arguments[0];\n    }\n    function adapt(W1, W2) {\n      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Bradford';\n      var method = CATs[id];\n      var _multiplyMatrices5 = multiplyMatrices(method.toCone_M, W1), _multiplyMatrices6 = _slicedToArray(_multiplyMatrices5, 3), \\u03c1s = _multiplyMatrices6[0], \\u03b3s = _multiplyMatrices6[1], \\u03b2s = _multiplyMatrices6[2];\n      var _multiplyMatrices7 = multiplyMatrices(method.toCone_M, W2), _multiplyMatrices8 = _slicedToArray(_multiplyMatrices7, 3), \\u03c1d = _multiplyMatrices8[0], \\u03b3d = _multiplyMatrices8[1], \\u03b2d = _multiplyMatrices8[2];\n      var scale2 = [ [ \\u03c1d / \\u03c1s, 0, 0 ], [ 0, \\u03b3d / \\u03b3s, 0 ], [ 0, 0, \\u03b2d / \\u03b2s ] ];\n      var scaled_cone_M = multiplyMatrices(scale2, method.toCone_M);\n      var adapt_M = multiplyMatrices(method.fromCone_M, scaled_cone_M);\n      return adapt_M;\n    }\n    defineCAT({\n      id: 'von Kries',\n      toCone_M: [ [ .40024, .7076, -.08081 ], [ -.2263, 1.16532, .0457 ], [ 0, 0, .91822 ] ],\n      fromCone_M: [ [ 1.8599364, -1.1293816, .2198974 ], [ .3611914, .6388125, -64e-7 ], [ 0, 0, 1.0890636 ] ]\n    });\n    defineCAT({\n      id: 'Bradford',\n      toCone_M: [ [ .8951, .2664, -.1614 ], [ -.7502, 1.7135, .0367 ], [ .0389, -.0685, 1.0296 ] ],\n      fromCone_M: [ [ .9869929, -.1470543, .1599627 ], [ .4323053, .5183603, .0492912 ], [ -.0085287, .0400428, .9684867 ] ]\n    });\n    defineCAT({\n      id: 'CAT02',\n      toCone_M: [ [ .7328, .4296, -.1624 ], [ -.7036, 1.6975, .0061 ], [ .003, .0136, .9834 ] ],\n      fromCone_M: [ [ 1.0961238, -.278869, .1827452 ], [ .454369, .4735332, .0720978 ], [ -.0096276, -.005698, 1.0153256 ] ]\n    });\n    defineCAT({\n      id: 'CAT16',\n      toCone_M: [ [ .401288, .650173, -.051461 ], [ -.250268, 1.204414, .045854 ], [ -.002079, .048952, .953127 ] ],\n      fromCone_M: [ [ 1.862067855087233, -1.011254630531685, .1491867754444518 ], [ .3875265432361372, .6214474419314753, -.008973985167612518 ], [ -.01584149884933386, -.03412293802851557, 1.04996443687785 ] ]\n    });\n    Object.assign(WHITES, {\n      A: [ 1.0985, 1, .35585 ],\n      C: [ .98074, 1, 1.18232 ],\n      D55: [ .95682, 1, .92149 ],\n      D75: [ .94972, 1, 1.22638 ],\n      E: [ 1, 1, 1 ],\n      F2: [ .99186, 1, .67393 ],\n      F7: [ .95041, 1, 1.08747 ],\n      F11: [ 1.00962, 1, .6435 ]\n    });\n    WHITES.ACES = [ .32168 / .33767, 1, (1 - .32168 - .33767) / .33767 ];\n    var toXYZ_M = [ [ .6624541811085053, .13400420645643313, .1561876870049078 ], [ .27222871678091454, .6740817658111484, .05368951740793705 ], [ -.005574649490394108, .004060733528982826, 1.0103391003129971 ] ];\n    var fromXYZ_M = [ [ 1.6410233796943257, -.32480329418479, -.23642469523761225 ], [ -.6636628587229829, 1.6153315916573379, .016756347685530137 ], [ .011721894328375376, -.008284441996237409, .9883948585390215 ] ];\n    var ACEScg = new RGBColorSpace({\n      id: 'acescg',\n      name: 'ACEScg',\n      coords: {\n        r: {\n          range: [ 0, 65504 ],\n          name: 'Red'\n        },\n        g: {\n          range: [ 0, 65504 ],\n          name: 'Green'\n        },\n        b: {\n          range: [ 0, 65504 ],\n          name: 'Blue'\n        }\n      },\n      referred: 'scene',\n      white: WHITES.ACES,\n      toXYZ_M: toXYZ_M,\n      fromXYZ_M: fromXYZ_M,\n      formats: {\n        color: {}\n      }\n    });\n    var \\u03b5 = Math.pow(2, -16);\n    var ACES_min_nonzero = -.35828683;\n    var ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52;\n    var acescc = new RGBColorSpace({\n      id: 'acescc',\n      name: 'ACEScc',\n      coords: {\n        r: {\n          range: [ ACES_min_nonzero, ACES_cc_max ],\n          name: 'Red'\n        },\n        g: {\n          range: [ ACES_min_nonzero, ACES_cc_max ],\n          name: 'Green'\n        },\n        b: {\n          range: [ ACES_min_nonzero, ACES_cc_max ],\n          name: 'Blue'\n        }\n      },\n      referred: 'scene',\n      base: ACEScg,\n      toBase: function toBase(RGB) {\n        var low = (9.72 - 15) / 17.52;\n        return RGB.map(function(val) {\n          if (val <= low) {\n            return (Math.pow(2, val * 17.52 - 9.72) - \\u03b5) * 2;\n          } else if (val < ACES_cc_max) {\n            return Math.pow(2, val * 17.52 - 9.72);\n          } else {\n            return 65504;\n          }\n        });\n      },\n      fromBase: function fromBase(RGB) {\n        return RGB.map(function(val) {\n          if (val <= 0) {\n            return (Math.log2(\\u03b5) + 9.72) / 17.52;\n          } else if (val < \\u03b5) {\n            return (Math.log2(\\u03b5 + val * .5) + 9.72) / 17.52;\n          } else {\n            return (Math.log2(val) + 9.72) / 17.52;\n          }\n        });\n      },\n      formats: {\n        color: {}\n      }\n    });\n    var spaces = Object.freeze({\n      __proto__: null,\n      XYZ_D65: XYZ_D65,\n      XYZ_D50: XYZ_D50,\n      XYZ_ABS_D65: XYZ_Abs_D65,\n      Lab_D65: lab_d65,\n      Lab: lab,\n      LCH: lch,\n      sRGB_Linear: sRGBLinear,\n      sRGB: sRGB,\n      HSL: HSL,\n      HWB: hwb,\n      HSV: HSV,\n      P3_Linear: P3Linear,\n      P3: P3,\n      A98RGB_Linear: A98Linear,\n      A98RGB: a98rgb,\n      ProPhoto_Linear: ProPhotoLinear,\n      ProPhoto: prophoto,\n      REC_2020_Linear: REC2020Linear,\n      REC_2020: REC2020,\n      OKLab: OKLab,\n      OKLCH: oklch,\n      Jzazbz: Jzazbz,\n      JzCzHz: jzczhz,\n      ICTCP: ictcp,\n      REC_2100_PQ: rec2100Pq,\n      REC_2100_HLG: rec2100Hlg,\n      ACEScg: ACEScg,\n      ACEScc: acescc\n    });\n    var _Color = (_space = new WeakMap(), function() {\n      function Color() {\n        var _this2 = this;\n        _classCallCheck(this, Color);\n        _classPrivateFieldInitSpec(this, _space, void 0);\n        var color;\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        if (args.length === 1) {\n          color = getColor(args[0]);\n        }\n        var space, coords, alpha;\n        if (color) {\n          space = color.space || color.spaceId;\n          coords = color.coords;\n          alpha = color.alpha;\n        } else {\n          space = args[0];\n          coords = args[1];\n          alpha = args[2];\n        }\n        _classPrivateFieldSet(_space, this, ColorSpace.get(space));\n        this.coords = coords ? coords.slice() : [ 0, 0, 0 ];\n        this.alpha = alpha < 1 ? alpha : 1;\n        for (var _i21 = 0; _i21 < this.coords.length; _i21++) {\n          if (this.coords[_i21] === 'NaN') {\n            this.coords[_i21] = NaN;\n          }\n        }\n        var _loop7 = function _loop7(id) {\n          Object.defineProperty(_this2, id, {\n            get: function get() {\n              return _this2.get(id);\n            },\n            set: function set(value) {\n              return _this2.set(id, value);\n            }\n          });\n        };\n        for (var id in _classPrivateFieldGet(_space, this).coords) {\n          _loop7(id);\n        }\n      }\n      return _createClass(Color, [ {\n        key: 'space',\n        get: function get() {\n          return _classPrivateFieldGet(_space, this);\n        }\n      }, {\n        key: 'spaceId',\n        get: function get() {\n          return _classPrivateFieldGet(_space, this).id;\n        }\n      }, {\n        key: 'clone',\n        value: function clone() {\n          return new _Color(this.space, this.coords, this.alpha);\n        }\n      }, {\n        key: 'toJSON',\n        value: function toJSON() {\n          return {\n            spaceId: this.spaceId,\n            coords: this.coords,\n            alpha: this.alpha\n          };\n        }\n      }, {\n        key: 'display',\n        value: function display() {\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n          var ret = _display.apply(void 0, [ this ].concat(args));\n          ret.color = new _Color(ret.color);\n          return ret;\n        }\n      } ], [ {\n        key: 'get',\n        value: function get(color) {\n          if (color instanceof _Color) {\n            return color;\n          }\n          for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n            args[_key5 - 1] = arguments[_key5];\n          }\n          return _construct(_Color, [ color ].concat(args));\n        }\n      }, {\n        key: 'defineFunction',\n        value: function defineFunction(name, code) {\n          var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : code;\n          var _o$instance = o.instance, instance = _o$instance === void 0 ? true : _o$instance, returns = o.returns;\n          var func = function func() {\n            var ret = code.apply(void 0, arguments);\n            if (returns === 'color') {\n              ret = _Color.get(ret);\n            } else if (returns === 'function<color>') {\n              var f = ret;\n              ret = function ret() {\n                var ret2 = f.apply(void 0, arguments);\n                return _Color.get(ret2);\n              };\n              Object.assign(ret, f);\n            } else if (returns === 'array<color>') {\n              ret = ret.map(function(c4) {\n                return _Color.get(c4);\n              });\n            }\n            return ret;\n          };\n          if (!(name in _Color)) {\n            _Color[name] = func;\n          }\n          if (instance) {\n            _Color.prototype[name] = function() {\n              for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                args[_key6] = arguments[_key6];\n              }\n              return func.apply(void 0, [ this ].concat(args));\n            };\n          }\n        }\n      }, {\n        key: 'defineFunctions',\n        value: function defineFunctions(o) {\n          for (var name in o) {\n            _Color.defineFunction(name, o[name], o[name]);\n          }\n        }\n      }, {\n        key: 'extend',\n        value: function extend(exports) {\n          if (exports.register) {\n            exports.register(_Color);\n          } else {\n            for (var name in exports) {\n              _Color.defineFunction(name, exports[name]);\n            }\n          }\n        }\n      } ]);\n    }());\n    _Color.defineFunctions({\n      get: get,\n      getAll: getAll,\n      set: set,\n      setAll: setAll,\n      to: to,\n      equals: equals,\n      inGamut: inGamut,\n      toGamut: toGamut,\n      distance: distance,\n      toString: serialize\n    });\n    Object.assign(_Color, {\n      util: util,\n      hooks: hooks,\n      WHITES: WHITES,\n      Space: ColorSpace,\n      spaces: ColorSpace.registry,\n      parse: parse2,\n      defaults: defaults\n    });\n    for (var _i22 = 0, _Object$keys2 = Object.keys(spaces); _i22 < _Object$keys2.length; _i22++) {\n      var key = _Object$keys2[_i22];\n      ColorSpace.register(spaces[key]);\n    }\n    for (var id in ColorSpace.registry) {\n      addSpaceAccessors(id, ColorSpace.registry[id]);\n    }\n    hooks.add('colorspace-init-end', function(space) {\n      var _space$aliases;\n      addSpaceAccessors(space.id, space);\n      (_space$aliases = space.aliases) === null || _space$aliases === void 0 || _space$aliases.forEach(function(alias) {\n        addSpaceAccessors(alias, space);\n      });\n    });\n    function addSpaceAccessors(id, space) {\n      Object.keys(space.coords);\n      Object.values(space.coords).map(function(c4) {\n        return c4.name;\n      });\n      var propId = id.replace(/-/g, '_');\n      Object.defineProperty(_Color.prototype, propId, {\n        get: function get() {\n          var _this3 = this;\n          var ret = this.getAll(id);\n          if (typeof Proxy === 'undefined') {\n            return ret;\n          }\n          return new Proxy(ret, {\n            has: function has(obj, property) {\n              try {\n                ColorSpace.resolveCoord([ space, property ]);\n                return true;\n              } catch (e) {}\n              return Reflect.has(obj, property);\n            },\n            get: function get(obj, property, receiver) {\n              if (property && _typeof(property) !== 'symbol' && !(property in obj)) {\n                var _ColorSpace$resolveCo3 = ColorSpace.resolveCoord([ space, property ]), index = _ColorSpace$resolveCo3.index;\n                if (index >= 0) {\n                  return obj[index];\n                }\n              }\n              return Reflect.get(obj, property, receiver);\n            },\n            set: function set(obj, property, value, receiver) {\n              if (property && _typeof(property) !== 'symbol' && !(property in obj) || property >= 0) {\n                var _ColorSpace$resolveCo4 = ColorSpace.resolveCoord([ space, property ]), index = _ColorSpace$resolveCo4.index;\n                if (index >= 0) {\n                  obj[index] = value;\n                  _this3.setAll(id, obj);\n                  return true;\n                }\n              }\n              return Reflect.set(obj, property, value, receiver);\n            }\n          });\n        },\n        set: function set(coords) {\n          this.setAll(id, coords);\n        },\n        configurable: true,\n        enumerable: true\n      });\n    }\n    _Color.extend(deltaEMethods);\n    _Color.extend({\n      deltaE: deltaE\n    });\n    _Color.extend(variations);\n    _Color.extend({\n      contrast: contrast\n    });\n    _Color.extend(chromaticity);\n    _Color.extend(luminance);\n    _Color.extend(interpolation);\n    _Color.extend(contrastMethods);\n    var import_from2 = __toModule(require_from4());\n    import_dot['default'].templateSettings.strip = false;\n    var hexRegex = /^#[0-9a-f]{3,8}$/i;\n    var hslRegex = /hsl\\(\\s*([-\\d.]+)(rad|turn)/;\n    var _Color2 = (_r = new WeakMap(), _g = new WeakMap(), _b = new WeakMap(), _red = new WeakMap(), \n    _green = new WeakMap(), _blue = new WeakMap(), _Class3_brand = new WeakSet(), \n    function() {\n      function Color2(red, green, blue) {\n        var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n        _classCallCheck(this, Color2);\n        _classPrivateMethodInitSpec(this, _Class3_brand);\n        _classPrivateFieldInitSpec(this, _r, void 0);\n        _classPrivateFieldInitSpec(this, _g, void 0);\n        _classPrivateFieldInitSpec(this, _b, void 0);\n        _classPrivateFieldInitSpec(this, _red, void 0);\n        _classPrivateFieldInitSpec(this, _green, void 0);\n        _classPrivateFieldInitSpec(this, _blue, void 0);\n        if (red instanceof _Color2) {\n          var r = red.r, g2 = red.g, b2 = red.b;\n          this.r = r;\n          this.g = g2;\n          this.b = b2;\n          this.alpha = red.alpha;\n          return;\n        }\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n        this.alpha = alpha;\n      }\n      return _createClass(Color2, [ {\n        key: 'r',\n        get: function get() {\n          return _classPrivateFieldGet(_r, this);\n        },\n        set: function set(value) {\n          _classPrivateFieldSet(_r, this, value);\n          _classPrivateFieldSet(_red, this, Math.round(clamp(value, 0, 1) * 255));\n        }\n      }, {\n        key: 'g',\n        get: function get() {\n          return _classPrivateFieldGet(_g, this);\n        },\n        set: function set(value) {\n          _classPrivateFieldSet(_g, this, value);\n          _classPrivateFieldSet(_green, this, Math.round(clamp(value, 0, 1) * 255));\n        }\n      }, {\n        key: 'b',\n        get: function get() {\n          return _classPrivateFieldGet(_b, this);\n        },\n        set: function set(value) {\n          _classPrivateFieldSet(_b, this, value);\n          _classPrivateFieldSet(_blue, this, Math.round(clamp(value, 0, 1) * 255));\n        }\n      }, {\n        key: 'red',\n        get: function get() {\n          return _classPrivateFieldGet(_red, this);\n        },\n        set: function set(value) {\n          _classPrivateFieldSet(_r, this, value / 255);\n          _classPrivateFieldSet(_red, this, clamp(value, 0, 255));\n        }\n      }, {\n        key: 'green',\n        get: function get() {\n          return _classPrivateFieldGet(_green, this);\n        },\n        set: function set(value) {\n          _classPrivateFieldSet(_g, this, value / 255);\n          _classPrivateFieldSet(_green, this, clamp(value, 0, 255));\n        }\n      }, {\n        key: 'blue',\n        get: function get() {\n          return _classPrivateFieldGet(_blue, this);\n        },\n        set: function set(value) {\n          _classPrivateFieldSet(_b, this, value / 255);\n          _classPrivateFieldSet(_blue, this, clamp(value, 0, 255));\n        }\n      }, {\n        key: 'toHexString',\n        value: function toHexString() {\n          var redString = Math.round(this.red).toString(16);\n          var greenString = Math.round(this.green).toString(16);\n          var blueString = Math.round(this.blue).toString(16);\n          return '#' + (this.red > 15.5 ? redString : '0' + redString) + (this.green > 15.5 ? greenString : '0' + greenString) + (this.blue > 15.5 ? blueString : '0' + blueString);\n        }\n      }, {\n        key: 'toJSON',\n        value: function toJSON() {\n          var red = this.red, green = this.green, blue = this.blue, alpha = this.alpha;\n          return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha\n          };\n        }\n      }, {\n        key: 'parseString',\n        value: function parseString(colorString) {\n          colorString = colorString.replace(hslRegex, function(match, angle, unit) {\n            var value = angle + unit;\n            switch (unit) {\n             case 'rad':\n              return match.replace(value, radToDeg(angle));\n\n             case 'turn':\n              return match.replace(value, turnToDeg(angle));\n            }\n          });\n          try {\n            var prototypeArrayFrom;\n            if ('Prototype' in window && 'Version' in window.Prototype) {\n              prototypeArrayFrom = Array.from;\n              Array.from = import_from2['default'];\n            }\n            var _color2 = new _Color(colorString).to('srgb');\n            if (prototypeArrayFrom) {\n              Array.from = prototypeArrayFrom;\n              prototypeArrayFrom = null;\n            }\n            this.r = _color2.r;\n            this.g = _color2.g;\n            this.b = _color2.b;\n            this.alpha = +_color2.alpha;\n          } catch (_unused4) {\n            throw new Error('Unable to parse color \"'.concat(colorString, '\"'));\n          }\n          return this;\n        }\n      }, {\n        key: 'parseRgbString',\n        value: function parseRgbString(colorString) {\n          this.parseString(colorString);\n        }\n      }, {\n        key: 'parseHexString',\n        value: function parseHexString(colorString) {\n          if (!colorString.match(hexRegex) || [ 6, 8 ].includes(colorString.length)) {\n            return;\n          }\n          this.parseString(colorString);\n        }\n      }, {\n        key: 'parseColorFnString',\n        value: function parseColorFnString(colorString) {\n          this.parseString(colorString);\n        }\n      }, {\n        key: 'getRelativeLuminance',\n        value: function getRelativeLuminance() {\n          var rSRGB = this.r, gSRGB = this.g, bSRGB = this.b;\n          var r = rSRGB <= .03928 ? rSRGB / 12.92 : Math.pow((rSRGB + .055) / 1.055, 2.4);\n          var g2 = gSRGB <= .03928 ? gSRGB / 12.92 : Math.pow((gSRGB + .055) / 1.055, 2.4);\n          var b2 = bSRGB <= .03928 ? bSRGB / 12.92 : Math.pow((bSRGB + .055) / 1.055, 2.4);\n          return .2126 * r + .7152 * g2 + .0722 * b2;\n        }\n      }, {\n        key: 'getLuminosity',\n        value: function getLuminosity() {\n          return .3 * this.r + .59 * this.g + .11 * this.b;\n        }\n      }, {\n        key: 'setLuminosity',\n        value: function setLuminosity(L) {\n          var d2 = L - this.getLuminosity();\n          return _assertClassBrand(_Class3_brand, this, _add).call(this, d2).clip();\n        }\n      }, {\n        key: 'getSaturation',\n        value: function getSaturation() {\n          return Math.max(this.r, this.g, this.b) - Math.min(this.r, this.g, this.b);\n        }\n      }, {\n        key: 'setSaturation',\n        value: function setSaturation(s) {\n          var C = new _Color2(this);\n          var colorEntires = [ {\n            name: 'r',\n            value: C.r\n          }, {\n            name: 'g',\n            value: C.g\n          }, {\n            name: 'b',\n            value: C.b\n          } ];\n          var _colorEntires$sort = colorEntires.sort(function(a2, b2) {\n            return a2.value - b2.value;\n          }), _colorEntires$sort2 = _slicedToArray(_colorEntires$sort, 3), Cmin = _colorEntires$sort2[0], Cmid = _colorEntires$sort2[1], Cmax = _colorEntires$sort2[2];\n          if (Cmax.value > Cmin.value) {\n            Cmid.value = (Cmid.value - Cmin.value) * s / (Cmax.value - Cmin.value);\n            Cmax.value = s;\n          } else {\n            Cmid.value = Cmax.value = 0;\n          }\n          Cmin.value = 0;\n          C[Cmax.name] = Cmax.value;\n          C[Cmin.name] = Cmin.value;\n          C[Cmid.name] = Cmid.value;\n          return C;\n        }\n      }, {\n        key: 'clip',\n        value: function clip() {\n          var C = new _Color2(this);\n          var L = C.getLuminosity();\n          var n2 = Math.min(C.r, C.g, C.b);\n          var x = Math.max(C.r, C.g, C.b);\n          if (n2 < 0) {\n            C.r = L + (C.r - L) * L / (L - n2);\n            C.g = L + (C.g - L) * L / (L - n2);\n            C.b = L + (C.b - L) * L / (L - n2);\n          }\n          if (x > 1) {\n            C.r = L + (C.r - L) * (1 - L) / (x - L);\n            C.g = L + (C.g - L) * (1 - L) / (x - L);\n            C.b = L + (C.b - L) * (1 - L) / (x - L);\n          }\n          return C;\n        }\n      } ]);\n    }());\n    function _add(value) {\n      var C = new _Color2(this);\n      C.r += value;\n      C.g += value;\n      C.b += value;\n      return C;\n    }\n    var color_default = _Color2;\n    function clamp(value, min, max2) {\n      return Math.min(Math.max(min, value), max2);\n    }\n    function radToDeg(rad) {\n      return rad * 180 / Math.PI;\n    }\n    function turnToDeg(turn) {\n      return turn * 360;\n    }\n    function getOwnBackgroundColor(elmStyle) {\n      var bgColor = new color_default();\n      bgColor.parseString(elmStyle.getPropertyValue('background-color'));\n      if (bgColor.alpha !== 0) {\n        var opacity = elmStyle.getPropertyValue('opacity');\n        bgColor.alpha = bgColor.alpha * opacity;\n      }\n      return bgColor;\n    }\n    var get_own_background_color_default = getOwnBackgroundColor;\n    function isOpaque(node) {\n      var style = window.getComputedStyle(node);\n      return element_has_image_default(node, style) || get_own_background_color_default(style).alpha === 1;\n    }\n    var is_opaque_default = isOpaque;\n    function _isSkipLink(element) {\n      if (!element.href) {\n        return false;\n      }\n      var firstPageLink = cache_default.get('firstPageLink', generateFirstPageLink);\n      if (!firstPageLink) {\n        return true;\n      }\n      return element.compareDocumentPosition(firstPageLink.actualNode) === element.DOCUMENT_POSITION_FOLLOWING;\n    }\n    function generateFirstPageLink() {\n      var firstPageLink;\n      if (!window.location.origin) {\n        firstPageLink = query_selector_all_default(axe._tree, 'a:not([href^=\"#\"]):not([href^=\"/#\"]):not([href^=\"javascript:\"])')[0];\n      } else {\n        firstPageLink = query_selector_all_default(axe._tree, 'a[href]:not([href^=\"javascript:\"])').find(function(link) {\n          return !_isCurrentPageLink(link.actualNode);\n        });\n      }\n      return firstPageLink || null;\n    }\n    var clipRegex2 = /rect\\s*\\(([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px\\s*\\)/;\n    var clipPathRegex2 = /(\\w+)\\((\\d+)/;\n    function isClipped(style) {\n      var matchesClip = style.getPropertyValue('clip').match(clipRegex2);\n      var matchesClipPath = style.getPropertyValue('clip-path').match(clipPathRegex2);\n      if (matchesClip && matchesClip.length === 5) {\n        var position = style.getPropertyValue('position');\n        if ([ 'fixed', 'absolute' ].includes(position)) {\n          return matchesClip[3] - matchesClip[1] <= 0 && matchesClip[2] - matchesClip[4] <= 0;\n        }\n      }\n      if (matchesClipPath) {\n        var type2 = matchesClipPath[1];\n        var value = parseInt(matchesClipPath[2], 10);\n        switch (type2) {\n         case 'inset':\n          return value >= 50;\n\n         case 'circle':\n          return value === 0;\n\n         default:\n        }\n      }\n      return false;\n    }\n    function isAreaVisible(el, screenReader, recursed) {\n      var mapEl = find_up_default(el, 'map');\n      if (!mapEl) {\n        return false;\n      }\n      var mapElName = mapEl.getAttribute('name');\n      if (!mapElName) {\n        return false;\n      }\n      var mapElRootNode = get_root_node_default2(el);\n      if (!mapElRootNode || mapElRootNode.nodeType !== 9) {\n        return false;\n      }\n      var refs = query_selector_all_default(axe._tree, 'img[usemap=\"#'.concat(escape_selector_default(mapElName), '\"]'));\n      if (!refs || !refs.length) {\n        return false;\n      }\n      return refs.some(function(_ref62) {\n        var actualNode = _ref62.actualNode;\n        return isVisible(actualNode, screenReader, recursed);\n      });\n    }\n    function isVisible(el, screenReader, recursed) {\n      var _window$Node2;\n      if (!el) {\n        throw new TypeError('Cannot determine if element is visible for non-DOM nodes');\n      }\n      var vNode = el instanceof abstract_virtual_node_default ? el : get_node_from_tree_default(el);\n      el = vNode ? vNode.actualNode : el;\n      var cacheName = '_isVisible' + (screenReader ? 'ScreenReader' : '');\n      var _ref63 = (_window$Node2 = window.Node) !== null && _window$Node2 !== void 0 ? _window$Node2 : {}, DOCUMENT_NODE = _ref63.DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE = _ref63.DOCUMENT_FRAGMENT_NODE;\n      var nodeType = vNode ? vNode.props.nodeType : el.nodeType;\n      var nodeName2 = vNode ? vNode.props.nodeName : el.nodeName.toLowerCase();\n      if (vNode && typeof vNode[cacheName] !== 'undefined') {\n        return vNode[cacheName];\n      }\n      if (nodeType === DOCUMENT_NODE) {\n        return true;\n      }\n      if ([ 'style', 'script', 'noscript', 'template' ].includes(nodeName2)) {\n        return false;\n      }\n      if (el && nodeType === DOCUMENT_FRAGMENT_NODE) {\n        el = el.host;\n      }\n      if (screenReader) {\n        var ariaHiddenValue = vNode ? vNode.attr('aria-hidden') : el.getAttribute('aria-hidden');\n        if (ariaHiddenValue === 'true') {\n          return false;\n        }\n      }\n      if (!el) {\n        var parent2 = vNode.parent;\n        var visible3 = true;\n        if (parent2) {\n          visible3 = isVisible(parent2, screenReader, true);\n        }\n        if (vNode) {\n          vNode[cacheName] = visible3;\n        }\n        return visible3;\n      }\n      var style = window.getComputedStyle(el, null);\n      if (style === null) {\n        return false;\n      }\n      if (nodeName2 === 'area') {\n        return isAreaVisible(el, screenReader, recursed);\n      }\n      if (style.getPropertyValue('display') === 'none') {\n        return false;\n      }\n      var elHeight = parseInt(style.getPropertyValue('height'));\n      var elWidth = parseInt(style.getPropertyValue('width'));\n      var scroll = get_scroll_default(el);\n      var scrollableWithZeroHeight = scroll && elHeight === 0;\n      var scrollableWithZeroWidth = scroll && elWidth === 0;\n      var posAbsoluteOverflowHiddenAndSmall = style.getPropertyValue('position') === 'absolute' && (elHeight < 2 || elWidth < 2) && style.getPropertyValue('overflow') === 'hidden';\n      if (!screenReader && (isClipped(style) || style.getPropertyValue('opacity') === '0' || scrollableWithZeroHeight || scrollableWithZeroWidth || posAbsoluteOverflowHiddenAndSmall)) {\n        return false;\n      }\n      if (!recursed && (style.getPropertyValue('visibility') === 'hidden' || !screenReader && is_offscreen_default(el))) {\n        return false;\n      }\n      var parent = el.assignedSlot ? el.assignedSlot : el.parentNode;\n      var visible2 = false;\n      if (parent) {\n        visible2 = isVisible(parent, screenReader, true);\n      }\n      if (vNode) {\n        vNode[cacheName] = visible2;\n      }\n      return visible2;\n    }\n    var is_visible_default = isVisible;\n    function reduceToElementsBelowFloating(elements, targetNode) {\n      var floatingPositions = [ 'fixed', 'sticky' ];\n      var finalElements = [];\n      var targetFound = false;\n      for (var index = 0; index < elements.length; ++index) {\n        var currentNode = elements[index];\n        if (currentNode === targetNode) {\n          targetFound = true;\n        }\n        var style = window.getComputedStyle(currentNode);\n        if (!targetFound && floatingPositions.indexOf(style.position) !== -1) {\n          finalElements = [];\n          continue;\n        }\n        finalElements.push(currentNode);\n      }\n      return finalElements;\n    }\n    var reduce_to_elements_below_floating_default = reduceToElementsBelowFloating;\n    function _visuallyContains(node, parent) {\n      var parentScrollAncestor = getScrollAncestor(parent);\n      do {\n        var nextScrollAncestor = getScrollAncestor(node);\n        if (nextScrollAncestor === parentScrollAncestor || nextScrollAncestor === parent) {\n          return contains2(node, parent);\n        }\n        node = nextScrollAncestor;\n      } while (node);\n      return false;\n    }\n    function getScrollAncestor(node) {\n      var vNode = get_node_from_tree_default(node);\n      var ancestor = vNode.parent;\n      while (ancestor) {\n        if (get_scroll_default(ancestor.actualNode)) {\n          return ancestor.actualNode;\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    function contains2(node, parent) {\n      var style = window.getComputedStyle(parent);\n      var overflow = style.getPropertyValue('overflow');\n      if (style.getPropertyValue('display') === 'inline') {\n        return true;\n      }\n      var clientRects = Array.from(node.getClientRects());\n      var boundingRect = parent.getBoundingClientRect();\n      var rect = {\n        left: boundingRect.left,\n        top: boundingRect.top,\n        width: boundingRect.width,\n        height: boundingRect.height\n      };\n      if ([ 'scroll', 'auto' ].includes(overflow) || parent instanceof window.HTMLHtmlElement) {\n        rect.width = parent.scrollWidth;\n        rect.height = parent.scrollHeight;\n      }\n      if (clientRects.length === 1 && overflow === 'hidden' && style.getPropertyValue('white-space') === 'nowrap') {\n        clientRects[0] = rect;\n      }\n      return clientRects.some(function(clientRect) {\n        return !(Math.ceil(clientRect.left) < Math.floor(rect.left) || Math.ceil(clientRect.top) < Math.floor(rect.top) || Math.floor(clientRect.left + clientRect.width) > Math.ceil(rect.left + rect.width) || Math.floor(clientRect.top + clientRect.height) > Math.ceil(rect.top + rect.height));\n      });\n    }\n    function shadowElementsFromPoint(nodeX, nodeY) {\n      var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      if (i > 999) {\n        throw new Error('Infinite loop detected');\n      }\n      return Array.from(root.elementsFromPoint(nodeX, nodeY) || []).filter(function(nodes) {\n        return get_root_node_default2(nodes) === root;\n      }).reduce(function(stack, elm) {\n        if (is_shadow_root_default(elm)) {\n          var shadowStack = shadowElementsFromPoint(nodeX, nodeY, elm.shadowRoot, i + 1);\n          stack = stack.concat(shadowStack);\n          if (stack.length && _visuallyContains(stack[0], elm)) {\n            stack.push(elm);\n          }\n        } else {\n          stack.push(elm);\n        }\n        return stack;\n      }, []);\n    }\n    var shadow_elements_from_point_default = shadowElementsFromPoint;\n    function urlPropsFromAttribute(node, attribute) {\n      if (!node.hasAttribute(attribute)) {\n        return void 0;\n      }\n      var nodeName2 = node.nodeName.toUpperCase();\n      var parser2 = node;\n      if (![ 'A', 'AREA' ].includes(nodeName2) || node.ownerSVGElement) {\n        parser2 = document.createElement('a');\n        parser2.href = node.getAttribute(attribute);\n      }\n      var protocol = [ 'https:', 'ftps:' ].includes(parser2.protocol) ? parser2.protocol.replace(/s:$/, ':') : parser2.protocol;\n      var parserPathname = /^\\//.test(parser2.pathname) ? parser2.pathname : '/'.concat(parser2.pathname);\n      var _getPathnameOrFilenam = getPathnameOrFilename(parserPathname), pathname = _getPathnameOrFilenam.pathname, filename = _getPathnameOrFilenam.filename;\n      return {\n        protocol: protocol,\n        hostname: parser2.hostname,\n        port: getPort(parser2.port),\n        pathname: /\\/$/.test(pathname) ? pathname : ''.concat(pathname, '/'),\n        search: getSearchPairs(parser2.search),\n        hash: getHashRoute(parser2.hash),\n        filename: filename\n      };\n    }\n    function getPort(port) {\n      var excludePorts = [ '443', '80' ];\n      return !excludePorts.includes(port) ? port : '';\n    }\n    function getPathnameOrFilename(pathname) {\n      var filename = pathname.split('/').pop();\n      if (!filename || filename.indexOf('.') === -1) {\n        return {\n          pathname: pathname,\n          filename: ''\n        };\n      }\n      return {\n        pathname: pathname.replace(filename, ''),\n        filename: /index./.test(filename) ? '' : filename\n      };\n    }\n    function getSearchPairs(searchStr) {\n      var query = {};\n      if (!searchStr || !searchStr.length) {\n        return query;\n      }\n      var pairs = searchStr.substring(1).split('&');\n      if (!pairs || !pairs.length) {\n        return query;\n      }\n      for (var index = 0; index < pairs.length; index++) {\n        var pair = pairs[index];\n        var _pair$split = pair.split('='), _pair$split2 = _slicedToArray(_pair$split, 2), _key7 = _pair$split2[0], _pair$split2$ = _pair$split2[1], value = _pair$split2$ === void 0 ? '' : _pair$split2$;\n        query[decodeURIComponent(_key7)] = decodeURIComponent(value);\n      }\n      return query;\n    }\n    function getHashRoute(hash) {\n      if (!hash) {\n        return '';\n      }\n      var hashRegex = /#!?\\/?/g;\n      var hasMatch = hash.match(hashRegex);\n      if (!hasMatch) {\n        return '';\n      }\n      var _hasMatch = _slicedToArray(hasMatch, 1), matchedStr = _hasMatch[0];\n      if (matchedStr === '#') {\n        return '';\n      }\n      return hash;\n    }\n    var url_props_from_attribute_default = urlPropsFromAttribute;\n    function visuallyOverlaps(rect, parent) {\n      var parentRect = parent.getBoundingClientRect();\n      var parentTop = parentRect.top;\n      var parentLeft = parentRect.left;\n      var parentScrollArea = {\n        top: parentTop - parent.scrollTop,\n        bottom: parentTop - parent.scrollTop + parent.scrollHeight,\n        left: parentLeft - parent.scrollLeft,\n        right: parentLeft - parent.scrollLeft + parent.scrollWidth\n      };\n      if (rect.left > parentScrollArea.right && rect.left > parentRect.right || rect.top > parentScrollArea.bottom && rect.top > parentRect.bottom || rect.right < parentScrollArea.left && rect.right < parentRect.left || rect.bottom < parentScrollArea.top && rect.bottom < parentRect.top) {\n        return false;\n      }\n      var style = window.getComputedStyle(parent);\n      if (rect.left > parentRect.right || rect.top > parentRect.bottom) {\n        return style.overflow === 'scroll' || style.overflow === 'auto' || parent instanceof window.HTMLBodyElement || parent instanceof window.HTMLHtmlElement;\n      }\n      return true;\n    }\n    var visually_overlaps_default = visuallyOverlaps;\n    var nodeIndex2 = 0;\n    var VirtualNode = function(_abstract_virtual_nod) {\n      function VirtualNode(node, parent, shadowId) {\n        var _this4;\n        _classCallCheck(this, VirtualNode);\n        _this4 = _callSuper(this, VirtualNode);\n        _this4.shadowId = shadowId;\n        _this4.children = [];\n        _this4.actualNode = node;\n        _this4.parent = parent;\n        if (!parent) {\n          nodeIndex2 = 0;\n        }\n        _this4.nodeIndex = nodeIndex2++;\n        _this4._isHidden = null;\n        _this4._cache = {};\n        _this4._isXHTML = is_xhtml_default(node.ownerDocument);\n        if (node.nodeName.toLowerCase() === 'input') {\n          var type2 = node.getAttribute('type');\n          type2 = _this4._isXHTML ? type2 : (type2 || '').toLowerCase();\n          if (!valid_input_type_default().includes(type2)) {\n            type2 = 'text';\n          }\n          _this4._type = type2;\n        }\n        if (cache_default.get('nodeMap')) {\n          cache_default.get('nodeMap').set(node, _this4);\n        }\n        return _this4;\n      }\n      _inherits(VirtualNode, _abstract_virtual_nod);\n      return _createClass(VirtualNode, [ {\n        key: 'props',\n        get: function get() {\n          if (!this._cache.hasOwnProperty('props')) {\n            var _this$actualNode = this.actualNode, nodeType = _this$actualNode.nodeType, nodeName2 = _this$actualNode.nodeName, _id = _this$actualNode.id, nodeValue = _this$actualNode.nodeValue;\n            this._cache.props = {\n              nodeType: nodeType,\n              nodeName: this._isXHTML ? nodeName2 : nodeName2.toLowerCase(),\n              id: _id,\n              type: this._type,\n              nodeValue: nodeValue\n            };\n            if (nodeType === 1) {\n              this._cache.props.multiple = this.actualNode.multiple;\n              this._cache.props.value = this.actualNode.value;\n              this._cache.props.selected = this.actualNode.selected;\n              this._cache.props.checked = this.actualNode.checked;\n              this._cache.props.indeterminate = this.actualNode.indeterminate;\n            }\n          }\n          return this._cache.props;\n        }\n      }, {\n        key: 'attr',\n        value: function attr(attrName) {\n          if (typeof this.actualNode.getAttribute !== 'function') {\n            return null;\n          }\n          return this.actualNode.getAttribute(attrName);\n        }\n      }, {\n        key: 'hasAttr',\n        value: function hasAttr(attrName) {\n          if (typeof this.actualNode.hasAttribute !== 'function') {\n            return false;\n          }\n          return this.actualNode.hasAttribute(attrName);\n        }\n      }, {\n        key: 'attrNames',\n        get: function get() {\n          if (!this._cache.hasOwnProperty('attrNames')) {\n            var attrs;\n            if (this.actualNode.attributes instanceof window.NamedNodeMap) {\n              attrs = this.actualNode.attributes;\n            } else {\n              attrs = this.actualNode.cloneNode(false).attributes;\n            }\n            this._cache.attrNames = Array.from(attrs).map(function(attr) {\n              return attr.name;\n            });\n          }\n          return this._cache.attrNames;\n        }\n      }, {\n        key: 'getComputedStylePropertyValue',\n        value: function getComputedStylePropertyValue(property) {\n          var key = 'computedStyle_' + property;\n          if (!this._cache.hasOwnProperty(key)) {\n            if (!this._cache.hasOwnProperty('computedStyle')) {\n              this._cache.computedStyle = window.getComputedStyle(this.actualNode);\n            }\n            this._cache[key] = this._cache.computedStyle.getPropertyValue(property);\n          }\n          return this._cache[key];\n        }\n      }, {\n        key: 'isFocusable',\n        get: function get() {\n          if (!this._cache.hasOwnProperty('isFocusable')) {\n            this._cache.isFocusable = _isFocusable(this.actualNode);\n          }\n          return this._cache.isFocusable;\n        }\n      }, {\n        key: 'tabbableElements',\n        get: function get() {\n          if (!this._cache.hasOwnProperty('tabbableElements')) {\n            this._cache.tabbableElements = get_tabbable_elements_default(this);\n          }\n          return this._cache.tabbableElements;\n        }\n      }, {\n        key: 'clientRects',\n        get: function get() {\n          if (!this._cache.hasOwnProperty('clientRects')) {\n            this._cache.clientRects = Array.from(this.actualNode.getClientRects()).filter(function(rect) {\n              return rect.width > 0;\n            });\n          }\n          return this._cache.clientRects;\n        }\n      }, {\n        key: 'boundingClientRect',\n        get: function get() {\n          if (!this._cache.hasOwnProperty('boundingClientRect')) {\n            this._cache.boundingClientRect = this.actualNode.getBoundingClientRect();\n          }\n          return this._cache.boundingClientRect;\n        }\n      } ]);\n    }(abstract_virtual_node_default);\n    var virtual_node_default = VirtualNode;\n    function tokenList(str) {\n      return (str || '').trim().replace(/\\s{2,}/g, ' ').split(' ');\n    }\n    var token_list_default = tokenList;\n    var idsKey = ' [idsMap]';\n    function getNodesMatchingExpression(domTree, expressions, filter) {\n      var selectorMap = domTree[0]._selectorMap;\n      if (!selectorMap) {\n        return;\n      }\n      var shadowId = domTree[0].shadowId;\n      for (var _i23 = 0; _i23 < expressions.length; _i23++) {\n        if (expressions[_i23].length > 1 && expressions[_i23].some(function(expression) {\n          return isGlobalSelector(expression);\n        })) {\n          return;\n        }\n      }\n      var nodeSet = new Set();\n      expressions.forEach(function(expression) {\n        var _matchingNodes$nodes;\n        var matchingNodes = findMatchingNodes(expression, selectorMap, shadowId);\n        matchingNodes === null || matchingNodes === void 0 || (_matchingNodes$nodes = matchingNodes.nodes) === null || _matchingNodes$nodes === void 0 || _matchingNodes$nodes.forEach(function(node) {\n          if (matchingNodes.isComplexSelector && !_matchesExpression(node, expression)) {\n            return;\n          }\n          nodeSet.add(node);\n        });\n      });\n      var matchedNodes = [];\n      nodeSet.forEach(function(node) {\n        return matchedNodes.push(node);\n      });\n      if (filter) {\n        matchedNodes = matchedNodes.filter(filter);\n      }\n      return matchedNodes.sort(function(a2, b2) {\n        return a2.nodeIndex - b2.nodeIndex;\n      });\n    }\n    function findMatchingNodes(expression, selectorMap, shadowId) {\n      var exp = expression[expression.length - 1];\n      var nodes = null;\n      var isComplexSelector = expression.length > 1 || !!exp.pseudos || !!exp.classes;\n      if (isGlobalSelector(exp)) {\n        nodes = selectorMap['*'];\n      } else {\n        if (exp.id) {\n          var _selectorMap$idsKey$e;\n          if (!selectorMap[idsKey] || !Object.hasOwn(selectorMap[idsKey], exp.id) || !((_selectorMap$idsKey$e = selectorMap[idsKey][exp.id]) !== null && _selectorMap$idsKey$e !== void 0 && _selectorMap$idsKey$e.length)) {\n            return;\n          }\n          nodes = selectorMap[idsKey][exp.id].filter(function(node) {\n            return node.shadowId === shadowId;\n          });\n        }\n        if (exp.tag && exp.tag !== '*') {\n          var _selectorMap$exp$tag;\n          if (!((_selectorMap$exp$tag = selectorMap[exp.tag]) !== null && _selectorMap$exp$tag !== void 0 && _selectorMap$exp$tag.length)) {\n            return;\n          }\n          var cachedNodes = selectorMap[exp.tag];\n          nodes = nodes ? getSharedValues(cachedNodes, nodes) : cachedNodes;\n        }\n        if (exp.classes) {\n          var _selectorMap$Class;\n          if (!((_selectorMap$Class = selectorMap['[class]']) !== null && _selectorMap$Class !== void 0 && _selectorMap$Class.length)) {\n            return;\n          }\n          var _cachedNodes = selectorMap['[class]'];\n          nodes = nodes ? getSharedValues(_cachedNodes, nodes) : _cachedNodes;\n        }\n        if (exp.attributes) {\n          for (var _i24 = 0; _i24 < exp.attributes.length; _i24++) {\n            var _selectorMap;\n            var attr = exp.attributes[_i24];\n            if (attr.type === 'attrValue') {\n              isComplexSelector = true;\n            }\n            if (!((_selectorMap = selectorMap['['.concat(attr.key, ']')]) !== null && _selectorMap !== void 0 && _selectorMap.length)) {\n              return;\n            }\n            var _cachedNodes2 = selectorMap['['.concat(attr.key, ']')];\n            nodes = nodes ? getSharedValues(_cachedNodes2, nodes) : _cachedNodes2;\n          }\n        }\n      }\n      return {\n        nodes: nodes,\n        isComplexSelector: isComplexSelector\n      };\n    }\n    function isGlobalSelector(expression) {\n      return expression.tag === '*' && !expression.attributes && !expression.id && !expression.classes;\n    }\n    function getSharedValues(a2, b2) {\n      return a2.filter(function(node) {\n        return b2.includes(node);\n      });\n    }\n    function cacheSelector(key, vNode, map) {\n      if (!Object.hasOwn(map, key)) {\n        map[key] = [];\n      }\n      map[key].push(vNode);\n    }\n    function cacheNodeSelectors(vNode, selectorMap) {\n      if (vNode.props.nodeType !== 1) {\n        return;\n      }\n      cacheSelector(vNode.props.nodeName, vNode, selectorMap);\n      cacheSelector('*', vNode, selectorMap);\n      vNode.attrNames.forEach(function(attrName) {\n        if (attrName === 'id') {\n          selectorMap[idsKey] = selectorMap[idsKey] || {};\n          token_list_default(vNode.attr(attrName)).forEach(function(value) {\n            cacheSelector(value, vNode, selectorMap[idsKey]);\n          });\n        }\n        cacheSelector('['.concat(attrName, ']'), vNode, selectorMap);\n      });\n    }\n    var hasShadowRoot;\n    function _getFlattenedTree() {\n      var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.documentElement;\n      var shadowId = arguments.length > 1 ? arguments[1] : undefined;\n      hasShadowRoot = false;\n      var selectorMap = {};\n      cache_default.set('nodeMap', new WeakMap());\n      cache_default.set('selectorMap', selectorMap);\n      var tree = flattenTree(node, shadowId, null);\n      tree[0]._selectorMap = selectorMap;\n      tree[0]._hasShadowRoot = hasShadowRoot;\n      return tree;\n    }\n    function getSlotChildren(node) {\n      var retVal = [];\n      node = node.firstChild;\n      while (node) {\n        retVal.push(node);\n        node = node.nextSibling;\n      }\n      return retVal;\n    }\n    function createNode(node, parent, shadowId) {\n      var vNode = new virtual_node_default(node, parent, shadowId);\n      cacheNodeSelectors(vNode, cache_default.get('selectorMap'));\n      return vNode;\n    }\n    function flattenTree(node, shadowId, parent) {\n      var retVal, realArray;\n      function reduceShadowDOM(res, child, parentVNode) {\n        var replacements = flattenTree(child, shadowId, parentVNode);\n        if (replacements) {\n          res = res.concat(replacements);\n        }\n        return res;\n      }\n      if (node.documentElement) {\n        node = node.documentElement;\n      }\n      var nodeName2 = node.nodeName.toLowerCase();\n      if (is_shadow_root_default(node)) {\n        hasShadowRoot = true;\n        retVal = createNode(node, parent, shadowId);\n        shadowId = 'a' + Math.random().toString().substring(2);\n        realArray = Array.from(node.shadowRoot.childNodes);\n        retVal.children = realArray.reduce(function(res, child) {\n          return reduceShadowDOM(res, child, retVal);\n        }, []);\n        return [ retVal ];\n      } else {\n        if (nodeName2 === 'content' && typeof node.getDistributedNodes === 'function') {\n          realArray = Array.from(node.getDistributedNodes());\n          return realArray.reduce(function(res, child) {\n            return reduceShadowDOM(res, child, parent);\n          }, []);\n        } else if (nodeName2 === 'slot' && typeof node.assignedNodes === 'function') {\n          realArray = Array.from(node.assignedNodes());\n          if (!realArray.length) {\n            realArray = getSlotChildren(node);\n          }\n          var styl = window.getComputedStyle(node);\n          if (false) {} else {\n            return realArray.reduce(function(res, child) {\n              return reduceShadowDOM(res, child, parent);\n            }, []);\n          }\n        } else {\n          if (node.nodeType === 1) {\n            retVal = createNode(node, parent, shadowId);\n            realArray = Array.from(node.childNodes);\n            retVal.children = realArray.reduce(function(res, child) {\n              return reduceShadowDOM(res, child, retVal);\n            }, []);\n            return [ retVal ];\n          } else if (node.nodeType === 3) {\n            return [ createNode(node, parent) ];\n          }\n          return void 0;\n        }\n      }\n    }\n    function getBaseLang(lang) {\n      if (!lang) {\n        return '';\n      }\n      return lang.trim().split('-')[0].toLowerCase();\n    }\n    var get_base_lang_default = getBaseLang;\n    function failureSummary(nodeData) {\n      var failingChecks = {};\n      failingChecks.none = nodeData.none.concat(nodeData.all);\n      failingChecks.any = nodeData.any;\n      return Object.keys(failingChecks).map(function(key) {\n        if (!failingChecks[key].length) {\n          return;\n        }\n        var sum = axe._audit.data.failureSummaries[key];\n        if (sum && typeof sum.failureMessage === 'function') {\n          return sum.failureMessage(failingChecks[key].map(function(check) {\n            return check.message || '';\n          }));\n        }\n      }).filter(function(i) {\n        return i !== void 0;\n      }).join('\\n\\n');\n    }\n    var failure_summary_default = failureSummary;\n    function incompleteFallbackMessage() {\n      var message = axe._audit.data.incompleteFallbackMessage;\n      if (typeof message === 'function') {\n        message = message();\n      }\n      if (typeof message !== 'string') {\n        return '';\n      }\n      return message;\n    }\n    var resultKeys = constants_default.resultGroups;\n    function processAggregate(results, options) {\n      var resultObject = axe.utils.aggregateResult(results);\n      resultKeys.forEach(function(key) {\n        if (options.resultTypes && !options.resultTypes.includes(key)) {\n          (resultObject[key] || []).forEach(function(ruleResult) {\n            if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) {\n              ruleResult.nodes = [ ruleResult.nodes[0] ];\n            }\n          });\n        }\n        resultObject[key] = (resultObject[key] || []).map(function(ruleResult) {\n          ruleResult = Object.assign({}, ruleResult);\n          if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) {\n            ruleResult.nodes = ruleResult.nodes.map(function(subResult) {\n              if (_typeof(subResult.node) === 'object') {\n                var serialElm = trimElementSpec(subResult.node, options);\n                Object.assign(subResult, serialElm);\n              }\n              delete subResult.result;\n              delete subResult.node;\n              normalizeRelatedNodes(subResult, options);\n              return subResult;\n            });\n          }\n          resultKeys.forEach(function(resultKey) {\n            return delete ruleResult[resultKey];\n          });\n          delete ruleResult.pageLevel;\n          delete ruleResult.result;\n          return ruleResult;\n        });\n      });\n      return resultObject;\n    }\n    function normalizeRelatedNodes(node, options) {\n      [ 'any', 'all', 'none' ].forEach(function(type2) {\n        if (!Array.isArray(node[type2])) {\n          return;\n        }\n        node[type2].filter(function(checkRes) {\n          return Array.isArray(checkRes.relatedNodes);\n        }).forEach(function(checkRes) {\n          checkRes.relatedNodes = checkRes.relatedNodes.map(function(relatedNode) {\n            return trimElementSpec(relatedNode, options);\n          });\n        });\n      });\n    }\n    function trimElementSpec() {\n      var elmSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var runOptions = arguments.length > 1 ? arguments[1] : undefined;\n      elmSpec = node_serializer_default.dqElmToSpec(elmSpec, runOptions);\n      var serialElm = {};\n      if (axe._audit.noHtml) {\n        serialElm.html = null;\n      } else {\n        var _elmSpec$source;\n        serialElm.html = (_elmSpec$source = elmSpec.source) !== null && _elmSpec$source !== void 0 ? _elmSpec$source : 'Undefined';\n      }\n      if (runOptions.elementRef && !elmSpec.fromFrame) {\n        var _elmSpec$element;\n        serialElm.element = (_elmSpec$element = elmSpec.element) !== null && _elmSpec$element !== void 0 ? _elmSpec$element : null;\n      }\n      if (runOptions.selectors !== false || elmSpec.fromFrame) {\n        var _elmSpec$selector;\n        serialElm.target = (_elmSpec$selector = elmSpec.selector) !== null && _elmSpec$selector !== void 0 ? _elmSpec$selector : [ ':root' ];\n      }\n      if (runOptions.ancestry) {\n        var _elmSpec$ancestry;\n        serialElm.ancestry = (_elmSpec$ancestry = elmSpec.ancestry) !== null && _elmSpec$ancestry !== void 0 ? _elmSpec$ancestry : [ ':root' ];\n      }\n      if (runOptions.xpath) {\n        var _elmSpec$xpath;\n        serialElm.xpath = (_elmSpec$xpath = elmSpec.xpath) !== null && _elmSpec$xpath !== void 0 ? _elmSpec$xpath : [ '/' ];\n      }\n      return serialElm;\n    }\n    var dataRegex = /\\$\\{\\s?data\\s?\\}/g;\n    function substitute(str, data) {\n      if (typeof data === 'string') {\n        return str.replace(dataRegex, data);\n      }\n      for (var prop in data) {\n        if (data.hasOwnProperty(prop)) {\n          var regex = new RegExp('\\\\${\\\\s?data\\\\.' + prop + '\\\\s?}', 'g');\n          var replace = typeof data[prop] === 'undefined' ? '' : String(data[prop]);\n          str = str.replace(regex, replace);\n        }\n      }\n      return str;\n    }\n    function processMessage(message, data) {\n      if (!message) {\n        return;\n      }\n      if (Array.isArray(data)) {\n        data.values = data.join(', ');\n        if (typeof message.singular === 'string' && typeof message.plural === 'string') {\n          var str2 = data.length === 1 ? message.singular : message.plural;\n          return substitute(str2, data);\n        }\n        return substitute(message, data);\n      }\n      if (typeof message === 'string') {\n        return substitute(message, data);\n      }\n      if (typeof data === 'string') {\n        var _str = message[data];\n        return substitute(_str, data);\n      }\n      var str = message['default'] || incompleteFallbackMessage();\n      if (data && data.messageKey && message[data.messageKey]) {\n        str = message[data.messageKey];\n      }\n      return processMessage(str, data);\n    }\n    var process_message_default = processMessage;\n    function getCheckMessage(checkId, type2, data) {\n      var check = axe._audit.data.checks[checkId];\n      if (!check) {\n        throw new Error('Cannot get message for unknown check: '.concat(checkId, '.'));\n      }\n      if (!check.messages[type2]) {\n        throw new Error('Check \"'.concat(checkId, '\"\" does not have a \"').concat(type2, '\" message.'));\n      }\n      return process_message_default(check.messages[type2], data);\n    }\n    var get_check_message_default = getCheckMessage;\n    function getCheckOption(check, ruleID, options) {\n      var ruleCheckOption = ((options.rules && options.rules[ruleID] || {}).checks || {})[check.id];\n      var checkOption = (options.checks || {})[check.id];\n      var enabled = check.enabled;\n      var opts = check.options;\n      if (checkOption) {\n        if (checkOption.hasOwnProperty('enabled')) {\n          enabled = checkOption.enabled;\n        }\n        if (checkOption.hasOwnProperty('options')) {\n          opts = checkOption.options;\n        }\n      }\n      if (ruleCheckOption) {\n        if (ruleCheckOption.hasOwnProperty('enabled')) {\n          enabled = ruleCheckOption.enabled;\n        }\n        if (ruleCheckOption.hasOwnProperty('options')) {\n          opts = ruleCheckOption.options;\n        }\n      }\n      return {\n        enabled: enabled,\n        options: opts,\n        absolutePaths: options.absolutePaths\n      };\n    }\n    var get_check_option_default = getCheckOption;\n    function _getEnvironmentData() {\n      var _win$location;\n      var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var win = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;\n      if (metadata && _typeof(metadata) === 'object') {\n        return metadata;\n      } else if (_typeof(win) !== 'object') {\n        return {};\n      }\n      return {\n        testEngine: {\n          name: 'axe-core',\n          version: axe.version\n        },\n        testRunner: {\n          name: axe._audit.brand\n        },\n        testEnvironment: getTestEnvironment(win),\n        timestamp: new Date().toISOString(),\n        url: (_win$location = win.location) === null || _win$location === void 0 ? void 0 : _win$location.href\n      };\n    }\n    function getTestEnvironment(win) {\n      if (!win.navigator || _typeof(win.navigator) !== 'object') {\n        return {};\n      }\n      var navigator2 = win.navigator, innerHeight = win.innerHeight, innerWidth = win.innerWidth;\n      var _ref64 = getOrientation(win) || {}, angle = _ref64.angle, type2 = _ref64.type;\n      return {\n        userAgent: navigator2.userAgent,\n        windowWidth: innerWidth,\n        windowHeight: innerHeight,\n        orientationAngle: angle,\n        orientationType: type2\n      };\n    }\n    function getOrientation(_ref65) {\n      var screen = _ref65.screen;\n      return screen.orientation || screen.msOrientation || screen.mozOrientation;\n    }\n    function createFrameContext(frame, _ref66) {\n      var focusable = _ref66.focusable, page = _ref66.page;\n      return {\n        node: frame,\n        include: [],\n        exclude: [],\n        initiator: false,\n        focusable: focusable && frameFocusable(frame),\n        size: getBoundingSize(frame),\n        page: page\n      };\n    }\n    function frameFocusable(frame) {\n      var tabIndex = parse_tabindex_default(frame.getAttribute('tabindex'));\n      return tabIndex === null || tabIndex >= 0;\n    }\n    function getBoundingSize(domNode) {\n      var width = parseInt(domNode.getAttribute('width'), 10);\n      var height = parseInt(domNode.getAttribute('height'), 10);\n      if (isNaN(width) || isNaN(height)) {\n        var rect = domNode.getBoundingClientRect();\n        width = isNaN(width) ? rect.width : width;\n        height = isNaN(height) ? rect.height : height;\n      }\n      return {\n        width: width,\n        height: height\n      };\n    }\n    function normalizeContext(contextSpec) {\n      if (_isContextObject(contextSpec)) {\n        var msg = ' must be used inside include or exclude. It should not be on the same object.';\n        assert2(!_objectHasOwn(contextSpec, 'fromFrames'), 'fromFrames' + msg);\n        assert2(!_objectHasOwn(contextSpec, 'fromShadowDom'), 'fromShadowDom' + msg);\n      } else if (_isContextProp(contextSpec)) {\n        contextSpec = {\n          include: contextSpec,\n          exclude: []\n        };\n      } else {\n        return {\n          include: [ document ],\n          exclude: []\n        };\n      }\n      var include = normalizeContextList(contextSpec.include);\n      if (include.length === 0) {\n        include.push(document);\n      }\n      var exclude = normalizeContextList(contextSpec.exclude);\n      return {\n        include: include,\n        exclude: exclude\n      };\n    }\n    function normalizeContextList() {\n      var selectorList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var normalizedList = [];\n      if (!_isArrayLike(selectorList)) {\n        selectorList = [ selectorList ];\n      }\n      for (var _i25 = 0; _i25 < selectorList.length; _i25++) {\n        var normalizedSelector = normalizeContextSelector(selectorList[_i25]);\n        if (normalizedSelector) {\n          normalizedList.push(normalizedSelector);\n        }\n      }\n      return normalizedList;\n    }\n    function normalizeContextSelector(selector) {\n      if (selector instanceof window.Node) {\n        return selector;\n      }\n      if (typeof selector === 'string') {\n        return [ selector ];\n      }\n      if (_isLabelledFramesSelector(selector)) {\n        assertLabelledFrameSelector(selector);\n        selector = selector.fromFrames;\n      } else if (_isLabelledShadowDomSelector(selector)) {\n        selector = [ selector ];\n      }\n      return normalizeFrameSelectors(selector);\n    }\n    function normalizeFrameSelectors(frameSelectors) {\n      if (!Array.isArray(frameSelectors)) {\n        return;\n      }\n      var normalizedSelectors = [];\n      var _iterator11 = _createForOfIteratorHelper(frameSelectors), _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {\n          var selector = _step11.value;\n          if (_isLabelledShadowDomSelector(selector)) {\n            assertLabelledShadowDomSelector(selector);\n            selector = selector.fromShadowDom;\n          }\n          if (typeof selector !== 'string' && !isShadowSelector(selector)) {\n            return;\n          }\n          normalizedSelectors.push(selector);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      return normalizedSelectors;\n    }\n    function assertLabelledFrameSelector(selector) {\n      assert2(Array.isArray(selector.fromFrames), 'fromFrames property must be an array');\n      assert2(selector.fromFrames.every(function(fromFrameSelector) {\n        return !_objectHasOwn(fromFrameSelector, 'fromFrames');\n      }), 'Invalid context; fromFrames selector must be appended, rather than nested');\n      assert2(!_objectHasOwn(selector, 'fromShadowDom'), 'fromFrames and fromShadowDom cannot be used on the same object');\n    }\n    function assertLabelledShadowDomSelector(selector) {\n      assert2(Array.isArray(selector.fromShadowDom), 'fromShadowDom property must be an array');\n      assert2(selector.fromShadowDom.every(function(fromShadowDomSelector) {\n        return !_objectHasOwn(fromShadowDomSelector, 'fromFrames');\n      }), 'shadow selector must be inside fromFrame instead');\n      assert2(selector.fromShadowDom.every(function(fromShadowDomSelector) {\n        return !_objectHasOwn(fromShadowDomSelector, 'fromShadowDom');\n      }), 'fromShadowDom selector must be appended, rather than nested');\n    }\n    function isShadowSelector(selector) {\n      return Array.isArray(selector) && selector.every(function(str) {\n        return typeof str === 'string';\n      });\n    }\n    function assert2(bool, str) {\n      assert_default(bool, 'Invalid context; '.concat(str, '\\nSee: https://github.com/dequelabs/axe-core/blob/master/doc/context.md'));\n    }\n    function parseSelectorArray(context, type2) {\n      var result = [];\n      for (var _i26 = 0, l = context[type2].length; _i26 < l; _i26++) {\n        var item = context[type2][_i26];\n        if (item instanceof window.Node) {\n          if (item.documentElement instanceof window.Node) {\n            result.push(context.flatTree[0]);\n          } else {\n            result.push(get_node_from_tree_default(item));\n          }\n        } else if (item && item.length) {\n          if (item.length > 1) {\n            pushUniqueFrameSelector(context, type2, item);\n          } else {\n            var nodeList = _shadowSelectAll(item[0]);\n            result.push.apply(result, _toConsumableArray(nodeList.map(function(node) {\n              return get_node_from_tree_default(node);\n            })));\n          }\n        }\n      }\n      return result.filter(function(r) {\n        return r;\n      });\n    }\n    function pushUniqueFrameSelector(context, type2, selectorArray) {\n      context.frames = context.frames || [];\n      var frameSelector = selectorArray.shift();\n      var frames = _shadowSelectAll(frameSelector);\n      frames.forEach(function(frame) {\n        var frameContext = context.frames.find(function(result) {\n          return result.node === frame;\n        });\n        if (!frameContext) {\n          frameContext = createFrameContext(frame, context);\n          context.frames.push(frameContext);\n        }\n        frameContext[type2].push(selectorArray);\n      });\n    }\n    function Context(spec, flatTree) {\n      var _spec2, _spec3, _spec4, _spec5, _this5 = this;\n      spec = _clone(spec);\n      this.frames = [];\n      this.page = typeof ((_spec2 = spec) === null || _spec2 === void 0 ? void 0 : _spec2.page) === 'boolean' ? spec.page : void 0;\n      this.initiator = typeof ((_spec3 = spec) === null || _spec3 === void 0 ? void 0 : _spec3.initiator) === 'boolean' ? spec.initiator : true;\n      this.focusable = typeof ((_spec4 = spec) === null || _spec4 === void 0 ? void 0 : _spec4.focusable) === 'boolean' ? spec.focusable : true;\n      this.size = _typeof((_spec5 = spec) === null || _spec5 === void 0 ? void 0 : _spec5.size) === 'object' ? spec.size : {};\n      spec = normalizeContext(spec);\n      this.flatTree = flatTree !== null && flatTree !== void 0 ? flatTree : _getFlattenedTree(getRootNode2(spec));\n      this.exclude = spec.exclude;\n      this.include = spec.include;\n      this.include = parseSelectorArray(this, 'include');\n      this.exclude = parseSelectorArray(this, 'exclude');\n      _select('frame, iframe', this).forEach(function(frame) {\n        if (_isNodeInContext(frame, _this5)) {\n          pushUniqueFrame(_this5, frame.actualNode);\n        }\n      });\n      if (typeof this.page === 'undefined') {\n        this.page = isPageContext(this);\n        this.frames.forEach(function(frame) {\n          frame.page = _this5.page;\n        });\n      }\n      validateContext(this);\n      if (!Array.isArray(this.include)) {\n        this.include = Array.from(this.include);\n      }\n      this.include.sort(node_sorter_default);\n    }\n    function pushUniqueFrame(context, frame) {\n      if (!_isVisibleToScreenReaders(frame) || find_by_default(context.frames, 'node', frame)) {\n        return;\n      }\n      context.frames.push(createFrameContext(frame, context));\n    }\n    function isPageContext(_ref67) {\n      var include = _ref67.include;\n      return include.length === 1 && include[0].actualNode === document.documentElement;\n    }\n    function validateContext(context) {\n      if (context.include.length === 0 && context.frames.length === 0) {\n        var env = _respondable.isInFrame() ? 'frame' : 'page';\n        throw new Error('No elements found for include in ' + env + ' Context');\n      }\n    }\n    function getRootNode2(_ref68) {\n      var include = _ref68.include, exclude = _ref68.exclude;\n      var selectors = Array.from(include).concat(Array.from(exclude));\n      for (var _i27 = 0; _i27 < selectors.length; _i27++) {\n        var item = selectors[_i27];\n        if (item instanceof window.Element) {\n          return item.ownerDocument.documentElement;\n        }\n        if (item instanceof window.Document) {\n          return item.documentElement;\n        }\n      }\n      return document.documentElement;\n    }\n    function _getFrameContexts(context) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (options.iframes === false) {\n        return [];\n      }\n      var _Context = new Context(context), frames = _Context.frames;\n      return frames.map(function(_ref69) {\n        var node = _ref69.node, frameContext = _objectWithoutProperties(_ref69, _excluded14);\n        frameContext.initiator = false;\n        var frameSelector = _getAncestry(node);\n        return {\n          frameSelector: frameSelector,\n          frameContext: frameContext\n        };\n      });\n    }\n    function _getRule(ruleId) {\n      var rule = axe._audit.rules.find(function(_ref70) {\n        var id = _ref70.id;\n        return id === ruleId;\n      });\n      if (!rule) {\n        throw new Error('Cannot find rule by id: '.concat(ruleId));\n      }\n      return rule;\n    }\n    function getScroll(elm) {\n      var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var overflowX = elm.scrollWidth > elm.clientWidth + buffer;\n      var overflowY = elm.scrollHeight > elm.clientHeight + buffer;\n      if (!(overflowX || overflowY)) {\n        return;\n      }\n      var style = window.getComputedStyle(elm);\n      var scrollableX = isScrollable(style, 'overflow-x');\n      var scrollableY = isScrollable(style, 'overflow-y');\n      if (overflowX && scrollableX || overflowY && scrollableY) {\n        return {\n          elm: elm,\n          top: elm.scrollTop,\n          left: elm.scrollLeft\n        };\n      }\n    }\n    function isScrollable(style, prop) {\n      var overflowProp = style.getPropertyValue(prop);\n      return [ 'scroll', 'auto' ].includes(overflowProp);\n    }\n    var get_scroll_default = memoize_default(getScroll);\n    function getElmScrollRecursive(root) {\n      return Array.from(root.children || root.childNodes || []).reduce(function(scrolls, elm) {\n        var scroll = get_scroll_default(elm);\n        if (scroll) {\n          scrolls.push(scroll);\n        }\n        return scrolls.concat(getElmScrollRecursive(elm));\n      }, []);\n    }\n    function getScrollState() {\n      var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n      var root = win.document.documentElement;\n      var windowScroll = [ win.pageXOffset !== void 0 ? {\n        elm: win,\n        top: win.pageYOffset,\n        left: win.pageXOffset\n      } : {\n        elm: root,\n        top: root.scrollTop,\n        left: root.scrollLeft\n      } ];\n      return windowScroll.concat(getElmScrollRecursive(document.body));\n    }\n    var get_scroll_state_default = getScrollState;\n    function _getStandards() {\n      return _clone(standards_default);\n    }\n    function getStyleSheetFactory(dynamicDoc) {\n      if (!dynamicDoc) {\n        throw new Error('axe.utils.getStyleSheetFactory should be invoked with an argument');\n      }\n      return function(options) {\n        var data = options.data, _options$isCrossOrigi = options.isCrossOrigin, isCrossOrigin = _options$isCrossOrigi === void 0 ? false : _options$isCrossOrigi, shadowId = options.shadowId, root = options.root, priority = options.priority, _options$isLink = options.isLink, isLink = _options$isLink === void 0 ? false : _options$isLink;\n        var style = dynamicDoc.createElement('style');\n        if (isLink) {\n          var text = dynamicDoc.createTextNode('@import \"'.concat(data.href, '\"'));\n          style.appendChild(text);\n        } else {\n          style.appendChild(dynamicDoc.createTextNode(data));\n        }\n        dynamicDoc.head.appendChild(style);\n        return {\n          sheet: style.sheet,\n          isCrossOrigin: isCrossOrigin,\n          shadowId: shadowId,\n          root: root,\n          priority: priority\n        };\n      };\n    }\n    var get_stylesheet_factory_default = getStyleSheetFactory;\n    var styleSheet;\n    function injectStyle(style) {\n      if (styleSheet && styleSheet.parentNode) {\n        if (styleSheet.styleSheet === void 0) {\n          styleSheet.appendChild(document.createTextNode(style));\n        } else {\n          styleSheet.styleSheet.cssText += style;\n        }\n        return styleSheet;\n      }\n      if (!style) {\n        return;\n      }\n      var head = document.head || document.getElementsByTagName('head')[0];\n      styleSheet = document.createElement('style');\n      styleSheet.type = 'text/css';\n      if (styleSheet.styleSheet === void 0) {\n        styleSheet.appendChild(document.createTextNode(style));\n      } else {\n        styleSheet.styleSheet.cssText = style;\n      }\n      head.appendChild(styleSheet);\n      return styleSheet;\n    }\n    var inject_style_default = injectStyle;\n    function _isArrayLike(arr) {\n      return !!arr && _typeof(arr) === 'object' && typeof arr.length === 'number' && arr instanceof window.Node === false;\n    }\n    function _objectHasOwn(obj, prop) {\n      if (!obj || _typeof(obj) !== 'object') {\n        return false;\n      }\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n    function _isContextSpec(contextSpec) {\n      return _isContextObject(contextSpec) || _isContextProp(contextSpec);\n    }\n    function _isContextObject(contextSpec) {\n      return [ 'include', 'exclude' ].some(function(prop) {\n        return _objectHasOwn(contextSpec, prop) && _isContextProp(contextSpec[prop]);\n      });\n    }\n    function _isContextProp(contextList) {\n      return typeof contextList === 'string' || contextList instanceof window.Node || _isLabelledFramesSelector(contextList) || _isLabelledShadowDomSelector(contextList) || _isArrayLike(contextList);\n    }\n    function _isLabelledFramesSelector(selector) {\n      return _objectHasOwn(selector, 'fromFrames');\n    }\n    function _isLabelledShadowDomSelector(selector) {\n      return _objectHasOwn(selector, 'fromShadowDom');\n    }\n    function isHidden(el, recursed) {\n      var node = get_node_from_tree_default(el);\n      if (el.nodeType === 9) {\n        return false;\n      }\n      if (el.nodeType === 11) {\n        el = el.host;\n      }\n      if (node && node._isHidden !== null) {\n        return node._isHidden;\n      }\n      var style = window.getComputedStyle(el, null);\n      if (!style || !el.parentNode || style.getPropertyValue('display') === 'none' || !recursed && style.getPropertyValue('visibility') === 'hidden' || el.getAttribute('aria-hidden') === 'true') {\n        return true;\n      }\n      var parent = el.assignedSlot ? el.assignedSlot : el.parentNode;\n      var hidden = isHidden(parent, true);\n      if (node) {\n        node._isHidden = hidden;\n      }\n      return hidden;\n    }\n    var is_hidden_default = isHidden;\n    function isHtmlElement(node) {\n      var _node$props$nodeName, _node$props;\n      var nodeName2 = (_node$props$nodeName = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.nodeName) !== null && _node$props$nodeName !== void 0 ? _node$props$nodeName : node.nodeName.toLowerCase();\n      if (node.namespaceURI === 'http://www.w3.org/2000/svg') {\n        return false;\n      }\n      return !!standards_default.htmlElms[nodeName2];\n    }\n    var is_html_element_default = isHtmlElement;\n    function _isNodeInContext(node, _ref71) {\n      var _ref71$include = _ref71.include, include = _ref71$include === void 0 ? [] : _ref71$include, _ref71$exclude = _ref71.exclude, exclude = _ref71$exclude === void 0 ? [] : _ref71$exclude;\n      var filterInclude = include.filter(function(candidate) {\n        return _contains(candidate, node);\n      });\n      if (filterInclude.length === 0) {\n        return false;\n      }\n      var filterExcluded = exclude.filter(function(candidate) {\n        return _contains(candidate, node);\n      });\n      if (filterExcluded.length === 0) {\n        return true;\n      }\n      var deepestInclude = getDeepest(filterInclude);\n      var deepestExclude = getDeepest(filterExcluded);\n      return _contains(deepestExclude, deepestInclude);\n    }\n    function getDeepest(collection) {\n      var deepest;\n      var _iterator12 = _createForOfIteratorHelper(collection), _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {\n          var node = _step12.value;\n          if (!deepest || !_contains(node, deepest)) {\n            deepest = node;\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      return deepest;\n    }\n    function _matchAncestry(ancestryA, ancestryB) {\n      if (ancestryA.length !== ancestryB.length) {\n        return false;\n      }\n      return ancestryA.every(function(selectorA, ancestorIndex) {\n        var selectorB = ancestryB[ancestorIndex];\n        if (!Array.isArray(selectorA)) {\n          return selectorA === selectorB;\n        }\n        if (selectorA.length !== selectorB.length) {\n          return false;\n        }\n        return selectorA.every(function(str, selectorIndex) {\n          return selectorB[selectorIndex] === str;\n        });\n      });\n    }\n    function nodeSorter(nodeA, nodeB) {\n      nodeA = nodeA.actualNode || nodeA;\n      nodeB = nodeB.actualNode || nodeB;\n      if (nodeA === nodeB) {\n        return 0;\n      }\n      if (nodeA.compareDocumentPosition(nodeB) & 4) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n    var node_sorter_default = nodeSorter;\n    function _nodeLookup(node) {\n      if (node instanceof abstract_virtual_node_default) {\n        return {\n          vNode: node,\n          domNode: node.actualNode\n        };\n      }\n      return {\n        vNode: get_node_from_tree_default(node),\n        domNode: node\n      };\n    }\n    function parseSameOriginStylesheet(sheet, options, priority, importedUrls) {\n      var isCrossOrigin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var rules = Array.from(sheet.cssRules);\n      if (!rules) {\n        return Promise.resolve();\n      }\n      var cssImportRules = rules.filter(function(r) {\n        return r.type === 3;\n      });\n      if (!cssImportRules.length) {\n        return Promise.resolve({\n          isCrossOrigin: isCrossOrigin,\n          priority: priority,\n          root: options.rootNode,\n          shadowId: options.shadowId,\n          sheet: sheet\n        });\n      }\n      var cssImportUrlsNotAlreadyImported = cssImportRules.filter(function(rule) {\n        return rule.href;\n      }).map(function(rule) {\n        return rule.href;\n      }).filter(function(url) {\n        return !importedUrls.includes(url);\n      });\n      var promises = cssImportUrlsNotAlreadyImported.map(function(importUrl, cssRuleIndex) {\n        var newPriority = [].concat(_toConsumableArray(priority), [ cssRuleIndex ]);\n        var isCrossOriginRequest = /^https?:\\/\\/|^\\/\\//i.test(importUrl);\n        return parse_crossorigin_stylesheet_default(importUrl, options, newPriority, importedUrls, isCrossOriginRequest);\n      });\n      var nonImportCSSRules = rules.filter(function(r) {\n        return r.type !== 3;\n      });\n      if (!nonImportCSSRules.length) {\n        return Promise.all(promises);\n      }\n      promises.push(Promise.resolve(options.convertDataToStylesheet({\n        data: nonImportCSSRules.map(function(rule) {\n          return rule.cssText;\n        }).join(),\n        isCrossOrigin: isCrossOrigin,\n        priority: priority,\n        root: options.rootNode,\n        shadowId: options.shadowId\n      })));\n      return Promise.all(promises);\n    }\n    var parse_sameorigin_stylesheet_default = parseSameOriginStylesheet;\n    function parseStylesheet(sheet, options, priority, importedUrls) {\n      var isCrossOrigin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var isSameOrigin = isSameOriginStylesheet(sheet);\n      if (isSameOrigin) {\n        return parse_sameorigin_stylesheet_default(sheet, options, priority, importedUrls, isCrossOrigin);\n      }\n      return parse_crossorigin_stylesheet_default(sheet.href, options, priority, importedUrls, true);\n    }\n    function isSameOriginStylesheet(sheet) {\n      try {\n        var rules = sheet.cssRules;\n        if (!rules && sheet.href) {\n          return false;\n        }\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    var parse_stylesheet_default = parseStylesheet;\n    function parseCrossOriginStylesheet(url, options, priority, importedUrls, isCrossOrigin) {\n      importedUrls.push(url);\n      return new Promise(function(resolve, reject) {\n        var request = new window.XMLHttpRequest();\n        request.open('GET', url);\n        request.timeout = constants_default.preload.timeout;\n        request.addEventListener('error', reject);\n        request.addEventListener('timeout', reject);\n        request.addEventListener('loadend', function(event) {\n          if (event.loaded && request.responseText) {\n            return resolve(request.responseText);\n          }\n          reject(request.responseText);\n        });\n        request.send();\n      }).then(function(data) {\n        var result = options.convertDataToStylesheet({\n          data: data,\n          isCrossOrigin: isCrossOrigin,\n          priority: priority,\n          root: options.rootNode,\n          shadowId: options.shadowId\n        });\n        return parse_stylesheet_default(result.sheet, options, priority, importedUrls, result.isCrossOrigin);\n      });\n    }\n    var parse_crossorigin_stylesheet_default = parseCrossOriginStylesheet;\n    function parseTabindex(value) {\n      if (typeof value !== 'string') {\n        return null;\n      }\n      var match = value.trim().match(/^([-+]?\\d+)/);\n      if (match) {\n        return Number(match[1]);\n      }\n      return null;\n    }\n    var parse_tabindex_default = parseTabindex;\n    var performanceTimer = function() {\n      function now() {\n        if (window.performance && window.performance) {\n          return window.performance.now();\n        }\n      }\n      var originalTime = null;\n      var lastRecordedTime = now();\n      return {\n        start: function start() {\n          this.mark('mark_axe_start');\n        },\n        end: function end() {\n          this.mark('mark_axe_end');\n          this.measure('axe', 'mark_axe_start', 'mark_axe_end');\n          this.logMeasures('axe');\n        },\n        auditStart: function auditStart() {\n          this.mark('mark_audit_start');\n        },\n        auditEnd: function auditEnd() {\n          this.mark('mark_audit_end');\n          this.measure('audit_start_to_end', 'mark_audit_start', 'mark_audit_end');\n          this.logMeasures();\n        },\n        mark: function mark(markName) {\n          if (window.performance && window.performance.mark !== void 0) {\n            window.performance.mark(markName);\n          }\n        },\n        measure: function measure(measureName, startMark, endMark) {\n          if (window.performance && window.performance.measure !== void 0) {\n            window.performance.measure(measureName, startMark, endMark);\n          }\n        },\n        logMeasures: function logMeasures(measureName) {\n          function logMeasure(req) {\n            log_default('Measure ' + req.name + ' took ' + req.duration + 'ms');\n          }\n          if (window.performance && window.performance.getEntriesByType !== void 0) {\n            var axeStart = window.performance.getEntriesByName('mark_axe_start')[0];\n            var measures = window.performance.getEntriesByType('measure').filter(function(measure) {\n              return measure.startTime >= axeStart.startTime;\n            });\n            for (var _i28 = 0; _i28 < measures.length; ++_i28) {\n              var req = measures[_i28];\n              if (req.name === measureName) {\n                logMeasure(req);\n                return;\n              }\n              logMeasure(req);\n            }\n          }\n        },\n        timeElapsed: function timeElapsed() {\n          return now() - lastRecordedTime;\n        },\n        reset: function reset() {\n          if (!originalTime) {\n            originalTime = now();\n          }\n          lastRecordedTime = now();\n        }\n      };\n    }();\n    var performance_timer_default = performanceTimer;\n    function _pollyfillElementsFromPoint() {\n      if (document.elementsFromPoint) {\n        return document.elementsFromPoint;\n      }\n      if (document.msElementsFromPoint) {\n        return document.msElementsFromPoint;\n      }\n      var usePointer = function() {\n        var element = document.createElement('x');\n        element.style.cssText = 'pointer-events:auto';\n        return element.style.pointerEvents === 'auto';\n      }();\n      var cssProp = usePointer ? 'pointer-events' : 'visibility';\n      var cssDisableVal = usePointer ? 'none' : 'hidden';\n      var style = document.createElement('style');\n      style.innerHTML = usePointer ? '* { pointer-events: all }' : '* { visibility: visible }';\n      return function(x, y) {\n        var current, i, d2;\n        var elements = [];\n        var previousPointerEvents = [];\n        document.head.appendChild(style);\n        while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1) {\n          elements.push(current);\n          previousPointerEvents.push({\n            value: current.style.getPropertyValue(cssProp),\n            priority: current.style.getPropertyPriority(cssProp)\n          });\n          current.style.setProperty(cssProp, cssDisableVal, 'important');\n        }\n        if (elements.indexOf(document.documentElement) < elements.length - 1) {\n          elements.splice(elements.indexOf(document.documentElement), 1);\n          elements.push(document.documentElement);\n        }\n        for (i = previousPointerEvents.length; !!(d2 = previousPointerEvents[--i]); ) {\n          elements[i].style.setProperty(cssProp, d2.value ? d2.value : '', d2.priority);\n        }\n        document.head.removeChild(style);\n        return elements;\n      };\n    }\n    if (typeof window.addEventListener === 'function') {\n      document.elementsFromPoint = _pollyfillElementsFromPoint();\n    }\n    function uniqueArray(arr1, arr2) {\n      return arr1.concat(arr2).filter(function(elem, pos, arr) {\n        return arr.indexOf(elem) === pos;\n      });\n    }\n    var unique_array_default = uniqueArray;\n    function createLocalVariables(vNodes, anyLevel, thisLevel, parentShadowId, recycledLocalVariable) {\n      var retVal = recycledLocalVariable || {};\n      retVal.vNodes = vNodes;\n      retVal.vNodesIndex = 0;\n      retVal.anyLevel = anyLevel;\n      retVal.thisLevel = thisLevel;\n      retVal.parentShadowId = parentShadowId;\n      return retVal;\n    }\n    function matchExpressions(domTree, expressions, filter) {\n      var recycledLocalVariables = cache_default.get('qsa.recycledLocalVariables', function() {\n        return [];\n      });\n      var stack = [];\n      var vNodes = Array.isArray(domTree) ? domTree : [ domTree ];\n      var currentLevel = createLocalVariables(vNodes, expressions, null, domTree[0].shadowId, recycledLocalVariables.pop());\n      var result = [];\n      while (currentLevel.vNodesIndex < currentLevel.vNodes.length) {\n        var _currentLevel$anyLeve, _currentLevel$thisLev;\n        var vNode = currentLevel.vNodes[currentLevel.vNodesIndex++];\n        var childOnly = null;\n        var childAny = null;\n        var combinedLength = (((_currentLevel$anyLeve = currentLevel.anyLevel) === null || _currentLevel$anyLeve === void 0 ? void 0 : _currentLevel$anyLeve.length) || 0) + (((_currentLevel$thisLev = currentLevel.thisLevel) === null || _currentLevel$thisLev === void 0 ? void 0 : _currentLevel$thisLev.length) || 0);\n        var added = false;\n        for (var _i29 = 0; _i29 < combinedLength; _i29++) {\n          var _currentLevel$anyLeve2, _currentLevel$anyLeve3, _currentLevel$anyLeve4;\n          var exp = _i29 < (((_currentLevel$anyLeve2 = currentLevel.anyLevel) === null || _currentLevel$anyLeve2 === void 0 ? void 0 : _currentLevel$anyLeve2.length) || 0) ? currentLevel.anyLevel[_i29] : currentLevel.thisLevel[_i29 - (((_currentLevel$anyLeve3 = currentLevel.anyLevel) === null || _currentLevel$anyLeve3 === void 0 ? void 0 : _currentLevel$anyLeve3.length) || 0)];\n          if ((!exp[0].id || vNode.shadowId === currentLevel.parentShadowId) && _matchesExpression(vNode, exp[0])) {\n            if (exp.length === 1) {\n              if (!added && (!filter || filter(vNode))) {\n                result.push(vNode);\n                added = true;\n              }\n            } else {\n              var rest = exp.slice(1);\n              if ([ ' ', '>' ].includes(rest[0].combinator) === false) {\n                throw new Error('axe.utils.querySelectorAll does not support the combinator: ' + exp[1].combinator);\n              }\n              if (rest[0].combinator === '>') {\n                (childOnly = childOnly || []).push(rest);\n              } else {\n                (childAny = childAny || []).push(rest);\n              }\n            }\n          }\n          if ((!exp[0].id || vNode.shadowId === currentLevel.parentShadowId) && (_currentLevel$anyLeve4 = currentLevel.anyLevel) !== null && _currentLevel$anyLeve4 !== void 0 && _currentLevel$anyLeve4.includes(exp)) {\n            (childAny = childAny || []).push(exp);\n          }\n        }\n        if (vNode.children && vNode.children.length) {\n          stack.push(currentLevel);\n          currentLevel = createLocalVariables(vNode.children, childAny, childOnly, vNode.shadowId, recycledLocalVariables.pop());\n        }\n        while (currentLevel.vNodesIndex === currentLevel.vNodes.length && stack.length) {\n          recycledLocalVariables.push(currentLevel);\n          currentLevel = stack.pop();\n        }\n      }\n      return result;\n    }\n    function querySelectorAllFilter(domTree, selector, filter) {\n      domTree = Array.isArray(domTree) ? domTree : [ domTree ];\n      var expressions = _convertSelector(selector);\n      var nodes = getNodesMatchingExpression(domTree, expressions, filter);\n      if (nodes) {\n        return nodes;\n      }\n      return matchExpressions(domTree, expressions, filter);\n    }\n    var query_selector_all_filter_default = querySelectorAllFilter;\n    function preloadCssom(_ref72) {\n      var _ref72$treeRoot = _ref72.treeRoot, treeRoot = _ref72$treeRoot === void 0 ? axe._tree[0] : _ref72$treeRoot;\n      var rootNodes = getAllRootNodesInTree(treeRoot);\n      if (!rootNodes.length) {\n        return Promise.resolve();\n      }\n      var dynamicDoc = document.implementation.createHTMLDocument('Dynamic document for loading cssom');\n      var convertDataToStylesheet = get_stylesheet_factory_default(dynamicDoc);\n      return getCssomForAllRootNodes(rootNodes, convertDataToStylesheet).then(function(assets) {\n        return flattenAssets(assets);\n      });\n    }\n    var preload_cssom_default = preloadCssom;\n    function getAllRootNodesInTree(tree) {\n      var ids = [];\n      var rootNodes = query_selector_all_filter_default(tree, '*', function(node) {\n        if (ids.includes(node.shadowId)) {\n          return false;\n        }\n        ids.push(node.shadowId);\n        return true;\n      }).map(function(node) {\n        return {\n          shadowId: node.shadowId,\n          rootNode: get_root_node_default(node.actualNode)\n        };\n      });\n      return unique_array_default(rootNodes, []);\n    }\n    function getCssomForAllRootNodes(rootNodes, convertDataToStylesheet) {\n      var promises = [];\n      rootNodes.forEach(function(_ref73, index) {\n        var rootNode = _ref73.rootNode, shadowId = _ref73.shadowId;\n        var sheets = getStylesheetsOfRootNode(rootNode, shadowId, convertDataToStylesheet);\n        if (!sheets) {\n          return Promise.all(promises);\n        }\n        var rootIndex = index + 1;\n        var parseOptions = {\n          rootNode: rootNode,\n          shadowId: shadowId,\n          convertDataToStylesheet: convertDataToStylesheet,\n          rootIndex: rootIndex\n        };\n        var importedUrls = [];\n        var p2 = Promise.all(sheets.map(function(sheet, sheetIndex) {\n          var priority = [ rootIndex, sheetIndex ];\n          return parse_stylesheet_default(sheet, parseOptions, priority, importedUrls);\n        }));\n        promises.push(p2);\n      });\n      return Promise.all(promises);\n    }\n    function flattenAssets(assets) {\n      return assets.reduce(function(acc, val) {\n        return Array.isArray(val) ? acc.concat(flattenAssets(val)) : acc.concat(val);\n      }, []);\n    }\n    function getStylesheetsOfRootNode(rootNode, shadowId, convertDataToStylesheet) {\n      var sheets;\n      if (rootNode.nodeType === 11 && shadowId) {\n        sheets = getStylesheetsFromDocumentFragment(rootNode, convertDataToStylesheet);\n      } else {\n        sheets = getStylesheetsFromDocument(rootNode);\n      }\n      return filterStylesheetsWithSameHref(sheets);\n    }\n    function getStylesheetsFromDocumentFragment(rootNode, convertDataToStylesheet) {\n      return Array.from(rootNode.children).filter(filerStyleAndLinkAttributesInDocumentFragment).reduce(function(out, node) {\n        var nodeName2 = node.nodeName.toUpperCase();\n        var data = nodeName2 === 'STYLE' ? node.textContent : node;\n        var isLink = nodeName2 === 'LINK';\n        var stylesheet = convertDataToStylesheet({\n          data: data,\n          isLink: isLink,\n          root: rootNode\n        });\n        if (stylesheet.sheet) {\n          out.push(stylesheet.sheet);\n        }\n        return out;\n      }, []);\n    }\n    function getStylesheetsFromDocument(rootNode) {\n      return Array.from(rootNode.styleSheets).filter(function(sheet) {\n        if (!sheet.media) {\n          return false;\n        }\n        return filterMediaIsPrint(sheet.media.mediaText);\n      });\n    }\n    function filerStyleAndLinkAttributesInDocumentFragment(node) {\n      var nodeName2 = node.nodeName.toUpperCase();\n      var linkHref = node.getAttribute('href');\n      var linkRel = node.getAttribute('rel');\n      var isLink = nodeName2 === 'LINK' && linkHref && linkRel && node.rel.toUpperCase().includes('STYLESHEET');\n      var isStyle = nodeName2 === 'STYLE';\n      return isStyle || isLink && filterMediaIsPrint(node.media);\n    }\n    function filterMediaIsPrint(media) {\n      if (!media) {\n        return true;\n      }\n      return !media.toUpperCase().includes('PRINT');\n    }\n    function filterStylesheetsWithSameHref(sheets) {\n      var hrefs = [];\n      return sheets.filter(function(sheet) {\n        if (!sheet.href) {\n          return true;\n        }\n        if (hrefs.includes(sheet.href)) {\n          return false;\n        }\n        hrefs.push(sheet.href);\n        return true;\n      });\n    }\n    function preloadMedia(_ref74) {\n      var _ref74$treeRoot = _ref74.treeRoot, treeRoot = _ref74$treeRoot === void 0 ? axe._tree[0] : _ref74$treeRoot;\n      var mediaVirtualNodes = query_selector_all_filter_default(treeRoot, 'video[autoplay], audio[autoplay]', function(_ref75) {\n        var actualNode = _ref75.actualNode;\n        if (actualNode.preload === 'none' && actualNode.readyState === 0 && actualNode.networkState !== actualNode.NETWORK_LOADING) {\n          return false;\n        }\n        if (actualNode.hasAttribute('paused') || actualNode.hasAttribute('muted')) {\n          return false;\n        }\n        if (actualNode.hasAttribute('src')) {\n          return !!actualNode.getAttribute('src');\n        }\n        var sourceWithSrc = Array.from(actualNode.getElementsByTagName('source')).filter(function(source) {\n          return !!source.getAttribute('src');\n        });\n        if (sourceWithSrc.length <= 0) {\n          return false;\n        }\n        return true;\n      });\n      return Promise.all(mediaVirtualNodes.map(function(_ref76) {\n        var actualNode = _ref76.actualNode;\n        return isMediaElementReady(actualNode);\n      }));\n    }\n    var preload_media_default = preloadMedia;\n    function isMediaElementReady(elm) {\n      return new Promise(function(resolve) {\n        if (elm.readyState > 0) {\n          resolve(elm);\n        }\n        function onMediaReady() {\n          elm.removeEventListener('loadedmetadata', onMediaReady);\n          resolve(elm);\n        }\n        elm.addEventListener('loadedmetadata', onMediaReady);\n      });\n    }\n    function _preload(options) {\n      var preloadFunctionsMap = {\n        cssom: preload_cssom_default,\n        media: preload_media_default\n      };\n      if (!_shouldPreload(options)) {\n        return Promise.resolve();\n      }\n      return new Promise(function(resolve, reject) {\n        var _getPreloadConfig2 = _getPreloadConfig(options), assets = _getPreloadConfig2.assets, timeout = _getPreloadConfig2.timeout;\n        var preloadTimeout = setTimeout(function() {\n          return reject(new Error('Preload assets timed out.'));\n        }, timeout);\n        Promise.all(assets.map(function(asset) {\n          return preloadFunctionsMap[asset](options).then(function(results) {\n            return _defineProperty({}, asset, results);\n          });\n        })).then(function(results) {\n          var preloadAssets = results.reduce(function(out, result) {\n            return _extends({}, out, result);\n          }, {});\n          clearTimeout(preloadTimeout);\n          resolve(preloadAssets);\n        })['catch'](function(err2) {\n          clearTimeout(preloadTimeout);\n          reject(err2);\n        });\n      });\n    }\n    function isValidPreloadObject(preloadObj) {\n      return _typeof(preloadObj) === 'object' && Array.isArray(preloadObj.assets);\n    }\n    function _shouldPreload(options) {\n      if (!options || options.preload === void 0 || options.preload === null) {\n        return true;\n      }\n      if (typeof options.preload === 'boolean') {\n        return options.preload;\n      }\n      return isValidPreloadObject(options.preload);\n    }\n    function _getPreloadConfig(options) {\n      var _constants_default$pr = constants_default.preload, assets = _constants_default$pr.assets, timeout = _constants_default$pr.timeout;\n      var config = {\n        assets: assets,\n        timeout: timeout\n      };\n      if (!options.preload) {\n        return config;\n      }\n      if (typeof options.preload === 'boolean') {\n        return config;\n      }\n      var areRequestedAssetsValid = options.preload.assets.every(function(a2) {\n        return assets.includes(a2.toLowerCase());\n      });\n      if (!areRequestedAssetsValid) {\n        throw new Error('Requested assets, not supported. Supported assets are: '.concat(assets.join(', '), '.'));\n      }\n      config.assets = unique_array_default(options.preload.assets.map(function(a2) {\n        return a2.toLowerCase();\n      }), []);\n      if (options.preload.timeout && typeof options.preload.timeout === 'number' && !isNaN(options.preload.timeout)) {\n        config.timeout = options.preload.timeout;\n      }\n      return config;\n    }\n    function _publishMetaData(ruleResult) {\n      var checksData = axe._audit.data.checks || {};\n      var rulesData = axe._audit.data.rules || {};\n      var rule = find_by_default(axe._audit.rules, 'id', ruleResult.id) || {};\n      ruleResult.tags = _clone(rule.tags || []);\n      var shouldBeTrue = extender(checksData, true, rule);\n      var shouldBeFalse = extender(checksData, false, rule);\n      ruleResult.nodes.forEach(function(detail) {\n        detail.any.forEach(shouldBeTrue);\n        detail.all.forEach(shouldBeTrue);\n        detail.none.forEach(shouldBeFalse);\n      });\n      extend_meta_data_default(ruleResult, _clone(rulesData[ruleResult.id] || {}));\n    }\n    function getIncompleteReason(checkData, messages) {\n      function getDefaultMsg(message) {\n        if (message.incomplete && message.incomplete['default']) {\n          return message.incomplete['default'];\n        } else {\n          return incompleteFallbackMessage();\n        }\n      }\n      if (checkData && checkData.missingData) {\n        try {\n          var msg = messages.incomplete[checkData.missingData[0].reason];\n          if (!msg) {\n            throw new Error();\n          }\n          return msg;\n        } catch (_unused5) {\n          if (typeof checkData.missingData === 'string') {\n            return messages.incomplete[checkData.missingData];\n          } else {\n            return getDefaultMsg(messages);\n          }\n        }\n      } else if (checkData && checkData.messageKey) {\n        return messages.incomplete[checkData.messageKey];\n      } else {\n        return getDefaultMsg(messages);\n      }\n    }\n    function extender(checksData, shouldBeTrue, rule) {\n      return function(check) {\n        var sourceData = checksData[check.id] || {};\n        var messages = sourceData.messages || {};\n        var data = Object.assign({}, sourceData);\n        delete data.messages;\n        if (!rule.reviewOnFail && check.result === void 0) {\n          if (_typeof(messages.incomplete) === 'object' && !Array.isArray(check.data)) {\n            data.message = getIncompleteReason(check.data, messages);\n          }\n          if (!data.message) {\n            data.message = messages.incomplete;\n          }\n        } else {\n          data.message = check.result === shouldBeTrue ? messages.pass : messages.fail;\n        }\n        if (typeof data.message !== 'function') {\n          data.message = process_message_default(data.message, check.data);\n        }\n        extend_meta_data_default(check, data);\n      };\n    }\n    function querySelectorAll(domTree, selector) {\n      return query_selector_all_filter_default(domTree, selector);\n    }\n    var query_selector_all_default = querySelectorAll;\n    function matchTags(rule, runOnly) {\n      var include, exclude;\n      var defaultExclude = axe._audit && axe._audit.tagExclude ? axe._audit.tagExclude : [];\n      if (runOnly.hasOwnProperty('include') || runOnly.hasOwnProperty('exclude')) {\n        include = runOnly.include || [];\n        include = Array.isArray(include) ? include : [ include ];\n        exclude = runOnly.exclude || [];\n        exclude = Array.isArray(exclude) ? exclude : [ exclude ];\n        exclude = exclude.concat(defaultExclude.filter(function(tag) {\n          return include.indexOf(tag) === -1;\n        }));\n      } else {\n        include = Array.isArray(runOnly) ? runOnly : [ runOnly ];\n        exclude = defaultExclude.filter(function(tag) {\n          return include.indexOf(tag) === -1;\n        });\n      }\n      var matching = include.some(function(tag) {\n        return rule.tags.indexOf(tag) !== -1;\n      });\n      if (matching || include.length === 0 && rule.enabled !== false) {\n        return exclude.every(function(tag) {\n          return rule.tags.indexOf(tag) === -1;\n        });\n      } else {\n        return false;\n      }\n    }\n    function ruleShouldRun(rule, context, options) {\n      var runOnly = options.runOnly || {};\n      var ruleOptions = (options.rules || {})[rule.id];\n      if (rule.pageLevel && !context.page) {\n        return false;\n      } else if (runOnly.type === 'rule') {\n        return runOnly.values.indexOf(rule.id) !== -1;\n      } else if (ruleOptions && typeof ruleOptions.enabled === 'boolean') {\n        return ruleOptions.enabled;\n      } else if (runOnly.type === 'tag' && runOnly.values) {\n        return matchTags(rule, runOnly.values);\n      } else {\n        return matchTags(rule, []);\n      }\n    }\n    var rule_should_run_default = ruleShouldRun;\n    function _filterHtmlAttrs(element, filterAttrs) {\n      if (!filterAttrs) {\n        return element;\n      }\n      var node = element.cloneNode(false);\n      var attributes2 = get_node_attributes_default(node);\n      if (node.nodeType === 1) {\n        var outerHTML = node.outerHTML;\n        node = cache_default.get(outerHTML, function() {\n          return setNodeAttributes(node, attributes2, element, filterAttrs);\n        });\n      } else {\n        node = setNodeAttributes(node, attributes2, element, filterAttrs);\n      }\n      Array.from(element.childNodes).forEach(function(child) {\n        node.appendChild(_filterHtmlAttrs(child, filterAttrs));\n      });\n      return node;\n    }\n    function setNodeAttributes(node, attributes2, element, filterAttrs) {\n      if (!attributes2) {\n        return node;\n      }\n      node = document.createElement(node.nodeName);\n      Array.from(attributes2).forEach(function(attr) {\n        if (!attributeMatches(element, attr.name, filterAttrs)) {\n          node.setAttribute(attr.name, attr.value);\n        }\n      });\n      return node;\n    }\n    function attributeMatches(node, attrName, filterAttrs) {\n      if (typeof filterAttrs[attrName] === 'undefined') {\n        return false;\n      }\n      if (filterAttrs[attrName] === true) {\n        return true;\n      }\n      return element_matches_default(node, filterAttrs[attrName]);\n    }\n    function _select(selector, context) {\n      var result = [];\n      var candidate;\n      if (axe._selectCache) {\n        for (var j = 0, l = axe._selectCache.length; j < l; j++) {\n          var item = axe._selectCache[j];\n          if (item.selector === selector) {\n            return item.result;\n          }\n        }\n      }\n      var outerIncludes = getOuterIncludes(context.include);\n      var isInContext = getContextFilter(context);\n      for (var _i30 = 0; _i30 < outerIncludes.length; _i30++) {\n        candidate = outerIncludes[_i30];\n        var nodes = query_selector_all_filter_default(candidate, selector, isInContext);\n        result = mergeArrayUniques(result, nodes);\n      }\n      if (axe._selectCache) {\n        axe._selectCache.push({\n          selector: selector,\n          result: result\n        });\n      }\n      return result;\n    }\n    function getOuterIncludes(includes) {\n      return includes.reduce(function(res, el) {\n        if (!res.length || !_contains(res[res.length - 1], el)) {\n          res.push(el);\n        }\n        return res;\n      }, []);\n    }\n    function getContextFilter(context) {\n      if (!context.exclude || context.exclude.length === 0) {\n        return null;\n      }\n      return function(node) {\n        return _isNodeInContext(node, context);\n      };\n    }\n    function mergeArrayUniques(arr1, arr2) {\n      if (arr1.length === 0) {\n        return arr2;\n      }\n      if (arr1.length < arr2.length) {\n        var temp = arr1;\n        arr1 = arr2;\n        arr2 = temp;\n      }\n      for (var _i31 = 0, l = arr2.length; _i31 < l; _i31++) {\n        if (!arr1.includes(arr2[_i31])) {\n          arr1.push(arr2[_i31]);\n        }\n      }\n      return arr1;\n    }\n    function setScroll(elm, top, left) {\n      if (elm === window) {\n        return elm.scroll(left, top);\n      } else {\n        elm.scrollTop = top;\n        elm.scrollLeft = left;\n      }\n    }\n    function setScrollState(scrollState) {\n      scrollState.forEach(function(_ref78) {\n        var elm = _ref78.elm, top = _ref78.top, left = _ref78.left;\n        return setScroll(elm, top, left);\n      });\n    }\n    var set_scroll_state_default = setScrollState;\n    function _shadowSelect(selectors) {\n      var selectorArr = Array.isArray(selectors) ? _toConsumableArray(selectors) : [ selectors ];\n      return selectRecursive(selectorArr, document);\n    }\n    function selectRecursive(selectors, doc) {\n      var selectorStr = selectors.shift();\n      var elm = selectorStr ? doc.querySelector(selectorStr) : null;\n      if (selectors.length === 0) {\n        return elm;\n      }\n      if (!(elm !== null && elm !== void 0 && elm.shadowRoot)) {\n        return null;\n      }\n      return selectRecursive(selectors, elm.shadowRoot);\n    }\n    function _shadowSelectAll(selectors) {\n      var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n      var selectorArr = Array.isArray(selectors) ? _toConsumableArray(selectors) : [ selectors ];\n      if (selectors.length === 0) {\n        return [];\n      }\n      return selectAllRecursive(selectorArr, doc);\n    }\n    function selectAllRecursive(_ref79, doc) {\n      var _ref80 = _toArray(_ref79), selectorStr = _ref80[0], restSelector = _ref80.slice(1);\n      var elms = doc.querySelectorAll(selectorStr);\n      if (restSelector.length === 0) {\n        return Array.from(elms);\n      }\n      var selected = [];\n      var _iterator13 = _createForOfIteratorHelper(elms), _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {\n          var elm = _step13.value;\n          if (elm !== null && elm !== void 0 && elm.shadowRoot) {\n            selected.push.apply(selected, _toConsumableArray(selectAllRecursive(restSelector, elm.shadowRoot)));\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      return selected;\n    }\n    function validInputTypes() {\n      return [ 'hidden', 'text', 'search', 'tel', 'url', 'email', 'password', 'date', 'month', 'week', 'time', 'datetime-local', 'number', 'range', 'color', 'checkbox', 'radio', 'file', 'submit', 'image', 'reset', 'button' ];\n    }\n    var valid_input_type_default = validInputTypes;\n    var langs = [ , [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , , , , , 1, 1, 1, 1, , , 1, 1, 1, , 1, , 1, , 1, 1 ], [ 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, , , 1, 1, 1, , , 1, 1, 1, , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , , , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, , , , , , 1, , 1, , , , , 1, , 1, , , , 1, 1, , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, , , 1, , , , , 1, 1, 1, , 1, , 1, , 1, , , , , , 1 ], [ 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, , 1, , 1, , , , , 1, , 1, 1, 1, 1, 1, , , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , 1, , 1, , , , 1, 1, 1, , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ 1, 1, 1, 1, 1, , , 1, , , 1, , , 1, 1, 1, , , , , 1, , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, , 1, 1, 1, , 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, , , 1, 1, , , , , , 1, 1 ], [ 1, 1, 1, , , , , 1, , , , 1, 1, , 1, , , , , , 1, , , , , 1 ], [ , 1, , , 1, , , 1, , , , , , 1 ], [ , 1, , 1, , , , 1, , , , 1 ], [ 1, , 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, , , 1, , 1, 1, , 1, , 1, , , , , 1, , 1 ], [ , 1, , , , 1, , , 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, , , 1, , , 1 ], [ , 1, 1, , , , , , 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, , 1, , , , , 1, 1, , 1, , 1 ], [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, , , , 1, 1, 1, , 1, 1, , , 1, 1, , 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, , 1, 1, 1, , 1, , , , , 1, 1, 1, , , 1, , 1, , , 1, 1 ], [ , , , , 1, , , , , , , , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, , 1, 1, 1, , 1, 1, , , , 1, 1, 1, 1, 1, , , 1, 1, 1, , , , , 1 ], [ 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , , , , , 1, , , , , , , 1 ], [ , 1, 1, , 1, 1, , 1, , , , , , , , , , , , , 1 ], , [ 1, 1, 1, , , , , , , , , , , , , 1 ], [ , , , , , , , , 1, , , 1, , , 1, 1, , , , , 1 ] ], [ , [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , , , 1, , , , , , , , , , , , , , , 1 ], [ , 1, , , 1, 1, , 1, , 1, 1, , , , 1, 1, , , 1, 1, , , , 1 ], [ 1, , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , 1, , , , 1 ], , [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, , , 1, 1, 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, , , 1, , 1, , , 1, 1, 1, 1, , , 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, , , 1, , , 1, , 1 ], [ , 1, , , , , , , , , , 1, 1, , , , , , 1, 1, , , , , 1 ], [ , , , , , , , 1, , , , 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, , , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, , 1, 1, 1, , , 1, 1, , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, , 1, 1, , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , , , , , , 1 ], , [ , 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, , 1 ], [ , , 1, , , 1, , , 1, 1, , , 1, , 1, 1, , 1 ], [ , 1, 1, , 1, , , , 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1 ], [ , 1, , , , , , , , , , 1, 1, , , , , , 1, 1, , 1, , 1, , 1, 1 ], , [ , 1, 1, , 1, , , 1, , 1, , , , 1, 1, 1, , , , , , 1, , , , 1 ], [ 1, 1, , , 1, 1, , 1, , , , , 1, , 1 ] ], [ , [ , 1 ], [ , , , 1, , , , 1, , , , 1, , , , 1, , , 1, , , 1 ], [ , , , , , , , , , , , , , , , , , , 1, 1, , , , , , 1 ], , [ 1, , , , , 1 ], [ , 1, , , , 1, , , , 1 ], [ , 1, , , , , , , , , , , 1, , , 1, , , , , , , , , 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , 1, , , , 1, , 1 ], [ , 1 ], [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, , 1, 1, , 1, , , , , , , 1 ], [ 1, , , , , 1, , , 1, 1, , 1, , 1, , 1, 1, , , , , 1, , , 1 ], [ , 1, 1, , , 1, , 1, , 1, , 1, , 1, 1, 1, 1, , , 1, , 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, , 1, , , , 1, 1, 1, 1, , 1, 1, , , 1, 1, 1, 1 ], [ 1, , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , 1 ], , [ , 1, , , , , , 1, 1, 1, , 1, , , , 1, , , 1, 1, 1, , , 1 ], [ 1, , , , , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, , 1, , 1, , 1, , , 1, 1 ], [ 1, , 1, 1, , , , , 1, , , , , , 1, 1, , , 1, 1, 1, 1, , , 1, , 1 ], [ 1, , , , , , , , , , , , , , , , , 1 ], [ , , , , , 1, , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , , 1 ], [ , 1, , , , 1 ] ], [ , [ 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, , , 1, 1, 1 ], [ , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], , [ , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , , , , , , , 1, , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], , [ 1, 1, , , , 1, 1, , , , , , 1, , , , 1, , 1, , 1, 1, , 1 ], [ 1 ], [ , , , , , , , , , , , 1, , , , , , , , , , , 1 ], [ , 1, , , , , , , 1, 1, , , 1, , 1, , , , 1, , , , , , , 1 ], [ , , , , , , , , , , , , , , , , 1, , , , , 1 ], [ , , 1, , , , , 1, , 1 ], [ 1, , , , 1, , , , , 1, , , , 1, 1, , , , 1, 1, , , , , 1 ], [ , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , 1, 1, , , , , , , 1, , 1, , 1, 1, 1, 1, 1, 1 ], [ , , , , , 1, , , , , , , 1, , , , , , , 1 ], , [ , , 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, 1, , , 1, 1, , 1, 1, 1, , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , 1 ], , [ 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, , , , , , 1, , 1, , , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1, , , 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , 1, , , , , , , , , 1, , , , 1 ], [ , 1, 1, , 1, 1, , 1, , , , 1, 1, , 1, 1, , , 1, , 1, 1, , 1 ], [ , 1, , 1, , 1, , , 1, , , 1, 1, , 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , , , , , , , , , 1, , 1, , 1, 1, , , , 1, , , 1 ], [ , 1, , , 1, 1, , , , , , , , , 1, 1, 1, , , , , 1 ], [ 1, , , 1, 1, , , , 1, 1, 1, 1, 1, , , 1, , , 1, , , 1, , 1, , 1 ], [ , 1, 1, , 1, 1, , 1, 1, , , , 1, 1, 1, , , 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , , 1 ], [ , 1, , , , , , , , 1, , , , , 1, , , , 1, , , 1 ], [ , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , 1, , 1, , , , , 1, 1, 1, 1, 1, , , 1, , , , 1 ], [ , 1, , , , , , , , 1, , , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, , 1, , 1, 1, , , , 1, , 1, 1, 1, 1, 1, , 1, 1, , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1, 1, , , , 1, , 1, 1, , 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , 1, 1, 1, 1, , 1, , , 1, 1, 1, 1, , , 1, , , , , , , 1 ], [ , 1, , , , , , , , 1, , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1 ], [ , 1, 1, , , , , , , , , , , , 1, 1, , , , , , 1 ], [ , 1, , , , , , , 1 ], [ , , , , , , , , , , , , , , 1, , , , , 1, , , , , , 1 ], [ 1, 1, , , 1, , , 1, 1, 1, , , , 1 ], , [ , , , , , , , , , , , , , 1, , , , , , , , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , 1, , , , , , , 1 ], [ 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, , , 1, , 1, , , 1, 1 ], [ , , , , , , , , , 1 ], [ , 1, , , , 1, , , , , , 1, , , 1, , , , , 1 ], [ , 1, 1, , 1, 1, , , , , , , , , , , , , , , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, 1, 1, 1, , , , 1, 1, , , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, 1, , 1, 1 ], [ , , , , , , , , , , , , , , , 1, , , , 1 ], , [ 1, 1, , 1, , 1, , , , , , 1, , 1, , 1, 1, , 1, , 1, 1, , 1, 1, , 1 ], [ , , 1, , , , , , 1, , , , 1, , 1, , , , , 1 ], [ 1, , , , , , , , , 1, , , , , , 1, , , , 1, , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, , 1, , , , , , 1, , , 1, , , , , , , , 1 ], [ , 1, , 1, , , , , , , , , , , , 1 ], , [ 1, 1, , , , , , , , , , , , , , , , , , , , , , 1, 1 ], [ 1 ] ], [ , [ 1, , , , , , , , , 1, , , , , 1, , 1, , 1 ], [ , 1, 1, , 1, 1, , 1, 1, 1, , , 1, 1, 1, , , , 1, , , 1, , , , 1 ], [ , 1, , , , , , , 1, , , , 1, , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , , , 1, , , , , , , , , 1, 1, 1, 1 ], [ 1 ], [ , 1, 1, , , 1, 1, , , , , 1, , 1, , , , , , , , 1, , , , 1 ], [ 1, , 1, , , 1, , 1, , , , , 1, 1, 1, 1, , , , 1, , , , 1 ], [ , , 1, , , , , , , 1, , , , , , , 1, , , , , , , 1 ], [ 1, , , , , , , , , , , , , , 1, , , , 1 ], [ , , , 1, , 1, , , , , 1, , , , 1, 1, , , , 1 ], [ 1, , , , , 1, , , , 1, , 1, 1, , , 1, 1, , 1, 1, 1, , 1, 1, 1, , 1 ], [ , 1, 1, , , , , 1, , 1, , 1, 1, 1, , 1, 1, , , 1, , 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , , 1, , 1, 1, , , 1, 1, , , , , , 1 ], [ 1, , 1, 1, , 1, , 1, 1, , 1, , 1, 1, 1, 1, 1, , , 1, 1, , , , , , 1 ], [ 1, , , , , , , , , , , , , , , , , , 1, , , 1, , 1 ], [ , , , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , , 1, , 1 ], [ , 1, , , , 1, , , 1, 1, , 1, , , 1, 1, , , 1, , , 1, , , 1, 1 ], [ 1, 1, , 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, , , 1, , 1, 1 ], [ 1, , 1, 1, 1, 1, , , , 1, , 1, 1, 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, , , , , , , , , , , , , 1 ], [ , , 1, , , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , , , , , , , , , 1, , 1, , 1, , , , 1 ], [ , , , 1, , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , , 1, , , , , , , , , 1 ], [ , , , , , , , , 1, 1, , , , , , , , , 1, , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , , , , , 1, , , , 1, 1, 1, , , 1, 1, , , 1, , 1, 1, , 1 ], [ , , , , , , , , , , , , , , , , , , , 1, 1 ], [ , 1, , , , , , 1, , , , , , , , , , , , , 1 ], [ , , 1, , , 1, , 1, 1, 1, , 1, 1, , 1, , , , 1, , 1, 1 ], , [ , , 1, , , 1, , , , , , 1, , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, 1, , 1, , 1, , , 1, 1, 1, , , 1 ], [ , , , , , 1, , , , , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , 1, , 1, 1, , 1, , , 1 ], [ , , , , , 1, , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, 1, , , , , 1, , , 1, , 1, , , , 1, 1, , , , 1, 1 ], [ , 1, , , 1, , , 1, , 1, 1, , 1, , , , , , , 1 ], [ , , 1, , 1, , , 1, , , , , , , , , , , 1, 1, , , , 1 ], [ , 1, , , , , , , , , , , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , , , , , , , , , , , , , , , 1, , 1, 1 ], [ , , , , , , , , , , , , 1 ], , [ , 1, 1, 1, 1, , , , 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, , 1 ], [ 1, , , , 1, , , , , , , , , , 1 ], [ 1, , , , , , , , , 1 ], , [ , 1, , , , 1, , , , , , , , , , , , , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, , , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, , 1, , , , 1, 1, , , 1, 1, , 1 ], [ , 1, 1, , 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ 1, 1, 1, , , , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, , 1, 1, , , , , 1 ], [ , 1, , , , , , , 1, 1, , , 1, 1, 1, , 1, , , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , , 1, , , , 1, , , , , , , 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , 1, , , 1, 1, 1, 1, , 1, 1, 1, 1, , , , 1, , 1, , 1, , , 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , , 1, 1, , , , , , , , , 1 ], , [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , , 1, , 1, , 1, , , , 1 ], [ , 1, , , 1, 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , , 1 ], [ 1, , , 1, , , , 1, 1, 1, , , , , 1, 1, , , , 1, , 1 ], [ 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, , , , , , , , 1, , 1, , , , , , , , 1, , 1 ], [ , 1, , , , 1, , 1, 1, , , , 1, 1, , 1, , , , 1, 1, 1, , 1 ], , [ , 1, , , , , , 1, , , , , , , 1 ], [ , , , , , , , , 1, , , , 1, , 1, , , , , , , , , , , , 1 ] ], [ , [ , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, , , , , , , , 1, , , , , , 1, , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, , , , , 1, 1, 1, , , 1, , 1, 1, , , , 1, , 1, , , 1, 1 ], [ , , , , , , , 1, , , , 1, 1, 1, 1, 1, , 1, , , , , , , , 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, 1, , 1, , 1, , 1, 1, , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , 1, 1, , 1, , 1, 1, 1, , 1, , 1, 1, , 1, 1, , 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , , , , , , 1, , , , , 1, , 1 ], [ , 1, 1, 1, , 1, , 1, , 1, , , , 1, , 1, , , 1, , , , , , 1, 1 ], [ , 1, , , 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, , 1, 1, , , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , , , 1, , 1, , 1, , , , , , 1, , 1, , , , 1, 1 ] ], [ , [ , 1, , 1, , , , , , , , , , , , , , , 1, , , , 1 ], [ , , , , , , , , , 1, , 1, 1, 1, , 1, , , 1, , 1, 1 ], [ 1, 1, , , , , , , 1, , , , , , , 1, , , , , , 1 ], [ , 1, , , , , , , , , , 1, , , , , , , , , 1, 1 ], , [ , , , , , , , , , , , , , , , 1, , , , 1, , 1 ], [ , , 1, 1, , 1, , 1, , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , 1, 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ 1, , 1, 1, , , , 1, , , , , , , , , 1, , , 1, , , 1, 1 ], [ , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, 1, , , , , , 1, , 1, , 1, , , 1, , 1, 1 ], [ 1, 1, 1, 1, , 1, , 1, , 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, , , 1, , 1, , 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, , 1, 1 ], [ , , , , 1, , , 1, , , , , , , 1, , , , 1, 1 ], [ , 1, , , , , , , , , , 1, , 1, , 1, , , , , 1, , , , , 1 ], , [ 1, 1, , 1, , 1, , 1, 1, , , , , , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, , , , , , 1, , , , , , 1, 1, , , , 1, 1, , , 1 ], [ , 1, 1, , 1, 1, , , , 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, , , 1, , , , 1, , , , 1, 1 ], [ , , , , 1 ], [ , , , , , , , , , 1, , , 1 ], , [ , , 1, , 1, , , , , , , , , 1, , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, , 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , , , , 1 ], [ , 1, , 1, , , , , , 1, , , , , 1, 1, , , , , 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , , 1, , 1, 1, 1 ], [ , 1, , , , 1, , , , , , , 1 ], [ , 1, , , 1, , , 1, , 1, , 1, 1, , 1, , , , , 1, , 1, , , , 1, 1 ], [ , 1, , , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, , , , 1, 1, , , , , , 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , 1, , , , , , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1 ], [ 1, 1, , , , , , , 1, 1, , , , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], , [ , 1, 1, , , , , 1, , 1, , , , 1, 1, 1, , , 1, , , , , 1 ], [ , , , , , , , , , , , , , 1 ], [ , , , , , 1, , , , , , , , 1, 1, , , , , 1, , 1, , , 1, 1 ], [ , , , , , , , , , , , , , , 1 ] ], [ , [ , 1 ], , , , , , , , , , , , , , , , , , , , [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, , , , 1, , 1, 1 ], [ , 1, , 1, , 1, , , 1, , , , , 1, , , , , , 1, 1 ], [ , 1, , 1, , , , , 1, , , , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, , , , , , , , , , , , , , , 1 ] ], [ , [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , , , , , , , 1, 1, , , , 1 ], [ , , , , , , 1 ], [ , , 1 ], [ , 1, 1, , , 1, , 1, , 1, 1, , 1, 1, 1, , , , 1, 1, 1, , , , , 1 ], , [ , 1, , , , 1, , , , , , 1, , , 1, , , , 1, 1, , 1 ], [ , , , , , , , 1, , , , , , , , , 1 ], [ , 1, , , , 1, 1, , , , , , 1, 1, 1, , , , 1, , 1, 1 ], [ , , , , , , , 1, , 1, , , , , , , , , , 1 ], [ , 1, 1, , , , , , 1, 1, , , , 1, , , , , , , 1, , , 1 ], , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , , 1, , , 1, , , , , 1, , 1, , 1, , 1, , , , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , , , , 1, 1, , 1, 1, , 1, , , 1, , 1 ], [ , , , , , , , , , , , , , , 1, , , , , , 1 ], , [ , , , , , , , , , 1, , , , , , 1, , , , , 1 ], [ , , 1, , , , , , , 1, , , 1, 1 ], [ , , , 1, , , , , 1, , , , , 1, , , , , , 1, , , , 1 ], [ 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, , , , 1, 1, 1, , , 1, 1, , , , 1, 1 ], , [ 1, 1, , , , , , , , , , 1, , 1, , 1, , , 1 ], [ , , , , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , 1, , , , , 1, , 1 ], [ , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , , 1, , , 1, , , , , , , , 1, , , , , , 1, , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, , 1, , , , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, , , , , , , 1, , 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, , , , , , 1, , 1, , , , , 1, 1, , , , , 1 ], [ 1, , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, , 1, , 1, , , , 1, 1, 1, 1, 1, , , 1, 1, , 1, , 1 ], [ , 1, 1, 1, 1, , , , , 1, , 1, 1, 1, 1, 1, , , 1, 1, , , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, , , , , 1, , 1, , 1, , , 1, , , 1, 1, , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , 1, , , , , 1, 1, , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , 1, , 1, 1, , 1, 1, 1, 1, 1, , , 1, , 1, , 1 ], [ 1, 1, 1, , 1, 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , , , , , , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , , , , , 1, 1, 1, 1, 1, , , , 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1 ], [ , 1, 1, 1, , 1, , 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1 ], [ 1, 1, , , , 1, , , 1, 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , 1, , 1 ], [ , 1, , , , , , , 1, , 1, , 1, 1, 1, 1, , , , , , , , , 1 ] ], [ , [ , , , , , , , , , , , , , 1, 1, , , , 1 ], [ , 1, , , , , , , , 1, , , 1, , , , , , 1, , , 1, , , , 1 ], , [ , 1, , , , 1, , 1, , 1, 1, , 1, 1, , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , 1 ], [ 1, 1, 1, , , 1, , , , , , , , , 1, 1, , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1, , , 1 ], [ , , , , , , , , , 1 ], [ 1, 1, , , , , , 1, 1, 1, , 1, 1, , , , 1, 1, , 1, , 1, 1, 1, , 1 ], [ , 1, 1, 1, , 1, 1, , , 1, , 1, 1, 1, 1, , , , , , , 1, , 1 ], [ , 1, 1, 1, 1, , , 1, , 1, , , , 1, 1, 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , 1, 1, , 1, , 1, , , 1, , , 1, , 1 ], [ , , , , , , , , , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , , , , , 1 ], , [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , 1, 1, , 1, , , , , 1, , , 1, , 1 ], [ , 1, , , , 1, , , 1, , , , , , , , 1, , 1, , , 1 ], [ , , , , , , , , , , , , , 1, 1, , , , 1, , , 1 ], [ , , , , , 1, , , 1, , , , 1 ], [ , 1 ], , [ , 1 ], [ 1, , , , , , , , , , , , , , 1, , , , , 1 ] ], [ , [ , 1, , , , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, , , 1 ], [ , , 1, , , , , , , , , 1 ], , , [ 1, , , 1, 1, , , , , , , , 1, 1, , 1, 1, , 1 ], , [ , , , , , , , , , , , , , , , , , , 1, , 1 ], , [ 1, , , 1, 1, , 1, 1, , , , , 1, , 1, , , , , 1, 1, , 1 ], , [ , 1, , , , , , , , 1, 1, 1, 1, 1, , 1, 1, , , , 1, 1 ], [ , , , , , , , , , , , , , , , , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , 1, , 1, , , 1 ], [ 1, , , , , , , , , , , , , , , , , , 1, , 1 ], , , [ , 1, , , , , , , , , , , , , , 1, , , , 1, 1 ], [ , , , , , , , , , 1, , , 1, , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , 1, 1, , , , , , 1 ], , [ , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , , 1, 1, , 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, , , , , , , , 1 ], [ , , , , 1, , , 1, , , 1, 1, , , , , , , , , , 1, , , , 1 ], [ , 1, , 1, 1, , , 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , , , , , , , 1 ], [ , 1, 1, , , , , 1, , 1, , , , , , 1, , , , , , 1, , 1, , 1 ], [ , 1, , , , , , 1, , , , 1, , , , , , , , , , 1 ], [ , , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, , , , , , , , 1 ], [ , 1, 1, , 1, , , , , , , , 1, , , , , , 1, , , 1, , 1, , 1 ], [ , 1, , 1, , 1, , 1, 1, 1, , 1, 1, 1, , 1, , , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, , , , 1, 1, 1, , , , 1, 1, , , 1, 1 ], [ , , 1, 1, 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, , , , , 1, , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, , , 1, 1, , , , 1, , 1 ], [ , , , 1 ], , [ , 1, 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , 1, , 1, , 1, , , , , , , 1, 1, , 1, 1 ], [ , , , , , , 1, , 1, 1, , 1, , 1, , , , , , , , , , 1 ], [ , 1, 1, , 1, , , , 1, , , , 1, 1, 1, , , , 1, , 1, 1, 1, , 1, 1 ], , [ , 1, 1, , , , , , , , , , , , , 1, , , 1, , , , , 1 ], [ , 1, , , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , , , , , , 1, , , , 1, , , , , 1, , , , , , , 1 ] ], [ , [ , 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, , 1, , 1, 1, , , 1, 1, 1, 1, , 1, , , , , 1, 1, 1 ], [ , , 1, 1, , 1, , 1, 1, , , , 1, 1, 1, 1, , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, , 1, , , , , , , , 1, , 1, , 1, , , , , , , , , , 1 ], [ , , 1, , 1, , , 1, , , , , 1, 1, , , 1, , 1, 1, 1, 1 ], [ , 1 ], [ , 1, 1, , 1, , 1, 1, , 1, , , 1, 1, 1, , , , 1, , , 1, , 1 ], [ 1, 1, , 1, 1, 1, , , , , , , , , , , , , 1, , 1, 1, 1 ], [ , 1, 1, , , , , , , 1, , , 1, , 1, , 1, , 1, 1, , , 1, , , 1 ], [ , , 1, , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, , 1, , , , , 1, 1, 1, , , 1, , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , 1, 1, 1, , 1, , 1, 1, 1, , , 1, 1, 1, 1, , , , 1, 1 ], [ , , , 1, 1, , , 1, , 1, , 1, , 1, 1, 1, 1, , 1, , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , 1, 1, , 1, , 1, , , , 1, 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, , 1, , , 1, , , 1, , 1, 1, 1, 1, 1, , 1, , 1, 1 ], [ , , , , , 1, , , , 1, , , , , 1, 1, , , , 1 ], [ , 1, , 1, 1, 1, , 1, , , 1, 1, 1, , , 1, , , 1, , 1, , , 1 ], [ , , 1, , , , , , , , , 1, , 1, , , , , 1, , 1 ], [ , 1, 1, , , , , , , , 1, 1, 1, , , , , , , , 1, , , , , 1 ], [ , , , , , , , , 1, , , , , 1, , , 1 ] ], [ , [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, , , , , , , , , 1, 1 ], [ , , , , , , , , 1, , , , 1, , 1, , 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , , , , , , , 1 ], [ , 1, , 1, , 1, , , , 1, 1, , 1, , 1, , , , 1, 1, 1, 1, 1, , , 1 ], , [ , 1, , , , , , , , 1, , , 1, 1, , , 1, , 1, 1, , 1, , 1 ], [ , 1, , , 1, , , , , , , , 1, , , , , , , 1 ], [ 1, 1, , , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], , [ , 1, , , , , , 1, , 1, , 1, 1, 1, 1, 1, , , 1, , 1, 1, , , , 1 ], [ , 1, 1, , , 1, , 1, , 1, , , 1, 1, 1, 1, , , 1, , , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1 ], [ , 1, , , 1, 1, , 1, 1, , , 1, 1, , 1, 1, , 1, , 1, , 1 ], [ 1, , 1, , , , , 1, , 1, , 1, 1, 1, 1, , , , , 1, 1, , , , 1, 1 ], [ , 1, 1, , , , , 1, 1, , , 1, , 1, 1, 1, 1, , , , , , , , , , 1 ], , [ , 1, 1, , , 1, , , , 1, , 1, 1, 1, 1, 1, , , , 1, , , , 1, , 1 ], [ , , , 1, 1, , , 1, , , , , 1, , 1, 1, 1, , 1, 1, , , , , , 1 ], [ , 1, , , , , , , , , , , 1, , , , 1, , , , , , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , , , 1, , , , , 1, , 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, , , , , , 1, , , , , 1, 1, , , , , , , , 1, , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1, , , 1, , , , , 1 ], [ , , , , , , , 1, , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, , , , , , , 1, , , , , , , , 1, , , 1 ], [ , 1, , , , , , , 1 ], [ , , , , , , , , , , 1 ], [ , 1, , , , , , 1, 1, , , , , , 1 ], , [ , 1, 1, , , , , , 1, , , , , 1, 1, , , , 1 ], [ 1, , 1, , 1, , , , , 1, , , , , 1, , , , , , , , , 1, 1 ], [ , 1, 1, , , , , , , , , 1, 1, 1, 1, , , , 1, , , , , 1, , , 1 ], , [ , 1, 1, , 1, , , 1, 1, , , 1, , , 1, 1, 1, , 1, , 1, 1, 1, , , , 1 ], [ , , , , , 1, , , , , 1, , , 1, 1, , , 1, , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , , , , , , , 1 ], [ , , , 1, , , , , 1, , , , , 1, , 1, , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , 1 ], [ , 1, , , , , , 1, , , , , , , 1, 1, 1, , , 1 ], [ , 1, , , , , , , , , , 1, 1, 1, , , , , 1, , , 1 ], [ , , , , , 1, , 1, , , , , 1, 1, 1, , 1, 1, , 1, 1, 1, , , 1, 1 ], [ 1, 1, , , , , , , 1, , , , , 1, 1, , , , , , , , , , , 1 ], , [ , 1 ], [ , , , , , , , , , , , , , , , , , , , , , , , , 1 ], [ , , 1, , , , , 1, , , 1, , , , 1, , 1 ], [ , 1, , , , , , , , , 1 ] ] ];\n    function isValidLang(lang) {\n      var array = langs;\n      while (lang.length < 3) {\n        lang += '`';\n      }\n      for (var _i32 = 0; _i32 <= lang.length - 1; _i32++) {\n        var index = lang.charCodeAt(_i32) - 96;\n        array = array[index];\n        if (!array) {\n          return false;\n        }\n      }\n      return true;\n    }\n    function _validLangs(langArray) {\n      langArray = Array.isArray(langArray) ? langArray : langs;\n      var codes = [];\n      langArray.forEach(function(lang, index) {\n        var _char3 = String.fromCharCode(index + 96).replace('`', '');\n        if (Array.isArray(lang)) {\n          codes = codes.concat(_validLangs(lang).map(function(newLang) {\n            return _char3 + newLang;\n          }));\n        } else {\n          codes.push(_char3);\n        }\n      });\n      return codes;\n    }\n    var valid_langs_default = isValidLang;\n    var SerialVirtualNode = function(_abstract_virtual_nod2) {\n      function SerialVirtualNode(serialNode) {\n        var _this6;\n        _classCallCheck(this, SerialVirtualNode);\n        _this6 = _callSuper(this, SerialVirtualNode);\n        _this6._props = normaliseProps(serialNode);\n        _this6._attrs = normaliseAttrs(serialNode);\n        return _this6;\n      }\n      _inherits(SerialVirtualNode, _abstract_virtual_nod2);\n      return _createClass(SerialVirtualNode, [ {\n        key: 'props',\n        get: function get() {\n          return this._props;\n        }\n      }, {\n        key: 'attr',\n        value: function attr(attrName) {\n          var _this$_attrs$attrName;\n          return (_this$_attrs$attrName = this._attrs[attrName]) !== null && _this$_attrs$attrName !== void 0 ? _this$_attrs$attrName : null;\n        }\n      }, {\n        key: 'hasAttr',\n        value: function hasAttr(attrName) {\n          return this._attrs[attrName] !== void 0;\n        }\n      }, {\n        key: 'attrNames',\n        get: function get() {\n          return Object.keys(this._attrs);\n        }\n      } ]);\n    }(abstract_virtual_node_default);\n    var nodeNamesToTypes = {\n      '#cdata-section': 2,\n      '#text': 3,\n      '#comment': 8,\n      '#document': 9,\n      '#document-fragment': 11\n    };\n    var nodeTypeToName = {};\n    var nodeNames = Object.keys(nodeNamesToTypes);\n    nodeNames.forEach(function(nodeName2) {\n      nodeTypeToName[nodeNamesToTypes[nodeName2]] = nodeName2;\n    });\n    function normaliseProps(serialNode) {\n      var _serialNode$nodeName, _ref81, _serialNode$nodeType;\n      var nodeName2 = (_serialNode$nodeName = serialNode.nodeName) !== null && _serialNode$nodeName !== void 0 ? _serialNode$nodeName : nodeTypeToName[serialNode.nodeType];\n      var nodeType = (_ref81 = (_serialNode$nodeType = serialNode.nodeType) !== null && _serialNode$nodeType !== void 0 ? _serialNode$nodeType : nodeNamesToTypes[serialNode.nodeName]) !== null && _ref81 !== void 0 ? _ref81 : 1;\n      assert_default(typeof nodeType === 'number', 'nodeType has to be a number, got \\''.concat(nodeType, '\\''));\n      assert_default(typeof nodeName2 === 'string', 'nodeName has to be a string, got \\''.concat(nodeName2, '\\''));\n      nodeName2 = nodeName2.toLowerCase();\n      var type2 = null;\n      if (nodeName2 === 'input') {\n        type2 = (serialNode.type || serialNode.attributes && serialNode.attributes.type || '').toLowerCase();\n        if (!valid_input_type_default().includes(type2)) {\n          type2 = 'text';\n        }\n      }\n      var props = _extends({}, serialNode, {\n        nodeType: nodeType,\n        nodeName: nodeName2\n      });\n      if (type2) {\n        props.type = type2;\n      }\n      delete props.attributes;\n      return Object.freeze(props);\n    }\n    function normaliseAttrs(_ref82) {\n      var _ref82$attributes = _ref82.attributes, attributes2 = _ref82$attributes === void 0 ? {} : _ref82$attributes;\n      var attrMap = {\n        htmlFor: 'for',\n        className: 'class'\n      };\n      return Object.keys(attributes2).reduce(function(attrs, attrName) {\n        var value = attributes2[attrName];\n        assert_default(_typeof(value) !== 'object' || value === null, 'expects attributes not to be an object, \\''.concat(attrName, '\\' was'));\n        if (value !== void 0) {\n          var mappedName = attrMap[attrName] || attrName;\n          attrs[mappedName] = value !== null ? String(value) : null;\n        }\n        return attrs;\n      }, {});\n    }\n    var serial_virtual_node_default = SerialVirtualNode;\n    function cleanup(resolve, reject) {\n      resolve = resolve || function res() {};\n      reject = reject || axe.log;\n      if (!axe._audit) {\n        throw new Error('No audit configured');\n      }\n      var q = axe.utils.queue();\n      var cleanupErrors = [];\n      Object.keys(axe.plugins).forEach(function(key) {\n        q.defer(function(res) {\n          var rej = function rej2(err2) {\n            cleanupErrors.push(err2);\n            res();\n          };\n          try {\n            axe.plugins[key].cleanup(res, rej);\n          } catch (err2) {\n            rej(err2);\n          }\n        });\n      });\n      var flattenedTree = axe.utils.getFlattenedTree(document.body);\n      axe.utils.querySelectorAll(flattenedTree, 'iframe, frame').forEach(function(node) {\n        q.defer(function(res, rej) {\n          return axe.utils.sendCommandToFrame(node.actualNode, {\n            command: 'cleanup-plugin'\n          }, res, rej);\n        });\n      });\n      q.then(function(results) {\n        if (cleanupErrors.length === 0) {\n          resolve(results);\n        } else {\n          reject(cleanupErrors);\n        }\n      })['catch'](reject);\n    }\n    var cleanup_default = cleanup;\n    var reporters = {};\n    var defaultReporter;\n    function hasReporter(reporterName) {\n      return reporters.hasOwnProperty(reporterName);\n    }\n    function getReporter(reporter) {\n      if (typeof reporter === 'string' && reporters[reporter]) {\n        return reporters[reporter];\n      }\n      if (typeof reporter === 'function') {\n        return reporter;\n      }\n      return defaultReporter;\n    }\n    function addReporter(name, cb, isDefault) {\n      reporters[name] = cb;\n      if (isDefault) {\n        defaultReporter = cb;\n      }\n    }\n    function configure(spec) {\n      var audit = axe._audit;\n      if (!audit) {\n        throw new Error('No audit configured');\n      }\n      if (spec.axeVersion || spec.ver) {\n        var specVersion = spec.axeVersion || spec.ver;\n        if (!/^\\d+\\.\\d+\\.\\d+(-canary)?/.test(specVersion)) {\n          throw new Error('Invalid configured version '.concat(specVersion));\n        }\n        var _specVersion$split = specVersion.split('-'), _specVersion$split2 = _slicedToArray(_specVersion$split, 2), version = _specVersion$split2[0], canary = _specVersion$split2[1];\n        var _version$split$map = version.split('.').map(Number), _version$split$map2 = _slicedToArray(_version$split$map, 3), major = _version$split$map2[0], minor = _version$split$map2[1], patch = _version$split$map2[2];\n        var _axe$version$split = axe.version.split('-'), _axe$version$split2 = _slicedToArray(_axe$version$split, 2), axeVersion = _axe$version$split2[0], axeCanary = _axe$version$split2[1];\n        var _axeVersion$split$map = axeVersion.split('.').map(Number), _axeVersion$split$map2 = _slicedToArray(_axeVersion$split$map, 3), axeMajor = _axeVersion$split$map2[0], axeMinor = _axeVersion$split$map2[1], axePatch = _axeVersion$split$map2[2];\n        if (major !== axeMajor || axeMinor < minor || axeMinor === minor && axePatch < patch || major === axeMajor && minor === axeMinor && patch === axePatch && canary && canary !== axeCanary) {\n          throw new Error('Configured version '.concat(specVersion, ' is not compatible with current axe version ').concat(axe.version));\n        }\n      }\n      if (spec.reporter && (typeof spec.reporter === 'function' || hasReporter(spec.reporter))) {\n        audit.reporter = spec.reporter;\n      }\n      if (spec.checks) {\n        if (!Array.isArray(spec.checks)) {\n          throw new TypeError('Checks property must be an array');\n        }\n        spec.checks.forEach(function(check) {\n          if (!check.id) {\n            throw new TypeError('Configured check '.concat(JSON.stringify(check), ' is invalid. Checks must be an object with at least an id property'));\n          }\n          audit.addCheck(check);\n        });\n      }\n      var modifiedRules = [];\n      if (spec.rules) {\n        if (!Array.isArray(spec.rules)) {\n          throw new TypeError('Rules property must be an array');\n        }\n        spec.rules.forEach(function(rule) {\n          if (!rule.id) {\n            throw new TypeError('Configured rule '.concat(JSON.stringify(rule), ' is invalid. Rules must be an object with at least an id property'));\n          }\n          modifiedRules.push(rule.id);\n          audit.addRule(rule);\n        });\n      }\n      if (spec.disableOtherRules) {\n        audit.rules.forEach(function(rule) {\n          if (modifiedRules.includes(rule.id) === false) {\n            rule.enabled = false;\n          }\n        });\n      }\n      if (typeof spec.branding !== 'undefined') {\n        audit.setBranding(spec.branding);\n      } else {\n        audit._constructHelpUrls();\n      }\n      if (spec.tagExclude) {\n        audit.tagExclude = spec.tagExclude;\n      }\n      if (spec.locale) {\n        audit.applyLocale(spec.locale);\n      }\n      if (spec.standards) {\n        configureStandards(spec.standards);\n      }\n      if (spec.noHtml) {\n        audit.noHtml = true;\n      }\n      if (spec.allowedOrigins) {\n        if (!Array.isArray(spec.allowedOrigins)) {\n          throw new TypeError('Allowed origins property must be an array');\n        }\n        if (spec.allowedOrigins.includes('*')) {\n          throw new Error('\"*\" is not allowed. Use \"'.concat(constants_default.allOrigins, '\" instead'));\n        }\n        audit.setAllowedOrigins(spec.allowedOrigins);\n      }\n    }\n    var configure_default = configure;\n    function frameMessenger2(frameHandler) {\n      _respondable.updateMessenger(frameHandler);\n    }\n    function getRules(tags) {\n      tags = tags || [];\n      var matchingRules = !tags.length ? axe._audit.rules : axe._audit.rules.filter(function(item) {\n        return !!tags.filter(function(tag) {\n          return item.tags.indexOf(tag) !== -1;\n        }).length;\n      });\n      var ruleData = axe._audit.data.rules || {};\n      return matchingRules.map(function(matchingRule) {\n        var rd = ruleData[matchingRule.id] || {};\n        return {\n          ruleId: matchingRule.id,\n          description: rd.description,\n          help: rd.help,\n          helpUrl: rd.helpUrl,\n          tags: matchingRule.tags,\n          actIds: matchingRule.actIds\n        };\n      });\n    }\n    var get_rules_default = getRules;\n    function hiddenContentEvaluate(node, options, virtualNode) {\n      var allowlist = [ 'SCRIPT', 'HEAD', 'TITLE', 'NOSCRIPT', 'STYLE', 'TEMPLATE' ];\n      if (!allowlist.includes(node.nodeName.toUpperCase()) && has_content_virtual_default(virtualNode)) {\n        var styles = window.getComputedStyle(node);\n        if (styles.getPropertyValue('display') === 'none') {\n          return void 0;\n        } else if (styles.getPropertyValue('visibility') === 'hidden') {\n          var parent = get_composed_parent_default(node);\n          var parentStyle = parent && window.getComputedStyle(parent);\n          if (!parentStyle || parentStyle.getPropertyValue('visibility') !== 'hidden') {\n            return void 0;\n          }\n        }\n      }\n      return true;\n    }\n    var hidden_content_evaluate_default = hiddenContentEvaluate;\n    var table_exports = {};\n    __export(table_exports, {\n      getAllCells: function getAllCells() {\n        return get_all_cells_default;\n      },\n      getCellPosition: function getCellPosition() {\n        return get_cell_position_default;\n      },\n      getHeaders: function getHeaders() {\n        return get_headers_default;\n      },\n      getScope: function getScope() {\n        return _getScope;\n      },\n      isColumnHeader: function isColumnHeader() {\n        return is_column_header_default;\n      },\n      isDataCell: function isDataCell() {\n        return is_data_cell_default;\n      },\n      isDataTable: function isDataTable() {\n        return is_data_table_default;\n      },\n      isHeader: function isHeader() {\n        return is_header_default;\n      },\n      isRowHeader: function isRowHeader() {\n        return is_row_header_default;\n      },\n      toArray: function toArray() {\n        return to_grid_default;\n      },\n      toGrid: function toGrid() {\n        return to_grid_default;\n      },\n      traverse: function traverse() {\n        return traverse_default;\n      }\n    });\n    function getAllCells(tableElm) {\n      var rowIndex, cellIndex, rowLength, cellLength;\n      var cells = [];\n      for (rowIndex = 0, rowLength = tableElm.rows.length; rowIndex < rowLength; rowIndex++) {\n        for (cellIndex = 0, cellLength = tableElm.rows[rowIndex].cells.length; cellIndex < cellLength; cellIndex++) {\n          cells.push(tableElm.rows[rowIndex].cells[cellIndex]);\n        }\n      }\n      return cells;\n    }\n    var get_all_cells_default = getAllCells;\n    function traverseForHeaders(headerType, position, tableGrid) {\n      var property = headerType === 'row' ? '_rowHeaders' : '_colHeaders';\n      var predicate = headerType === 'row' ? is_row_header_default : is_column_header_default;\n      var startCell = tableGrid[position.y][position.x];\n      var colspan = startCell.colSpan - 1;\n      var rowspanAttr = startCell.getAttribute('rowspan');\n      var rowspanValue = parseInt(rowspanAttr) === 0 || startCell.rowspan === 0 ? tableGrid.length : startCell.rowSpan;\n      var rowspan = rowspanValue - 1;\n      var rowStart = position.y + rowspan;\n      var colStart = position.x + colspan;\n      var rowEnd = headerType === 'row' ? position.y : 0;\n      var colEnd = headerType === 'row' ? 0 : position.x;\n      var headers;\n      var cells = [];\n      for (var row = rowStart; row >= rowEnd && !headers; row--) {\n        for (var col = colStart; col >= colEnd; col--) {\n          var cell = tableGrid[row] ? tableGrid[row][col] : void 0;\n          if (!cell) {\n            continue;\n          }\n          var vNode = axe.utils.getNodeFromTree(cell);\n          if (vNode[property]) {\n            headers = vNode[property];\n            break;\n          }\n          cells.push(cell);\n        }\n      }\n      headers = (headers || []).concat(cells.filter(predicate));\n      cells.forEach(function(tableCell) {\n        var vNode = axe.utils.getNodeFromTree(tableCell);\n        vNode[property] = headers;\n      });\n      return headers;\n    }\n    function getHeaders(cell, tableGrid) {\n      if (cell.getAttribute('headers')) {\n        var headers = idrefs_default(cell, 'headers');\n        if (headers.filter(function(header) {\n          return header;\n        }).length) {\n          return headers;\n        }\n      }\n      if (!tableGrid) {\n        tableGrid = to_grid_default(find_up_default(cell, 'table'));\n      }\n      var position = get_cell_position_default(cell, tableGrid);\n      var rowHeaders = traverseForHeaders('row', position, tableGrid);\n      var colHeaders = traverseForHeaders('col', position, tableGrid);\n      return [].concat(rowHeaders, colHeaders).reverse();\n    }\n    var get_headers_default = getHeaders;\n    function isDataCell(cell) {\n      if (!cell.children.length && !cell.textContent.trim()) {\n        return false;\n      }\n      var role = cell.getAttribute('role');\n      if (is_valid_role_default(role)) {\n        return [ 'cell', 'gridcell' ].includes(role);\n      } else {\n        return cell.nodeName.toUpperCase() === 'TD';\n      }\n    }\n    var is_data_cell_default = isDataCell;\n    function isDataTable(node) {\n      var role = (node.getAttribute('role') || '').toLowerCase();\n      if ((role === 'presentation' || role === 'none') && !_isFocusable(node)) {\n        return false;\n      }\n      if (node.getAttribute('contenteditable') === 'true' || find_up_default(node, '[contenteditable=\"true\"]')) {\n        return true;\n      }\n      if (role === 'grid' || role === 'treegrid' || role === 'table') {\n        return true;\n      }\n      if (get_role_type_default(role) === 'landmark') {\n        return true;\n      }\n      if (node.getAttribute('datatable') === '0') {\n        return false;\n      }\n      if (node.getAttribute('summary')) {\n        return true;\n      }\n      if (node.tHead || node.tFoot || node.caption) {\n        return true;\n      }\n      for (var childIndex = 0, childLength = node.children.length; childIndex < childLength; childIndex++) {\n        if (node.children[childIndex].nodeName.toUpperCase() === 'COLGROUP') {\n          return true;\n        }\n      }\n      var cells = 0;\n      var rowLength = node.rows.length;\n      var row, cell;\n      var hasBorder = false;\n      for (var rowIndex = 0; rowIndex < rowLength; rowIndex++) {\n        row = node.rows[rowIndex];\n        for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n          cell = row.cells[cellIndex];\n          if (cell.nodeName.toUpperCase() === 'TH') {\n            return true;\n          }\n          if (!hasBorder && (cell.offsetWidth !== cell.clientWidth || cell.offsetHeight !== cell.clientHeight)) {\n            hasBorder = true;\n          }\n          if (cell.getAttribute('scope') || cell.getAttribute('headers') || cell.getAttribute('abbr')) {\n            return true;\n          }\n          if ([ 'columnheader', 'rowheader' ].includes((cell.getAttribute('role') || '').toLowerCase())) {\n            return true;\n          }\n          if (cell.children.length === 1 && cell.children[0].nodeName.toUpperCase() === 'ABBR') {\n            return true;\n          }\n          cells++;\n        }\n      }\n      if (node.getElementsByTagName('table').length) {\n        return false;\n      }\n      if (rowLength < 2) {\n        return false;\n      }\n      var sampleRow = node.rows[Math.ceil(rowLength / 2)];\n      if (sampleRow.cells.length === 1 && sampleRow.cells[0].colSpan === 1) {\n        return false;\n      }\n      if (sampleRow.cells.length >= 5) {\n        return true;\n      }\n      if (hasBorder) {\n        return true;\n      }\n      var bgColor, bgImage;\n      for (var _rowIndex = 0; _rowIndex < rowLength; _rowIndex++) {\n        row = node.rows[_rowIndex];\n        if (bgColor && bgColor !== window.getComputedStyle(row).getPropertyValue('background-color')) {\n          return true;\n        } else {\n          bgColor = window.getComputedStyle(row).getPropertyValue('background-color');\n        }\n        if (bgImage && bgImage !== window.getComputedStyle(row).getPropertyValue('background-image')) {\n          return true;\n        } else {\n          bgImage = window.getComputedStyle(row).getPropertyValue('background-image');\n        }\n      }\n      if (rowLength >= 20) {\n        return true;\n      }\n      if (get_element_coordinates_default(node).width > get_viewport_size_default(window).width * .95) {\n        return false;\n      }\n      if (cells < 10) {\n        return false;\n      }\n      if (node.querySelector('object, embed, iframe, applet')) {\n        return false;\n      }\n      return true;\n    }\n    var is_data_table_default = isDataTable;\n    function isHeader(cell) {\n      if (is_column_header_default(cell) || is_row_header_default(cell)) {\n        return true;\n      }\n      if (cell.getAttribute('id')) {\n        var _id2 = escape_selector_default(cell.getAttribute('id'));\n        return !!document.querySelector('[headers~=\"'.concat(_id2, '\"]'));\n      }\n      return false;\n    }\n    var is_header_default = isHeader;\n    function traverseTable(dir, position, tableGrid, callback) {\n      var result;\n      var cell = tableGrid[position.y] ? tableGrid[position.y][position.x] : void 0;\n      if (!cell) {\n        return [];\n      }\n      if (typeof callback === 'function') {\n        result = callback(cell, position, tableGrid);\n        if (result === true) {\n          return [ cell ];\n        }\n      }\n      result = traverseTable(dir, {\n        x: position.x + dir.x,\n        y: position.y + dir.y\n      }, tableGrid, callback);\n      result.unshift(cell);\n      return result;\n    }\n    function traverse(dir, startPos, tableGrid, callback) {\n      if (Array.isArray(startPos)) {\n        callback = tableGrid;\n        tableGrid = startPos;\n        startPos = {\n          x: 0,\n          y: 0\n        };\n      }\n      if (typeof dir === 'string') {\n        switch (dir) {\n         case 'left':\n          dir = {\n            x: -1,\n            y: 0\n          };\n          break;\n\n         case 'up':\n          dir = {\n            x: 0,\n            y: -1\n          };\n          break;\n\n         case 'right':\n          dir = {\n            x: 1,\n            y: 0\n          };\n          break;\n\n         case 'down':\n          dir = {\n            x: 0,\n            y: 1\n          };\n          break;\n        }\n      }\n      return traverseTable(dir, {\n        x: startPos.x + dir.x,\n        y: startPos.y + dir.y\n      }, tableGrid, callback);\n    }\n    var traverse_default = traverse;\n    function thHasDataCellsEvaluate(node) {\n      var cells = get_all_cells_default(node);\n      var checkResult = this;\n      var reffedHeaders = [];\n      cells.forEach(function(cell) {\n        var headers2 = cell.getAttribute('headers');\n        if (headers2) {\n          reffedHeaders = reffedHeaders.concat(headers2.split(/\\s+/));\n        }\n        var ariaLabel = cell.getAttribute('aria-labelledby');\n        if (ariaLabel) {\n          reffedHeaders = reffedHeaders.concat(ariaLabel.split(/\\s+/));\n        }\n      });\n      var headers = cells.filter(function(cell) {\n        if (sanitize_default(cell.textContent) === '') {\n          return false;\n        }\n        return cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1;\n      });\n      var tableGrid = to_grid_default(node);\n      var out = true;\n      headers.forEach(function(header) {\n        if (header.getAttribute('id') && reffedHeaders.includes(header.getAttribute('id'))) {\n          return;\n        }\n        var pos = get_cell_position_default(header, tableGrid);\n        var hasCell = false;\n        if (is_column_header_default(header)) {\n          hasCell = traverse_default('down', pos, tableGrid).find(function(cell) {\n            return !is_column_header_default(cell) && get_headers_default(cell, tableGrid).includes(header);\n          });\n        }\n        if (!hasCell && is_row_header_default(header)) {\n          hasCell = traverse_default('right', pos, tableGrid).find(function(cell) {\n            return !is_row_header_default(cell) && get_headers_default(cell, tableGrid).includes(header);\n          });\n        }\n        if (!hasCell) {\n          checkResult.relatedNodes(header);\n        }\n        out = out && hasCell;\n      });\n      return out ? true : void 0;\n    }\n    var th_has_data_cells_evaluate_default = thHasDataCellsEvaluate;\n    function tdHeadersAttrEvaluate(node) {\n      var cells = [];\n      var reviewCells = [];\n      var badCells = [];\n      for (var rowIndex = 0; rowIndex < node.rows.length; rowIndex++) {\n        var row = node.rows[rowIndex];\n        for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {\n          cells.push(row.cells[cellIndex]);\n        }\n      }\n      var ids = cells.filter(function(cell) {\n        return cell.getAttribute('id');\n      }).map(function(cell) {\n        return cell.getAttribute('id');\n      });\n      cells.forEach(function(cell) {\n        var isSelf = false;\n        var notOfTable = false;\n        if (!cell.hasAttribute('headers') || !_isVisibleToScreenReaders(cell)) {\n          return;\n        }\n        var headersAttr = cell.getAttribute('headers').trim();\n        if (!headersAttr) {\n          return reviewCells.push(cell);\n        }\n        var headers = token_list_default(headersAttr);\n        if (headers.length !== 0) {\n          if (cell.getAttribute('id')) {\n            isSelf = headers.indexOf(cell.getAttribute('id').trim()) !== -1;\n          }\n          notOfTable = headers.some(function(header) {\n            return !ids.includes(header);\n          });\n          if (isSelf || notOfTable) {\n            badCells.push(cell);\n          }\n        }\n      });\n      if (badCells.length > 0) {\n        this.relatedNodes(badCells);\n        return false;\n      }\n      if (reviewCells.length) {\n        this.relatedNodes(reviewCells);\n        return void 0;\n      }\n      return true;\n    }\n    var aria_exports = {};\n    __export(aria_exports, {\n      allowedAttr: function allowedAttr() {\n        return allowed_attr_default;\n      },\n      arialabelText: function arialabelText() {\n        return _arialabelText;\n      },\n      arialabelledbyText: function arialabelledbyText() {\n        return arialabelledby_text_default;\n      },\n      getAccessibleRefs: function getAccessibleRefs() {\n        return get_accessible_refs_default;\n      },\n      getElementUnallowedRoles: function getElementUnallowedRoles() {\n        return get_element_unallowed_roles_default;\n      },\n      getExplicitRole: function getExplicitRole() {\n        return get_explicit_role_default;\n      },\n      getImplicitRole: function getImplicitRole() {\n        return implicit_role_default;\n      },\n      getOwnedVirtual: function getOwnedVirtual() {\n        return get_owned_virtual_default;\n      },\n      getRole: function getRole() {\n        return get_role_default;\n      },\n      getRoleType: function getRoleType() {\n        return get_role_type_default;\n      },\n      getRolesByType: function getRolesByType() {\n        return get_roles_by_type_default;\n      },\n      getRolesWithNameFromContents: function getRolesWithNameFromContents() {\n        return get_roles_with_name_from_contents_default;\n      },\n      implicitNodes: function implicitNodes() {\n        return implicit_nodes_default;\n      },\n      implicitRole: function implicitRole() {\n        return implicit_role_default;\n      },\n      isAccessibleRef: function isAccessibleRef() {\n        return is_accessible_ref_default;\n      },\n      isAriaRoleAllowedOnElement: function isAriaRoleAllowedOnElement() {\n        return is_aria_role_allowed_on_element_default;\n      },\n      isComboboxPopup: function isComboboxPopup() {\n        return _isComboboxPopup;\n      },\n      isUnsupportedRole: function isUnsupportedRole() {\n        return is_unsupported_role_default;\n      },\n      isValidRole: function isValidRole() {\n        return is_valid_role_default;\n      },\n      label: function label() {\n        return label_default2;\n      },\n      labelVirtual: function labelVirtual() {\n        return label_virtual_default;\n      },\n      lookupTable: function lookupTable() {\n        return lookup_table_default;\n      },\n      namedFromContents: function namedFromContents() {\n        return named_from_contents_default;\n      },\n      requiredAttr: function requiredAttr() {\n        return required_attr_default;\n      },\n      requiredContext: function requiredContext() {\n        return required_context_default;\n      },\n      requiredOwned: function requiredOwned() {\n        return required_owned_default;\n      },\n      validateAttr: function validateAttr() {\n        return validate_attr_default;\n      },\n      validateAttrValue: function validateAttrValue() {\n        return validate_attr_value_default;\n      }\n    });\n    function allowedAttr(role) {\n      var roleDef = standards_default.ariaRoles[role];\n      var attrs = _toConsumableArray(get_global_aria_attrs_default());\n      if (!roleDef) {\n        return attrs;\n      }\n      if (roleDef.allowedAttrs) {\n        attrs.push.apply(attrs, _toConsumableArray(roleDef.allowedAttrs));\n      }\n      if (roleDef.requiredAttrs) {\n        attrs.push.apply(attrs, _toConsumableArray(roleDef.requiredAttrs));\n      }\n      return attrs;\n    }\n    var allowed_attr_default = allowedAttr;\n    var idRefsRegex = /^idrefs?$/;\n    function cacheIdRefs(node, idRefs, refAttrs) {\n      if (node.hasAttribute) {\n        if (node.nodeName.toUpperCase() === 'LABEL' && node.hasAttribute('for')) {\n          var _id3 = node.getAttribute('for');\n          if (!idRefs.has(_id3)) {\n            idRefs.set(_id3, [ node ]);\n          } else {\n            idRefs.get(_id3).push(node);\n          }\n        }\n        for (var _i33 = 0; _i33 < refAttrs.length; ++_i33) {\n          var attr = refAttrs[_i33];\n          var attrValue = sanitize_default(node.getAttribute(attr) || '');\n          if (!attrValue) {\n            continue;\n          }\n          var _iterator14 = _createForOfIteratorHelper(token_list_default(attrValue)), _step14;\n          try {\n            for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {\n              var token = _step14.value;\n              if (!idRefs.has(token)) {\n                idRefs.set(token, [ node ]);\n              } else {\n                idRefs.get(token).push(node);\n              }\n            }\n          } catch (err) {\n            _iterator14.e(err);\n          } finally {\n            _iterator14.f();\n          }\n        }\n      }\n      for (var _i34 = 0; _i34 < node.childNodes.length; _i34++) {\n        if (node.childNodes[_i34].nodeType === 1) {\n          cacheIdRefs(node.childNodes[_i34], idRefs, refAttrs);\n        }\n      }\n    }\n    function getAccessibleRefs(node) {\n      var _idRefs$get;\n      node = node.actualNode || node;\n      var root = get_root_node_default2(node);\n      root = root.documentElement || root;\n      var idRefsByRoot = cache_default.get('idRefsByRoot', function() {\n        return new Map();\n      });\n      var idRefs = idRefsByRoot.get(root);\n      if (!idRefs) {\n        idRefs = new Map();\n        idRefsByRoot.set(root, idRefs);\n        var refAttrs = Object.keys(standards_default.ariaAttrs).filter(function(attr) {\n          var type2 = standards_default.ariaAttrs[attr].type;\n          return idRefsRegex.test(type2);\n        });\n        cacheIdRefs(root, idRefs, refAttrs);\n      }\n      return (_idRefs$get = idRefs.get(node.id)) !== null && _idRefs$get !== void 0 ? _idRefs$get : [];\n    }\n    var get_accessible_refs_default = getAccessibleRefs;\n    function isAriaRoleAllowedOnElement(node, role) {\n      var vNode = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);\n      var implicitRole3 = implicit_role_default(vNode);\n      var spec = get_element_spec_default(vNode);\n      if (Array.isArray(spec.allowedRoles)) {\n        return spec.allowedRoles.includes(role);\n      }\n      if (role === implicitRole3) {\n        return false;\n      }\n      return !!spec.allowedRoles;\n    }\n    var is_aria_role_allowed_on_element_default = isAriaRoleAllowedOnElement;\n    var dpubRoles2 = [ 'doc-backlink', 'doc-biblioentry', 'doc-biblioref', 'doc-cover', 'doc-endnote', 'doc-glossref', 'doc-noteref' ];\n    var landmarkRoles = {\n      header: 'banner',\n      footer: 'contentinfo'\n    };\n    function getRoleSegments(vNode) {\n      var roles = [];\n      if (!vNode) {\n        return roles;\n      }\n      if (vNode.hasAttr('role')) {\n        var nodeRoles = token_list_default(vNode.attr('role').toLowerCase());\n        roles = roles.concat(nodeRoles);\n      }\n      return roles.filter(function(role) {\n        return is_valid_role_default(role);\n      });\n    }\n    function getElementUnallowedRoles(node) {\n      var allowImplicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var _nodeLookup21 = _nodeLookup(node), vNode = _nodeLookup21.vNode;\n      if (!is_html_element_default(vNode)) {\n        return [];\n      }\n      var nodeName2 = vNode.props.nodeName;\n      var implicitRole3 = implicit_role_default(vNode) || landmarkRoles[nodeName2];\n      var roleSegments = getRoleSegments(vNode);\n      return roleSegments.filter(function(role) {\n        return !roleIsAllowed(role, vNode, allowImplicit, implicitRole3);\n      });\n    }\n    function roleIsAllowed(role, vNode, allowImplicit, implicitRole3) {\n      if (allowImplicit && role === implicitRole3) {\n        return true;\n      }\n      if (dpubRoles2.includes(role) && get_role_type_default(role) !== implicitRole3) {\n        return false;\n      }\n      return is_aria_role_allowed_on_element_default(vNode, role);\n    }\n    var get_element_unallowed_roles_default = getElementUnallowedRoles;\n    function getAriaRolesByType(type2) {\n      return Object.keys(standards_default.ariaRoles).filter(function(roleName) {\n        return standards_default.ariaRoles[roleName].type === type2;\n      });\n    }\n    var get_aria_roles_by_type_default = getAriaRolesByType;\n    function getRolesByType(roleType) {\n      return get_aria_roles_by_type_default(roleType);\n    }\n    var get_roles_by_type_default = getRolesByType;\n    function getAriaRolesSupportingNameFromContent() {\n      return cache_default.get('ariaRolesNameFromContent', function() {\n        return Object.keys(standards_default.ariaRoles).filter(function(roleName) {\n          return standards_default.ariaRoles[roleName].nameFromContent;\n        });\n      });\n    }\n    var get_aria_roles_supporting_name_from_content_default = getAriaRolesSupportingNameFromContent;\n    function getRolesWithNameFromContents() {\n      return get_aria_roles_supporting_name_from_content_default();\n    }\n    var get_roles_with_name_from_contents_default = getRolesWithNameFromContents;\n    var isNull = function isNull(value) {\n      return value === null;\n    };\n    var isNotNull = function isNotNull(value) {\n      return value !== null;\n    };\n    var lookupTable = {};\n    lookupTable.attributes = {\n      'aria-activedescendant': {\n        type: 'idref',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-atomic': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-autocomplete': {\n        type: 'nmtoken',\n        values: [ 'inline', 'list', 'both', 'none' ],\n        unsupported: false\n      },\n      'aria-busy': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-checked': {\n        type: 'nmtoken',\n        values: [ 'true', 'false', 'mixed', 'undefined' ],\n        unsupported: false\n      },\n      'aria-colcount': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-colindex': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-colspan': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-controls': {\n        type: 'idrefs',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-current': {\n        type: 'nmtoken',\n        allowEmpty: true,\n        values: [ 'page', 'step', 'location', 'date', 'time', 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-describedby': {\n        type: 'idrefs',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-describedat': {\n        unsupported: true,\n        unstandardized: true\n      },\n      'aria-details': {\n        type: 'idref',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-disabled': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-dropeffect': {\n        type: 'nmtokens',\n        values: [ 'copy', 'move', 'reference', 'execute', 'popup', 'none' ],\n        unsupported: false\n      },\n      'aria-errormessage': {\n        type: 'idref',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-expanded': {\n        type: 'nmtoken',\n        values: [ 'true', 'false', 'undefined' ],\n        unsupported: false\n      },\n      'aria-flowto': {\n        type: 'idrefs',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-grabbed': {\n        type: 'nmtoken',\n        values: [ 'true', 'false', 'undefined' ],\n        unsupported: false\n      },\n      'aria-haspopup': {\n        type: 'nmtoken',\n        allowEmpty: true,\n        values: [ 'true', 'false', 'menu', 'listbox', 'tree', 'grid', 'dialog' ],\n        unsupported: false\n      },\n      'aria-hidden': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-invalid': {\n        type: 'nmtoken',\n        allowEmpty: true,\n        values: [ 'true', 'false', 'spelling', 'grammar' ],\n        unsupported: false\n      },\n      'aria-keyshortcuts': {\n        type: 'string',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-label': {\n        type: 'string',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-labelledby': {\n        type: 'idrefs',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-level': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-live': {\n        type: 'nmtoken',\n        values: [ 'off', 'polite', 'assertive' ],\n        unsupported: false\n      },\n      'aria-modal': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-multiline': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-multiselectable': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-orientation': {\n        type: 'nmtoken',\n        values: [ 'horizontal', 'vertical' ],\n        unsupported: false\n      },\n      'aria-owns': {\n        type: 'idrefs',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-placeholder': {\n        type: 'string',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-posinset': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-pressed': {\n        type: 'nmtoken',\n        values: [ 'true', 'false', 'mixed', 'undefined' ],\n        unsupported: false\n      },\n      'aria-readonly': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-relevant': {\n        type: 'nmtokens',\n        values: [ 'additions', 'removals', 'text', 'all' ],\n        unsupported: false\n      },\n      'aria-required': {\n        type: 'boolean',\n        values: [ 'true', 'false' ],\n        unsupported: false\n      },\n      'aria-roledescription': {\n        type: 'string',\n        allowEmpty: true,\n        unsupported: false\n      },\n      'aria-rowcount': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-rowindex': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-rowspan': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-selected': {\n        type: 'nmtoken',\n        values: [ 'true', 'false', 'undefined' ],\n        unsupported: false\n      },\n      'aria-setsize': {\n        type: 'int',\n        unsupported: false\n      },\n      'aria-sort': {\n        type: 'nmtoken',\n        values: [ 'ascending', 'descending', 'other', 'none' ],\n        unsupported: false\n      },\n      'aria-valuemax': {\n        type: 'decimal',\n        unsupported: false\n      },\n      'aria-valuemin': {\n        type: 'decimal',\n        unsupported: false\n      },\n      'aria-valuenow': {\n        type: 'decimal',\n        unsupported: false\n      },\n      'aria-valuetext': {\n        type: 'string',\n        unsupported: false\n      }\n    };\n    lookupTable.globalAttributes = [ 'aria-atomic', 'aria-busy', 'aria-controls', 'aria-current', 'aria-describedby', 'aria-details', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-keyshortcuts', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant', 'aria-roledescription' ];\n    lookupTable.role = {\n      alert: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      alertdialog: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-modal', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'dialog', 'section' ]\n      },\n      application: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage', 'aria-activedescendant' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'article', 'audio', 'embed', 'iframe', 'object', 'section', 'svg', 'video' ]\n      },\n      article: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'article' ],\n        unsupported: false\n      },\n      banner: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'header' ],\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      button: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-pressed', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        implicit: [ 'button', 'input[type=\"button\"]', 'input[type=\"image\"]', 'input[type=\"reset\"]', 'input[type=\"submit\"]', 'summary' ],\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      cell: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'row' ],\n        implicit: [ 'td', 'th' ],\n        unsupported: false\n      },\n      checkbox: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-checked', 'aria-required', 'aria-readonly', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        implicit: [ 'input[type=\"checkbox\"]' ],\n        unsupported: false,\n        allowedElements: [ 'button' ]\n      },\n      columnheader: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-required', 'aria-readonly', 'aria-selected', 'aria-sort', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'row' ],\n        implicit: [ 'th' ],\n        unsupported: false\n      },\n      combobox: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-autocomplete', 'aria-required', 'aria-activedescendant', 'aria-orientation', 'aria-errormessage' ],\n          required: [ 'aria-expanded' ]\n        },\n        owned: {\n          all: [ 'listbox', 'tree', 'grid', 'dialog', 'textbox' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: 'input',\n          properties: {\n            type: [ 'text', 'search', 'tel', 'url', 'email' ]\n          }\n        } ]\n      },\n      command: {\n        nameFrom: [ 'author' ],\n        type: 'abstract',\n        unsupported: false\n      },\n      complementary: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'aside' ],\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      composite: {\n        nameFrom: [ 'author' ],\n        type: 'abstract',\n        unsupported: false\n      },\n      contentinfo: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'footer' ],\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      definition: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'dd', 'dfn' ],\n        unsupported: false\n      },\n      dialog: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-modal', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'dialog' ],\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      directory: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'ol', 'ul' ]\n      },\n      document: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'body' ],\n        unsupported: false,\n        allowedElements: [ 'article', 'embed', 'iframe', 'object', 'section', 'svg' ]\n      },\n      'doc-abstract': {\n        type: 'section',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-acknowledgments': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-afterword': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-appendix': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-backlink': {\n        type: 'link',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      'doc-biblioentry': {\n        type: 'listitem',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: [ 'doc-bibliography' ],\n        unsupported: false,\n        allowedElements: [ 'li' ]\n      },\n      'doc-bibliography': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'doc-biblioentry' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-biblioref': {\n        type: 'link',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      'doc-chapter': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-colophon': {\n        type: 'section',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-conclusion': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-cover': {\n        type: 'img',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false\n      },\n      'doc-credit': {\n        type: 'section',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-credits': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-dedication': {\n        type: 'section',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-endnote': {\n        type: 'listitem',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: [ 'doc-endnotes' ],\n        unsupported: false,\n        allowedElements: [ 'li' ]\n      },\n      'doc-endnotes': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'doc-endnote' ]\n        },\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-epigraph': {\n        type: 'section',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false\n      },\n      'doc-epilogue': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-errata': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-example': {\n        type: 'section',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'aside', 'section' ]\n      },\n      'doc-footnote': {\n        type: 'section',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'aside', 'footer', 'header' ]\n      },\n      'doc-foreword': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-glossary': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: [ 'term', 'definition' ],\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'dl' ]\n      },\n      'doc-glossref': {\n        type: 'link',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author', 'contents' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      'doc-index': {\n        type: 'navigation',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'nav', 'section' ]\n      },\n      'doc-introduction': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-noteref': {\n        type: 'link',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author', 'contents' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      'doc-notice': {\n        type: 'note',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-pagebreak': {\n        type: 'separator',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'hr' ]\n      },\n      'doc-pagelist': {\n        type: 'navigation',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'nav', 'section' ]\n      },\n      'doc-part': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-preface': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-prologue': {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-pullquote': {\n        type: 'none',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'aside', 'section' ]\n      },\n      'doc-qna': {\n        type: 'section',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      'doc-subtitle': {\n        type: 'sectionhead',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: {\n          nodeName: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ]\n        }\n      },\n      'doc-tip': {\n        type: 'note',\n        attributes: {\n          allowed: [ 'aria-expanded' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'aside' ]\n      },\n      'doc-toc': {\n        type: 'navigation',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        namefrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'nav', 'section' ]\n      },\n      feed: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'article' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'article', 'aside', 'section' ]\n      },\n      figure: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        implicit: [ 'figure' ],\n        unsupported: false\n      },\n      form: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'form' ],\n        unsupported: false\n      },\n      grid: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-colcount', 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-rowcount', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'rowgroup', 'row' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'table' ],\n        unsupported: false\n      },\n      gridcell: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-selected', 'aria-readonly', 'aria-required', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'row' ],\n        implicit: [ 'td', 'th' ],\n        unsupported: false\n      },\n      group: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'details', 'optgroup' ],\n        unsupported: false,\n        allowedElements: [ 'dl', 'figcaption', 'fieldset', 'figure', 'footer', 'header', 'ol', 'ul' ]\n      },\n      heading: {\n        type: 'structure',\n        attributes: {\n          required: [ 'aria-level' ],\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        implicit: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ],\n        unsupported: false\n      },\n      img: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'img' ],\n        unsupported: false,\n        allowedElements: [ 'embed', 'iframe', 'object', 'svg' ]\n      },\n      input: {\n        nameFrom: [ 'author' ],\n        type: 'abstract',\n        unsupported: false\n      },\n      landmark: {\n        nameFrom: [ 'author' ],\n        type: 'abstract',\n        unsupported: false\n      },\n      link: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        implicit: [ 'a[href]', 'area[href]' ],\n        unsupported: false,\n        allowedElements: [ 'button', {\n          nodeName: 'input',\n          properties: {\n            type: [ 'image', 'button' ]\n          }\n        } ]\n      },\n      list: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: {\n          all: [ 'listitem' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'ol', 'ul', 'dl' ],\n        unsupported: false\n      },\n      listbox: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-multiselectable', 'aria-readonly', 'aria-required', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n        },\n        owned: {\n          all: [ 'option' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'select' ],\n        unsupported: false,\n        allowedElements: [ 'ol', 'ul' ]\n      },\n      listitem: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'list' ],\n        implicit: [ 'li', 'dt' ],\n        unsupported: false\n      },\n      log: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      main: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'main' ],\n        unsupported: false,\n        allowedElements: [ 'article', 'section' ]\n      },\n      marquee: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      math: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'math' ],\n        unsupported: false\n      },\n      menu: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'menuitem', 'menuitemradio', 'menuitemcheckbox' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'menu[type=\"context\"]' ],\n        unsupported: false,\n        allowedElements: [ 'ol', 'ul' ]\n      },\n      menubar: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'menuitem', 'menuitemradio', 'menuitemcheckbox' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'ol', 'ul' ]\n      },\n      menuitem: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'menu', 'menubar' ],\n        implicit: [ 'menuitem[type=\"command\"]' ],\n        unsupported: false,\n        allowedElements: [ 'button', 'li', {\n          nodeName: 'iput',\n          properties: {\n            type: [ 'image', 'button' ]\n          }\n        }, {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      menuitemcheckbox: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-checked', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'menu', 'menubar' ],\n        implicit: [ 'menuitem[type=\"checkbox\"]' ],\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: [ 'button', 'li' ]\n        }, {\n          nodeName: 'input',\n          properties: {\n            type: [ 'checkbox', 'image', 'button' ]\n          }\n        }, {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      menuitemradio: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-checked', 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'menu', 'menubar' ],\n        implicit: [ 'menuitem[type=\"radio\"]' ],\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: [ 'button', 'li' ]\n        }, {\n          nodeName: 'input',\n          properties: {\n            type: [ 'image', 'button', 'radio' ]\n          }\n        }, {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      navigation: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'nav' ],\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      none: {\n        type: 'structure',\n        attributes: null,\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: [ 'article', 'aside', 'dl', 'embed', 'figcaption', 'fieldset', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'iframe', 'li', 'ol', 'section', 'ul' ]\n        }, {\n          nodeName: 'img',\n          attributes: {\n            alt: isNotNull\n          }\n        } ]\n      },\n      note: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'aside' ]\n      },\n      option: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-checked', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'listbox' ],\n        implicit: [ 'option' ],\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: [ 'button', 'li' ]\n        }, {\n          nodeName: 'input',\n          properties: {\n            type: [ 'checkbox', 'button' ]\n          }\n        }, {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      presentation: {\n        type: 'structure',\n        attributes: null,\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: [ 'article', 'aside', 'dl', 'embed', 'figcaption', 'fieldset', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'iframe', 'li', 'ol', 'section', 'ul' ]\n        }, {\n          nodeName: 'img',\n          attributes: {\n            alt: isNotNull\n          }\n        } ]\n      },\n      progressbar: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-valuetext', 'aria-valuenow', 'aria-valuemax', 'aria-valuemin', 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'progress' ],\n        unsupported: false\n      },\n      radio: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-required', 'aria-errormessage', 'aria-checked' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        implicit: [ 'input[type=\"radio\"]' ],\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: [ 'button', 'li' ]\n        }, {\n          nodeName: 'input',\n          properties: {\n            type: [ 'image', 'button' ]\n          }\n        } ]\n      },\n      radiogroup: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-required', 'aria-expanded', 'aria-readonly', 'aria-errormessage', 'aria-orientation' ]\n        },\n        owned: {\n          all: [ 'radio' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: {\n          nodeName: [ 'ol', 'ul', 'fieldset' ]\n        }\n      },\n      range: {\n        nameFrom: [ 'author' ],\n        type: 'abstract',\n        unsupported: false\n      },\n      region: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'section[aria-label]', 'section[aria-labelledby]', 'section[title]' ],\n        unsupported: false,\n        allowedElements: {\n          nodeName: [ 'article', 'aside' ]\n        }\n      },\n      roletype: {\n        type: 'abstract',\n        unsupported: false\n      },\n      row: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-colindex', 'aria-expanded', 'aria-level', 'aria-selected', 'aria-rowindex', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'cell', 'columnheader', 'rowheader', 'gridcell' ]\n        },\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'rowgroup', 'grid', 'treegrid', 'table' ],\n        implicit: [ 'tr' ],\n        unsupported: false\n      },\n      rowgroup: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: {\n          all: [ 'row' ]\n        },\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'grid', 'table', 'treegrid' ],\n        implicit: [ 'tbody', 'thead', 'tfoot' ],\n        unsupported: false\n      },\n      rowheader: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-required', 'aria-readonly', 'aria-selected', 'aria-sort', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'row' ],\n        implicit: [ 'th' ],\n        unsupported: false\n      },\n      scrollbar: {\n        type: 'widget',\n        attributes: {\n          required: [ 'aria-controls', 'aria-valuenow' ],\n          allowed: [ 'aria-valuetext', 'aria-orientation', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false\n      },\n      search: {\n        type: 'landmark',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: {\n          nodeName: [ 'aside', 'form', 'section' ]\n        }\n      },\n      searchbox: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required', 'aria-placeholder', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'input[type=\"search\"]' ],\n        unsupported: false,\n        allowedElements: {\n          nodeName: 'input',\n          properties: {\n            type: 'text'\n          }\n        }\n      },\n      section: {\n        nameFrom: [ 'author', 'contents' ],\n        type: 'abstract',\n        unsupported: false\n      },\n      sectionhead: {\n        nameFrom: [ 'author', 'contents' ],\n        type: 'abstract',\n        unsupported: false\n      },\n      select: {\n        nameFrom: [ 'author' ],\n        type: 'abstract',\n        unsupported: false\n      },\n      separator: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-orientation', 'aria-valuenow', 'aria-valuemax', 'aria-valuemin', 'aria-valuetext', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'hr' ],\n        unsupported: false,\n        allowedElements: [ 'li' ]\n      },\n      slider: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-valuetext', 'aria-orientation', 'aria-readonly', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ],\n          required: [ 'aria-valuenow' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'input[type=\"range\"]' ],\n        unsupported: false\n      },\n      spinbutton: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-valuetext', 'aria-required', 'aria-readonly', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ],\n          required: [ 'aria-valuenow' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'input[type=\"number\"]' ],\n        unsupported: false,\n        allowedElements: {\n          nodeName: 'input',\n          properties: {\n            type: [ 'text', 'tel' ]\n          }\n        }\n      },\n      status: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'output' ],\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      structure: {\n        type: 'abstract',\n        unsupported: false\n      },\n      switch: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-errormessage' ],\n          required: [ 'aria-checked' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'button', {\n          nodeName: 'input',\n          properties: {\n            type: [ 'checkbox', 'image', 'button' ]\n          }\n        }, {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      tab: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-selected', 'aria-expanded', 'aria-setsize', 'aria-posinset', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'tablist' ],\n        unsupported: false,\n        allowedElements: [ {\n          nodeName: [ 'button', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li' ]\n        }, {\n          nodeName: 'input',\n          properties: {\n            type: 'button'\n          }\n        }, {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      table: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-colcount', 'aria-rowcount', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'rowgroup', 'row' ]\n        },\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        implicit: [ 'table' ],\n        unsupported: false\n      },\n      tablist: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-level', 'aria-multiselectable', 'aria-orientation', 'aria-errormessage' ]\n        },\n        owned: {\n          all: [ 'tab' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'ol', 'ul' ]\n      },\n      tabpanel: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'section' ]\n      },\n      term: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        implicit: [ 'dt' ],\n        unsupported: false\n      },\n      textbox: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required', 'aria-placeholder', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'input[type=\"text\"]', 'input[type=\"email\"]', 'input[type=\"password\"]', 'input[type=\"tel\"]', 'input[type=\"url\"]', 'input:not([type])', 'textarea' ],\n        unsupported: false\n      },\n      timer: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false\n      },\n      toolbar: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author' ],\n        context: null,\n        implicit: [ 'menu[type=\"toolbar\"]' ],\n        unsupported: false,\n        allowedElements: [ 'ol', 'ul' ]\n      },\n      tooltip: {\n        type: 'structure',\n        attributes: {\n          allowed: [ 'aria-expanded', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: null,\n        unsupported: false\n      },\n      tree: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-multiselectable', 'aria-required', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n        },\n        owned: {\n          all: [ 'treeitem' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false,\n        allowedElements: [ 'ol', 'ul' ]\n      },\n      treegrid: {\n        type: 'composite',\n        attributes: {\n          allowed: [ 'aria-activedescendant', 'aria-colcount', 'aria-expanded', 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-required', 'aria-rowcount', 'aria-orientation', 'aria-errormessage' ]\n        },\n        owned: {\n          one: [ 'rowgroup', 'row' ]\n        },\n        nameFrom: [ 'author' ],\n        context: null,\n        unsupported: false\n      },\n      treeitem: {\n        type: 'widget',\n        attributes: {\n          allowed: [ 'aria-checked', 'aria-selected', 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n        },\n        owned: null,\n        nameFrom: [ 'author', 'contents' ],\n        context: [ 'group', 'tree' ],\n        unsupported: false,\n        allowedElements: [ 'li', {\n          nodeName: 'a',\n          attributes: {\n            href: isNotNull\n          }\n        } ]\n      },\n      widget: {\n        type: 'abstract',\n        unsupported: false\n      },\n      window: {\n        nameFrom: [ 'author' ],\n        type: 'abstract',\n        unsupported: false\n      }\n    };\n    lookupTable.implicitHtmlRole = implicit_html_roles_default;\n    lookupTable.elementsAllowedNoRole = [ {\n      nodeName: [ 'base', 'body', 'caption', 'col', 'colgroup', 'datalist', 'dd', 'details', 'dt', 'head', 'html', 'keygen', 'label', 'legend', 'main', 'map', 'math', 'meta', 'meter', 'noscript', 'optgroup', 'param', 'picture', 'progress', 'script', 'source', 'style', 'template', 'textarea', 'title', 'track' ]\n    }, {\n      nodeName: 'area',\n      attributes: {\n        href: isNotNull\n      }\n    }, {\n      nodeName: 'input',\n      properties: {\n        type: [ 'color', 'data', 'datatime', 'file', 'hidden', 'month', 'number', 'password', 'range', 'reset', 'submit', 'time', 'week' ]\n      }\n    }, {\n      nodeName: 'link',\n      attributes: {\n        href: isNotNull\n      }\n    }, {\n      nodeName: 'menu',\n      attributes: {\n        type: 'context'\n      }\n    }, {\n      nodeName: 'menuitem',\n      attributes: {\n        type: [ 'command', 'checkbox', 'radio' ]\n      }\n    }, {\n      nodeName: 'select',\n      condition: function condition(vNode) {\n        if (!(vNode instanceof axe.AbstractVirtualNode)) {\n          vNode = axe.utils.getNodeFromTree(vNode);\n        }\n        return Number(vNode.attr('size')) > 1;\n      },\n      properties: {\n        multiple: true\n      }\n    }, {\n      nodeName: [ 'clippath', 'cursor', 'defs', 'desc', 'feblend', 'fecolormatrix', 'fecomponenttransfer', 'fecomposite', 'feconvolvematrix', 'fediffuselighting', 'fedisplacementmap', 'fedistantlight', 'fedropshadow', 'feflood', 'fefunca', 'fefuncb', 'fefuncg', 'fefuncr', 'fegaussianblur', 'feimage', 'femerge', 'femergenode', 'femorphology', 'feoffset', 'fepointlight', 'fespecularlighting', 'fespotlight', 'fetile', 'feturbulence', 'filter', 'hatch', 'hatchpath', 'lineargradient', 'marker', 'mask', 'meshgradient', 'meshpatch', 'meshrow', 'metadata', 'mpath', 'pattern', 'radialgradient', 'solidcolor', 'stop', 'switch', 'view' ]\n    } ];\n    lookupTable.elementsAllowedAnyRole = [ {\n      nodeName: 'a',\n      attributes: {\n        href: isNull\n      }\n    }, {\n      nodeName: 'img',\n      attributes: {\n        alt: isNull\n      }\n    }, {\n      nodeName: [ 'abbr', 'address', 'canvas', 'div', 'p', 'pre', 'blockquote', 'ins', 'del', 'output', 'span', 'table', 'tbody', 'thead', 'tfoot', 'td', 'em', 'strong', 'small', 's', 'cite', 'q', 'dfn', 'abbr', 'time', 'code', 'var', 'samp', 'kbd', 'sub', 'sup', 'i', 'b', 'u', 'mark', 'ruby', 'rt', 'rp', 'bdi', 'bdo', 'br', 'wbr', 'th', 'tr' ]\n    } ];\n    lookupTable.evaluateRoleForElement = {\n      A: function A(_ref83) {\n        var node = _ref83.node, out = _ref83.out;\n        if (node.namespaceURI === 'http://www.w3.org/2000/svg') {\n          return true;\n        }\n        if (node.href.length) {\n          return out;\n        }\n        return true;\n      },\n      AREA: function AREA(_ref84) {\n        var node = _ref84.node;\n        return !node.href;\n      },\n      BUTTON: function BUTTON(_ref85) {\n        var node = _ref85.node, role = _ref85.role, out = _ref85.out;\n        if (node.getAttribute('type') === 'menu') {\n          return role === 'menuitem';\n        }\n        return out;\n      },\n      IMG: function IMG(_ref86) {\n        var node = _ref86.node, role = _ref86.role, out = _ref86.out;\n        switch (node.alt) {\n         case null:\n          return out;\n\n         case '':\n          return role === 'presentation' || role === 'none';\n\n         default:\n          return role !== 'presentation' && role !== 'none';\n        }\n      },\n      INPUT: function INPUT(_ref87) {\n        var node = _ref87.node, role = _ref87.role, out = _ref87.out;\n        switch (node.type) {\n         case 'button':\n         case 'image':\n          return out;\n\n         case 'checkbox':\n          if (role === 'button' && node.hasAttribute('aria-pressed')) {\n            return true;\n          }\n          return out;\n\n         case 'radio':\n          return role === 'menuitemradio';\n\n         case 'text':\n          return role === 'combobox' || role === 'searchbox' || role === 'spinbutton';\n\n         case 'tel':\n          return role === 'combobox' || role === 'spinbutton';\n\n         case 'url':\n         case 'search':\n         case 'email':\n          return role === 'combobox';\n\n         default:\n          return false;\n        }\n      },\n      LI: function LI(_ref88) {\n        var node = _ref88.node, out = _ref88.out;\n        var hasImplicitListitemRole = axe.utils.matchesSelector(node, 'ol li, ul li');\n        if (hasImplicitListitemRole) {\n          return out;\n        }\n        return true;\n      },\n      MENU: function MENU(_ref89) {\n        var node = _ref89.node;\n        if (node.getAttribute('type') === 'context') {\n          return false;\n        }\n        return true;\n      },\n      OPTION: function OPTION(_ref90) {\n        var node = _ref90.node;\n        var withinOptionList = axe.utils.matchesSelector(node, 'select > option, datalist > option, optgroup > option');\n        return !withinOptionList;\n      },\n      SELECT: function SELECT(_ref91) {\n        var node = _ref91.node, role = _ref91.role;\n        return !node.multiple && node.size <= 1 && role === 'menu';\n      },\n      SVG: function SVG(_ref92) {\n        var node = _ref92.node, out = _ref92.out;\n        if (node.parentNode && node.parentNode.namespaceURI === 'http://www.w3.org/2000/svg') {\n          return true;\n        }\n        return out;\n      }\n    };\n    lookupTable.rolesOfType = {\n      widget: [ 'button', 'checkbox', 'dialog', 'gridcell', 'link', 'log', 'marquee', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'scrollbar', 'searchbox', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'tabpanel', 'textbox', 'timer', 'tooltip', 'tree', 'treeitem' ]\n    };\n    var lookup_table_default = lookupTable;\n    function implicitNodes(role) {\n      var implicit = null;\n      var roles = lookup_table_default.role[role];\n      if (roles && roles.implicit) {\n        implicit = _clone(roles.implicit);\n      }\n      return implicit;\n    }\n    var implicit_nodes_default = implicitNodes;\n    function isAccessibleRef(node) {\n      return !!get_accessible_refs_default(node).length;\n    }\n    var is_accessible_ref_default = isAccessibleRef;\n    function _isComboboxPopup(virtualNode) {\n      var _popupRoles;\n      var _ref93 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, popupRoles = _ref93.popupRoles;\n      var role = get_role_default(virtualNode);\n      (_popupRoles = popupRoles) !== null && _popupRoles !== void 0 ? _popupRoles : popupRoles = aria_attrs_default['aria-haspopup'].values;\n      if (!popupRoles.includes(role)) {\n        return false;\n      }\n      var vParent = nearestParentWithRole(virtualNode);\n      if (isCombobox(vParent)) {\n        return true;\n      }\n      var id = virtualNode.props.id;\n      if (!id) {\n        return false;\n      }\n      if (!virtualNode.actualNode) {\n        throw new Error('Unable to determine combobox popup without an actualNode');\n      }\n      var root = get_root_node_default(virtualNode.actualNode);\n      var ownedCombobox = root.querySelectorAll('[aria-owns~=\"'.concat(id, '\"][role~=\"combobox\"]:not(select),\\n     [aria-controls~=\"').concat(id, '\"][role~=\"combobox\"]:not(select)'));\n      return Array.from(ownedCombobox).some(isCombobox);\n    }\n    var isCombobox = function isCombobox(node) {\n      return node && get_role_default(node) === 'combobox';\n    };\n    function nearestParentWithRole(vNode) {\n      while (vNode = vNode.parent) {\n        if (get_role_default(vNode, {\n          noPresentational: true\n        }) !== null) {\n          return vNode;\n        }\n      }\n      return null;\n    }\n    function label2(node) {\n      node = get_node_from_tree_default(node);\n      return label_virtual_default(node);\n    }\n    var label_default2 = label2;\n    function requiredAttr(role) {\n      var roleDef = standards_default.ariaRoles[role];\n      if (!roleDef || !Array.isArray(roleDef.requiredAttrs)) {\n        return [];\n      }\n      return _toConsumableArray(roleDef.requiredAttrs);\n    }\n    var required_attr_default = requiredAttr;\n    function requiredContext(role) {\n      var roleDef = standards_default.ariaRoles[role];\n      if (!roleDef || !Array.isArray(roleDef.requiredContext)) {\n        return null;\n      }\n      return _toConsumableArray(roleDef.requiredContext);\n    }\n    var required_context_default = requiredContext;\n    function requiredOwned(role) {\n      var roleDef = standards_default.ariaRoles[role];\n      if (!roleDef || !Array.isArray(roleDef.requiredOwned)) {\n        return null;\n      }\n      return _toConsumableArray(roleDef.requiredOwned);\n    }\n    var required_owned_default = requiredOwned;\n    function validateAttrValue(vNode, attr) {\n      vNode = vNode instanceof abstract_virtual_node_default ? vNode : get_node_from_tree_default(vNode);\n      var matches4;\n      var list;\n      var value = vNode.attr(attr);\n      var attrInfo = standards_default.ariaAttrs[attr];\n      if (!attrInfo) {\n        return true;\n      }\n      if (attrInfo.allowEmpty && (!value || value.trim() === '')) {\n        return true;\n      }\n      switch (attrInfo.type) {\n       case 'boolean':\n        return [ 'true', 'false' ].includes(value.toLowerCase());\n\n       case 'nmtoken':\n        return typeof value === 'string' && attrInfo.values.includes(value.toLowerCase());\n\n       case 'nmtokens':\n        list = token_list_default(value);\n        return list.reduce(function(result, token) {\n          return result && attrInfo.values.includes(token);\n        }, list.length !== 0);\n\n       case 'idref':\n        try {\n          var doc = get_root_node_default2(vNode.actualNode);\n          return !!(value && doc.getElementById(value));\n        } catch (_unused6) {\n          throw new TypeError('Cannot resolve id references for partial DOM');\n        }\n\n       case 'idrefs':\n        return idrefs_default(vNode, attr).some(function(node) {\n          return !!node;\n        });\n\n       case 'string':\n        return value.trim() !== '';\n\n       case 'decimal':\n        matches4 = value.match(/^[-+]?([0-9]*)\\.?([0-9]*)$/);\n        return !!(matches4 && (matches4[1] || matches4[2]));\n\n       case 'int':\n        var minValue = typeof attrInfo.minValue !== 'undefined' ? attrInfo.minValue : -Infinity;\n        return /^[-+]?[0-9]+$/.test(value) && parseInt(value) >= minValue;\n      }\n    }\n    var validate_attr_value_default = validateAttrValue;\n    function validateAttr(att) {\n      var attrDefinition = standards_default.ariaAttrs[att];\n      return !!attrDefinition;\n    }\n    var validate_attr_default = validateAttr;\n    function tdHasHeaderEvaluate(node) {\n      var badCells = [];\n      var cells = get_all_cells_default(node);\n      var tableGrid = to_grid_default(node);\n      cells.forEach(function(cell) {\n        if (has_content_default(cell) && is_data_cell_default(cell) && !label_default2(cell)) {\n          var hasHeaders = get_headers_default(cell, tableGrid).some(function(header) {\n            return header !== null && !!has_content_default(header);\n          });\n          if (!hasHeaders) {\n            badCells.push(cell);\n          }\n        }\n      });\n      if (badCells.length) {\n        this.relatedNodes(badCells);\n        return false;\n      }\n      return true;\n    }\n    var td_has_header_evaluate_default = tdHasHeaderEvaluate;\n    function scopeValueEvaluate(node, options) {\n      var value = node.getAttribute('scope').toLowerCase();\n      return options.values.indexOf(value) !== -1;\n    }\n    var scope_value_evaluate_default = scopeValueEvaluate;\n    var same_caption_summary_evaluate_default = sameCaptionSummaryEvaluate;\n    function sameCaptionSummaryEvaluate(node, options, virtualNode) {\n      if (virtualNode.children === void 0) {\n        return void 0;\n      }\n      var summary = virtualNode.attr('summary');\n      var captionNode = virtualNode.children.find(isCaptionNode);\n      var caption = captionNode ? sanitize_default(subtree_text_default(captionNode)) : false;\n      if (!caption || !summary) {\n        return false;\n      }\n      return sanitize_default(summary).toLowerCase() === sanitize_default(caption).toLowerCase();\n    }\n    function isCaptionNode(virtualNode) {\n      return virtualNode.props.nodeName === 'caption';\n    }\n    function html5ScopeEvaluate(node) {\n      if (!is_html5_default(document)) {\n        return true;\n      }\n      return node.nodeName.toUpperCase() === 'TH';\n    }\n    var html5_scope_evaluate_default = html5ScopeEvaluate;\n    function captionFakedEvaluate(node) {\n      var table = to_grid_default(node);\n      var firstRow = table[0];\n      if (table.length <= 1 || firstRow.length <= 1 || node.rows.length <= 1) {\n        return true;\n      }\n      return firstRow.reduce(function(out, curr, i) {\n        return out || curr !== firstRow[i + 1] && firstRow[i + 1] !== void 0;\n      }, false);\n    }\n    var caption_faked_evaluate_default = captionFakedEvaluate;\n    function svgNonEmptyTitleEvaluate(node, options, virtualNode) {\n      if (!virtualNode.children) {\n        return void 0;\n      }\n      var titleNode = virtualNode.children.find(function(_ref94) {\n        var props = _ref94.props;\n        return props.nodeName === 'title';\n      });\n      if (!titleNode) {\n        this.data({\n          messageKey: 'noTitle'\n        });\n        return false;\n      }\n      try {\n        var titleText2 = subtree_text_default(titleNode, {\n          includeHidden: true\n        }).trim();\n        if (titleText2 === '') {\n          this.data({\n            messageKey: 'emptyTitle'\n          });\n          return false;\n        }\n      } catch (_unused7) {\n        return void 0;\n      }\n      return true;\n    }\n    var svg_non_empty_title_evaluate_default = svgNonEmptyTitleEvaluate;\n    var standards_exports = {};\n    __export(standards_exports, {\n      getAriaRolesByType: function getAriaRolesByType() {\n        return get_aria_roles_by_type_default;\n      },\n      getAriaRolesSupportingNameFromContent: function getAriaRolesSupportingNameFromContent() {\n        return get_aria_roles_supporting_name_from_content_default;\n      },\n      getElementSpec: function getElementSpec() {\n        return get_element_spec_default;\n      },\n      getElementsByContentType: function getElementsByContentType() {\n        return get_elements_by_content_type_default;\n      },\n      getGlobalAriaAttrs: function getGlobalAriaAttrs() {\n        return get_global_aria_attrs_default;\n      },\n      implicitHtmlRoles: function implicitHtmlRoles() {\n        return implicit_html_roles_default;\n      }\n    });\n    function presentationalRoleEvaluate(node, options, virtualNode) {\n      var explicitRole2 = get_explicit_role_default(virtualNode);\n      if ([ 'presentation', 'none' ].includes(explicitRole2) && [ 'iframe', 'frame' ].includes(virtualNode.props.nodeName) && virtualNode.hasAttr('title')) {\n        this.data({\n          messageKey: 'iframe',\n          nodeName: virtualNode.props.nodeName\n        });\n        return false;\n      }\n      var role = get_role_default(virtualNode);\n      if ([ 'presentation', 'none' ].includes(role)) {\n        this.data({\n          role: role\n        });\n        return true;\n      }\n      if (![ 'presentation', 'none' ].includes(explicitRole2)) {\n        return false;\n      }\n      var hasGlobalAria = get_global_aria_attrs_default().some(function(attr) {\n        return virtualNode.hasAttr(attr);\n      });\n      var focusable = _isFocusable(virtualNode);\n      var messageKey;\n      if (hasGlobalAria && !focusable) {\n        messageKey = 'globalAria';\n      } else if (!hasGlobalAria && focusable) {\n        messageKey = 'focusable';\n      } else {\n        messageKey = 'both';\n      }\n      this.data({\n        messageKey: messageKey,\n        role: role\n      });\n      return false;\n    }\n    function nonEmptyIfPresentEvaluate(node, options, virtualNode) {\n      var nodeName2 = virtualNode.props.nodeName;\n      var type2 = (virtualNode.attr('type') || '').toLowerCase();\n      var label3 = virtualNode.attr('value');\n      if (label3) {\n        this.data({\n          messageKey: 'has-label'\n        });\n      }\n      if (nodeName2 === 'input' && [ 'submit', 'reset' ].includes(type2)) {\n        return label3 === null;\n      }\n      return false;\n    }\n    var non_empty_if_present_evaluate_default = nonEmptyIfPresentEvaluate;\n    function isOnScreenEvaluate(node) {\n      return _isVisibleOnScreen(node);\n    }\n    var is_on_screen_evaluate_default = isOnScreenEvaluate;\n    function inlineStyleProperty(node, options) {\n      var cssProperty = options.cssProperty, absoluteValues = options.absoluteValues, minValue = options.minValue, maxValue = options.maxValue, _options$normalValue = options.normalValue, normalValue = _options$normalValue === void 0 ? 0 : _options$normalValue, noImportant = options.noImportant, multiLineOnly = options.multiLineOnly;\n      if (!noImportant && node.style.getPropertyPriority(cssProperty) !== 'important' || multiLineOnly && !_isMultiline(node)) {\n        return true;\n      }\n      var data = {};\n      if (typeof minValue === 'number') {\n        data.minValue = minValue;\n      }\n      if (typeof maxValue === 'number') {\n        data.maxValue = maxValue;\n      }\n      var declaredPropValue = node.style.getPropertyValue(cssProperty);\n      if ([ 'inherit', 'unset', 'revert', 'revert-layer' ].includes(declaredPropValue)) {\n        this.data(_extends({\n          value: declaredPropValue\n        }, data));\n        return true;\n      }\n      var value = getNumberValue(node, {\n        absoluteValues: absoluteValues,\n        cssProperty: cssProperty,\n        normalValue: normalValue\n      });\n      this.data(_extends({\n        value: value\n      }, data));\n      if (typeof value !== 'number') {\n        return void 0;\n      }\n      if ((typeof minValue !== 'number' || value >= minValue) && (typeof maxValue !== 'number' || value <= maxValue)) {\n        return true;\n      }\n      return false;\n    }\n    function getNumberValue(domNode, _ref95) {\n      var cssProperty = _ref95.cssProperty, absoluteValues = _ref95.absoluteValues, normalValue = _ref95.normalValue;\n      var computedStyle = window.getComputedStyle(domNode);\n      var cssPropValue = computedStyle.getPropertyValue(cssProperty);\n      if (cssPropValue === 'normal') {\n        return normalValue;\n      }\n      var parsedValue = parseFloat(cssPropValue);\n      if (absoluteValues) {\n        return parsedValue;\n      }\n      var fontSize = parseFloat(computedStyle.getPropertyValue('font-size'));\n      var value = Math.round(parsedValue / fontSize * 100) / 100;\n      if (isNaN(value)) {\n        return cssPropValue;\n      }\n      return value;\n    }\n    function hasAltEvaluate(node, options, virtualNode) {\n      var nodeName2 = virtualNode.props.nodeName;\n      if (![ 'img', 'input', 'area' ].includes(nodeName2)) {\n        return false;\n      }\n      return virtualNode.hasAttr('alt');\n    }\n    var has_alt_evaluate_default = hasAltEvaluate;\n    function existsEvaluate() {\n      return void 0;\n    }\n    var exists_evaluate_default = existsEvaluate;\n    function docHasTitleEvaluate() {\n      var title = document.title;\n      return !!sanitize_default(title);\n    }\n    var doc_has_title_evaluate_default = docHasTitleEvaluate;\n    function avoidInlineSpacingEvaluate(node, options) {\n      var overriddenProperties = options.cssProperties.filter(function(property) {\n        if (node.style.getPropertyPriority(property) === 'important') {\n          return property;\n        }\n      });\n      if (overriddenProperties.length > 0) {\n        this.data(overriddenProperties);\n        return false;\n      }\n      return true;\n    }\n    var avoid_inline_spacing_evaluate_default = avoidInlineSpacingEvaluate;\n    function ariaLabelledbyEvaluate(node, options, virtualNode) {\n      try {\n        return !!sanitize_default(arialabelledby_text_default(virtualNode));\n      } catch (_unused8) {\n        return void 0;\n      }\n    }\n    var aria_labelledby_evaluate_default = ariaLabelledbyEvaluate;\n    function ariaLabelEvaluate(node, options, virtualNode) {\n      return !!sanitize_default(_arialabelText(virtualNode));\n    }\n    var aria_label_evaluate_default = ariaLabelEvaluate;\n    function duplicateIdEvaluate(node) {\n      var id = node.getAttribute('id').trim();\n      if (!id) {\n        return true;\n      }\n      var root = get_root_node_default2(node);\n      var matchingNodes = Array.from(root.querySelectorAll('[id=\"'.concat(escape_selector_default(id), '\"]'))).filter(function(foundNode) {\n        return foundNode !== node;\n      });\n      if (matchingNodes.length) {\n        this.relatedNodes(matchingNodes);\n      }\n      this.data(id);\n      return matchingNodes.length === 0;\n    }\n    var duplicate_id_evaluate_default = duplicateIdEvaluate;\n    function duplicateIdAfter(results) {\n      var uniqueIds = [];\n      return results.filter(function(r) {\n        if (uniqueIds.indexOf(r.data) === -1) {\n          uniqueIds.push(r.data);\n          return true;\n        }\n        return false;\n      });\n    }\n    var duplicate_id_after_default = duplicateIdAfter;\n    function uniqueFrameTitleEvaluate(node, options, vNode) {\n      var title = sanitize_default(vNode.attr('title')).toLowerCase();\n      this.data(title);\n      return true;\n    }\n    var unique_frame_title_evaluate_default = uniqueFrameTitleEvaluate;\n    function uniqueFrameTitleAfter(results) {\n      var titles = {};\n      results.forEach(function(r) {\n        titles[r.data] = titles[r.data] !== void 0 ? ++titles[r.data] : 0;\n      });\n      results.forEach(function(r) {\n        r.result = !!titles[r.data];\n      });\n      return results;\n    }\n    var unique_frame_title_after_default = uniqueFrameTitleAfter;\n    function skipLinkEvaluate(node) {\n      var target = get_element_by_reference_default(node, 'href');\n      if (target) {\n        return _isVisibleToScreenReaders(target) || void 0;\n      }\n      return false;\n    }\n    var skip_link_evaluate_default = skipLinkEvaluate;\n    var implicitAriaLiveRoles = [ 'alert', 'log', 'status' ];\n    function regionEvaluate(node, options, virtualNode) {\n      this.data({\n        isIframe: [ 'iframe', 'frame' ].includes(virtualNode.props.nodeName)\n      });\n      var regionlessNodes = cache_default.get('regionlessNodes', function() {\n        return getRegionlessNodes(options);\n      });\n      return !regionlessNodes.includes(virtualNode);\n    }\n    function getRegionlessNodes(options) {\n      var regionlessNodes = findRegionlessElms(axe._tree[0], options).map(function(vNode) {\n        while (vNode.parent && !vNode.parent._hasRegionDescendant && vNode.parent.actualNode !== document.body) {\n          vNode = vNode.parent;\n        }\n        return vNode;\n      }).filter(function(vNode, index, array) {\n        return array.indexOf(vNode) === index;\n      });\n      return regionlessNodes;\n    }\n    function findRegionlessElms(virtualNode, options) {\n      var node = virtualNode.actualNode;\n      if (get_role_default(virtualNode) === 'button' || isRegion(virtualNode, options) || [ 'iframe', 'frame' ].includes(virtualNode.props.nodeName) || _isSkipLink(virtualNode.actualNode) && get_element_by_reference_default(virtualNode.actualNode, 'href') || !_isVisibleToScreenReaders(node)) {\n        var vNode = virtualNode;\n        while (vNode) {\n          vNode._hasRegionDescendant = true;\n          vNode = vNode.parent;\n        }\n        if ([ 'iframe', 'frame' ].includes(virtualNode.props.nodeName)) {\n          return [ virtualNode ];\n        }\n        return [];\n      } else if (node !== document.body && has_content_default(node, true) && !isShallowlyHidden(virtualNode)) {\n        return [ virtualNode ];\n      } else {\n        return virtualNode.children.filter(function(_ref96) {\n          var actualNode = _ref96.actualNode;\n          return actualNode.nodeType === 1;\n        }).map(function(vNode) {\n          return findRegionlessElms(vNode, options);\n        }).reduce(function(a2, b2) {\n          return a2.concat(b2);\n        }, []);\n      }\n    }\n    function isShallowlyHidden(virtualNode) {\n      return [ 'none', 'presentation' ].includes(get_role_default(virtualNode)) && !hasChildTextNodes(virtualNode);\n    }\n    function isRegion(virtualNode, options) {\n      var node = virtualNode.actualNode;\n      var role = get_role_default(virtualNode);\n      var ariaLive = (node.getAttribute('aria-live') || '').toLowerCase().trim();\n      var landmarkRoles2 = get_aria_roles_by_type_default('landmark');\n      if ([ 'assertive', 'polite' ].includes(ariaLive) || implicitAriaLiveRoles.includes(role)) {\n        return true;\n      }\n      if (landmarkRoles2.includes(role)) {\n        return true;\n      }\n      if (options.regionMatcher && matches_default2(virtualNode, options.regionMatcher)) {\n        return true;\n      }\n      return false;\n    }\n    function regionAfter(results) {\n      var iframeResults = results.filter(function(r) {\n        return r.data.isIframe;\n      });\n      results.forEach(function(r) {\n        if (r.result || r.node.ancestry.length === 1) {\n          return;\n        }\n        var frameAncestry = r.node.ancestry.slice(0, -1);\n        var _iterator15 = _createForOfIteratorHelper(iframeResults), _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {\n            var iframeResult = _step15.value;\n            if (_matchAncestry(frameAncestry, iframeResult.node.ancestry)) {\n              r.result = iframeResult.result;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      });\n      iframeResults.forEach(function(r) {\n        if (!r.result) {\n          r.result = true;\n        }\n      });\n      return results;\n    }\n    var region_after_default = regionAfter;\n    function normalizeFontWeight(weight) {\n      switch (weight) {\n       case 'lighter':\n        return 100;\n\n       case 'normal':\n        return 400;\n\n       case 'bold':\n        return 700;\n\n       case 'bolder':\n        return 900;\n      }\n      weight = parseInt(weight);\n      return !isNaN(weight) ? weight : 400;\n    }\n    function getTextContainer(elm) {\n      var nextNode = elm;\n      var outerText = elm.textContent.trim();\n      var innerText = outerText;\n      while (innerText === outerText && nextNode !== void 0) {\n        var _i35 = -1;\n        elm = nextNode;\n        if (elm.children.length === 0) {\n          return elm;\n        }\n        do {\n          _i35++;\n          innerText = elm.children[_i35].textContent.trim();\n        } while (innerText === '' && _i35 + 1 < elm.children.length);\n        nextNode = elm.children[_i35];\n      }\n      return elm;\n    }\n    function getStyleValues(node) {\n      var style = window.getComputedStyle(getTextContainer(node));\n      return {\n        fontWeight: normalizeFontWeight(style.getPropertyValue('font-weight')),\n        fontSize: parseInt(style.getPropertyValue('font-size')),\n        isItalic: style.getPropertyValue('font-style') === 'italic'\n      };\n    }\n    function isHeaderStyle(styleA, styleB, margins) {\n      return margins.reduce(function(out, margin) {\n        return out || (!margin.size || styleA.fontSize / margin.size > styleB.fontSize) && (!margin.weight || styleA.fontWeight - margin.weight > styleB.fontWeight) && (!margin.italic || styleA.isItalic && !styleB.isItalic);\n      }, false);\n    }\n    function pAsHeadingEvaluate(node, options, virtualNode) {\n      var siblings = Array.from(node.parentNode.children);\n      var currentIndex = siblings.indexOf(node);\n      options = options || {};\n      var margins = options.margins || [];\n      var nextSibling = siblings.slice(currentIndex + 1).find(function(elm) {\n        return elm.nodeName.toUpperCase() === 'P';\n      });\n      var prevSibling = siblings.slice(0, currentIndex).reverse().find(function(elm) {\n        return elm.nodeName.toUpperCase() === 'P';\n      });\n      var currStyle = getStyleValues(node);\n      var nextStyle = nextSibling ? getStyleValues(nextSibling) : null;\n      var prevStyle = prevSibling ? getStyleValues(prevSibling) : null;\n      var optionsPassLength = options.passLength;\n      var optionsFailLength = options.failLength;\n      var headingLength = node.textContent.trim().length;\n      var paragraphLength = nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.textContent.trim().length;\n      if (headingLength > paragraphLength * optionsPassLength) {\n        return true;\n      }\n      if (!nextStyle || !isHeaderStyle(currStyle, nextStyle, margins)) {\n        return true;\n      }\n      var blockquote = find_up_virtual_default(virtualNode, 'blockquote');\n      if (blockquote && blockquote.nodeName.toUpperCase() === 'BLOCKQUOTE') {\n        return void 0;\n      }\n      if (prevStyle && !isHeaderStyle(currStyle, prevStyle, margins)) {\n        return void 0;\n      }\n      if (headingLength > paragraphLength * optionsFailLength) {\n        return void 0;\n      }\n      return false;\n    }\n    var p_as_heading_evaluate_default = pAsHeadingEvaluate;\n    var separatorRegex = /[;,\\s]/;\n    var validRedirectNumRegex = /^[0-9.]+$/;\n    function metaRefreshEvaluate(node, options, virtualNode) {\n      var _ref97 = options || {}, minDelay = _ref97.minDelay, maxDelay = _ref97.maxDelay;\n      var content = (virtualNode.attr('content') || '').trim();\n      var _content$split = content.split(separatorRegex), _content$split2 = _slicedToArray(_content$split, 1), redirectStr = _content$split2[0];\n      if (!redirectStr.match(validRedirectNumRegex)) {\n        return true;\n      }\n      var redirectDelay = parseFloat(redirectStr);\n      this.data({\n        redirectDelay: redirectDelay\n      });\n      if (typeof minDelay === 'number' && redirectDelay <= options.minDelay) {\n        return true;\n      }\n      if (typeof maxDelay === 'number' && redirectDelay > options.maxDelay) {\n        return true;\n      }\n      return false;\n    }\n    function internalLinkPresentEvaluate(node, options, virtualNode) {\n      var links = query_selector_all_default(virtualNode, 'a[href]');\n      return links.some(function(vLink) {\n        return /^#[^/!]/.test(vLink.attr('href'));\n      });\n    }\n    var internal_link_present_evaluate_default = internalLinkPresentEvaluate;\n    var commons_exports = {};\n    __export(commons_exports, {\n      aria: function aria() {\n        return aria_exports;\n      },\n      color: function color() {\n        return color_exports;\n      },\n      dom: function dom() {\n        return dom_exports;\n      },\n      forms: function forms() {\n        return forms_exports;\n      },\n      matches: function matches() {\n        return matches_default2;\n      },\n      math: function math() {\n        return math_exports;\n      },\n      standards: function standards() {\n        return standards_exports;\n      },\n      table: function table() {\n        return table_exports;\n      },\n      text: function text() {\n        return text_exports;\n      },\n      utils: function utils() {\n        return utils_exports;\n      }\n    });\n    var color_exports = {};\n    __export(color_exports, {\n      Color: function Color() {\n        return color_default;\n      },\n      centerPointOfRect: function centerPointOfRect() {\n        return center_point_of_rect_default;\n      },\n      elementHasImage: function elementHasImage() {\n        return element_has_image_default;\n      },\n      elementIsDistinct: function elementIsDistinct() {\n        return element_is_distinct_default;\n      },\n      filteredRectStack: function filteredRectStack() {\n        return filtered_rect_stack_default;\n      },\n      flattenColors: function flattenColors() {\n        return _flattenColors;\n      },\n      flattenShadowColors: function flattenShadowColors() {\n        return _flattenShadowColors;\n      },\n      getBackgroundColor: function getBackgroundColor() {\n        return _getBackgroundColor2;\n      },\n      getBackgroundStack: function getBackgroundStack() {\n        return _getBackgroundStack;\n      },\n      getContrast: function getContrast() {\n        return get_contrast_default;\n      },\n      getForegroundColor: function getForegroundColor() {\n        return _getForegroundColor;\n      },\n      getOwnBackgroundColor: function getOwnBackgroundColor() {\n        return get_own_background_color_default;\n      },\n      getRectStack: function getRectStack() {\n        return get_rect_stack_default;\n      },\n      getStackingContext: function getStackingContext() {\n        return _getStackingContext;\n      },\n      getStrokeColorsFromShadows: function getStrokeColorsFromShadows() {\n        return _getStrokeColorsFromShadows;\n      },\n      getTextShadowColors: function getTextShadowColors() {\n        return _getTextShadowColors;\n      },\n      hasValidContrastRatio: function hasValidContrastRatio() {\n        return has_valid_contrast_ratio_default;\n      },\n      incompleteData: function incompleteData() {\n        return incomplete_data_default;\n      },\n      parseTextShadows: function parseTextShadows() {\n        return _parseTextShadows;\n      },\n      stackingContextToColor: function stackingContextToColor() {\n        return _stackingContextToColor;\n      }\n    });\n    function centerPointOfRect(rect) {\n      if (rect.left > window.innerWidth) {\n        return void 0;\n      }\n      if (rect.top > window.innerHeight) {\n        return void 0;\n      }\n      var x = Math.min(Math.ceil(rect.left + rect.width / 2), window.innerWidth - 1);\n      var y = Math.min(Math.ceil(rect.top + rect.height / 2), window.innerHeight - 1);\n      return {\n        x: x,\n        y: y\n      };\n    }\n    var center_point_of_rect_default = centerPointOfRect;\n    function _getFonts(style) {\n      return style.getPropertyValue('font-family').split(/[,;]/g).map(function(font) {\n        return font.trim().toLowerCase();\n      });\n    }\n    function elementIsDistinct(node, ancestorNode) {\n      var nodeStyle = window.getComputedStyle(node);\n      if (nodeStyle.getPropertyValue('background-image') !== 'none') {\n        return true;\n      }\n      var hasBorder = [ 'border-bottom', 'border-top', 'outline' ].reduce(function(result, edge) {\n        var borderClr = new color_default();\n        borderClr.parseString(nodeStyle.getPropertyValue(edge + '-color'));\n        return result || nodeStyle.getPropertyValue(edge + '-style') !== 'none' && parseFloat(nodeStyle.getPropertyValue(edge + '-width')) > 0 && borderClr.alpha !== 0;\n      }, false);\n      if (hasBorder) {\n        return true;\n      }\n      var parentStyle = window.getComputedStyle(ancestorNode);\n      if (_getFonts(nodeStyle)[0] !== _getFonts(parentStyle)[0]) {\n        return true;\n      }\n      var hasStyle = [ 'text-decoration-line', 'text-decoration-style', 'font-weight', 'font-style', 'font-size' ].reduce(function(result, cssProp) {\n        return result || nodeStyle.getPropertyValue(cssProp) !== parentStyle.getPropertyValue(cssProp);\n      }, false);\n      var tDec = nodeStyle.getPropertyValue('text-decoration');\n      if (tDec.split(' ').length < 3) {\n        hasStyle = hasStyle || tDec !== parentStyle.getPropertyValue('text-decoration');\n      }\n      return hasStyle;\n    }\n    var element_is_distinct_default = elementIsDistinct;\n    function getRectStack2(elm) {\n      var boundingStack = get_element_stack_default(elm);\n      var filteredArr = get_text_element_stack_default(elm);\n      if (!filteredArr || filteredArr.length <= 1) {\n        return [ boundingStack ];\n      }\n      if (filteredArr.some(function(stack) {\n        return stack === void 0;\n      })) {\n        return null;\n      }\n      filteredArr.splice(0, 0, boundingStack);\n      return filteredArr;\n    }\n    var get_rect_stack_default = getRectStack2;\n    function filteredRectStack(elm) {\n      var rectStack = get_rect_stack_default(elm);\n      if (rectStack && rectStack.length === 1) {\n        return rectStack[0];\n      }\n      if (rectStack && rectStack.length > 1) {\n        var boundingStack = rectStack.shift();\n        var isSame;\n        rectStack.forEach(function(rectList, index) {\n          if (index === 0) {\n            return;\n          }\n          var rectA = rectStack[index - 1], rectB = rectStack[index];\n          isSame = rectA.every(function(element, elementIndex) {\n            return element === rectB[elementIndex];\n          }) || boundingStack.includes(elm);\n        });\n        if (!isSame) {\n          incomplete_data_default.set('bgColor', 'elmPartiallyObscuring');\n          return null;\n        }\n        return rectStack[0];\n      }\n      incomplete_data_default.set('bgColor', 'outsideViewport');\n      return null;\n    }\n    var filtered_rect_stack_default = filteredRectStack;\n    var nonSeparableBlendModes = [ 'hue', 'saturation', 'color', 'luminosity' ];\n    var blendFunctions = {\n      normal: function normal(Cb, Cs) {\n        return Cs;\n      },\n      multiply: function multiply(Cb, Cs) {\n        return Cs * Cb;\n      },\n      screen: function screen(Cb, Cs) {\n        return Cb + Cs - Cb * Cs;\n      },\n      overlay: function overlay(Cb, Cs) {\n        return this['hard-light'](Cs, Cb);\n      },\n      darken: function darken(Cb, Cs) {\n        return Math.min(Cb, Cs);\n      },\n      lighten: function lighten(Cb, Cs) {\n        return Math.max(Cb, Cs);\n      },\n      'color-dodge': function colorDodge(Cb, Cs) {\n        return Cb === 0 ? 0 : Cs === 1 ? 1 : Math.min(1, Cb / (1 - Cs));\n      },\n      'color-burn': function colorBurn(Cb, Cs) {\n        return Cb === 1 ? 1 : Cs === 0 ? 0 : 1 - Math.min(1, (1 - Cb) / Cs);\n      },\n      'hard-light': function hardLight(Cb, Cs) {\n        return Cs <= .5 ? this.multiply(Cb, 2 * Cs) : this.screen(Cb, 2 * Cs - 1);\n      },\n      'soft-light': function softLight(Cb, Cs) {\n        if (Cs <= .5) {\n          return Cb - (1 - 2 * Cs) * Cb * (1 - Cb);\n        } else {\n          var D = Cb <= .25 ? ((16 * Cb - 12) * Cb + 4) * Cb : Math.sqrt(Cb);\n          return Cb + (2 * Cs - 1) * (D - Cb);\n        }\n      },\n      difference: function difference(Cb, Cs) {\n        return Math.abs(Cb - Cs);\n      },\n      exclusion: function exclusion(Cb, Cs) {\n        return Cb + Cs - 2 * Cb * Cs;\n      },\n      hue: function hue(Cb, Cs) {\n        return Cs.setSaturation(Cb.getSaturation()).setLuminosity(Cb.getLuminosity());\n      },\n      saturation: function saturation(Cb, Cs) {\n        return Cb.setSaturation(Cs.getSaturation()).setLuminosity(Cb.getLuminosity());\n      },\n      color: function color(Cb, Cs) {\n        return Cs.setLuminosity(Cb.getLuminosity());\n      },\n      luminosity: function luminosity(Cb, Cs) {\n        return Cb.setLuminosity(Cs.getLuminosity());\n      }\n    };\n    function _flattenColors(sourceColor, backdrop) {\n      var blendMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';\n      var blendingResult = blend(backdrop, sourceColor, blendMode);\n      var r = simpleAlphaCompositing(sourceColor.red, sourceColor.alpha, backdrop.red, backdrop.alpha, blendingResult.r * 255);\n      var g2 = simpleAlphaCompositing(sourceColor.green, sourceColor.alpha, backdrop.green, backdrop.alpha, blendingResult.g * 255);\n      var b2 = simpleAlphaCompositing(sourceColor.blue, sourceColor.alpha, backdrop.blue, backdrop.alpha, blendingResult.b * 255);\n      var \\u03b1o = clamp2(sourceColor.alpha + backdrop.alpha * (1 - sourceColor.alpha), 0, 1);\n      if (\\u03b1o === 0) {\n        return new color_default(r, g2, b2, \\u03b1o);\n      }\n      var Cr = Math.round(r / \\u03b1o);\n      var Cg = Math.round(g2 / \\u03b1o);\n      var Cb = Math.round(b2 / \\u03b1o);\n      return new color_default(Cr, Cg, Cb, \\u03b1o);\n    }\n    function simpleAlphaCompositing(Cs, \\u03b1s, Cb, \\u03b1b, blendingResult) {\n      return \\u03b1s * (1 - \\u03b1b) * Cs + \\u03b1s * \\u03b1b * blendingResult + (1 - \\u03b1s) * \\u03b1b * Cb;\n    }\n    function clamp2(value, min, max2) {\n      return Math.min(Math.max(min, value), max2);\n    }\n    function blend(Cb, Cs, blendMode) {\n      if (nonSeparableBlendModes.includes(blendMode)) {\n        return blendFunctions[blendMode](Cb, Cs);\n      }\n      var C = new color_default();\n      [ 'r', 'g', 'b' ].forEach(function(channel) {\n        C[channel] = blendFunctions[blendMode](Cb[channel], Cs[channel]);\n      });\n      return C;\n    }\n    function _flattenShadowColors(fgColor, bgColor) {\n      var alpha = fgColor.alpha;\n      var r = (1 - alpha) * bgColor.red + alpha * fgColor.red;\n      var g2 = (1 - alpha) * bgColor.green + alpha * fgColor.green;\n      var b2 = (1 - alpha) * bgColor.blue + alpha * fgColor.blue;\n      var a2 = fgColor.alpha + bgColor.alpha * (1 - fgColor.alpha);\n      return new color_default(r, g2, b2, a2);\n    }\n    function _getBackgroundStack(node) {\n      var stacks = get_text_element_stack_default(node).map(function(stack) {\n        stack = reduce_to_elements_below_floating_default(stack, node);\n        stack = sortPageBackground(stack);\n        return stack;\n      });\n      for (var index = 0; index < stacks.length; index++) {\n        var stack = stacks[index];\n        if (stack[0] !== node) {\n          incomplete_data_default.set('bgColor', 'bgOverlap');\n          return null;\n        }\n        if (index !== 0 && !shallowArraysEqual(stack, stacks[0])) {\n          incomplete_data_default.set('bgColor', 'elmPartiallyObscuring');\n          return null;\n        }\n      }\n      return stacks[0] || null;\n    }\n    function sortPageBackground(elmStack) {\n      var bodyIndex = elmStack.indexOf(document.body);\n      var bgNodes = elmStack;\n      var htmlBgColor = get_own_background_color_default(window.getComputedStyle(document.documentElement));\n      if (bodyIndex > 1 && htmlBgColor.alpha === 0 && !element_has_image_default(document.documentElement)) {\n        if (bodyIndex > 1) {\n          bgNodes.splice(bodyIndex, 1);\n          bgNodes.push(document.body);\n        }\n        var htmlIndex = bgNodes.indexOf(document.documentElement);\n        if (htmlIndex > 0) {\n          bgNodes.splice(htmlIndex, 1);\n          bgNodes.push(document.documentElement);\n        }\n      }\n      return bgNodes;\n    }\n    function shallowArraysEqual(a2, b2) {\n      if (a2 === b2) {\n        return true;\n      }\n      if (a2 === null || b2 === null) {\n        return false;\n      }\n      if (a2.length !== b2.length) {\n        return false;\n      }\n      for (var _i36 = 0; _i36 < a2.length; ++_i36) {\n        if (a2[_i36] !== b2[_i36]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    var SHADOW_STROKE_ALPHA = .54;\n    var VISIBLE_SHADOW_MIN_PX = .5;\n    var OPAQUE_STROKE_OFFSET_MIN_PX = 1.5;\n    var edges = [ 'top', 'right', 'bottom', 'left' ];\n    function _getStrokeColorsFromShadows(parsedShadows) {\n      var _ref98 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref98$ignoreEdgeCoun = _ref98.ignoreEdgeCount, ignoreEdgeCount = _ref98$ignoreEdgeCoun === void 0 ? false : _ref98$ignoreEdgeCoun;\n      var shadowMap = getShadowColorsMap(parsedShadows);\n      var shadowsByColor = Object.entries(shadowMap).map(function(_ref99) {\n        var _ref100 = _slicedToArray(_ref99, 2), colorStr = _ref100[0], sides = _ref100[1];\n        var edgeCount = edges.filter(function(side) {\n          return sides[side].length !== 0;\n        }).length;\n        return {\n          colorStr: colorStr,\n          sides: sides,\n          edgeCount: edgeCount\n        };\n      });\n      if (!ignoreEdgeCount && shadowsByColor.some(function(_ref101) {\n        var edgeCount = _ref101.edgeCount;\n        return edgeCount > 1 && edgeCount < 4;\n      })) {\n        return null;\n      }\n      return shadowsByColor.map(shadowGroupToColor).filter(function(shadow) {\n        return shadow !== null;\n      });\n    }\n    function getShadowColorsMap(parsedShadows) {\n      var colorMap = {};\n      var _iterator16 = _createForOfIteratorHelper(parsedShadows), _step16;\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done; ) {\n          var _colorMap$colorStr;\n          var _step16$value = _step16.value, colorStr = _step16$value.colorStr, pixels = _step16$value.pixels;\n          (_colorMap$colorStr = colorMap[colorStr]) !== null && _colorMap$colorStr !== void 0 ? _colorMap$colorStr : colorMap[colorStr] = {\n            top: [],\n            right: [],\n            bottom: [],\n            left: []\n          };\n          var borders = colorMap[colorStr];\n          var _pixels = _slicedToArray(pixels, 2), offsetX = _pixels[0], offsetY = _pixels[1];\n          if (offsetX > VISIBLE_SHADOW_MIN_PX) {\n            borders.right.push(offsetX);\n          } else if (-offsetX > VISIBLE_SHADOW_MIN_PX) {\n            borders.left.push(-offsetX);\n          }\n          if (offsetY > VISIBLE_SHADOW_MIN_PX) {\n            borders.bottom.push(offsetY);\n          } else if (-offsetY > VISIBLE_SHADOW_MIN_PX) {\n            borders.top.push(-offsetY);\n          }\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n      return colorMap;\n    }\n    function shadowGroupToColor(_ref102) {\n      var colorStr = _ref102.colorStr, sides = _ref102.sides, edgeCount = _ref102.edgeCount;\n      if (edgeCount !== 4) {\n        return null;\n      }\n      var strokeColor = new color_default();\n      strokeColor.parseString(colorStr);\n      var density = 0;\n      var isSolid = true;\n      edges.forEach(function(edge) {\n        density += sides[edge].length / 4;\n        isSolid && (isSolid = sides[edge].every(function(offset) {\n          return offset > OPAQUE_STROKE_OFFSET_MIN_PX;\n        }));\n      });\n      if (!isSolid) {\n        strokeColor.alpha = 1 - Math.pow(SHADOW_STROKE_ALPHA, density);\n      }\n      return strokeColor;\n    }\n    function _parseTextShadows(textShadow) {\n      var current = {\n        pixels: []\n      };\n      var str = textShadow.trim();\n      var shadows = [ current ];\n      if (!str) {\n        return [];\n      }\n      while (str) {\n        var colorMatch = str.match(/^[a-z]+(\\([^)]+\\))?/i) || str.match(/^#[0-9a-f]+/i);\n        var pixelMatch = str.match(/^([0-9.-]+)px/i) || str.match(/^(0)/);\n        if (colorMatch) {\n          assert_default(!current.colorStr, 'Multiple colors identified in text-shadow: '.concat(textShadow));\n          str = str.replace(colorMatch[0], '').trim();\n          current.colorStr = colorMatch[0];\n        } else if (pixelMatch) {\n          assert_default(current.pixels.length < 3, 'Too many pixel units in text-shadow: '.concat(textShadow));\n          str = str.replace(pixelMatch[0], '').trim();\n          var pixelUnit = parseFloat((pixelMatch[1][0] === '.' ? '0' : '') + pixelMatch[1]);\n          current.pixels.push(pixelUnit);\n        } else if (str[0] === ',') {\n          assert_default(current.pixels.length >= 2, 'Missing pixel value in text-shadow: '.concat(textShadow));\n          current = {\n            pixels: []\n          };\n          shadows.push(current);\n          str = str.substr(1).trim();\n        } else {\n          throw new Error('Unable to process text-shadows: '.concat(str));\n        }\n      }\n      shadows.forEach(function(_ref103) {\n        var pixels = _ref103.pixels;\n        if (pixels.length === 2) {\n          pixels.push(0);\n        }\n      });\n      return shadows;\n    }\n    function _getTextShadowColors(node) {\n      var _ref104 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minRatio = _ref104.minRatio, maxRatio = _ref104.maxRatio, ignoreEdgeCount = _ref104.ignoreEdgeCount;\n      var shadowColors = [];\n      var style = window.getComputedStyle(node);\n      var textShadow = style.getPropertyValue('text-shadow');\n      if (textShadow === 'none') {\n        return shadowColors;\n      }\n      var fontSizeStr = style.getPropertyValue('font-size');\n      var fontSize = parseInt(fontSizeStr);\n      assert_default(isNaN(fontSize) === false, 'Unable to determine font-size value '.concat(fontSizeStr));\n      var thinShadows = [];\n      var shadows = _parseTextShadows(textShadow);\n      var _iterator17 = _createForOfIteratorHelper(shadows), _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done; ) {\n          var shadow = _step17.value;\n          var colorStr = shadow.colorStr || style.getPropertyValue('color');\n          var _shadow$pixels = _slicedToArray(shadow.pixels, 3), offsetX = _shadow$pixels[0], offsetY = _shadow$pixels[1], _shadow$pixels$ = _shadow$pixels[2], blurRadius = _shadow$pixels$ === void 0 ? 0 : _shadow$pixels$;\n          if (maxRatio && blurRadius >= fontSize * maxRatio) {\n            continue;\n          }\n          if (minRatio && blurRadius < fontSize * minRatio) {\n            thinShadows.push({\n              colorStr: colorStr,\n              pixels: shadow.pixels\n            });\n            continue;\n          }\n          if (thinShadows.length > 0) {\n            var _strokeColors = _getStrokeColorsFromShadows(thinShadows, {\n              ignoreEdgeCount: ignoreEdgeCount\n            });\n            if (_strokeColors === null) {\n              return null;\n            }\n            shadowColors.push.apply(shadowColors, _toConsumableArray(_strokeColors));\n            thinShadows.splice(0, thinShadows.length);\n          }\n          var _color3 = textShadowColor({\n            colorStr: colorStr,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            blurRadius: blurRadius,\n            fontSize: fontSize\n          });\n          shadowColors.push(_color3);\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      if (thinShadows.length > 0) {\n        var strokeColors = _getStrokeColorsFromShadows(thinShadows, {\n          ignoreEdgeCount: ignoreEdgeCount\n        });\n        if (strokeColors === null) {\n          return null;\n        }\n        shadowColors.push.apply(shadowColors, _toConsumableArray(strokeColors));\n      }\n      return shadowColors;\n    }\n    function textShadowColor(_ref105) {\n      var colorStr = _ref105.colorStr, offsetX = _ref105.offsetX, offsetY = _ref105.offsetY, blurRadius = _ref105.blurRadius, fontSize = _ref105.fontSize;\n      if (offsetX > blurRadius || offsetY > blurRadius) {\n        return new color_default(0, 0, 0, 0);\n      }\n      var shadowColor = new color_default();\n      shadowColor.parseString(colorStr);\n      shadowColor.alpha *= blurRadiusToAlpha(blurRadius, fontSize);\n      return shadowColor;\n    }\n    function blurRadiusToAlpha(blurRadius, fontSize) {\n      if (blurRadius === 0) {\n        return 1;\n      }\n      var relativeBlur = blurRadius / fontSize;\n      return .185 / (relativeBlur + .4);\n    }\n    function _getStackingContext(elm, elmStack) {\n      var _elmStack;\n      var virtualNode = get_node_from_tree_default(elm);\n      if (virtualNode._stackingContext) {\n        return virtualNode._stackingContext;\n      }\n      var stackingContext = [];\n      var contextMap = new Map();\n      elmStack = (_elmStack = elmStack) !== null && _elmStack !== void 0 ? _elmStack : _getBackgroundStack(elm);\n      elmStack.forEach(function(bgElm) {\n        var _stackingOrder2;\n        var bgVNode = get_node_from_tree_default(bgElm);\n        var bgColor = getOwnBackgroundColor2(bgVNode);\n        var stackingOrder = bgVNode._stackingOrder.filter(function(_ref106) {\n          var vNode = _ref106.vNode;\n          return !!vNode;\n        });\n        stackingOrder.forEach(function(_ref107, index) {\n          var _stackingOrder;\n          var vNode = _ref107.vNode;\n          var ancestorVNode2 = (_stackingOrder = stackingOrder[index - 1]) === null || _stackingOrder === void 0 ? void 0 : _stackingOrder.vNode;\n          var context2 = addToStackingContext(contextMap, vNode, ancestorVNode2);\n          if (index === 0 && !contextMap.get(vNode)) {\n            stackingContext.unshift(context2);\n          }\n          contextMap.set(vNode, context2);\n        });\n        var ancestorVNode = (_stackingOrder2 = stackingOrder[stackingOrder.length - 1]) === null || _stackingOrder2 === void 0 ? void 0 : _stackingOrder2.vNode;\n        var context = addToStackingContext(contextMap, bgVNode, ancestorVNode);\n        if (!stackingOrder.length) {\n          stackingContext.unshift(context);\n        }\n        context.bgColor = bgColor;\n      });\n      virtualNode._stackingContext = stackingContext;\n      return stackingContext;\n    }\n    function _stackingContextToColor(context) {\n      var _context$descendants;\n      if (!((_context$descendants = context.descendants) !== null && _context$descendants !== void 0 && _context$descendants.length)) {\n        var color2 = context.bgColor;\n        color2.alpha *= context.opacity;\n        return {\n          color: color2,\n          blendMode: context.blendMode\n        };\n      }\n      var sourceColor = context.descendants.reduce(reduceToColor, createStackingContext2());\n      var color = _flattenColors(sourceColor, context.bgColor, context.descendants[0].blendMode);\n      color.alpha *= context.opacity;\n      return {\n        color: color,\n        blendMode: context.blendMode\n      };\n    }\n    function reduceToColor(backdropContext, sourceContext) {\n      var backdrop;\n      if (backdropContext instanceof color_default) {\n        backdrop = backdropContext;\n      } else {\n        backdrop = _stackingContextToColor(backdropContext).color;\n      }\n      var sourceColor = _stackingContextToColor(sourceContext).color;\n      return _flattenColors(sourceColor, backdrop, sourceContext.blendMode);\n    }\n    function createStackingContext2(vNode, ancestorContext) {\n      var _vNode$getComputedSty;\n      return {\n        vNode: vNode,\n        ancestor: ancestorContext,\n        opacity: parseFloat((_vNode$getComputedSty = vNode === null || vNode === void 0 ? void 0 : vNode.getComputedStylePropertyValue('opacity')) !== null && _vNode$getComputedSty !== void 0 ? _vNode$getComputedSty : 1),\n        bgColor: new color_default(0, 0, 0, 0),\n        blendMode: normalizeBlendMode(vNode === null || vNode === void 0 ? void 0 : vNode.getComputedStylePropertyValue('mix-blend-mode')),\n        descendants: []\n      };\n    }\n    function normalizeBlendMode(blendmode) {\n      return !!blendmode ? blendmode : void 0;\n    }\n    function addToStackingContext(contextMap, vNode, ancestorVNode) {\n      var _contextMap$get;\n      var ancestorContext = contextMap.get(ancestorVNode);\n      var context = (_contextMap$get = contextMap.get(vNode)) !== null && _contextMap$get !== void 0 ? _contextMap$get : createStackingContext2(vNode, ancestorContext);\n      if (ancestorContext && ancestorVNode !== vNode && !ancestorContext.descendants.includes(context)) {\n        ancestorContext.descendants.unshift(context);\n      }\n      return context;\n    }\n    function getOwnBackgroundColor2(vNode) {\n      var bgColor = new color_default();\n      bgColor.parseString(vNode.getComputedStylePropertyValue('background-color'));\n      return bgColor;\n    }\n    function _getBackgroundColor2(elm) {\n      var bgElms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var shadowOutlineEmMax = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .1;\n      var vNode = get_node_from_tree_default(elm);\n      var bgColorCache = vNode._cache.getBackgroundColor;\n      if (bgColorCache) {\n        bgElms.push.apply(bgElms, _toConsumableArray(bgColorCache.bgElms));\n        incomplete_data_default.set('bgColor', bgColorCache.incompleteData);\n        return bgColorCache.bgColor;\n      }\n      var bgColor = _getBackgroundColor(elm, bgElms, shadowOutlineEmMax);\n      vNode._cache.getBackgroundColor = {\n        bgColor: bgColor,\n        bgElms: bgElms,\n        incompleteData: incomplete_data_default.get('bgColor')\n      };\n      return bgColor;\n    }\n    function _getBackgroundColor(elm, bgElms, shadowOutlineEmMax) {\n      var _getTextShadowColors2, _bgColors;\n      var elmStack = _getBackgroundStack(elm);\n      if (!elmStack) {\n        return null;\n      }\n      var textRects = get_visible_child_text_rects_default(elm);\n      var bgColors = (_getTextShadowColors2 = _getTextShadowColors(elm, {\n        minRatio: shadowOutlineEmMax,\n        ignoreEdgeCount: true\n      })) !== null && _getTextShadowColors2 !== void 0 ? _getTextShadowColors2 : [];\n      if (bgColors.length) {\n        bgColors = [ {\n          color: bgColors.reduce(_flattenShadowColors)\n        } ];\n      }\n      for (var _i37 = 0; _i37 < elmStack.length; _i37++) {\n        var bgElm = elmStack[_i37];\n        var bgElmStyle = window.getComputedStyle(bgElm);\n        if (element_has_image_default(bgElm, bgElmStyle)) {\n          bgElms.push(bgElm);\n          return null;\n        }\n        var bgColor = get_own_background_color_default(bgElmStyle);\n        if (bgColor.alpha === 0) {\n          continue;\n        }\n        if (bgElmStyle.getPropertyValue('display') !== 'inline' && !fullyEncompasses(bgElm, textRects)) {\n          bgElms.push(bgElm);\n          incomplete_data_default.set('bgColor', 'elmPartiallyObscured');\n          return null;\n        }\n        bgElms.push(bgElm);\n        if (bgColor.alpha === 1) {\n          break;\n        }\n      }\n      var stackingContext = _getStackingContext(elm, elmStack);\n      bgColors = stackingContext.map(_stackingContextToColor).concat(bgColors);\n      var pageBgs = getPageBackgroundColors(elm, elmStack.includes(document.body));\n      (_bgColors = bgColors).unshift.apply(_bgColors, _toConsumableArray(pageBgs));\n      if (bgColors.length === 0) {\n        return new color_default(255, 255, 255, 1);\n      }\n      var blendedColor = bgColors.reduce(function(bgColor, fgColor) {\n        return _flattenColors(fgColor.color, bgColor.color instanceof color_default ? bgColor.color : bgColor, fgColor.blendMode);\n      });\n      return _flattenColors(blendedColor.color instanceof color_default ? blendedColor.color : blendedColor, new color_default(255, 255, 255, 1));\n    }\n    function fullyEncompasses(node, rects) {\n      rects = Array.isArray(rects) ? rects : [ rects ];\n      var nodeRect = node.getBoundingClientRect();\n      var right = nodeRect.right, bottom = nodeRect.bottom;\n      var style = window.getComputedStyle(node);\n      var overflow = style.getPropertyValue('overflow');\n      if ([ 'scroll', 'auto' ].includes(overflow) || node instanceof window.HTMLHtmlElement) {\n        right = nodeRect.left + node.scrollWidth;\n        bottom = nodeRect.top + node.scrollHeight;\n      }\n      return rects.every(function(rect) {\n        return rect.top >= nodeRect.top && rect.bottom <= bottom && rect.left >= nodeRect.left && rect.right <= right;\n      });\n    }\n    function normalizeBlendMode2(blendmode) {\n      return !!blendmode ? blendmode : void 0;\n    }\n    function getPageBackgroundColors(elm, stackContainsBody) {\n      var pageColors = [];\n      if (!stackContainsBody) {\n        var html = document.documentElement;\n        var body = document.body;\n        var htmlStyle = window.getComputedStyle(html);\n        var bodyStyle = window.getComputedStyle(body);\n        var htmlBgColor = get_own_background_color_default(htmlStyle);\n        var bodyBgColor = get_own_background_color_default(bodyStyle);\n        var bodyBgColorApplies = bodyBgColor.alpha !== 0 && fullyEncompasses(body, elm.getBoundingClientRect());\n        if (bodyBgColor.alpha !== 0 && htmlBgColor.alpha === 0 || bodyBgColorApplies && bodyBgColor.alpha !== 1) {\n          pageColors.unshift({\n            color: bodyBgColor,\n            blendMode: normalizeBlendMode2(bodyStyle.getPropertyValue('mix-blend-mode'))\n          });\n        }\n        if (htmlBgColor.alpha !== 0 && (!bodyBgColorApplies || bodyBgColorApplies && bodyBgColor.alpha !== 1)) {\n          pageColors.unshift({\n            color: htmlBgColor,\n            blendMode: normalizeBlendMode2(htmlStyle.getPropertyValue('mix-blend-mode'))\n          });\n        }\n      }\n      return pageColors;\n    }\n    function getContrast(bgColor, fgColor) {\n      if (!fgColor || !bgColor) {\n        return null;\n      }\n      if (fgColor.alpha < 1) {\n        fgColor = _flattenColors(fgColor, bgColor);\n      }\n      var bL = bgColor.getRelativeLuminance();\n      var fL = fgColor.getRelativeLuminance();\n      return (Math.max(fL, bL) + .05) / (Math.min(fL, bL) + .05);\n    }\n    var get_contrast_default = getContrast;\n    function _getForegroundColor(node, _, bgColor) {\n      var _bgColor;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var nodeStyle = window.getComputedStyle(node);\n      var colorStack = [ function() {\n        return getStrokeColor(nodeStyle, options);\n      }, function() {\n        return getTextColor(nodeStyle);\n      }, function() {\n        return _getTextShadowColors(node, {\n          minRatio: 0\n        });\n      } ];\n      var fgColors = [];\n      for (var _i38 = 0, _colorStack = colorStack; _i38 < _colorStack.length; _i38++) {\n        var colorFn = _colorStack[_i38];\n        var _color4 = colorFn();\n        if (!_color4) {\n          continue;\n        }\n        fgColors = fgColors.concat(_color4);\n        if (_color4.alpha === 1) {\n          break;\n        }\n      }\n      var fgColor = fgColors.reduce(function(source, backdrop) {\n        return _flattenColors(source, backdrop);\n      });\n      (_bgColor = bgColor) !== null && _bgColor !== void 0 ? _bgColor : bgColor = _getBackgroundColor2(node, []);\n      if (bgColor === null) {\n        var reason = incomplete_data_default.get('bgColor');\n        incomplete_data_default.set('fgColor', reason);\n        return null;\n      }\n      var stackingContexts = _getStackingContext(node);\n      var context = findNodeInContexts(stackingContexts, node);\n      return _flattenColors(calculateBlendedForegroundColor(fgColor, context, stackingContexts), new color_default(255, 255, 255, 1));\n    }\n    function getTextColor(nodeStyle) {\n      return new color_default().parseString(nodeStyle.getPropertyValue('-webkit-text-fill-color') || nodeStyle.getPropertyValue('color'));\n    }\n    function getStrokeColor(nodeStyle, _ref108) {\n      var _ref108$textStrokeEmM = _ref108.textStrokeEmMin, textStrokeEmMin = _ref108$textStrokeEmM === void 0 ? 0 : _ref108$textStrokeEmM;\n      var strokeWidth = parseFloat(nodeStyle.getPropertyValue('-webkit-text-stroke-width'));\n      if (strokeWidth === 0) {\n        return null;\n      }\n      var fontSize = nodeStyle.getPropertyValue('font-size');\n      var relativeStrokeWidth = strokeWidth / parseFloat(fontSize);\n      if (isNaN(relativeStrokeWidth) || relativeStrokeWidth < textStrokeEmMin) {\n        return null;\n      }\n      var strokeColor = nodeStyle.getPropertyValue('-webkit-text-stroke-color');\n      return new color_default().parseString(strokeColor);\n    }\n    function calculateBlendedForegroundColor(fgColor, context, stackingContexts) {\n      while (context) {\n        var _context$ancestor;\n        if (context.opacity === 1 && context.ancestor) {\n          context = context.ancestor;\n          continue;\n        }\n        fgColor.alpha *= context.opacity;\n        var stack = ((_context$ancestor = context.ancestor) === null || _context$ancestor === void 0 ? void 0 : _context$ancestor.descendants) || stackingContexts;\n        if (context.opacity !== 1) {\n          stack = stack.slice(0, stack.indexOf(context));\n        }\n        var bgColors = stack.map(_stackingContextToColor);\n        if (!bgColors.length) {\n          context = context.ancestor;\n          continue;\n        }\n        var bgColor = bgColors.reduce(function(backdrop, source) {\n          return _flattenColors(source.color, backdrop.color instanceof color_default ? backdrop.color : backdrop);\n        }, {\n          color: new color_default(0, 0, 0, 0),\n          blendMode: 'normal'\n        });\n        fgColor = _flattenColors(fgColor, bgColor);\n        context = context.ancestor;\n      }\n      return fgColor;\n    }\n    function findNodeInContexts(contexts, node) {\n      var _iterator18 = _createForOfIteratorHelper(contexts), _step18;\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {\n          var _context$vNode;\n          var context = _step18.value;\n          if (((_context$vNode = context.vNode) === null || _context$vNode === void 0 ? void 0 : _context$vNode.actualNode) === node) {\n            return context;\n          }\n          var found = findNodeInContexts(context.descendants, node);\n          if (found) {\n            return found;\n          }\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n    }\n    function hasValidContrastRatio(bg, fg, fontSize, isBold) {\n      var contrast2 = get_contrast_default(bg, fg);\n      var isSmallFont = isBold && Math.ceil(fontSize * 72) / 96 < 14 || !isBold && Math.ceil(fontSize * 72) / 96 < 18;\n      var expectedContrastRatio = isSmallFont ? 4.5 : 3;\n      return {\n        isValid: contrast2 > expectedContrastRatio,\n        contrastRatio: contrast2,\n        expectedContrastRatio: expectedContrastRatio\n      };\n    }\n    var has_valid_contrast_ratio_default = hasValidContrastRatio;\n    var forms_exports = {};\n    __export(forms_exports, {\n      isAriaCombobox: function isAriaCombobox() {\n        return is_aria_combobox_default;\n      },\n      isAriaListbox: function isAriaListbox() {\n        return is_aria_listbox_default;\n      },\n      isAriaRange: function isAriaRange() {\n        return is_aria_range_default;\n      },\n      isAriaTextbox: function isAriaTextbox() {\n        return is_aria_textbox_default;\n      },\n      isDisabled: function isDisabled() {\n        return is_disabled_default;\n      },\n      isNativeSelect: function isNativeSelect() {\n        return is_native_select_default;\n      },\n      isNativeTextbox: function isNativeTextbox() {\n        return is_native_textbox_default;\n      }\n    });\n    var disabledNodeNames = [ 'fieldset', 'button', 'select', 'input', 'textarea' ];\n    function isDisabled(virtualNode) {\n      var disabledState = virtualNode._isDisabled;\n      if (typeof disabledState === 'boolean') {\n        return disabledState;\n      }\n      var nodeName2 = virtualNode.props.nodeName;\n      var ariaDisabled = virtualNode.attr('aria-disabled');\n      if (disabledNodeNames.includes(nodeName2) && virtualNode.hasAttr('disabled')) {\n        disabledState = true;\n      } else if (ariaDisabled) {\n        disabledState = ariaDisabled.toLowerCase() === 'true';\n      } else if (virtualNode.parent) {\n        disabledState = isDisabled(virtualNode.parent);\n      } else {\n        disabledState = false;\n      }\n      virtualNode._isDisabled = disabledState;\n      return disabledState;\n    }\n    var is_disabled_default = isDisabled;\n    function identicalLinksSamePurposeEvaluate(node, options, virtualNode) {\n      var accText = text_exports.accessibleTextVirtual(virtualNode);\n      var name = text_exports.sanitize(text_exports.removeUnicode(accText, {\n        emoji: true,\n        nonBmp: true,\n        punctuations: true\n      })).toLowerCase();\n      if (!name) {\n        return void 0;\n      }\n      var afterData = {\n        name: name,\n        urlProps: dom_exports.urlPropsFromAttribute(node, 'href')\n      };\n      this.data(afterData);\n      this.relatedNodes([ node ]);\n      return true;\n    }\n    var identical_links_same_purpose_evaluate_default = identicalLinksSamePurposeEvaluate;\n    function isIdenticalObject(a2, b2) {\n      if (!a2 || !b2) {\n        return false;\n      }\n      var aProps = Object.getOwnPropertyNames(a2);\n      var bProps = Object.getOwnPropertyNames(b2);\n      if (aProps.length !== bProps.length) {\n        return false;\n      }\n      var result = aProps.every(function(propName) {\n        var aValue = a2[propName];\n        var bValue = b2[propName];\n        if (_typeof(aValue) !== _typeof(bValue)) {\n          return false;\n        }\n        if (_typeof(aValue) === 'object' || _typeof(bValue) === 'object') {\n          return isIdenticalObject(aValue, bValue);\n        }\n        return aValue === bValue;\n      });\n      return result;\n    }\n    function identicalLinksSamePurposeAfter(results) {\n      if (results.length < 2) {\n        return results;\n      }\n      var incompleteResults = results.filter(function(_ref109) {\n        var result = _ref109.result;\n        return result !== void 0;\n      });\n      var uniqueResults = [];\n      var nameMap = {};\n      var _loop8 = function _loop8(index) {\n        var _currentResult$relate;\n        var currentResult = incompleteResults[index];\n        var _currentResult$data = currentResult.data, name = _currentResult$data.name, urlProps = _currentResult$data.urlProps;\n        if (nameMap[name]) {\n          return 1;\n        }\n        var sameNameResults = incompleteResults.filter(function(_ref110, resultNum) {\n          var data = _ref110.data;\n          return data.name === name && resultNum !== index;\n        });\n        var isSameUrl = sameNameResults.every(function(_ref111) {\n          var data = _ref111.data;\n          return isIdenticalObject(data.urlProps, urlProps);\n        });\n        if (sameNameResults.length && !isSameUrl) {\n          currentResult.result = void 0;\n        }\n        currentResult.relatedNodes = [];\n        (_currentResult$relate = currentResult.relatedNodes).push.apply(_currentResult$relate, _toConsumableArray(sameNameResults.map(function(node) {\n          return node.relatedNodes[0];\n        })));\n        nameMap[name] = sameNameResults;\n        uniqueResults.push(currentResult);\n      };\n      for (var index = 0; index < incompleteResults.length; index++) {\n        if (_loop8(index)) {\n          continue;\n        }\n      }\n      return uniqueResults;\n    }\n    var identical_links_same_purpose_after_default = identicalLinksSamePurposeAfter;\n    function getLevel(vNode) {\n      var role = get_role_default(vNode);\n      var headingRole = role && role.includes('heading');\n      var ariaHeadingLevel = vNode.attr('aria-level');\n      var ariaLevel = parseInt(ariaHeadingLevel, 10);\n      var _ref112 = vNode.props.nodeName.match(/h(\\d)/) || [], _ref113 = _slicedToArray(_ref112, 2), headingLevel = _ref113[1];\n      if (!headingRole) {\n        return -1;\n      }\n      if (headingLevel && !ariaHeadingLevel) {\n        return parseInt(headingLevel, 10);\n      }\n      if (isNaN(ariaLevel) || ariaLevel < 1) {\n        if (headingLevel) {\n          return parseInt(headingLevel, 10);\n        }\n        return 2;\n      }\n      if (ariaLevel) {\n        return ariaLevel;\n      }\n      return -1;\n    }\n    function headingOrderEvaluate() {\n      var headingOrder = cache_default.get('headingOrder');\n      if (headingOrder) {\n        return true;\n      }\n      var selector = 'h1, h2, h3, h4, h5, h6, [role=heading], iframe, frame';\n      var vNodes = query_selector_all_filter_default(axe._tree[0], selector, _isVisibleToScreenReaders);\n      headingOrder = vNodes.map(function(vNode) {\n        return {\n          ancestry: [ _getAncestry(vNode.actualNode) ],\n          level: getLevel(vNode)\n        };\n      });\n      this.data({\n        headingOrder: headingOrder\n      });\n      cache_default.set('headingOrder', vNodes);\n      return true;\n    }\n    var heading_order_evaluate_default = headingOrderEvaluate;\n    function headingOrderAfter(results) {\n      var headingOrder = getHeadingOrder(results);\n      results.forEach(function(result) {\n        result.result = getHeadingOrderOutcome(result, headingOrder);\n      });\n      return results;\n    }\n    function getHeadingOrderOutcome(result, headingOrder) {\n      var _headingOrder$index$l, _headingOrder$index, _headingOrder$level, _headingOrder;\n      var index = findHeadingOrderIndex(headingOrder, result.node.ancestry);\n      var currLevel = (_headingOrder$index$l = (_headingOrder$index = headingOrder[index]) === null || _headingOrder$index === void 0 ? void 0 : _headingOrder$index.level) !== null && _headingOrder$index$l !== void 0 ? _headingOrder$index$l : -1;\n      var prevLevel = (_headingOrder$level = (_headingOrder = headingOrder[index - 1]) === null || _headingOrder === void 0 ? void 0 : _headingOrder.level) !== null && _headingOrder$level !== void 0 ? _headingOrder$level : -1;\n      if (index === 0) {\n        return true;\n      }\n      if (currLevel === -1) {\n        return void 0;\n      }\n      return currLevel - prevLevel <= 1;\n    }\n    function getHeadingOrder(results) {\n      results = _toConsumableArray(results);\n      results.sort(function(_ref114, _ref115) {\n        var nodeA = _ref114.node;\n        var nodeB = _ref115.node;\n        return nodeA.ancestry.length - nodeB.ancestry.length;\n      });\n      var headingOrder = results.reduce(mergeHeadingOrder, []);\n      return headingOrder.filter(function(_ref116) {\n        var level = _ref116.level;\n        return level !== -1;\n      });\n    }\n    function mergeHeadingOrder(mergedHeadingOrder, result) {\n      var _result$data;\n      var frameHeadingOrder = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.headingOrder;\n      var frameAncestry = shortenArray(result.node.ancestry, 1);\n      if (!frameHeadingOrder) {\n        return mergedHeadingOrder;\n      }\n      var normalizedHeadingOrder = frameHeadingOrder.map(function(heading) {\n        return addFrameToHeadingAncestry(heading, frameAncestry);\n      });\n      var index = getFrameIndex(mergedHeadingOrder, frameAncestry);\n      if (index === -1) {\n        mergedHeadingOrder.push.apply(mergedHeadingOrder, _toConsumableArray(normalizedHeadingOrder));\n      } else {\n        mergedHeadingOrder.splice.apply(mergedHeadingOrder, [ index, 0 ].concat(_toConsumableArray(normalizedHeadingOrder)));\n      }\n      return mergedHeadingOrder;\n    }\n    function getFrameIndex(headingOrder, frameAncestry) {\n      while (frameAncestry.length) {\n        var index = findHeadingOrderIndex(headingOrder, frameAncestry);\n        if (index !== -1) {\n          return index;\n        }\n        frameAncestry = shortenArray(frameAncestry, 1);\n      }\n      return -1;\n    }\n    function findHeadingOrderIndex(headingOrder, ancestry) {\n      return headingOrder.findIndex(function(heading) {\n        return _matchAncestry(heading.ancestry, ancestry);\n      });\n    }\n    function addFrameToHeadingAncestry(heading, frameAncestry) {\n      var ancestry = frameAncestry.concat(heading.ancestry);\n      return _extends({}, heading, {\n        ancestry: ancestry\n      });\n    }\n    function shortenArray(arr, spliceLength) {\n      return arr.slice(0, arr.length - spliceLength);\n    }\n    function targetSizeEvaluate(node, options, vNode) {\n      var minSize = (options === null || options === void 0 ? void 0 : options.minSize) || 24;\n      var nodeRect = vNode.boundingClientRect;\n      if (_rectHasMinimumSize(minSize * 10, nodeRect)) {\n        this.data({\n          messageKey: 'large',\n          minSize: minSize\n        });\n        return true;\n      }\n      var hasMinimumSize = _rectHasMinimumSize.bind(null, minSize);\n      var nearbyElms = _findNearbyElms(vNode);\n      var overflowingContent = filterOverflowingContent(vNode, nearbyElms);\n      var _filterByElmsOverlap = filterByElmsOverlap(vNode, nearbyElms), fullyObscuringElms = _filterByElmsOverlap.fullyObscuringElms, partialObscuringElms = _filterByElmsOverlap.partialObscuringElms;\n      if (overflowingContent.length && (fullyObscuringElms.length || !hasMinimumSize(nodeRect))) {\n        this.data({\n          minSize: minSize,\n          messageKey: 'contentOverflow'\n        });\n        this.relatedNodes(mapActualNodes(overflowingContent));\n        return void 0;\n      }\n      if (fullyObscuringElms.length) {\n        this.relatedNodes(mapActualNodes(fullyObscuringElms));\n        this.data({\n          messageKey: 'obscured'\n        });\n        return true;\n      }\n      var negativeOutcome = _isInTabOrder(vNode) ? false : void 0;\n      if (!hasMinimumSize(nodeRect)) {\n        this.data(_extends({\n          minSize: minSize\n        }, toDecimalSize(nodeRect)));\n        return negativeOutcome;\n      }\n      var obscuredWidgets = filterFocusableWidgets(partialObscuringElms);\n      if (!obscuredWidgets.length) {\n        this.data(_extends({\n          minSize: minSize\n        }, toDecimalSize(nodeRect)));\n        return true;\n      }\n      var largestInnerRect = getLargestUnobscuredArea(vNode, obscuredWidgets);\n      if (!largestInnerRect) {\n        this.data({\n          minSize: minSize,\n          messageKey: 'tooManyRects'\n        });\n        return void 0;\n      }\n      if (!hasMinimumSize(largestInnerRect)) {\n        if (overflowingContent.length) {\n          this.data({\n            minSize: minSize,\n            messageKey: 'contentOverflow'\n          });\n          this.relatedNodes(mapActualNodes(overflowingContent));\n          return void 0;\n        }\n        var allTabbable = obscuredWidgets.every(_isInTabOrder);\n        var messageKey = 'partiallyObscured'.concat(allTabbable ? '' : 'NonTabbable');\n        this.data(_extends({\n          messageKey: messageKey,\n          minSize: minSize\n        }, toDecimalSize(largestInnerRect)));\n        this.relatedNodes(mapActualNodes(obscuredWidgets));\n        return allTabbable ? negativeOutcome : void 0;\n      }\n      this.data(_extends({\n        minSize: minSize\n      }, toDecimalSize(largestInnerRect || nodeRect)));\n      this.relatedNodes(mapActualNodes(obscuredWidgets));\n      return true;\n    }\n    function filterOverflowingContent(vNode, nearbyElms) {\n      return nearbyElms.filter(function(nearbyElm) {\n        return !isEnclosedRect2(nearbyElm, vNode) && isDescendantNotInTabOrder2(vNode, nearbyElm);\n      });\n    }\n    function filterByElmsOverlap(vNode, nearbyElms) {\n      var fullyObscuringElms = [];\n      var partialObscuringElms = [];\n      var _iterator19 = _createForOfIteratorHelper(nearbyElms), _step19;\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {\n          var vNeighbor = _step19.value;\n          if (!isDescendantNotInTabOrder2(vNode, vNeighbor) && _hasVisualOverlap(vNode, vNeighbor) && getCssPointerEvents(vNeighbor) !== 'none') {\n            if (isEnclosedRect2(vNode, vNeighbor)) {\n              fullyObscuringElms.push(vNeighbor);\n            } else {\n              partialObscuringElms.push(vNeighbor);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n      return {\n        fullyObscuringElms: fullyObscuringElms,\n        partialObscuringElms: partialObscuringElms\n      };\n    }\n    function getLargestUnobscuredArea(vNode, obscuredNodes) {\n      var nodeRect = vNode.boundingClientRect;\n      var obscuringRects = obscuredNodes.map(function(_ref117) {\n        var rect = _ref117.boundingClientRect;\n        return rect;\n      });\n      var unobscuredRects;\n      try {\n        unobscuredRects = _splitRects(nodeRect, obscuringRects);\n      } catch (_unused9) {\n        return null;\n      }\n      return getLargestRect2(unobscuredRects);\n    }\n    function getLargestRect2(rects, minSize) {\n      return rects.reduce(function(rectA, rectB) {\n        var rectAisMinimum = _rectHasMinimumSize(minSize, rectA);\n        var rectBisMinimum = _rectHasMinimumSize(minSize, rectB);\n        if (rectAisMinimum !== rectBisMinimum) {\n          return rectAisMinimum ? rectA : rectB;\n        }\n        var areaA = rectA.width * rectA.height;\n        var areaB = rectB.width * rectB.height;\n        return areaA > areaB ? rectA : rectB;\n      });\n    }\n    function filterFocusableWidgets(vNodes) {\n      return vNodes.filter(function(vNode) {\n        return get_role_type_default(vNode) === 'widget' && _isFocusable(vNode);\n      });\n    }\n    function isEnclosedRect2(vNodeA, vNodeB) {\n      var rectA = vNodeA.boundingClientRect;\n      var rectB = vNodeB.boundingClientRect;\n      return rectA.top >= rectB.top && rectA.left >= rectB.left && rectA.bottom <= rectB.bottom && rectA.right <= rectB.right;\n    }\n    function getCssPointerEvents(vNode) {\n      return vNode.getComputedStylePropertyValue('pointer-events');\n    }\n    function toDecimalSize(rect) {\n      return {\n        width: Math.round(rect.width * 10) / 10,\n        height: Math.round(rect.height * 10) / 10\n      };\n    }\n    function isDescendantNotInTabOrder2(vAncestor, vNode) {\n      return _contains(vAncestor, vNode) && !_isInTabOrder(vNode);\n    }\n    function mapActualNodes(vNodes) {\n      return vNodes.map(function(_ref118) {\n        var actualNode = _ref118.actualNode;\n        return actualNode;\n      });\n    }\n    var roundingMargin2 = .05;\n    function targetOffsetEvaluate(node, options, vNode) {\n      var minOffset = (options === null || options === void 0 ? void 0 : options.minOffset) || 24;\n      if (_rectHasMinimumSize(minOffset * 10, vNode.boundingClientRect)) {\n        this.data({\n          messageKey: 'large',\n          minOffset: minOffset\n        });\n        return true;\n      }\n      var closeNeighbors = [];\n      var closestOffset = minOffset;\n      var _iterator20 = _createForOfIteratorHelper(_findNearbyElms(vNode, minOffset)), _step20;\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done; ) {\n          var vNeighbor = _step20.value;\n          if (get_role_type_default(vNeighbor) !== 'widget' || !_isFocusable(vNeighbor)) {\n            continue;\n          }\n          var offset = null;\n          try {\n            offset = _getOffset(vNode, vNeighbor, minOffset / 2);\n          } catch (err2) {\n            if (err2.message.startsWith('splitRects')) {\n              this.data({\n                messageKey: 'tooManyRects',\n                closestOffset: 0,\n                minOffset: minOffset\n              });\n              return void 0;\n            }\n            throw err2;\n          }\n          if (offset === null) {\n            continue;\n          }\n          offset = roundToSingleDecimal(offset) * 2;\n          if (offset + roundingMargin2 >= minOffset) {\n            continue;\n          }\n          closestOffset = Math.min(closestOffset, offset);\n          closeNeighbors.push(vNeighbor);\n        }\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n      if (closeNeighbors.length === 0) {\n        this.data({\n          closestOffset: closestOffset,\n          minOffset: minOffset\n        });\n        return true;\n      }\n      this.relatedNodes(closeNeighbors.map(function(_ref119) {\n        var actualNode = _ref119.actualNode;\n        return actualNode;\n      }));\n      if (!closeNeighbors.some(_isInTabOrder)) {\n        this.data({\n          messageKey: 'nonTabbableNeighbor',\n          closestOffset: closestOffset,\n          minOffset: minOffset\n        });\n        return void 0;\n      }\n      this.data({\n        closestOffset: closestOffset,\n        minOffset: minOffset\n      });\n      return _isInTabOrder(vNode) ? false : void 0;\n    }\n    function roundToSingleDecimal(num) {\n      return Math.round(num * 10) / 10;\n    }\n    function metaViewportScaleEvaluate(node, options, virtualNode) {\n      var _ref120 = options || {}, _ref120$scaleMinimum = _ref120.scaleMinimum, scaleMinimum = _ref120$scaleMinimum === void 0 ? 2 : _ref120$scaleMinimum, _ref120$lowerBound = _ref120.lowerBound, lowerBound = _ref120$lowerBound === void 0 ? false : _ref120$lowerBound;\n      var content = virtualNode.attr('content') || '';\n      if (!content) {\n        return true;\n      }\n      var result = content.split(/[;,]/).reduce(function(out, item) {\n        var contentValue = item.trim();\n        if (!contentValue) {\n          return out;\n        }\n        var _contentValue$split = contentValue.split('='), _contentValue$split2 = _slicedToArray(_contentValue$split, 2), key = _contentValue$split2[0], value = _contentValue$split2[1];\n        if (!key || !value) {\n          return out;\n        }\n        var curatedKey = key.toLowerCase().trim();\n        var curatedValue = value.toLowerCase().trim();\n        if (curatedKey === 'maximum-scale' && curatedValue === 'yes') {\n          curatedValue = 1;\n        }\n        if (curatedKey === 'maximum-scale' && parseFloat(curatedValue) < 0) {\n          return out;\n        }\n        out[curatedKey] = curatedValue;\n        return out;\n      }, {});\n      if (lowerBound && result['maximum-scale'] && parseFloat(result['maximum-scale']) < lowerBound) {\n        return true;\n      }\n      if (!lowerBound && result['user-scalable'] === 'no') {\n        this.data('user-scalable=no');\n        return false;\n      }\n      var userScalableAsFloat = parseFloat(result['user-scalable']);\n      if (!lowerBound && result['user-scalable'] && (userScalableAsFloat || userScalableAsFloat === 0) && userScalableAsFloat > -1 && userScalableAsFloat < 1) {\n        this.data('user-scalable');\n        return false;\n      }\n      if (result['maximum-scale'] && parseFloat(result['maximum-scale']) < scaleMinimum) {\n        this.data('maximum-scale');\n        return false;\n      }\n      return true;\n    }\n    var meta_viewport_scale_evaluate_default = metaViewportScaleEvaluate;\n    function cssOrientationLockEvaluate(node, options, virtualNode, context) {\n      var _ref121 = context || {}, _ref121$cssom = _ref121.cssom, cssom = _ref121$cssom === void 0 ? void 0 : _ref121$cssom;\n      var _ref122 = options || {}, _ref122$degreeThresho = _ref122.degreeThreshold, degreeThreshold = _ref122$degreeThresho === void 0 ? 0 : _ref122$degreeThresho;\n      if (!cssom || !cssom.length) {\n        return void 0;\n      }\n      var isLocked = false;\n      var relatedElements = [];\n      var rulesGroupByDocumentFragment = groupCssomByDocument(cssom);\n      var _loop9 = function _loop9() {\n        var key = _Object$keys3[_i39];\n        var _rulesGroupByDocument = rulesGroupByDocumentFragment[key], root = _rulesGroupByDocument.root, rules = _rulesGroupByDocument.rules;\n        var orientationRules = rules.filter(isMediaRuleWithOrientation);\n        if (!orientationRules.length) {\n          return 1;\n        }\n        orientationRules.forEach(function(_ref123) {\n          var cssRules = _ref123.cssRules;\n          Array.from(cssRules).forEach(function(cssRule) {\n            var locked = getIsOrientationLocked(cssRule);\n            if (locked && cssRule.selectorText.toUpperCase() !== 'HTML') {\n              var elms = Array.from(root.querySelectorAll(cssRule.selectorText)) || [];\n              relatedElements = relatedElements.concat(elms);\n            }\n            isLocked = isLocked || locked;\n          });\n        });\n      };\n      for (var _i39 = 0, _Object$keys3 = Object.keys(rulesGroupByDocumentFragment); _i39 < _Object$keys3.length; _i39++) {\n        if (_loop9()) {\n          continue;\n        }\n      }\n      if (!isLocked) {\n        return true;\n      }\n      if (relatedElements.length) {\n        this.relatedNodes(relatedElements);\n      }\n      return false;\n      function groupCssomByDocument(cssObjectModel) {\n        return cssObjectModel.reduce(function(out, _ref124) {\n          var sheet = _ref124.sheet, root = _ref124.root, shadowId = _ref124.shadowId;\n          var key = shadowId ? shadowId : 'topDocument';\n          if (!out[key]) {\n            out[key] = {\n              root: root,\n              rules: []\n            };\n          }\n          if (!sheet || !sheet.cssRules) {\n            return out;\n          }\n          var rules = Array.from(sheet.cssRules);\n          out[key].rules = out[key].rules.concat(rules);\n          return out;\n        }, {});\n      }\n      function isMediaRuleWithOrientation(_ref125) {\n        var type2 = _ref125.type, cssText = _ref125.cssText;\n        if (type2 !== 4) {\n          return false;\n        }\n        return /orientation:\\s*landscape/i.test(cssText) || /orientation:\\s*portrait/i.test(cssText);\n      }\n      function getIsOrientationLocked(_ref126) {\n        var selectorText = _ref126.selectorText, style = _ref126.style;\n        if (!selectorText || style.length <= 0) {\n          return false;\n        }\n        var transformStyle = style.transform || style.webkitTransform || style.msTransform || false;\n        if (!transformStyle && !style.rotate) {\n          return false;\n        }\n        var transformDegrees = getTransformDegrees(transformStyle);\n        var rotateDegrees = getRotationInDegrees('rotate', style.rotate);\n        var degrees = transformDegrees + rotateDegrees;\n        if (!degrees) {\n          return false;\n        }\n        degrees = Math.abs(degrees);\n        if (Math.abs(degrees - 180) % 180 <= degreeThreshold) {\n          return false;\n        }\n        return Math.abs(degrees - 90) % 90 <= degreeThreshold;\n      }\n      function getTransformDegrees(transformStyle) {\n        if (!transformStyle) {\n          return 0;\n        }\n        var matches4 = transformStyle.match(/(rotate|rotateZ|rotate3d|matrix|matrix3d)\\(([^)]+)\\)(?!.*(rotate|rotateZ|rotate3d|matrix|matrix3d))/);\n        if (!matches4) {\n          return 0;\n        }\n        var _matches2 = _slicedToArray(matches4, 3), transformFn = _matches2[1], transformFnValue = _matches2[2];\n        return getRotationInDegrees(transformFn, transformFnValue);\n      }\n      function getRotationInDegrees(transformFunction, transformFnValue) {\n        switch (transformFunction) {\n         case 'rotate':\n         case 'rotateZ':\n          return getAngleInDegrees(transformFnValue);\n\n         case 'rotate3d':\n          var _transformFnValue$spl = transformFnValue.split(',').map(function(value) {\n            return value.trim();\n          }), _transformFnValue$spl2 = _slicedToArray(_transformFnValue$spl, 4), z = _transformFnValue$spl2[2], angleWithUnit = _transformFnValue$spl2[3];\n          if (parseInt(z) === 0) {\n            return;\n          }\n          return getAngleInDegrees(angleWithUnit);\n\n         case 'matrix':\n         case 'matrix3d':\n          return getAngleInDegreesFromMatrixTransform(transformFnValue);\n\n         default:\n          return 0;\n        }\n      }\n      function getAngleInDegrees(angleWithUnit) {\n        var _ref127 = angleWithUnit.match(/(deg|grad|rad|turn)/) || [], _ref128 = _slicedToArray(_ref127, 1), unit = _ref128[0];\n        if (!unit) {\n          return 0;\n        }\n        var angle = parseFloat(angleWithUnit.replace(unit, ''));\n        switch (unit) {\n         case 'rad':\n          return convertRadToDeg(angle);\n\n         case 'grad':\n          return convertGradToDeg(angle);\n\n         case 'turn':\n          return convertTurnToDeg(angle);\n\n         case 'deg':\n         default:\n          return parseInt(angle);\n        }\n      }\n      function getAngleInDegreesFromMatrixTransform(transformFnValue) {\n        var values2 = transformFnValue.split(',');\n        if (values2.length <= 6) {\n          var _values = _slicedToArray(values2, 2), a2 = _values[0], b3 = _values[1];\n          var radians = Math.atan2(parseFloat(b3), parseFloat(a2));\n          return convertRadToDeg(radians);\n        }\n        var sinB = parseFloat(values2[8]);\n        var b2 = Math.asin(sinB);\n        var cosB = Math.cos(b2);\n        var rotateZRadians = Math.acos(parseFloat(values2[0]) / cosB);\n        return convertRadToDeg(rotateZRadians);\n      }\n      function convertRadToDeg(radians) {\n        return Math.round(radians * (180 / Math.PI));\n      }\n      function convertGradToDeg(grad) {\n        grad = grad % 400;\n        if (grad < 0) {\n          grad += 400;\n        }\n        return Math.round(grad / 400 * 360);\n      }\n      function convertTurnToDeg(turn) {\n        return Math.round(360 / (1 / turn));\n      }\n    }\n    var css_orientation_lock_evaluate_default = cssOrientationLockEvaluate;\n    function noAutoplayAudioEvaluate(node, options) {\n      var hasControls = node.hasAttribute('controls');\n      if (node.hasAttribute('loop')) {\n        return hasControls;\n      }\n      if (!node.duration) {\n        console.warn('axe.utils.preloadMedia did not load metadata');\n        return void 0;\n      }\n      var _options$allowedDurat = options.allowedDuration, allowedDuration = _options$allowedDurat === void 0 ? 3 : _options$allowedDurat;\n      var playableDuration = getPlayableDuration(node);\n      if (playableDuration <= allowedDuration) {\n        return true;\n      }\n      if (!hasControls) {\n        return false;\n      }\n      return true;\n      function getPlayableDuration(elm) {\n        if (!elm.currentSrc) {\n          return 0;\n        }\n        var playbackRange = getPlaybackRange(elm.currentSrc);\n        if (!playbackRange) {\n          return Math.abs(elm.duration - (elm.currentTime || 0));\n        }\n        if (playbackRange.length === 1) {\n          return Math.abs(elm.duration - playbackRange[0]);\n        }\n        return Math.abs(playbackRange[1] - playbackRange[0]);\n      }\n      function getPlaybackRange(src) {\n        var match = src.match(/#t=(.*)/);\n        if (!match) {\n          return;\n        }\n        var _match = _slicedToArray(match, 2), value = _match[1];\n        var ranges = value.split(',');\n        return ranges.map(function(range2) {\n          if (/:/.test(range2)) {\n            return convertHourMinSecToSeconds(range2);\n          }\n          return parseFloat(range2);\n        });\n      }\n      function convertHourMinSecToSeconds(hhMmSs) {\n        var parts = hhMmSs.split(':');\n        var secs = 0;\n        var mins = 1;\n        while (parts.length > 0) {\n          secs += mins * parseInt(parts.pop(), 10);\n          mins *= 60;\n        }\n        return parseFloat(secs);\n      }\n    }\n    var no_autoplay_audio_evaluate_default = noAutoplayAudioEvaluate;\n    function frameTestedEvaluate(node, options) {\n      return options.isViolation ? false : void 0;\n    }\n    var frame_tested_evaluate_default = frameTestedEvaluate;\n    var joinStr = ' > ';\n    function frameTestedAfter(results) {\n      var iframes = {};\n      return results.filter(function(result) {\n        var frameResult = result.node.ancestry[result.node.ancestry.length - 1] !== 'html';\n        if (frameResult) {\n          var ancestry2 = result.node.ancestry.flat(Infinity).join(joinStr);\n          iframes[ancestry2] = result;\n          return true;\n        }\n        var ancestry = result.node.ancestry.slice(0, result.node.ancestry.length - 1).flat(Infinity).join(joinStr);\n        if (iframes[ancestry]) {\n          iframes[ancestry].result = true;\n        }\n        return false;\n      });\n    }\n    var frame_tested_after_default = frameTestedAfter;\n    function captionEvaluate(node, options, virtualNode) {\n      var tracks = query_selector_all_default(virtualNode, 'track');\n      var hasCaptions = tracks.some(function(vNode) {\n        return (vNode.attr('kind') || '').toLowerCase() === 'captions';\n      });\n      return hasCaptions ? false : void 0;\n    }\n    var caption_evaluate_default = captionEvaluate;\n    function structuredDlitemsEvaluate(node, options, virtualNode) {\n      var children = virtualNode.children;\n      if (!children || !children.length) {\n        return false;\n      }\n      var hasDt = false, hasDd = false, nodeName2;\n      for (var _i40 = 0; _i40 < children.length; _i40++) {\n        nodeName2 = children[_i40].props.nodeName.toUpperCase();\n        if (nodeName2 === 'DT') {\n          hasDt = true;\n        }\n        if (hasDt && nodeName2 === 'DD') {\n          return false;\n        }\n        if (nodeName2 === 'DD') {\n          hasDd = true;\n        }\n      }\n      return hasDt || hasDd;\n    }\n    var structured_dlitems_evaluate_default = structuredDlitemsEvaluate;\n    function onlyListitemsEvaluate(node, options, virtualNode) {\n      var hasNonEmptyTextNode = false;\n      var atLeastOneListitem = false;\n      var isEmpty2 = true;\n      var badNodes = [];\n      var badRoleNodes = [];\n      var badRoles = [];\n      virtualNode.children.forEach(function(vNode) {\n        var actualNode = vNode.actualNode;\n        if (actualNode.nodeType === 3 && actualNode.nodeValue.trim() !== '') {\n          hasNonEmptyTextNode = true;\n          return;\n        }\n        if (actualNode.nodeType !== 1 || !_isVisibleToScreenReaders(actualNode)) {\n          return;\n        }\n        isEmpty2 = false;\n        var isLi = actualNode.nodeName.toUpperCase() === 'LI';\n        var role = get_role_default(vNode);\n        var isListItemRole = role === 'listitem';\n        if (!isLi && !isListItemRole) {\n          badNodes.push(actualNode);\n        }\n        if (isLi && !isListItemRole) {\n          badRoleNodes.push(actualNode);\n          if (!badRoles.includes(role)) {\n            badRoles.push(role);\n          }\n        }\n        if (isListItemRole) {\n          atLeastOneListitem = true;\n        }\n      });\n      if (hasNonEmptyTextNode || badNodes.length) {\n        this.relatedNodes(badNodes);\n        return true;\n      }\n      if (isEmpty2 || atLeastOneListitem) {\n        return false;\n      }\n      this.relatedNodes(badRoleNodes);\n      this.data({\n        messageKey: 'roleNotValid',\n        roles: badRoles.join(', ')\n      });\n      return true;\n    }\n    var only_listitems_evaluate_default = onlyListitemsEvaluate;\n    function onlyDlitemsEvaluate(node, options, virtualNode) {\n      var ALLOWED_ROLES = [ 'definition', 'term', 'list' ];\n      var base = {\n        badNodes: [],\n        hasNonEmptyTextNode: false\n      };\n      var content = virtualNode.children.reduce(function(vNodes, child) {\n        var actualNode = child.actualNode;\n        if (actualNode.nodeName.toUpperCase() === 'DIV' && get_role_default(actualNode) === null) {\n          return vNodes.concat(child.children);\n        }\n        return vNodes.concat(child);\n      }, []);\n      var result = content.reduce(function(out, childNode) {\n        var actualNode = childNode.actualNode;\n        var tagName = actualNode.nodeName.toUpperCase();\n        if (actualNode.nodeType === 1 && _isVisibleToScreenReaders(actualNode)) {\n          var explicitRole2 = get_explicit_role_default(actualNode);\n          if (tagName !== 'DT' && tagName !== 'DD' || explicitRole2) {\n            if (!ALLOWED_ROLES.includes(explicitRole2)) {\n              out.badNodes.push(actualNode);\n            }\n          }\n        } else if (actualNode.nodeType === 3 && actualNode.nodeValue.trim() !== '') {\n          out.hasNonEmptyTextNode = true;\n        }\n        return out;\n      }, base);\n      if (result.badNodes.length) {\n        this.relatedNodes(result.badNodes);\n      }\n      return !!result.badNodes.length || result.hasNonEmptyTextNode;\n    }\n    function listitemEvaluate(node, options, virtualNode) {\n      var parent = virtualNode.parent;\n      if (!parent) {\n        return void 0;\n      }\n      var parentNodeName = parent.props.nodeName;\n      var parentRole = get_explicit_role_default(parent);\n      if ([ 'presentation', 'none', 'list' ].includes(parentRole)) {\n        return true;\n      }\n      if (parentRole && is_valid_role_default(parentRole)) {\n        this.data({\n          messageKey: 'roleNotValid'\n        });\n        return false;\n      }\n      return [ 'ul', 'ol', 'menu' ].includes(parentNodeName);\n    }\n    function invalidChildrenEvaluate(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;\n      var relatedNodes = [];\n      var issues = [];\n      if (!virtualNode.children) {\n        return void 0;\n      }\n      var vChildren = mapWithNested(virtualNode.children);\n      while (vChildren.length) {\n        var _vChild$actualNode;\n        var _vChildren$shift = vChildren.shift(), vChild = _vChildren$shift.vChild, nested = _vChildren$shift.nested;\n        if (options.divGroups && !nested && isDivGroup(vChild)) {\n          if (!vChild.children) {\n            return void 0;\n          }\n          var vGrandChildren = mapWithNested(vChild.children, true);\n          vChildren.push.apply(vChildren, _toConsumableArray(vGrandChildren));\n          continue;\n        }\n        var issue = getInvalidSelector(vChild, nested, options);\n        if (!issue) {\n          continue;\n        }\n        if (!issues.includes(issue)) {\n          issues.push(issue);\n        }\n        if ((vChild === null || vChild === void 0 || (_vChild$actualNode = vChild.actualNode) === null || _vChild$actualNode === void 0 ? void 0 : _vChild$actualNode.nodeType) === 1) {\n          relatedNodes.push(vChild.actualNode);\n        }\n      }\n      if (issues.length === 0) {\n        return false;\n      }\n      this.data({\n        values: issues.join(', ')\n      });\n      this.relatedNodes(relatedNodes);\n      return true;\n    }\n    function getInvalidSelector(vChild, nested, _ref129) {\n      var _ref129$validRoles = _ref129.validRoles, validRoles = _ref129$validRoles === void 0 ? [] : _ref129$validRoles, _ref129$validNodeName = _ref129.validNodeNames, validNodeNames = _ref129$validNodeName === void 0 ? [] : _ref129$validNodeName;\n      var _vChild$props = vChild.props, nodeName2 = _vChild$props.nodeName, nodeType = _vChild$props.nodeType, nodeValue = _vChild$props.nodeValue;\n      var selector = nested ? 'div > ' : '';\n      if (nodeType === 3 && nodeValue.trim() !== '') {\n        return selector + '#text';\n      }\n      if (nodeType !== 1 || !_isVisibleToScreenReaders(vChild)) {\n        return false;\n      }\n      var role = get_explicit_role_default(vChild);\n      if (role) {\n        return validRoles.includes(role) ? false : selector + '[role='.concat(role, ']');\n      } else {\n        return validNodeNames.includes(nodeName2) ? false : selector + nodeName2;\n      }\n    }\n    function isDivGroup(vNode) {\n      return vNode.props.nodeName === 'div' && get_explicit_role_default(vNode) === null;\n    }\n    function mapWithNested(vNodes) {\n      var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return vNodes.map(function(vChild) {\n        return {\n          vChild: vChild,\n          nested: nested\n        };\n      });\n    }\n    function dlitemEvaluate(node) {\n      var parent = get_composed_parent_default(node);\n      var parentTagName = parent.nodeName.toUpperCase();\n      var parentRole = get_explicit_role_default(parent);\n      if (parentTagName === 'DIV' && [ 'presentation', 'none', null ].includes(parentRole)) {\n        parent = get_composed_parent_default(parent);\n        parentTagName = parent.nodeName.toUpperCase();\n        parentRole = get_explicit_role_default(parent);\n      }\n      if (parentTagName !== 'DL') {\n        return false;\n      }\n      if (!parentRole || [ 'presentation', 'none', 'list' ].includes(parentRole)) {\n        return true;\n      }\n      return false;\n    }\n    var dlitem_evaluate_default = dlitemEvaluate;\n    function xmlLangMismatchEvaluate(node, options, vNode) {\n      var primaryLangValue = get_base_lang_default(vNode.attr('lang'));\n      var primaryXmlLangValue = get_base_lang_default(vNode.attr('xml:lang'));\n      return primaryLangValue === primaryXmlLangValue;\n    }\n    var xml_lang_mismatch_evaluate_default = xmlLangMismatchEvaluate;\n    function validLangEvaluate(node, options, virtualNode) {\n      var invalid = [];\n      options.attributes.forEach(function(langAttr) {\n        var langVal = virtualNode.attr(langAttr);\n        if (typeof langVal !== 'string') {\n          return;\n        }\n        var baselangVal = get_base_lang_default(langVal);\n        var invalidLang = options.value ? !options.value.map(get_base_lang_default).includes(baselangVal) : !valid_langs_default(baselangVal);\n        if (baselangVal !== '' && invalidLang || langVal !== '' && !sanitize_default(langVal)) {\n          invalid.push(langAttr + '=\"' + virtualNode.attr(langAttr) + '\"');\n        }\n      });\n      if (!invalid.length) {\n        return false;\n      }\n      if (virtualNode.props.nodeName !== 'html' && !_hasLangText(virtualNode)) {\n        return false;\n      }\n      this.data(invalid);\n      return true;\n    }\n    var valid_lang_evaluate_default = validLangEvaluate;\n    function hasValue(value) {\n      return (value || '').trim() !== '';\n    }\n    function hasLangEvaluate(node, options, virtualNode) {\n      var xhtml = typeof document !== 'undefined' ? is_xhtml_default(document) : false;\n      if (options.attributes.includes('xml:lang') && options.attributes.includes('lang') && hasValue(virtualNode.attr('xml:lang')) && !hasValue(virtualNode.attr('lang')) && !xhtml) {\n        this.data({\n          messageKey: 'noXHTML'\n        });\n        return false;\n      }\n      var hasLang = options.attributes.some(function(name) {\n        return hasValue(virtualNode.attr(name));\n      });\n      if (!hasLang) {\n        this.data({\n          messageKey: 'noLang'\n        });\n        return false;\n      }\n      return true;\n    }\n    var has_lang_evaluate_default = hasLangEvaluate;\n    function landmarkIsUniqueEvaluate(node, options, virtualNode) {\n      var role = get_role_default(node);\n      var accessibleText2 = _accessibleTextVirtual(virtualNode);\n      accessibleText2 = accessibleText2 ? accessibleText2.toLowerCase() : null;\n      this.data({\n        role: role,\n        accessibleText: accessibleText2\n      });\n      this.relatedNodes([ node ]);\n      return true;\n    }\n    var landmark_is_unique_evaluate_default = landmarkIsUniqueEvaluate;\n    function landmarkIsUniqueAfter(results) {\n      var uniqueLandmarks = [];\n      return results.filter(function(currentResult) {\n        var findMatch = function findMatch(someResult) {\n          return currentResult.data.role === someResult.data.role && currentResult.data.accessibleText === someResult.data.accessibleText;\n        };\n        var matchedResult = uniqueLandmarks.find(findMatch);\n        if (matchedResult) {\n          matchedResult.result = false;\n          matchedResult.relatedNodes.push(currentResult.relatedNodes[0]);\n          return false;\n        }\n        uniqueLandmarks.push(currentResult);\n        currentResult.relatedNodes = [];\n        return true;\n      });\n    }\n    var landmark_is_unique_after_default = landmarkIsUniqueAfter;\n    function titleOnlyEvaluate(node, options, virtualNode) {\n      var labelText2 = label_virtual_default2(virtualNode);\n      var title = title_text_default(virtualNode);\n      var ariaDescribedBy = virtualNode.attr('aria-describedby');\n      return !labelText2 && !!(title || ariaDescribedBy);\n    }\n    var title_only_evaluate_default = titleOnlyEvaluate;\n    function multipleLabelEvaluate(node) {\n      var id = escape_selector_default(node.getAttribute('id'));\n      var parent = node.parentNode;\n      var root = get_root_node_default2(node);\n      root = root.documentElement || root;\n      var labels = Array.from(root.querySelectorAll('label[for=\"'.concat(id, '\"]')));\n      if (labels.length) {\n        labels = labels.filter(function(label3) {\n          return !_isHiddenForEveryone(label3);\n        });\n      }\n      while (parent) {\n        if (parent.nodeName.toUpperCase() === 'LABEL' && labels.indexOf(parent) === -1) {\n          labels.push(parent);\n        }\n        parent = parent.parentNode;\n      }\n      this.relatedNodes(labels);\n      if (labels.length > 1) {\n        var ATVisibleLabels = labels.filter(function(label3) {\n          return _isVisibleToScreenReaders(label3);\n        });\n        if (ATVisibleLabels.length > 1) {\n          return void 0;\n        }\n        var labelledby = idrefs_default(node, 'aria-labelledby');\n        return !labelledby.includes(ATVisibleLabels[0]) ? void 0 : false;\n      }\n      return false;\n    }\n    var multiple_label_evaluate_default = multipleLabelEvaluate;\n    function isStringContained(compare, compareWith) {\n      var curatedCompareWith = curateString(compareWith);\n      var curatedCompare = curateString(compare);\n      if (!curatedCompareWith || !curatedCompare) {\n        return false;\n      }\n      return curatedCompareWith.includes(curatedCompare);\n    }\n    function curateString(str) {\n      var noUnicodeStr = remove_unicode_default(str, {\n        emoji: true,\n        nonBmp: true,\n        punctuations: true\n      });\n      return sanitize_default(noUnicodeStr);\n    }\n    function labelContentNameMismatchEvaluate(node, options, virtualNode) {\n      var _options$occurrenceTh;\n      var pixelThreshold = options === null || options === void 0 ? void 0 : options.pixelThreshold;\n      var occurrenceThreshold = (_options$occurrenceTh = options === null || options === void 0 ? void 0 : options.occurrenceThreshold) !== null && _options$occurrenceTh !== void 0 ? _options$occurrenceTh : options === null || options === void 0 ? void 0 : options.occuranceThreshold;\n      var accText = accessible_text_default(node).toLowerCase();\n      var visibleText = sanitize_default(subtree_text_default(virtualNode, {\n        subtreeDescendant: true,\n        ignoreIconLigature: true,\n        pixelThreshold: pixelThreshold,\n        occurrenceThreshold: occurrenceThreshold\n      })).toLowerCase();\n      if (!visibleText) {\n        return true;\n      }\n      if (is_human_interpretable_default(accText) < 1 || is_human_interpretable_default(visibleText) < 1) {\n        return void 0;\n      }\n      return isStringContained(visibleText, accText);\n    }\n    var label_content_name_mismatch_evaluate_default = labelContentNameMismatchEvaluate;\n    function implicitEvaluate(node, options, virtualNode) {\n      try {\n        var label3 = closest_default(virtualNode, 'label');\n        if (label3) {\n          var implicitLabel = sanitize_default(_accessibleTextVirtual(label3, {\n            inControlContext: true,\n            startNode: virtualNode\n          }));\n          if (label3.actualNode) {\n            this.relatedNodes([ label3.actualNode ]);\n          }\n          this.data({\n            implicitLabel: implicitLabel\n          });\n          return !!implicitLabel;\n        }\n        return false;\n      } catch (_unused10) {\n        return void 0;\n      }\n    }\n    var implicit_evaluate_default = implicitEvaluate;\n    function hiddenExplicitLabelEvaluate(node, options, virtualNode) {\n      if (virtualNode.hasAttr('id')) {\n        if (!virtualNode.actualNode) {\n          return void 0;\n        }\n        var root = get_root_node_default2(node);\n        var _id4 = escape_selector_default(node.getAttribute('id'));\n        var label3 = root.querySelector('label[for=\"'.concat(_id4, '\"]'));\n        if (label3 && !_isVisibleToScreenReaders(label3)) {\n          var name;\n          try {\n            name = _accessibleTextVirtual(virtualNode).trim();\n          } catch (_unused11) {\n            return void 0;\n          }\n          var isNameEmpty = name === '';\n          return isNameEmpty;\n        }\n      }\n      return false;\n    }\n    var hidden_explicit_label_evaluate_default = hiddenExplicitLabelEvaluate;\n    function helpSameAsLabelEvaluate(node, options, virtualNode) {\n      var labelText2 = label_virtual_default2(virtualNode);\n      var check = node.getAttribute('title');\n      if (!labelText2) {\n        return false;\n      }\n      if (!check) {\n        check = '';\n        if (node.getAttribute('aria-describedby')) {\n          var ref = idrefs_default(node, 'aria-describedby');\n          check = ref.map(function(thing) {\n            return thing ? accessible_text_default(thing) : '';\n          }).join('');\n        }\n      }\n      return sanitize_default(check) === sanitize_default(labelText2);\n    }\n    var help_same_as_label_evaluate_default = helpSameAsLabelEvaluate;\n    function explicitEvaluate(node, options, virtualNode) {\n      var _this7 = this;\n      if (!virtualNode.attr('id')) {\n        return false;\n      }\n      if (!virtualNode.actualNode) {\n        return void 0;\n      }\n      var root = get_root_node_default2(virtualNode.actualNode);\n      var id = escape_selector_default(virtualNode.attr('id'));\n      var labels = Array.from(root.querySelectorAll('label[for=\"'.concat(id, '\"]')));\n      this.relatedNodes(labels);\n      if (!labels.length) {\n        return false;\n      }\n      try {\n        return labels.some(function(label3) {\n          if (!_isVisibleOnScreen(label3)) {\n            return true;\n          } else {\n            var explicitLabel = sanitize_default(accessible_text_default(label3, {\n              inControlContext: true,\n              startNode: virtualNode\n            }));\n            _this7.data({\n              explicitLabel: explicitLabel\n            });\n            return !!explicitLabel;\n          }\n        });\n      } catch (_unused12) {\n        return void 0;\n      }\n    }\n    var explicit_evaluate_default = explicitEvaluate;\n    function duplicateImgLabelEvaluate(node, options, virtualNode) {\n      if ([ 'none', 'presentation' ].includes(get_role_default(virtualNode))) {\n        return false;\n      }\n      var parentVNode = closest_default(virtualNode, options.parentSelector);\n      if (!parentVNode) {\n        return false;\n      }\n      var visibleText = visible_virtual_default(parentVNode, true).toLowerCase();\n      if (visibleText === '') {\n        return false;\n      }\n      return visibleText === _accessibleTextVirtual(virtualNode).toLowerCase();\n    }\n    var duplicate_img_label_evaluate_default = duplicateImgLabelEvaluate;\n    function altSpaceValueEvaluate(node, options, virtualNode) {\n      var alt = virtualNode.attr('alt');\n      var isOnlySpace = /^\\s+$/;\n      return typeof alt === 'string' && isOnlySpace.test(alt);\n    }\n    var alt_space_value_evaluate_default = altSpaceValueEvaluate;\n    function tabindexEvaluate(node, options, virtualNode) {\n      var tabIndex = parse_tabindex_default(virtualNode.attr('tabindex'));\n      return tabIndex === null || tabIndex <= 0;\n    }\n    var tabindex_evaluate_default = tabindexEvaluate;\n    function noFocusableContentEvaluate(node, options, virtualNode) {\n      if (!virtualNode.children) {\n        return void 0;\n      }\n      try {\n        var focusableDescendants2 = getFocusableDescendants(virtualNode);\n        if (!focusableDescendants2.length) {\n          return true;\n        }\n        var notHiddenElements = focusableDescendants2.filter(usesUnreliableHidingStrategy);\n        if (notHiddenElements.length > 0) {\n          this.data({\n            messageKey: 'notHidden'\n          });\n          this.relatedNodes(notHiddenElements);\n        } else {\n          this.relatedNodes(focusableDescendants2);\n        }\n        return false;\n      } catch (_unused13) {\n        return void 0;\n      }\n    }\n    function getFocusableDescendants(vNode) {\n      if (!vNode.children) {\n        if (vNode.props.nodeType === 1) {\n          throw new Error('Cannot determine children');\n        }\n        return [];\n      }\n      var retVal = [];\n      vNode.children.forEach(function(child) {\n        if (get_role_type_default(child) === 'widget' && _isFocusable(child)) {\n          retVal.push(child);\n        } else {\n          retVal.push.apply(retVal, _toConsumableArray(getFocusableDescendants(child)));\n        }\n      });\n      return retVal;\n    }\n    function usesUnreliableHidingStrategy(vNode) {\n      var tabIndex = parse_tabindex_default(vNode.attr('tabindex'));\n      return tabIndex !== null && tabIndex < 0;\n    }\n    function landmarkIsTopLevelEvaluate(node) {\n      var landmarks = get_aria_roles_by_type_default('landmark');\n      var parent = get_composed_parent_default(node);\n      var nodeRole = get_role_default(node);\n      this.data({\n        role: nodeRole\n      });\n      while (parent) {\n        var role = parent.getAttribute('role');\n        if (!role && parent.nodeName.toUpperCase() !== 'FORM') {\n          role = implicit_role_default(parent);\n        }\n        if (role && landmarks.includes(role) && !(role === 'main' && nodeRole === 'complementary')) {\n          return false;\n        }\n        parent = get_composed_parent_default(parent);\n      }\n      return true;\n    }\n    var landmark_is_top_level_evaluate_default = landmarkIsTopLevelEvaluate;\n    function frameFocusableContentEvaluate(node, options, virtualNode) {\n      if (!virtualNode.children) {\n        return void 0;\n      }\n      try {\n        return !virtualNode.children.some(function(child) {\n          return focusableDescendants(child);\n        });\n      } catch (_unused14) {\n        return void 0;\n      }\n    }\n    function focusableDescendants(vNode) {\n      if (_isInTabOrder(vNode)) {\n        return true;\n      }\n      if (!vNode.children) {\n        if (vNode.props.nodeType === 1) {\n          throw new Error('Cannot determine children');\n        }\n        return false;\n      }\n      return vNode.children.some(function(child) {\n        return focusableDescendants(child);\n      });\n    }\n    function focusableNotTabbableEvaluate(node, options, virtualNode) {\n      var elementsThatCanBeDisabled = [ 'button', 'fieldset', 'input', 'select', 'textarea' ];\n      var tabbableElements = virtualNode.tabbableElements;\n      if (!tabbableElements || !tabbableElements.length) {\n        return true;\n      }\n      var relatedNodes = tabbableElements.filter(function(vNode) {\n        return !elementsThatCanBeDisabled.includes(vNode.props.nodeName);\n      });\n      this.relatedNodes(relatedNodes.map(function(vNode) {\n        return vNode.actualNode;\n      }));\n      if (relatedNodes.length === 0 || is_modal_open_default()) {\n        return true;\n      }\n      return relatedNodes.every(function(vNode) {\n        var pointerEvents = vNode.getComputedStylePropertyValue('pointer-events');\n        var width = parseInt(vNode.getComputedStylePropertyValue('width'));\n        var height = parseInt(vNode.getComputedStylePropertyValue('height'));\n        return vNode.actualNode.onfocus || (width === 0 || height === 0) && pointerEvents === 'none';\n      }) ? void 0 : false;\n    }\n    var focusable_not_tabbable_evaluate_default = focusableNotTabbableEvaluate;\n    function focusableNoNameEvaluate(node, options, virtualNode) {\n      if (!_isInTabOrder(virtualNode)) {\n        return false;\n      }\n      try {\n        return !_accessibleTextVirtual(virtualNode);\n      } catch (_unused15) {\n        return void 0;\n      }\n    }\n    var focusable_no_name_evaluate_default = focusableNoNameEvaluate;\n    function focusableModalOpenEvaluate(node, options, virtualNode) {\n      var tabbableElements = virtualNode.tabbableElements.map(function(_ref130) {\n        var actualNode = _ref130.actualNode;\n        return actualNode;\n      });\n      if (!tabbableElements || !tabbableElements.length) {\n        return true;\n      }\n      if (is_modal_open_default()) {\n        this.relatedNodes(tabbableElements);\n        return void 0;\n      }\n      return true;\n    }\n    var focusable_modal_open_evaluate_default = focusableModalOpenEvaluate;\n    function focusableElementEvaluate(node, options, virtualNode) {\n      if (virtualNode.hasAttr('contenteditable') && isContenteditable(virtualNode)) {\n        return true;\n      }\n      return _isInTabOrder(virtualNode);\n      function isContenteditable(vNode) {\n        var contenteditable = vNode.attr('contenteditable');\n        if (contenteditable === 'true' || contenteditable === '') {\n          return true;\n        }\n        if (contenteditable === 'false') {\n          return false;\n        }\n        var ancestor = closest_default(virtualNode.parent, '[contenteditable]');\n        if (!ancestor) {\n          return false;\n        }\n        return isContenteditable(ancestor);\n      }\n    }\n    var focusable_element_evaluate_default = focusableElementEvaluate;\n    function focusableDisabledEvaluate(node, options, virtualNode) {\n      var elementsThatCanBeDisabled = [ 'button', 'fieldset', 'input', 'select', 'textarea' ];\n      var tabbableElements = virtualNode.tabbableElements;\n      if (!tabbableElements || !tabbableElements.length) {\n        return true;\n      }\n      var relatedNodes = tabbableElements.filter(function(vNode) {\n        return elementsThatCanBeDisabled.includes(vNode.props.nodeName);\n      });\n      this.relatedNodes(relatedNodes.map(function(vNode) {\n        return vNode.actualNode;\n      }));\n      if (relatedNodes.length === 0 || is_modal_open_default()) {\n        return true;\n      }\n      return relatedNodes.every(function(vNode) {\n        var pointerEvents = vNode.getComputedStylePropertyValue('pointer-events');\n        var width = parseInt(vNode.getComputedStylePropertyValue('width'));\n        var height = parseInt(vNode.getComputedStylePropertyValue('height'));\n        return vNode.actualNode.onfocus || (width === 0 || height === 0) && pointerEvents === 'none';\n      }) ? void 0 : false;\n    }\n    var focusable_disabled_evaluate_default = focusableDisabledEvaluate;\n    function focusableContentEvaluate(node, options, virtualNode) {\n      var tabbableElements = virtualNode.tabbableElements;\n      if (!tabbableElements) {\n        return false;\n      }\n      var tabbableContentElements = tabbableElements.filter(function(el) {\n        return el !== virtualNode;\n      });\n      return tabbableContentElements.length > 0;\n    }\n    var focusable_content_evaluate_default = focusableContentEvaluate;\n    function accesskeysEvaluate(node, options, vNode) {\n      if (!_isHiddenForEveryone(vNode)) {\n        this.data(vNode.attr('accesskey'));\n        this.relatedNodes([ node ]);\n      }\n      return true;\n    }\n    var accesskeys_evaluate_default = accesskeysEvaluate;\n    function accesskeysAfter(results) {\n      var seen = {};\n      return results.filter(function(r) {\n        if (!r.data) {\n          return false;\n        }\n        var key = r.data.toUpperCase();\n        if (!seen[key]) {\n          seen[key] = r;\n          r.relatedNodes = [];\n          return true;\n        }\n        seen[key].relatedNodes.push(r.relatedNodes[0]);\n        return false;\n      }).map(function(r) {\n        r.result = !!r.relatedNodes.length;\n        return r;\n      });\n    }\n    var accesskeys_after_default = accesskeysAfter;\n    function pageNoDuplicateEvaluate(node, options, virtualNode) {\n      if (!options || !options.selector || typeof options.selector !== 'string') {\n        throw new TypeError('page-no-duplicate requires options.selector to be a string');\n      }\n      var key = 'page-no-duplicate;' + options.selector;\n      if (cache_default.get(key)) {\n        this.data('ignored');\n        return;\n      }\n      cache_default.set(key, true);\n      var elms = query_selector_all_filter_default(axe._tree[0], options.selector, function(elm) {\n        return _isVisibleToScreenReaders(elm);\n      });\n      if (typeof options.nativeScopeFilter === 'string') {\n        elms = elms.filter(function(elm) {\n          return elm.actualNode.hasAttribute('role') || !find_up_virtual_default(elm, options.nativeScopeFilter);\n        });\n      }\n      if (typeof options.role === 'string') {\n        elms = elms.filter(function(elm) {\n          return get_role_default(elm) === options.role;\n        });\n      }\n      this.relatedNodes(elms.filter(function(elm) {\n        return elm !== virtualNode;\n      }).map(function(elm) {\n        return elm.actualNode;\n      }));\n      return elms.length <= 1;\n    }\n    var page_no_duplicate_evaluate_default = pageNoDuplicateEvaluate;\n    function pageNoDuplicateAfter(results) {\n      return results.filter(function(checkResult) {\n        return checkResult.data !== 'ignored';\n      });\n    }\n    var page_no_duplicate_after_default = pageNoDuplicateAfter;\n    function matchesDefinitionEvaluate(_, options, virtualNode) {\n      return matches_default2(virtualNode, options.matcher);\n    }\n    var matches_definition_evaluate_default = matchesDefinitionEvaluate;\n    function hasTextContentEvaluate(node, options, virtualNode) {\n      try {\n        return sanitize_default(subtree_text_default(virtualNode)) !== '';\n      } catch (_unused16) {\n        return void 0;\n      }\n    }\n    function hasDescendant(node, options, virtualNode) {\n      if (!options || !options.selector || typeof options.selector !== 'string') {\n        throw new TypeError('has-descendant requires options.selector to be a string');\n      }\n      if (options.passForModal && is_modal_open_default()) {\n        return true;\n      }\n      var matchingElms = query_selector_all_filter_default(virtualNode, options.selector, function(vNode) {\n        return _isVisibleToScreenReaders(vNode);\n      });\n      this.relatedNodes(matchingElms.map(function(vNode) {\n        return vNode.actualNode;\n      }));\n      return matchingElms.length > 0;\n    }\n    var has_descendant_evaluate_default = hasDescendant;\n    function pageHasElmAfter(results) {\n      var elmUsedAnywhere = results.some(function(frameResult) {\n        return frameResult.result === true;\n      });\n      if (elmUsedAnywhere) {\n        results.forEach(function(result) {\n          result.result = true;\n        });\n      }\n      return results;\n    }\n    var has_descendant_after_default = pageHasElmAfter;\n    function attrNonSpaceContentEvaluate(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var vNode = arguments.length > 2 ? arguments[2] : undefined;\n      if (!options.attribute || typeof options.attribute !== 'string') {\n        throw new TypeError('attr-non-space-content requires options.attribute to be a string');\n      }\n      if (!vNode.hasAttr(options.attribute)) {\n        this.data({\n          messageKey: 'noAttr'\n        });\n        return false;\n      }\n      var attribute = vNode.attr(options.attribute);\n      var attributeIsEmpty = !sanitize_default(attribute);\n      if (attributeIsEmpty) {\n        this.data({\n          messageKey: 'emptyAttr'\n        });\n        return false;\n      }\n      return true;\n    }\n    var attr_non_space_content_evaluate_default = attrNonSpaceContentEvaluate;\n    function autocompleteValidEvaluate(_node, options, virtualNode) {\n      var autocomplete2 = virtualNode.attr('autocomplete') || '';\n      return is_valid_autocomplete_default(autocomplete2, options);\n    }\n    var autocomplete_valid_evaluate_default = autocompleteValidEvaluate;\n    function autocompleteAppropriateEvaluate(node, options, virtualNode) {\n      if (virtualNode.props.nodeName !== 'input') {\n        return true;\n      }\n      var number = [ 'text', 'search', 'number', 'tel' ];\n      var url = [ 'text', 'search', 'url' ];\n      var allowedTypesMap = {\n        bday: [ 'text', 'search', 'date' ],\n        email: [ 'text', 'search', 'email' ],\n        username: [ 'text', 'search', 'email' ],\n        'street-address': [ 'text' ],\n        tel: [ 'text', 'search', 'tel' ],\n        'tel-country-code': [ 'text', 'search', 'tel' ],\n        'tel-national': [ 'text', 'search', 'tel' ],\n        'tel-area-code': [ 'text', 'search', 'tel' ],\n        'tel-local': [ 'text', 'search', 'tel' ],\n        'tel-local-prefix': [ 'text', 'search', 'tel' ],\n        'tel-local-suffix': [ 'text', 'search', 'tel' ],\n        'tel-extension': [ 'text', 'search', 'tel' ],\n        'cc-number': number,\n        'cc-exp': [ 'text', 'search', 'month', 'tel' ],\n        'cc-exp-month': number,\n        'cc-exp-year': number,\n        'cc-csc': number,\n        'transaction-amount': number,\n        'bday-day': number,\n        'bday-month': number,\n        'bday-year': number,\n        'new-password': [ 'text', 'search', 'password' ],\n        'current-password': [ 'text', 'search', 'password' ],\n        url: url,\n        photo: url,\n        impp: url\n      };\n      if (_typeof(options) === 'object') {\n        Object.keys(options).forEach(function(key) {\n          if (!allowedTypesMap[key]) {\n            allowedTypesMap[key] = [];\n          }\n          allowedTypesMap[key] = allowedTypesMap[key].concat(options[key]);\n        });\n      }\n      var autocompleteAttr = virtualNode.attr('autocomplete');\n      var autocompleteTerms = autocompleteAttr.split(/\\s+/g).map(function(term) {\n        return term.toLowerCase();\n      });\n      var purposeTerm = autocompleteTerms[autocompleteTerms.length - 1];\n      if (_autocomplete.stateTerms.includes(purposeTerm)) {\n        return true;\n      }\n      var allowedTypes = allowedTypesMap[purposeTerm];\n      var type2 = virtualNode.hasAttr('type') ? sanitize_default(virtualNode.attr('type')).toLowerCase() : 'text';\n      type2 = valid_input_type_default().includes(type2) ? type2 : 'text';\n      if (typeof allowedTypes === 'undefined') {\n        return type2 === 'text';\n      }\n      return allowedTypes.includes(type2);\n    }\n    var autocomplete_appropriate_evaluate_default = autocompleteAppropriateEvaluate;\n    var blockLike2 = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];\n    function linkInTextBlockStyleEvaluate(node) {\n      if (isBlock2(node)) {\n        return false;\n      }\n      var parentBlock = get_composed_parent_default(node);\n      while (parentBlock && parentBlock.nodeType === 1 && !isBlock2(parentBlock)) {\n        parentBlock = get_composed_parent_default(parentBlock);\n      }\n      if (!parentBlock) {\n        return void 0;\n      }\n      this.relatedNodes([ parentBlock ]);\n      if (element_is_distinct_default(node, parentBlock)) {\n        return true;\n      }\n      if (hasPseudoContent(node)) {\n        this.data({\n          messageKey: 'pseudoContent'\n        });\n        return void 0;\n      }\n      return false;\n    }\n    function isBlock2(elm) {\n      var display2 = window.getComputedStyle(elm).getPropertyValue('display');\n      return blockLike2.indexOf(display2) !== -1 || display2.substr(0, 6) === 'table-';\n    }\n    function hasPseudoContent(node) {\n      for (var _i41 = 0, _arr3 = [ 'before', 'after' ]; _i41 < _arr3.length; _i41++) {\n        var pseudo = _arr3[_i41];\n        var style = window.getComputedStyle(node, ':'.concat(pseudo));\n        var content = style.getPropertyValue('content');\n        if (content !== 'none') {\n          return true;\n        }\n      }\n      return false;\n    }\n    function getContrast2(color1, color2) {\n      var c1lum = color1.getRelativeLuminance();\n      var c2lum = color2.getRelativeLuminance();\n      return (Math.max(c1lum, c2lum) + .05) / (Math.min(c1lum, c2lum) + .05);\n    }\n    var blockLike3 = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];\n    function isBlock3(elm) {\n      var display2 = window.getComputedStyle(elm).getPropertyValue('display');\n      return blockLike3.indexOf(display2) !== -1 || display2.substr(0, 6) === 'table-';\n    }\n    function linkInTextBlockEvaluate(node, options) {\n      var requiredContrastRatio = options.requiredContrastRatio, allowSameColor = options.allowSameColor;\n      if (isBlock3(node)) {\n        return false;\n      }\n      var parentBlock = get_composed_parent_default(node);\n      while (parentBlock && parentBlock.nodeType === 1 && !isBlock3(parentBlock)) {\n        parentBlock = get_composed_parent_default(parentBlock);\n      }\n      if (!parentBlock) {\n        return void 0;\n      }\n      this.relatedNodes([ parentBlock ]);\n      var nodeColor = _getForegroundColor(node);\n      var parentColor = _getForegroundColor(parentBlock);\n      var nodeBackgroundColor = _getBackgroundColor2(node);\n      var parentBackgroundColor = _getBackgroundColor2(parentBlock);\n      var textContrast = nodeColor && parentColor ? getContrast2(nodeColor, parentColor) : void 0;\n      if (textContrast) {\n        textContrast = Math.floor(textContrast * 100) / 100;\n      }\n      if (textContrast && textContrast >= requiredContrastRatio) {\n        return true;\n      }\n      var backgroundContrast = nodeBackgroundColor && parentBackgroundColor ? getContrast2(nodeBackgroundColor, parentBackgroundColor) : void 0;\n      if (backgroundContrast) {\n        backgroundContrast = Math.floor(backgroundContrast * 100) / 100;\n      }\n      if (backgroundContrast && backgroundContrast >= requiredContrastRatio) {\n        return true;\n      }\n      if (!backgroundContrast) {\n        var _incomplete_data_defa;\n        var reason = (_incomplete_data_defa = incomplete_data_default.get('bgColor')) !== null && _incomplete_data_defa !== void 0 ? _incomplete_data_defa : 'bgContrast';\n        this.data({\n          messageKey: reason\n        });\n        incomplete_data_default.clear();\n        return void 0;\n      }\n      if (!textContrast) {\n        return void 0;\n      }\n      if (allowSameColor && textContrast === 1 && backgroundContrast === 1) {\n        return true;\n      }\n      if (textContrast === 1 && backgroundContrast > 1) {\n        this.data({\n          messageKey: 'bgContrast',\n          contrastRatio: backgroundContrast,\n          requiredContrastRatio: requiredContrastRatio,\n          nodeBackgroundColor: nodeBackgroundColor ? nodeBackgroundColor.toHexString() : void 0,\n          parentBackgroundColor: parentBackgroundColor ? parentBackgroundColor.toHexString() : void 0\n        });\n        return false;\n      }\n      this.data({\n        messageKey: 'fgContrast',\n        contrastRatio: textContrast,\n        requiredContrastRatio: requiredContrastRatio,\n        nodeColor: nodeColor ? nodeColor.toHexString() : void 0,\n        parentColor: parentColor ? parentColor.toHexString() : void 0\n      });\n      return false;\n    }\n    var link_in_text_block_evaluate_default = linkInTextBlockEvaluate;\n    function colorContrastEvaluate(node, options, virtualNode) {\n      var ignoreUnicode = options.ignoreUnicode, ignoreLength = options.ignoreLength, ignorePseudo = options.ignorePseudo, boldValue = options.boldValue, boldTextPt = options.boldTextPt, largeTextPt = options.largeTextPt, contrastRatio = options.contrastRatio, shadowOutlineEmMax = options.shadowOutlineEmMax, pseudoSizeThreshold = options.pseudoSizeThreshold;\n      if (!_isVisibleOnScreen(node)) {\n        this.data({\n          messageKey: 'hidden'\n        });\n        return true;\n      }\n      var visibleText = visible_virtual_default(virtualNode, false, true);\n      if (ignoreUnicode && textIsEmojis(visibleText)) {\n        this.data({\n          messageKey: 'nonBmp'\n        });\n        return void 0;\n      }\n      var nodeStyle = window.getComputedStyle(node);\n      var fontSize = parseFloat(nodeStyle.getPropertyValue('font-size'));\n      var fontWeight = nodeStyle.getPropertyValue('font-weight');\n      var bold = parseFloat(fontWeight) >= boldValue || fontWeight === 'bold';\n      var ptSize = Math.ceil(fontSize * 72) / 96;\n      var isSmallFont = bold && ptSize < boldTextPt || !bold && ptSize < largeTextPt;\n      var _ref131 = isSmallFont ? contrastRatio.normal : contrastRatio.large, expected = _ref131.expected, minThreshold = _ref131.minThreshold, maxThreshold = _ref131.maxThreshold;\n      var pseudoElm = findPseudoElement(virtualNode, {\n        ignorePseudo: ignorePseudo,\n        pseudoSizeThreshold: pseudoSizeThreshold\n      });\n      if (pseudoElm) {\n        this.data({\n          fontSize: ''.concat((fontSize * 72 / 96).toFixed(1), 'pt (').concat(fontSize, 'px)'),\n          fontWeight: bold ? 'bold' : 'normal',\n          messageKey: 'pseudoContent',\n          expectedContrastRatio: expected + ':1'\n        });\n        this.relatedNodes(pseudoElm.actualNode);\n        return void 0;\n      }\n      var shadowColors = _getTextShadowColors(node, {\n        minRatio: .001,\n        maxRatio: shadowOutlineEmMax\n      });\n      if (shadowColors === null) {\n        this.data({\n          messageKey: 'complexTextShadows'\n        });\n        return void 0;\n      }\n      var bgNodes = [];\n      var bgColor = _getBackgroundColor2(node, bgNodes, shadowOutlineEmMax);\n      var fgColor = _getForegroundColor(node, false, bgColor, options);\n      var contrast2 = null;\n      var contrastContributor = null;\n      var shadowColor = null;\n      if (shadowColors.length === 0) {\n        contrast2 = get_contrast_default(bgColor, fgColor);\n      } else if (fgColor && bgColor) {\n        shadowColor = [].concat(_toConsumableArray(shadowColors), [ bgColor ]).reduce(_flattenShadowColors);\n        var fgBgContrast = get_contrast_default(bgColor, fgColor);\n        var bgShContrast = get_contrast_default(bgColor, shadowColor);\n        var fgShContrast = get_contrast_default(shadowColor, fgColor);\n        contrast2 = Math.max(fgBgContrast, bgShContrast, fgShContrast);\n        if (contrast2 !== fgBgContrast) {\n          contrastContributor = bgShContrast > fgShContrast ? 'shadowOnBgColor' : 'fgOnShadowColor';\n        }\n      }\n      var isValid = contrast2 > expected;\n      if (typeof minThreshold === 'number' && (typeof contrast2 !== 'number' || contrast2 < minThreshold) || typeof maxThreshold === 'number' && (typeof contrast2 !== 'number' || contrast2 > maxThreshold)) {\n        this.data({\n          contrastRatio: contrast2\n        });\n        return true;\n      }\n      var truncatedResult = Math.floor(contrast2 * 100) / 100;\n      var missing;\n      if (bgColor === null) {\n        missing = incomplete_data_default.get('bgColor');\n      } else if (!isValid) {\n        missing = contrastContributor;\n      }\n      var equalRatio = truncatedResult === 1;\n      var shortTextContent = visibleText.length === 1;\n      if (equalRatio) {\n        missing = incomplete_data_default.set('bgColor', 'equalRatio');\n      } else if (!isValid && shortTextContent && !ignoreLength) {\n        missing = 'shortTextContent';\n      }\n      this.data({\n        fgColor: fgColor ? fgColor.toHexString() : void 0,\n        bgColor: bgColor ? bgColor.toHexString() : void 0,\n        contrastRatio: truncatedResult,\n        fontSize: ''.concat((fontSize * 72 / 96).toFixed(1), 'pt (').concat(fontSize, 'px)'),\n        fontWeight: bold ? 'bold' : 'normal',\n        messageKey: missing,\n        expectedContrastRatio: expected + ':1',\n        shadowColor: shadowColor ? shadowColor.toHexString() : void 0\n      });\n      if (fgColor === null || bgColor === null || equalRatio || shortTextContent && !ignoreLength && !isValid) {\n        missing = null;\n        incomplete_data_default.clear();\n        this.relatedNodes(bgNodes);\n        return void 0;\n      }\n      if (!isValid) {\n        this.relatedNodes(bgNodes);\n      }\n      return isValid;\n    }\n    function findPseudoElement(vNode, _ref132) {\n      var _ref132$pseudoSizeThr = _ref132.pseudoSizeThreshold, pseudoSizeThreshold = _ref132$pseudoSizeThr === void 0 ? .25 : _ref132$pseudoSizeThr, _ref132$ignorePseudo = _ref132.ignorePseudo, ignorePseudo = _ref132$ignorePseudo === void 0 ? false : _ref132$ignorePseudo;\n      if (ignorePseudo) {\n        return;\n      }\n      var rect = vNode.boundingClientRect;\n      var minimumSize = rect.width * rect.height * pseudoSizeThreshold;\n      do {\n        var beforeSize = getPseudoElementArea(vNode.actualNode, ':before');\n        var afterSize = getPseudoElementArea(vNode.actualNode, ':after');\n        if (beforeSize + afterSize > minimumSize) {\n          return vNode;\n        }\n      } while (vNode = vNode.parent);\n    }\n    var getPseudoElementArea = memoize_default(function getPseudoElementArea2(node, pseudo) {\n      var style = window.getComputedStyle(node, pseudo);\n      var matchPseudoStyle = function matchPseudoStyle(prop, value) {\n        return style.getPropertyValue(prop) === value;\n      };\n      if (matchPseudoStyle('content', 'none') || matchPseudoStyle('display', 'none') || matchPseudoStyle('visibility', 'hidden') || matchPseudoStyle('position', 'absolute') === false) {\n        return 0;\n      }\n      if (get_own_background_color_default(style).alpha === 0 && matchPseudoStyle('background-image', 'none')) {\n        return 0;\n      }\n      var pseudoWidth = parseUnit(style.getPropertyValue('width'));\n      var pseudoHeight = parseUnit(style.getPropertyValue('height'));\n      if (pseudoWidth.unit !== 'px' || pseudoHeight.unit !== 'px') {\n        return pseudoWidth.value === 0 || pseudoHeight.value === 0 ? 0 : Infinity;\n      }\n      return pseudoWidth.value * pseudoHeight.value;\n    });\n    function textIsEmojis(visibleText) {\n      var options = {\n        nonBmp: true\n      };\n      var hasUnicodeChars = has_unicode_default(visibleText, options);\n      var hasNonUnicodeChars = sanitize_default(remove_unicode_default(visibleText, options)) === '';\n      return hasUnicodeChars && hasNonUnicodeChars;\n    }\n    function parseUnit(str) {\n      var unitRegex = /^([0-9.]+)([a-z]+)$/i;\n      var _ref133 = str.match(unitRegex) || [], _ref134 = _slicedToArray(_ref133, 3), _ref134$ = _ref134[1], value = _ref134$ === void 0 ? '' : _ref134$, _ref134$2 = _ref134[2], unit = _ref134$2 === void 0 ? '' : _ref134$2;\n      return {\n        value: parseFloat(value),\n        unit: unit.toLowerCase()\n      };\n    }\n    var VALID_TAG_NAMES_FOR_SCROLLABLE_REGIONS = {\n      ARTICLE: true,\n      ASIDE: true,\n      NAV: true,\n      SECTION: true\n    };\n    var VALID_ROLES_FOR_SCROLLABLE_REGIONS = {\n      alert: true,\n      alertdialog: true,\n      application: true,\n      article: true,\n      banner: false,\n      complementary: true,\n      contentinfo: true,\n      dialog: true,\n      form: true,\n      log: true,\n      main: true,\n      navigation: true,\n      region: true,\n      search: false,\n      status: true,\n      tabpanel: true\n    };\n    function validScrollableTagName(node) {\n      var nodeName2 = node.nodeName.toUpperCase();\n      return VALID_TAG_NAMES_FOR_SCROLLABLE_REGIONS[nodeName2] || false;\n    }\n    function validScrollableRole(node, options) {\n      var role = get_explicit_role_default(node);\n      if (!role) {\n        return false;\n      }\n      return VALID_ROLES_FOR_SCROLLABLE_REGIONS[role] || options.roles.includes(role) || false;\n    }\n    function validScrollableSemanticsEvaluate(node, options) {\n      return validScrollableRole(node, options) || validScrollableTagName(node);\n    }\n    var valid_scrollable_semantics_evaluate_default = validScrollableSemanticsEvaluate;\n    function unsupportedroleEvaluate(node, options, virtualNode) {\n      var role = get_role_default(virtualNode, {\n        dpub: true,\n        fallback: true\n      });\n      var isUnsupported = is_unsupported_role_default(role);\n      if (isUnsupported) {\n        this.data(role);\n      }\n      return isUnsupported;\n    }\n    var unsupportedrole_evaluate_default = unsupportedroleEvaluate;\n    function noImplicitExplicitLabelEvaluate(node, options, virtualNode) {\n      var role = get_role_default(virtualNode, {\n        noImplicit: true\n      });\n      this.data(role);\n      var label3;\n      var accText;\n      try {\n        label3 = sanitize_default(label_text_default(virtualNode)).toLowerCase();\n        accText = sanitize_default(_accessibleTextVirtual(virtualNode)).toLowerCase();\n      } catch (_unused17) {\n        return void 0;\n      }\n      if (!accText && !label3) {\n        return false;\n      }\n      if (!accText && label3) {\n        return void 0;\n      }\n      if (!accText.includes(label3)) {\n        return void 0;\n      }\n      return false;\n    }\n    var no_implicit_explicit_label_evaluate_default = noImplicitExplicitLabelEvaluate;\n    function isElementFocusableEvaluate(node, options, virtualNode) {\n      return _isFocusable(virtualNode);\n    }\n    var is_element_focusable_evaluate_default = isElementFocusableEvaluate;\n    function invalidroleEvaluate(node, options, virtualNode) {\n      var allRoles = token_list_default(virtualNode.attr('role'));\n      var allInvalid = allRoles.every(function(role) {\n        return !is_valid_role_default(role.toLowerCase(), {\n          allowAbstract: true\n        });\n      });\n      if (allInvalid) {\n        this.data(allRoles);\n        return true;\n      }\n      return false;\n    }\n    var invalidrole_evaluate_default = invalidroleEvaluate;\n    function hasWidgetRoleEvaluate(node) {\n      var role = node.getAttribute('role');\n      if (role === null) {\n        return false;\n      }\n      var roleType = get_role_type_default(role);\n      return roleType === 'widget' || roleType === 'composite';\n    }\n    var has_widget_role_evaluate_default = hasWidgetRoleEvaluate;\n    function hasGlobalAriaAttributeEvaluate(node, options, virtualNode) {\n      var globalAttrs = get_global_aria_attrs_default().filter(function(attr) {\n        return virtualNode.hasAttr(attr);\n      });\n      this.data(globalAttrs);\n      return globalAttrs.length > 0;\n    }\n    var has_global_aria_attribute_evaluate_default = hasGlobalAriaAttributeEvaluate;\n    function nonePresentationOnElementWithNoImplicitRole(virtualNode, explicitRoles) {\n      var hasImplicitRole = implicit_role_default(virtualNode);\n      return !hasImplicitRole && explicitRoles.length === 2 && explicitRoles.includes('none') && explicitRoles.includes('presentation');\n    }\n    function fallbackroleEvaluate(node, options, virtualNode) {\n      var explicitRoles = token_list_default(virtualNode.attr('role'));\n      if (explicitRoles.length <= 1) {\n        return false;\n      }\n      return nonePresentationOnElementWithNoImplicitRole(virtualNode, explicitRoles) ? void 0 : true;\n    }\n    var fallbackrole_evaluate_default = fallbackroleEvaluate;\n    function deprecatedroleEvaluate(node, options, virtualNode) {\n      var role = get_role_default(virtualNode, {\n        dpub: true,\n        fallback: true\n      });\n      var roleDefinition = standards_default.ariaRoles[role];\n      if (!(roleDefinition !== null && roleDefinition !== void 0 && roleDefinition.deprecated)) {\n        return false;\n      }\n      this.data(role);\n      return true;\n    }\n    function brailleRoleDescriptionEquivalentEvaluate(node, options, virtualNode) {\n      var _virtualNode$attr;\n      var brailleRoleDesc = (_virtualNode$attr = virtualNode.attr('aria-brailleroledescription')) !== null && _virtualNode$attr !== void 0 ? _virtualNode$attr : '';\n      if (sanitize_default(brailleRoleDesc) === '') {\n        return true;\n      }\n      var roleDesc = virtualNode.attr('aria-roledescription');\n      if (typeof roleDesc !== 'string') {\n        this.data({\n          messageKey: 'noRoleDescription'\n        });\n        return false;\n      }\n      if (sanitize_default(roleDesc) === '') {\n        this.data({\n          messageKey: 'emptyRoleDescription'\n        });\n        return false;\n      }\n      return true;\n    }\n    function brailleLabelEquivalentEvaluate(node, options, virtualNode) {\n      var _virtualNode$attr2;\n      var brailleLabel = (_virtualNode$attr2 = virtualNode.attr('aria-braillelabel')) !== null && _virtualNode$attr2 !== void 0 ? _virtualNode$attr2 : '';\n      if (!brailleLabel.trim()) {\n        return true;\n      }\n      try {\n        return sanitize_default(_accessibleTextVirtual(virtualNode)) !== '';\n      } catch (_unused18) {\n        return void 0;\n      }\n    }\n    function ariaValidAttrValueEvaluate(node, options, virtualNode) {\n      options = Array.isArray(options.value) ? options.value : [];\n      var needsReview = '';\n      var messageKey = '';\n      var invalid = [];\n      var aria = /^aria-/;\n      var skipAttrs = [ 'aria-errormessage' ];\n      var preChecks = {\n        'aria-controls': function ariaControls() {\n          var hasPopup = [ 'false', null ].includes(virtualNode.attr('aria-haspopup')) === false;\n          if (hasPopup) {\n            needsReview = 'aria-controls=\"'.concat(virtualNode.attr('aria-controls'), '\"');\n            messageKey = 'controlsWithinPopup';\n          }\n          return virtualNode.attr('aria-expanded') !== 'false' && virtualNode.attr('aria-selected') !== 'false' && hasPopup === false;\n        },\n        'aria-current': function ariaCurrent(validValue) {\n          if (!validValue) {\n            needsReview = 'aria-current=\"'.concat(virtualNode.attr('aria-current'), '\"');\n            messageKey = 'ariaCurrent';\n          }\n          return;\n        },\n        'aria-owns': function ariaOwns() {\n          return virtualNode.attr('aria-expanded') !== 'false';\n        },\n        'aria-describedby': function ariaDescribedby(validValue) {\n          if (!validValue) {\n            needsReview = 'aria-describedby=\"'.concat(virtualNode.attr('aria-describedby'), '\"');\n            messageKey = axe._tree && axe._tree[0]._hasShadowRoot ? 'noIdShadow' : 'noId';\n          }\n          return;\n        },\n        'aria-labelledby': function ariaLabelledby(validValue) {\n          if (!validValue) {\n            needsReview = 'aria-labelledby=\"'.concat(virtualNode.attr('aria-labelledby'), '\"');\n            messageKey = axe._tree && axe._tree[0]._hasShadowRoot ? 'noIdShadow' : 'noId';\n          }\n        }\n      };\n      virtualNode.attrNames.forEach(function(attrName) {\n        if (skipAttrs.includes(attrName) || options.includes(attrName) || !aria.test(attrName)) {\n          return;\n        }\n        var validValue;\n        var attrValue = virtualNode.attr(attrName);\n        try {\n          validValue = validate_attr_value_default(virtualNode, attrName);\n        } catch (_unused19) {\n          needsReview = ''.concat(attrName, '=\"').concat(attrValue, '\"');\n          messageKey = 'idrefs';\n          return;\n        }\n        if ((preChecks[attrName] ? preChecks[attrName](validValue) : true) && !validValue) {\n          if (attrValue === '' && !isStringType(attrName)) {\n            needsReview = attrName;\n            messageKey = 'empty';\n          } else {\n            invalid.push(''.concat(attrName, '=\"').concat(attrValue, '\"'));\n          }\n        }\n      });\n      if (invalid.length) {\n        this.data(invalid);\n        return false;\n      }\n      if (needsReview) {\n        this.data({\n          messageKey: messageKey,\n          needsReview: needsReview\n        });\n        return void 0;\n      }\n      return true;\n    }\n    function isStringType(attrName) {\n      var _standards_default$ar;\n      return ((_standards_default$ar = standards_default.ariaAttrs[attrName]) === null || _standards_default$ar === void 0 ? void 0 : _standards_default$ar.type) === 'string';\n    }\n    function ariaValidAttrEvaluate(node, options, virtualNode) {\n      options = Array.isArray(options.value) ? options.value : [];\n      var invalid = [];\n      var aria = /^aria-/;\n      virtualNode.attrNames.forEach(function(attr) {\n        if (options.indexOf(attr) === -1 && aria.test(attr) && !validate_attr_default(attr)) {\n          invalid.push(attr);\n        }\n      });\n      if (invalid.length) {\n        this.data(invalid);\n        return false;\n      }\n      return true;\n    }\n    var aria_valid_attr_evaluate_default = ariaValidAttrEvaluate;\n    function ariaUnsupportedAttrEvaluate(node, options, virtualNode) {\n      var unsupportedAttrs = virtualNode.attrNames.filter(function(name) {\n        var attribute = standards_default.ariaAttrs[name];\n        if (!validate_attr_default(name)) {\n          return false;\n        }\n        var unsupported = attribute.unsupported;\n        if (_typeof(unsupported) !== 'object') {\n          return !!unsupported;\n        }\n        return !matches_default2(node, unsupported.exceptions);\n      });\n      if (unsupportedAttrs.length) {\n        this.data(unsupportedAttrs);\n        return true;\n      }\n      return false;\n    }\n    var aria_unsupported_attr_evaluate_default = ariaUnsupportedAttrEvaluate;\n    function ariaRoledescriptionEvaluate(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;\n      var role = get_role_default(virtualNode);\n      var supportedRoles = options.supportedRoles || [];\n      if (supportedRoles.includes(role)) {\n        return true;\n      }\n      if (role && role !== 'presentation' && role !== 'none') {\n        return void 0;\n      }\n      return false;\n    }\n    var aria_roledescription_evaluate_default = ariaRoledescriptionEvaluate;\n    function getMissingContext(virtualNode, ownGroupRoles, reqContext, includeElement) {\n      var explicitRole2 = get_explicit_role_default(virtualNode);\n      if (!reqContext) {\n        reqContext = required_context_default(explicitRole2);\n      }\n      if (!reqContext) {\n        return null;\n      }\n      var allowsGroup = reqContext.includes('group');\n      var vNode = includeElement ? virtualNode : virtualNode.parent;\n      while (vNode) {\n        var role = get_role_default(vNode, {\n          noPresentational: true\n        });\n        if (!role) {\n          vNode = vNode.parent;\n        } else if (role === 'group' && allowsGroup) {\n          if (ownGroupRoles.includes(explicitRole2)) {\n            reqContext.push(explicitRole2);\n          }\n          reqContext = reqContext.filter(function(r) {\n            return r !== 'group';\n          });\n          vNode = vNode.parent;\n        } else if (reqContext.includes(role)) {\n          return null;\n        } else {\n          return reqContext;\n        }\n      }\n      return reqContext;\n    }\n    function getAriaOwners(element) {\n      var owners = [];\n      var o = null;\n      while (element) {\n        if (element.getAttribute('id')) {\n          var _id5 = escape_selector_default(element.getAttribute('id'));\n          var doc = get_root_node_default2(element);\n          o = doc.querySelector('[aria-owns~='.concat(_id5, ']'));\n          if (o) {\n            owners.push(o);\n          }\n        }\n        element = element.parentElement;\n      }\n      return owners.length ? owners : null;\n    }\n    function ariaRequiredParentEvaluate(node, options, virtualNode) {\n      var ownGroupRoles = options && Array.isArray(options.ownGroupRoles) ? options.ownGroupRoles : [];\n      var missingParents = getMissingContext(virtualNode, ownGroupRoles);\n      if (!missingParents) {\n        return true;\n      }\n      var owners = getAriaOwners(node);\n      if (owners) {\n        for (var _i42 = 0, l = owners.length; _i42 < l; _i42++) {\n          missingParents = getMissingContext(get_node_from_tree_default(owners[_i42]), ownGroupRoles, missingParents, true);\n          if (!missingParents) {\n            return true;\n          }\n        }\n      }\n      this.data(missingParents);\n      return false;\n    }\n    var aria_required_parent_evaluate_default = ariaRequiredParentEvaluate;\n    function ariaRequiredChildrenEvaluate(node, options, virtualNode) {\n      var reviewEmpty = options && Array.isArray(options.reviewEmpty) ? options.reviewEmpty : [];\n      var explicitRole2 = get_explicit_role_default(virtualNode, {\n        dpub: true\n      });\n      var required = required_owned_default(explicitRole2);\n      if (required === null) {\n        return true;\n      }\n      var ownedRoles = getOwnedRoles(virtualNode, required);\n      var unallowed = ownedRoles.filter(function(_ref135) {\n        var role = _ref135.role, vNode = _ref135.vNode;\n        return vNode.props.nodeType === 1 && !required.includes(role);\n      });\n      if (unallowed.length) {\n        this.relatedNodes(unallowed.map(function(_ref136) {\n          var vNode = _ref136.vNode;\n          return vNode;\n        }));\n        this.data({\n          messageKey: 'unallowed',\n          values: unallowed.map(function(_ref137) {\n            var vNode = _ref137.vNode, attr = _ref137.attr;\n            return getUnallowedSelector(vNode, attr);\n          }).filter(function(selector, index, array) {\n            return array.indexOf(selector) === index;\n          }).join(', ')\n        });\n        return false;\n      }\n      if (hasRequiredChildren(required, ownedRoles)) {\n        return true;\n      }\n      if (virtualNode.attr('aria-busy') === 'true') {\n        this.data({\n          messageKey: 'aria-busy'\n        });\n        return true;\n      }\n      this.data(required);\n      if (reviewEmpty.includes(explicitRole2) && !ownedRoles.some(isContent)) {\n        return void 0;\n      }\n      return false;\n    }\n    function getOwnedRoles(virtualNode, required) {\n      var vNode;\n      var ownedRoles = [];\n      var ownedVirtual = get_owned_virtual_default(virtualNode);\n      var _loop10 = function _loop10() {\n        if (vNode.props.nodeType === 3) {\n          ownedRoles.push({\n            vNode: vNode,\n            role: null\n          });\n        }\n        if (vNode.props.nodeType !== 1 || !_isVisibleToScreenReaders(vNode)) {\n          return 1;\n        }\n        var role = get_role_default(vNode, {\n          noPresentational: true\n        });\n        var globalAriaAttr = getGlobalAriaAttr(vNode);\n        var hasGlobalAriaOrFocusable = !!globalAriaAttr || _isFocusable(vNode);\n        if (!role && !hasGlobalAriaOrFocusable || [ 'group', 'rowgroup' ].includes(role) && required.some(function(requiredRole) {\n          return requiredRole === role;\n        })) {\n          ownedVirtual.push.apply(ownedVirtual, _toConsumableArray(vNode.children));\n        } else if (role || hasGlobalAriaOrFocusable) {\n          var attr = globalAriaAttr || 'tabindex';\n          ownedRoles.push({\n            role: role,\n            attr: attr,\n            vNode: vNode\n          });\n        }\n      };\n      while (vNode = ownedVirtual.shift()) {\n        if (_loop10()) {\n          continue;\n        }\n      }\n      return ownedRoles;\n    }\n    function hasRequiredChildren(required, ownedRoles) {\n      return ownedRoles.some(function(_ref138) {\n        var role = _ref138.role;\n        return role && required.includes(role);\n      });\n    }\n    function getGlobalAriaAttr(vNode) {\n      return get_global_aria_attrs_default().find(function(attr) {\n        return vNode.hasAttr(attr);\n      });\n    }\n    function getUnallowedSelector(vNode, attr) {\n      var _vNode$props = vNode.props, nodeName2 = _vNode$props.nodeName, nodeType = _vNode$props.nodeType;\n      if (nodeType === 3) {\n        return '#text';\n      }\n      var role = get_explicit_role_default(vNode, {\n        dpub: true\n      });\n      if (role) {\n        return '[role='.concat(role, ']');\n      }\n      if (attr) {\n        return nodeName2 + '['.concat(attr, ']');\n      }\n      return nodeName2;\n    }\n    function isContent(_ref139) {\n      var vNode = _ref139.vNode;\n      if (vNode.props.nodeType === 3) {\n        return vNode.props.nodeValue.trim().length > 0;\n      }\n      return has_content_virtual_default(vNode, false, true);\n    }\n    function ariaRequiredAttrEvaluate(node) {\n      var _virtualNode$attr3;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;\n      var role = get_explicit_role_default(virtualNode);\n      var attrs = virtualNode.attrNames;\n      var requiredAttrs = required_attr_default(role);\n      if (Array.isArray(options[role])) {\n        requiredAttrs = unique_array_default(options[role], requiredAttrs);\n      }\n      if (!role || !attrs.length || !requiredAttrs.length) {\n        return true;\n      }\n      if (isStaticSeparator(virtualNode, role) || isClosedCombobox(virtualNode, role)) {\n        return true;\n      }\n      if (role === 'slider' && (_virtualNode$attr3 = virtualNode.attr('aria-valuetext')) !== null && _virtualNode$attr3 !== void 0 && _virtualNode$attr3.trim()) {\n        return true;\n      }\n      var elmSpec = get_element_spec_default(virtualNode);\n      var missingAttrs = requiredAttrs.filter(function(requiredAttr2) {\n        return !virtualNode.attr(requiredAttr2) && !hasImplicitAttr(elmSpec, requiredAttr2);\n      });\n      if (missingAttrs.length) {\n        this.data(missingAttrs);\n        return false;\n      }\n      return true;\n    }\n    function isStaticSeparator(vNode, role) {\n      return role === 'separator' && !_isFocusable(vNode);\n    }\n    function hasImplicitAttr(elmSpec, attr) {\n      var _elmSpec$implicitAttr;\n      return ((_elmSpec$implicitAttr = elmSpec.implicitAttrs) === null || _elmSpec$implicitAttr === void 0 ? void 0 : _elmSpec$implicitAttr[attr]) !== void 0;\n    }\n    function isClosedCombobox(vNode, role) {\n      return role === 'combobox' && vNode.attr('aria-expanded') === 'false';\n    }\n    function ariaProhibitedAttrEvaluate(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;\n      var elementsAllowedAriaLabel = (options === null || options === void 0 ? void 0 : options.elementsAllowedAriaLabel) || [];\n      var nodeName2 = virtualNode.props.nodeName;\n      var role = get_role_default(virtualNode, {\n        chromium: true\n      });\n      var prohibitedList = listProhibitedAttrs(virtualNode, role, nodeName2, elementsAllowedAriaLabel);\n      var prohibited = prohibitedList.filter(function(attrName) {\n        if (!virtualNode.attrNames.includes(attrName)) {\n          return false;\n        }\n        return sanitize_default(virtualNode.attr(attrName)) !== '';\n      });\n      if (prohibited.length === 0) {\n        return false;\n      }\n      var messageKey = virtualNode.hasAttr('role') ? 'hasRole' : 'noRole';\n      messageKey += prohibited.length > 1 ? 'Plural' : 'Singular';\n      this.data({\n        role: role,\n        nodeName: nodeName2,\n        messageKey: messageKey,\n        prohibited: prohibited\n      });\n      var textContent = subtree_text_default(virtualNode, {\n        subtreeDescendant: true\n      });\n      if (sanitize_default(textContent) !== '') {\n        return void 0;\n      }\n      return true;\n    }\n    function listProhibitedAttrs(vNode, role, nodeName2, elementsAllowedAriaLabel) {\n      var roleSpec = standards_default.ariaRoles[role];\n      if (roleSpec) {\n        return roleSpec.prohibitedAttrs || [];\n      }\n      if (!!role || elementsAllowedAriaLabel.includes(nodeName2) || getClosestAncestorRoleType(vNode) === 'widget') {\n        return [];\n      }\n      return [ 'aria-label', 'aria-labelledby' ];\n    }\n    var getClosestAncestorRoleType = memoize_default(function getClosestAncestorRoleTypeMemoized(vNode) {\n      if (!vNode) {\n        return;\n      }\n      var role = get_role_default(vNode, {\n        noPresentational: true,\n        chromium: true\n      });\n      if (role) {\n        return get_role_type_default(role);\n      }\n      return getClosestAncestorRoleType(vNode.parent);\n    });\n    function ariaLevelEvaluate(node, options, virtualNode) {\n      var ariaHeadingLevel = virtualNode.attr('aria-level');\n      var ariaLevel = parseInt(ariaHeadingLevel, 10);\n      if (ariaLevel > 6) {\n        return void 0;\n      }\n      return true;\n    }\n    var aria_level_evaluate_default = ariaLevelEvaluate;\n    function ariaHiddenBodyEvaluate(node, options, virtualNode) {\n      return virtualNode.attr('aria-hidden') !== 'true';\n    }\n    var aria_hidden_body_evaluate_default = ariaHiddenBodyEvaluate;\n    function ariaErrormessageEvaluate(node, options, virtualNode) {\n      options = Array.isArray(options) ? options : [];\n      var errorMessageAttr = virtualNode.attr('aria-errormessage');\n      var hasAttr = virtualNode.hasAttr('aria-errormessage');\n      var invaid = virtualNode.attr('aria-invalid');\n      var hasInvallid = virtualNode.hasAttr('aria-invalid');\n      if (!hasInvallid || invaid === 'false') {\n        return true;\n      }\n      function validateAttrValue2(attr) {\n        if (attr.trim() === '') {\n          return standards_default.ariaAttrs['aria-errormessage'].allowEmpty;\n        }\n        var idref;\n        try {\n          idref = attr && idrefs_default(virtualNode, 'aria-errormessage')[0];\n        } catch (_unused20) {\n          this.data({\n            messageKey: 'idrefs',\n            values: token_list_default(attr)\n          });\n          return void 0;\n        }\n        if (idref) {\n          if (!_isVisibleToScreenReaders(idref)) {\n            this.data({\n              messageKey: 'hidden',\n              values: token_list_default(attr)\n            });\n            return false;\n          }\n          return idref.getAttribute('role') === 'alert' || idref.getAttribute('aria-live') === 'assertive' || idref.getAttribute('aria-live') === 'polite' || token_list_default(virtualNode.attr('aria-describedby')).indexOf(attr) > -1;\n        }\n        return;\n      }\n      if (options.indexOf(errorMessageAttr) === -1 && hasAttr) {\n        this.data(token_list_default(errorMessageAttr));\n        return validateAttrValue2.call(this, errorMessageAttr);\n      }\n      return true;\n    }\n    function ariaConditionalRowAttr(node) {\n      var _invalidTableRowAttrs, _invalidTableRowAttrs2;\n      var _ref140 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, invalidTableRowAttrs = _ref140.invalidTableRowAttrs;\n      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;\n      var invalidAttrs = (_invalidTableRowAttrs = invalidTableRowAttrs === null || invalidTableRowAttrs === void 0 || (_invalidTableRowAttrs2 = invalidTableRowAttrs.filter) === null || _invalidTableRowAttrs2 === void 0 ? void 0 : _invalidTableRowAttrs2.call(invalidTableRowAttrs, function(invalidAttr) {\n        return virtualNode.hasAttr(invalidAttr);\n      })) !== null && _invalidTableRowAttrs !== void 0 ? _invalidTableRowAttrs : [];\n      if (invalidAttrs.length === 0) {\n        return true;\n      }\n      var owner = getRowOwner(virtualNode);\n      var ownerRole = owner && get_role_default(owner);\n      if (!ownerRole || ownerRole === 'treegrid') {\n        return true;\n      }\n      var messageKey = 'row'.concat(invalidAttrs.length > 1 ? 'Plural' : 'Singular');\n      this.data({\n        messageKey: messageKey,\n        invalidAttrs: invalidAttrs,\n        ownerRole: ownerRole\n      });\n      return false;\n    }\n    function getRowOwner(virtualNode) {\n      if (!virtualNode.parent) {\n        return;\n      }\n      var rowOwnerQuery = 'table:not([role]), [role~=\"treegrid\"], [role~=\"table\"], [role~=\"grid\"]';\n      return closest_default(virtualNode, rowOwnerQuery);\n    }\n    function ariaConditionalCheckboxAttr(node, options, virtualNode) {\n      var _virtualNode$props = virtualNode.props, nodeName2 = _virtualNode$props.nodeName, type2 = _virtualNode$props.type;\n      var ariaChecked = normalizeAriaChecked(virtualNode.attr('aria-checked'));\n      if (nodeName2 !== 'input' || type2 !== 'checkbox' || !ariaChecked) {\n        return true;\n      }\n      var checkState = getCheckState(virtualNode);\n      if (ariaChecked === checkState) {\n        return true;\n      }\n      this.data({\n        messageKey: 'checkbox',\n        checkState: checkState\n      });\n      return false;\n    }\n    function getCheckState(vNode) {\n      if (vNode.props.indeterminate) {\n        return 'mixed';\n      }\n      return vNode.props.checked ? 'true' : 'false';\n    }\n    function normalizeAriaChecked(ariaCheckedVal) {\n      if (!ariaCheckedVal) {\n        return '';\n      }\n      ariaCheckedVal = ariaCheckedVal.toLowerCase();\n      if ([ 'mixed', 'true' ].includes(ariaCheckedVal)) {\n        return ariaCheckedVal;\n      }\n      return 'false';\n    }\n    var conditionalRoleMap = {\n      row: ariaConditionalRowAttr,\n      checkbox: ariaConditionalCheckboxAttr\n    };\n    function ariaConditionalAttrEvaluate(node, options, virtualNode) {\n      var role = get_role_default(virtualNode);\n      if (!conditionalRoleMap[role]) {\n        return true;\n      }\n      return conditionalRoleMap[role].call(this, node, options, virtualNode);\n    }\n    function ariaBusyEvaluate(node, options, virtualNode) {\n      return virtualNode.attr('aria-busy') === 'true';\n    }\n    function ariaAllowedRoleEvaluate(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;\n      var _options$allowImplici = options.allowImplicit, allowImplicit = _options$allowImplici === void 0 ? true : _options$allowImplici, _options$ignoredTags = options.ignoredTags, ignoredTags = _options$ignoredTags === void 0 ? [] : _options$ignoredTags;\n      var nodeName2 = virtualNode.props.nodeName;\n      if (ignoredTags.map(function(tag) {\n        return tag.toLowerCase();\n      }).includes(nodeName2)) {\n        return true;\n      }\n      var unallowedRoles = get_element_unallowed_roles_default(virtualNode, allowImplicit);\n      if (unallowedRoles.length) {\n        this.data(unallowedRoles);\n        if (!_isVisibleToScreenReaders(virtualNode)) {\n          return void 0;\n        }\n        return false;\n      }\n      return true;\n    }\n    var aria_allowed_role_evaluate_default = ariaAllowedRoleEvaluate;\n    function ariaAllowedAttrEvaluate(node, options, virtualNode) {\n      var invalid = [];\n      var role = get_role_default(virtualNode);\n      var allowed = allowed_attr_default(role);\n      if (Array.isArray(options[role])) {\n        allowed = unique_array_default(options[role].concat(allowed));\n      }\n      var _iterator21 = _createForOfIteratorHelper(virtualNode.attrNames), _step21;\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done; ) {\n          var attrName = _step21.value;\n          if (validate_attr_default(attrName) && !allowed.includes(attrName) && !ignoredAttrs(attrName, virtualNode.attr(attrName), virtualNode)) {\n            invalid.push(attrName);\n          }\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n      if (!invalid.length) {\n        return true;\n      }\n      this.data(invalid.map(function(attrName) {\n        return attrName + '=\"' + virtualNode.attr(attrName) + '\"';\n      }));\n      if (!role && !is_html_element_default(virtualNode) && !_isFocusable(virtualNode)) {\n        return void 0;\n      }\n      return false;\n    }\n    function ignoredAttrs(attrName, attrValue, vNode) {\n      if (attrName === 'aria-required' && attrValue === 'false') {\n        return true;\n      }\n      if (attrName === 'aria-multiline' && attrValue === 'false' && vNode.hasAttr('contenteditable')) {\n        return true;\n      }\n      return false;\n    }\n    function abstractroleEvaluate(node, options, virtualNode) {\n      var abstractRoles = token_list_default(virtualNode.attr('role')).filter(function(role) {\n        return get_role_type_default(role) === 'abstract';\n      });\n      if (abstractRoles.length > 0) {\n        this.data(abstractRoles);\n        return true;\n      }\n      return false;\n    }\n    var abstractrole_evaluate_default = abstractroleEvaluate;\n    function xmlLangMismatchMatches(node) {\n      var primaryLangValue = get_base_lang_default(node.getAttribute('lang'));\n      var primaryXmlLangValue = get_base_lang_default(node.getAttribute('xml:lang'));\n      return valid_langs_default(primaryLangValue) && valid_langs_default(primaryXmlLangValue);\n    }\n    var xml_lang_mismatch_matches_default = xmlLangMismatchMatches;\n    function windowIsTopMatches(node) {\n      return node.ownerDocument.defaultView.self === node.ownerDocument.defaultView.top;\n    }\n    var window_is_top_matches_default = windowIsTopMatches;\n    function svgNamespaceMatches(node, virtualNode) {\n      try {\n        var nodeName2 = virtualNode.props.nodeName;\n        if (nodeName2 === 'svg') {\n          return true;\n        }\n        return !!closest_default(virtualNode, 'svg');\n      } catch (_unused21) {\n        return false;\n      }\n    }\n    var svg_namespace_matches_default = svgNamespaceMatches;\n    function widgetNotInline(node, vNode) {\n      return matchesFns.every(function(fn) {\n        return fn(node, vNode);\n      });\n    }\n    var matchesFns = [ function(node, vNode) {\n      return isWidgetType(vNode);\n    }, function(node, vNode) {\n      return isNotAreaElement(vNode);\n    }, function(node, vNode) {\n      return !svg_namespace_matches_default(node, vNode);\n    }, function(node, vNode) {\n      return _isFocusable(vNode);\n    }, function(node, vNode) {\n      return _isInTabOrder(vNode) || !hasWidgetAncestorInTabOrder(vNode);\n    }, function(node) {\n      return !is_in_text_block_default(node, {\n        noLengthCompare: true\n      });\n    } ];\n    function isWidgetType(vNode) {\n      return get_role_type_default(vNode) === 'widget';\n    }\n    function isNotAreaElement(vNode) {\n      return vNode.props.nodeName !== 'area';\n    }\n    var hasWidgetAncestorInTabOrder = memoize_default(function hasWidgetAncestorInTabOrderMemoized(vNode) {\n      if (!(vNode !== null && vNode !== void 0 && vNode.parent)) {\n        return false;\n      }\n      if (isWidgetType(vNode.parent) && _isInTabOrder(vNode.parent)) {\n        return true;\n      }\n      return hasWidgetAncestorInTabOrderMemoized(vNode.parent);\n    });\n    function tableOrGridRoleMatches(_, vNode) {\n      var role = get_role_default(vNode);\n      return [ 'treegrid', 'grid', 'table' ].includes(role);\n    }\n    function summaryIsInteractiveMatches(_, virtualNode) {\n      var parent = virtualNode.parent;\n      if (parent.props.nodeName !== 'details' || isSlottedElm(virtualNode)) {\n        return false;\n      }\n      var firstSummary = parent.children.find(function(child) {\n        return child.props.nodeName === 'summary';\n      });\n      if (firstSummary !== virtualNode) {\n        return false;\n      }\n      return true;\n    }\n    function isSlottedElm(vNode) {\n      var _vNode$actualNode;\n      var domParent = (_vNode$actualNode = vNode.actualNode) === null || _vNode$actualNode === void 0 ? void 0 : _vNode$actualNode.parentElement;\n      return domParent && domParent !== vNode.parent.actualNode;\n    }\n    function skipLinkMatches(node) {\n      return _isSkipLink(node) && is_offscreen_default(node);\n    }\n    var skip_link_matches_default = skipLinkMatches;\n    function scrollableRegionFocusableMatches(node, virtualNode) {\n      return get_scroll_default(node, 13) !== void 0 && _isComboboxPopup(virtualNode) === false && isNoneEmptyElement(virtualNode);\n    }\n    function isNoneEmptyElement(vNode) {\n      return query_selector_all_default(vNode, '*').some(function(elm) {\n        return has_content_virtual_default(elm, true, true);\n      });\n    }\n    function presentationRoleConflictMatches(node, virtualNode) {\n      return implicit_role_default(virtualNode, {\n        chromiumRoles: true\n      }) !== null;\n    }\n    var presentation_role_conflict_matches_default = presentationRoleConflictMatches;\n    function pAsHeadingMatches(node) {\n      var children = Array.from(node.parentNode.childNodes);\n      var nodeText = node.textContent.trim();\n      var isSentence = /[.!?:;](?![.!?:;])/g;\n      if (nodeText.length === 0 || (nodeText.match(isSentence) || []).length >= 2) {\n        return false;\n      }\n      var siblingsAfter = children.slice(children.indexOf(node) + 1).filter(function(elm) {\n        return elm.nodeName.toUpperCase() === 'P' && elm.textContent.trim() !== '';\n      });\n      return siblingsAfter.length !== 0;\n    }\n    var p_as_heading_matches_default = pAsHeadingMatches;\n    function noExplicitNameRequired(node, virtualNode) {\n      var role = get_explicit_role_default(virtualNode);\n      if (!role || [ 'none', 'presentation' ].includes(role)) {\n        return true;\n      }\n      var _ref141 = aria_roles_default[role] || {}, accessibleNameRequired = _ref141.accessibleNameRequired;\n      if (accessibleNameRequired || _isFocusable(virtualNode)) {\n        return true;\n      }\n      return false;\n    }\n    var no_explicit_name_required_matches_default = noExplicitNameRequired;\n    var object_is_loaded_matches_default = function object_is_loaded_matches_default(node, vNode) {\n      return [ no_explicit_name_required_matches_default, objectHasLoaded ].every(function(fn) {\n        return fn(node, vNode);\n      });\n    };\n    function objectHasLoaded(node) {\n      var _node$ownerDocument;\n      if (!(node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.createRange)) {\n        return true;\n      }\n      var range2 = node.ownerDocument.createRange();\n      range2.setStart(node, 0);\n      range2.setEnd(node, node.childNodes.length);\n      return range2.getClientRects().length === 0;\n    }\n    function notHtmlMatches(node, virtualNode) {\n      return virtualNode.props.nodeName !== 'html';\n    }\n    var not_html_matches_default = notHtmlMatches;\n    function noRoleMatches(node, vNode) {\n      return !vNode.attr('role');\n    }\n    var no_role_matches_default = noRoleMatches;\n    function noNegativeTabindexMatches(node, virtualNode) {\n      var tabindex = parse_tabindex_default(virtualNode.attr('tabindex'));\n      return tabindex === null || tabindex >= 0;\n    }\n    var no_negative_tabindex_matches_default = noNegativeTabindexMatches;\n    function noNamingMethodMatches(node, virtualNode) {\n      var _get_element_spec_def3 = get_element_spec_default(virtualNode), namingMethods = _get_element_spec_def3.namingMethods;\n      if (namingMethods && namingMethods.length !== 0) {\n        return false;\n      }\n      if (get_explicit_role_default(virtualNode) === 'combobox' && query_selector_all_default(virtualNode, 'input:not([type=\"hidden\"])').length) {\n        return false;\n      }\n      if (_isComboboxPopup(virtualNode, {\n        popupRoles: [ 'listbox' ]\n      })) {\n        return false;\n      }\n      return true;\n    }\n    var no_naming_method_matches_default = noNamingMethodMatches;\n    function noEmptyRoleMatches(node, virtualNode) {\n      if (!virtualNode.hasAttr('role')) {\n        return false;\n      }\n      if (!virtualNode.attr('role').trim()) {\n        return false;\n      }\n      return true;\n    }\n    var no_empty_role_matches_default = noEmptyRoleMatches;\n    function noAutoplayAudioMatches(node) {\n      if (!node.currentSrc) {\n        return false;\n      }\n      if (node.hasAttribute('paused') || node.hasAttribute('muted')) {\n        return false;\n      }\n      return true;\n    }\n    var no_autoplay_audio_matches_default = noAutoplayAudioMatches;\n    function nestedInteractiveMatches(node, virtualNode) {\n      var role = get_role_default(virtualNode);\n      if (!role) {\n        return false;\n      }\n      return !!standards_default.ariaRoles[role].childrenPresentational;\n    }\n    var nested_interactive_matches_default = nestedInteractiveMatches;\n    function linkInTextBlockMatches(node) {\n      var text = sanitize_default(node.innerText);\n      var role = node.getAttribute('role');\n      if (role && role !== 'link') {\n        return false;\n      }\n      if (!text) {\n        return false;\n      }\n      if (!_isVisibleOnScreen(node)) {\n        return false;\n      }\n      return is_in_text_block_default(node);\n    }\n    var link_in_text_block_matches_default = linkInTextBlockMatches;\n    function dataTableMatches(node) {\n      return !is_data_table_default(node) && !_isFocusable(node);\n    }\n    var layout_table_matches_default = dataTableMatches;\n    function landmarkUniqueMatches(node, virtualNode) {\n      return isLandmarkVirtual(virtualNode) && _isVisibleToScreenReaders(virtualNode);\n    }\n    function isLandmarkVirtual(vNode) {\n      var landmarkRoles2 = get_aria_roles_by_type_default('landmark');\n      var role = get_role_default(vNode);\n      if (!role) {\n        return false;\n      }\n      var nodeName2 = vNode.props.nodeName;\n      if (nodeName2 === 'section' || nodeName2 === 'form') {\n        var accessibleText2 = _accessibleTextVirtual(vNode);\n        return !!accessibleText2;\n      }\n      return landmarkRoles2.indexOf(role) >= 0 || role === 'region';\n    }\n    function landmarkHasBodyContextMatches(node, virtualNode) {\n      var nativeScopeFilter = 'article, aside, main, nav, section';\n      return node.hasAttribute('role') || !find_up_virtual_default(virtualNode, nativeScopeFilter);\n    }\n    var landmark_has_body_context_matches_default = landmarkHasBodyContextMatches;\n    function labelMatches(node, virtualNode) {\n      if (virtualNode.props.nodeName !== 'input' || virtualNode.hasAttr('type') === false) {\n        return true;\n      }\n      var type2 = virtualNode.attr('type').toLowerCase();\n      return [ 'hidden', 'image', 'button', 'submit', 'reset' ].includes(type2) === false;\n    }\n    var label_matches_default = labelMatches;\n    function labelContentNameMismatchMatches(node, virtualNode) {\n      var role = get_role_default(node);\n      if (!role) {\n        return false;\n      }\n      var widgetRoles = get_aria_roles_by_type_default('widget');\n      var isWidgetType2 = widgetRoles.includes(role);\n      if (!isWidgetType2) {\n        return false;\n      }\n      var rolesWithNameFromContents = get_aria_roles_supporting_name_from_content_default();\n      if (!rolesWithNameFromContents.includes(role)) {\n        return false;\n      }\n      if (!sanitize_default(_arialabelText(virtualNode)) && !sanitize_default(arialabelledby_text_default(node))) {\n        return false;\n      }\n      if (!sanitize_default(visible_virtual_default(virtualNode))) {\n        return false;\n      }\n      return true;\n    }\n    var label_content_name_mismatch_matches_default = labelContentNameMismatchMatches;\n    function isVisibleOnScreenMatches(node, virtualNode) {\n      return _isVisibleOnScreen(virtualNode);\n    }\n    function hasVisibleTextMatches(node) {\n      return _isVisibleOnScreen(node);\n    }\n    function isInitiatorMatches(node, virtualNode, context) {\n      return context.initiator;\n    }\n    var is_initiator_matches_default = isInitiatorMatches;\n    function insertedIntoFocusOrderMatches(node) {\n      return inserted_into_focus_order_default(node);\n    }\n    var inserted_into_focus_order_matches_default = insertedIntoFocusOrderMatches;\n    function identicalLinksSamePurposeMatches(node, virtualNode) {\n      var hasAccName = !!_accessibleTextVirtual(virtualNode);\n      if (!hasAccName) {\n        return false;\n      }\n      var role = get_role_default(node);\n      if (role && role !== 'link') {\n        return false;\n      }\n      return true;\n    }\n    var identical_links_same_purpose_matches_default = identicalLinksSamePurposeMatches;\n    function htmlNamespaceMatches(node, virtualNode) {\n      return !svg_namespace_matches_default(node, virtualNode);\n    }\n    var html_namespace_matches_default = htmlNamespaceMatches;\n    function headingMatches(node, virtualNode) {\n      return get_role_default(virtualNode) === 'heading';\n    }\n    function hasImplicitChromiumRoleMatches(node, virtualNode) {\n      return implicit_role_default(virtualNode, {\n        chromium: true\n      }) !== null;\n    }\n    var has_implicit_chromium_role_matches_default = hasImplicitChromiumRoleMatches;\n    function frameTitleHasTextMatches(node) {\n      var title = node.getAttribute('title');\n      return !!sanitize_default(title);\n    }\n    var frame_title_has_text_matches_default = frameTitleHasTextMatches;\n    function frameFocusableContentMatches(node, virtualNode, context) {\n      var _context$size, _context$size2;\n      return !context.initiator && !context.focusable && ((_context$size = context.size) === null || _context$size === void 0 ? void 0 : _context$size.width) * ((_context$size2 = context.size) === null || _context$size2 === void 0 ? void 0 : _context$size2.height) > 1;\n    }\n    var frame_focusable_content_matches_default = frameFocusableContentMatches;\n    function duplicateIdMiscMatches(node) {\n      var id = node.getAttribute('id').trim();\n      var idSelector = '*[id=\"'.concat(escape_selector_default(id), '\"]');\n      var idMatchingElms = Array.from(get_root_node_default2(node).querySelectorAll(idSelector));\n      return !is_accessible_ref_default(node) && idMatchingElms.every(function(elm) {\n        return !_isFocusable(elm);\n      });\n    }\n    var duplicate_id_misc_matches_default = duplicateIdMiscMatches;\n    function duplicateIdAriaMatches(node) {\n      return is_accessible_ref_default(node);\n    }\n    var duplicate_id_aria_matches_default = duplicateIdAriaMatches;\n    function duplicateIdActiveMatches(node) {\n      var id = node.getAttribute('id').trim();\n      var idSelector = '*[id=\"'.concat(escape_selector_default(id), '\"]');\n      var idMatchingElms = Array.from(get_root_node_default2(node).querySelectorAll(idSelector));\n      return !is_accessible_ref_default(node) && idMatchingElms.some(_isFocusable);\n    }\n    var duplicate_id_active_matches_default = duplicateIdActiveMatches;\n    function dataTableMatches2(node) {\n      return is_data_table_default(node);\n    }\n    var data_table_matches_default = dataTableMatches2;\n    function dataTableLargeMatches(node) {\n      if (is_data_table_default(node)) {\n        var tableArray = to_grid_default(node);\n        return tableArray.length >= 3 && tableArray[0].length >= 3 && tableArray[1].length >= 3 && tableArray[2].length >= 3;\n      }\n      return false;\n    }\n    var data_table_large_matches_default = dataTableLargeMatches;\n    function colorContrastMatches(node, virtualNode) {\n      var _virtualNode$props2 = virtualNode.props, nodeName2 = _virtualNode$props2.nodeName, inputType = _virtualNode$props2.type;\n      if (nodeName2 === 'option') {\n        return false;\n      }\n      if (nodeName2 === 'select' && !node.options.length) {\n        return false;\n      }\n      var nonTextInput = [ 'hidden', 'range', 'color', 'checkbox', 'radio', 'image' ];\n      if (nodeName2 === 'input' && nonTextInput.includes(inputType)) {\n        return false;\n      }\n      if (is_disabled_default(virtualNode) || _isInert(virtualNode)) {\n        return false;\n      }\n      var formElements = [ 'input', 'select', 'textarea' ];\n      if (formElements.includes(nodeName2)) {\n        var style = window.getComputedStyle(node);\n        var textIndent = parseInt(style.getPropertyValue('text-indent'), 10);\n        if (textIndent) {\n          var rect = node.getBoundingClientRect();\n          rect = {\n            top: rect.top,\n            bottom: rect.bottom,\n            left: rect.left + textIndent,\n            right: rect.right + textIndent\n          };\n          if (!visually_overlaps_default(rect, node)) {\n            return false;\n          }\n        }\n        return true;\n      }\n      var nodeParentLabel = find_up_virtual_default(virtualNode, 'label');\n      if (nodeName2 === 'label' || nodeParentLabel) {\n        var labelNode = nodeParentLabel || node;\n        var labelVirtual3 = nodeParentLabel ? get_node_from_tree_default(nodeParentLabel) : virtualNode;\n        if (labelNode.htmlFor) {\n          var doc = get_root_node_default2(labelNode);\n          var explicitControl = doc.getElementById(labelNode.htmlFor);\n          var explicitControlVirtual = explicitControl && get_node_from_tree_default(explicitControl);\n          if (explicitControlVirtual && is_disabled_default(explicitControlVirtual)) {\n            return false;\n          }\n        }\n        var query = 'input:not([type=\"hidden\"],[type=\"image\"],[type=\"button\"],[type=\"submit\"],[type=\"reset\"]), select, textarea';\n        var implicitControl = query_selector_all_default(labelVirtual3, query)[0];\n        if (implicitControl && is_disabled_default(implicitControl)) {\n          return false;\n        }\n      }\n      var ariaLabelledbyControls = [];\n      var ancestorNode = virtualNode;\n      while (ancestorNode) {\n        if (ancestorNode.props.id) {\n          var virtualControls = get_accessible_refs_default(ancestorNode).filter(function(control) {\n            return token_list_default(control.getAttribute('aria-labelledby') || '').includes(ancestorNode.props.id);\n          }).map(function(control) {\n            return get_node_from_tree_default(control);\n          });\n          ariaLabelledbyControls.push.apply(ariaLabelledbyControls, _toConsumableArray(virtualControls));\n        }\n        ancestorNode = ancestorNode.parent;\n      }\n      if (ariaLabelledbyControls.length > 0 && ariaLabelledbyControls.every(is_disabled_default)) {\n        return false;\n      }\n      if (!hasRealTextChildren(virtualNode)) {\n        return false;\n      }\n      var range2 = document.createRange();\n      var childNodes = virtualNode.children;\n      for (var index = 0; index < childNodes.length; index++) {\n        var child = childNodes[index];\n        if (child.actualNode.nodeType === 3 && sanitize_default(child.actualNode.nodeValue) !== '') {\n          range2.selectNodeContents(child.actualNode);\n        }\n      }\n      var rects = Array.from(range2.getClientRects());\n      var clippingAncestors = get_overflow_hidden_ancestors_default(virtualNode);\n      return rects.some(function(rect) {\n        var overlaps = visually_overlaps_default(rect, node);\n        if (!clippingAncestors.length) {\n          return overlaps;\n        }\n        var withinOverflow = clippingAncestors.some(function(overflowNode) {\n          return _rectsOverlap(rect, overflowNode.boundingClientRect);\n        });\n        return overlaps && withinOverflow;\n      });\n    }\n    var color_contrast_matches_default = colorContrastMatches;\n    var removeUnicodeOptions = {\n      emoji: true,\n      nonBmp: false,\n      punctuations: true\n    };\n    function hasRealTextChildren(virtualNode) {\n      var visibleText = visible_virtual_default(virtualNode, false, true);\n      if (visibleText === '' || remove_unicode_default(visibleText, removeUnicodeOptions) === '') {\n        return false;\n      }\n      return virtualNode.children.some(function(vChild) {\n        return vChild.props.nodeName === '#text' && !_isIconLigature(vChild);\n      });\n    }\n    function bypassMatches(node, virtualNode, context) {\n      if (is_initiator_matches_default(node, virtualNode, context)) {\n        return !!node.querySelector('a[href]');\n      }\n      return true;\n    }\n    var bypass_matches_default = bypassMatches;\n    function autocompleteMatches(node, virtualNode) {\n      var autocomplete2 = virtualNode.attr('autocomplete');\n      if (!autocomplete2 || sanitize_default(autocomplete2) === '') {\n        return false;\n      }\n      var nodeName2 = virtualNode.props.nodeName;\n      if ([ 'textarea', 'input', 'select' ].includes(nodeName2) === false) {\n        return false;\n      }\n      var excludedInputTypes = [ 'submit', 'reset', 'button', 'hidden' ];\n      if (nodeName2 === 'input' && excludedInputTypes.includes(virtualNode.props.type)) {\n        return false;\n      }\n      var ariaDisabled = virtualNode.attr('aria-disabled') || 'false';\n      if (virtualNode.hasAttr('disabled') || ariaDisabled.toLowerCase() === 'true') {\n        return false;\n      }\n      var role = virtualNode.attr('role');\n      var tabIndex = parse_tabindex_default(virtualNode.attr('tabindex'));\n      if (tabIndex < 0 && role) {\n        var roleDef = standards_default.ariaRoles[role];\n        if (roleDef === void 0 || roleDef.type !== 'widget') {\n          return false;\n        }\n      }\n      if (tabIndex < 0 && virtualNode.actualNode && !_isVisibleOnScreen(virtualNode) && !_isVisibleToScreenReaders(virtualNode)) {\n        return false;\n      }\n      return true;\n    }\n    var autocomplete_matches_default = autocompleteMatches;\n    function ariaRequiredParentMatches(node, virtualNode) {\n      var role = get_explicit_role_default(virtualNode);\n      return !!required_context_default(role);\n    }\n    var aria_required_parent_matches_default = ariaRequiredParentMatches;\n    function ariaRequiredChildrenMatches(node, virtualNode) {\n      var role = get_explicit_role_default(virtualNode, {\n        dpub: true\n      });\n      return !!required_owned_default(role);\n    }\n    var aria_required_children_matches_default = ariaRequiredChildrenMatches;\n    function shouldMatchElement(el) {\n      if (!el) {\n        return true;\n      }\n      if (el.getAttribute('aria-hidden') === 'true') {\n        return false;\n      }\n      return shouldMatchElement(get_composed_parent_default(el));\n    }\n    function ariaHiddenFocusMatches(node) {\n      return shouldMatchElement(get_composed_parent_default(node));\n    }\n    var aria_hidden_focus_matches_default = ariaHiddenFocusMatches;\n    function ariaHasAttrMatches(node, virtualNode) {\n      var aria = /^aria-/;\n      return virtualNode.attrNames.some(function(attr) {\n        return aria.test(attr);\n      });\n    }\n    var aria_has_attr_matches_default = ariaHasAttrMatches;\n    function ariaAllowedRoleMatches(node, virtualNode) {\n      return get_explicit_role_default(virtualNode, {\n        dpub: true,\n        fallback: true\n      }) !== null;\n    }\n    var aria_allowed_role_matches_default = ariaAllowedRoleMatches;\n    function ariaAllowedAttrMatches(node, virtualNode) {\n      var aria = /^aria-/;\n      var attrs = virtualNode.attrNames;\n      if (attrs.length) {\n        for (var _i43 = 0, l = attrs.length; _i43 < l; _i43++) {\n          if (aria.test(attrs[_i43])) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    var aria_allowed_attr_matches_default = ariaAllowedAttrMatches;\n    var metadataFunctionMap = {\n      'abstractrole-evaluate': abstractrole_evaluate_default,\n      'accesskeys-after': accesskeys_after_default,\n      'accesskeys-evaluate': accesskeys_evaluate_default,\n      'alt-space-value-evaluate': alt_space_value_evaluate_default,\n      'aria-allowed-attr-evaluate': ariaAllowedAttrEvaluate,\n      'aria-allowed-attr-matches': aria_allowed_attr_matches_default,\n      'aria-allowed-role-evaluate': aria_allowed_role_evaluate_default,\n      'aria-allowed-role-matches': aria_allowed_role_matches_default,\n      'aria-busy-evaluate': ariaBusyEvaluate,\n      'aria-conditional-attr-evaluate': ariaConditionalAttrEvaluate,\n      'aria-conditional-checkbox-attr-evaluate': ariaConditionalCheckboxAttr,\n      'aria-conditional-row-attr-evaluate': ariaConditionalRowAttr,\n      'aria-errormessage-evaluate': ariaErrormessageEvaluate,\n      'aria-has-attr-matches': aria_has_attr_matches_default,\n      'aria-hidden-body-evaluate': aria_hidden_body_evaluate_default,\n      'aria-hidden-focus-matches': aria_hidden_focus_matches_default,\n      'aria-label-evaluate': aria_label_evaluate_default,\n      'aria-labelledby-evaluate': aria_labelledby_evaluate_default,\n      'aria-level-evaluate': aria_level_evaluate_default,\n      'aria-prohibited-attr-evaluate': ariaProhibitedAttrEvaluate,\n      'aria-required-attr-evaluate': ariaRequiredAttrEvaluate,\n      'aria-required-children-evaluate': ariaRequiredChildrenEvaluate,\n      'aria-required-children-matches': aria_required_children_matches_default,\n      'aria-required-parent-evaluate': aria_required_parent_evaluate_default,\n      'aria-required-parent-matches': aria_required_parent_matches_default,\n      'aria-roledescription-evaluate': aria_roledescription_evaluate_default,\n      'aria-unsupported-attr-evaluate': aria_unsupported_attr_evaluate_default,\n      'aria-valid-attr-evaluate': aria_valid_attr_evaluate_default,\n      'aria-valid-attr-value-evaluate': ariaValidAttrValueEvaluate,\n      'attr-non-space-content-evaluate': attr_non_space_content_evaluate_default,\n      'autocomplete-appropriate-evaluate': autocomplete_appropriate_evaluate_default,\n      'autocomplete-matches': autocomplete_matches_default,\n      'autocomplete-valid-evaluate': autocomplete_valid_evaluate_default,\n      'avoid-inline-spacing-evaluate': avoid_inline_spacing_evaluate_default,\n      'braille-label-equivalent-evaluate': brailleLabelEquivalentEvaluate,\n      'braille-roledescription-equivalent-evaluate': brailleRoleDescriptionEquivalentEvaluate,\n      'bypass-matches': bypass_matches_default,\n      'caption-evaluate': caption_evaluate_default,\n      'caption-faked-evaluate': caption_faked_evaluate_default,\n      'color-contrast-evaluate': colorContrastEvaluate,\n      'color-contrast-matches': color_contrast_matches_default,\n      'css-orientation-lock-evaluate': css_orientation_lock_evaluate_default,\n      'data-table-large-matches': data_table_large_matches_default,\n      'data-table-matches': data_table_matches_default,\n      'deprecatedrole-evaluate': deprecatedroleEvaluate,\n      'dlitem-evaluate': dlitem_evaluate_default,\n      'doc-has-title-evaluate': doc_has_title_evaluate_default,\n      'duplicate-id-active-matches': duplicate_id_active_matches_default,\n      'duplicate-id-after': duplicate_id_after_default,\n      'duplicate-id-aria-matches': duplicate_id_aria_matches_default,\n      'duplicate-id-evaluate': duplicate_id_evaluate_default,\n      'duplicate-id-misc-matches': duplicate_id_misc_matches_default,\n      'duplicate-img-label-evaluate': duplicate_img_label_evaluate_default,\n      'exists-evaluate': exists_evaluate_default,\n      'explicit-evaluate': explicit_evaluate_default,\n      'fallbackrole-evaluate': fallbackrole_evaluate_default,\n      'focusable-content-evaluate': focusable_content_evaluate_default,\n      'focusable-disabled-evaluate': focusable_disabled_evaluate_default,\n      'focusable-element-evaluate': focusable_element_evaluate_default,\n      'focusable-modal-open-evaluate': focusable_modal_open_evaluate_default,\n      'focusable-no-name-evaluate': focusable_no_name_evaluate_default,\n      'focusable-not-tabbable-evaluate': focusable_not_tabbable_evaluate_default,\n      'frame-focusable-content-evaluate': frameFocusableContentEvaluate,\n      'frame-focusable-content-matches': frame_focusable_content_matches_default,\n      'frame-tested-after': frame_tested_after_default,\n      'frame-tested-evaluate': frame_tested_evaluate_default,\n      'frame-title-has-text-matches': frame_title_has_text_matches_default,\n      'has-alt-evaluate': has_alt_evaluate_default,\n      'has-descendant-after': has_descendant_after_default,\n      'has-descendant-evaluate': has_descendant_evaluate_default,\n      'has-global-aria-attribute-evaluate': has_global_aria_attribute_evaluate_default,\n      'has-implicit-chromium-role-matches': has_implicit_chromium_role_matches_default,\n      'has-lang-evaluate': has_lang_evaluate_default,\n      'has-text-content-evaluate': hasTextContentEvaluate,\n      'has-widget-role-evaluate': has_widget_role_evaluate_default,\n      'heading-matches': headingMatches,\n      'heading-order-after': headingOrderAfter,\n      'heading-order-evaluate': heading_order_evaluate_default,\n      'help-same-as-label-evaluate': help_same_as_label_evaluate_default,\n      'hidden-content-evaluate': hidden_content_evaluate_default,\n      'hidden-explicit-label-evaluate': hidden_explicit_label_evaluate_default,\n      'html-namespace-matches': html_namespace_matches_default,\n      'html5-scope-evaluate': html5_scope_evaluate_default,\n      'identical-links-same-purpose-after': identical_links_same_purpose_after_default,\n      'identical-links-same-purpose-evaluate': identical_links_same_purpose_evaluate_default,\n      'identical-links-same-purpose-matches': identical_links_same_purpose_matches_default,\n      'implicit-evaluate': implicit_evaluate_default,\n      'inline-style-property-evaluate': inlineStyleProperty,\n      'inserted-into-focus-order-matches': inserted_into_focus_order_matches_default,\n      'internal-link-present-evaluate': internal_link_present_evaluate_default,\n      'invalid-children-evaluate': invalidChildrenEvaluate,\n      'invalidrole-evaluate': invalidrole_evaluate_default,\n      'is-element-focusable-evaluate': is_element_focusable_evaluate_default,\n      'is-initiator-matches': is_initiator_matches_default,\n      'is-on-screen-evaluate': is_on_screen_evaluate_default,\n      'is-visible-matches': hasVisibleTextMatches,\n      'is-visible-on-screen-matches': isVisibleOnScreenMatches,\n      'label-content-name-mismatch-evaluate': label_content_name_mismatch_evaluate_default,\n      'label-content-name-mismatch-matches': label_content_name_mismatch_matches_default,\n      'label-matches': label_matches_default,\n      'landmark-has-body-context-matches': landmark_has_body_context_matches_default,\n      'landmark-is-top-level-evaluate': landmark_is_top_level_evaluate_default,\n      'landmark-is-unique-after': landmark_is_unique_after_default,\n      'landmark-is-unique-evaluate': landmark_is_unique_evaluate_default,\n      'landmark-unique-matches': landmarkUniqueMatches,\n      'layout-table-matches': layout_table_matches_default,\n      'link-in-text-block-evaluate': link_in_text_block_evaluate_default,\n      'link-in-text-block-matches': link_in_text_block_matches_default,\n      'link-in-text-block-style-evaluate': linkInTextBlockStyleEvaluate,\n      'listitem-evaluate': listitemEvaluate,\n      'matches-definition-evaluate': matches_definition_evaluate_default,\n      'meta-refresh-evaluate': metaRefreshEvaluate,\n      'meta-viewport-scale-evaluate': meta_viewport_scale_evaluate_default,\n      'multiple-label-evaluate': multiple_label_evaluate_default,\n      'nested-interactive-matches': nested_interactive_matches_default,\n      'no-autoplay-audio-evaluate': no_autoplay_audio_evaluate_default,\n      'no-autoplay-audio-matches': no_autoplay_audio_matches_default,\n      'no-empty-role-matches': no_empty_role_matches_default,\n      'no-explicit-name-required-matches': no_explicit_name_required_matches_default,\n      'no-focusable-content-evaluate': noFocusableContentEvaluate,\n      'no-implicit-explicit-label-evaluate': no_implicit_explicit_label_evaluate_default,\n      'no-naming-method-matches': no_naming_method_matches_default,\n      'no-negative-tabindex-matches': no_negative_tabindex_matches_default,\n      'no-role-matches': no_role_matches_default,\n      'non-empty-if-present-evaluate': non_empty_if_present_evaluate_default,\n      'not-html-matches': not_html_matches_default,\n      'object-is-loaded-matches': object_is_loaded_matches_default,\n      'only-dlitems-evaluate': onlyDlitemsEvaluate,\n      'only-listitems-evaluate': only_listitems_evaluate_default,\n      'p-as-heading-evaluate': p_as_heading_evaluate_default,\n      'p-as-heading-matches': p_as_heading_matches_default,\n      'page-no-duplicate-after': page_no_duplicate_after_default,\n      'page-no-duplicate-evaluate': page_no_duplicate_evaluate_default,\n      'presentation-role-conflict-matches': presentation_role_conflict_matches_default,\n      'presentational-role-evaluate': presentationalRoleEvaluate,\n      'region-after': region_after_default,\n      'region-evaluate': regionEvaluate,\n      'same-caption-summary-evaluate': same_caption_summary_evaluate_default,\n      'scope-value-evaluate': scope_value_evaluate_default,\n      'scrollable-region-focusable-matches': scrollableRegionFocusableMatches,\n      'skip-link-evaluate': skip_link_evaluate_default,\n      'skip-link-matches': skip_link_matches_default,\n      'structured-dlitems-evaluate': structured_dlitems_evaluate_default,\n      'summary-interactive-matches': summaryIsInteractiveMatches,\n      'svg-namespace-matches': svg_namespace_matches_default,\n      'svg-non-empty-title-evaluate': svg_non_empty_title_evaluate_default,\n      'tabindex-evaluate': tabindex_evaluate_default,\n      'table-or-grid-role-matches': tableOrGridRoleMatches,\n      'target-offset-evaluate': targetOffsetEvaluate,\n      'target-size-evaluate': targetSizeEvaluate,\n      'td-has-header-evaluate': td_has_header_evaluate_default,\n      'td-headers-attr-evaluate': tdHeadersAttrEvaluate,\n      'th-has-data-cells-evaluate': th_has_data_cells_evaluate_default,\n      'title-only-evaluate': title_only_evaluate_default,\n      'unique-frame-title-after': unique_frame_title_after_default,\n      'unique-frame-title-evaluate': unique_frame_title_evaluate_default,\n      'unsupportedrole-evaluate': unsupportedrole_evaluate_default,\n      'valid-lang-evaluate': valid_lang_evaluate_default,\n      'valid-scrollable-semantics-evaluate': valid_scrollable_semantics_evaluate_default,\n      'widget-not-inline-matches': widgetNotInline,\n      'window-is-top-matches': window_is_top_matches_default,\n      'xml-lang-mismatch-evaluate': xml_lang_mismatch_evaluate_default,\n      'xml-lang-mismatch-matches': xml_lang_mismatch_matches_default\n    };\n    var metadata_function_map_default = metadataFunctionMap;\n    function CheckResult(check) {\n      this.id = check.id;\n      this.data = null;\n      this.relatedNodes = [];\n      this.result = null;\n    }\n    var check_result_default = CheckResult;\n    function createExecutionContext(spec) {\n      if (typeof spec === 'string') {\n        if (metadata_function_map_default[spec]) {\n          return metadata_function_map_default[spec];\n        }\n        if (/^\\s*function[\\s\\w]*\\(/.test(spec)) {\n          return new Function('return ' + spec + ';')();\n        }\n        throw new ReferenceError('Function ID does not exist in the metadata-function-map: '.concat(spec));\n      }\n      return spec;\n    }\n    function normalizeOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (Array.isArray(options) || _typeof(options) !== 'object') {\n        options = {\n          value: options\n        };\n      }\n      return options;\n    }\n    function Check(spec) {\n      if (spec) {\n        this.id = spec.id;\n        this.configure(spec);\n      }\n    }\n    Check.prototype.enabled = true;\n    Check.prototype.run = function run(node, options, context, resolve, reject) {\n      options = options || {};\n      var enabled = options.hasOwnProperty('enabled') ? options.enabled : this.enabled;\n      var checkOptions = this.getOptions(options.options);\n      if (enabled) {\n        var checkResult = new check_result_default(this);\n        var helper = check_helper_default(checkResult, options, resolve, reject);\n        var result;\n        try {\n          result = this.evaluate.call(helper, node.actualNode, checkOptions, node, context);\n        } catch (e) {\n          if (node && node.actualNode) {\n            e.errorNode = node_serializer_default.toSpec(node);\n          }\n          reject(e);\n          return;\n        }\n        if (!helper.isAsync) {\n          checkResult.result = result;\n          resolve(checkResult);\n        }\n      } else {\n        resolve(null);\n      }\n    };\n    Check.prototype.runSync = function runSync(node, options, context) {\n      options = options || {};\n      var _options3 = options, _options3$enabled = _options3.enabled, enabled = _options3$enabled === void 0 ? this.enabled : _options3$enabled;\n      if (!enabled) {\n        return null;\n      }\n      var checkOptions = this.getOptions(options.options);\n      var checkResult = new check_result_default(this);\n      var helper = check_helper_default(checkResult, options);\n      helper.async = function async() {\n        throw new Error('Cannot run async check while in a synchronous run');\n      };\n      var result;\n      try {\n        result = this.evaluate.call(helper, node.actualNode, checkOptions, node, context);\n      } catch (e) {\n        if (node && node.actualNode) {\n          e.errorNode = node_serializer_default.toSpec(node);\n        }\n        throw e;\n      }\n      checkResult.result = result;\n      return checkResult;\n    };\n    Check.prototype.configure = function configure2(spec) {\n      var _this8 = this;\n      if (!spec.evaluate || metadata_function_map_default[spec.evaluate]) {\n        this._internalCheck = true;\n      }\n      if (spec.hasOwnProperty('enabled')) {\n        this.enabled = spec.enabled;\n      }\n      if (spec.hasOwnProperty('options')) {\n        if (this._internalCheck) {\n          this.options = normalizeOptions(spec.options);\n        } else {\n          this.options = spec.options;\n        }\n      }\n      [ 'evaluate', 'after' ].filter(function(prop) {\n        return spec.hasOwnProperty(prop);\n      }).forEach(function(prop) {\n        return _this8[prop] = createExecutionContext(spec[prop]);\n      });\n    };\n    Check.prototype.getOptions = function getOptions(options) {\n      if (this._internalCheck) {\n        return deep_merge_default(this.options, normalizeOptions(options || {}));\n      } else {\n        return options || this.options;\n      }\n    };\n    var check_default = Check;\n    function RuleResult(rule) {\n      this.id = rule.id;\n      this.result = constants_default.NA;\n      this.pageLevel = rule.pageLevel;\n      this.impact = null;\n      this.nodes = [];\n    }\n    var rule_result_default = RuleResult;\n    function Rule(spec, parentAudit) {\n      this._audit = parentAudit;\n      this.id = spec.id;\n      this.selector = spec.selector || '*';\n      if (spec.impact) {\n        assert_default(constants_default.impact.includes(spec.impact), 'Impact '.concat(spec.impact, ' is not a valid impact'));\n        this.impact = spec.impact;\n      }\n      this.excludeHidden = typeof spec.excludeHidden === 'boolean' ? spec.excludeHidden : true;\n      this.enabled = typeof spec.enabled === 'boolean' ? spec.enabled : true;\n      this.pageLevel = typeof spec.pageLevel === 'boolean' ? spec.pageLevel : false;\n      this.reviewOnFail = typeof spec.reviewOnFail === 'boolean' ? spec.reviewOnFail : false;\n      this.any = spec.any || [];\n      this.all = spec.all || [];\n      this.none = spec.none || [];\n      this.tags = spec.tags || [];\n      this.preload = spec.preload ? true : false;\n      this.actIds = spec.actIds;\n      if (spec.matches) {\n        this.matches = createExecutionContext(spec.matches);\n      }\n    }\n    Rule.prototype.matches = function matches3() {\n      return true;\n    };\n    Rule.prototype.gather = function gather(context) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var markStart = 'mark_gather_start_' + this.id;\n      var markEnd = 'mark_gather_end_' + this.id;\n      var markHiddenStart = 'mark_isVisibleToScreenReaders_start_' + this.id;\n      var markHiddenEnd = 'mark_isVisibleToScreenReaders_end_' + this.id;\n      if (options.performanceTimer) {\n        performance_timer_default.mark(markStart);\n      }\n      var elements = _select(this.selector, context);\n      if (this.excludeHidden) {\n        if (options.performanceTimer) {\n          performance_timer_default.mark(markHiddenStart);\n        }\n        elements = elements.filter(function(element) {\n          return _isVisibleToScreenReaders(element);\n        });\n        if (options.performanceTimer) {\n          performance_timer_default.mark(markHiddenEnd);\n          performance_timer_default.measure('rule_' + this.id + '#gather_axe.utils.isVisibleToScreenReaders', markHiddenStart, markHiddenEnd);\n        }\n      }\n      if (options.performanceTimer) {\n        performance_timer_default.mark(markEnd);\n        performance_timer_default.measure('rule_' + this.id + '#gather', markStart, markEnd);\n      }\n      return elements;\n    };\n    Rule.prototype.runChecks = function runChecks(type2, node, options, context, resolve, reject) {\n      var self2 = this;\n      var checkQueue = queue_default();\n      this[type2].forEach(function(c4) {\n        var check = self2._audit.checks[c4.id || c4];\n        var option = get_check_option_default(check, self2.id, options);\n        checkQueue.defer(function(res, rej) {\n          check.run(node, option, context, res, rej);\n        });\n      });\n      checkQueue.then(function(results) {\n        results = results.filter(function(check) {\n          return check;\n        });\n        resolve({\n          type: type2,\n          results: results\n        });\n      })['catch'](reject);\n    };\n    Rule.prototype.runChecksSync = function runChecksSync(type2, node, options, context) {\n      var self2 = this;\n      var results = [];\n      this[type2].forEach(function(c4) {\n        var check = self2._audit.checks[c4.id || c4];\n        var option = get_check_option_default(check, self2.id, options);\n        results.push(check.runSync(node, option, context));\n      });\n      results = results.filter(function(check) {\n        return check;\n      });\n      return {\n        type: type2,\n        results: results\n      };\n    };\n    Rule.prototype.run = function run2(context) {\n      var _this9 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var resolve = arguments.length > 2 ? arguments[2] : undefined;\n      var reject = arguments.length > 3 ? arguments[3] : undefined;\n      if (options.performanceTimer) {\n        this._trackPerformance();\n      }\n      var q = queue_default();\n      var ruleResult = new rule_result_default(this);\n      var nodes;\n      try {\n        nodes = this.gatherAndMatchNodes(context, options);\n      } catch (error) {\n        reject(new SupportError({\n          cause: error,\n          ruleId: this.id\n        }));\n        return;\n      }\n      if (options.performanceTimer) {\n        this._logGatherPerformance(nodes);\n      }\n      nodes.forEach(function(node) {\n        q.defer(function(resolveNode, rejectNode) {\n          var checkQueue = queue_default();\n          [ 'any', 'all', 'none' ].forEach(function(type2) {\n            checkQueue.defer(function(res, rej) {\n              _this9.runChecks(type2, node, options, context, res, rej);\n            });\n          });\n          checkQueue.then(function(results) {\n            var result = getResult(results);\n            if (result) {\n              result.node = new dq_element_default(node);\n              ruleResult.nodes.push(result);\n              if (_this9.reviewOnFail) {\n                [ 'any', 'all' ].forEach(function(type2) {\n                  result[type2].forEach(function(checkResult) {\n                    if (checkResult.result === false) {\n                      checkResult.result = void 0;\n                    }\n                  });\n                });\n                result.none.forEach(function(checkResult) {\n                  if (checkResult.result === true) {\n                    checkResult.result = void 0;\n                  }\n                });\n              }\n            }\n            resolveNode();\n          })['catch'](function(err2) {\n            return rejectNode(err2);\n          });\n        });\n      });\n      q.then(function() {\n        if (options.performanceTimer) {\n          _this9._logRulePerformance();\n        }\n        setTimeout(function() {\n          resolve(ruleResult);\n        }, 0);\n      })['catch'](function(error) {\n        if (options.performanceTimer) {\n          _this9._logRulePerformance();\n        }\n        reject(error);\n      });\n    };\n    Rule.prototype.runSync = function runSync2(context) {\n      var _this10 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (options.performanceTimer) {\n        this._trackPerformance();\n      }\n      var ruleResult = new rule_result_default(this);\n      var nodes;\n      try {\n        nodes = this.gatherAndMatchNodes(context, options);\n      } catch (error) {\n        throw new SupportError({\n          cause: error,\n          ruleId: this.id\n        });\n      }\n      if (options.performanceTimer) {\n        this._logGatherPerformance(nodes);\n      }\n      nodes.forEach(function(node) {\n        var results = [];\n        [ 'any', 'all', 'none' ].forEach(function(type2) {\n          results.push(_this10.runChecksSync(type2, node, options, context));\n        });\n        var result = getResult(results);\n        if (result) {\n          result.node = node.actualNode ? new dq_element_default(node) : null;\n          ruleResult.nodes.push(result);\n          if (_this10.reviewOnFail) {\n            [ 'any', 'all' ].forEach(function(type2) {\n              result[type2].forEach(function(checkResult) {\n                if (checkResult.result === false) {\n                  checkResult.result = void 0;\n                }\n              });\n            });\n            result.none.forEach(function(checkResult) {\n              if (checkResult.result === true) {\n                checkResult.result = void 0;\n              }\n            });\n          }\n        }\n      });\n      if (options.performanceTimer) {\n        this._logRulePerformance();\n      }\n      return ruleResult;\n    };\n    Rule.prototype._trackPerformance = function _trackPerformance() {\n      this._markStart = 'mark_rule_start_' + this.id;\n      this._markEnd = 'mark_rule_end_' + this.id;\n      this._markChecksStart = 'mark_runchecks_start_' + this.id;\n      this._markChecksEnd = 'mark_runchecks_end_' + this.id;\n    };\n    Rule.prototype._logGatherPerformance = function _logGatherPerformance(nodes) {\n      log_default('gather (', nodes.length, '):', performance_timer_default.timeElapsed() + 'ms');\n      performance_timer_default.mark(this._markChecksStart);\n    };\n    Rule.prototype._logRulePerformance = function _logRulePerformance() {\n      performance_timer_default.mark(this._markChecksEnd);\n      performance_timer_default.mark(this._markEnd);\n      performance_timer_default.measure('runchecks_' + this.id, this._markChecksStart, this._markChecksEnd);\n      performance_timer_default.measure('rule_' + this.id, this._markStart, this._markEnd);\n    };\n    function getResult(results) {\n      if (results.length) {\n        var hasResults = false;\n        var result = {};\n        results.forEach(function(r) {\n          var res = r.results.filter(function(_result) {\n            return _result;\n          });\n          result[r.type] = res;\n          if (res.length) {\n            hasResults = true;\n          }\n        });\n        if (hasResults) {\n          return result;\n        }\n        return null;\n      }\n    }\n    Rule.prototype.gatherAndMatchNodes = function gatherAndMatchNodes(context, options) {\n      var _this11 = this;\n      var markMatchesStart = 'mark_matches_start_' + this.id;\n      var markMatchesEnd = 'mark_matches_end_' + this.id;\n      var nodes = this.gather(context, options);\n      if (options.performanceTimer) {\n        performance_timer_default.mark(markMatchesStart);\n      }\n      nodes = nodes.filter(function(node) {\n        return _this11.matches(node.actualNode, node, context);\n      });\n      if (options.performanceTimer) {\n        performance_timer_default.mark(markMatchesEnd);\n        performance_timer_default.measure('rule_' + this.id + '#matches', markMatchesStart, markMatchesEnd);\n      }\n      return nodes;\n    };\n    function findAfterChecks(rule) {\n      return get_all_checks_default(rule).map(function(c4) {\n        var check = rule._audit.checks[c4.id || c4];\n        return check && typeof check.after === 'function' ? check : null;\n      }).filter(Boolean);\n    }\n    function findCheckResults(nodes, checkID) {\n      var checkResults = [];\n      nodes.forEach(function(nodeResult) {\n        var checks = get_all_checks_default(nodeResult);\n        checks.forEach(function(checkResult) {\n          if (checkResult.id === checkID) {\n            checkResult.node = nodeResult.node;\n            checkResults.push(checkResult);\n          }\n        });\n      });\n      return checkResults;\n    }\n    function filterChecks(checks) {\n      return checks.filter(function(check) {\n        return check.filtered !== true;\n      });\n    }\n    function sanitizeNodes(result) {\n      var checkTypes2 = [ 'any', 'all', 'none' ];\n      var nodes = result.nodes.filter(function(detail) {\n        var length = 0;\n        checkTypes2.forEach(function(type2) {\n          detail[type2] = filterChecks(detail[type2]);\n          length += detail[type2].length;\n        });\n        return length > 0;\n      });\n      if (result.pageLevel && nodes.length) {\n        nodes = [ nodes.reduce(function(a2, b2) {\n          if (a2) {\n            checkTypes2.forEach(function(type2) {\n              a2[type2].push.apply(a2[type2], b2[type2]);\n            });\n            return a2;\n          }\n        }) ];\n      }\n      return nodes;\n    }\n    Rule.prototype.after = function after(result, options) {\n      var _this12 = this;\n      var afterChecks = findAfterChecks(this);\n      var ruleID = this.id;\n      afterChecks.forEach(function(check) {\n        var beforeResults = findCheckResults(result.nodes, check.id);\n        var checkOption = get_check_option_default(check, ruleID, options);\n        var afterResults = check.after(beforeResults, checkOption.options);\n        if (_this12.reviewOnFail) {\n          afterResults.forEach(function(checkResult) {\n            var changeAnyAllResults = (_this12.any.includes(checkResult.id) || _this12.all.includes(checkResult.id)) && checkResult.result === false;\n            var changeNoneResult = _this12.none.includes(checkResult.id) && checkResult.result === true;\n            if (changeAnyAllResults || changeNoneResult) {\n              checkResult.result = void 0;\n            }\n          });\n        }\n        beforeResults.forEach(function(item) {\n          delete item.node;\n          if (afterResults.indexOf(item) === -1) {\n            item.filtered = true;\n          }\n        });\n      });\n      result.nodes = sanitizeNodes(result);\n      return result;\n    };\n    Rule.prototype.configure = function configure3(spec) {\n      if (spec.hasOwnProperty('selector')) {\n        this.selector = spec.selector;\n      }\n      if (spec.hasOwnProperty('excludeHidden')) {\n        this.excludeHidden = typeof spec.excludeHidden === 'boolean' ? spec.excludeHidden : true;\n      }\n      if (spec.hasOwnProperty('enabled')) {\n        this.enabled = typeof spec.enabled === 'boolean' ? spec.enabled : true;\n      }\n      if (spec.hasOwnProperty('pageLevel')) {\n        this.pageLevel = typeof spec.pageLevel === 'boolean' ? spec.pageLevel : false;\n      }\n      if (spec.hasOwnProperty('reviewOnFail')) {\n        this.reviewOnFail = typeof spec.reviewOnFail === 'boolean' ? spec.reviewOnFail : false;\n      }\n      if (spec.hasOwnProperty('any')) {\n        this.any = spec.any;\n      }\n      if (spec.hasOwnProperty('all')) {\n        this.all = spec.all;\n      }\n      if (spec.hasOwnProperty('none')) {\n        this.none = spec.none;\n      }\n      if (spec.hasOwnProperty('tags')) {\n        this.tags = spec.tags;\n      }\n      if (spec.hasOwnProperty('actIds')) {\n        this.actIds = spec.actIds;\n      }\n      if (spec.hasOwnProperty('matches')) {\n        this.matches = createExecutionContext(spec.matches);\n      }\n      if (spec.impact) {\n        assert_default(constants_default.impact.includes(spec.impact), 'Impact '.concat(spec.impact, ' is not a valid impact'));\n        this.impact = spec.impact;\n      }\n    };\n    var import_dot2 = __toModule(require_doT());\n    var dotRegex = /\\{\\{.+?\\}\\}/g;\n    var Audit = function() {\n      function Audit(audit) {\n        _classCallCheck(this, Audit);\n        this.lang = 'en';\n        this.defaultConfig = audit;\n        this.standards = standards_default;\n        this._init();\n        this._defaultLocale = null;\n      }\n      return _createClass(Audit, [ {\n        key: '_setDefaultLocale',\n        value: function _setDefaultLocale() {\n          if (this._defaultLocale) {\n            return;\n          }\n          var locale = {\n            checks: {},\n            rules: {},\n            failureSummaries: {},\n            incompleteFallbackMessage: '',\n            lang: this.lang\n          };\n          var checkIDs = Object.keys(this.data.checks);\n          for (var _i44 = 0; _i44 < checkIDs.length; _i44++) {\n            var _id6 = checkIDs[_i44];\n            var check = this.data.checks[_id6];\n            var _check$messages = check.messages, pass = _check$messages.pass, fail = _check$messages.fail, incomplete = _check$messages.incomplete;\n            locale.checks[_id6] = {\n              pass: pass,\n              fail: fail,\n              incomplete: incomplete\n            };\n          }\n          var ruleIDs = Object.keys(this.data.rules);\n          for (var _i45 = 0; _i45 < ruleIDs.length; _i45++) {\n            var _id7 = ruleIDs[_i45];\n            var rule = this.data.rules[_id7];\n            var description = rule.description, help = rule.help;\n            locale.rules[_id7] = {\n              description: description,\n              help: help\n            };\n          }\n          var failureSummaries = Object.keys(this.data.failureSummaries);\n          for (var _i46 = 0; _i46 < failureSummaries.length; _i46++) {\n            var type2 = failureSummaries[_i46];\n            var failureSummary2 = this.data.failureSummaries[type2];\n            var failureMessage = failureSummary2.failureMessage;\n            locale.failureSummaries[type2] = {\n              failureMessage: failureMessage\n            };\n          }\n          locale.incompleteFallbackMessage = this.data.incompleteFallbackMessage;\n          this._defaultLocale = locale;\n        }\n      }, {\n        key: '_resetLocale',\n        value: function _resetLocale() {\n          var defaultLocale = this._defaultLocale;\n          if (!defaultLocale) {\n            return;\n          }\n          this.applyLocale(defaultLocale);\n        }\n      }, {\n        key: '_applyCheckLocale',\n        value: function _applyCheckLocale(checks) {\n          var keys = Object.keys(checks);\n          for (var _i47 = 0; _i47 < keys.length; _i47++) {\n            var _id8 = keys[_i47];\n            if (!this.data.checks[_id8]) {\n              throw new Error('Locale provided for unknown check: \"'.concat(_id8, '\"'));\n            }\n            this.data.checks[_id8] = mergeCheckLocale(this.data.checks[_id8], checks[_id8]);\n          }\n        }\n      }, {\n        key: '_applyRuleLocale',\n        value: function _applyRuleLocale(rules) {\n          var keys = Object.keys(rules);\n          for (var _i48 = 0; _i48 < keys.length; _i48++) {\n            var _id9 = keys[_i48];\n            if (!this.data.rules[_id9]) {\n              throw new Error('Locale provided for unknown rule: \"'.concat(_id9, '\"'));\n            }\n            this.data.rules[_id9] = mergeRuleLocale(this.data.rules[_id9], rules[_id9]);\n          }\n        }\n      }, {\n        key: '_applyFailureSummaries',\n        value: function _applyFailureSummaries(messages) {\n          var keys = Object.keys(messages);\n          for (var _i49 = 0; _i49 < keys.length; _i49++) {\n            var _key8 = keys[_i49];\n            if (!this.data.failureSummaries[_key8]) {\n              throw new Error('Locale provided for unknown failureMessage: \"'.concat(_key8, '\"'));\n            }\n            this.data.failureSummaries[_key8] = mergeFailureMessage(this.data.failureSummaries[_key8], messages[_key8]);\n          }\n        }\n      }, {\n        key: 'applyLocale',\n        value: function applyLocale(locale) {\n          this._setDefaultLocale();\n          if (locale.checks) {\n            this._applyCheckLocale(locale.checks);\n          }\n          if (locale.rules) {\n            this._applyRuleLocale(locale.rules);\n          }\n          if (locale.failureSummaries) {\n            this._applyFailureSummaries(locale.failureSummaries, 'failureSummaries');\n          }\n          if (locale.incompleteFallbackMessage) {\n            this.data.incompleteFallbackMessage = mergeFallbackMessage(this.data.incompleteFallbackMessage, locale.incompleteFallbackMessage);\n          }\n          if (locale.lang) {\n            this.lang = locale.lang;\n          }\n        }\n      }, {\n        key: 'setAllowedOrigins',\n        value: function setAllowedOrigins(allowedOrigins) {\n          var defaultOrigin = getDefaultOrigin();\n          this.allowedOrigins = [];\n          var _iterator22 = _createForOfIteratorHelper(allowedOrigins), _step22;\n          try {\n            for (_iterator22.s(); !(_step22 = _iterator22.n()).done; ) {\n              var origin = _step22.value;\n              if (origin === constants_default.allOrigins) {\n                this.allowedOrigins = [ '*' ];\n                return;\n              } else if (origin !== constants_default.sameOrigin) {\n                this.allowedOrigins.push(origin);\n              } else if (defaultOrigin) {\n                this.allowedOrigins.push(defaultOrigin);\n              }\n            }\n          } catch (err) {\n            _iterator22.e(err);\n          } finally {\n            _iterator22.f();\n          }\n        }\n      }, {\n        key: '_init',\n        value: function _init() {\n          var audit = getDefaultConfiguration(this.defaultConfig);\n          this.lang = audit.lang || 'en';\n          this.reporter = audit.reporter;\n          this.commands = {};\n          this.rules = [];\n          this.checks = {};\n          this.brand = 'axe';\n          this.application = 'axeAPI';\n          this.tagExclude = [ 'experimental', 'deprecated' ];\n          this.noHtml = audit.noHtml;\n          this.allowedOrigins = audit.allowedOrigins;\n          unpackToObject(audit.rules, this, 'addRule');\n          unpackToObject(audit.checks, this, 'addCheck');\n          this.data = {};\n          this.data.checks = audit.data && audit.data.checks || {};\n          this.data.rules = audit.data && audit.data.rules || {};\n          this.data.failureSummaries = audit.data && audit.data.failureSummaries || {};\n          this.data.incompleteFallbackMessage = audit.data && audit.data.incompleteFallbackMessage || '';\n          this._constructHelpUrls();\n        }\n      }, {\n        key: 'registerCommand',\n        value: function registerCommand(command) {\n          this.commands[command.id] = command.callback;\n        }\n      }, {\n        key: 'addRule',\n        value: function addRule(spec) {\n          if (spec.metadata) {\n            this.data.rules[spec.id] = spec.metadata;\n          }\n          var rule = this.getRule(spec.id);\n          if (rule) {\n            rule.configure(spec);\n          } else {\n            this.rules.push(new Rule(spec, this));\n          }\n        }\n      }, {\n        key: 'addCheck',\n        value: function addCheck(spec) {\n          var metadata = spec.metadata;\n          if (_typeof(metadata) === 'object') {\n            this.data.checks[spec.id] = metadata;\n            if (_typeof(metadata.messages) === 'object') {\n              Object.keys(metadata.messages).filter(function(prop) {\n                return metadata.messages.hasOwnProperty(prop) && typeof metadata.messages[prop] === 'string';\n              }).forEach(function(prop) {\n                if (metadata.messages[prop].indexOf('function') === 0) {\n                  metadata.messages[prop] = new Function('return ' + metadata.messages[prop] + ';')();\n                }\n              });\n            }\n          }\n          if (this.checks[spec.id]) {\n            this.checks[spec.id].configure(spec);\n          } else {\n            this.checks[spec.id] = new check_default(spec);\n          }\n        }\n      }, {\n        key: 'run',\n        value: function run(context, options, resolve, reject) {\n          this.normalizeOptions(options);\n          dq_element_default.setRunOptions(options);\n          axe._selectCache = [];\n          var allRulesToRun = getRulesToRun(this.rules, context, options);\n          var runNowRules = allRulesToRun.now;\n          var runLaterRules = allRulesToRun.later;\n          var nowRulesQueue = queue_default();\n          runNowRules.forEach(function(rule) {\n            nowRulesQueue.defer(getDefferedRule(rule, context, options));\n          });\n          var preloaderQueue = queue_default();\n          if (runLaterRules.length) {\n            preloaderQueue.defer(function(res) {\n              _preload(options).then(function(assets) {\n                return res(assets);\n              })['catch'](function(err2) {\n                console.warn('Couldn\\'t load preload assets: ', err2);\n                res(void 0);\n              });\n            });\n          }\n          var queueForNowRulesAndPreloader = queue_default();\n          queueForNowRulesAndPreloader.defer(nowRulesQueue);\n          queueForNowRulesAndPreloader.defer(preloaderQueue);\n          queueForNowRulesAndPreloader.then(function(nowRulesAndPreloaderResults) {\n            var assetsFromQueue = nowRulesAndPreloaderResults.pop();\n            if (assetsFromQueue && assetsFromQueue.length) {\n              var assets = assetsFromQueue[0];\n              if (assets) {\n                context = _extends({}, context, assets);\n              }\n            }\n            var nowRulesResults = nowRulesAndPreloaderResults[0];\n            if (!runLaterRules.length) {\n              axe._selectCache = void 0;\n              resolve(nowRulesResults.filter(function(result) {\n                return !!result;\n              }));\n              return;\n            }\n            var laterRulesQueue = queue_default();\n            runLaterRules.forEach(function(rule) {\n              var deferredRule = getDefferedRule(rule, context, options);\n              laterRulesQueue.defer(deferredRule);\n            });\n            laterRulesQueue.then(function(laterRuleResults) {\n              axe._selectCache = void 0;\n              resolve(nowRulesResults.concat(laterRuleResults).filter(function(result) {\n                return !!result;\n              }));\n            })['catch'](reject);\n          })['catch'](reject);\n        }\n      }, {\n        key: 'after',\n        value: function after(results, options) {\n          var rules = this.rules;\n          return results.map(function(ruleResult) {\n            var rule = find_by_default(rules, 'id', ruleResult.id);\n            if (!rule) {\n              throw new Error('Result for unknown rule. You may be running mismatch axe-core versions');\n            }\n            return rule.after(ruleResult, options);\n          });\n        }\n      }, {\n        key: 'getRule',\n        value: function getRule(ruleId) {\n          return this.rules.find(function(rule) {\n            return rule.id === ruleId;\n          });\n        }\n      }, {\n        key: 'normalizeOptions',\n        value: function normalizeOptions(options) {\n          var audit = this;\n          var tags = [];\n          var ruleIds = [];\n          audit.rules.forEach(function(rule) {\n            ruleIds.push(rule.id);\n            rule.tags.forEach(function(tag) {\n              if (!tags.includes(tag)) {\n                tags.push(tag);\n              }\n            });\n          });\n          if ([ 'object', 'string' ].includes(_typeof(options.runOnly))) {\n            if (typeof options.runOnly === 'string') {\n              options.runOnly = [ options.runOnly ];\n            }\n            if (Array.isArray(options.runOnly)) {\n              var hasTag = options.runOnly.find(function(value) {\n                return tags.includes(value);\n              });\n              var hasRule = options.runOnly.find(function(value) {\n                return ruleIds.includes(value);\n              });\n              if (hasTag && hasRule) {\n                throw new Error('runOnly cannot be both rules and tags');\n              }\n              if (hasRule) {\n                options.runOnly = {\n                  type: 'rule',\n                  values: options.runOnly\n                };\n              } else {\n                options.runOnly = {\n                  type: 'tag',\n                  values: options.runOnly\n                };\n              }\n            }\n            var only = options.runOnly;\n            if (only.value && !only.values) {\n              only.values = only.value;\n              delete only.value;\n            }\n            if (!Array.isArray(only.values) || only.values.length === 0) {\n              throw new Error('runOnly.values must be a non-empty array');\n            }\n            if ([ 'rule', 'rules' ].includes(only.type)) {\n              only.type = 'rule';\n              only.values.forEach(function(ruleId) {\n                if (!ruleIds.includes(ruleId)) {\n                  throw new Error('unknown rule `' + ruleId + '` in options.runOnly');\n                }\n              });\n            } else if ([ 'tag', 'tags', void 0 ].includes(only.type)) {\n              only.type = 'tag';\n              var unmatchedTags = only.values.filter(function(tag) {\n                return !tags.includes(tag) && !/wcag2[1-3]a{1,3}/.test(tag);\n              });\n              if (unmatchedTags.length !== 0) {\n                axe.log('Could not find tags `' + unmatchedTags.join('`, `') + '`');\n              }\n            } else {\n              throw new Error('Unknown runOnly type \\''.concat(only.type, '\\''));\n            }\n          }\n          if (_typeof(options.rules) === 'object') {\n            Object.keys(options.rules).forEach(function(ruleId) {\n              if (!ruleIds.includes(ruleId)) {\n                throw new Error('unknown rule `' + ruleId + '` in options.rules');\n              }\n            });\n          }\n          return options;\n        }\n      }, {\n        key: 'setBranding',\n        value: function setBranding(branding) {\n          var previous = {\n            brand: this.brand,\n            application: this.application\n          };\n          if (typeof branding === 'string') {\n            this.application = branding;\n          }\n          if (branding && branding.hasOwnProperty('brand') && branding.brand && typeof branding.brand === 'string') {\n            this.brand = branding.brand;\n          }\n          if (branding && branding.hasOwnProperty('application') && branding.application && typeof branding.application === 'string') {\n            this.application = branding.application;\n          }\n          this._constructHelpUrls(previous);\n        }\n      }, {\n        key: '_constructHelpUrls',\n        value: function _constructHelpUrls() {\n          var _this13 = this;\n          var previous = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          var version = (axe.version.match(/^[1-9][0-9]*\\.[0-9]+/) || [ 'x.y' ])[0];\n          this.rules.forEach(function(rule) {\n            if (!_this13.data.rules[rule.id]) {\n              _this13.data.rules[rule.id] = {};\n            }\n            var metaData = _this13.data.rules[rule.id];\n            if (typeof metaData.helpUrl !== 'string' || previous && metaData.helpUrl === getHelpUrl(previous, rule.id, version)) {\n              metaData.helpUrl = getHelpUrl(_this13, rule.id, version);\n            }\n          });\n        }\n      }, {\n        key: 'resetRulesAndChecks',\n        value: function resetRulesAndChecks() {\n          this._init();\n          this._resetLocale();\n        }\n      } ]);\n    }();\n    var audit_default = Audit;\n    function getDefaultOrigin() {\n      if (window.origin && window.origin !== 'null') {\n        return window.origin;\n      }\n      if (window.location && window.location.origin && window.location.origin !== 'null') {\n        return window.location.origin;\n      }\n    }\n    function getDefaultConfiguration(audit) {\n      var config;\n      if (audit) {\n        config = _clone(audit);\n        config.commons = audit.commons;\n      } else {\n        config = {};\n      }\n      config.reporter = config.reporter || null;\n      config.noHtml = config.noHtml || false;\n      if (!config.allowedOrigins) {\n        var defaultOrigin = getDefaultOrigin();\n        config.allowedOrigins = defaultOrigin ? [ defaultOrigin ] : [];\n      }\n      config.rules = config.rules || [];\n      config.checks = config.checks || [];\n      config.data = _extends({\n        checks: {},\n        rules: {}\n      }, config.data);\n      return config;\n    }\n    function unpackToObject(collection, audit, method) {\n      var i, l;\n      for (i = 0, l = collection.length; i < l; i++) {\n        audit[method](collection[i]);\n      }\n    }\n    var mergeCheckLocale = function mergeCheckLocale(a2, b2) {\n      var pass = b2.pass, fail = b2.fail;\n      if (typeof pass === 'string' && dotRegex.test(pass)) {\n        pass = import_dot2['default'].compile(pass);\n      }\n      if (typeof fail === 'string' && dotRegex.test(fail)) {\n        fail = import_dot2['default'].compile(fail);\n      }\n      return _extends({}, a2, {\n        messages: {\n          pass: pass || a2.messages.pass,\n          fail: fail || a2.messages.fail,\n          incomplete: _typeof(a2.messages.incomplete) === 'object' ? _extends({}, a2.messages.incomplete, b2.incomplete) : b2.incomplete\n        }\n      });\n    };\n    var mergeRuleLocale = function mergeRuleLocale(a2, b2) {\n      var help = b2.help, description = b2.description;\n      if (typeof help === 'string' && dotRegex.test(help)) {\n        help = import_dot2['default'].compile(help);\n      }\n      if (typeof description === 'string' && dotRegex.test(description)) {\n        description = import_dot2['default'].compile(description);\n      }\n      return _extends({}, a2, {\n        help: help || a2.help,\n        description: description || a2.description\n      });\n    };\n    var mergeFailureMessage = function mergeFailureMessage(a2, b2) {\n      var failureMessage = b2.failureMessage;\n      if (typeof failureMessage === 'string' && dotRegex.test(failureMessage)) {\n        failureMessage = import_dot2['default'].compile(failureMessage);\n      }\n      return _extends({}, a2, {\n        failureMessage: failureMessage || a2.failureMessage\n      });\n    };\n    var mergeFallbackMessage = function mergeFallbackMessage(a2, b2) {\n      if (typeof b2 === 'string' && dotRegex.test(b2)) {\n        b2 = import_dot2['default'].compile(b2);\n      }\n      return b2 || a2;\n    };\n    function getRulesToRun(rules, context, options) {\n      var base = {\n        now: [],\n        later: []\n      };\n      var splitRules = rules.reduce(function(out, rule) {\n        if (!rule_should_run_default(rule, context, options)) {\n          return out;\n        }\n        if (rule.preload) {\n          out.later.push(rule);\n          return out;\n        }\n        out.now.push(rule);\n        return out;\n      }, base);\n      return splitRules;\n    }\n    function getDefferedRule(rule, context, options) {\n      if (options.performanceTimer) {\n        performance_timer_default.mark('mark_rule_start_' + rule.id);\n      }\n      return function(resolve, reject) {\n        rule.run(context, options, function(ruleResult) {\n          resolve(ruleResult);\n        }, function(err2) {\n          if (!options.debug) {\n            var errResult = Object.assign(new rule_result_default(rule), {\n              result: constants_default.CANTTELL,\n              description: 'An error occured while running this rule',\n              message: err2.message,\n              stack: err2.stack,\n              error: err2,\n              errorNode: err2.errorNode\n            });\n            resolve(errResult);\n          } else {\n            reject(err2);\n          }\n        });\n      };\n    }\n    function getHelpUrl(_ref142, ruleId, version) {\n      var brand = _ref142.brand, application = _ref142.application, lang = _ref142.lang;\n      return constants_default.helpUrlBase + brand + '/' + (version || axe.version.substring(0, axe.version.lastIndexOf('.'))) + '/' + ruleId + '?application=' + encodeURIComponent(application) + (lang && lang !== 'en' ? '&lang=' + encodeURIComponent(lang) : '');\n    }\n    function setupGlobals(context) {\n      var hasWindow = window && 'Node' in window && 'NodeList' in window;\n      var hasDoc = !!document;\n      if (hasWindow && hasDoc) {\n        return;\n      }\n      if (!context || !context.ownerDocument) {\n        throw new Error('Required \"window\" or \"document\" globals not defined and cannot be deduced from the context. Either set the globals before running or pass in a valid Element.');\n      }\n      if (!hasDoc) {\n        cache_default.set('globalDocumentSet', true);\n        document = context.ownerDocument;\n      }\n      if (!hasWindow) {\n        cache_default.set('globalWindowSet', true);\n        window = document.defaultView;\n      }\n    }\n    function resetGlobals() {\n      if (cache_default.get('globalDocumentSet')) {\n        cache_default.set('globalDocumentSet', false);\n        document = null;\n      }\n      if (cache_default.get('globalWindowSet')) {\n        cache_default.set('globalWindowSet', false);\n        window = null;\n      }\n    }\n    function teardown() {\n      resetGlobals();\n      axe._memoizedFns.forEach(function(fn) {\n        return fn.clear();\n      });\n      cache_default.clear();\n      axe._tree = void 0;\n      axe._selectorData = void 0;\n      axe._selectCache = void 0;\n    }\n    var teardown_default = teardown;\n    function runRules(context, options, resolve, reject) {\n      try {\n        context = new Context(context);\n        axe._tree = context.flatTree;\n        axe._selectorData = _getSelectorData(context.flatTree);\n      } catch (e) {\n        teardown_default();\n        return reject(e);\n      }\n      var q = queue_default();\n      var audit = axe._audit;\n      if (options.performanceTimer) {\n        performance_timer_default.auditStart();\n      }\n      if (context.frames.length && options.iframes !== false) {\n        q.defer(function(res, rej) {\n          _collectResultsFromFrames(context, options, 'rules', null, res, rej);\n        });\n      }\n      q.defer(function(res, rej) {\n        audit.run(context, options, res, rej);\n      });\n      q.then(function(data) {\n        try {\n          if (options.performanceTimer) {\n            performance_timer_default.auditEnd();\n          }\n          var results = merge_results_default(data.map(function(res) {\n            return {\n              results: res\n            };\n          }));\n          if (context.initiator) {\n            if (options.performanceTimer) {\n              performance_timer_default.mark('auditAfterStart');\n            }\n            results = audit.after(results, options);\n            if (options.performanceTimer) {\n              performance_timer_default.mark('auditAfterEnd');\n              performance_timer_default.measure('audit.after', 'auditAfterStart', 'auditAfterEnd');\n              performance_timer_default.logMeasures('audit.after');\n            }\n            results.forEach(_publishMetaData);\n            results = results.map(_finalizeRuleResult);\n          }\n          try {\n            resolve(results, teardown_default);\n          } catch (e) {\n            teardown_default();\n            log_default(e);\n          }\n        } catch (e) {\n          teardown_default();\n          reject(e);\n        }\n      })['catch'](function(e) {\n        teardown_default();\n        reject(e);\n      });\n    }\n    function load(audit) {\n      axe._audit = new audit_default(audit);\n    }\n    function runCommand(data, keepalive, callback) {\n      var resolve = callback;\n      var reject = function reject2(err2) {\n        if (err2 instanceof Error === false) {\n          err2 = new Error(err2);\n        }\n        callback(err2);\n      };\n      var context = data && data.context || {};\n      if (context.hasOwnProperty('include') && !context.include.length) {\n        context.include = [ document ];\n      }\n      var options = data && data.options || {};\n      switch (data.command) {\n       case 'rules':\n        return runRules(context, options, function(results, cleanupFn) {\n          results = node_serializer_default.mapRawResults(results);\n          resolve(results);\n          cleanupFn();\n        }, reject);\n\n       case 'cleanup-plugin':\n        return cleanup_default(resolve, reject);\n\n       default:\n        if (axe._audit && axe._audit.commands && axe._audit.commands[data.command]) {\n          return axe._audit.commands[data.command](data, callback);\n        }\n      }\n    }\n    if (window.top !== window) {\n      _respondable.subscribe('axe.start', runCommand);\n      _respondable.subscribe('axe.ping', function(data, keepalive, respond) {\n        respond({\n          axe: true\n        });\n      });\n    }\n    function Plugin(spec) {\n      this._run = spec.run;\n      this._collect = spec.collect;\n      this._registry = {};\n      spec.commands.forEach(function(command) {\n        axe._audit.registerCommand(command);\n      });\n    }\n    Plugin.prototype.run = function run3() {\n      return this._run.apply(this, arguments);\n    };\n    Plugin.prototype.collect = function collect() {\n      return this._collect.apply(this, arguments);\n    };\n    Plugin.prototype.cleanup = function cleanup2(done) {\n      var q = axe.utils.queue();\n      var that = this;\n      Object.keys(this._registry).forEach(function(key) {\n        q.defer(function(_done) {\n          that._registry[key].cleanup(_done);\n        });\n      });\n      q.then(done);\n    };\n    Plugin.prototype.add = function add(impl) {\n      this._registry[impl.id] = impl;\n    };\n    function registerPlugin(plugin) {\n      axe.plugins[plugin.id] = new Plugin(plugin);\n    }\n    var plugins_default = registerPlugin;\n    function reset() {\n      var audit = axe._audit;\n      if (!audit) {\n        throw new Error('No audit configured');\n      }\n      audit.resetRulesAndChecks();\n      resetStandards();\n    }\n    var reset_default = reset;\n    function runVirtualRule(ruleId, vNode) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      options.reporter = options.reporter || axe._audit.reporter || 'v1';\n      axe._selectorData = {};\n      if (!(vNode instanceof abstract_virtual_node_default)) {\n        vNode = new serial_virtual_node_default(vNode);\n      }\n      var rule = _getRule(ruleId);\n      if (!rule) {\n        throw new Error('unknown rule `' + ruleId + '`');\n      }\n      rule = Object.create(rule, {\n        excludeHidden: {\n          value: false\n        }\n      });\n      var context = {\n        initiator: true,\n        include: [ vNode ],\n        exclude: [],\n        frames: [],\n        page: false,\n        focusable: true,\n        size: {},\n        flatTree: []\n      };\n      var rawResults = rule.runSync(context, options);\n      _publishMetaData(rawResults);\n      _finalizeRuleResult(rawResults);\n      var results = aggregate_result_default([ rawResults ]);\n      results.violations.forEach(function(result) {\n        return result.nodes.forEach(function(nodeResult) {\n          nodeResult.failureSummary = failure_summary_default(nodeResult);\n        });\n      });\n      return _extends({}, _getEnvironmentData(), results, {\n        toolOptions: options\n      });\n    }\n    function normalizeRunParams(_ref143) {\n      var _ref145, _options$reporter, _axe$_audit;\n      var _ref144 = _slicedToArray(_ref143, 3), context = _ref144[0], options = _ref144[1], callback = _ref144[2];\n      var typeErr = new TypeError('axe.run arguments are invalid');\n      if (!_isContextSpec(context)) {\n        if (callback !== void 0) {\n          throw typeErr;\n        }\n        callback = options;\n        options = context;\n        context = document;\n      }\n      if (_typeof(options) !== 'object') {\n        if (callback !== void 0) {\n          throw typeErr;\n        }\n        callback = options;\n        options = {};\n      }\n      if (typeof callback !== 'function' && callback !== void 0) {\n        throw typeErr;\n      }\n      options = _clone(options);\n      options.reporter = (_ref145 = (_options$reporter = options.reporter) !== null && _options$reporter !== void 0 ? _options$reporter : (_axe$_audit = axe._audit) === null || _axe$_audit === void 0 ? void 0 : _axe$_audit.reporter) !== null && _ref145 !== void 0 ? _ref145 : 'v1';\n      return {\n        context: context,\n        options: options,\n        callback: callback\n      };\n    }\n    var noop2 = function noop2() {};\n    function run4() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key9 = 0; _key9 < _len7; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      setupGlobals(args[0]);\n      var _normalizeRunParams = normalizeRunParams(args), context = _normalizeRunParams.context, options = _normalizeRunParams.options, _normalizeRunParams$c = _normalizeRunParams.callback, callback = _normalizeRunParams$c === void 0 ? noop2 : _normalizeRunParams$c;\n      var _getPromiseHandlers = getPromiseHandlers(callback), thenable = _getPromiseHandlers.thenable, resolve = _getPromiseHandlers.resolve, reject = _getPromiseHandlers.reject;\n      try {\n        assert_default(axe._audit, 'No audit configured');\n        assert_default(!axe._running, 'Axe is already running. Use `await axe.run()` to wait for the previous run to finish before starting a new run.');\n      } catch (e) {\n        return handleError(e, callback);\n      }\n      axe._running = true;\n      if (options.performanceTimer) {\n        performance_timer_default.start();\n      }\n      function handleRunRules(rawResults, teardown2) {\n        var respond = function respond(results) {\n          if (options.performanceTimer) {\n            performance_timer_default.mark('reporterEnd');\n            performance_timer_default.measure('reporter', 'reporterStart', 'reporterEnd');\n            performance_timer_default.logMeasures('reporter');\n            performance_timer_default.end();\n          }\n          axe._running = false;\n          teardown2();\n          try {\n            resolve(results);\n          } catch (e) {\n            axe.log(e);\n          }\n        };\n        var wrappedReject = function wrappedReject(err2) {\n          axe._running = false;\n          teardown2();\n          try {\n            reject(err2);\n          } catch (e) {\n            axe.log(e);\n          }\n        };\n        try {\n          if (options.performanceTimer) {\n            performance_timer_default.mark('reporterStart');\n          }\n          createReport(rawResults, options, respond, wrappedReject);\n        } catch (err2) {\n          wrappedReject(err2);\n        }\n      }\n      function errorRunRules(err2) {\n        if (options.performanceTimer) {\n          performance_timer_default.end();\n        }\n        axe._running = false;\n        callback(err2);\n        reject(err2);\n      }\n      axe._runRules(context, options, handleRunRules, errorRunRules);\n      return thenable;\n    }\n    function getPromiseHandlers(callback) {\n      var thenable, reject, resolve;\n      if (typeof Promise === 'function' && callback === noop2) {\n        thenable = new Promise(function(_resolve, _reject) {\n          reject = _reject;\n          resolve = _resolve;\n        });\n      } else {\n        resolve = function resolve(result) {\n          return callback(null, result);\n        };\n        reject = function reject(err2) {\n          return callback(err2);\n        };\n      }\n      return {\n        thenable: thenable,\n        reject: reject,\n        resolve: resolve\n      };\n    }\n    function createReport(rawResults, options, respond, reject) {\n      var reporter = getReporter(options.reporter);\n      var results = reporter(rawResults, options, respond, reject);\n      if (results !== void 0) {\n        respond(results);\n      }\n    }\n    function handleError(err2, callback) {\n      if (typeof callback === 'function' && callback !== noop2) {\n        callback(err2.message);\n        return;\n      }\n      throw err2;\n    }\n    function runPartial() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key10 = 0; _key10 < _len8; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n      var _normalizeRunParams2 = normalizeRunParams(args), options = _normalizeRunParams2.options, context = _normalizeRunParams2.context;\n      assert_default(axe._audit, 'Axe is not configured. Audit is missing.');\n      assert_default(!axe._running, 'Axe is already running. Use `await axe.run()` to wait for the previous run to finish before starting a new run.');\n      var contextObj = new Context(context, axe._tree);\n      axe._tree = contextObj.flatTree;\n      axe._selectorData = _getSelectorData(contextObj.flatTree);\n      axe._running = true;\n      options.elementRef = false;\n      return new Promise(function(res, rej) {\n        axe._audit.run(contextObj, options, res, rej);\n      }).then(function(results) {\n        results = node_serializer_default.mapRawResults(results);\n        var frames = contextObj.frames.map(function(_ref146) {\n          var node = _ref146.node;\n          return node_serializer_default.toSpec(node);\n        });\n        var environmentData;\n        if (contextObj.initiator) {\n          environmentData = _getEnvironmentData();\n        }\n        axe._running = false;\n        teardown_default();\n        return {\n          results: results,\n          frames: frames,\n          environmentData: environmentData\n        };\n      })['catch'](function(err2) {\n        axe._running = false;\n        teardown_default();\n        return Promise.reject(err2);\n      });\n    }\n    function finishRun(partialResults) {\n      var _ref148, _options$reporter2, _axe$_audit2;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      options = _clone(options);\n      var _ref147 = partialResults.find(function(r) {\n        return r.environmentData;\n      }) || {}, environmentData = _ref147.environmentData;\n      axe._audit.normalizeOptions(options);\n      options.reporter = (_ref148 = (_options$reporter2 = options.reporter) !== null && _options$reporter2 !== void 0 ? _options$reporter2 : (_axe$_audit2 = axe._audit) === null || _axe$_audit2 === void 0 ? void 0 : _axe$_audit2.reporter) !== null && _ref148 !== void 0 ? _ref148 : 'v1';\n      setFrameSpec(partialResults);\n      var results = merge_results_default(partialResults);\n      results = axe._audit.after(results, options);\n      results.forEach(_publishMetaData);\n      results = results.map(_finalizeRuleResult);\n      return createReport2(results, _extends({\n        environmentData: environmentData\n      }, options));\n    }\n    function setFrameSpec(partialResults) {\n      var frameStack = [];\n      var _iterator23 = _createForOfIteratorHelper(partialResults), _step23;\n      try {\n        for (_iterator23.s(); !(_step23 = _iterator23.n()).done; ) {\n          var partialResult = _step23.value;\n          var frameSpec = frameStack.shift();\n          if (!partialResult) {\n            continue;\n          }\n          partialResult.frameSpec = frameSpec !== null && frameSpec !== void 0 ? frameSpec : null;\n          var frameSpecs = getMergedFrameSpecs(partialResult);\n          frameStack.unshift.apply(frameStack, _toConsumableArray(frameSpecs));\n        }\n      } catch (err) {\n        _iterator23.e(err);\n      } finally {\n        _iterator23.f();\n      }\n    }\n    function getMergedFrameSpecs(_ref149) {\n      var childFrameSpecs = _ref149.frames, parentFrameSpec = _ref149.frameSpec;\n      if (!parentFrameSpec) {\n        return childFrameSpecs;\n      }\n      return childFrameSpecs.map(function(childFrameSpec) {\n        return node_serializer_default.mergeSpecs(childFrameSpec, parentFrameSpec);\n      });\n    }\n    function createReport2(results, options) {\n      return new Promise(function(resolve, reject) {\n        var reporter = getReporter(options.reporter);\n        reporter(results, options, resolve, reject);\n      });\n    }\n    function setup(node) {\n      if (axe._tree) {\n        throw new Error('Axe is already setup. Call `axe.teardown()` before calling `axe.setup` again.');\n      }\n      if (node && _typeof(node.documentElement) === 'object' && _typeof(node.defaultView) === 'object') {\n        node = node.documentElement;\n      }\n      setupGlobals(node);\n      axe._tree = _getFlattenedTree(node);\n      axe._selectorData = _getSelectorData(axe._tree);\n      return axe._tree[0];\n    }\n    var setup_default = setup;\n    var naReporter = function naReporter(results, options, callback) {\n      console.warn('\"na\" reporter will be deprecated in axe v4.0. Use the \"v2\" reporter instead.');\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      var _options4 = options, environmentData = _options4.environmentData, toolOptions = _objectWithoutProperties(_options4, _excluded15);\n      callback(_extends({}, _getEnvironmentData(environmentData), {\n        toolOptions: toolOptions\n      }, processAggregate(results, options)));\n    };\n    var na_default = naReporter;\n    var noPassesReporter = function noPassesReporter(results, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      var _options5 = options, environmentData = _options5.environmentData, toolOptions = _objectWithoutProperties(_options5, _excluded16);\n      options.resultTypes = [ 'violations' ];\n      var _processAggregate = processAggregate(results, options), violations = _processAggregate.violations;\n      callback(_extends({}, _getEnvironmentData(environmentData), {\n        toolOptions: toolOptions,\n        violations: violations\n      }));\n    };\n    var no_passes_default = noPassesReporter;\n    var rawReporter = function rawReporter(results, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      if (!results || !Array.isArray(results)) {\n        return callback(results);\n      }\n      var transformedResults = results.map(function(result) {\n        var transformedResult = _extends({}, result);\n        var types = [ 'passes', 'violations', 'incomplete', 'inapplicable' ];\n        for (var _i50 = 0, _types = types; _i50 < _types.length; _i50++) {\n          var type2 = _types[_i50];\n          transformedResult[type2] = node_serializer_default.mapRawNodeResults(transformedResult[type2]);\n        }\n        return transformedResult;\n      });\n      callback(transformedResults);\n    };\n    var raw_default = rawReporter;\n    var rawEnvReporter = function rawEnvReporter(results, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      var _options6 = options, environmentData = _options6.environmentData, toolOptions = _objectWithoutProperties(_options6, _excluded17);\n      raw_default(results, toolOptions, function(raw) {\n        var env = _getEnvironmentData(environmentData);\n        callback({\n          raw: raw,\n          env: env\n        });\n      });\n    };\n    var raw_env_default = rawEnvReporter;\n    var v1Reporter = function v1Reporter(results, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      var _options7 = options, environmentData = _options7.environmentData, toolOptions = _objectWithoutProperties(_options7, _excluded18);\n      var out = processAggregate(results, options);\n      var addFailureSummaries = function addFailureSummaries(result) {\n        result.nodes.forEach(function(nodeResult) {\n          nodeResult.failureSummary = failure_summary_default(nodeResult);\n        });\n      };\n      out.incomplete.forEach(addFailureSummaries);\n      out.violations.forEach(addFailureSummaries);\n      callback(_extends({}, _getEnvironmentData(environmentData), {\n        toolOptions: toolOptions\n      }, out));\n    };\n    var v1_default = v1Reporter;\n    var v2Reporter = function v2Reporter(results, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      var _options8 = options, environmentData = _options8.environmentData, toolOptions = _objectWithoutProperties(_options8, _excluded19);\n      var out = processAggregate(results, options);\n      callback(_extends({}, _getEnvironmentData(environmentData), {\n        toolOptions: toolOptions\n      }, out));\n    };\n    var v2_default = v2Reporter;\n    var _thisWillBeDeletedDoNotUse = {\n      base: {\n        Audit: audit_default,\n        CheckResult: check_result_default,\n        Check: check_default,\n        Context: Context,\n        RuleResult: rule_result_default,\n        Rule: Rule,\n        metadataFunctionMap: metadata_function_map_default\n      },\n      public: {\n        reporters: reporters\n      },\n      helpers: {\n        failureSummary: failure_summary_default,\n        incompleteFallbackMessage: incompleteFallbackMessage,\n        processAggregate: processAggregate\n      },\n      utils: {\n        setDefaultFrameMessenger: setDefaultFrameMessenger,\n        cacheNodeSelectors: cacheNodeSelectors,\n        getNodesMatchingExpression: getNodesMatchingExpression,\n        convertSelector: _convertSelector\n      },\n      commons: {\n        dom: {\n          nativelyHidden: nativelyHidden,\n          displayHidden: displayHidden,\n          visibilityHidden: visibilityHidden,\n          contentVisibiltyHidden: contentVisibiltyHidden,\n          ariaHidden: ariaHidden,\n          opacityHidden: opacityHidden,\n          scrollHidden: scrollHidden,\n          overflowHidden: overflowHidden,\n          clipHidden: clipHidden,\n          areaHidden: areaHidden,\n          detailsHidden: detailsHidden\n        }\n      }\n    };\n    var exposed_for_testing_default = _thisWillBeDeletedDoNotUse;\n    axe._thisWillBeDeletedDoNotUse = exposed_for_testing_default;\n    axe.constants = constants_default;\n    axe.log = log_default;\n    axe.AbstractVirtualNode = abstract_virtual_node_default;\n    axe.SerialVirtualNode = serial_virtual_node_default;\n    axe.VirtualNode = virtual_node_default;\n    axe._cache = cache_default;\n    axe.imports = imports_exports;\n    axe.cleanup = cleanup_default;\n    axe.configure = configure_default;\n    axe.frameMessenger = frameMessenger2;\n    axe.getRules = get_rules_default;\n    axe._load = load;\n    axe.plugins = {};\n    axe.registerPlugin = plugins_default;\n    axe.hasReporter = hasReporter;\n    axe.getReporter = getReporter;\n    axe.addReporter = addReporter;\n    axe.reset = reset_default;\n    axe._runRules = runRules;\n    axe.runVirtualRule = runVirtualRule;\n    axe.run = run4;\n    axe.setup = setup_default;\n    axe.teardown = teardown_default;\n    axe.runPartial = runPartial;\n    axe.finishRun = finishRun;\n    axe.commons = commons_exports;\n    axe.utils = utils_exports;\n    axe.addReporter('na', na_default);\n    axe.addReporter('no-passes', no_passes_default);\n    axe.addReporter('rawEnv', raw_env_default);\n    axe.addReporter('raw', raw_default);\n    axe.addReporter('v1', v1_default);\n    axe.addReporter('v2', v2_default, true);\n  })();\n  'use strict';\n  axe._load({\n    lang: 'en',\n    data: {\n      rules: {\n        accesskeys: {\n          description: 'Ensure every accesskey attribute value is unique',\n          help: 'accesskey attribute value should be unique'\n        },\n        'area-alt': {\n          description: 'Ensure <area> elements of image maps have alternative text',\n          help: 'Active <area> elements must have alternative text'\n        },\n        'aria-allowed-attr': {\n          description: 'Ensure an element\\'s role supports its ARIA attributes',\n          help: 'Elements must only use supported ARIA attributes'\n        },\n        'aria-allowed-role': {\n          description: 'Ensure role attribute has an appropriate value for the element',\n          help: 'ARIA role should be appropriate for the element'\n        },\n        'aria-braille-equivalent': {\n          description: 'Ensure aria-braillelabel and aria-brailleroledescription have a non-braille equivalent',\n          help: 'aria-braille attributes must have a non-braille equivalent'\n        },\n        'aria-command-name': {\n          description: 'Ensure every ARIA button, link and menuitem has an accessible name',\n          help: 'ARIA commands must have an accessible name'\n        },\n        'aria-conditional-attr': {\n          description: 'Ensure ARIA attributes are used as described in the specification of the element\\'s role',\n          help: 'ARIA attributes must be used as specified for the element\\'s role'\n        },\n        'aria-deprecated-role': {\n          description: 'Ensure elements do not use deprecated roles',\n          help: 'Deprecated ARIA roles must not be used'\n        },\n        'aria-dialog-name': {\n          description: 'Ensure every ARIA dialog and alertdialog node has an accessible name',\n          help: 'ARIA dialog and alertdialog nodes should have an accessible name'\n        },\n        'aria-hidden-body': {\n          description: 'Ensure aria-hidden=\"true\" is not present on the document body.',\n          help: 'aria-hidden=\"true\" must not be present on the document body'\n        },\n        'aria-hidden-focus': {\n          description: 'Ensure aria-hidden elements are not focusable nor contain focusable elements',\n          help: 'ARIA hidden element must not be focusable or contain focusable elements'\n        },\n        'aria-input-field-name': {\n          description: 'Ensure every ARIA input field has an accessible name',\n          help: 'ARIA input fields must have an accessible name'\n        },\n        'aria-meter-name': {\n          description: 'Ensure every ARIA meter node has an accessible name',\n          help: 'ARIA meter nodes must have an accessible name'\n        },\n        'aria-progressbar-name': {\n          description: 'Ensure every ARIA progressbar node has an accessible name',\n          help: 'ARIA progressbar nodes must have an accessible name'\n        },\n        'aria-prohibited-attr': {\n          description: 'Ensure ARIA attributes are not prohibited for an element\\'s role',\n          help: 'Elements must only use permitted ARIA attributes'\n        },\n        'aria-required-attr': {\n          description: 'Ensure elements with ARIA roles have all required ARIA attributes',\n          help: 'Required ARIA attributes must be provided'\n        },\n        'aria-required-children': {\n          description: 'Ensure elements with an ARIA role that require child roles contain them',\n          help: 'Certain ARIA roles must contain particular children'\n        },\n        'aria-required-parent': {\n          description: 'Ensure elements with an ARIA role that require parent roles are contained by them',\n          help: 'Certain ARIA roles must be contained by particular parents'\n        },\n        'aria-roledescription': {\n          description: 'Ensure aria-roledescription is only used on elements with an implicit or explicit role',\n          help: 'aria-roledescription must be on elements with a semantic role'\n        },\n        'aria-roles': {\n          description: 'Ensure all elements with a role attribute use a valid value',\n          help: 'ARIA roles used must conform to valid values'\n        },\n        'aria-text': {\n          description: 'Ensure role=\"text\" is used on elements with no focusable descendants',\n          help: '\"role=text\" should have no focusable descendants'\n        },\n        'aria-toggle-field-name': {\n          description: 'Ensure every ARIA toggle field has an accessible name',\n          help: 'ARIA toggle fields must have an accessible name'\n        },\n        'aria-tooltip-name': {\n          description: 'Ensure every ARIA tooltip node has an accessible name',\n          help: 'ARIA tooltip nodes must have an accessible name'\n        },\n        'aria-treeitem-name': {\n          description: 'Ensure every ARIA treeitem node has an accessible name',\n          help: 'ARIA treeitem nodes should have an accessible name'\n        },\n        'aria-valid-attr-value': {\n          description: 'Ensure all ARIA attributes have valid values',\n          help: 'ARIA attributes must conform to valid values'\n        },\n        'aria-valid-attr': {\n          description: 'Ensure attributes that begin with aria- are valid ARIA attributes',\n          help: 'ARIA attributes must conform to valid names'\n        },\n        'audio-caption': {\n          description: 'Ensure <audio> elements have captions',\n          help: '<audio> elements must have a captions track'\n        },\n        'autocomplete-valid': {\n          description: 'Ensure the autocomplete attribute is correct and suitable for the form field',\n          help: 'autocomplete attribute must be used correctly'\n        },\n        'avoid-inline-spacing': {\n          description: 'Ensure that text spacing set through style attributes can be adjusted with custom stylesheets',\n          help: 'Inline text spacing must be adjustable with custom stylesheets'\n        },\n        blink: {\n          description: 'Ensure <blink> elements are not used',\n          help: '<blink> elements are deprecated and must not be used'\n        },\n        'button-name': {\n          description: 'Ensure buttons have discernible text',\n          help: 'Buttons must have discernible text'\n        },\n        bypass: {\n          description: 'Ensure each page has at least one mechanism for a user to bypass navigation and jump straight to the content',\n          help: 'Page must have means to bypass repeated blocks'\n        },\n        'color-contrast-enhanced': {\n          description: 'Ensure the contrast between foreground and background colors meets WCAG 2 AAA enhanced contrast ratio thresholds',\n          help: 'Elements must meet enhanced color contrast ratio thresholds'\n        },\n        'color-contrast': {\n          description: 'Ensure the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds',\n          help: 'Elements must meet minimum color contrast ratio thresholds'\n        },\n        'css-orientation-lock': {\n          description: 'Ensure content is not locked to any specific display orientation, and the content is operable in all display orientations',\n          help: 'CSS Media queries must not lock display orientation'\n        },\n        'definition-list': {\n          description: 'Ensure <dl> elements are structured correctly',\n          help: '<dl> elements must only directly contain properly-ordered <dt> and <dd> groups, <script>, <template> or <div> elements'\n        },\n        dlitem: {\n          description: 'Ensure <dt> and <dd> elements are contained by a <dl>',\n          help: '<dt> and <dd> elements must be contained by a <dl>'\n        },\n        'document-title': {\n          description: 'Ensure each HTML document contains a non-empty <title> element',\n          help: 'Documents must have <title> element to aid in navigation'\n        },\n        'duplicate-id-active': {\n          description: 'Ensure every id attribute value of active elements is unique',\n          help: 'IDs of active elements must be unique'\n        },\n        'duplicate-id-aria': {\n          description: 'Ensure every id attribute value used in ARIA and in labels is unique',\n          help: 'IDs used in ARIA and labels must be unique'\n        },\n        'duplicate-id': {\n          description: 'Ensure every id attribute value is unique',\n          help: 'id attribute value must be unique'\n        },\n        'empty-heading': {\n          description: 'Ensure headings have discernible text',\n          help: 'Headings should not be empty'\n        },\n        'empty-table-header': {\n          description: 'Ensure table headers have discernible text',\n          help: 'Table header text should not be empty'\n        },\n        'focus-order-semantics': {\n          description: 'Ensure elements in the focus order have a role appropriate for interactive content',\n          help: 'Elements in the focus order should have an appropriate role'\n        },\n        'form-field-multiple-labels': {\n          description: 'Ensure form field does not have multiple label elements',\n          help: 'Form field must not have multiple label elements'\n        },\n        'frame-focusable-content': {\n          description: 'Ensure <frame> and <iframe> elements with focusable content do not have tabindex=-1',\n          help: 'Frames with focusable content must not have tabindex=-1'\n        },\n        'frame-tested': {\n          description: 'Ensure <iframe> and <frame> elements contain the axe-core script',\n          help: 'Frames should be tested with axe-core'\n        },\n        'frame-title-unique': {\n          description: 'Ensure <iframe> and <frame> elements contain a unique title attribute',\n          help: 'Frames must have a unique title attribute'\n        },\n        'frame-title': {\n          description: 'Ensure <iframe> and <frame> elements have an accessible name',\n          help: 'Frames must have an accessible name'\n        },\n        'heading-order': {\n          description: 'Ensure the order of headings is semantically correct',\n          help: 'Heading levels should only increase by one'\n        },\n        'hidden-content': {\n          description: 'Informs users about hidden content.',\n          help: 'Hidden content on the page should be analyzed'\n        },\n        'html-has-lang': {\n          description: 'Ensure every HTML document has a lang attribute',\n          help: '<html> element must have a lang attribute'\n        },\n        'html-lang-valid': {\n          description: 'Ensure the lang attribute of the <html> element has a valid value',\n          help: '<html> element must have a valid value for the lang attribute'\n        },\n        'html-xml-lang-mismatch': {\n          description: 'Ensure that HTML elements with both valid lang and xml:lang attributes agree on the base language of the page',\n          help: 'HTML elements with lang and xml:lang must have the same base language'\n        },\n        'identical-links-same-purpose': {\n          description: 'Ensure that links with the same accessible name serve a similar purpose',\n          help: 'Links with the same name must have a similar purpose'\n        },\n        'image-alt': {\n          description: 'Ensure <img> elements have alternative text or a role of none or presentation',\n          help: 'Images must have alternative text'\n        },\n        'image-redundant-alt': {\n          description: 'Ensure image alternative is not repeated as text',\n          help: 'Alternative text of images should not be repeated as text'\n        },\n        'input-button-name': {\n          description: 'Ensure input buttons have discernible text',\n          help: 'Input buttons must have discernible text'\n        },\n        'input-image-alt': {\n          description: 'Ensure <input type=\"image\"> elements have alternative text',\n          help: 'Image buttons must have alternative text'\n        },\n        'label-content-name-mismatch': {\n          description: 'Ensure that elements labelled through their content must have their visible text as part of their accessible name',\n          help: 'Elements must have their visible text as part of their accessible name'\n        },\n        'label-title-only': {\n          description: 'Ensure that every form element has a visible label and is not solely labeled using hidden labels, or the title or aria-describedby attributes',\n          help: 'Form elements should have a visible label'\n        },\n        label: {\n          description: 'Ensure every form element has a label',\n          help: 'Form elements must have labels'\n        },\n        'landmark-banner-is-top-level': {\n          description: 'Ensure the banner landmark is at top level',\n          help: 'Banner landmark should not be contained in another landmark'\n        },\n        'landmark-complementary-is-top-level': {\n          description: 'Ensure the complementary landmark or aside is at top level',\n          help: 'Aside should not be contained in another landmark'\n        },\n        'landmark-contentinfo-is-top-level': {\n          description: 'Ensure the contentinfo landmark is at top level',\n          help: 'Contentinfo landmark should not be contained in another landmark'\n        },\n        'landmark-main-is-top-level': {\n          description: 'Ensure the main landmark is at top level',\n          help: 'Main landmark should not be contained in another landmark'\n        },\n        'landmark-no-duplicate-banner': {\n          description: 'Ensure the document has at most one banner landmark',\n          help: 'Document should not have more than one banner landmark'\n        },\n        'landmark-no-duplicate-contentinfo': {\n          description: 'Ensure the document has at most one contentinfo landmark',\n          help: 'Document should not have more than one contentinfo landmark'\n        },\n        'landmark-no-duplicate-main': {\n          description: 'Ensure the document has at most one main landmark',\n          help: 'Document should not have more than one main landmark'\n        },\n        'landmark-one-main': {\n          description: 'Ensure the document has a main landmark',\n          help: 'Document should have one main landmark'\n        },\n        'landmark-unique': {\n          description: 'Ensure landmarks are unique',\n          help: 'Landmarks should have a unique role or role/label/title (i.e. accessible name) combination'\n        },\n        'link-in-text-block': {\n          description: 'Ensure links are distinguished from surrounding text in a way that does not rely on color',\n          help: 'Links must be distinguishable without relying on color'\n        },\n        'link-name': {\n          description: 'Ensure links have discernible text',\n          help: 'Links must have discernible text'\n        },\n        list: {\n          description: 'Ensure that lists are structured correctly',\n          help: '<ul> and <ol> must only directly contain <li>, <script> or <template> elements'\n        },\n        listitem: {\n          description: 'Ensure <li> elements are used semantically',\n          help: '<li> elements must be contained in a <ul> or <ol>'\n        },\n        marquee: {\n          description: 'Ensure <marquee> elements are not used',\n          help: '<marquee> elements are deprecated and must not be used'\n        },\n        'meta-refresh-no-exceptions': {\n          description: 'Ensure <meta http-equiv=\"refresh\"> is not used for delayed refresh',\n          help: 'Delayed refresh must not be used'\n        },\n        'meta-refresh': {\n          description: 'Ensure <meta http-equiv=\"refresh\"> is not used for delayed refresh',\n          help: 'Delayed refresh under 20 hours must not be used'\n        },\n        'meta-viewport-large': {\n          description: 'Ensure <meta name=\"viewport\"> can scale a significant amount',\n          help: 'Users should be able to zoom and scale the text up to 500%'\n        },\n        'meta-viewport': {\n          description: 'Ensure <meta name=\"viewport\"> does not disable text scaling and zooming',\n          help: 'Zooming and scaling must not be disabled'\n        },\n        'nested-interactive': {\n          description: 'Ensure interactive controls are not nested as they are not always announced by screen readers or can cause focus problems for assistive technologies',\n          help: 'Interactive controls must not be nested'\n        },\n        'no-autoplay-audio': {\n          description: 'Ensure <video> or <audio> elements do not autoplay audio for more than 3 seconds without a control mechanism to stop or mute the audio',\n          help: '<video> or <audio> elements must not play automatically'\n        },\n        'object-alt': {\n          description: 'Ensure <object> elements have alternative text',\n          help: '<object> elements must have alternative text'\n        },\n        'p-as-heading': {\n          description: 'Ensure bold, italic text and font-size is not used to style <p> elements as a heading',\n          help: 'Styled <p> elements must not be used as headings'\n        },\n        'page-has-heading-one': {\n          description: 'Ensure that the page, or at least one of its frames contains a level-one heading',\n          help: 'Page should contain a level-one heading'\n        },\n        'presentation-role-conflict': {\n          description: 'Elements marked as presentational should not have global ARIA or tabindex to ensure all screen readers ignore them',\n          help: 'Ensure elements marked as presentational are consistently ignored'\n        },\n        region: {\n          description: 'Ensure all page content is contained by landmarks',\n          help: 'All page content should be contained by landmarks'\n        },\n        'role-img-alt': {\n          description: 'Ensure [role=\"img\"] elements have alternative text',\n          help: '[role=\"img\"] elements must have an alternative text'\n        },\n        'scope-attr-valid': {\n          description: 'Ensure the scope attribute is used correctly on tables',\n          help: 'scope attribute should be used correctly'\n        },\n        'scrollable-region-focusable': {\n          description: 'Ensure elements that have scrollable content are accessible by keyboard',\n          help: 'Scrollable region must have keyboard access'\n        },\n        'select-name': {\n          description: 'Ensure select element has an accessible name',\n          help: 'Select element must have an accessible name'\n        },\n        'server-side-image-map': {\n          description: 'Ensure that server-side image maps are not used',\n          help: 'Server-side image maps must not be used'\n        },\n        'skip-link': {\n          description: 'Ensure all skip links have a focusable target',\n          help: 'The skip-link target should exist and be focusable'\n        },\n        'summary-name': {\n          description: 'Ensure summary elements have discernible text',\n          help: 'Summary elements must have discernible text'\n        },\n        'svg-img-alt': {\n          description: 'Ensure <svg> elements with an img, graphics-document or graphics-symbol role have an accessible text',\n          help: '<svg> elements with an img role must have an alternative text'\n        },\n        tabindex: {\n          description: 'Ensure tabindex attribute values are not greater than 0',\n          help: 'Elements should not have tabindex greater than zero'\n        },\n        'table-duplicate-name': {\n          description: 'Ensure the <caption> element does not contain the same text as the summary attribute',\n          help: 'Tables should not have the same summary and caption'\n        },\n        'table-fake-caption': {\n          description: 'Ensure that tables with a caption use the <caption> element.',\n          help: 'Data or header cells must not be used to give caption to a data table.'\n        },\n        'target-size': {\n          description: 'Ensure touch targets have sufficient size and space',\n          help: 'All touch targets must be 24px large, or leave sufficient space'\n        },\n        'td-has-header': {\n          description: 'Ensure that each non-empty data cell in a <table> larger than 3 by 3  has one or more table headers',\n          help: 'Non-empty <td> elements in larger <table> must have an associated table header'\n        },\n        'td-headers-attr': {\n          description: 'Ensure that each cell in a table that uses the headers attribute refers only to other cells in that table',\n          help: 'Table cells that use the headers attribute must only refer to cells in the same table'\n        },\n        'th-has-data-cells': {\n          description: 'Ensure that <th> elements and elements with role=columnheader/rowheader have data cells they describe',\n          help: 'Table headers in a data table must refer to data cells'\n        },\n        'valid-lang': {\n          description: 'Ensure lang attributes have valid values',\n          help: 'lang attribute must have a valid value'\n        },\n        'video-caption': {\n          description: 'Ensure <video> elements have captions',\n          help: '<video> elements must have captions'\n        }\n      },\n      checks: {\n        abstractrole: {\n          impact: 'serious',\n          messages: {\n            pass: 'Abstract roles are not used',\n            fail: {\n              singular: 'Abstract role cannot be directly used: ${data.values}',\n              plural: 'Abstract roles cannot be directly used: ${data.values}'\n            }\n          }\n        },\n        'aria-allowed-attr': {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA attributes are used correctly for the defined role',\n            fail: {\n              singular: 'ARIA attribute is not allowed: ${data.values}',\n              plural: 'ARIA attributes are not allowed: ${data.values}'\n            },\n            incomplete: 'Check that there is no problem if the ARIA attribute is ignored on this element: ${data.values}'\n          }\n        },\n        'aria-allowed-role': {\n          impact: 'minor',\n          messages: {\n            pass: 'ARIA role is allowed for given element',\n            fail: {\n              singular: 'ARIA role ${data.values} is not allowed for given element',\n              plural: 'ARIA roles ${data.values} are not allowed for given element'\n            },\n            incomplete: {\n              singular: 'ARIA role ${data.values} must be removed when the element is made visible, as it is not allowed for the element',\n              plural: 'ARIA roles ${data.values} must be removed when the element is made visible, as they are not allowed for the element'\n            }\n          }\n        },\n        'aria-busy': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element has an aria-busy attribute',\n            fail: 'Element uses aria-busy=\"true\" while showing a loader'\n          }\n        },\n        'aria-conditional-attr': {\n          impact: 'serious',\n          messages: {\n            pass: 'ARIA attribute is allowed',\n            fail: {\n              checkbox: 'Remove aria-checked, or set it to \"${data.checkState}\" to match the real checkbox state',\n              rowSingular: 'This attribute is supported with treegrid rows, but not ${data.ownerRole}: ${data.invalidAttrs}',\n              rowPlural: 'These attributes are supported with treegrid rows, but not ${data.ownerRole}: ${data.invalidAttrs}'\n            }\n          }\n        },\n        'aria-errormessage': {\n          impact: 'critical',\n          messages: {\n            pass: 'aria-errormessage exists and references elements visible to screen readers that use a supported aria-errormessage technique',\n            fail: {\n              singular: 'aria-errormessage value `${data.values}` must use a technique to announce the message (e.g., aria-live, aria-describedby, role=alert, etc.)',\n              plural: 'aria-errormessage values `${data.values}` must use a technique to announce the message (e.g., aria-live, aria-describedby, role=alert, etc.)',\n              hidden: 'aria-errormessage value `${data.values}` cannot reference a hidden element'\n            },\n            incomplete: {\n              singular: 'Ensure aria-errormessage value `${data.values}` references an existing element',\n              plural: 'Ensure aria-errormessage values `${data.values}` reference existing elements',\n              idrefs: 'Unable to determine if aria-errormessage element exists on the page: ${data.values}'\n            }\n          }\n        },\n        'aria-hidden-body': {\n          impact: 'critical',\n          messages: {\n            pass: 'No aria-hidden attribute is present on document body',\n            fail: 'aria-hidden=true should not be present on the document body'\n          }\n        },\n        'aria-level': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-level values are valid',\n            incomplete: 'aria-level values greater than 6 are not supported in all screenreader and browser combinations'\n          }\n        },\n        'aria-prohibited-attr': {\n          impact: 'serious',\n          messages: {\n            pass: 'ARIA attribute is allowed',\n            fail: {\n              hasRolePlural: '${data.prohibited} attributes cannot be used with role \"${data.role}\".',\n              hasRoleSingular: '${data.prohibited} attribute cannot be used with role \"${data.role}\".',\n              noRolePlural: '${data.prohibited} attributes cannot be used on a ${data.nodeName} with no valid role attribute.',\n              noRoleSingular: '${data.prohibited} attribute cannot be used on a ${data.nodeName} with no valid role attribute.'\n            },\n            incomplete: {\n              hasRoleSingular: '${data.prohibited} attribute is not well supported with role \"${data.role}\".',\n              hasRolePlural: '${data.prohibited} attributes are not well supported with role \"${data.role}\".',\n              noRoleSingular: '${data.prohibited} attribute is not well supported on a ${data.nodeName} with no valid role attribute.',\n              noRolePlural: '${data.prohibited} attributes are not well supported on a ${data.nodeName} with no valid role attribute.'\n            }\n          }\n        },\n        'aria-required-attr': {\n          impact: 'critical',\n          messages: {\n            pass: 'All required ARIA attributes are present',\n            fail: {\n              singular: 'Required ARIA attribute not present: ${data.values}',\n              plural: 'Required ARIA attributes not present: ${data.values}'\n            }\n          }\n        },\n        'aria-required-children': {\n          impact: 'critical',\n          messages: {\n            pass: {\n              default: 'Required ARIA children are present',\n              'aria-busy': 'Element has an aria-busy attribute, so it is allowed to omit required children'\n            },\n            fail: {\n              singular: 'Required ARIA child role not present: ${data.values}',\n              plural: 'Required ARIA children role not present: ${data.values}',\n              unallowed: 'Element has children which are not allowed: ${data.values}'\n            },\n            incomplete: {\n              singular: 'Expecting ARIA child role to be added: ${data.values}',\n              plural: 'Expecting ARIA children role to be added: ${data.values}'\n            }\n          }\n        },\n        'aria-required-parent': {\n          impact: 'critical',\n          messages: {\n            pass: 'Required ARIA parent role present',\n            fail: {\n              singular: 'Required ARIA parent role not present: ${data.values}',\n              plural: 'Required ARIA parents role not present: ${data.values}'\n            }\n          }\n        },\n        'aria-roledescription': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-roledescription used on a supported semantic role',\n            incomplete: 'Check that the aria-roledescription is announced by supported screen readers',\n            fail: 'Give the element a role that supports aria-roledescription'\n          }\n        },\n        'aria-unsupported-attr': {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA attribute is supported',\n            fail: 'ARIA attribute is not widely supported in screen readers and assistive technologies: ${data.values}'\n          }\n        },\n        'aria-valid-attr-value': {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA attribute values are valid',\n            fail: {\n              singular: 'Invalid ARIA attribute value: ${data.values}',\n              plural: 'Invalid ARIA attribute values: ${data.values}'\n            },\n            incomplete: {\n              noId: 'ARIA attribute element ID does not exist on the page: ${data.needsReview}',\n              noIdShadow: 'ARIA attribute element ID does not exist on the page or is a descendant of a different shadow DOM tree: ${data.needsReview}',\n              ariaCurrent: 'ARIA attribute value is invalid and will be treated as \"aria-current=true\": ${data.needsReview}',\n              idrefs: 'Unable to determine if ARIA attribute element ID exists on the page: ${data.needsReview}',\n              empty: 'ARIA attribute value is ignored while empty: ${data.needsReview}',\n              controlsWithinPopup: 'Unable to determine if aria-controls referenced ID exists on the page while using aria-haspopup: ${data.needsReview}'\n            }\n          }\n        },\n        'aria-valid-attr': {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA attribute name is valid',\n            fail: {\n              singular: 'Invalid ARIA attribute name: ${data.values}',\n              plural: 'Invalid ARIA attribute names: ${data.values}'\n            }\n          }\n        },\n        'braille-label-equivalent': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-braillelabel is used on an element with accessible text',\n            fail: 'aria-braillelabel is used on an element with no accessible text',\n            incomplete: 'Unable to compute accessible text'\n          }\n        },\n        'braille-roledescription-equivalent': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-brailleroledescription is used on an element with aria-roledescription',\n            fail: {\n              noRoleDescription: 'aria-brailleroledescription is used on an element with no aria-roledescription',\n              emptyRoleDescription: 'aria-brailleroledescription is used on an element with an empty aria-roledescription'\n            }\n          }\n        },\n        deprecatedrole: {\n          impact: 'minor',\n          messages: {\n            pass: 'ARIA role is not deprecated',\n            fail: 'The role used is deprecated: ${data}'\n          }\n        },\n        fallbackrole: {\n          impact: 'serious',\n          messages: {\n            pass: 'Only one role value used',\n            fail: 'Use only one role value, since fallback roles are not supported in older browsers',\n            incomplete: 'Use only role \\'presentation\\' or \\'none\\' since they are synonymous.'\n          }\n        },\n        'has-global-aria-attribute': {\n          impact: 'minor',\n          messages: {\n            pass: {\n              singular: 'Element has global ARIA attribute: ${data.values}',\n              plural: 'Element has global ARIA attributes: ${data.values}'\n            },\n            fail: 'Element does not have global ARIA attribute'\n          }\n        },\n        'has-widget-role': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element has a widget role.',\n            fail: 'Element does not have a widget role.'\n          }\n        },\n        invalidrole: {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA role is valid',\n            fail: {\n              singular: 'Role must be one of the valid ARIA roles: ${data.values}',\n              plural: 'Roles must be one of the valid ARIA roles: ${data.values}'\n            }\n          }\n        },\n        'is-element-focusable': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element is focusable.',\n            fail: 'Element is not focusable.'\n          }\n        },\n        'no-implicit-explicit-label': {\n          impact: 'serious',\n          messages: {\n            pass: 'There is no mismatch between a <label> and accessible name',\n            incomplete: 'Check that the <label> does not need be part of the ARIA ${data} field\\'s name'\n          }\n        },\n        unsupportedrole: {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA role is supported',\n            fail: 'The role used is not widely supported in screen readers and assistive technologies: ${data}'\n          }\n        },\n        'valid-scrollable-semantics': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element has valid semantics for an element in the focus order.',\n            fail: 'Element has invalid semantics for an element in the focus order.'\n          }\n        },\n        'color-contrast-enhanced': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element has sufficient color contrast of ${data.contrastRatio}',\n            fail: {\n              default: 'Element has insufficient color contrast of ${data.contrastRatio} (foreground color: ${data.fgColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}',\n              fgOnShadowColor: 'Element has insufficient color contrast of ${data.contrastRatio} between the foreground and shadow color (foreground color: ${data.fgColor}, text-shadow color: ${data.shadowColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}',\n              shadowOnBgColor: 'Element has insufficient color contrast of ${data.contrastRatio} between the shadow color and background color (text-shadow color: ${data.shadowColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}'\n            },\n            incomplete: {\n              default: 'Unable to determine contrast ratio',\n              bgImage: 'Element\\'s background color could not be determined due to a background image',\n              bgGradient: 'Element\\'s background color could not be determined due to a background gradient',\n              imgNode: 'Element\\'s background color could not be determined because element contains an image node',\n              bgOverlap: 'Element\\'s background color could not be determined because it is overlapped by another element',\n              fgAlpha: 'Element\\'s foreground color could not be determined because of alpha transparency',\n              elmPartiallyObscured: 'Element\\'s background color could not be determined because it\\'s partially obscured by another element',\n              elmPartiallyObscuring: 'Element\\'s background color could not be determined because it partially overlaps other elements',\n              outsideViewport: 'Element\\'s background color could not be determined because it\\'s outside the viewport',\n              equalRatio: 'Element has a 1:1 contrast ratio with the background',\n              shortTextContent: 'Element content is too short to determine if it is actual text content',\n              nonBmp: 'Element content contains only non-text characters',\n              pseudoContent: 'Element\\'s background color could not be determined due to a pseudo element'\n            }\n          }\n        },\n        'color-contrast': {\n          impact: 'serious',\n          messages: {\n            pass: {\n              default: 'Element has sufficient color contrast of ${data.contrastRatio}',\n              hidden: 'Element is hidden'\n            },\n            fail: {\n              default: 'Element has insufficient color contrast of ${data.contrastRatio} (foreground color: ${data.fgColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}',\n              fgOnShadowColor: 'Element has insufficient color contrast of ${data.contrastRatio} between the foreground and shadow color (foreground color: ${data.fgColor}, text-shadow color: ${data.shadowColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}',\n              shadowOnBgColor: 'Element has insufficient color contrast of ${data.contrastRatio} between the shadow color and background color (text-shadow color: ${data.shadowColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}'\n            },\n            incomplete: {\n              default: 'Unable to determine contrast ratio',\n              bgImage: 'Element\\'s background color could not be determined due to a background image',\n              bgGradient: 'Element\\'s background color could not be determined due to a background gradient',\n              imgNode: 'Element\\'s background color could not be determined because element contains an image node',\n              bgOverlap: 'Element\\'s background color could not be determined because it is overlapped by another element',\n              complexTextShadows: 'Element\\'s contrast could not be determined because it uses complex text shadows',\n              fgAlpha: 'Element\\'s foreground color could not be determined because of alpha transparency',\n              elmPartiallyObscured: 'Element\\'s background color could not be determined because it\\'s partially obscured by another element',\n              elmPartiallyObscuring: 'Element\\'s background color could not be determined because it partially overlaps other elements',\n              outsideViewport: 'Element\\'s background color could not be determined because it\\'s outside the viewport',\n              equalRatio: 'Element has a 1:1 contrast ratio with the background',\n              shortTextContent: 'Element content is too short to determine if it is actual text content',\n              nonBmp: 'Element content contains only non-text characters',\n              pseudoContent: 'Element\\'s background color could not be determined due to a pseudo element'\n            }\n          }\n        },\n        'link-in-text-block-style': {\n          impact: 'serious',\n          messages: {\n            pass: 'Links can be distinguished from surrounding text by visual styling',\n            incomplete: {\n              default: 'Check if the link needs styling to distinguish it from nearby text',\n              pseudoContent: 'Check if the link\\'s pseudo style is sufficient to distinguish it from the surrounding text'\n            },\n            fail: 'The link has no styling (such as underline) to distinguish it from the surrounding text'\n          }\n        },\n        'link-in-text-block': {\n          impact: 'serious',\n          messages: {\n            pass: 'Links can be distinguished from surrounding text in some way other than by color',\n            fail: {\n              fgContrast: 'The link has insufficient color contrast of ${data.contrastRatio}:1 with the surrounding text. (Minimum contrast is ${data.requiredContrastRatio}:1, link text: ${data.nodeColor}, surrounding text: ${data.parentColor})',\n              bgContrast: 'The link background has insufficient color contrast of ${data.contrastRatio} (Minimum contrast is ${data.requiredContrastRatio}:1, link background color: ${data.nodeBackgroundColor}, surrounding background color: ${data.parentBackgroundColor})'\n            },\n            incomplete: {\n              default: 'Element\\'s foreground contrast ratio could not be determined',\n              bgContrast: 'Element\\'s background contrast ratio could not be determined',\n              bgImage: 'Element\\'s contrast ratio could not be determined due to a background image',\n              bgGradient: 'Element\\'s contrast ratio could not be determined due to a background gradient',\n              imgNode: 'Element\\'s contrast ratio could not be determined because element contains an image node',\n              bgOverlap: 'Element\\'s contrast ratio could not be determined because of element overlap'\n            }\n          }\n        },\n        'autocomplete-appropriate': {\n          impact: 'serious',\n          messages: {\n            pass: 'The autocomplete value is on an appropriate element',\n            fail: 'The autocomplete value is inappropriate for this type of input'\n          }\n        },\n        'autocomplete-valid': {\n          impact: 'serious',\n          messages: {\n            pass: 'the autocomplete attribute is correctly formatted',\n            fail: 'the autocomplete attribute is incorrectly formatted',\n            incomplete: 'the autocomplete attribute has a non-standard value. Check whether any standard value could be used instead.'\n          }\n        },\n        accesskeys: {\n          impact: 'serious',\n          messages: {\n            pass: 'Accesskey attribute value is unique',\n            fail: 'Document has multiple elements with the same accesskey'\n          }\n        },\n        'focusable-content': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element contains focusable elements',\n            fail: 'Element should have focusable content'\n          }\n        },\n        'focusable-disabled': {\n          impact: 'serious',\n          messages: {\n            pass: 'No focusable elements contained within element',\n            incomplete: 'Check if the focusable elements immediately move the focus indicator',\n            fail: 'Focusable content should be disabled or be removed from the DOM'\n          }\n        },\n        'focusable-element': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element is focusable',\n            fail: 'Element should be focusable'\n          }\n        },\n        'focusable-modal-open': {\n          impact: 'serious',\n          messages: {\n            pass: 'No focusable elements while a modal is open',\n            incomplete: 'Check that focusable elements are not tabbable in the current state'\n          }\n        },\n        'focusable-no-name': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element is not in tab order or has accessible text',\n            fail: 'Element is in tab order and does not have accessible text',\n            incomplete: 'Unable to determine if element has an accessible name'\n          }\n        },\n        'focusable-not-tabbable': {\n          impact: 'serious',\n          messages: {\n            pass: 'No focusable elements contained within element',\n            incomplete: 'Check if the focusable elements immediately move the focus indicator',\n            fail: 'Focusable content should have tabindex=\"-1\" or be removed from the DOM'\n          }\n        },\n        'frame-focusable-content': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element does not have focusable descendants',\n            fail: 'Element has focusable descendants',\n            incomplete: 'Could not determine if element has descendants'\n          }\n        },\n        'landmark-is-top-level': {\n          impact: 'moderate',\n          messages: {\n            pass: 'The ${data.role} landmark is at the top level.',\n            fail: 'The ${data.role} landmark is contained in another landmark.'\n          }\n        },\n        'no-focusable-content': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element does not have focusable descendants',\n            fail: {\n              default: 'Element has focusable descendants',\n              notHidden: 'Using a negative tabindex on an element inside an interactive control does not prevent assistive technologies from focusing the element (even with aria-hidden=\"true\")'\n            },\n            incomplete: 'Could not determine if element has descendants'\n          }\n        },\n        'page-has-heading-one': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Page has at least one level-one heading',\n            fail: 'Page must have a level-one heading'\n          }\n        },\n        'page-has-main': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Document has at least one main landmark',\n            fail: 'Document does not have a main landmark'\n          }\n        },\n        'page-no-duplicate-banner': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Document does not have more than one banner landmark',\n            fail: 'Document has more than one banner landmark'\n          }\n        },\n        'page-no-duplicate-contentinfo': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Document does not have more than one contentinfo landmark',\n            fail: 'Document has more than one contentinfo landmark'\n          }\n        },\n        'page-no-duplicate-main': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Document does not have more than one main landmark',\n            fail: 'Document has more than one main landmark'\n          }\n        },\n        tabindex: {\n          impact: 'serious',\n          messages: {\n            pass: 'Element does not have a tabindex greater than 0',\n            fail: 'Element has a tabindex greater than 0'\n          }\n        },\n        'alt-space-value': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has a valid alt attribute value',\n            fail: 'Element has an alt attribute containing only a space character, which is not ignored by all screen readers'\n          }\n        },\n        'duplicate-img-label': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element does not duplicate existing text in <img> alt text',\n            fail: 'Element contains <img> element with alt text that duplicates existing text'\n          }\n        },\n        'explicit-label': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has an explicit <label>',\n            fail: 'Element does not have an explicit <label>',\n            incomplete: 'Unable to determine if form element has an explicit <label>'\n          }\n        },\n        'help-same-as-label': {\n          impact: 'minor',\n          messages: {\n            pass: 'Help text (title or aria-describedby) does not duplicate label text',\n            fail: 'Help text (title or aria-describedby) text is the same as the label text'\n          }\n        },\n        'hidden-explicit-label': {\n          impact: 'critical',\n          messages: {\n            pass: 'Form element has a visible explicit <label>',\n            fail: 'Form element has explicit <label> that is hidden',\n            incomplete: 'Unable to determine if form element has explicit <label> that is hidden'\n          }\n        },\n        'implicit-label': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has an implicit (wrapped) <label>',\n            fail: 'Element does not have an implicit (wrapped) <label>',\n            incomplete: 'Unable to determine if form element has an implicit (wrapped) <label>'\n          }\n        },\n        'label-content-name-mismatch': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element contains visible text as part of it\\'s accessible name',\n            fail: 'Text inside the element is not included in the accessible name'\n          }\n        },\n        'multiple-label': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Form field does not have multiple label elements',\n            incomplete: 'Multiple label elements is not widely supported in assistive technologies. Ensure the first label contains all necessary information.'\n          }\n        },\n        'title-only': {\n          impact: 'serious',\n          messages: {\n            pass: 'Form element does not solely use title attribute for its label',\n            fail: 'Only title used to generate label for form element'\n          }\n        },\n        'landmark-is-unique': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Landmarks must have a unique role or role/label/title (i.e. accessible name) combination',\n            fail: 'The landmark must have a unique aria-label, aria-labelledby, or title to make landmarks distinguishable'\n          }\n        },\n        'has-lang': {\n          impact: 'serious',\n          messages: {\n            pass: 'The <html> element has a lang attribute',\n            fail: {\n              noXHTML: 'The xml:lang attribute is not valid on HTML pages, use the lang attribute.',\n              noLang: 'The <html> element does not have a lang attribute'\n            }\n          }\n        },\n        'valid-lang': {\n          impact: 'serious',\n          messages: {\n            pass: 'Value of lang attribute is included in the list of valid languages',\n            fail: 'Value of lang attribute not included in the list of valid languages'\n          }\n        },\n        'xml-lang-mismatch': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Lang and xml:lang attributes have the same base language',\n            fail: 'Lang and xml:lang attributes do not have the same base language'\n          }\n        },\n        dlitem: {\n          impact: 'serious',\n          messages: {\n            pass: 'Description list item has a <dl> parent element',\n            fail: 'Description list item does not have a <dl> parent element'\n          }\n        },\n        listitem: {\n          impact: 'serious',\n          messages: {\n            pass: 'List item has a <ul>, <ol> or role=\"list\" parent element',\n            fail: {\n              default: 'List item does not have a <ul>, <ol> parent element',\n              roleNotValid: 'List item parent element has a role that is not role=\"list\"'\n            }\n          }\n        },\n        'only-dlitems': {\n          impact: 'serious',\n          messages: {\n            pass: 'dl element only has direct children that are allowed inside; <dt>, <dd>, or <div> elements',\n            fail: 'dl element has direct children that are not allowed: ${data.values}'\n          }\n        },\n        'only-listitems': {\n          impact: 'serious',\n          messages: {\n            pass: 'List element only has direct children that are allowed inside <li> elements',\n            fail: 'List element has direct children that are not allowed: ${data.values}'\n          }\n        },\n        'structured-dlitems': {\n          impact: 'serious',\n          messages: {\n            pass: 'When not empty, element has both <dt> and <dd> elements',\n            fail: 'When not empty, element does not have at least one <dt> element followed by at least one <dd> element'\n          }\n        },\n        caption: {\n          impact: 'critical',\n          messages: {\n            pass: 'The multimedia element has a captions track',\n            incomplete: 'Check that captions are available for the element'\n          }\n        },\n        'frame-tested': {\n          impact: 'critical',\n          messages: {\n            pass: 'The iframe was tested with axe-core',\n            fail: 'The iframe could not be tested with axe-core',\n            incomplete: 'The iframe still has to be tested with axe-core'\n          }\n        },\n        'no-autoplay-audio': {\n          impact: 'moderate',\n          messages: {\n            pass: '<video> or <audio> does not output audio for more than allowed duration or has controls mechanism',\n            fail: '<video> or <audio> outputs audio for more than allowed duration and does not have a controls mechanism',\n            incomplete: 'Check that the <video> or <audio> does not output audio for more than allowed duration or provides a controls mechanism'\n          }\n        },\n        'css-orientation-lock': {\n          impact: 'serious',\n          messages: {\n            pass: 'Display is operable, and orientation lock does not exist',\n            fail: 'CSS Orientation lock is applied, and makes display inoperable',\n            incomplete: 'CSS Orientation lock cannot be determined'\n          }\n        },\n        'meta-viewport-large': {\n          impact: 'minor',\n          messages: {\n            pass: '<meta> tag does not prevent significant zooming on mobile devices',\n            fail: '<meta> tag limits zooming on mobile devices'\n          }\n        },\n        'meta-viewport': {\n          impact: 'critical',\n          messages: {\n            pass: '<meta> tag does not disable zooming on mobile devices',\n            fail: '${data} on <meta> tag disables zooming on mobile devices'\n          }\n        },\n        'target-offset': {\n          impact: 'serious',\n          messages: {\n            pass: {\n              default: 'Target has sufficient space from its closest neighbors. Safe clickable space has a diameter of ${data.closestOffset}px which is at least ${data.minOffset}px.',\n              large: 'Target far exceeds the minimum size of ${data.minOffset}px.'\n            },\n            fail: 'Target has insufficient space to its closest neighbors. Safe clickable space has a diameter of ${data.closestOffset}px instead of at least ${data.minOffset}px.',\n            incomplete: {\n              default: 'Element with negative tabindex has insufficient space to its closest neighbors. Safe clickable space has a diameter of ${data.closestOffset}px instead of at least ${data.minOffset}px. Is this a target?',\n              nonTabbableNeighbor: 'Target has insufficient space to its closest neighbors. Safe clickable space has a diameter of ${data.closestOffset}px instead of at least ${data.minOffset}px. Is the neighbor a target?',\n              tooManyRects: 'Could not get the target size because there are too many overlapping elements'\n            }\n          }\n        },\n        'target-size': {\n          impact: 'serious',\n          messages: {\n            pass: {\n              default: 'Control has sufficient size (${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px)',\n              obscured: 'Control is ignored because it is fully obscured and thus not clickable',\n              large: 'Target far exceeds the minimum size of ${data.minSize}px.'\n            },\n            fail: {\n              default: 'Target has insufficient size (${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px)',\n              partiallyObscured: 'Target has insufficient size because it is partially obscured (smallest space is ${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px)'\n            },\n            incomplete: {\n              default: 'Element with negative tabindex has insufficient size (${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px). Is this a target?',\n              contentOverflow: 'Element size could not be accurately determined due to overflow content',\n              partiallyObscured: 'Element with negative tabindex has insufficient size because it is partially obscured (smallest space is ${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px). Is this a target?',\n              partiallyObscuredNonTabbable: 'Target has insufficient size because it is partially obscured by a neighbor with negative tabindex (smallest space is ${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px). Is the neighbor a target?',\n              tooManyRects: 'Could not get the target size because there are too many overlapping elements'\n            }\n          }\n        },\n        'header-present': {\n          impact: 'serious',\n          messages: {\n            pass: 'Page has a heading',\n            fail: 'Page does not have a heading'\n          }\n        },\n        'heading-order': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Heading order valid',\n            fail: 'Heading order invalid',\n            incomplete: 'Unable to determine previous heading'\n          }\n        },\n        'identical-links-same-purpose': {\n          impact: 'minor',\n          messages: {\n            pass: 'There are no other links with the same name, that go to a different URL',\n            incomplete: 'Check that links have the same purpose, or are intentionally ambiguous.'\n          }\n        },\n        'internal-link-present': {\n          impact: 'serious',\n          messages: {\n            pass: 'Valid skip link found',\n            fail: 'No valid skip link found'\n          }\n        },\n        landmark: {\n          impact: 'serious',\n          messages: {\n            pass: 'Page has a landmark region',\n            fail: 'Page does not have a landmark region'\n          }\n        },\n        'meta-refresh-no-exceptions': {\n          impact: 'minor',\n          messages: {\n            pass: '<meta> tag does not immediately refresh the page',\n            fail: '<meta> tag forces timed refresh of page'\n          }\n        },\n        'meta-refresh': {\n          impact: 'critical',\n          messages: {\n            pass: '<meta> tag does not immediately refresh the page',\n            fail: '<meta> tag forces timed refresh of page (less than 20 hours)'\n          }\n        },\n        'p-as-heading': {\n          impact: 'serious',\n          messages: {\n            pass: '<p> elements are not styled as headings',\n            fail: 'Heading elements should be used instead of styled <p> elements',\n            incomplete: 'Unable to determine if <p> elements are styled as headings'\n          }\n        },\n        region: {\n          impact: 'moderate',\n          messages: {\n            pass: 'All page content is contained by landmarks',\n            fail: 'Some page content is not contained by landmarks'\n          }\n        },\n        'skip-link': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Skip link target exists',\n            incomplete: 'Skip link target should become visible on activation',\n            fail: 'No skip link target'\n          }\n        },\n        'unique-frame-title': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element\\'s title attribute is unique',\n            fail: 'Element\\'s title attribute is not unique'\n          }\n        },\n        'duplicate-id-active': {\n          impact: 'serious',\n          messages: {\n            pass: 'Document has no active elements that share the same id attribute',\n            fail: 'Document has active elements with the same id attribute: ${data}'\n          }\n        },\n        'duplicate-id-aria': {\n          impact: 'critical',\n          messages: {\n            pass: 'Document has no elements referenced with ARIA or labels that share the same id attribute',\n            fail: 'Document has multiple elements referenced with ARIA with the same id attribute: ${data}'\n          }\n        },\n        'duplicate-id': {\n          impact: 'minor',\n          messages: {\n            pass: 'Document has no static elements that share the same id attribute',\n            fail: 'Document has multiple static elements with the same id attribute: ${data}'\n          }\n        },\n        'aria-label': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-label attribute exists and is not empty',\n            fail: 'aria-label attribute does not exist or is empty'\n          }\n        },\n        'aria-labelledby': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-labelledby attribute exists and references elements that are visible to screen readers',\n            fail: 'aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty',\n            incomplete: 'Ensure aria-labelledby references an existing element'\n          }\n        },\n        'avoid-inline-spacing': {\n          impact: 'serious',\n          messages: {\n            pass: 'No inline styles with \\'!important\\' that affect text spacing has been specified',\n            fail: {\n              singular: 'Remove \\'!important\\' from inline style ${data.values}, as overriding this is not supported by most browsers',\n              plural: 'Remove \\'!important\\' from inline styles ${data.values}, as overriding this is not supported by most browsers'\n            }\n          }\n        },\n        'button-has-visible-text': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has inner text that is visible to screen readers',\n            fail: 'Element does not have inner text that is visible to screen readers',\n            incomplete: 'Unable to determine if element has children'\n          }\n        },\n        'doc-has-title': {\n          impact: 'serious',\n          messages: {\n            pass: 'Document has a non-empty <title> element',\n            fail: 'Document does not have a non-empty <title> element'\n          }\n        },\n        exists: {\n          impact: 'minor',\n          messages: {\n            pass: 'Element does not exist',\n            incomplete: 'Element exists'\n          }\n        },\n        'has-alt': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has an alt attribute',\n            fail: 'Element does not have an alt attribute'\n          }\n        },\n        'has-visible-text': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element has text that is visible to screen readers',\n            fail: 'Element does not have text that is visible to screen readers',\n            incomplete: 'Unable to determine if element has children'\n          }\n        },\n        'important-letter-spacing': {\n          impact: 'serious',\n          messages: {\n            pass: 'Letter-spacing in the style attribute is not set to !important, or meets the minimum',\n            fail: 'letter-spacing in the style attribute must not use !important, or be at ${data.minValue}em (current ${data.value}em)'\n          }\n        },\n        'important-line-height': {\n          impact: 'serious',\n          messages: {\n            pass: 'line-height in the style attribute is not set to !important, or meets the minimum',\n            fail: 'line-height in the style attribute must not use !important, or be at ${data.minValue}em (current ${data.value}em)'\n          }\n        },\n        'important-word-spacing': {\n          impact: 'serious',\n          messages: {\n            pass: 'word-spacing in the style attribute is not set to !important, or meets the minimum',\n            fail: 'word-spacing in the style attribute must not use !important, or be at ${data.minValue}em (current ${data.value}em)'\n          }\n        },\n        'is-on-screen': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element is not visible',\n            fail: 'Element is visible'\n          }\n        },\n        'non-empty-alt': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has a non-empty alt attribute',\n            fail: {\n              noAttr: 'Element has no alt attribute',\n              emptyAttr: 'Element has an empty alt attribute'\n            }\n          }\n        },\n        'non-empty-if-present': {\n          impact: 'critical',\n          messages: {\n            pass: {\n              default: 'Element does not have a value attribute',\n              'has-label': 'Element has a non-empty value attribute'\n            },\n            fail: 'Element has a value attribute and the value attribute is empty'\n          }\n        },\n        'non-empty-placeholder': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element has a placeholder attribute',\n            fail: {\n              noAttr: 'Element has no placeholder attribute',\n              emptyAttr: 'Element has an empty placeholder attribute'\n            }\n          }\n        },\n        'non-empty-title': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element has a title attribute',\n            fail: {\n              noAttr: 'Element has no title attribute',\n              emptyAttr: 'Element has an empty title attribute'\n            }\n          }\n        },\n        'non-empty-value': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has a non-empty value attribute',\n            fail: {\n              noAttr: 'Element has no value attribute',\n              emptyAttr: 'Element has an empty value attribute'\n            }\n          }\n        },\n        'presentational-role': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element\\'s default semantics were overridden with role=\"${data.role}\"',\n            fail: {\n              default: 'Element\\'s default semantics were not overridden with role=\"none\" or role=\"presentation\"',\n              globalAria: 'Element\\'s role is not presentational because it has a global ARIA attribute',\n              focusable: 'Element\\'s role is not presentational because it is focusable',\n              both: 'Element\\'s role is not presentational because it has a global ARIA attribute and is focusable',\n              iframe: 'Using the \"title\" attribute on an ${data.nodeName} element with a presentational role behaves inconsistently between screen readers'\n            }\n          }\n        },\n        'role-none': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element\\'s default semantics were overridden with role=\"none\"',\n            fail: 'Element\\'s default semantics were not overridden with role=\"none\"'\n          }\n        },\n        'role-presentation': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element\\'s default semantics were overridden with role=\"presentation\"',\n            fail: 'Element\\'s default semantics were not overridden with role=\"presentation\"'\n          }\n        },\n        'svg-non-empty-title': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element has a child that is a title',\n            fail: {\n              noTitle: 'Element has no child that is a title',\n              emptyTitle: 'Element child title is empty'\n            },\n            incomplete: 'Unable to determine element has a child that is a title'\n          }\n        },\n        'caption-faked': {\n          impact: 'serious',\n          messages: {\n            pass: 'The first row of a table is not used as a caption',\n            fail: 'The first child of the table should be a caption instead of a table cell'\n          }\n        },\n        'html5-scope': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Scope attribute is only used on table header elements (<th>)',\n            fail: 'In HTML 5, scope attributes may only be used on table header elements (<th>)'\n          }\n        },\n        'same-caption-summary': {\n          impact: 'minor',\n          messages: {\n            pass: 'Content of summary attribute and <caption> are not duplicated',\n            fail: 'Content of summary attribute and <caption> element are identical',\n            incomplete: 'Unable to determine if <table> element has a caption'\n          }\n        },\n        'scope-value': {\n          impact: 'critical',\n          messages: {\n            pass: 'Scope attribute is used correctly',\n            fail: 'The value of the scope attribute may only be \\'row\\' or \\'col\\''\n          }\n        },\n        'td-has-header': {\n          impact: 'critical',\n          messages: {\n            pass: 'All non-empty data cells have table headers',\n            fail: 'Some non-empty data cells do not have table headers'\n          }\n        },\n        'td-headers-attr': {\n          impact: 'serious',\n          messages: {\n            pass: 'The headers attribute is exclusively used to refer to other cells in the table',\n            incomplete: 'The headers attribute is empty',\n            fail: 'The headers attribute is not exclusively used to refer to other cells in the table'\n          }\n        },\n        'th-has-data-cells': {\n          impact: 'serious',\n          messages: {\n            pass: 'All table header cells refer to data cells',\n            fail: 'Not all table header cells refer to data cells',\n            incomplete: 'Table data cells are missing or empty'\n          }\n        },\n        'hidden-content': {\n          impact: 'minor',\n          messages: {\n            pass: 'All content on the page has been analyzed.',\n            fail: 'There were problems analyzing the content on this page.',\n            incomplete: 'There is hidden content on the page that was not analyzed. You will need to trigger the display of this content in order to analyze it.'\n          }\n        }\n      },\n      failureSummaries: {\n        any: {\n          failureMessage: function anonymous(it) {\n            var out = 'Fix any of the following:';\n            var arr1 = it;\n            if (arr1) {\n              var value, i1 = -1, l1 = arr1.length - 1;\n              while (i1 < l1) {\n                value = arr1[i1 += 1];\n                out += '\\n  ' + value.split('\\n').join('\\n  ');\n              }\n            }\n            return out;\n          }\n        },\n        none: {\n          failureMessage: function anonymous(it) {\n            var out = 'Fix all of the following:';\n            var arr1 = it;\n            if (arr1) {\n              var value, i1 = -1, l1 = arr1.length - 1;\n              while (i1 < l1) {\n                value = arr1[i1 += 1];\n                out += '\\n  ' + value.split('\\n').join('\\n  ');\n              }\n            }\n            return out;\n          }\n        }\n      },\n      incompleteFallbackMessage: 'axe couldn\\'t tell the reason. Time to break out the element inspector!'\n    },\n    rules: [ {\n      id: 'accesskeys',\n      impact: 'serious',\n      selector: '[accesskey]',\n      excludeHidden: false,\n      tags: [ 'cat.keyboard', 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'accesskeys' ]\n    }, {\n      id: 'area-alt',\n      impact: 'critical',\n      selector: 'map area[href]',\n      excludeHidden: false,\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag244', 'wcag412', 'section508', 'section508.22.a', 'TTv5', 'TT6.a', 'EN-301-549', 'EN-9.2.4.4', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ 'c487ae' ],\n      all: [],\n      any: [ {\n        options: {\n          attribute: 'alt'\n        },\n        id: 'non-empty-alt'\n      }, 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'aria-allowed-attr',\n      impact: 'critical',\n      matches: 'aria-allowed-attr-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '5c01ea' ],\n      all: [ {\n        options: {\n          validTreeRowAttrs: [ 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-level' ]\n        },\n        id: 'aria-allowed-attr'\n      } ],\n      any: [],\n      none: [ 'aria-unsupported-attr' ]\n    }, {\n      id: 'aria-allowed-role',\n      impact: 'minor',\n      excludeHidden: false,\n      selector: '[role]',\n      matches: 'aria-allowed-role-matches',\n      tags: [ 'cat.aria', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          allowImplicit: true,\n          ignoredTags: []\n        },\n        id: 'aria-allowed-role'\n      } ],\n      none: []\n    }, {\n      id: 'aria-braille-equivalent',\n      reviewOnFail: true,\n      impact: 'serious',\n      selector: '[aria-brailleroledescription], [aria-braillelabel]',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      all: [ 'braille-roledescription-equivalent', 'braille-label-equivalent' ],\n      any: [],\n      none: []\n    }, {\n      id: 'aria-command-name',\n      impact: 'serious',\n      selector: '[role=\"link\"], [role=\"button\"], [role=\"menuitem\"]',\n      matches: 'no-naming-method-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'TTv5', 'TT6.a', 'EN-301-549', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ '97a4e1' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'aria-conditional-attr',\n      impact: 'serious',\n      matches: 'aria-allowed-attr-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '5c01ea' ],\n      all: [ {\n        options: {\n          invalidTableRowAttrs: [ 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-level' ]\n        },\n        id: 'aria-conditional-attr'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'aria-deprecated-role',\n      impact: 'minor',\n      selector: '[role]',\n      matches: 'no-empty-role-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '674b10' ],\n      all: [],\n      any: [],\n      none: [ 'deprecatedrole' ]\n    }, {\n      id: 'aria-dialog-name',\n      impact: 'serious',\n      selector: '[role=\"dialog\"], [role=\"alertdialog\"]',\n      matches: 'no-naming-method-matches',\n      tags: [ 'cat.aria', 'best-practice' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'aria-hidden-body',\n      impact: 'critical',\n      selector: 'body',\n      excludeHidden: false,\n      matches: 'is-initiator-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag131', 'wcag412', 'EN-301-549', 'EN-9.1.3.1', 'EN-9.4.1.2' ],\n      all: [],\n      any: [ 'aria-hidden-body' ],\n      none: []\n    }, {\n      id: 'aria-hidden-focus',\n      impact: 'serious',\n      selector: '[aria-hidden=\"true\"]',\n      matches: 'aria-hidden-focus-matches',\n      excludeHidden: false,\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag412', 'TTv5', 'TT6.a', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '6cfa84' ],\n      all: [ 'focusable-modal-open', 'focusable-disabled', 'focusable-not-tabbable' ],\n      any: [],\n      none: []\n    }, {\n      id: 'aria-input-field-name',\n      impact: 'serious',\n      selector: '[role=\"combobox\"], [role=\"listbox\"], [role=\"searchbox\"], [role=\"slider\"], [role=\"spinbutton\"], [role=\"textbox\"]',\n      matches: 'no-naming-method-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'TTv5', 'TT5.c', 'EN-301-549', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ 'e086e5' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: [ 'no-implicit-explicit-label' ]\n    }, {\n      id: 'aria-meter-name',\n      impact: 'serious',\n      selector: '[role=\"meter\"]',\n      matches: 'no-naming-method-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag111', 'EN-301-549', 'EN-9.1.1.1' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'aria-progressbar-name',\n      impact: 'serious',\n      selector: '[role=\"progressbar\"]',\n      matches: 'no-naming-method-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag111', 'EN-301-549', 'EN-9.1.1.1' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'aria-prohibited-attr',\n      impact: 'serious',\n      matches: 'aria-allowed-attr-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '5c01ea' ],\n      all: [],\n      any: [],\n      none: [ {\n        options: {\n          elementsAllowedAriaLabel: [ 'applet', 'input' ]\n        },\n        id: 'aria-prohibited-attr'\n      } ]\n    }, {\n      id: 'aria-required-attr',\n      impact: 'critical',\n      selector: '[role]',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '4e8ab6' ],\n      all: [],\n      any: [ 'aria-required-attr' ],\n      none: []\n    }, {\n      id: 'aria-required-children',\n      impact: 'critical',\n      selector: '[role]',\n      matches: 'aria-required-children-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag131', 'EN-301-549', 'EN-9.1.3.1' ],\n      actIds: [ 'bc4a75', 'ff89c9' ],\n      all: [],\n      any: [ {\n        options: {\n          reviewEmpty: [ 'doc-bibliography', 'doc-endnotes', 'grid', 'list', 'listbox', 'menu', 'menubar', 'table', 'tablist', 'tree', 'treegrid', 'rowgroup' ]\n        },\n        id: 'aria-required-children'\n      } ],\n      none: []\n    }, {\n      id: 'aria-required-parent',\n      impact: 'critical',\n      selector: '[role]',\n      matches: 'aria-required-parent-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag131', 'EN-301-549', 'EN-9.1.3.1' ],\n      actIds: [ 'ff89c9' ],\n      all: [],\n      any: [ {\n        options: {\n          ownGroupRoles: [ 'listitem', 'treeitem' ]\n        },\n        id: 'aria-required-parent'\n      } ],\n      none: []\n    }, {\n      id: 'aria-roledescription',\n      impact: 'serious',\n      selector: '[aria-roledescription]',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2', 'deprecated' ],\n      enabled: false,\n      all: [],\n      any: [ {\n        options: {\n          supportedRoles: [ 'button', 'img', 'checkbox', 'radio', 'combobox', 'menuitemcheckbox', 'menuitemradio' ]\n        },\n        id: 'aria-roledescription'\n      } ],\n      none: []\n    }, {\n      id: 'aria-roles',\n      impact: 'critical',\n      selector: '[role]',\n      matches: 'no-empty-role-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '674b10' ],\n      all: [],\n      any: [],\n      none: [ 'invalidrole', 'abstractrole', 'unsupportedrole' ]\n    }, {\n      id: 'aria-text',\n      impact: 'serious',\n      selector: '[role=text]',\n      tags: [ 'cat.aria', 'best-practice' ],\n      all: [],\n      any: [ 'no-focusable-content' ],\n      none: []\n    }, {\n      id: 'aria-toggle-field-name',\n      impact: 'serious',\n      selector: '[role=\"checkbox\"], [role=\"menuitemcheckbox\"], [role=\"menuitemradio\"], [role=\"radio\"], [role=\"switch\"], [role=\"option\"]',\n      matches: 'no-naming-method-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'TTv5', 'TT5.c', 'EN-301-549', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ 'e086e5' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: [ 'no-implicit-explicit-label' ]\n    }, {\n      id: 'aria-tooltip-name',\n      impact: 'serious',\n      selector: '[role=\"tooltip\"]',\n      matches: 'no-naming-method-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'aria-treeitem-name',\n      impact: 'serious',\n      selector: '[role=\"treeitem\"]',\n      matches: 'no-naming-method-matches',\n      tags: [ 'cat.aria', 'best-practice' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'aria-valid-attr-value',\n      impact: 'critical',\n      matches: 'aria-has-attr-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '6a7281' ],\n      all: [ {\n        options: [],\n        id: 'aria-valid-attr-value'\n      }, 'aria-errormessage', 'aria-level' ],\n      any: [],\n      none: []\n    }, {\n      id: 'aria-valid-attr',\n      impact: 'critical',\n      matches: 'aria-has-attr-matches',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '5f99a7' ],\n      all: [],\n      any: [ {\n        options: [],\n        id: 'aria-valid-attr'\n      } ],\n      none: []\n    }, {\n      id: 'audio-caption',\n      impact: 'critical',\n      selector: 'audio',\n      enabled: false,\n      excludeHidden: false,\n      tags: [ 'cat.time-and-media', 'wcag2a', 'wcag121', 'EN-301-549', 'EN-9.1.2.1', 'section508', 'section508.22.a', 'deprecated' ],\n      actIds: [ '2eb176', 'afb423' ],\n      all: [],\n      any: [],\n      none: [ 'caption' ]\n    }, {\n      id: 'autocomplete-valid',\n      impact: 'serious',\n      matches: 'autocomplete-matches',\n      tags: [ 'cat.forms', 'wcag21aa', 'wcag135', 'EN-301-549', 'EN-9.1.3.5', 'ACT' ],\n      actIds: [ '73f2c2' ],\n      all: [ {\n        options: {\n          stateTerms: [ 'none', 'false', 'true', 'disabled', 'enabled', 'undefined', 'null' ],\n          ignoredValues: [ 'text', 'pronouns', 'gender', 'message', 'content' ]\n        },\n        id: 'autocomplete-valid'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'avoid-inline-spacing',\n      impact: 'serious',\n      selector: '[style]',\n      matches: 'is-visible-on-screen-matches',\n      tags: [ 'cat.structure', 'wcag21aa', 'wcag1412', 'EN-301-549', 'EN-9.1.4.12', 'ACT' ],\n      actIds: [ '24afc2', '9e45ec', '78fd32' ],\n      all: [ {\n        options: {\n          cssProperty: 'letter-spacing',\n          minValue: .12\n        },\n        id: 'important-letter-spacing'\n      }, {\n        options: {\n          cssProperty: 'word-spacing',\n          minValue: .16\n        },\n        id: 'important-word-spacing'\n      }, {\n        options: {\n          multiLineOnly: true,\n          cssProperty: 'line-height',\n          minValue: 1.5,\n          normalValue: 1\n        },\n        id: 'important-line-height'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'blink',\n      impact: 'serious',\n      selector: 'blink',\n      excludeHidden: false,\n      tags: [ 'cat.time-and-media', 'wcag2a', 'wcag222', 'section508', 'section508.22.j', 'TTv5', 'TT2.b', 'EN-301-549', 'EN-9.2.2.2' ],\n      all: [],\n      any: [],\n      none: [ 'is-on-screen' ]\n    }, {\n      id: 'button-name',\n      impact: 'critical',\n      selector: 'button',\n      matches: 'no-explicit-name-required-matches',\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag412', 'section508', 'section508.22.a', 'TTv5', 'TT6.a', 'EN-301-549', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ '97a4e1', 'm6b1q3' ],\n      all: [],\n      any: [ 'button-has-visible-text', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      }, 'implicit-label', 'explicit-label', 'presentational-role' ],\n      none: []\n    }, {\n      id: 'bypass',\n      impact: 'serious',\n      selector: 'html',\n      pageLevel: true,\n      matches: 'bypass-matches',\n      reviewOnFail: true,\n      tags: [ 'cat.keyboard', 'wcag2a', 'wcag241', 'section508', 'section508.22.o', 'TTv5', 'TT9.a', 'EN-301-549', 'EN-9.2.4.1' ],\n      actIds: [ 'cf77f2', '047fe0', 'b40fd1', '3e12e1', 'ye5d6e' ],\n      all: [],\n      any: [ 'internal-link-present', {\n        options: {\n          selector: ':is(h1, h2, h3, h4, h5, h6):not([role]), [role=heading]'\n        },\n        id: 'header-present'\n      }, {\n        options: {\n          selector: 'main, [role=main]'\n        },\n        id: 'landmark'\n      } ],\n      none: []\n    }, {\n      id: 'color-contrast-enhanced',\n      impact: 'serious',\n      matches: 'color-contrast-matches',\n      excludeHidden: false,\n      enabled: false,\n      tags: [ 'cat.color', 'wcag2aaa', 'wcag146', 'ACT' ],\n      actIds: [ '09o5cg' ],\n      all: [],\n      any: [ {\n        options: {\n          ignoreUnicode: true,\n          ignoreLength: false,\n          ignorePseudo: false,\n          boldValue: 700,\n          boldTextPt: 14,\n          largeTextPt: 18,\n          contrastRatio: {\n            normal: {\n              expected: 7,\n              minThreshold: 4.5\n            },\n            large: {\n              expected: 4.5,\n              minThreshold: 3\n            }\n          },\n          pseudoSizeThreshold: .25,\n          shadowOutlineEmMax: .1,\n          textStrokeEmMin: .03\n        },\n        id: 'color-contrast-enhanced'\n      } ],\n      none: []\n    }, {\n      id: 'color-contrast',\n      impact: 'serious',\n      matches: 'color-contrast-matches',\n      excludeHidden: false,\n      tags: [ 'cat.color', 'wcag2aa', 'wcag143', 'TTv5', 'TT13.c', 'EN-301-549', 'EN-9.1.4.3', 'ACT' ],\n      actIds: [ 'afw4f7', '09o5cg' ],\n      all: [],\n      any: [ {\n        options: {\n          ignoreUnicode: true,\n          ignoreLength: false,\n          ignorePseudo: false,\n          boldValue: 700,\n          boldTextPt: 14,\n          largeTextPt: 18,\n          contrastRatio: {\n            normal: {\n              expected: 4.5\n            },\n            large: {\n              expected: 3\n            }\n          },\n          pseudoSizeThreshold: .25,\n          shadowOutlineEmMax: .2,\n          textStrokeEmMin: .03\n        },\n        id: 'color-contrast'\n      } ],\n      none: []\n    }, {\n      id: 'css-orientation-lock',\n      impact: 'serious',\n      selector: 'html',\n      tags: [ 'cat.structure', 'wcag134', 'wcag21aa', 'EN-301-549', 'EN-9.1.3.4', 'experimental' ],\n      actIds: [ 'b33eff' ],\n      all: [ {\n        options: {\n          degreeThreshold: 2\n        },\n        id: 'css-orientation-lock'\n      } ],\n      any: [],\n      none: [],\n      preload: true\n    }, {\n      id: 'definition-list',\n      impact: 'serious',\n      selector: 'dl',\n      matches: 'no-role-matches',\n      tags: [ 'cat.structure', 'wcag2a', 'wcag131', 'EN-301-549', 'EN-9.1.3.1' ],\n      all: [],\n      any: [],\n      none: [ 'structured-dlitems', {\n        options: {\n          validRoles: [ 'definition', 'term', 'listitem' ],\n          validNodeNames: [ 'dt', 'dd' ],\n          divGroups: true\n        },\n        id: 'only-dlitems'\n      } ]\n    }, {\n      id: 'dlitem',\n      impact: 'serious',\n      selector: 'dd, dt',\n      matches: 'no-role-matches',\n      tags: [ 'cat.structure', 'wcag2a', 'wcag131', 'EN-301-549', 'EN-9.1.3.1' ],\n      all: [],\n      any: [ 'dlitem' ],\n      none: []\n    }, {\n      id: 'document-title',\n      impact: 'serious',\n      selector: 'html',\n      matches: 'is-initiator-matches',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag242', 'TTv5', 'TT12.a', 'EN-301-549', 'EN-9.2.4.2', 'ACT' ],\n      actIds: [ '2779a5' ],\n      all: [],\n      any: [ 'doc-has-title' ],\n      none: []\n    }, {\n      id: 'duplicate-id-active',\n      impact: 'serious',\n      selector: '[id]',\n      matches: 'duplicate-id-active-matches',\n      excludeHidden: false,\n      tags: [ 'cat.parsing', 'wcag2a-obsolete', 'wcag411', 'deprecated' ],\n      enabled: false,\n      actIds: [ '3ea0c8' ],\n      all: [],\n      any: [ 'duplicate-id-active' ],\n      none: []\n    }, {\n      id: 'duplicate-id-aria',\n      impact: 'critical',\n      selector: '[id]',\n      matches: 'duplicate-id-aria-matches',\n      excludeHidden: false,\n      tags: [ 'cat.parsing', 'wcag2a', 'wcag412', 'EN-301-549', 'EN-9.4.1.2' ],\n      reviewOnFail: true,\n      actIds: [ '3ea0c8' ],\n      all: [],\n      any: [ 'duplicate-id-aria' ],\n      none: []\n    }, {\n      id: 'duplicate-id',\n      impact: 'minor',\n      selector: '[id]',\n      matches: 'duplicate-id-misc-matches',\n      excludeHidden: false,\n      tags: [ 'cat.parsing', 'wcag2a-obsolete', 'wcag411', 'deprecated' ],\n      enabled: false,\n      actIds: [ '3ea0c8' ],\n      all: [],\n      any: [ 'duplicate-id' ],\n      none: []\n    }, {\n      id: 'empty-heading',\n      impact: 'minor',\n      selector: 'h1, h2, h3, h4, h5, h6, [role=\"heading\"]',\n      matches: 'heading-matches',\n      tags: [ 'cat.name-role-value', 'best-practice' ],\n      actIds: [ 'ffd0e9' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'empty-table-header',\n      impact: 'minor',\n      selector: 'th:not([role]), [role=\"rowheader\"], [role=\"columnheader\"]',\n      tags: [ 'cat.name-role-value', 'best-practice' ],\n      all: [],\n      any: [ 'has-visible-text' ],\n      none: []\n    }, {\n      id: 'focus-order-semantics',\n      impact: 'minor',\n      selector: 'div, h1, h2, h3, h4, h5, h6, [role=heading], p, span',\n      matches: 'inserted-into-focus-order-matches',\n      tags: [ 'cat.keyboard', 'best-practice', 'experimental' ],\n      all: [],\n      any: [ {\n        options: [],\n        id: 'has-widget-role'\n      }, {\n        options: {\n          roles: [ 'tooltip' ]\n        },\n        id: 'valid-scrollable-semantics'\n      } ],\n      none: []\n    }, {\n      id: 'form-field-multiple-labels',\n      impact: 'moderate',\n      selector: 'input, select, textarea',\n      matches: 'label-matches',\n      tags: [ 'cat.forms', 'wcag2a', 'wcag332', 'TTv5', 'TT5.c', 'EN-301-549', 'EN-9.3.3.2' ],\n      all: [],\n      any: [],\n      none: [ 'multiple-label' ]\n    }, {\n      id: 'frame-focusable-content',\n      impact: 'serious',\n      selector: 'html',\n      matches: 'frame-focusable-content-matches',\n      tags: [ 'cat.keyboard', 'wcag2a', 'wcag211', 'TTv5', 'TT4.a', 'EN-301-549', 'EN-9.2.1.1' ],\n      actIds: [ 'akn7bn' ],\n      all: [],\n      any: [ 'frame-focusable-content' ],\n      none: []\n    }, {\n      id: 'frame-tested',\n      impact: 'critical',\n      selector: 'html, frame, iframe',\n      tags: [ 'cat.structure', 'best-practice', 'review-item' ],\n      all: [ {\n        options: {\n          isViolation: false\n        },\n        id: 'frame-tested'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'frame-title-unique',\n      impact: 'serious',\n      selector: 'frame[title], iframe[title]',\n      matches: 'frame-title-has-text-matches',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag412', 'TTv5', 'TT12.d', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '4b1c6c' ],\n      all: [],\n      any: [],\n      none: [ 'unique-frame-title' ],\n      reviewOnFail: true\n    }, {\n      id: 'frame-title',\n      impact: 'serious',\n      selector: 'frame, iframe',\n      matches: 'no-negative-tabindex-matches',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag412', 'section508', 'section508.22.i', 'TTv5', 'TT12.d', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ 'cae760' ],\n      all: [],\n      any: [ {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      }, 'aria-label', 'aria-labelledby', 'presentational-role' ],\n      none: []\n    }, {\n      id: 'heading-order',\n      impact: 'moderate',\n      selector: 'h1, h2, h3, h4, h5, h6, [role=heading]',\n      matches: 'heading-matches',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'heading-order' ],\n      none: []\n    }, {\n      id: 'hidden-content',\n      impact: 'minor',\n      selector: '*',\n      excludeHidden: false,\n      tags: [ 'cat.structure', 'best-practice', 'experimental', 'review-item' ],\n      all: [],\n      any: [ 'hidden-content' ],\n      none: []\n    }, {\n      id: 'html-has-lang',\n      impact: 'serious',\n      selector: 'html',\n      matches: 'is-initiator-matches',\n      tags: [ 'cat.language', 'wcag2a', 'wcag311', 'TTv5', 'TT11.a', 'EN-301-549', 'EN-9.3.1.1', 'ACT' ],\n      actIds: [ 'b5c3f8' ],\n      all: [],\n      any: [ {\n        options: {\n          attributes: [ 'lang', 'xml:lang' ]\n        },\n        id: 'has-lang'\n      } ],\n      none: []\n    }, {\n      id: 'html-lang-valid',\n      impact: 'serious',\n      selector: 'html[lang]:not([lang=\"\"]), html[xml\\\\:lang]:not([xml\\\\:lang=\"\"])',\n      tags: [ 'cat.language', 'wcag2a', 'wcag311', 'TTv5', 'TT11.a', 'EN-301-549', 'EN-9.3.1.1', 'ACT' ],\n      actIds: [ 'bf051a' ],\n      all: [],\n      any: [],\n      none: [ {\n        options: {\n          attributes: [ 'lang', 'xml:lang' ]\n        },\n        id: 'valid-lang'\n      } ]\n    }, {\n      id: 'html-xml-lang-mismatch',\n      impact: 'moderate',\n      selector: 'html[lang][xml\\\\:lang]',\n      matches: 'xml-lang-mismatch-matches',\n      tags: [ 'cat.language', 'wcag2a', 'wcag311', 'EN-301-549', 'EN-9.3.1.1', 'ACT' ],\n      actIds: [ '5b7ae0' ],\n      all: [ 'xml-lang-mismatch' ],\n      any: [],\n      none: []\n    }, {\n      id: 'identical-links-same-purpose',\n      impact: 'minor',\n      selector: 'a[href], area[href], [role=\"link\"]',\n      excludeHidden: false,\n      enabled: false,\n      matches: 'identical-links-same-purpose-matches',\n      tags: [ 'cat.semantics', 'wcag2aaa', 'wcag249' ],\n      actIds: [ 'b20e66' ],\n      all: [ 'identical-links-same-purpose' ],\n      any: [],\n      none: []\n    }, {\n      id: 'image-alt',\n      impact: 'critical',\n      selector: 'img',\n      matches: 'no-explicit-name-required-matches',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a', 'TTv5', 'TT7.a', 'TT7.b', 'EN-301-549', 'EN-9.1.1.1', 'ACT' ],\n      actIds: [ '23a2a8' ],\n      all: [],\n      any: [ 'has-alt', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      }, 'presentational-role' ],\n      none: [ 'alt-space-value' ]\n    }, {\n      id: 'image-redundant-alt',\n      impact: 'minor',\n      selector: 'img',\n      tags: [ 'cat.text-alternatives', 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ {\n        options: {\n          parentSelector: 'button, [role=button], a[href], p, li, td, th'\n        },\n        id: 'duplicate-img-label'\n      } ]\n    }, {\n      id: 'input-button-name',\n      impact: 'critical',\n      selector: 'input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]',\n      matches: 'no-explicit-name-required-matches',\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag412', 'section508', 'section508.22.a', 'TTv5', 'TT5.c', 'EN-301-549', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ '97a4e1' ],\n      all: [],\n      any: [ 'non-empty-if-present', {\n        options: {\n          attribute: 'value'\n        },\n        id: 'non-empty-value'\n      }, 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      }, 'implicit-label', 'explicit-label', 'presentational-role' ],\n      none: []\n    }, {\n      id: 'input-image-alt',\n      impact: 'critical',\n      selector: 'input[type=\"image\"]',\n      matches: 'no-explicit-name-required-matches',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'wcag412', 'section508', 'section508.22.a', 'TTv5', 'TT7.a', 'EN-301-549', 'EN-9.1.1.1', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ '59796f' ],\n      all: [],\n      any: [ {\n        options: {\n          attribute: 'alt'\n        },\n        id: 'non-empty-alt'\n      }, 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      }, 'implicit-label', 'explicit-label' ],\n      none: []\n    }, {\n      id: 'label-content-name-mismatch',\n      impact: 'serious',\n      matches: 'label-content-name-mismatch-matches',\n      tags: [ 'cat.semantics', 'wcag21a', 'wcag253', 'EN-301-549', 'EN-9.2.5.3', 'experimental' ],\n      actIds: [ '2ee8b8' ],\n      all: [],\n      any: [ {\n        options: {\n          pixelThreshold: .1,\n          occurrenceThreshold: 3\n        },\n        id: 'label-content-name-mismatch'\n      } ],\n      none: []\n    }, {\n      id: 'label-title-only',\n      impact: 'serious',\n      selector: 'input, select, textarea',\n      matches: 'label-matches',\n      tags: [ 'cat.forms', 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'title-only' ]\n    }, {\n      id: 'label',\n      impact: 'critical',\n      selector: 'input, textarea',\n      matches: 'label-matches',\n      tags: [ 'cat.forms', 'wcag2a', 'wcag412', 'section508', 'section508.22.n', 'TTv5', 'TT5.c', 'EN-301-549', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ 'e086e5' ],\n      all: [],\n      any: [ 'implicit-label', 'explicit-label', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      }, {\n        options: {\n          attribute: 'placeholder'\n        },\n        id: 'non-empty-placeholder'\n      }, 'presentational-role' ],\n      none: [ 'hidden-explicit-label' ]\n    }, {\n      id: 'landmark-banner-is-top-level',\n      impact: 'moderate',\n      selector: 'header:not([role]), [role=banner]',\n      matches: 'landmark-has-body-context-matches',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'landmark-is-top-level' ],\n      none: []\n    }, {\n      id: 'landmark-complementary-is-top-level',\n      impact: 'moderate',\n      selector: 'aside:not([role]), [role=complementary]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'landmark-is-top-level' ],\n      none: []\n    }, {\n      id: 'landmark-contentinfo-is-top-level',\n      impact: 'moderate',\n      selector: 'footer:not([role]), [role=contentinfo]',\n      matches: 'landmark-has-body-context-matches',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'landmark-is-top-level' ],\n      none: []\n    }, {\n      id: 'landmark-main-is-top-level',\n      impact: 'moderate',\n      selector: 'main:not([role]), [role=main]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'landmark-is-top-level' ],\n      none: []\n    }, {\n      id: 'landmark-no-duplicate-banner',\n      impact: 'moderate',\n      selector: 'header:not([role]), [role=banner]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          selector: 'header:not([role]), [role=banner]',\n          role: 'banner'\n        },\n        id: 'page-no-duplicate-banner'\n      } ],\n      none: []\n    }, {\n      id: 'landmark-no-duplicate-contentinfo',\n      impact: 'moderate',\n      selector: 'footer:not([role]), [role=contentinfo]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          selector: 'footer:not([role]), [role=contentinfo]',\n          role: 'contentinfo'\n        },\n        id: 'page-no-duplicate-contentinfo'\n      } ],\n      none: []\n    }, {\n      id: 'landmark-no-duplicate-main',\n      impact: 'moderate',\n      selector: 'main:not([role]), [role=main]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          selector: 'main:not([role]), [role=\\'main\\']'\n        },\n        id: 'page-no-duplicate-main'\n      } ],\n      none: []\n    }, {\n      id: 'landmark-one-main',\n      impact: 'moderate',\n      selector: 'html',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [ {\n        options: {\n          selector: 'main:not([role]), [role=\\'main\\']',\n          passForModal: true\n        },\n        id: 'page-has-main'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'landmark-unique',\n      impact: 'moderate',\n      selector: '[role=banner], [role=complementary], [role=contentinfo], [role=main], [role=navigation], [role=region], [role=search], [role=form], form, footer, header, aside, main, nav, section',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      matches: 'landmark-unique-matches',\n      all: [],\n      any: [ 'landmark-is-unique' ],\n      none: []\n    }, {\n      id: 'link-in-text-block',\n      impact: 'serious',\n      selector: 'a[href], [role=link]',\n      matches: 'link-in-text-block-matches',\n      excludeHidden: false,\n      tags: [ 'cat.color', 'wcag2a', 'wcag141', 'TTv5', 'TT13.a', 'EN-301-549', 'EN-9.1.4.1' ],\n      all: [],\n      any: [ {\n        options: {\n          requiredContrastRatio: 3,\n          allowSameColor: true\n        },\n        id: 'link-in-text-block'\n      }, 'link-in-text-block-style' ],\n      none: []\n    }, {\n      id: 'link-name',\n      impact: 'serious',\n      selector: 'a[href]',\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag244', 'wcag412', 'section508', 'section508.22.a', 'TTv5', 'TT6.a', 'EN-301-549', 'EN-9.2.4.4', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ 'c487ae' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: [ 'focusable-no-name' ]\n    }, {\n      id: 'list',\n      impact: 'serious',\n      selector: 'ul, ol',\n      matches: 'no-role-matches',\n      tags: [ 'cat.structure', 'wcag2a', 'wcag131', 'EN-301-549', 'EN-9.1.3.1' ],\n      all: [],\n      any: [],\n      none: [ {\n        options: {\n          validRoles: [ 'listitem' ],\n          validNodeNames: [ 'li' ]\n        },\n        id: 'only-listitems'\n      } ]\n    }, {\n      id: 'listitem',\n      impact: 'serious',\n      selector: 'li',\n      matches: 'no-role-matches',\n      tags: [ 'cat.structure', 'wcag2a', 'wcag131', 'EN-301-549', 'EN-9.1.3.1' ],\n      all: [],\n      any: [ 'listitem' ],\n      none: []\n    }, {\n      id: 'marquee',\n      impact: 'serious',\n      selector: 'marquee',\n      excludeHidden: false,\n      tags: [ 'cat.parsing', 'wcag2a', 'wcag222', 'TTv5', 'TT2.b', 'EN-301-549', 'EN-9.2.2.2' ],\n      all: [],\n      any: [],\n      none: [ 'is-on-screen' ]\n    }, {\n      id: 'meta-refresh-no-exceptions',\n      impact: 'minor',\n      selector: 'meta[http-equiv=\"refresh\"][content]',\n      excludeHidden: false,\n      enabled: false,\n      tags: [ 'cat.time-and-media', 'wcag2aaa', 'wcag224', 'wcag325' ],\n      actIds: [ 'bisz58' ],\n      all: [],\n      any: [ {\n        options: {\n          minDelay: 72e3,\n          maxDelay: false\n        },\n        id: 'meta-refresh-no-exceptions'\n      } ],\n      none: []\n    }, {\n      id: 'meta-refresh',\n      impact: 'critical',\n      selector: 'meta[http-equiv=\"refresh\"][content]',\n      excludeHidden: false,\n      tags: [ 'cat.time-and-media', 'wcag2a', 'wcag221', 'TTv5', 'TT8.a', 'EN-301-549', 'EN-9.2.2.1' ],\n      actIds: [ 'bc659a', 'bisz58' ],\n      all: [],\n      any: [ {\n        options: {\n          minDelay: 0,\n          maxDelay: 72e3\n        },\n        id: 'meta-refresh'\n      } ],\n      none: []\n    }, {\n      id: 'meta-viewport-large',\n      impact: 'minor',\n      selector: 'meta[name=\"viewport\"]',\n      matches: 'is-initiator-matches',\n      excludeHidden: false,\n      tags: [ 'cat.sensory-and-visual-cues', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          scaleMinimum: 5,\n          lowerBound: 2\n        },\n        id: 'meta-viewport-large'\n      } ],\n      none: []\n    }, {\n      id: 'meta-viewport',\n      impact: 'critical',\n      selector: 'meta[name=\"viewport\"]',\n      matches: 'is-initiator-matches',\n      excludeHidden: false,\n      tags: [ 'cat.sensory-and-visual-cues', 'wcag2aa', 'wcag144', 'EN-301-549', 'EN-9.1.4.4', 'ACT' ],\n      actIds: [ 'b4f0c3' ],\n      all: [],\n      any: [ {\n        options: {\n          scaleMinimum: 2\n        },\n        id: 'meta-viewport'\n      } ],\n      none: []\n    }, {\n      id: 'nested-interactive',\n      impact: 'serious',\n      matches: 'nested-interactive-matches',\n      tags: [ 'cat.keyboard', 'wcag2a', 'wcag412', 'TTv5', 'TT6.a', 'EN-301-549', 'EN-9.4.1.2' ],\n      actIds: [ '307n5z' ],\n      all: [],\n      any: [ 'no-focusable-content' ],\n      none: []\n    }, {\n      id: 'no-autoplay-audio',\n      impact: 'moderate',\n      excludeHidden: false,\n      selector: 'audio[autoplay], video[autoplay]',\n      matches: 'no-autoplay-audio-matches',\n      reviewOnFail: true,\n      tags: [ 'cat.time-and-media', 'wcag2a', 'wcag142', 'TTv5', 'TT2.a', 'EN-301-549', 'EN-9.1.4.2', 'ACT' ],\n      actIds: [ '80f0bf' ],\n      preload: true,\n      all: [ {\n        options: {\n          allowedDuration: 3\n        },\n        id: 'no-autoplay-audio'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'object-alt',\n      impact: 'serious',\n      selector: 'object[data]',\n      matches: 'object-is-loaded-matches',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a', 'EN-301-549', 'EN-9.1.1.1' ],\n      actIds: [ '8fc3b6' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      }, 'presentational-role' ],\n      none: []\n    }, {\n      id: 'p-as-heading',\n      impact: 'serious',\n      selector: 'p',\n      matches: 'p-as-heading-matches',\n      tags: [ 'cat.semantics', 'wcag2a', 'wcag131', 'EN-301-549', 'EN-9.1.3.1', 'experimental' ],\n      all: [ {\n        options: {\n          margins: [ {\n            weight: 150,\n            italic: true\n          }, {\n            weight: 150,\n            size: 1.15\n          }, {\n            italic: true,\n            size: 1.15\n          }, {\n            size: 1.4\n          } ],\n          passLength: 1,\n          failLength: .5\n        },\n        id: 'p-as-heading'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'page-has-heading-one',\n      impact: 'moderate',\n      selector: 'html',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [ {\n        options: {\n          selector: 'h1:not([role], [aria-level]), :is(h1, h2, h3, h4, h5, h6):not([role])[aria-level=1], [role=heading][aria-level=1]',\n          passForModal: true\n        },\n        id: 'page-has-heading-one'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'presentation-role-conflict',\n      impact: 'minor',\n      selector: 'img[alt=\\'\\'], [role=\"none\"], [role=\"presentation\"]',\n      matches: 'has-implicit-chromium-role-matches',\n      tags: [ 'cat.aria', 'best-practice', 'ACT' ],\n      actIds: [ '46ca7f' ],\n      all: [],\n      any: [],\n      none: [ 'is-element-focusable', 'has-global-aria-attribute' ]\n    }, {\n      id: 'region',\n      impact: 'moderate',\n      selector: 'body *',\n      tags: [ 'cat.keyboard', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          regionMatcher: 'dialog, [role=dialog], [role=alertdialog], svg'\n        },\n        id: 'region'\n      } ],\n      none: []\n    }, {\n      id: 'role-img-alt',\n      impact: 'serious',\n      selector: '[role=\\'img\\']:not(img, area, input, object)',\n      matches: 'html-namespace-matches',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a', 'TTv5', 'TT7.a', 'EN-301-549', 'EN-9.1.1.1', 'ACT' ],\n      actIds: [ '23a2a8' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'scope-attr-valid',\n      impact: 'moderate',\n      selector: 'td[scope], th[scope]',\n      tags: [ 'cat.tables', 'best-practice' ],\n      all: [ 'html5-scope', {\n        options: {\n          values: [ 'row', 'col', 'rowgroup', 'colgroup' ]\n        },\n        id: 'scope-value'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'scrollable-region-focusable',\n      impact: 'serious',\n      selector: '*:not(select,textarea)',\n      matches: 'scrollable-region-focusable-matches',\n      tags: [ 'cat.keyboard', 'wcag2a', 'wcag211', 'wcag213', 'TTv5', 'TT4.a', 'EN-301-549', 'EN-9.2.1.1', 'EN-9.2.1.3' ],\n      actIds: [ '0ssw9k' ],\n      all: [],\n      any: [ 'focusable-content', 'focusable-element' ],\n      none: []\n    }, {\n      id: 'select-name',\n      impact: 'critical',\n      selector: 'select',\n      tags: [ 'cat.forms', 'wcag2a', 'wcag412', 'section508', 'section508.22.n', 'TTv5', 'TT5.c', 'EN-301-549', 'EN-9.4.1.2', 'ACT' ],\n      actIds: [ 'e086e5' ],\n      all: [],\n      any: [ 'implicit-label', 'explicit-label', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      }, 'presentational-role' ],\n      none: [ 'hidden-explicit-label' ]\n    }, {\n      id: 'server-side-image-map',\n      impact: 'minor',\n      selector: 'img[ismap]',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag211', 'section508', 'section508.22.f', 'TTv5', 'TT4.a', 'EN-301-549', 'EN-9.2.1.1' ],\n      all: [],\n      any: [],\n      none: [ 'exists' ]\n    }, {\n      id: 'skip-link',\n      impact: 'moderate',\n      selector: 'a[href^=\"#\"], a[href^=\"/#\"]',\n      matches: 'skip-link-matches',\n      tags: [ 'cat.keyboard', 'best-practice' ],\n      all: [],\n      any: [ 'skip-link' ],\n      none: []\n    }, {\n      id: 'summary-name',\n      impact: 'serious',\n      selector: 'summary',\n      matches: 'summary-interactive-matches',\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag412', 'section508', 'section508.22.a', 'TTv5', 'TT6.a', 'EN-301-549', 'EN-9.4.1.2' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'svg-img-alt',\n      impact: 'serious',\n      selector: '[role=\"img\"], [role=\"graphics-symbol\"], svg[role=\"graphics-document\"]',\n      matches: 'svg-namespace-matches',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a', 'TTv5', 'TT7.a', 'EN-301-549', 'EN-9.1.1.1', 'ACT' ],\n      actIds: [ '7d6734' ],\n      all: [],\n      any: [ 'svg-non-empty-title', 'aria-label', 'aria-labelledby', {\n        options: {\n          attribute: 'title'\n        },\n        id: 'non-empty-title'\n      } ],\n      none: []\n    }, {\n      id: 'tabindex',\n      impact: 'serious',\n      selector: '[tabindex]',\n      tags: [ 'cat.keyboard', 'best-practice' ],\n      all: [],\n      any: [ 'tabindex' ],\n      none: []\n    }, {\n      id: 'table-duplicate-name',\n      impact: 'minor',\n      selector: 'table',\n      tags: [ 'cat.tables', 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'same-caption-summary' ]\n    }, {\n      id: 'table-fake-caption',\n      impact: 'serious',\n      selector: 'table',\n      matches: 'data-table-matches',\n      tags: [ 'cat.tables', 'experimental', 'wcag2a', 'wcag131', 'section508', 'section508.22.g', 'EN-301-549', 'EN-9.1.3.1' ],\n      all: [ 'caption-faked' ],\n      any: [],\n      none: []\n    }, {\n      id: 'target-size',\n      impact: 'serious',\n      selector: '*',\n      enabled: false,\n      matches: 'widget-not-inline-matches',\n      tags: [ 'cat.sensory-and-visual-cues', 'wcag22aa', 'wcag258' ],\n      all: [],\n      any: [ {\n        options: {\n          minSize: 24\n        },\n        id: 'target-size'\n      }, {\n        options: {\n          minOffset: 24\n        },\n        id: 'target-offset'\n      } ],\n      none: []\n    }, {\n      id: 'td-has-header',\n      impact: 'critical',\n      selector: 'table',\n      matches: 'data-table-large-matches',\n      tags: [ 'cat.tables', 'experimental', 'wcag2a', 'wcag131', 'section508', 'section508.22.g', 'TTv5', 'TT14.b', 'EN-301-549', 'EN-9.1.3.1' ],\n      all: [ 'td-has-header' ],\n      any: [],\n      none: []\n    }, {\n      id: 'td-headers-attr',\n      impact: 'serious',\n      selector: 'table',\n      matches: 'table-or-grid-role-matches',\n      tags: [ 'cat.tables', 'wcag2a', 'wcag131', 'section508', 'section508.22.g', 'TTv5', 'TT14.b', 'EN-301-549', 'EN-9.1.3.1' ],\n      actIds: [ 'a25f45' ],\n      all: [ 'td-headers-attr' ],\n      any: [],\n      none: []\n    }, {\n      id: 'th-has-data-cells',\n      impact: 'serious',\n      selector: 'table',\n      matches: 'data-table-matches',\n      tags: [ 'cat.tables', 'wcag2a', 'wcag131', 'section508', 'section508.22.g', 'TTv5', 'TT14.b', 'EN-301-549', 'EN-9.1.3.1' ],\n      actIds: [ 'd0f69e' ],\n      all: [ 'th-has-data-cells' ],\n      any: [],\n      none: []\n    }, {\n      id: 'valid-lang',\n      impact: 'serious',\n      selector: '[lang]:not(html), [xml\\\\:lang]:not(html)',\n      tags: [ 'cat.language', 'wcag2aa', 'wcag312', 'TTv5', 'TT11.b', 'EN-301-549', 'EN-9.3.1.2', 'ACT' ],\n      actIds: [ 'de46e4' ],\n      all: [],\n      any: [],\n      none: [ {\n        options: {\n          attributes: [ 'lang', 'xml:lang' ]\n        },\n        id: 'valid-lang'\n      } ]\n    }, {\n      id: 'video-caption',\n      impact: 'critical',\n      selector: 'video',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag122', 'section508', 'section508.22.a', 'TTv5', 'TT17.a', 'EN-301-549', 'EN-9.1.2.2' ],\n      actIds: [ 'eac66b' ],\n      all: [],\n      any: [],\n      none: [ 'caption' ]\n    } ],\n    checks: [ {\n      id: 'abstractrole',\n      evaluate: 'abstractrole-evaluate'\n    }, {\n      id: 'aria-allowed-attr',\n      evaluate: 'aria-allowed-attr-evaluate',\n      options: {\n        validTreeRowAttrs: [ 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-level' ]\n      }\n    }, {\n      id: 'aria-allowed-role',\n      evaluate: 'aria-allowed-role-evaluate',\n      options: {\n        allowImplicit: true,\n        ignoredTags: []\n      }\n    }, {\n      id: 'aria-busy',\n      evaluate: 'aria-busy-evaluate',\n      deprecated: true\n    }, {\n      id: 'aria-conditional-attr',\n      evaluate: 'aria-conditional-attr-evaluate',\n      options: {\n        invalidTableRowAttrs: [ 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-level' ]\n      }\n    }, {\n      id: 'aria-errormessage',\n      evaluate: 'aria-errormessage-evaluate'\n    }, {\n      id: 'aria-hidden-body',\n      evaluate: 'aria-hidden-body-evaluate'\n    }, {\n      id: 'aria-level',\n      evaluate: 'aria-level-evaluate'\n    }, {\n      id: 'aria-prohibited-attr',\n      evaluate: 'aria-prohibited-attr-evaluate',\n      options: {\n        elementsAllowedAriaLabel: [ 'applet', 'input' ]\n      }\n    }, {\n      id: 'aria-required-attr',\n      evaluate: 'aria-required-attr-evaluate'\n    }, {\n      id: 'aria-required-children',\n      evaluate: 'aria-required-children-evaluate',\n      options: {\n        reviewEmpty: [ 'doc-bibliography', 'doc-endnotes', 'grid', 'list', 'listbox', 'menu', 'menubar', 'table', 'tablist', 'tree', 'treegrid', 'rowgroup' ]\n      }\n    }, {\n      id: 'aria-required-parent',\n      evaluate: 'aria-required-parent-evaluate',\n      options: {\n        ownGroupRoles: [ 'listitem', 'treeitem' ]\n      }\n    }, {\n      id: 'aria-roledescription',\n      evaluate: 'aria-roledescription-evaluate',\n      options: {\n        supportedRoles: [ 'button', 'img', 'checkbox', 'radio', 'combobox', 'menuitemcheckbox', 'menuitemradio' ]\n      }\n    }, {\n      id: 'aria-unsupported-attr',\n      evaluate: 'aria-unsupported-attr-evaluate'\n    }, {\n      id: 'aria-valid-attr-value',\n      evaluate: 'aria-valid-attr-value-evaluate',\n      options: []\n    }, {\n      id: 'aria-valid-attr',\n      evaluate: 'aria-valid-attr-evaluate',\n      options: []\n    }, {\n      id: 'braille-label-equivalent',\n      evaluate: 'braille-label-equivalent-evaluate'\n    }, {\n      id: 'braille-roledescription-equivalent',\n      evaluate: 'braille-roledescription-equivalent-evaluate'\n    }, {\n      id: 'deprecatedrole',\n      evaluate: 'deprecatedrole-evaluate'\n    }, {\n      id: 'fallbackrole',\n      evaluate: 'fallbackrole-evaluate'\n    }, {\n      id: 'has-global-aria-attribute',\n      evaluate: 'has-global-aria-attribute-evaluate'\n    }, {\n      id: 'has-widget-role',\n      evaluate: 'has-widget-role-evaluate',\n      options: []\n    }, {\n      id: 'invalidrole',\n      evaluate: 'invalidrole-evaluate'\n    }, {\n      id: 'is-element-focusable',\n      evaluate: 'is-element-focusable-evaluate'\n    }, {\n      id: 'no-implicit-explicit-label',\n      evaluate: 'no-implicit-explicit-label-evaluate'\n    }, {\n      id: 'unsupportedrole',\n      evaluate: 'unsupportedrole-evaluate'\n    }, {\n      id: 'valid-scrollable-semantics',\n      evaluate: 'valid-scrollable-semantics-evaluate',\n      options: {\n        roles: [ 'tooltip' ]\n      }\n    }, {\n      id: 'color-contrast-enhanced',\n      evaluate: 'color-contrast-evaluate',\n      options: {\n        ignoreUnicode: true,\n        ignoreLength: false,\n        ignorePseudo: false,\n        boldValue: 700,\n        boldTextPt: 14,\n        largeTextPt: 18,\n        contrastRatio: {\n          normal: {\n            expected: 7,\n            minThreshold: 4.5\n          },\n          large: {\n            expected: 4.5,\n            minThreshold: 3\n          }\n        },\n        pseudoSizeThreshold: .25,\n        shadowOutlineEmMax: .1,\n        textStrokeEmMin: .03\n      }\n    }, {\n      id: 'color-contrast',\n      evaluate: 'color-contrast-evaluate',\n      options: {\n        ignoreUnicode: true,\n        ignoreLength: false,\n        ignorePseudo: false,\n        boldValue: 700,\n        boldTextPt: 14,\n        largeTextPt: 18,\n        contrastRatio: {\n          normal: {\n            expected: 4.5\n          },\n          large: {\n            expected: 3\n          }\n        },\n        pseudoSizeThreshold: .25,\n        shadowOutlineEmMax: .2,\n        textStrokeEmMin: .03\n      }\n    }, {\n      id: 'link-in-text-block-style',\n      evaluate: 'link-in-text-block-style-evaluate'\n    }, {\n      id: 'link-in-text-block',\n      evaluate: 'link-in-text-block-evaluate',\n      options: {\n        requiredContrastRatio: 3,\n        allowSameColor: true\n      }\n    }, {\n      id: 'autocomplete-appropriate',\n      evaluate: 'autocomplete-appropriate-evaluate',\n      deprecated: true\n    }, {\n      id: 'autocomplete-valid',\n      evaluate: 'autocomplete-valid-evaluate',\n      options: {\n        stateTerms: [ 'none', 'false', 'true', 'disabled', 'enabled', 'undefined', 'null' ],\n        ignoredValues: [ 'text', 'pronouns', 'gender', 'message', 'content' ]\n      }\n    }, {\n      id: 'accesskeys',\n      evaluate: 'accesskeys-evaluate',\n      after: 'accesskeys-after'\n    }, {\n      id: 'focusable-content',\n      evaluate: 'focusable-content-evaluate'\n    }, {\n      id: 'focusable-disabled',\n      evaluate: 'focusable-disabled-evaluate'\n    }, {\n      id: 'focusable-element',\n      evaluate: 'focusable-element-evaluate'\n    }, {\n      id: 'focusable-modal-open',\n      evaluate: 'focusable-modal-open-evaluate'\n    }, {\n      id: 'focusable-no-name',\n      evaluate: 'focusable-no-name-evaluate'\n    }, {\n      id: 'focusable-not-tabbable',\n      evaluate: 'focusable-not-tabbable-evaluate'\n    }, {\n      id: 'frame-focusable-content',\n      evaluate: 'frame-focusable-content-evaluate'\n    }, {\n      id: 'landmark-is-top-level',\n      evaluate: 'landmark-is-top-level-evaluate'\n    }, {\n      id: 'no-focusable-content',\n      evaluate: 'no-focusable-content-evaluate'\n    }, {\n      id: 'page-has-heading-one',\n      evaluate: 'has-descendant-evaluate',\n      after: 'has-descendant-after',\n      options: {\n        selector: 'h1:not([role], [aria-level]), :is(h1, h2, h3, h4, h5, h6):not([role])[aria-level=1], [role=heading][aria-level=1]',\n        passForModal: true\n      }\n    }, {\n      id: 'page-has-main',\n      evaluate: 'has-descendant-evaluate',\n      after: 'has-descendant-after',\n      options: {\n        selector: 'main:not([role]), [role=\\'main\\']',\n        passForModal: true\n      }\n    }, {\n      id: 'page-no-duplicate-banner',\n      evaluate: 'page-no-duplicate-evaluate',\n      after: 'page-no-duplicate-after',\n      options: {\n        selector: 'header:not([role]), [role=banner]',\n        role: 'banner'\n      }\n    }, {\n      id: 'page-no-duplicate-contentinfo',\n      evaluate: 'page-no-duplicate-evaluate',\n      after: 'page-no-duplicate-after',\n      options: {\n        selector: 'footer:not([role]), [role=contentinfo]',\n        role: 'contentinfo'\n      }\n    }, {\n      id: 'page-no-duplicate-main',\n      evaluate: 'page-no-duplicate-evaluate',\n      after: 'page-no-duplicate-after',\n      options: {\n        selector: 'main:not([role]), [role=\\'main\\']'\n      }\n    }, {\n      id: 'tabindex',\n      evaluate: 'tabindex-evaluate'\n    }, {\n      id: 'alt-space-value',\n      evaluate: 'alt-space-value-evaluate'\n    }, {\n      id: 'duplicate-img-label',\n      evaluate: 'duplicate-img-label-evaluate',\n      options: {\n        parentSelector: 'button, [role=button], a[href], p, li, td, th'\n      }\n    }, {\n      id: 'explicit-label',\n      evaluate: 'explicit-evaluate'\n    }, {\n      id: 'help-same-as-label',\n      evaluate: 'help-same-as-label-evaluate'\n    }, {\n      id: 'hidden-explicit-label',\n      evaluate: 'hidden-explicit-label-evaluate'\n    }, {\n      id: 'implicit-label',\n      evaluate: 'implicit-evaluate'\n    }, {\n      id: 'label-content-name-mismatch',\n      evaluate: 'label-content-name-mismatch-evaluate',\n      options: {\n        pixelThreshold: .1,\n        occurrenceThreshold: 3\n      }\n    }, {\n      id: 'multiple-label',\n      evaluate: 'multiple-label-evaluate'\n    }, {\n      id: 'title-only',\n      evaluate: 'title-only-evaluate'\n    }, {\n      id: 'landmark-is-unique',\n      evaluate: 'landmark-is-unique-evaluate',\n      after: 'landmark-is-unique-after'\n    }, {\n      id: 'has-lang',\n      evaluate: 'has-lang-evaluate',\n      options: {\n        attributes: [ 'lang', 'xml:lang' ]\n      }\n    }, {\n      id: 'valid-lang',\n      evaluate: 'valid-lang-evaluate',\n      options: {\n        attributes: [ 'lang', 'xml:lang' ]\n      }\n    }, {\n      id: 'xml-lang-mismatch',\n      evaluate: 'xml-lang-mismatch-evaluate'\n    }, {\n      id: 'dlitem',\n      evaluate: 'dlitem-evaluate'\n    }, {\n      id: 'listitem',\n      evaluate: 'listitem-evaluate'\n    }, {\n      id: 'only-dlitems',\n      evaluate: 'invalid-children-evaluate',\n      options: {\n        validRoles: [ 'definition', 'term', 'listitem' ],\n        validNodeNames: [ 'dt', 'dd' ],\n        divGroups: true\n      }\n    }, {\n      id: 'only-listitems',\n      evaluate: 'invalid-children-evaluate',\n      options: {\n        validRoles: [ 'listitem' ],\n        validNodeNames: [ 'li' ]\n      }\n    }, {\n      id: 'structured-dlitems',\n      evaluate: 'structured-dlitems-evaluate'\n    }, {\n      id: 'caption',\n      evaluate: 'caption-evaluate'\n    }, {\n      id: 'frame-tested',\n      evaluate: 'frame-tested-evaluate',\n      after: 'frame-tested-after',\n      options: {\n        isViolation: false\n      }\n    }, {\n      id: 'no-autoplay-audio',\n      evaluate: 'no-autoplay-audio-evaluate',\n      options: {\n        allowedDuration: 3\n      }\n    }, {\n      id: 'css-orientation-lock',\n      evaluate: 'css-orientation-lock-evaluate',\n      options: {\n        degreeThreshold: 2\n      }\n    }, {\n      id: 'meta-viewport-large',\n      evaluate: 'meta-viewport-scale-evaluate',\n      options: {\n        scaleMinimum: 5,\n        lowerBound: 2\n      }\n    }, {\n      id: 'meta-viewport',\n      evaluate: 'meta-viewport-scale-evaluate',\n      options: {\n        scaleMinimum: 2\n      }\n    }, {\n      id: 'target-offset',\n      evaluate: 'target-offset-evaluate',\n      options: {\n        minOffset: 24\n      }\n    }, {\n      id: 'target-size',\n      evaluate: 'target-size-evaluate',\n      options: {\n        minSize: 24\n      }\n    }, {\n      id: 'header-present',\n      evaluate: 'has-descendant-evaluate',\n      after: 'has-descendant-after',\n      options: {\n        selector: ':is(h1, h2, h3, h4, h5, h6):not([role]), [role=heading]'\n      }\n    }, {\n      id: 'heading-order',\n      evaluate: 'heading-order-evaluate',\n      after: 'heading-order-after'\n    }, {\n      id: 'identical-links-same-purpose',\n      evaluate: 'identical-links-same-purpose-evaluate',\n      after: 'identical-links-same-purpose-after'\n    }, {\n      id: 'internal-link-present',\n      evaluate: 'internal-link-present-evaluate'\n    }, {\n      id: 'landmark',\n      evaluate: 'has-descendant-evaluate',\n      options: {\n        selector: 'main, [role=main]'\n      }\n    }, {\n      id: 'meta-refresh-no-exceptions',\n      evaluate: 'meta-refresh-evaluate',\n      options: {\n        minDelay: 72e3,\n        maxDelay: false\n      }\n    }, {\n      id: 'meta-refresh',\n      evaluate: 'meta-refresh-evaluate',\n      options: {\n        minDelay: 0,\n        maxDelay: 72e3\n      }\n    }, {\n      id: 'p-as-heading',\n      evaluate: 'p-as-heading-evaluate',\n      options: {\n        margins: [ {\n          weight: 150,\n          italic: true\n        }, {\n          weight: 150,\n          size: 1.15\n        }, {\n          italic: true,\n          size: 1.15\n        }, {\n          size: 1.4\n        } ],\n        passLength: 1,\n        failLength: .5\n      }\n    }, {\n      id: 'region',\n      evaluate: 'region-evaluate',\n      after: 'region-after',\n      options: {\n        regionMatcher: 'dialog, [role=dialog], [role=alertdialog], svg'\n      }\n    }, {\n      id: 'skip-link',\n      evaluate: 'skip-link-evaluate'\n    }, {\n      id: 'unique-frame-title',\n      evaluate: 'unique-frame-title-evaluate',\n      after: 'unique-frame-title-after'\n    }, {\n      id: 'duplicate-id-active',\n      evaluate: 'duplicate-id-evaluate',\n      after: 'duplicate-id-after'\n    }, {\n      id: 'duplicate-id-aria',\n      evaluate: 'duplicate-id-evaluate',\n      after: 'duplicate-id-after'\n    }, {\n      id: 'duplicate-id',\n      evaluate: 'duplicate-id-evaluate',\n      after: 'duplicate-id-after'\n    }, {\n      id: 'aria-label',\n      evaluate: 'aria-label-evaluate'\n    }, {\n      id: 'aria-labelledby',\n      evaluate: 'aria-labelledby-evaluate'\n    }, {\n      id: 'avoid-inline-spacing',\n      evaluate: 'avoid-inline-spacing-evaluate',\n      options: {\n        cssProperties: [ 'line-height', 'letter-spacing', 'word-spacing' ]\n      }\n    }, {\n      id: 'button-has-visible-text',\n      evaluate: 'has-text-content-evaluate'\n    }, {\n      id: 'doc-has-title',\n      evaluate: 'doc-has-title-evaluate'\n    }, {\n      id: 'exists',\n      evaluate: 'exists-evaluate'\n    }, {\n      id: 'has-alt',\n      evaluate: 'has-alt-evaluate'\n    }, {\n      id: 'has-visible-text',\n      evaluate: 'has-text-content-evaluate'\n    }, {\n      id: 'important-letter-spacing',\n      evaluate: 'inline-style-property-evaluate',\n      options: {\n        cssProperty: 'letter-spacing',\n        minValue: .12\n      }\n    }, {\n      id: 'important-line-height',\n      evaluate: 'inline-style-property-evaluate',\n      options: {\n        multiLineOnly: true,\n        cssProperty: 'line-height',\n        minValue: 1.5,\n        normalValue: 1\n      }\n    }, {\n      id: 'important-word-spacing',\n      evaluate: 'inline-style-property-evaluate',\n      options: {\n        cssProperty: 'word-spacing',\n        minValue: .16\n      }\n    }, {\n      id: 'is-on-screen',\n      evaluate: 'is-on-screen-evaluate'\n    }, {\n      id: 'non-empty-alt',\n      evaluate: 'attr-non-space-content-evaluate',\n      options: {\n        attribute: 'alt'\n      }\n    }, {\n      id: 'non-empty-if-present',\n      evaluate: 'non-empty-if-present-evaluate'\n    }, {\n      id: 'non-empty-placeholder',\n      evaluate: 'attr-non-space-content-evaluate',\n      options: {\n        attribute: 'placeholder'\n      }\n    }, {\n      id: 'non-empty-title',\n      evaluate: 'attr-non-space-content-evaluate',\n      options: {\n        attribute: 'title'\n      }\n    }, {\n      id: 'non-empty-value',\n      evaluate: 'attr-non-space-content-evaluate',\n      options: {\n        attribute: 'value'\n      }\n    }, {\n      id: 'presentational-role',\n      evaluate: 'presentational-role-evaluate'\n    }, {\n      id: 'role-none',\n      evaluate: 'matches-definition-evaluate',\n      deprecated: true,\n      options: {\n        matcher: {\n          attributes: {\n            role: 'none'\n          }\n        }\n      }\n    }, {\n      id: 'role-presentation',\n      evaluate: 'matches-definition-evaluate',\n      deprecated: true,\n      options: {\n        matcher: {\n          attributes: {\n            role: 'presentation'\n          }\n        }\n      }\n    }, {\n      id: 'svg-non-empty-title',\n      evaluate: 'svg-non-empty-title-evaluate'\n    }, {\n      id: 'caption-faked',\n      evaluate: 'caption-faked-evaluate'\n    }, {\n      id: 'html5-scope',\n      evaluate: 'html5-scope-evaluate'\n    }, {\n      id: 'same-caption-summary',\n      evaluate: 'same-caption-summary-evaluate'\n    }, {\n      id: 'scope-value',\n      evaluate: 'scope-value-evaluate',\n      options: {\n        values: [ 'row', 'col', 'rowgroup', 'colgroup' ]\n      }\n    }, {\n      id: 'td-has-header',\n      evaluate: 'td-has-header-evaluate'\n    }, {\n      id: 'td-headers-attr',\n      evaluate: 'td-headers-attr-evaluate'\n    }, {\n      id: 'th-has-data-cells',\n      evaluate: 'th-has-data-cells-evaluate'\n    }, {\n      id: 'hidden-content',\n      evaluate: 'hidden-content-evaluate'\n    } ]\n  });\n})(typeof window === 'object' ? window : this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9heGUtY29yZS9heGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQTBDO0FBQ2hELElBQUksaUNBQW1CLEVBQUUsbUNBQUU7QUFDM0I7QUFDQSxLQUFLO0FBQUEsa0dBQUM7QUFDTjtBQUNBLE9BQU8sTUFBNkIsR0FBRyxDQUFXO0FBQ2xELCtGQUErRjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRjtBQUMxRixNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0JBQXNCO0FBQzVDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsZ0JBQWdCLGtFQUFrRTtBQUNsRjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsOEJBQThCLCtCQUErQjtBQUM3RDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVHQUF1RztBQUN2RztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsWUFBWTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLG9DQUFvQztBQUN2SDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsRUFBRTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQkFBMEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5QkFBeUI7QUFDL0M7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixZQUFZO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFlBQVk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSw0QkFBNEIsWUFBWTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTyx5Q0FBeUMsT0FBTyxtQkFBbUIsT0FBTyxXQUFXLE9BQU87QUFDdkgsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxjQUFjO0FBQ2QsZ0NBQWdDO0FBQ2hDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxnQ0FBZ0M7QUFDaEMsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVCQUF1QjtBQUNsRDtBQUNBO0FBQ0EsZ0RBQWdELHVCQUF1QjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1QkFBdUI7QUFDbEQ7QUFDQTtBQUNBLGdEQUFnRCx1QkFBdUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUJBQXVCO0FBQ2xEO0FBQ0E7QUFDQSxnREFBZ0QsdUJBQXVCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVCQUF1QjtBQUNsRDtBQUNBO0FBQ0EsZ0RBQWdELHVCQUF1QjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1QkFBdUI7QUFDbEQ7QUFDQTtBQUNBLG9EQUFvRCx5QkFBeUI7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUJBQXVCO0FBQ2xEO0FBQ0E7QUFDQSxvREFBb0QseUJBQXlCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVCQUF1QjtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDLG9CQUFvQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1QkFBdUI7QUFDbEQ7QUFDQTtBQUNBLDBDQUEwQyxvQkFBb0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0dBQXNHLEtBQTBDLEdBQUcsb0NBQU8sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBLGtHQUFDLEdBQUcsQ0FBOEI7QUFDbk0sT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELE9BQU8sc0JBQXNCLGVBQWUsT0FBTztBQUMvRztBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixTQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHdCQUF3QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw2Q0FBNkM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0EsOEJBQThCLFlBQVk7QUFDMUM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2Y7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEM7QUFDQSxzQkFBc0IsR0FBRztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixxQkFBcUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsaUJBQWlCO0FBQzNDO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixpQkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YsNEJBQTRCO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRiw0QkFBNEI7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxnQkFBZ0I7QUFDbEU7QUFDQTtBQUNBLDZDQUE2QyxnQkFBZ0I7QUFDN0Q7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixtRUFBbUUsZ0JBQWdCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixTQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQ0FBaUM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQ0FBaUM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsUUFBUTtBQUNSLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0ZBQStGO0FBQy9GLGlHQUFpRztBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQ0FBcUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsRUFBRSxZQUFZLE1BQU0sRUFBRTtBQUMvQyw0QkFBNEIsRUFBRSxhQUFhLEVBQUU7QUFDN0MsdUJBQXVCLEVBQUUsYUFBYSxFQUFFO0FBQ3hDLG9CQUFvQixFQUFFLGFBQWEsRUFBRTtBQUNyQyxxSEFBcUgsSUFBSSxJQUFJO0FBQzdILHVCQUF1QixFQUFFLHFDQUFxQyxFQUFFO0FBQ2hFO0FBQ0EsNEJBQTRCLEVBQUUseUJBQXlCLEVBQUU7QUFDekQsd0JBQXdCLEVBQUUsU0FBUyxFQUFFLHFEQUFxRCxFQUFFO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4Qix1QkFBdUI7QUFDdkIsV0FBVywyREFBMkQ7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxTQUFTLElBQTBDO0FBQzdELFVBQVUsbUNBQU87QUFDakI7QUFDQSxXQUFXO0FBQUEsa0dBQUM7QUFDWixVQUFVLEtBQUssRUFFTjtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCLDZCQUE2QjtBQUM3QjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0SkFBNEo7QUFDNUo7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYLDBDQUEwQyxnQ0FBZ0MsZ0JBQWdCLEtBQUssc0JBQXNCLDJCQUEyQixnQkFBZ0I7QUFDaEssV0FBVztBQUNYO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1DQUFtQyxtQkFBbUIsdUVBQXVFLGlDQUFpQyw4Q0FBOEM7QUFDbk8sV0FBVztBQUNYLHVCQUF1QjtBQUN2QixXQUFXLFFBQVEsV0FBVyxtRkFBbUYsR0FBRyxLQUFLLFVBQVU7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5S0FBeUs7QUFDeks7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPLElBQUk7QUFDWDtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFtQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0tBQXNLLElBQUk7QUFDMUs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0JBQWtCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsRUFBRTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFFBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFNBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsbUJBQW1CO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsY0FBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxhQUFhO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCwyQkFBMkI7QUFDekY7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0EseUZBQXlGO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGlDQUFpQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsaUNBQWlDO0FBQzlEO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIscUNBQXFDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxvQkFBb0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQ0FBaUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUlBQWlJO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUJBQXlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1CQUFtQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixvQkFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsY0FBYztBQUN0QztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDBCQUEwQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxpQkFBaUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGdCQUFnQjtBQUNuRSxnQ0FBZ0MsNEJBQTRCO0FBQzVEO0FBQ0E7QUFDQSxrQ0FBa0Msd0JBQXdCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw2QkFBNkI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsR0FBRztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3REFBd0Q7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLHFDQUFxQyxZQUFZO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0Esb0NBQW9DLFlBQVk7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLGFBQWEsRUFBRTtBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxZQUFZO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx5QkFBeUIsc0JBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixpQ0FBaUM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDBCQUEwQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZUFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixlQUFlO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixZQUFZO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlDQUFpQztBQUNwRTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZGQUE2RjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHNCQUFzQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDZCQUE2QjtBQUMxRTtBQUNBO0FBQ0Esb0RBQW9ELHlCQUF5QjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaUNBQWlDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkdBQTZHLGVBQWU7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isd0JBQXdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLGlDQUFpQyxpQ0FBaUM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsaUNBQWlDLGlDQUFpQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsZ0NBQWdDLG1DQUFtQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxJQUFJLEVBQUUsSUFBSTtBQUMxQyxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxFQUFFO0FBQ3BDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSwrRkFBK0Y7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVEQUF1RCxxQkFBcUI7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNkJBQTZCLDRDQUE0QztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RkFBOEY7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGVBQWU7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMkJBQTJCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLGlGQUFpRixlQUFlO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUdBQXFHLGVBQWU7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGLGVBQWU7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsNERBQTRELDZCQUE2QjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLElBQUk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwR0FBMEc7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix5QkFBeUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsc0JBQXNCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNENBQTRDLEdBQUc7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDJCQUEyQjtBQUNwRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDhCQUE4QjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxLQUFLLEVBQUUsRUFNVixDQUFDO0FBQ1o7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsWUFBWTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsNEJBQTRCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsY0FBYztBQUN4Riw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDRCQUE0QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUNBQW1DO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHFCQUFxQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxVQUFVO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix5QkFBeUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUNBQW1DO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiwrQkFBK0Isd0JBQXdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHFCQUFxQixTQUFTLHFCQUFxQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MscUNBQXFDO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUJBQXVCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEI7QUFDOUIsV0FBVyxJQUFJO0FBQ2Y7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxnRkFBZ0Y7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELE9BQU87QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw2QkFBNkI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFVBQVU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUNBQW1DO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix5QkFBeUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUdBQWlHO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sSUFBSTtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsc0JBQXNCO0FBQ2pGLCtFQUErRSx3QkFBd0I7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwyQkFBMkI7QUFDMUQsaUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLDBCQUEwQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHNCQUFzQjtBQUNuRDtBQUNBLCtEQUErRCx3QkFBd0I7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHVCQUF1QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNkJBQTZCO0FBQzFEO0FBQ0EsZ0NBQWdDLDhCQUE4QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3QkFBd0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsbUNBQW1DO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsK0JBQStCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLG1DQUFtQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCwwQkFBMEIsdUJBQXVCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUNBQW1DO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQ0FBbUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EseUJBQXlCLHdCQUF3QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQSxtREFBbUQsMkJBQTJCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUNBQW1DO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGtDQUFrQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG1DQUFtQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUNBQW1DO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sSUFBSTtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLG9GQUFvRiw2QkFBNkI7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix3QkFBd0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxxQkFBcUI7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFVBQVU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRjtBQUMxRjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG1DQUFtQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFVBQVU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMkJBQTJCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxVQUFVO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLEVBQUUsS0FBSyxFQUFFO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHFCQUFxQjtBQUNyQixnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsd0JBQXdCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHVCQUF1QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0NBQWdDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9CQUFvQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsb0JBQW9CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixvQkFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLG1DQUFtQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxpR0FBaUc7QUFDakc7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGNBQWM7QUFDZDtBQUNBO0FBQ0EsNERBQTRELElBQUk7QUFDaEUsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxPQUFPO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCx3QkFBd0I7QUFDeEI7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLGVBQWU7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLGdCQUFnQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE9BQU87QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQ0FBbUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBLDJDQUEyQyxzQkFBc0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLFlBQVk7QUFDOUUsaUVBQWlFLFlBQVk7QUFDN0U7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELFlBQVk7QUFDdEUsMERBQTBELFlBQVk7QUFDdEUsYUFBYTtBQUNiLDRHQUE0RyxZQUFZO0FBQ3hIO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsYUFBYTtBQUNsRCxvQ0FBb0MsYUFBYTtBQUNqRCxhQUFhO0FBQ2I7QUFDQSxxQ0FBcUMsYUFBYTtBQUNsRCxvQ0FBb0MsYUFBYTtBQUNqRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELGdCQUFnQjtBQUM5RSxzRkFBc0YsZUFBZSxJQUFJLGtCQUFrQjtBQUMzSCx1RkFBdUYsZUFBZSxJQUFJLGtCQUFrQjtBQUM1SDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsWUFBWTtBQUNoRSxtREFBbUQsWUFBWTtBQUMvRCxrREFBa0QsWUFBWTtBQUM5RCxhQUFhO0FBQ2I7QUFDQSwyREFBMkQsWUFBWTtBQUN2RSwwREFBMEQsWUFBWTtBQUN0RSw4RkFBOEYsWUFBWTtBQUMxRztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxpQkFBaUIsdUNBQXVDLFVBQVU7QUFDbEcsa0NBQWtDLGlCQUFpQixzQ0FBc0MsVUFBVTtBQUNuRywrQkFBK0IsaUJBQWlCLGlDQUFpQyxlQUFlO0FBQ2hHLGlDQUFpQyxpQkFBaUIsZ0NBQWdDLGVBQWU7QUFDakcsYUFBYTtBQUNiO0FBQ0Esa0NBQWtDLGlCQUFpQiw2Q0FBNkMsVUFBVTtBQUMxRyxnQ0FBZ0MsaUJBQWlCLCtDQUErQyxVQUFVO0FBQzFHLGlDQUFpQyxpQkFBaUIsdUNBQXVDLGVBQWU7QUFDeEcsK0JBQStCLGlCQUFpQix5Q0FBeUMsZUFBZTtBQUN4RztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsWUFBWTtBQUM1RSwrREFBK0QsWUFBWTtBQUMzRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGlFQUFpRSxZQUFZO0FBQzdFLGtFQUFrRSxZQUFZO0FBQzlFLHdFQUF3RSxZQUFZO0FBQ3BGLGFBQWE7QUFDYjtBQUNBLGtFQUFrRSxZQUFZO0FBQzlFLG1FQUFtRSxZQUFZO0FBQy9FO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxZQUFZO0FBQzlFLGlFQUFpRSxZQUFZO0FBQzdFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwR0FBMEcsWUFBWTtBQUN0SDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFlBQVk7QUFDckUsd0RBQXdELFlBQVk7QUFDcEUsYUFBYTtBQUNiO0FBQ0EsNkVBQTZFLGlCQUFpQjtBQUM5RixxSUFBcUksaUJBQWlCO0FBQ3RKLDBHQUEwRyxpQkFBaUI7QUFDM0gsOEZBQThGLGlCQUFpQjtBQUMvRyxxRUFBcUUsaUJBQWlCO0FBQ3RGLHVJQUF1SSxpQkFBaUI7QUFDeEo7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFlBQVk7QUFDcEUsdURBQXVELFlBQVk7QUFDbkU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsS0FBSztBQUN2RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxZQUFZO0FBQzFFLDZEQUE2RCxZQUFZO0FBQ3pFLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLFlBQVk7QUFDakYsb0VBQW9FLFlBQVk7QUFDaEY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsTUFBTTtBQUMxRjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlHQUF5RyxLQUFLO0FBQzlHO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsbUJBQW1CO0FBQ2pGO0FBQ0EscUVBQXFFLG9CQUFvQixxQkFBcUIsYUFBYSxzQkFBc0IsYUFBYSxlQUFlLGNBQWMsaUJBQWlCLGdCQUFnQixnQ0FBZ0MsMkJBQTJCO0FBQ3ZSLDZFQUE2RSxvQkFBb0IsNkRBQTZELGFBQWEsdUJBQXVCLGlCQUFpQixlQUFlLGNBQWMsaUJBQWlCLGdCQUFnQixnQ0FBZ0MsMkJBQTJCO0FBQzVVLDZFQUE2RSxvQkFBb0Isb0VBQW9FLGlCQUFpQixzQkFBc0IsYUFBYSxlQUFlLGNBQWMsaUJBQWlCLGdCQUFnQixnQ0FBZ0MsMkJBQTJCO0FBQ2xWLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxtQkFBbUI7QUFDdEY7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxRUFBcUUsb0JBQW9CLHFCQUFxQixhQUFhLHNCQUFzQixhQUFhLGVBQWUsY0FBYyxpQkFBaUIsZ0JBQWdCLGdDQUFnQywyQkFBMkI7QUFDdlIsNkVBQTZFLG9CQUFvQiw2REFBNkQsYUFBYSx1QkFBdUIsaUJBQWlCLGVBQWUsY0FBYyxpQkFBaUIsZ0JBQWdCLGdDQUFnQywyQkFBMkI7QUFDNVUsNkVBQTZFLG9CQUFvQixvRUFBb0UsaUJBQWlCLHNCQUFzQixhQUFhLGVBQWUsY0FBYyxpQkFBaUIsZ0JBQWdCLGdDQUFnQywyQkFBMkI7QUFDbFYsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLG1CQUFtQixxREFBcUQsMkJBQTJCLGlCQUFpQixlQUFlLHNCQUFzQixpQkFBaUI7QUFDblAsb0ZBQW9GLG9CQUFvQix1QkFBdUIsMkJBQTJCLDZCQUE2Qix5QkFBeUIsa0NBQWtDLDJCQUEyQjtBQUM3USxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFdBQVc7QUFDcEMseUJBQXlCLFdBQVc7QUFDcEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEYsMEVBQTBFLFlBQVk7QUFDdEY7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsWUFBWTtBQUN4RjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUFNO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUhBQXlILG1CQUFtQix1QkFBdUIsZUFBZTtBQUNsTCwrREFBK0QsZUFBZTtBQUM5RSxhQUFhO0FBQ2Isb0hBQW9ILG1CQUFtQix5QkFBeUIsZUFBZTtBQUMvSztBQUNBLGlKQUFpSixtQkFBbUIseUJBQXlCLGVBQWU7QUFDNU0scUlBQXFJLG1CQUFtQix5QkFBeUIsZUFBZTtBQUNoTTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsV0FBVyxRQUFRLFlBQVkseUJBQXlCLGFBQWEsUUFBUSxhQUFhO0FBQ2pKO0FBQ0EsK0RBQStELGFBQWE7QUFDNUUsYUFBYTtBQUNiO0FBQ0Esd0RBQXdELFdBQVcsUUFBUSxZQUFZLHlCQUF5QixhQUFhLFFBQVEsYUFBYTtBQUNsSixxSEFBcUgsV0FBVyxRQUFRLFlBQVkseUJBQXlCLGFBQWEsUUFBUSxhQUFhO0FBQy9NLGFBQWE7QUFDYjtBQUNBLGdGQUFnRixXQUFXLFFBQVEsWUFBWSx5QkFBeUIsYUFBYSxRQUFRLGFBQWE7QUFDMUs7QUFDQSw2SUFBNkksV0FBVyxRQUFRLFlBQVkseUJBQXlCLGFBQWEsUUFBUSxhQUFhO0FBQ3ZPLHFLQUFxSyxXQUFXLFFBQVEsWUFBWSx5QkFBeUIsYUFBYSxRQUFRLGFBQWE7QUFDL1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsS0FBSztBQUNuRjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFHQUFxRyxLQUFLO0FBQzFHO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLEtBQUs7QUFDNUY7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsWUFBWTtBQUMvRSxrRUFBa0UsWUFBWTtBQUM5RTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQTZGLGNBQWMsY0FBYyxXQUFXO0FBQ3BJO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEZBQTBGLGNBQWMsY0FBYyxXQUFXO0FBQ2pJO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGLGNBQWMsY0FBYyxXQUFXO0FBQ2xJO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLFVBQVU7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxlQUFlO0FBQzFFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsTUFBTTtBQUNOLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvc2FtdWVsb2t3L2FjY2Vzc2FiaWxpdHktZGVtby9BY2Nlc3NMZW5zL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9heGUtY29yZS9heGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIGF4ZSB2NC4xMC4zXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDI1IERlcXVlIFN5c3RlbXMsIEluYy5cbiAqXG4gKiBZb3VyIHVzZSBvZiB0aGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuICpcbiAqIFRoaXMgZW50aXJlIGNvcHlyaWdodCBub3RpY2UgbXVzdCBhcHBlYXIgaW4gZXZlcnkgY29weSBvZiB0aGlzIGZpbGUgeW91XG4gKiBkaXN0cmlidXRlIG9yIGluIGFueSBmaWxlIHRoYXQgY29udGFpbnMgc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhpcyBzb3VyY2VcbiAqIGNvZGUuXG4gKi9cbihmdW5jdGlvbiBheGVGdW5jdGlvbih3aW5kb3cpIHtcbiAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgdmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuICAndXNlIHN0cmljdCc7XG4gIGZ1bmN0aW9uIF90eXBlb2Yobykge1xuICAgICdAYmFiZWwvaGVscGVycyAtIHR5cGVvZic7XG4gICAgcmV0dXJuIF90eXBlb2YgPSAnZnVuY3Rpb24nID09IHR5cGVvZiBTeW1ib2wgJiYgJ3N5bWJvbCcgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uKG8pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgbztcbiAgICB9IDogZnVuY3Rpb24obykge1xuICAgICAgcmV0dXJuIG8gJiYgJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gJ3N5bWJvbCcgOiB0eXBlb2YgbztcbiAgICB9LCBfdHlwZW9mKG8pO1xuICB9XG4gIHZhciBheGUgPSBheGUgfHwge307XG4gIGF4ZS52ZXJzaW9uID0gJzQuMTAuMyc7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoJ2F4ZS1jb3JlJywgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGF4ZTtcbiAgICB9KTtcbiAgfVxuICBpZiAoKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG1vZHVsZSkpID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyAmJiB0eXBlb2YgYXhlRnVuY3Rpb24udG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBheGUuc291cmNlID0gJygnICsgYXhlRnVuY3Rpb24udG9TdHJpbmcoKSArICcpKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOiB0aGlzKTsnO1xuICAgIG1vZHVsZS5leHBvcnRzID0gYXhlO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93LmdldENvbXB1dGVkU3R5bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB3aW5kb3cuYXhlID0gYXhlO1xuICB9XG4gIHZhciBjb21tb25zO1xuICBmdW5jdGlvbiBTdXBwb3J0RXJyb3IoZXJyb3IpIHtcbiAgICB0aGlzLm5hbWUgPSAnU3VwcG9ydEVycm9yJztcbiAgICB0aGlzLmNhdXNlID0gZXJyb3IuY2F1c2U7XG4gICAgdGhpcy5tZXNzYWdlID0gJ2AnLmNvbmNhdChlcnJvci5jYXVzZSwgJ2AgLSBmZWF0dXJlIHVuc3VwcG9ydGVkIGluIHlvdXIgZW52aXJvbm1lbnQuJyk7XG4gICAgaWYgKGVycm9yLnJ1bGVJZCkge1xuICAgICAgdGhpcy5ydWxlSWQgPSBlcnJvci5ydWxlSWQ7XG4gICAgICB0aGlzLm1lc3NhZ2UgKz0gJyBTa2lwcGluZyAnLmNvbmNhdCh0aGlzLnJ1bGVJZCwgJyBydWxlLicpO1xuICAgIH1cbiAgICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gIH1cbiAgU3VwcG9ydEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgU3VwcG9ydEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1cHBvcnRFcnJvcjtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2V4Y2x1ZGVkID0gWyAnbm9kZScgXSwgX2V4Y2x1ZGVkMiA9IFsgJ3JlbGF0ZWROb2RlcycgXSwgX2V4Y2x1ZGVkMyA9IFsgJ25vZGUnIF0sIF9leGNsdWRlZDQgPSBbICd2YXJpYW50JyBdLCBfZXhjbHVkZWQ1ID0gWyAnbWF0Y2hlcycgXSwgX2V4Y2x1ZGVkNiA9IFsgJ2Nocm9taXVtJyBdLCBfZXhjbHVkZWQ3ID0gWyAnbm9JbXBsaWNpdCcgXSwgX2V4Y2x1ZGVkOCA9IFsgJ25vUHJlc2VudGF0aW9uYWwnIF0sIF9leGNsdWRlZDkgPSBbICdwcmVjaXNpb24nLCAnZm9ybWF0JywgJ2luR2FtdXQnIF0sIF9leGNsdWRlZDEwID0gWyAnc3BhY2UnIF0sIF9leGNsdWRlZDExID0gWyAnYWxnb3JpdGhtJyBdLCBfZXhjbHVkZWQxMiA9IFsgJ21ldGhvZCcgXSwgX2V4Y2x1ZGVkMTMgPSBbICdtYXhEZWx0YUUnLCAnZGVsdGFFTWV0aG9kJywgJ3N0ZXBzJywgJ21heFN0ZXBzJyBdLCBfZXhjbHVkZWQxNCA9IFsgJ25vZGUnIF0sIF9leGNsdWRlZDE1ID0gWyAnZW52aXJvbm1lbnREYXRhJyBdLCBfZXhjbHVkZWQxNiA9IFsgJ2Vudmlyb25tZW50RGF0YScgXSwgX2V4Y2x1ZGVkMTcgPSBbICdlbnZpcm9ubWVudERhdGEnIF0sIF9leGNsdWRlZDE4ID0gWyAnZW52aXJvbm1lbnREYXRhJyBdLCBfZXhjbHVkZWQxOSA9IFsgJ2Vudmlyb25tZW50RGF0YScgXTtcbiAgZnVuY3Rpb24gX3RvQXJyYXkocikge1xuICAgIHJldHVybiBfYXJyYXlXaXRoSG9sZXMocikgfHwgX2l0ZXJhYmxlVG9BcnJheShyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkocikgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xuICB9XG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7XG4gICAgcmV0dXJuIChyID0gX3RvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwge1xuICAgICAgdmFsdWU6IHQsXG4gICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICB3cml0YWJsZTogITBcbiAgICB9KSA6IGVbcl0gPSB0LCBlO1xuICB9XG4gIGZ1bmN0aW9uIF9jb25zdHJ1Y3QodCwgZSwgcikge1xuICAgIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICB2YXIgbyA9IFsgbnVsbCBdO1xuICAgIG8ucHVzaC5hcHBseShvLCBlKTtcbiAgICB2YXIgcCA9IG5ldyAodC5iaW5kLmFwcGx5KHQsIG8pKSgpO1xuICAgIHJldHVybiByICYmIF9zZXRQcm90b3R5cGVPZihwLCByLnByb3RvdHlwZSksIHA7XG4gIH1cbiAgZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7XG4gICAgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTtcbiAgfVxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBlKSB7XG4gICAgaWYgKGUgJiYgKCdvYmplY3QnID09IF90eXBlb2YoZSkgfHwgJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZSkpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTtcbiAgfVxuICBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHtcbiAgICBpZiAodm9pZCAwID09PSBlKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ3RoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbigpIHt9KSk7XG4gICAgfSBjYXRjaCAodCkge31cbiAgICByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICAgICAgcmV0dXJuICEhdDtcbiAgICB9KSgpO1xuICB9XG4gIGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZih0KSB7XG4gICAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO1xuICAgIH0sIF9nZXRQcm90b3R5cGVPZih0KTtcbiAgfVxuICBmdW5jdGlvbiBfaW5oZXJpdHModCwgZSkge1xuICAgIGlmICgnZnVuY3Rpb24nICE9IHR5cGVvZiBlICYmIG51bGwgIT09IGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogdCxcbiAgICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgICB9XG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCAncHJvdG90eXBlJywge1xuICAgICAgd3JpdGFibGU6ICExXG4gICAgfSksIGUgJiYgX3NldFByb3RvdHlwZU9mKHQsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0O1xuICAgIH0sIF9zZXRQcm90b3R5cGVPZih0LCBlKTtcbiAgfVxuICBmdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyhlLCB0LCBhKSB7XG4gICAgX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24oZSwgdCksIHQuc2V0KGUsIGEpO1xuICB9XG4gIGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYyhlLCBhKSB7XG4gICAgX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24oZSwgYSksIGEuYWRkKGUpO1xuICB9XG4gIGZ1bmN0aW9uIF9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uKGUsIHQpIHtcbiAgICBpZiAodC5oYXMoZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBpbml0aWFsaXplIHRoZSBzYW1lIHByaXZhdGUgZWxlbWVudHMgdHdpY2Ugb24gYW4gb2JqZWN0Jyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZEdldChzLCBhKSB7XG4gICAgcmV0dXJuIHMuZ2V0KF9hc3NlcnRDbGFzc0JyYW5kKHMsIGEpKTtcbiAgfVxuICBmdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRTZXQocywgYSwgcikge1xuICAgIHJldHVybiBzLnNldChfYXNzZXJ0Q2xhc3NCcmFuZChzLCBhKSwgciksIHI7XG4gIH1cbiAgZnVuY3Rpb24gX2Fzc2VydENsYXNzQnJhbmQoZSwgdCwgbikge1xuICAgIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBlID8gZSA9PT0gdCA6IGUuaGFzKHQpKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0IDogbjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJpdmF0ZSBlbGVtZW50IGlzIG5vdCBwcmVzZW50IG9uIHRoaXMgb2JqZWN0Jyk7XG4gIH1cbiAgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGUsIHQpIHtcbiAgICBpZiAobnVsbCA9PSBlKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIHZhciBvLCByLCBpID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoZSwgdCk7XG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtcbiAgICAgIGZvciAociA9IDA7IHIgPCBzLmxlbmd0aDsgcisrKSB7XG4gICAgICAgIG8gPSBzW3JdLCB0LmluY2x1ZGVzKG8pIHx8IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZSwgbykgJiYgKGlbb10gPSBlW29dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cbiAgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UociwgZSkge1xuICAgIGlmIChudWxsID09IHIpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBuIGluIHIpIHtcbiAgICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsIG4pKSB7XG4gICAgICAgIGlmIChlLmluY2x1ZGVzKG4pKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdFtuXSA9IHJbbl07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9XG4gIGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShyKSB7XG4gICAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5KHIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbiAgfVxuICBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLicpO1xuICB9XG4gIGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkocikge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPSB0eXBlb2YgU3ltYm9sICYmIG51bGwgIT0gcltTeW1ib2wuaXRlcmF0b3JdIHx8IG51bGwgIT0gclsnQEBpdGVyYXRvciddKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKHIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyKSkge1xuICAgICAgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbihuKSB7XG4gICAgICBmb3IgKHZhciBlID0gMTsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykge1xuICAgICAgICB2YXIgdCA9IGFyZ3VtZW50c1tlXTtcbiAgICAgICAgZm9yICh2YXIgciBpbiB0KSB7XG4gICAgICAgICAgKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIHIpICYmIChuW3JdID0gdFtyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuO1xuICAgIH0sIF9leHRlbmRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH1cbiAgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkge1xuICAgIHJldHVybiBfYXJyYXlXaXRoSG9sZXMocikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGUpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBlKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG4gIH1cbiAgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4nKTtcbiAgfVxuICBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICAgIHZhciB0ID0gbnVsbCA9PSByID8gbnVsbCA6ICd1bmRlZmluZWQnICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbJ0BAaXRlcmF0b3InXTtcbiAgICBpZiAobnVsbCAhPSB0KSB7XG4gICAgICB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0KHQpICE9PSB0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGYgPSAhMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKDshKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApIHt9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdFsncmV0dXJuJ10gJiYgKHUgPSB0WydyZXR1cm4nXSgpLCBPYmplY3QodSkgIT09IHUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChvKSB7XG4gICAgICAgICAgICB0aHJvdyBuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocikpIHtcbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikge1xuICAgIGlmICghKGEgaW5zdGFuY2VvZiBuKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHtcbiAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHtcbiAgICAgIHZhciBvID0gclt0XTtcbiAgICAgIG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgJ3ZhbHVlJyBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkge1xuICAgIHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICdwcm90b3R5cGUnLCB7XG4gICAgICB3cml0YWJsZTogITFcbiAgICB9KSwgZTtcbiAgfVxuICBmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7XG4gICAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgJ3N0cmluZycpO1xuICAgIHJldHVybiAnc3ltYm9sJyA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyAnJztcbiAgfVxuICBmdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICAgIGlmICgnb2JqZWN0JyAhPSBfdHlwZW9mKHQpIHx8ICF0KSB7XG4gICAgICByZXR1cm4gdDtcbiAgICB9XG4gICAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gICAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgICAgdmFyIGkgPSBlLmNhbGwodCwgciB8fCAnZGVmYXVsdCcpO1xuICAgICAgaWYgKCdvYmplY3QnICE9IF90eXBlb2YoaSkpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLicpO1xuICAgIH1cbiAgICByZXR1cm4gKCdzdHJpbmcnID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbiAgfVxuICBmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyLCBlKSB7XG4gICAgdmFyIHQgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByWydAQGl0ZXJhdG9yJ107XG4gICAgaWYgKCF0KSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyKSB8fCAodCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyKSkgfHwgZSAmJiByICYmICdudW1iZXInID09IHR5cGVvZiByLmxlbmd0aCkge1xuICAgICAgICB0ICYmIChyID0gdCk7XG4gICAgICAgIHZhciBfbiA9IDAsIEYgPSBmdW5jdGlvbiBGKCkge307XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgczogRixcbiAgICAgICAgICBuOiBmdW5jdGlvbiBuKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9uID49IHIubGVuZ3RoID8ge1xuICAgICAgICAgICAgICBkb25lOiAhMFxuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgZG9uZTogITEsXG4gICAgICAgICAgICAgIHZhbHVlOiByW19uKytdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZTogZnVuY3Rpb24gZShyKSB7XG4gICAgICAgICAgICB0aHJvdyByO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZjogRlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4nKTtcbiAgICB9XG4gICAgdmFyIG8sIGEgPSAhMCwgdSA9ICExO1xuICAgIHJldHVybiB7XG4gICAgICBzOiBmdW5jdGlvbiBzKCkge1xuICAgICAgICB0ID0gdC5jYWxsKHIpO1xuICAgICAgfSxcbiAgICAgIG46IGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgIHZhciByID0gdC5uZXh0KCk7XG4gICAgICAgIHJldHVybiBhID0gci5kb25lLCByO1xuICAgICAgfSxcbiAgICAgIGU6IGZ1bmN0aW9uIGUocikge1xuICAgICAgICB1ID0gITAsIG8gPSByO1xuICAgICAgfSxcbiAgICAgIGY6IGZ1bmN0aW9uIGYoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYSB8fCBudWxsID09IHRbJ3JldHVybiddIHx8IHRbJ3JldHVybiddKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICAgIHRocm93IG87XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgYSkge1xuICAgIGlmIChyKSB7XG4gICAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIHIpIHtcbiAgICAgICAgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpO1xuICAgICAgfVxuICAgICAgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTtcbiAgICAgIHJldHVybiAnT2JqZWN0JyA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgJ01hcCcgPT09IHQgfHwgJ1NldCcgPT09IHQgPyBBcnJheS5mcm9tKHIpIDogJ0FyZ3VtZW50cycgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkge1xuICAgIChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSB7XG4gICAgICBuW2VdID0gcltlXTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gICAgJ0BiYWJlbC9oZWxwZXJzIC0gdHlwZW9mJztcbiAgICByZXR1cm4gX3R5cGVvZiA9ICdmdW5jdGlvbicgPT0gdHlwZW9mIFN5bWJvbCAmJiAnc3ltYm9sJyA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24obykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvO1xuICAgIH0gOiBmdW5jdGlvbihvKSB7XG4gICAgICByZXR1cm4gbyAmJiAnZnVuY3Rpb24nID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyAnc3ltYm9sJyA6IHR5cGVvZiBvO1xuICAgIH0sIF90eXBlb2Yobyk7XG4gIH1cbiAgKGZ1bmN0aW9uKF9DbGFzc19icmFuZCwgX3BhdGgsIF9DU1MsIF9zcGFjZSwgX3IsIF9nLCBfYiwgX3JlZCwgX2dyZWVuLCBfYmx1ZSwgX0NsYXNzM19icmFuZCkge1xuICAgIHZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG4gICAgdmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiAgICB2YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAgIHZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgIHZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgX19kZWZOb3JtYWxQcm9wID0gZnVuY3Rpb24gX19kZWZOb3JtYWxQcm9wKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KSA6IG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgICB2YXIgX19tYXJrQXNNb2R1bGUgPSBmdW5jdGlvbiBfX21hcmtBc01vZHVsZSh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBfX2RlZlByb3AodGFyZ2V0LCAnX19lc01vZHVsZScsIHtcbiAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIF9fY29tbW9uSlMgPSBmdW5jdGlvbiBfX2NvbW1vbkpTKGNiLCBtb2QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG1vZCB8fCBjYigobW9kID0ge1xuICAgICAgICAgIGV4cG9ydHM6IHt9XG4gICAgICAgIH0pLmV4cG9ydHMsIG1vZCksIG1vZC5leHBvcnRzO1xuICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBfX2V4cG9ydCA9IGZ1bmN0aW9uIF9fZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIGFsbCkge1xuICAgICAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgICAgZ2V0OiBhbGxbbmFtZV0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBfX2V4cG9ydFN0YXIgPSBmdW5jdGlvbiBfX2V4cG9ydFN0YXIodGFyZ2V0LCBtb2R1bGUsIGRlc2MpIHtcbiAgICAgIGlmIChtb2R1bGUgJiYgX3R5cGVvZihtb2R1bGUpID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgbW9kdWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihfX2dldE93blByb3BOYW1lcyhtb2R1bGUpKSwgX3N0ZXA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRhcmdldCwga2V5KSAmJiBrZXkgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgICBfX2RlZlByb3AodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtb2R1bGVba2V5XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MobW9kdWxlLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOyApIHtcbiAgICAgICAgICAgIF9sb29wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICB2YXIgX190b01vZHVsZSA9IGZ1bmN0aW9uIF9fdG9Nb2R1bGUobW9kdWxlKSB7XG4gICAgICByZXR1cm4gX19leHBvcnRTdGFyKF9fbWFya0FzTW9kdWxlKF9fZGVmUHJvcChtb2R1bGUgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2R1bGUpKSA6IHt9LCAnZGVmYXVsdCcsIG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSAmJiAnZGVmYXVsdCcgaW4gbW9kdWxlID8ge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0gOiB7XG4gICAgICAgIHZhbHVlOiBtb2R1bGUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pKSwgbW9kdWxlKTtcbiAgICB9O1xuICAgIHZhciBfX3B1YmxpY0ZpZWxkID0gZnVuY3Rpb24gX19wdWJsaWNGaWVsZChvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIF9fZGVmTm9ybWFsUHJvcChvYmosIF90eXBlb2Yoa2V5KSAhPT0gJ3N5bWJvbCcgPyBrZXkgKyAnJyA6IGtleSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgdmFyIHJlcXVpcmVfbm9vcCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge307XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfaXNfdmFsdWUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIF91bmRlZmluZWQgPSByZXF1aXJlX25vb3AoKSgpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbCAhPT0gX3VuZGVmaW5lZCAmJiB2YWwgIT09IG51bGw7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX25vcm1hbGl6ZV9vcHRpb25zID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBpc1ZhbHVlID0gcmVxdWlyZV9pc192YWx1ZSgpO1xuICAgICAgdmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcbiAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgdmFyIHByb2Nlc3MyID0gZnVuY3Rpb24gcHJvY2VzczIoc3JjLCBvYmopIHtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChrZXkgaW4gc3JjKSB7XG4gICAgICAgICAgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0czEpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgICAgZm9yRWFjaC5jYWxsKGFyZ3VtZW50cywgZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgIGlmICghaXNWYWx1ZShvcHRpb25zKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9jZXNzMihPYmplY3Qob3B0aW9ucyksIHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19pbXBsZW1lbnRlZCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2lnbiA9IE1hdGguc2lnbjtcbiAgICAgICAgaWYgKHR5cGVvZiBzaWduICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWduKDEwKSA9PT0gMSAmJiBzaWduKC0yMCkgPT09IC0xO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9zaGltID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuICAgICAgICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSA+IDAgPyAxIDogLTE7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3NpZ24gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlX2lzX2ltcGxlbWVudGVkKCkoKSA/IE1hdGguc2lnbiA6IHJlcXVpcmVfc2hpbSgpO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3RvX2ludGVnZXIgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHNpZ24gPSByZXF1aXJlX3NpZ24oKTtcbiAgICAgIHZhciBhYnMgPSBNYXRoLmFicztcbiAgICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCB8fCAhaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWduKHZhbHVlKSAqIGZsb29yKGFicyh2YWx1ZSkpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV90b19wb3NfaW50ZWdlciA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZV90b19pbnRlZ2VyKCk7XG4gICAgICB2YXIgbWF4MiA9IE1hdGgubWF4O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbWF4MigwLCB0b0ludGVnZXIodmFsdWUpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfcmVzb2x2ZV9sZW5ndGggPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHRvUG9zSW50ID0gcmVxdWlyZV90b19wb3NfaW50ZWdlcigpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRzTGVuZ3RoLCBmbkxlbmd0aCwgaXNBc3luYykge1xuICAgICAgICB2YXIgbGVuZ3RoO1xuICAgICAgICBpZiAoaXNOYU4ob3B0c0xlbmd0aCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBmbkxlbmd0aDtcbiAgICAgICAgICBpZiAoIShsZW5ndGggPj0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNBc3luYyAmJiBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGggLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzTGVuZ3RoID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9Qb3NJbnQob3B0c0xlbmd0aCk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3ZhbGlkX2NhbGxhYmxlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV92YWxpZF92YWx1ZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgaXNWYWx1ZSA9IHJlcXVpcmVfaXNfdmFsdWUoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc1ZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCB1c2UgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2l0ZXJhdGUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGNhbGxhYmxlID0gcmVxdWlyZV92YWxpZF9jYWxsYWJsZSgpO1xuICAgICAgdmFyIHZhbHVlID0gcmVxdWlyZV92YWxpZF92YWx1ZSgpO1xuICAgICAgdmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbiAgICAgIHZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgICAgdmFyIG9ialByb3BlcnR5SXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWV0aG9kLCBkZWZWYWwpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgY2IpIHtcbiAgICAgICAgICB2YXIgbGlzdCwgdGhpc0FyZyA9IGFyZ3VtZW50c1syXSwgY29tcGFyZUZuID0gYXJndW1lbnRzWzNdO1xuICAgICAgICAgIG9iaiA9IE9iamVjdCh2YWx1ZShvYmopKTtcbiAgICAgICAgICBjYWxsYWJsZShjYik7XG4gICAgICAgICAgbGlzdCA9IGtleXMob2JqKTtcbiAgICAgICAgICBpZiAoY29tcGFyZUZuKSB7XG4gICAgICAgICAgICBsaXN0LnNvcnQodHlwZW9mIGNvbXBhcmVGbiA9PT0gJ2Z1bmN0aW9uJyA/IGJpbmQuY2FsbChjb21wYXJlRm4sIG9iaikgOiB2b2lkIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbWV0aG9kID0gbGlzdFttZXRob2RdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2FsbC5jYWxsKG1ldGhvZCwgbGlzdCwgZnVuY3Rpb24oa2V5LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKCFvYmpQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgICByZXR1cm4gZGVmVmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGwuY2FsbChjYiwgdGhpc0FyZywgb2JqW2tleV0sIGtleSwgb2JqLCBpbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2Zvcl9lYWNoID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZV9pdGVyYXRlKCkoJ2ZvckVhY2gnKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9yZWdpc3RlcmVkX2V4dGVuc2lvbnMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX2ltcGxlbWVudGVkMiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbiwgb2JqO1xuICAgICAgICBpZiAodHlwZW9mIGFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmogPSB7XG4gICAgICAgICAgZm9vOiAncmF6J1xuICAgICAgICB9O1xuICAgICAgICBhc3NpZ24ob2JqLCB7XG4gICAgICAgICAgYmFyOiAnZHdhJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdHJ6eTogJ3RyenknXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb2JqLmZvbyArIG9iai5iYXIgKyBvYmoudHJ6eSA9PT0gJ3JhemR3YXRyenknO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19pbXBsZW1lbnRlZDMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBPYmplY3Qua2V5cygncHJpbWl0aXZlJyk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfc2hpbTIgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzVmFsdWUgPSByZXF1aXJlX2lzX3ZhbHVlKCk7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGtleXMoaXNWYWx1ZShvYmplY3QpID8gT2JqZWN0KG9iamVjdCkgOiBvYmplY3QpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9rZXlzID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZV9pc19pbXBsZW1lbnRlZDMoKSgpID8gT2JqZWN0LmtleXMgOiByZXF1aXJlX3NoaW0yKCk7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfc2hpbTMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGtleXMgPSByZXF1aXJlX2tleXMoKTtcbiAgICAgIHZhciB2YWx1ZSA9IHJlcXVpcmVfdmFsaWRfdmFsdWUoKTtcbiAgICAgIHZhciBtYXgyID0gTWF0aC5tYXg7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRlc3QsIHNyYykge1xuICAgICAgICB2YXIgZXJyb3IsIGksIGxlbmd0aCA9IG1heDIoYXJndW1lbnRzLmxlbmd0aCwgMiksIGFzc2lnbjtcbiAgICAgICAgZGVzdCA9IE9iamVjdCh2YWx1ZShkZXN0KSk7XG4gICAgICAgIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbihrZXkpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVzdFtrZXldID0gc3JjW2tleV07XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICBlcnJvciA9IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBzcmMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAga2V5cyhzcmMpLmZvckVhY2goYXNzaWduKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9hc3NpZ24gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlX2lzX2ltcGxlbWVudGVkMigpKCkgPyBPYmplY3QuYXNzaWduIDogcmVxdWlyZV9zaGltMygpO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX29iamVjdCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgaXNWYWx1ZSA9IHJlcXVpcmVfaXNfdmFsdWUoKTtcbiAgICAgIHZhciBtYXAgPSB7XG4gICAgICAgIGZ1bmN0aW9uOiB0cnVlLFxuICAgICAgICBvYmplY3Q6IHRydWVcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbHVlKHZhbHVlKSAmJiBtYXBbX3R5cGVvZih2YWx1ZSldIHx8IGZhbHNlO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9jdXN0b20gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGFzc2lnbiA9IHJlcXVpcmVfYXNzaWduKCk7XG4gICAgICB2YXIgaXNPYmplY3QgPSByZXF1aXJlX2lzX29iamVjdCgpO1xuICAgICAgdmFyIGlzVmFsdWUgPSByZXF1aXJlX2lzX3ZhbHVlKCk7XG4gICAgICB2YXIgY2FwdHVyZVN0YWNrVHJhY2UgPSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICB2YXIgZXJyMiA9IG5ldyBFcnJvcihtZXNzYWdlKSwgY29kZSA9IGFyZ3VtZW50c1sxXSwgZXh0ID0gYXJndW1lbnRzWzJdO1xuICAgICAgICBpZiAoIWlzVmFsdWUoZXh0KSkge1xuICAgICAgICAgIGlmIChpc09iamVjdChjb2RlKSkge1xuICAgICAgICAgICAgZXh0ID0gY29kZTtcbiAgICAgICAgICAgIGNvZGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNWYWx1ZShleHQpKSB7XG4gICAgICAgICAgYXNzaWduKGVycjIsIGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVmFsdWUoY29kZSkpIHtcbiAgICAgICAgICBlcnIyLmNvZGUgPSBjb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgIGNhcHR1cmVTdGFja1RyYWNlKGVycjIsIG1vZHVsZS5leHBvcnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyMjtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfbWl4aW4gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHZhbHVlID0gcmVxdWlyZV92YWxpZF92YWx1ZSgpO1xuICAgICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlKSB7XG4gICAgICAgIHZhciBlcnJvciwgc291cmNlT2JqZWN0ID0gT2JqZWN0KHZhbHVlKHNvdXJjZSkpO1xuICAgICAgICB0YXJnZXQgPSBPYmplY3QodmFsdWUodGFyZ2V0KSk7XG4gICAgICAgIGdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqZWN0KS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBuYW1lKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZU9iamVjdCkuZm9yRWFjaChmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgc3ltYm9sLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW1ib2wpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZGVmaW5lX2xlbmd0aCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdG9Qb3NJbnQgPSByZXF1aXJlX3RvX3Bvc19pbnRlZ2VyKCk7XG4gICAgICB2YXIgdGVzdCA9IGZ1bmN0aW9uIHRlc3QoYXJnMSwgYXJnMikge1xuICAgICAgICByZXR1cm4gYXJnMjtcbiAgICAgIH07XG4gICAgICB2YXIgZGVzYztcbiAgICAgIHZhciBkZWZpbmVQcm9wZXJ0eTtcbiAgICAgIHZhciBnZW5lcmF0ZTtcbiAgICAgIHZhciBtaXhpbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0ZXN0LCAnbGVuZ3RoJywge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IDFcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICBpZiAodGVzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZGVzYyA9IHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBsZW5ndGgpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b1Bvc0ludChsZW5ndGgpO1xuICAgICAgICAgIGlmIChmbi5sZW5ndGggPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZXNjLnZhbHVlID0gbGVuZ3RoO1xuICAgICAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmbiwgJ2xlbmd0aCcsIGRlc2MpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWl4aW4gPSByZXF1aXJlX21peGluKCk7XG4gICAgICAgIGdlbmVyYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNhY2hlMiA9IFtdO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzLCBpID0gMDtcbiAgICAgICAgICAgIGlmIChjYWNoZTJbbGVuZ3RoXSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FjaGUyW2xlbmd0aF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgICAgYXJncy5wdXNoKCdhJyArICgrK2kpLnRvU3RyaW5nKDM2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdmbicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBhcmdzLmpvaW4oJywgJykgKyAnKSB7IHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9OycpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0oKTtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzcmMsIGxlbmd0aCkge1xuICAgICAgICAgIHZhciB0YXJnZXQ7XG4gICAgICAgICAgbGVuZ3RoID0gdG9Qb3NJbnQobGVuZ3RoKTtcbiAgICAgICAgICBpZiAoc3JjLmxlbmd0aCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3JjO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0YXJnZXQgPSBnZW5lcmF0ZShsZW5ndGgpKHNyYyk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1peGluKHRhcmdldCwgc3JjKTtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pcyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgX3VuZGVmaW5lZCA9IHZvaWQgMDtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBfdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pczIgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzVmFsdWUgPSByZXF1aXJlX2lzKCk7XG4gICAgICB2YXIgcG9zc2libGVUeXBlcyA9IHtcbiAgICAgICAgb2JqZWN0OiB0cnVlLFxuICAgICAgICBmdW5jdGlvbjogdHJ1ZSxcbiAgICAgICAgdW5kZWZpbmVkOiB0cnVlXG4gICAgICB9O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIWlzVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHBvc3NpYmxlVHlwZXMsIF90eXBlb2YodmFsdWUpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfaXMzID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBpc09iamVjdCA9IHJlcXVpcmVfaXMyKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCF2YWx1ZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfaXM0ID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmVfaXMzKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnbGVuZ3RoJykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlLmxlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS5jYWxsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUuYXBwbHkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhaXNQcm90b3R5cGUodmFsdWUpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pczUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlX2lzNCgpO1xuICAgICAgdmFyIGNsYXNzUmUgPSAvXlxccypjbGFzc1tcXHN7L31dLztcbiAgICAgIHZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGFzc1JlLnRlc3QoZnVuY3Rpb25Ub1N0cmluZy5jYWxsKHZhbHVlKSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX2ltcGxlbWVudGVkNCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgc3RyID0gJ3JhemR3YXRyenknO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHIuY29udGFpbnMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5jb250YWlucygnZHdhJykgPT09IHRydWUgJiYgc3RyLmNvbnRhaW5zKCdmb28nKSA9PT0gZmFsc2U7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3NoaW00ID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBpbmRleE9mID0gU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4T2YuY2FsbCh0aGlzLCBzZWFyY2hTdHJpbmcsIGFyZ3VtZW50c1sxXSkgPiAtMTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfY29udGFpbnMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlX2lzX2ltcGxlbWVudGVkNCgpKCkgPyBTdHJpbmcucHJvdG90eXBlLmNvbnRhaW5zIDogcmVxdWlyZV9zaGltNCgpO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2QgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzVmFsdWUgPSByZXF1aXJlX2lzKCk7XG4gICAgICB2YXIgaXNQbGFpbkZ1bmN0aW9uID0gcmVxdWlyZV9pczUoKTtcbiAgICAgIHZhciBhc3NpZ24gPSByZXF1aXJlX2Fzc2lnbigpO1xuICAgICAgdmFyIG5vcm1hbGl6ZU9wdHMgPSByZXF1aXJlX25vcm1hbGl6ZV9vcHRpb25zKCk7XG4gICAgICB2YXIgY29udGFpbnMzID0gcmVxdWlyZV9jb250YWlucygpO1xuICAgICAgdmFyIGQyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkc2NyLCB2YWx1ZSkge1xuICAgICAgICB2YXIgYzQsIGUsIHcsIG9wdGlvbnMsIGRlc2M7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMiB8fCB0eXBlb2YgZHNjciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBvcHRpb25zID0gdmFsdWU7XG4gICAgICAgICAgdmFsdWUgPSBkc2NyO1xuICAgICAgICAgIGRzY3IgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbMl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVmFsdWUoZHNjcikpIHtcbiAgICAgICAgICBjNCA9IGNvbnRhaW5zMy5jYWxsKGRzY3IsICdjJyk7XG4gICAgICAgICAgZSA9IGNvbnRhaW5zMy5jYWxsKGRzY3IsICdlJyk7XG4gICAgICAgICAgdyA9IGNvbnRhaW5zMy5jYWxsKGRzY3IsICd3Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYzQgPSB3ID0gdHJ1ZTtcbiAgICAgICAgICBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVzYyA9IHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiBjNCxcbiAgICAgICAgICBlbnVtZXJhYmxlOiBlLFxuICAgICAgICAgIHdyaXRhYmxlOiB3XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAhb3B0aW9ucyA/IGRlc2MgOiBhc3NpZ24obm9ybWFsaXplT3B0cyhvcHRpb25zKSwgZGVzYyk7XG4gICAgICB9O1xuICAgICAgZDIuZ3MgPSBmdW5jdGlvbihkc2NyLCBnZXQyLCBzZXQyKSB7XG4gICAgICAgIHZhciBjNCwgZSwgb3B0aW9ucywgZGVzYztcbiAgICAgICAgaWYgKHR5cGVvZiBkc2NyICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIG9wdGlvbnMgPSBzZXQyO1xuICAgICAgICAgIHNldDIgPSBnZXQyO1xuICAgICAgICAgIGdldDIgPSBkc2NyO1xuICAgICAgICAgIGRzY3IgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbM107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1ZhbHVlKGdldDIpKSB7XG4gICAgICAgICAgZ2V0MiA9IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIGlmICghaXNQbGFpbkZ1bmN0aW9uKGdldDIpKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGdldDI7XG4gICAgICAgICAgZ2V0MiA9IHNldDIgPSB2b2lkIDA7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzVmFsdWUoc2V0MikpIHtcbiAgICAgICAgICBzZXQyID0gdm9pZCAwO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc1BsYWluRnVuY3Rpb24oc2V0MikpIHtcbiAgICAgICAgICBvcHRpb25zID0gc2V0MjtcbiAgICAgICAgICBzZXQyID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ZhbHVlKGRzY3IpKSB7XG4gICAgICAgICAgYzQgPSBjb250YWluczMuY2FsbChkc2NyLCAnYycpO1xuICAgICAgICAgIGUgPSBjb250YWluczMuY2FsbChkc2NyLCAnZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGM0ID0gdHJ1ZTtcbiAgICAgICAgICBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVzYyA9IHtcbiAgICAgICAgICBnZXQ6IGdldDIsXG4gICAgICAgICAgc2V0OiBzZXQyLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogYzQsXG4gICAgICAgICAgZW51bWVyYWJsZTogZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gIW9wdGlvbnMgPyBkZXNjIDogYXNzaWduKG5vcm1hbGl6ZU9wdHMob3B0aW9ucyksIGRlc2MpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9ldmVudF9lbWl0dGVyID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBkMiA9IHJlcXVpcmVfZCgpO1xuICAgICAgdmFyIGNhbGxhYmxlID0gcmVxdWlyZV92YWxpZF9jYWxsYWJsZSgpO1xuICAgICAgdmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuICAgICAgdmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcbiAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgICAgdmFyIGRlZmluZVByb3BlcnRpZXMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbiAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eTIgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9O1xuICAgICAgdmFyIG9uO1xuICAgICAgdmFyIG9uY2U7XG4gICAgICB2YXIgb2ZmO1xuICAgICAgdmFyIGVtaXQ7XG4gICAgICB2YXIgbWV0aG9kcztcbiAgICAgIHZhciBkZXNjcmlwdG9ycztcbiAgICAgIHZhciBiYXNlO1xuICAgICAgb24gPSBmdW5jdGlvbiBvbih0eXBlMiwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGNhbGxhYmxlKGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eTIuY2FsbCh0aGlzLCAnX19lZV9fJykpIHtcbiAgICAgICAgICBkYXRhID0gZGVzY3JpcHRvci52YWx1ZSA9IGNyZWF0ZShudWxsKTtcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19lZV9fJywgZGVzY3JpcHRvcik7XG4gICAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YSA9IHRoaXMuX19lZV9fO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGF0YVt0eXBlMl0pIHtcbiAgICAgICAgICBkYXRhW3R5cGUyXSA9IGxpc3RlbmVyO1xuICAgICAgICB9IGVsc2UgaWYgKF90eXBlb2YoZGF0YVt0eXBlMl0pID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGRhdGFbdHlwZTJdLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGFbdHlwZTJdID0gWyBkYXRhW3R5cGUyXSwgbGlzdGVuZXIgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBvbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlMiwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIF9vbmNlLCBzZWxmMjtcbiAgICAgICAgY2FsbGFibGUobGlzdGVuZXIpO1xuICAgICAgICBzZWxmMiA9IHRoaXM7XG4gICAgICAgIG9uLmNhbGwodGhpcywgdHlwZTIsIF9vbmNlID0gZnVuY3Rpb24gb25jZTIoKSB7XG4gICAgICAgICAgb2ZmLmNhbGwoc2VsZjIsIHR5cGUyLCBfb25jZSk7XG4gICAgICAgICAgYXBwbHkuY2FsbChsaXN0ZW5lciwgdGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF9vbmNlLl9fZWVPbmNlTGlzdGVuZXJfXyA9IGxpc3RlbmVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBvZmYgPSBmdW5jdGlvbiBvZmYodHlwZTIsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBkYXRhLCBsaXN0ZW5lcnMsIGNhbmRpZGF0ZSwgaTtcbiAgICAgICAgY2FsbGFibGUobGlzdGVuZXIpO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5Mi5jYWxsKHRoaXMsICdfX2VlX18nKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZWVfXztcbiAgICAgICAgaWYgKCFkYXRhW3R5cGUyXSkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGxpc3RlbmVycyA9IGRhdGFbdHlwZTJdO1xuICAgICAgICBpZiAoX3R5cGVvZihsaXN0ZW5lcnMpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGNhbmRpZGF0ZSA9IGxpc3RlbmVyc1tpXTsgKytpKSB7XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlID09PSBsaXN0ZW5lciB8fCBjYW5kaWRhdGUuX19lZU9uY2VMaXN0ZW5lcl9fID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICBpZiAobGlzdGVuZXJzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGRhdGFbdHlwZTJdID0gbGlzdGVuZXJzW2kgPyAwIDogMV07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobGlzdGVuZXJzID09PSBsaXN0ZW5lciB8fCBsaXN0ZW5lcnMuX19lZU9uY2VMaXN0ZW5lcl9fID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZGVsZXRlIGRhdGFbdHlwZTJdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBlbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlMikge1xuICAgICAgICB2YXIgaSwgbCwgbGlzdGVuZXIsIGxpc3RlbmVycywgYXJncztcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eTIuY2FsbCh0aGlzLCAnX19lZV9fJykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGlzdGVuZXJzID0gdGhpcy5fX2VlX19bdHlwZTJdO1xuICAgICAgICBpZiAoIWxpc3RlbmVycykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3R5cGVvZihsaXN0ZW5lcnMpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobCAtIDEpO1xuICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTsgKytpKSB7XG4gICAgICAgICAgICBhcHBseS5jYWxsKGxpc3RlbmVyLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGwuY2FsbChsaXN0ZW5lcnMsIHRoaXMpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbC5jYWxsKGxpc3RlbmVycywgdGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGwuY2FsbChsaXN0ZW5lcnMsIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobCAtIDEpO1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwcGx5LmNhbGwobGlzdGVuZXJzLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBtZXRob2RzID0ge1xuICAgICAgICBvbjogb24sXG4gICAgICAgIG9uY2U6IG9uY2UsXG4gICAgICAgIG9mZjogb2ZmLFxuICAgICAgICBlbWl0OiBlbWl0XG4gICAgICB9O1xuICAgICAgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIG9uOiBkMihvbiksXG4gICAgICAgIG9uY2U6IGQyKG9uY2UpLFxuICAgICAgICBvZmY6IGQyKG9mZiksXG4gICAgICAgIGVtaXQ6IGQyKGVtaXQpXG4gICAgICB9O1xuICAgICAgYmFzZSA9IGRlZmluZVByb3BlcnRpZXMoe30sIGRlc2NyaXB0b3JzKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZ1bmN0aW9uIGV4cG9ydHMobykge1xuICAgICAgICByZXR1cm4gbyA9PSBudWxsID8gY3JlYXRlKGJhc2UpIDogZGVmaW5lUHJvcGVydGllcyhPYmplY3QobyksIGRlc2NyaXB0b3JzKTtcbiAgICAgIH07XG4gICAgICBleHBvcnRzLm1ldGhvZHMgPSBtZXRob2RzO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX2ltcGxlbWVudGVkNSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZnJvbSA9IEFycmF5LmZyb20sIGFyciwgcmVzdWx0O1xuICAgICAgICBpZiAodHlwZW9mIGZyb20gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYXJyID0gWyAncmF6JywgJ2R3YScgXTtcbiAgICAgICAgcmVzdWx0ID0gZnJvbShhcnIpO1xuICAgICAgICByZXR1cm4gQm9vbGVhbihyZXN1bHQgJiYgcmVzdWx0ICE9PSBhcnIgJiYgcmVzdWx0WzFdID09PSAnZHdhJyk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX2ltcGxlbWVudGVkNiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoKHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihnbG9iYWxUaGlzKSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZ2xvYmFsVGhpcykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5BcnJheSA9PT0gQXJyYXk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2ltcGxlbWVudGF0aW9uID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgIHZhciBuYWl2ZUZhbGxiYWNrID0gZnVuY3Rpb24gbmFpdmVGYWxsYmFjaygpIHtcbiAgICAgICAgaWYgKCh0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc2VsZikpID09PSAnb2JqZWN0JyAmJiBzZWxmKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gJ29iamVjdCcgJiYgd2luZG93KSB7XG4gICAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byByZXNvbHZlIGdsb2JhbCBgdGhpc2AnKTtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcykge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsICdfX2dsb2JhbF9fJywge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBuYWl2ZUZhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9fZ2xvYmFsX18pIHtcbiAgICAgICAgICAgIHJldHVybiBuYWl2ZUZhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfX2dsb2JhbF9fO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBPYmplY3QucHJvdG90eXBlLl9fZ2xvYmFsX187XG4gICAgICAgIH1cbiAgICAgIH0oKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9nbG9iYWxfdGhpcyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmVfaXNfaW1wbGVtZW50ZWQ2KCkoKSA/IGdsb2JhbFRoaXMgOiByZXF1aXJlX2ltcGxlbWVudGF0aW9uKCk7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfaXNfaW1wbGVtZW50ZWQ3ID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBnbG9iYWwyID0gcmVxdWlyZV9nbG9iYWxfdGhpcygpO1xuICAgICAgdmFyIHZhbGlkVHlwZXMgPSB7XG4gICAgICAgIG9iamVjdDogdHJ1ZSxcbiAgICAgICAgc3ltYm9sOiB0cnVlXG4gICAgICB9O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIFN5bWJvbDIgPSBnbG9iYWwyLlN5bWJvbDtcbiAgICAgICAgdmFyIHN5bWJvbDtcbiAgICAgICAgaWYgKHR5cGVvZiBTeW1ib2wyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHN5bWJvbCA9IFN5bWJvbDIoJ3Rlc3Qgc3ltYm9sJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgU3RyaW5nKHN5bWJvbCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWxpZFR5cGVzW190eXBlb2YoU3ltYm9sMi5pdGVyYXRvcildKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsaWRUeXBlc1tfdHlwZW9mKFN5bWJvbDIudG9QcmltaXRpdmUpXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbGlkVHlwZXNbX3R5cGVvZihTeW1ib2wyLnRvU3RyaW5nVGFnKV0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX3N5bWJvbCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90eXBlb2YodmFsdWUpID09PSAnc3ltYm9sJykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWUuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUgIT09ICdTeW1ib2wnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVt2YWx1ZS5jb25zdHJ1Y3Rvci50b1N0cmluZ1RhZ10gPT09ICdTeW1ib2wnO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV92YWxpZGF0ZV9zeW1ib2wgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzU3ltYm9sID0gcmVxdWlyZV9pc19zeW1ib2woKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHZhbHVlICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2dlbmVyYXRlX25hbWUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGQyID0gcmVxdWlyZV9kKCk7XG4gICAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbiAgICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiAgICAgIHZhciBvYmpQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGUobnVsbCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRlc2MpIHtcbiAgICAgICAgdmFyIHBvc3RmaXggPSAwLCBuYW1lLCBpZTExQnVnV29ya2Fyb3VuZDtcbiAgICAgICAgd2hpbGUgKGNyZWF0ZWRbZGVzYyArIChwb3N0Zml4IHx8ICcnKV0pIHtcbiAgICAgICAgICArK3Bvc3RmaXg7XG4gICAgICAgIH1cbiAgICAgICAgZGVzYyArPSBwb3N0Zml4IHx8ICcnO1xuICAgICAgICBjcmVhdGVkW2Rlc2NdID0gdHJ1ZTtcbiAgICAgICAgbmFtZSA9ICdAQCcgKyBkZXNjO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmpQcm90b3R5cGUsIG5hbWUsIGQyLmdzKG51bGwsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGllMTFCdWdXb3JrYXJvdW5kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGllMTFCdWdXb3JrYXJvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCBuYW1lLCBkMih2YWx1ZSkpO1xuICAgICAgICAgIGllMTFCdWdXb3JrYXJvdW5kID0gZmFsc2U7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3N0YW5kYXJkX3N5bWJvbHMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGQyID0gcmVxdWlyZV9kKCk7XG4gICAgICB2YXIgTmF0aXZlU3ltYm9sID0gcmVxdWlyZV9nbG9iYWxfdGhpcygpLlN5bWJvbDtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oU3ltYm9sUG9seWZpbGwpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFN5bWJvbFBvbHlmaWxsLCB7XG4gICAgICAgICAgaGFzSW5zdGFuY2U6IGQyKCcnLCBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLmhhc0luc3RhbmNlIHx8IFN5bWJvbFBvbHlmaWxsKCdoYXNJbnN0YW5jZScpKSxcbiAgICAgICAgICBpc0NvbmNhdFNwcmVhZGFibGU6IGQyKCcnLCBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSB8fCBTeW1ib2xQb2x5ZmlsbCgnaXNDb25jYXRTcHJlYWRhYmxlJykpLFxuICAgICAgICAgIGl0ZXJhdG9yOiBkMignJywgTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5pdGVyYXRvciB8fCBTeW1ib2xQb2x5ZmlsbCgnaXRlcmF0b3InKSksXG4gICAgICAgICAgbWF0Y2g6IGQyKCcnLCBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLm1hdGNoIHx8IFN5bWJvbFBvbHlmaWxsKCdtYXRjaCcpKSxcbiAgICAgICAgICByZXBsYWNlOiBkMignJywgTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5yZXBsYWNlIHx8IFN5bWJvbFBvbHlmaWxsKCdyZXBsYWNlJykpLFxuICAgICAgICAgIHNlYXJjaDogZDIoJycsIE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuc2VhcmNoIHx8IFN5bWJvbFBvbHlmaWxsKCdzZWFyY2gnKSksXG4gICAgICAgICAgc3BlY2llczogZDIoJycsIE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuc3BlY2llcyB8fCBTeW1ib2xQb2x5ZmlsbCgnc3BlY2llcycpKSxcbiAgICAgICAgICBzcGxpdDogZDIoJycsIE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuc3BsaXQgfHwgU3ltYm9sUG9seWZpbGwoJ3NwbGl0JykpLFxuICAgICAgICAgIHRvUHJpbWl0aXZlOiBkMignJywgTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC50b1ByaW1pdGl2ZSB8fCBTeW1ib2xQb2x5ZmlsbCgndG9QcmltaXRpdmUnKSksXG4gICAgICAgICAgdG9TdHJpbmdUYWc6IGQyKCcnLCBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFN5bWJvbFBvbHlmaWxsKCd0b1N0cmluZ1RhZycpKSxcbiAgICAgICAgICB1bnNjb3BhYmxlczogZDIoJycsIE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wudW5zY29wYWJsZXMgfHwgU3ltYm9sUG9seWZpbGwoJ3Vuc2NvcGFibGVzJykpXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9zeW1ib2xfcmVnaXN0cnkgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGQyID0gcmVxdWlyZV9kKCk7XG4gICAgICB2YXIgdmFsaWRhdGVTeW1ib2wgPSByZXF1aXJlX3ZhbGlkYXRlX3N5bWJvbCgpO1xuICAgICAgdmFyIHJlZ2lzdHJ5ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oU3ltYm9sUG9seWZpbGwpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFN5bWJvbFBvbHlmaWxsLCB7XG4gICAgICAgICAgZm9yOiBkMihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGlmIChyZWdpc3RyeVtrZXldKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWdpc3RyeVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJ5W2tleV0gPSBTeW1ib2xQb2x5ZmlsbChTdHJpbmcoa2V5KSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAga2V5Rm9yOiBkMihmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgICAgIHZhciBrZXk7XG4gICAgICAgICAgICB2YWxpZGF0ZVN5bWJvbChzeW1ib2wpO1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5W2tleV0gPT09IHN5bWJvbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3BvbHlmaWxsID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBkMiA9IHJlcXVpcmVfZCgpO1xuICAgICAgdmFyIHZhbGlkYXRlU3ltYm9sID0gcmVxdWlyZV92YWxpZGF0ZV9zeW1ib2woKTtcbiAgICAgIHZhciBOYXRpdmVTeW1ib2wgPSByZXF1aXJlX2dsb2JhbF90aGlzKCkuU3ltYm9sO1xuICAgICAgdmFyIGdlbmVyYXRlTmFtZSA9IHJlcXVpcmVfZ2VuZXJhdGVfbmFtZSgpO1xuICAgICAgdmFyIHNldHVwU3RhbmRhcmRTeW1ib2xzID0gcmVxdWlyZV9zdGFuZGFyZF9zeW1ib2xzKCk7XG4gICAgICB2YXIgc2V0dXBTeW1ib2xSZWdpc3RyeSA9IHJlcXVpcmVfc3ltYm9sX3JlZ2lzdHJ5KCk7XG4gICAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbiAgICAgIHZhciBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG4gICAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgICB2YXIgU3ltYm9sUG9seWZpbGw7XG4gICAgICB2YXIgSGlkZGVuU3ltYm9sO1xuICAgICAgdmFyIGlzTmF0aXZlU2FmZTtcbiAgICAgIGlmICh0eXBlb2YgTmF0aXZlU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgU3RyaW5nKE5hdGl2ZVN5bWJvbCgpKTtcbiAgICAgICAgICBpc05hdGl2ZVNhZmUgPSB0cnVlO1xuICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBOYXRpdmVTeW1ib2wgPSBudWxsO1xuICAgICAgfVxuICAgICAgSGlkZGVuU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sMihkZXNjcmlwdGlvbikge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEhpZGRlblN5bWJvbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTeW1ib2xQb2x5ZmlsbChkZXNjcmlwdGlvbik7XG4gICAgICB9O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBTeW1ib2xQb2x5ZmlsbCA9IGZ1bmN0aW9uIFN5bWJvbDIoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIHN5bWJvbDtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmF0aXZlU2FmZSkge1xuICAgICAgICAgIHJldHVybiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHN5bWJvbCA9IGNyZWF0ZShIaWRkZW5TeW1ib2wucHJvdG90eXBlKTtcbiAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbiA9PT0gdm9pZCAwID8gJycgOiBTdHJpbmcoZGVzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydGllcyhzeW1ib2wsIHtcbiAgICAgICAgICBfX2Rlc2NyaXB0aW9uX186IGQyKCcnLCBkZXNjcmlwdGlvbiksXG4gICAgICAgICAgX19uYW1lX186IGQyKCcnLCBnZW5lcmF0ZU5hbWUoZGVzY3JpcHRpb24pKVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICBzZXR1cFN0YW5kYXJkU3ltYm9scyhTeW1ib2xQb2x5ZmlsbCk7XG4gICAgICBzZXR1cFN5bWJvbFJlZ2lzdHJ5KFN5bWJvbFBvbHlmaWxsKTtcbiAgICAgIGRlZmluZVByb3BlcnRpZXMoSGlkZGVuU3ltYm9sLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3RvcjogZDIoU3ltYm9sUG9seWZpbGwpLFxuICAgICAgICB0b1N0cmluZzogZDIoJycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9fbmFtZV9fO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICBkZWZpbmVQcm9wZXJ0aWVzKFN5bWJvbFBvbHlmaWxsLnByb3RvdHlwZSwge1xuICAgICAgICB0b1N0cmluZzogZDIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICdTeW1ib2wgKCcgKyB2YWxpZGF0ZVN5bWJvbCh0aGlzKS5fX2Rlc2NyaXB0aW9uX18gKyAnKSc7XG4gICAgICAgIH0pLFxuICAgICAgICB2YWx1ZU9mOiBkMihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGVTeW1ib2wodGhpcyk7XG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIGRlZmluZVByb3BlcnR5KFN5bWJvbFBvbHlmaWxsLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9QcmltaXRpdmUsIGQyKCcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN5bWJvbCA9IHZhbGlkYXRlU3ltYm9sKHRoaXMpO1xuICAgICAgICBpZiAoX3R5cGVvZihzeW1ib2wpID09PSAnc3ltYm9sJykge1xuICAgICAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN5bWJvbC50b1N0cmluZygpO1xuICAgICAgfSkpO1xuICAgICAgZGVmaW5lUHJvcGVydHkoU3ltYm9sUG9seWZpbGwucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywgZDIoJ2MnLCAnU3ltYm9sJykpO1xuICAgICAgZGVmaW5lUHJvcGVydHkoSGlkZGVuU3ltYm9sLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIGQyKCdjJywgU3ltYm9sUG9seWZpbGwucHJvdG90eXBlW1N5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnXSkpO1xuICAgICAgZGVmaW5lUHJvcGVydHkoSGlkZGVuU3ltYm9sLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9QcmltaXRpdmUsIGQyKCdjJywgU3ltYm9sUG9seWZpbGwucHJvdG90eXBlW1N5bWJvbFBvbHlmaWxsLnRvUHJpbWl0aXZlXSkpO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2VzNl9zeW1ib2wgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlX2lzX2ltcGxlbWVudGVkNygpKCkgPyByZXF1aXJlX2dsb2JhbF90aGlzKCkuU3ltYm9sIDogcmVxdWlyZV9wb2x5ZmlsbCgpO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX2FyZ3VtZW50cyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgb2JqVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgICAgdmFyIGlkID0gb2JqVG9TdHJpbmcuY2FsbChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cztcbiAgICAgIH0oKSk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gaWQ7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX2Z1bmN0aW9uID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBvYmpUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgICB2YXIgaXNGdW5jdGlvblN0cmluZ1RhZyA9IFJlZ0V4cC5wcm90b3R5cGUudGVzdC5iaW5kKC9eW29iamVjdCBbQS1aYS16MC05XSpGdW5jdGlvbl0kLyk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgaXNGdW5jdGlvblN0cmluZ1RhZyhvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX3N0cmluZyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgb2JqVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgICAgdmFyIGlkID0gb2JqVG9TdHJpbmcuY2FsbCgnJyk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHZhbHVlICYmIF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcgfHwgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IGlkKSB8fCBmYWxzZTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfc2hpbTUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gcmVxdWlyZV9lczZfc3ltYm9sKCkuaXRlcmF0b3I7XG4gICAgICB2YXIgaXNBcmd1bWVudHMgPSByZXF1aXJlX2lzX2FyZ3VtZW50cygpO1xuICAgICAgdmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlX2lzX2Z1bmN0aW9uKCk7XG4gICAgICB2YXIgdG9Qb3NJbnQgPSByZXF1aXJlX3RvX3Bvc19pbnRlZ2VyKCk7XG4gICAgICB2YXIgY2FsbGFibGUgPSByZXF1aXJlX3ZhbGlkX2NhbGxhYmxlKCk7XG4gICAgICB2YXIgdmFsaWRWYWx1ZSA9IHJlcXVpcmVfdmFsaWRfdmFsdWUoKTtcbiAgICAgIHZhciBpc1ZhbHVlID0gcmVxdWlyZV9pc192YWx1ZSgpO1xuICAgICAgdmFyIGlzU3RyaW5nMiA9IHJlcXVpcmVfaXNfc3RyaW5nKCk7XG4gICAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4gICAgICB2YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuICAgICAgdmFyIGRlc2MgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9O1xuICAgICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheUxpa2UpIHtcbiAgICAgICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdLCB0aGlzQXJnID0gYXJndW1lbnRzWzJdLCBDb250ZXh0MiwgaSwgaiwgYXJyLCBsZW5ndGgsIGNvZGUsIGl0ZXJhdG9yLCByZXN1bHQsIGdldEl0ZXJhdG9yLCB2YWx1ZTtcbiAgICAgICAgYXJyYXlMaWtlID0gT2JqZWN0KHZhbGlkVmFsdWUoYXJyYXlMaWtlKSk7XG4gICAgICAgIGlmIChpc1ZhbHVlKG1hcEZuKSkge1xuICAgICAgICAgIGNhbGxhYmxlKG1hcEZuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMgfHwgdGhpcyA9PT0gQXJyYXkgfHwgIWlzRnVuY3Rpb24odGhpcykpIHtcbiAgICAgICAgICBpZiAoIW1hcEZuKSB7XG4gICAgICAgICAgICBpZiAoaXNBcmd1bWVudHMoYXJyYXlMaWtlKSkge1xuICAgICAgICAgICAgICBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuICAgICAgICAgICAgICBpZiAobGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmFwcGx5KG51bGwsIGFycmF5TGlrZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYXJyID0gbmV3IEFycmF5KDEpO1xuICAgICAgICAgICAgICBhcnJbMF0gPSBhcnJheUxpa2VbMF07XG4gICAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNBcnJheShhcnJheUxpa2UpKSB7XG4gICAgICAgICAgICAgIGFyciA9IG5ldyBBcnJheShsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoKTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgYXJyW2ldID0gYXJyYXlMaWtlW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGFyciA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIENvbnRleHQyID0gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXkoYXJyYXlMaWtlKSkge1xuICAgICAgICAgIGlmICgoZ2V0SXRlcmF0b3IgPSBhcnJheUxpa2VbaXRlcmF0b3JTeW1ib2xdKSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGNhbGxhYmxlKGdldEl0ZXJhdG9yKS5jYWxsKGFycmF5TGlrZSk7XG4gICAgICAgICAgICBpZiAoQ29udGV4dDIpIHtcbiAgICAgICAgICAgICAgYXJyID0gbmV3IENvbnRleHQyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBtYXBGbiA/IGNhbGwuY2FsbChtYXBGbiwgdGhpc0FyZywgcmVzdWx0LnZhbHVlLCBpKSA6IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKENvbnRleHQyKSB7XG4gICAgICAgICAgICAgICAgZGVzYy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KGFyciwgaSwgZGVzYyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZW5ndGggPSBpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcyKGFycmF5TGlrZSkpIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoQ29udGV4dDIpIHtcbiAgICAgICAgICAgICAgYXJyID0gbmV3IENvbnRleHQyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gYXJyYXlMaWtlW2ldO1xuICAgICAgICAgICAgICBpZiAoaSArIDEgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA+PSA1NTI5NiAmJiBjb2RlIDw9IDU2MzE5KSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSArPSBhcnJheUxpa2VbKytpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFsdWUgPSBtYXBGbiA/IGNhbGwuY2FsbChtYXBGbiwgdGhpc0FyZywgdmFsdWUsIGopIDogdmFsdWU7XG4gICAgICAgICAgICAgIGlmIChDb250ZXh0Mikge1xuICAgICAgICAgICAgICAgIGRlc2MudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShhcnIsIGosIGRlc2MpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycltqXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICsrajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlbmd0aCA9IGo7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvUG9zSW50KGFycmF5TGlrZS5sZW5ndGgpO1xuICAgICAgICAgIGlmIChDb250ZXh0Mikge1xuICAgICAgICAgICAgYXJyID0gbmV3IENvbnRleHQyKGxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFsdWUgPSBtYXBGbiA/IGNhbGwuY2FsbChtYXBGbiwgdGhpc0FyZywgYXJyYXlMaWtlW2ldLCBpKSA6IGFycmF5TGlrZVtpXTtcbiAgICAgICAgICAgIGlmIChDb250ZXh0Mikge1xuICAgICAgICAgICAgICBkZXNjLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KGFyciwgaSwgZGVzYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhcnJbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbnRleHQyKSB7XG4gICAgICAgICAgZGVzYy52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgYXJyLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9mcm9tID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZV9pc19pbXBsZW1lbnRlZDUoKSgpID8gQXJyYXkuZnJvbSA6IHJlcXVpcmVfc2hpbTUoKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV90b19hcnJheSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZnJvbSA9IHJlcXVpcmVfZnJvbSgpO1xuICAgICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheUxpa2UpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkoYXJyYXlMaWtlKSA/IGFycmF5TGlrZSA6IGZyb20oYXJyYXlMaWtlKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfcmVzb2x2ZV9yZXNvbHZlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB0b0FycmF5MiA9IHJlcXVpcmVfdG9fYXJyYXkoKTtcbiAgICAgIHZhciBpc1ZhbHVlID0gcmVxdWlyZV9pc192YWx1ZSgpO1xuICAgICAgdmFyIGNhbGxhYmxlID0gcmVxdWlyZV92YWxpZF9jYWxsYWJsZSgpO1xuICAgICAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICAgICAgdmFyIHJlc29sdmVBcmdzO1xuICAgICAgcmVzb2x2ZUFyZ3MgPSBmdW5jdGlvbiByZXNvbHZlQXJncyhhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihyZXNvbHZlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUgPyByZXNvbHZlKGFyZ3NbaV0pIDogYXJnc1tpXTtcbiAgICAgICAgfSkuY29uY2F0KHNsaWNlLmNhbGwoYXJncywgdGhpcy5sZW5ndGgpKTtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlc29sdmVycykge1xuICAgICAgICByZXNvbHZlcnMgPSB0b0FycmF5MihyZXNvbHZlcnMpO1xuICAgICAgICByZXNvbHZlcnMuZm9yRWFjaChmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgaWYgKGlzVmFsdWUocmVzb2x2ZSkpIHtcbiAgICAgICAgICAgIGNhbGxhYmxlKHJlc29sdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNvbHZlQXJncy5iaW5kKHJlc29sdmVycyk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3Jlc29sdmVfbm9ybWFsaXplID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBjYWxsYWJsZSA9IHJlcXVpcmVfdmFsaWRfY2FsbGFibGUoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlck5vcm1hbGl6ZXIpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZXI7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlck5vcm1hbGl6ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2V0OiB1c2VyTm9ybWFsaXplcixcbiAgICAgICAgICAgIGdldDogdXNlck5vcm1hbGl6ZXJcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIG5vcm1hbGl6ZXIgPSB7XG4gICAgICAgICAgZ2V0OiBjYWxsYWJsZSh1c2VyTm9ybWFsaXplci5nZXQpXG4gICAgICAgIH07XG4gICAgICAgIGlmICh1c2VyTm9ybWFsaXplci5zZXQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIG5vcm1hbGl6ZXIuc2V0ID0gY2FsbGFibGUodXNlck5vcm1hbGl6ZXIuc2V0KTtcbiAgICAgICAgICBpZiAodXNlck5vcm1hbGl6ZXJbJ2RlbGV0ZSddKSB7XG4gICAgICAgICAgICBub3JtYWxpemVyWydkZWxldGUnXSA9IGNhbGxhYmxlKHVzZXJOb3JtYWxpemVyWydkZWxldGUnXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh1c2VyTm9ybWFsaXplci5jbGVhcikge1xuICAgICAgICAgICAgbm9ybWFsaXplci5jbGVhciA9IGNhbGxhYmxlKHVzZXJOb3JtYWxpemVyLmNsZWFyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZXI7XG4gICAgICAgIH1cbiAgICAgICAgbm9ybWFsaXplci5zZXQgPSBub3JtYWxpemVyLmdldDtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZXI7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2NvbmZpZ3VyZV9tYXAgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGN1c3RvbUVycm9yID0gcmVxdWlyZV9jdXN0b20oKTtcbiAgICAgIHZhciBkZWZpbmVMZW5ndGggPSByZXF1aXJlX2RlZmluZV9sZW5ndGgoKTtcbiAgICAgIHZhciBkMiA9IHJlcXVpcmVfZCgpO1xuICAgICAgdmFyIGVlID0gcmVxdWlyZV9ldmVudF9lbWl0dGVyKCkubWV0aG9kcztcbiAgICAgIHZhciByZXNvbHZlUmVzb2x2ZSA9IHJlcXVpcmVfcmVzb2x2ZV9yZXNvbHZlKCk7XG4gICAgICB2YXIgcmVzb2x2ZU5vcm1hbGl6ZSA9IHJlcXVpcmVfcmVzb2x2ZV9ub3JtYWxpemUoKTtcbiAgICAgIHZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbiAgICAgIHZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG4gICAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbiAgICAgIHZhciBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG4gICAgICB2YXIgX29uID0gZWUub247XG4gICAgICB2YXIgZW1pdCA9IGVlLmVtaXQ7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsLCBsZW5ndGgsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNhY2hlMiA9IGNyZWF0ZShudWxsKSwgY29uZiwgbWVtTGVuZ3RoLCBnZXQyLCBzZXQyLCBkZWwsIF9jbGVhciwgZXh0RGVsLCBleHRHZXQsIGV4dEhhcywgbm9ybWFsaXplciwgZ2V0TGlzdGVuZXJzLCBzZXRMaXN0ZW5lcnMsIGRlbGV0ZUxpc3RlbmVycywgbWVtb2l6ZWQsIHJlc29sdmU7XG4gICAgICAgIGlmIChsZW5ndGggIT09IGZhbHNlKSB7XG4gICAgICAgICAgbWVtTGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTmFOKG9yaWdpbmFsLmxlbmd0aCkpIHtcbiAgICAgICAgICBtZW1MZW5ndGggPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lbUxlbmd0aCA9IG9yaWdpbmFsLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5ub3JtYWxpemVyKSB7XG4gICAgICAgICAgbm9ybWFsaXplciA9IHJlc29sdmVOb3JtYWxpemUob3B0aW9ucy5ub3JtYWxpemVyKTtcbiAgICAgICAgICBnZXQyID0gbm9ybWFsaXplci5nZXQ7XG4gICAgICAgICAgc2V0MiA9IG5vcm1hbGl6ZXIuc2V0O1xuICAgICAgICAgIGRlbCA9IG5vcm1hbGl6ZXJbJ2RlbGV0ZSddO1xuICAgICAgICAgIF9jbGVhciA9IG5vcm1hbGl6ZXIuY2xlYXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVzb2x2ZXJzICE9IG51bGwpIHtcbiAgICAgICAgICByZXNvbHZlID0gcmVzb2x2ZVJlc29sdmUob3B0aW9ucy5yZXNvbHZlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXQyKSB7XG4gICAgICAgICAgbWVtb2l6ZWQgPSBkZWZpbmVMZW5ndGgoZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgICAgICB2YXIgaWQsIHJlc3VsdCwgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgIGFyZ3MgPSByZXNvbHZlKGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWQgPSBnZXQyKGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlMiwgaWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldExpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgY29uZi5lbWl0KCdnZXQnLCBpZCwgYXJncywgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZTJbaWRdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gY2FsbC5jYWxsKG9yaWdpbmFsLCB0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGFwcGx5LmNhbGwob3JpZ2luYWwsIHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlkID0gZ2V0MihhcmdzKTtcbiAgICAgICAgICAgICAgaWYgKGlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgY3VzdG9tRXJyb3IoJ0NpcmN1bGFyIGludm9jYXRpb24nLCAnQ0lSQ1VMQVJfSU5WT0NBVElPTicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlkID0gc2V0MihhcmdzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZTIsIGlkKSkge1xuICAgICAgICAgICAgICB0aHJvdyBjdXN0b21FcnJvcignQ2lyY3VsYXIgaW52b2NhdGlvbicsICdDSVJDVUxBUl9JTlZPQ0FUSU9OJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZTJbaWRdID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKHNldExpc3RlbmVycykge1xuICAgICAgICAgICAgICBjb25mLmVtaXQoJ3NldCcsIGlkLCBudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9LCBtZW1MZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIG1lbW9pemVkID0gZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY2FjaGUyLCAnZGF0YScpKSB7XG4gICAgICAgICAgICAgIGlmIChnZXRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBjb25mLmVtaXQoJ2dldCcsICdkYXRhJywgYXJndW1lbnRzLCB0aGlzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gY2FjaGUyLmRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN1bHQgPSBhcHBseS5jYWxsKG9yaWdpbmFsLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gY2FsbC5jYWxsKG9yaWdpbmFsLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlMiwgJ2RhdGEnKSkge1xuICAgICAgICAgICAgICB0aHJvdyBjdXN0b21FcnJvcignQ2lyY3VsYXIgaW52b2NhdGlvbicsICdDSVJDVUxBUl9JTlZPQ0FUSU9OJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZTIuZGF0YSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChzZXRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgY29uZi5lbWl0KCdzZXQnLCAnZGF0YScsIG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWVtb2l6ZWQgPSBmdW5jdGlvbiBtZW1vaXplZChhcmcpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGFyZ3MgPSBhcmd1bWVudHMsIGlkO1xuICAgICAgICAgICAgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgYXJncyA9IHJlc29sdmUoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlkID0gU3RyaW5nKGFyZ3NbMF0pO1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY2FjaGUyLCBpZCkpIHtcbiAgICAgICAgICAgICAgaWYgKGdldExpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGNvbmYuZW1pdCgnZ2V0JywgaWQsIGFyZ3MsIHRoaXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZTJbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGwuY2FsbChvcmlnaW5hbCwgdGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQgPSBhcHBseS5jYWxsKG9yaWdpbmFsLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlMiwgaWQpKSB7XG4gICAgICAgICAgICAgIHRocm93IGN1c3RvbUVycm9yKCdDaXJjdWxhciBpbnZvY2F0aW9uJywgJ0NJUkNVTEFSX0lOVk9DQVRJT04nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlMltpZF0gPSByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoc2V0TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgIGNvbmYuZW1pdCgnc2V0JywgaWQsIG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uZiA9IHtcbiAgICAgICAgICBvcmlnaW5hbDogb3JpZ2luYWwsXG4gICAgICAgICAgbWVtb2l6ZWQ6IG1lbW9pemVkLFxuICAgICAgICAgIHByb2ZpbGVOYW1lOiBvcHRpb25zLnByb2ZpbGVOYW1lLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGFyZ3MpIHtcbiAgICAgICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgIGFyZ3MgPSByZXNvbHZlKGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldDIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldDIoYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGFyZ3NbMF0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlMiwgaWQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKGlkKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlMiwgaWQpKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWwpIHtcbiAgICAgICAgICAgICAgZGVsKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGNhY2hlMltpZF07XG4gICAgICAgICAgICBkZWxldGUgY2FjaGUyW2lkXTtcbiAgICAgICAgICAgIGlmIChkZWxldGVMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgY29uZi5lbWl0KCdkZWxldGUnLCBpZCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgICAgIHZhciBvbGRDYWNoZSA9IGNhY2hlMjtcbiAgICAgICAgICAgIGlmIChfY2xlYXIpIHtcbiAgICAgICAgICAgICAgX2NsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZTIgPSBjcmVhdGUobnVsbCk7XG4gICAgICAgICAgICBjb25mLmVtaXQoJ2NsZWFyJywgb2xkQ2FjaGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb246IGZ1bmN0aW9uIG9uKHR5cGUyLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgaWYgKHR5cGUyID09PSAnZ2V0Jykge1xuICAgICAgICAgICAgICBnZXRMaXN0ZW5lcnMgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlMiA9PT0gJ3NldCcpIHtcbiAgICAgICAgICAgICAgc2V0TGlzdGVuZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZTIgPT09ICdkZWxldGUnKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZUxpc3RlbmVycyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX29uLmNhbGwodGhpcywgdHlwZTIsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVtaXQ6IGVtaXQsXG4gICAgICAgICAgdXBkYXRlRW52OiBmdW5jdGlvbiB1cGRhdGVFbnYoKSB7XG4gICAgICAgICAgICBvcmlnaW5hbCA9IGNvbmYub3JpZ2luYWw7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZ2V0Mikge1xuICAgICAgICAgIGV4dERlbCA9IGRlZmluZUxlbmd0aChmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIHZhciBpZCwgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgIGFyZ3MgPSByZXNvbHZlKGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWQgPSBnZXQyKGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZbJ2RlbGV0ZSddKGlkKTtcbiAgICAgICAgICB9LCBtZW1MZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGV4dERlbCA9IGZ1bmN0aW9uIGV4dERlbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25mWydkZWxldGUnXSgnZGF0YScpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXh0RGVsID0gZnVuY3Rpb24gZXh0RGVsKGFyZykge1xuICAgICAgICAgICAgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgYXJnID0gcmVzb2x2ZShhcmd1bWVudHMpWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbmZbJ2RlbGV0ZSddKGFyZyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBleHRHZXQgPSBkZWZpbmVMZW5ndGgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGlkLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZTIuZGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICAgIGFyZ3MgPSByZXNvbHZlKGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZ2V0Mikge1xuICAgICAgICAgICAgaWQgPSBnZXQyKGFyZ3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZCA9IFN0cmluZyhhcmdzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNhY2hlMltpZF07XG4gICAgICAgIH0pO1xuICAgICAgICBleHRIYXMgPSBkZWZpbmVMZW5ndGgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGlkLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjb25mLmhhcygnZGF0YScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgYXJncyA9IHJlc29sdmUoYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChnZXQyKSB7XG4gICAgICAgICAgICBpZCA9IGdldDIoYXJncyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gU3RyaW5nKGFyZ3NbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbmYuaGFzKGlkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMobWVtb2l6ZWQsIHtcbiAgICAgICAgICBfX21lbW9pemVkX186IGQyKHRydWUpLFxuICAgICAgICAgIGRlbGV0ZTogZDIoZXh0RGVsKSxcbiAgICAgICAgICBjbGVhcjogZDIoY29uZi5jbGVhciksXG4gICAgICAgICAgX2dldDogZDIoZXh0R2V0KSxcbiAgICAgICAgICBfaGFzOiBkMihleHRIYXMpXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29uZjtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfcGxhaW4gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGNhbGxhYmxlID0gcmVxdWlyZV92YWxpZF9jYWxsYWJsZSgpO1xuICAgICAgdmFyIGZvckVhY2ggPSByZXF1aXJlX2Zvcl9lYWNoKCk7XG4gICAgICB2YXIgZXh0ZW5zaW9ucyA9IHJlcXVpcmVfcmVnaXN0ZXJlZF9leHRlbnNpb25zKCk7XG4gICAgICB2YXIgY29uZmlndXJlNCA9IHJlcXVpcmVfY29uZmlndXJlX21hcCgpO1xuICAgICAgdmFyIHJlc29sdmVMZW5ndGggPSByZXF1aXJlX3Jlc29sdmVfbGVuZ3RoKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNlbGYyKGZuKSB7XG4gICAgICAgIHZhciBvcHRpb25zLCBsZW5ndGgsIGNvbmY7XG4gICAgICAgIGNhbGxhYmxlKGZuKTtcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdChhcmd1bWVudHNbMV0pO1xuICAgICAgICBpZiAob3B0aW9ucy5hc3luYyAmJiBvcHRpb25zLnByb21pc2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09wdGlvbnMgXFwnYXN5bmNcXCcgYW5kIFxcJ3Byb21pc2VcXCcgY2Fubm90IGJlIHVzZWQgdG9nZXRoZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmbiwgJ19fbWVtb2l6ZWRfXycpICYmICFvcHRpb25zLmZvcmNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCA9IHJlc29sdmVMZW5ndGgob3B0aW9ucy5sZW5ndGgsIGZuLmxlbmd0aCwgb3B0aW9ucy5hc3luYyAmJiBleHRlbnNpb25zLmFzeW5jKTtcbiAgICAgICAgY29uZiA9IGNvbmZpZ3VyZTQoZm4sIGxlbmd0aCwgb3B0aW9ucyk7XG4gICAgICAgIGZvckVhY2goZXh0ZW5zaW9ucywgZnVuY3Rpb24oZXh0Rm4sIG5hbWUpIHtcbiAgICAgICAgICBpZiAob3B0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgZXh0Rm4ob3B0aW9uc1tuYW1lXSwgY29uZiwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNlbGYyLl9fcHJvZmlsZXJfXykge1xuICAgICAgICAgIHNlbGYyLl9fcHJvZmlsZXJfXyhjb25mKTtcbiAgICAgICAgfVxuICAgICAgICBjb25mLnVwZGF0ZUVudigpO1xuICAgICAgICByZXR1cm4gY29uZi5tZW1vaXplZDtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfcHJpbWl0aXZlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaWQsIGksIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiAnXFx4MDInO1xuICAgICAgICB9XG4gICAgICAgIGlkID0gU3RyaW5nKGFyZ3NbaSA9IDBdKTtcbiAgICAgICAgd2hpbGUgKC0tbGVuZ3RoKSB7XG4gICAgICAgICAgaWQgKz0gJ1xceDAxJyArIGFyZ3NbKytpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2dldF9wcmltaXRpdmVfZml4ZWQgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciBpZCA9IFN0cmluZyhhcmdzWzBdKSwgaSA9IDAsIGN1cnJlbnRMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tY3VycmVudExlbmd0aCkge1xuICAgICAgICAgICAgaWQgKz0gJ1xceDAxJyArIGFyZ3NbKytpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19pbXBsZW1lbnRlZDggPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOO1xuICAgICAgICBpZiAodHlwZW9mIG51bWJlcklzTmFOICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhbnVtYmVySXNOYU4oe30pICYmIG51bWJlcklzTmFOKE5hTikgJiYgIW51bWJlcklzTmFOKDM0KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfc2hpbTYgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19uYW4gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlX2lzX2ltcGxlbWVudGVkOCgpKCkgPyBOdW1iZXIuaXNOYU4gOiByZXF1aXJlX3NoaW02KCk7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZV9pbmRleF9vZiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgbnVtYmVySXNOYU4gPSByZXF1aXJlX2lzX25hbigpO1xuICAgICAgdmFyIHRvUG9zSW50ID0gcmVxdWlyZV90b19wb3NfaW50ZWdlcigpO1xuICAgICAgdmFyIHZhbHVlID0gcmVxdWlyZV92YWxpZF92YWx1ZSgpO1xuICAgICAgdmFyIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbiAgICAgIHZhciBvYmpIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gICAgICB2YXIgYWJzID0gTWF0aC5hYnM7XG4gICAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzZWFyY2hFbGVtZW50KSB7XG4gICAgICAgIHZhciBpLCBsZW5ndGgsIGZyb21JbmRleCwgdmFsO1xuICAgICAgICBpZiAoIW51bWJlcklzTmFOKHNlYXJjaEVsZW1lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggPSB0b1Bvc0ludCh2YWx1ZSh0aGlzKS5sZW5ndGgpO1xuICAgICAgICBmcm9tSW5kZXggPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGlmIChpc05hTihmcm9tSW5kZXgpKSB7XG4gICAgICAgICAgZnJvbUluZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChmcm9tSW5kZXggPj0gMCkge1xuICAgICAgICAgIGZyb21JbmRleCA9IGZsb29yKGZyb21JbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJvbUluZGV4ID0gdG9Qb3NJbnQodGhpcy5sZW5ndGgpIC0gZmxvb3IoYWJzKGZyb21JbmRleCkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IGZyb21JbmRleDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgaWYgKG9iakhhc093blByb3BlcnR5LmNhbGwodGhpcywgaSkpIHtcbiAgICAgICAgICAgIHZhbCA9IHRoaXNbaV07XG4gICAgICAgICAgICBpZiAobnVtYmVySXNOYU4odmFsKSkge1xuICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9nZXQgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGluZGV4T2YgPSByZXF1aXJlX2VfaW5kZXhfb2YoKTtcbiAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxhc3RJZCA9IDAsIG1hcCA9IFtdLCBjYWNoZTIgPSBjcmVhdGUobnVsbCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoYXJncykge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gMCwgc2V0MiA9IG1hcCwgaSwgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZXQyW2xlbmd0aF0gfHwgbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZXQyID0gc2V0MltsZW5ndGhdKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBpID0gaW5kZXhPZi5jYWxsKHNldDJbMF0sIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXQyID0gc2V0MlsxXVtpXTtcbiAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGkgPSBpbmRleE9mLmNhbGwoc2V0MlswXSwgYXJnc1tpbmRleF0pO1xuICAgICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gc2V0MlsxXVtpXSB8fCBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChhcmdzKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAwLCBzZXQyID0gbWFwLCBpLCBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgc2V0MltsZW5ndGhdID0gKytsYXN0SWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIXNldDJbbGVuZ3RoXSkge1xuICAgICAgICAgICAgICAgIHNldDJbbGVuZ3RoXSA9IFsgW10sIFtdIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2V0MiA9IHNldDJbbGVuZ3RoXTtcbiAgICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGkgPSBpbmRleE9mLmNhbGwoc2V0MlswXSwgYXJnc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgaSA9IHNldDJbMF0ucHVzaChhcmdzW2luZGV4XSkgLSAxO1xuICAgICAgICAgICAgICAgICAgc2V0MlsxXS5wdXNoKFsgW10sIFtdIF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXQyID0gc2V0MlsxXVtpXTtcbiAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGkgPSBpbmRleE9mLmNhbGwoc2V0MlswXSwgYXJnc1tpbmRleF0pO1xuICAgICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpID0gc2V0MlswXS5wdXNoKGFyZ3NbaW5kZXhdKSAtIDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2V0MlsxXVtpXSA9ICsrbGFzdElkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FjaGUyW2xhc3RJZF0gPSBhcmdzO1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RJZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShpZCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gMCwgc2V0MiA9IG1hcCwgaSwgYXJncyA9IGNhY2hlMltpZF0sIGxlbmd0aCA9IGFyZ3MubGVuZ3RoLCBwYXRoID0gW107XG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBzZXQyW2xlbmd0aF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNldDIgPSBzZXQyW2xlbmd0aF0pIHtcbiAgICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGkgPSBpbmRleE9mLmNhbGwoc2V0MlswXSwgYXJnc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXRoLnB1c2goc2V0MiwgaSk7XG4gICAgICAgICAgICAgICAgc2V0MiA9IHNldDJbMV1baV07XG4gICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpID0gaW5kZXhPZi5jYWxsKHNldDJbMF0sIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlkID0gc2V0MlsxXVtpXTtcbiAgICAgICAgICAgICAgc2V0MlswXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIHNldDJbMV0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICB3aGlsZSAoIXNldDJbMF0ubGVuZ3RoICYmIHBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaSA9IHBhdGgucG9wKCk7XG4gICAgICAgICAgICAgICAgc2V0MiA9IHBhdGgucG9wKCk7XG4gICAgICAgICAgICAgICAgc2V0MlswXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgc2V0MlsxXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZTJbaWRdO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICAgICAgbWFwID0gW107XG4gICAgICAgICAgICBjYWNoZTIgPSBjcmVhdGUobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9nZXRfMSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgaW5kZXhPZiA9IHJlcXVpcmVfZV9pbmRleF9vZigpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxhc3RJZCA9IDAsIGFyZ3NNYXAgPSBbXSwgY2FjaGUyID0gW107XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoYXJncykge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhPZi5jYWxsKGFyZ3NNYXAsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAtMSA/IG51bGwgOiBjYWNoZTJbaW5kZXhdO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoYXJncykge1xuICAgICAgICAgICAgYXJnc01hcC5wdXNoKGFyZ3NbMF0pO1xuICAgICAgICAgICAgY2FjaGUyLnB1c2goKytsYXN0SWQpO1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RJZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShpZCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhPZi5jYWxsKGNhY2hlMiwgaWQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICBhcmdzTWFwLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgIGNhY2hlMi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICAgICAgYXJnc01hcCA9IFtdO1xuICAgICAgICAgICAgY2FjaGUyID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9nZXRfZml4ZWQgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGluZGV4T2YgPSByZXF1aXJlX2VfaW5kZXhfb2YoKTtcbiAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgICAgdmFyIGxhc3RJZCA9IDAsIG1hcCA9IFsgW10sIFtdIF0sIGNhY2hlMiA9IGNyZWF0ZShudWxsKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChhcmdzKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAwLCBzZXQyID0gbWFwLCBpO1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBpID0gaW5kZXhPZi5jYWxsKHNldDJbMF0sIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2V0MiA9IHNldDJbMV1baV07XG4gICAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpID0gaW5kZXhPZi5jYWxsKHNldDJbMF0sIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXQyWzFdW2ldIHx8IG51bGw7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChhcmdzKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAwLCBzZXQyID0gbWFwLCBpO1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBpID0gaW5kZXhPZi5jYWxsKHNldDJbMF0sIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaSA9IHNldDJbMF0ucHVzaChhcmdzW2luZGV4XSkgLSAxO1xuICAgICAgICAgICAgICAgIHNldDJbMV0ucHVzaChbIFtdLCBbXSBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZXQyID0gc2V0MlsxXVtpXTtcbiAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSBpbmRleE9mLmNhbGwoc2V0MlswXSwgYXJnc1tpbmRleF0pO1xuICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgICAgIGkgPSBzZXQyWzBdLnB1c2goYXJnc1tpbmRleF0pIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldDJbMV1baV0gPSArK2xhc3RJZDtcbiAgICAgICAgICAgIGNhY2hlMltsYXN0SWRdID0gYXJncztcbiAgICAgICAgICAgIHJldHVybiBsYXN0SWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoaWQpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IDAsIHNldDIgPSBtYXAsIGksIHBhdGggPSBbXSwgYXJncyA9IGNhY2hlMltpZF07XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGkgPSBpbmRleE9mLmNhbGwoc2V0MlswXSwgYXJnc1tpbmRleF0pO1xuICAgICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGF0aC5wdXNoKHNldDIsIGkpO1xuICAgICAgICAgICAgICBzZXQyID0gc2V0MlsxXVtpXTtcbiAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSBpbmRleE9mLmNhbGwoc2V0MlswXSwgYXJnc1tpbmRleF0pO1xuICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlkID0gc2V0MlsxXVtpXTtcbiAgICAgICAgICAgIHNldDJbMF0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgc2V0MlsxXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB3aGlsZSAoIXNldDJbMF0ubGVuZ3RoICYmIHBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGkgPSBwYXRoLnBvcCgpO1xuICAgICAgICAgICAgICBzZXQyID0gcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgc2V0MlswXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIHNldDJbMV0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIGNhY2hlMltpZF07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgICAgICBtYXAgPSBbIFtdLCBbXSBdO1xuICAgICAgICAgICAgY2FjaGUyID0gY3JlYXRlKG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfbWFwID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBjYWxsYWJsZSA9IHJlcXVpcmVfdmFsaWRfY2FsbGFibGUoKTtcbiAgICAgIHZhciBmb3JFYWNoID0gcmVxdWlyZV9mb3JfZWFjaCgpO1xuICAgICAgdmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBjYikge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge30sIHRoaXNBcmcgPSBhcmd1bWVudHNbMl07XG4gICAgICAgIGNhbGxhYmxlKGNiKTtcbiAgICAgICAgZm9yRWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIHRhcmdldE9iaiwgaW5kZXgpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IGNhbGwuY2FsbChjYiwgdGhpc0FyZywgdmFsdWUsIGtleSwgdGFyZ2V0T2JqLCBpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9uZXh0X3RpY2sgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGVuc3VyZUNhbGxhYmxlID0gZnVuY3Rpb24gZW5zdXJlQ2FsbGFibGUoZm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfTtcbiAgICAgIHZhciBieU9ic2VydmVyID0gZnVuY3Rpb24gYnlPYnNlcnZlcihPYnNlcnZlcikge1xuICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSwgcXVldWUyLCBjdXJyZW50UXVldWUsIGkgPSAwO1xuICAgICAgICBuZXcgT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrO1xuICAgICAgICAgIGlmICghcXVldWUyKSB7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWV1ZTIgPSBjdXJyZW50UXVldWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgIHF1ZXVlMiA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWUyO1xuICAgICAgICAgIHF1ZXVlMiA9IG51bGw7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50UXVldWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY3VycmVudFF1ZXVlO1xuICAgICAgICAgICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUuZGF0YSA9IGkgPSArK2kgJSAyO1xuICAgICAgICAgIHdoaWxlIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY3VycmVudFF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5vYnNlcnZlKG5vZGUsIHtcbiAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICBlbnN1cmVDYWxsYWJsZShmbik7XG4gICAgICAgICAgaWYgKHF1ZXVlMikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBxdWV1ZTIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcXVldWUyID0gWyBxdWV1ZTIsIGZuIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBxdWV1ZTIucHVzaChmbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHF1ZXVlMiA9IGZuO1xuICAgICAgICAgIG5vZGUuZGF0YSA9IGkgPSArK2kgJSAyO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByb2Nlc3MpKSA9PT0gJ29iamVjdCcgJiYgcHJvY2VzcyAmJiB0eXBlb2YgcHJvY2Vzcy5uZXh0VGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKGVuc3VyZUNhbGxhYmxlKGNiKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZG9jdW1lbnQpKSA9PT0gJ29iamVjdCcgJiYgZG9jdW1lbnQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBieU9ic2VydmVyKE11dGF0aW9uT2JzZXJ2ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBieU9ic2VydmVyKFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjYikge1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGVuc3VyZUNhbGxhYmxlKGNiKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzZXRUaW1lb3V0KSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNiKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGVuc3VyZUNhbGxhYmxlKGNiKSwgMCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0oKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9hc3luYyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgYUZyb20gPSByZXF1aXJlX2Zyb20oKTtcbiAgICAgIHZhciBvYmplY3RNYXAgPSByZXF1aXJlX21hcCgpO1xuICAgICAgdmFyIG1peGluID0gcmVxdWlyZV9taXhpbigpO1xuICAgICAgdmFyIGRlZmluZUxlbmd0aCA9IHJlcXVpcmVfZGVmaW5lX2xlbmd0aCgpO1xuICAgICAgdmFyIG5leHRUaWNrID0gcmVxdWlyZV9uZXh0X3RpY2soKTtcbiAgICAgIHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiAgICAgIHZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbiAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgcmVxdWlyZV9yZWdpc3RlcmVkX2V4dGVuc2lvbnMoKS5hc3luYyA9IGZ1bmN0aW9uKHRiaSwgY29uZikge1xuICAgICAgICB2YXIgd2FpdGluZyA9IGNyZWF0ZShudWxsKSwgY2FjaGUyID0gY3JlYXRlKG51bGwpLCBiYXNlID0gY29uZi5tZW1vaXplZCwgb3JpZ2luYWwgPSBjb25mLm9yaWdpbmFsLCBjdXJyZW50Q2FsbGJhY2ssIGN1cnJlbnRDb250ZXh0LCBjdXJyZW50QXJncztcbiAgICAgICAgY29uZi5tZW1vaXplZCA9IGRlZmluZUxlbmd0aChmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywgbGFzdDIgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBsYXN0MiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY3VycmVudENhbGxiYWNrID0gbGFzdDI7XG4gICAgICAgICAgICBhcmdzID0gc2xpY2UuY2FsbChhcmdzLCAwLCAtMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBiYXNlLmFwcGx5KGN1cnJlbnRDb250ZXh0ID0gdGhpcywgY3VycmVudEFyZ3MgPSBhcmdzKTtcbiAgICAgICAgfSwgYmFzZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbWl4aW4oY29uZi5tZW1vaXplZCwgYmFzZSk7XG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cbiAgICAgICAgY29uZi5vbignZ2V0JywgZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICB2YXIgY2IsIGNvbnRleHQsIGFyZ3M7XG4gICAgICAgICAgaWYgKCFjdXJyZW50Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHdhaXRpbmdbaWRdKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdhaXRpbmdbaWRdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhaXRpbmdbaWRdID0gWyB3YWl0aW5nW2lkXSwgY3VycmVudENhbGxiYWNrIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3YWl0aW5nW2lkXS5wdXNoKGN1cnJlbnRDYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYiA9IGN1cnJlbnRDYWxsYmFjaztcbiAgICAgICAgICBjb250ZXh0ID0gY3VycmVudENvbnRleHQ7XG4gICAgICAgICAgYXJncyA9IGN1cnJlbnRBcmdzO1xuICAgICAgICAgIGN1cnJlbnRDYWxsYmFjayA9IGN1cnJlbnRDb250ZXh0ID0gY3VycmVudEFyZ3MgPSBudWxsO1xuICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZTIsIGlkKSkge1xuICAgICAgICAgICAgICBkYXRhID0gY2FjaGUyW2lkXTtcbiAgICAgICAgICAgICAgY29uZi5lbWl0KCdnZXRhc3luYycsIGlkLCBhcmdzLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgYXBwbHkuY2FsbChjYiwgZGF0YS5jb250ZXh0LCBkYXRhLmFyZ3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycmVudENhbGxiYWNrID0gY2I7XG4gICAgICAgICAgICAgIGN1cnJlbnRDb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgICAgY3VycmVudEFyZ3MgPSBhcmdzO1xuICAgICAgICAgICAgICBiYXNlLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uZi5vcmlnaW5hbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzLCBjYiwgb3JpZ0NiLCByZXN1bHQ7XG4gICAgICAgICAgaWYgKCFjdXJyZW50Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseS5jYWxsKG9yaWdpbmFsLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhcmdzID0gYUZyb20oYXJndW1lbnRzKTtcbiAgICAgICAgICBjYiA9IGZ1bmN0aW9uIHNlbGYyKGVycjIpIHtcbiAgICAgICAgICAgIHZhciBjYjIsIGFyZ3MyLCBpZCA9IHNlbGYyLmlkO1xuICAgICAgICAgICAgaWYgKGlkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgbmV4dFRpY2soYXBwbHkuYmluZChzZWxmMiwgdGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgc2VsZjIuaWQ7XG4gICAgICAgICAgICBjYjIgPSB3YWl0aW5nW2lkXTtcbiAgICAgICAgICAgIGRlbGV0ZSB3YWl0aW5nW2lkXTtcbiAgICAgICAgICAgIGlmICghY2IyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcmdzMiA9IGFGcm9tKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAoY29uZi5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgIGlmIChlcnIyKSB7XG4gICAgICAgICAgICAgICAgY29uZlsnZGVsZXRlJ10oaWQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhY2hlMltpZF0gPSB7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgYXJnczogYXJnczJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbmYuZW1pdCgnc2V0YXN5bmMnLCBpZCwgdHlwZW9mIGNiMiA9PT0gJ2Z1bmN0aW9uJyA/IDEgOiBjYjIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYjIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gYXBwbHkuY2FsbChjYjIsIHRoaXMsIGFyZ3MyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNiMi5mb3JFYWNoKGZ1bmN0aW9uKGNiMykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFwcGx5LmNhbGwoY2IzLCB0aGlzLCBhcmdzMik7XG4gICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIG9yaWdDYiA9IGN1cnJlbnRDYWxsYmFjaztcbiAgICAgICAgICBjdXJyZW50Q2FsbGJhY2sgPSBjdXJyZW50Q29udGV4dCA9IGN1cnJlbnRBcmdzID0gbnVsbDtcbiAgICAgICAgICBhcmdzLnB1c2goY2IpO1xuICAgICAgICAgIHJlc3VsdCA9IGFwcGx5LmNhbGwob3JpZ2luYWwsIHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIGNiLmNiID0gb3JpZ0NiO1xuICAgICAgICAgIGN1cnJlbnRDYWxsYmFjayA9IGNiO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIGNvbmYub24oJ3NldCcsIGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNvbmZbJ2RlbGV0ZSddKGlkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHdhaXRpbmdbaWRdKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdhaXRpbmdbaWRdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhaXRpbmdbaWRdID0gWyB3YWl0aW5nW2lkXSwgY3VycmVudENhbGxiYWNrLmNiIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3YWl0aW5nW2lkXS5wdXNoKGN1cnJlbnRDYWxsYmFjay5jYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhaXRpbmdbaWRdID0gY3VycmVudENhbGxiYWNrLmNiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWxldGUgY3VycmVudENhbGxiYWNrLmNiO1xuICAgICAgICAgIGN1cnJlbnRDYWxsYmFjay5pZCA9IGlkO1xuICAgICAgICAgIGN1cnJlbnRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25mLm9uKCdkZWxldGUnLCBmdW5jdGlvbihpZCkge1xuICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwod2FpdGluZywgaWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY2FjaGUyW2lkXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBjYWNoZTJbaWRdO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZTJbaWRdO1xuICAgICAgICAgIGNvbmYuZW1pdCgnZGVsZXRlYXN5bmMnLCBpZCwgc2xpY2UuY2FsbChyZXN1bHQuYXJncywgMSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uZi5vbignY2xlYXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgb2xkQ2FjaGUgPSBjYWNoZTI7XG4gICAgICAgICAgY2FjaGUyID0gY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGNvbmYuZW1pdCgnY2xlYXJhc3luYycsIG9iamVjdE1hcChvbGRDYWNoZSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHNsaWNlLmNhbGwoZGF0YS5hcmdzLCAxKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9wcmltaXRpdmVfc2V0ID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG4gICAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHZhciBzZXQyID0gY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3JFYWNoLmNhbGwoYXJndW1lbnRzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgc2V0MltuYW1lXSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2V0MjtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfaXNfY2FsbGFibGUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3ZhbGlkYXRlX3N0cmluZ2lmaWFibGUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlX2lzX2NhbGxhYmxlKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHN0cmluZ2lmaWFibGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc3RyaW5naWZpYWJsZSAmJiBpc0NhbGxhYmxlKHN0cmluZ2lmaWFibGUudG9TdHJpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5naWZpYWJsZS50b1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHN0cmluZ2lmaWFibGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFzc2VkIGFyZ3VtZW50IGNhbm5vdCBiZSBzdHJpbmdpZmVkJyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfdmFsaWRhdGVfc3RyaW5naWZpYWJsZV92YWx1ZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZW5zdXJlVmFsdWUgPSByZXF1aXJlX3ZhbGlkX3ZhbHVlKCk7XG4gICAgICB2YXIgc3RyaW5naWZpYWJsZSA9IHJlcXVpcmVfdmFsaWRhdGVfc3RyaW5naWZpYWJsZSgpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gc3RyaW5naWZpYWJsZShlbnN1cmVWYWx1ZSh2YWx1ZSkpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9zYWZlX3RvX3N0cmluZyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodmFsdWUgJiYgaXNDYWxsYWJsZSh2YWx1ZS50b1N0cmluZykpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiAnPE5vbi1jb2VyY2libGUgdG8gc3RyaW5nIHZhbHVlPic7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfdG9fc2hvcnRfc3RyaW5nX3JlcHJlc2VudGF0aW9uID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBzYWZlVG9TdHJpbmcgPSByZXF1aXJlX3NhZmVfdG9fc3RyaW5nKCk7XG4gICAgICB2YXIgcmVOZXdMaW5lID0gL1tcXG5cXHJcXHUyMDI4XFx1MjAyOV0vZztcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHN0cmluZyA9IHNhZmVUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMTAwKSB7XG4gICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKDAsIDk5KSArICdcXHUyMDI2JztcbiAgICAgICAgfVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZU5ld0xpbmUsIGZ1bmN0aW9uKF9jaGFyKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KF9jaGFyKS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19wcm9taXNlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gaXNQcm9taXNlO1xuICAgICAgbW9kdWxlLmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGlzUHJvbWlzZTtcbiAgICAgIGZ1bmN0aW9uIGlzUHJvbWlzZShvYmopIHtcbiAgICAgICAgcmV0dXJuICEhb2JqICYmIChfdHlwZW9mKG9iaikgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9wcm9taXNlID0gX19jb21tb25KUyhmdW5jdGlvbigpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBvYmplY3RNYXAgPSByZXF1aXJlX21hcCgpO1xuICAgICAgdmFyIHByaW1pdGl2ZVNldCA9IHJlcXVpcmVfcHJpbWl0aXZlX3NldCgpO1xuICAgICAgdmFyIGVuc3VyZVN0cmluZyA9IHJlcXVpcmVfdmFsaWRhdGVfc3RyaW5naWZpYWJsZV92YWx1ZSgpO1xuICAgICAgdmFyIHRvU2hvcnRTdHJpbmcgPSByZXF1aXJlX3RvX3Nob3J0X3N0cmluZ19yZXByZXNlbnRhdGlvbigpO1xuICAgICAgdmFyIGlzUHJvbWlzZSA9IHJlcXVpcmVfaXNfcHJvbWlzZSgpO1xuICAgICAgdmFyIG5leHRUaWNrID0gcmVxdWlyZV9uZXh0X3RpY2soKTtcbiAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgdmFyIHN1cHBvcnRlZE1vZGVzID0gcHJpbWl0aXZlU2V0KCd0aGVuJywgJ3RoZW46ZmluYWxseScsICdkb25lJywgJ2RvbmU6ZmluYWxseScpO1xuICAgICAgcmVxdWlyZV9yZWdpc3RlcmVkX2V4dGVuc2lvbnMoKS5wcm9taXNlID0gZnVuY3Rpb24obW9kZSwgY29uZikge1xuICAgICAgICB2YXIgd2FpdGluZyA9IGNyZWF0ZShudWxsKSwgY2FjaGUyID0gY3JlYXRlKG51bGwpLCBwcm9taXNlcyA9IGNyZWF0ZShudWxsKTtcbiAgICAgICAgaWYgKG1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICBtb2RlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2RlID0gZW5zdXJlU3RyaW5nKG1vZGUpO1xuICAgICAgICAgIGlmICghc3VwcG9ydGVkTW9kZXNbbW9kZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJycgKyB0b1Nob3J0U3RyaW5nKG1vZGUpICsgJ1xcJyBpcyBub3QgdmFsaWQgcHJvbWlzZSBtb2RlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmYub24oJ3NldCcsIGZ1bmN0aW9uKGlkLCBpZ25vcmUsIHByb21pc2UpIHtcbiAgICAgICAgICB2YXIgaXNGYWlsZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoIWlzUHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICAgICAgY2FjaGUyW2lkXSA9IHByb21pc2U7XG4gICAgICAgICAgICBjb25mLmVtaXQoJ3NldGFzeW5jJywgaWQsIDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YWl0aW5nW2lkXSA9IDE7XG4gICAgICAgICAgcHJvbWlzZXNbaWRdID0gcHJvbWlzZTtcbiAgICAgICAgICB2YXIgb25TdWNjZXNzID0gZnVuY3Rpb24gb25TdWNjZXNzKHJlc3VsdCkge1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gd2FpdGluZ1tpZF07XG4gICAgICAgICAgICBpZiAoaXNGYWlsZWQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZW1vaXplZSBlcnJvcjogRGV0ZWN0ZWQgdW5vcmRlcmVkIHRoZW58ZG9uZSAmIGZpbmFsbHkgcmVzb2x1dGlvbiwgd2hpY2ggaW4gdHVybiBtYWtlcyBwcm9wZXIgZGV0ZWN0aW9uIG9mIHN1Y2Nlc3MvZmFpbHVyZSBpbXBvc3NpYmxlICh3aGVuIGluIFxcJ2RvbmU6ZmluYWxseVxcJyBtb2RlKVxcbkNvbnNpZGVyIHRvIHJlbHkgb24gXFwndGhlblxcJyBvciBcXCdkb25lXFwnIG1vZGUgaW5zdGVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY291bnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHdhaXRpbmdbaWRdO1xuICAgICAgICAgICAgY2FjaGUyW2lkXSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGNvbmYuZW1pdCgnc2V0YXN5bmMnLCBpZCwgY291bnQpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIG9uRmFpbHVyZSA9IGZ1bmN0aW9uIG9uRmFpbHVyZSgpIHtcbiAgICAgICAgICAgIGlzRmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghd2FpdGluZ1tpZF0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHdhaXRpbmdbaWRdO1xuICAgICAgICAgICAgZGVsZXRlIHByb21pc2VzW2lkXTtcbiAgICAgICAgICAgIGNvbmZbJ2RlbGV0ZSddKGlkKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciByZXNvbHZlZE1vZGUgPSBtb2RlO1xuICAgICAgICAgIGlmICghcmVzb2x2ZWRNb2RlKSB7XG4gICAgICAgICAgICByZXNvbHZlZE1vZGUgPSAndGhlbic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXNvbHZlZE1vZGUgPT09ICd0aGVuJykge1xuICAgICAgICAgICAgdmFyIG5leHRUaWNrRmFpbHVyZSA9IGZ1bmN0aW9uIG5leHRUaWNrRmFpbHVyZSgpIHtcbiAgICAgICAgICAgICAgbmV4dFRpY2sob25GYWlsdXJlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICBuZXh0VGljayhvblN1Y2Nlc3MuYmluZCh0aGlzLCByZXN1bHQpKTtcbiAgICAgICAgICAgIH0sIG5leHRUaWNrRmFpbHVyZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb21pc2VbJ2ZpbmFsbHknXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBwcm9taXNlWydmaW5hbGx5J10obmV4dFRpY2tGYWlsdXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmVkTW9kZSA9PT0gJ2RvbmUnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb21pc2UuZG9uZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lbW9pemVlIGVycm9yOiBSZXRyaWV2ZWQgcHJvbWlzZSBkb2VzIG5vdCBpbXBsZW1lbnQgXFwnZG9uZVxcJyBpbiBcXCdkb25lXFwnIG1vZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb21pc2UuZG9uZShvblN1Y2Nlc3MsIG9uRmFpbHVyZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlZE1vZGUgPT09ICdkb25lOmZpbmFsbHknKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb21pc2UuZG9uZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lbW9pemVlIGVycm9yOiBSZXRyaWV2ZWQgcHJvbWlzZSBkb2VzIG5vdCBpbXBsZW1lbnQgXFwnZG9uZVxcJyBpbiBcXCdkb25lOmZpbmFsbHlcXCcgbW9kZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9taXNlWydmaW5hbGx5J10gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZW1vaXplZSBlcnJvcjogUmV0cmlldmVkIHByb21pc2UgZG9lcyBub3QgaW1wbGVtZW50IFxcJ2ZpbmFsbHlcXCcgaW4gXFwnZG9uZTpmaW5hbGx5XFwnIG1vZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb21pc2UuZG9uZShvblN1Y2Nlc3MpO1xuICAgICAgICAgICAgcHJvbWlzZVsnZmluYWxseSddKG9uRmFpbHVyZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uZi5vbignZ2V0JywgZnVuY3Rpb24oaWQsIGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICBpZiAod2FpdGluZ1tpZF0pIHtcbiAgICAgICAgICAgICsrd2FpdGluZ1tpZF07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlc1tpZF07XG4gICAgICAgICAgdmFyIGVtaXQgPSBmdW5jdGlvbiBlbWl0KCkge1xuICAgICAgICAgICAgY29uZi5lbWl0KCdnZXRhc3luYycsIGlkLCBhcmdzLCBjb250ZXh0KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvbWlzZS5kb25lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHByb21pc2UuZG9uZShlbWl0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBuZXh0VGljayhlbWl0KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25mLm9uKCdkZWxldGUnLCBmdW5jdGlvbihpZCkge1xuICAgICAgICAgIGRlbGV0ZSBwcm9taXNlc1tpZF07XG4gICAgICAgICAgaWYgKHdhaXRpbmdbaWRdKSB7XG4gICAgICAgICAgICBkZWxldGUgd2FpdGluZ1tpZF07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZTIsIGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzdWx0ID0gY2FjaGUyW2lkXTtcbiAgICAgICAgICBkZWxldGUgY2FjaGUyW2lkXTtcbiAgICAgICAgICBjb25mLmVtaXQoJ2RlbGV0ZWFzeW5jJywgaWQsIFsgcmVzdWx0IF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uZi5vbignY2xlYXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgb2xkQ2FjaGUgPSBjYWNoZTI7XG4gICAgICAgICAgY2FjaGUyID0gY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHdhaXRpbmcgPSBjcmVhdGUobnVsbCk7XG4gICAgICAgICAgcHJvbWlzZXMgPSBjcmVhdGUobnVsbCk7XG4gICAgICAgICAgY29uZi5lbWl0KCdjbGVhcmFzeW5jJywgb2JqZWN0TWFwKG9sZENhY2hlLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gWyBkYXRhIF07XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZGlzcG9zZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgY2FsbGFibGUgPSByZXF1aXJlX3ZhbGlkX2NhbGxhYmxlKCk7XG4gICAgICB2YXIgZm9yRWFjaCA9IHJlcXVpcmVfZm9yX2VhY2goKTtcbiAgICAgIHZhciBleHRlbnNpb25zID0gcmVxdWlyZV9yZWdpc3RlcmVkX2V4dGVuc2lvbnMoKTtcbiAgICAgIHZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbiAgICAgIGV4dGVuc2lvbnMuZGlzcG9zZSA9IGZ1bmN0aW9uKGRpc3Bvc2UsIGNvbmYsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGRlbDtcbiAgICAgICAgY2FsbGFibGUoZGlzcG9zZSk7XG4gICAgICAgIGlmIChvcHRpb25zLmFzeW5jICYmIGV4dGVuc2lvbnMuYXN5bmMgfHwgb3B0aW9ucy5wcm9taXNlICYmIGV4dGVuc2lvbnMucHJvbWlzZSkge1xuICAgICAgICAgIGNvbmYub24oJ2RlbGV0ZWFzeW5jJywgZGVsID0gZnVuY3Rpb24gZGVsKGlkLCByZXN1bHRBcnJheSkge1xuICAgICAgICAgICAgYXBwbHkuY2FsbChkaXNwb3NlLCBudWxsLCByZXN1bHRBcnJheSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uZi5vbignY2xlYXJhc3luYycsIGZ1bmN0aW9uKGNhY2hlMikge1xuICAgICAgICAgICAgZm9yRWFjaChjYWNoZTIsIGZ1bmN0aW9uKHJlc3VsdCwgaWQpIHtcbiAgICAgICAgICAgICAgZGVsKGlkLCByZXN1bHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbmYub24oJ2RlbGV0ZScsIGRlbCA9IGZ1bmN0aW9uIGRlbChpZCwgcmVzdWx0KSB7XG4gICAgICAgICAgZGlzcG9zZShyZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uZi5vbignY2xlYXInLCBmdW5jdGlvbihjYWNoZTIpIHtcbiAgICAgICAgICBmb3JFYWNoKGNhY2hlMiwgZnVuY3Rpb24ocmVzdWx0LCBpZCkge1xuICAgICAgICAgICAgZGVsKGlkLCByZXN1bHQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfbWF4X3RpbWVvdXQgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSAyMTQ3NDgzNjQ3O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3ZhbGlkX3RpbWVvdXQgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHRvUG9zSW50ID0gcmVxdWlyZV90b19wb3NfaW50ZWdlcigpO1xuICAgICAgdmFyIG1heFRpbWVvdXQgPSByZXF1aXJlX21heF90aW1lb3V0KCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdG9Qb3NJbnQodmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgPiBtYXhUaW1lb3V0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcih2YWx1ZSArICcgZXhjZWVkcyBtYXhpbXVtIHBvc3NpYmxlIHRpbWVvdXQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX21heF9hZ2UgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGFGcm9tID0gcmVxdWlyZV9mcm9tKCk7XG4gICAgICB2YXIgZm9yRWFjaCA9IHJlcXVpcmVfZm9yX2VhY2goKTtcbiAgICAgIHZhciBuZXh0VGljayA9IHJlcXVpcmVfbmV4dF90aWNrKCk7XG4gICAgICB2YXIgaXNQcm9taXNlID0gcmVxdWlyZV9pc19wcm9taXNlKCk7XG4gICAgICB2YXIgdGltZW91dCA9IHJlcXVpcmVfdmFsaWRfdGltZW91dCgpO1xuICAgICAgdmFyIGV4dGVuc2lvbnMgPSByZXF1aXJlX3JlZ2lzdGVyZWRfZXh0ZW5zaW9ucygpO1xuICAgICAgdmFyIG5vb3AzID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgICAgdmFyIG1heDIgPSBNYXRoLm1heDtcbiAgICAgIHZhciBtaW4gPSBNYXRoLm1pbjtcbiAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgZXh0ZW5zaW9ucy5tYXhBZ2UgPSBmdW5jdGlvbihtYXhBZ2UsIGNvbmYsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRpbWVvdXRzLCBwb3N0Zml4LCBwcmVGZXRjaEFnZSwgcHJlRmV0Y2hUaW1lb3V0cztcbiAgICAgICAgbWF4QWdlID0gdGltZW91dChtYXhBZ2UpO1xuICAgICAgICBpZiAoIW1heEFnZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aW1lb3V0cyA9IGNyZWF0ZShudWxsKTtcbiAgICAgICAgcG9zdGZpeCA9IG9wdGlvbnMuYXN5bmMgJiYgZXh0ZW5zaW9ucy5hc3luYyB8fCBvcHRpb25zLnByb21pc2UgJiYgZXh0ZW5zaW9ucy5wcm9taXNlID8gJ2FzeW5jJyA6ICcnO1xuICAgICAgICBjb25mLm9uKCdzZXQnICsgcG9zdGZpeCwgZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICB0aW1lb3V0c1tpZF0gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uZlsnZGVsZXRlJ10oaWQpO1xuICAgICAgICAgIH0sIG1heEFnZSk7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aW1lb3V0c1tpZF0udW5yZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRpbWVvdXRzW2lkXS51bnJlZigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXByZUZldGNoVGltZW91dHMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZUZldGNoVGltZW91dHNbaWRdKSB7XG4gICAgICAgICAgICBpZiAocHJlRmV0Y2hUaW1lb3V0c1tpZF0gIT09ICduZXh0VGljaycpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHByZUZldGNoVGltZW91dHNbaWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcHJlRmV0Y2hUaW1lb3V0c1tpZF0gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGVsZXRlIHByZUZldGNoVGltZW91dHNbaWRdO1xuICAgICAgICAgIH0sIHByZUZldGNoQWdlKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHByZUZldGNoVGltZW91dHNbaWRdLnVucmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwcmVGZXRjaFRpbWVvdXRzW2lkXS51bnJlZigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbmYub24oJ2RlbGV0ZScgKyBwb3N0Zml4LCBmdW5jdGlvbihpZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0c1tpZF0pO1xuICAgICAgICAgIGRlbGV0ZSB0aW1lb3V0c1tpZF07XG4gICAgICAgICAgaWYgKCFwcmVGZXRjaFRpbWVvdXRzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVGZXRjaFRpbWVvdXRzW2lkXSAhPT0gJ25leHRUaWNrJykge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHByZUZldGNoVGltZW91dHNbaWRdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIHByZUZldGNoVGltZW91dHNbaWRdO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9wdGlvbnMucHJlRmV0Y2gpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5wcmVGZXRjaCA9PT0gdHJ1ZSB8fCBpc05hTihvcHRpb25zLnByZUZldGNoKSkge1xuICAgICAgICAgICAgcHJlRmV0Y2hBZ2UgPSAuMzMzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmVGZXRjaEFnZSA9IG1heDIobWluKE51bWJlcihvcHRpb25zLnByZUZldGNoKSwgMSksIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlRmV0Y2hBZ2UpIHtcbiAgICAgICAgICAgIHByZUZldGNoVGltZW91dHMgPSB7fTtcbiAgICAgICAgICAgIHByZUZldGNoQWdlID0gKDEgLSBwcmVGZXRjaEFnZSkgKiBtYXhBZ2U7XG4gICAgICAgICAgICBjb25mLm9uKCdnZXQnICsgcG9zdGZpeCwgZnVuY3Rpb24oaWQsIGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgaWYgKCFwcmVGZXRjaFRpbWVvdXRzW2lkXSkge1xuICAgICAgICAgICAgICAgIHByZUZldGNoVGltZW91dHNbaWRdID0gJ25leHRUaWNrJztcbiAgICAgICAgICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICBpZiAocHJlRmV0Y2hUaW1lb3V0c1tpZF0gIT09ICduZXh0VGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZGVsZXRlIHByZUZldGNoVGltZW91dHNbaWRdO1xuICAgICAgICAgICAgICAgICAgY29uZlsnZGVsZXRlJ10oaWQpO1xuICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFGcm9tKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2gobm9vcDMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY29uZi5tZW1vaXplZC5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQuZG9uZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRvbmUobm9vcDMsIG5vb3AzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4obm9vcDMsIG5vb3AzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmYub24oJ2NsZWFyJyArIHBvc3RmaXgsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZvckVhY2godGltZW91dHMsIGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRpbWVvdXRzID0ge307XG4gICAgICAgICAgaWYgKHByZUZldGNoVGltZW91dHMpIHtcbiAgICAgICAgICAgIGZvckVhY2gocHJlRmV0Y2hUaW1lb3V0cywgZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgaWYgKGlkICE9PSAnbmV4dFRpY2snKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmVGZXRjaFRpbWVvdXRzID0ge307XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfbHJ1X3F1ZXVlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB0b1Bvc0ludCA9IHJlcXVpcmVfdG9fcG9zX2ludGVnZXIoKTtcbiAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgdmFyIGhhc093blByb3BlcnR5MiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpbWl0KSB7XG4gICAgICAgIHZhciBzaXplID0gMCwgYmFzZSA9IDEsIHF1ZXVlMiA9IGNyZWF0ZShudWxsKSwgbWFwID0gY3JlYXRlKG51bGwpLCBpbmRleCA9IDAsIGRlbDtcbiAgICAgICAgbGltaXQgPSB0b1Bvc0ludChsaW1pdCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaGl0OiBmdW5jdGlvbiBoaXQoaWQpIHtcbiAgICAgICAgICAgIHZhciBvbGRJbmRleCA9IG1hcFtpZF0sIG51SW5kZXggPSArK2luZGV4O1xuICAgICAgICAgICAgcXVldWUyW251SW5kZXhdID0gaWQ7XG4gICAgICAgICAgICBtYXBbaWRdID0gbnVJbmRleDtcbiAgICAgICAgICAgIGlmICghb2xkSW5kZXgpIHtcbiAgICAgICAgICAgICAgKytzaXplO1xuICAgICAgICAgICAgICBpZiAoc2l6ZSA8PSBsaW1pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZCA9IHF1ZXVlMltiYXNlXTtcbiAgICAgICAgICAgICAgZGVsKGlkKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHF1ZXVlMltvbGRJbmRleF07XG4gICAgICAgICAgICBpZiAoYmFzZSAhPT0gb2xkSW5kZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKCFoYXNPd25Qcm9wZXJ0eTIuY2FsbChxdWV1ZTIsICsrYmFzZSkpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWxldGU6IGRlbCA9IGZ1bmN0aW9uIGRlbChpZCkge1xuICAgICAgICAgICAgdmFyIG9sZEluZGV4ID0gbWFwW2lkXTtcbiAgICAgICAgICAgIGlmICghb2xkSW5kZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHF1ZXVlMltvbGRJbmRleF07XG4gICAgICAgICAgICBkZWxldGUgbWFwW2lkXTtcbiAgICAgICAgICAgIC0tc2l6ZTtcbiAgICAgICAgICAgIGlmIChiYXNlICE9PSBvbGRJbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNpemUpIHtcbiAgICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgICAgICBiYXNlID0gMTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKCFoYXNPd25Qcm9wZXJ0eTIuY2FsbChxdWV1ZTIsICsrYmFzZSkpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgICAgICBzaXplID0gMDtcbiAgICAgICAgICAgIGJhc2UgPSAxO1xuICAgICAgICAgICAgcXVldWUyID0gY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgbWFwID0gY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfbWF4ID0gX19jb21tb25KUyhmdW5jdGlvbigpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB0b1Bvc0ludGVnZXIgPSByZXF1aXJlX3RvX3Bvc19pbnRlZ2VyKCk7XG4gICAgICB2YXIgbHJ1UXVldWUgPSByZXF1aXJlX2xydV9xdWV1ZSgpO1xuICAgICAgdmFyIGV4dGVuc2lvbnMgPSByZXF1aXJlX3JlZ2lzdGVyZWRfZXh0ZW5zaW9ucygpO1xuICAgICAgZXh0ZW5zaW9ucy5tYXggPSBmdW5jdGlvbihtYXgyLCBjb25mLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBwb3N0Zml4LCBxdWV1ZTIsIGhpdDtcbiAgICAgICAgbWF4MiA9IHRvUG9zSW50ZWdlcihtYXgyKTtcbiAgICAgICAgaWYgKCFtYXgyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXVlMiA9IGxydVF1ZXVlKG1heDIpO1xuICAgICAgICBwb3N0Zml4ID0gb3B0aW9ucy5hc3luYyAmJiBleHRlbnNpb25zLmFzeW5jIHx8IG9wdGlvbnMucHJvbWlzZSAmJiBleHRlbnNpb25zLnByb21pc2UgPyAnYXN5bmMnIDogJyc7XG4gICAgICAgIGNvbmYub24oJ3NldCcgKyBwb3N0Zml4LCBoaXQgPSBmdW5jdGlvbiBoaXQoaWQpIHtcbiAgICAgICAgICBpZCA9IHF1ZXVlMi5oaXQoaWQpO1xuICAgICAgICAgIGlmIChpZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbmZbJ2RlbGV0ZSddKGlkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbmYub24oJ2dldCcgKyBwb3N0Zml4LCBoaXQpO1xuICAgICAgICBjb25mLm9uKCdkZWxldGUnICsgcG9zdGZpeCwgcXVldWUyWydkZWxldGUnXSk7XG4gICAgICAgIGNvbmYub24oJ2NsZWFyJyArIHBvc3RmaXgsIHF1ZXVlMi5jbGVhcik7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3JlZl9jb3VudGVyID0gX19jb21tb25KUyhmdW5jdGlvbigpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBkMiA9IHJlcXVpcmVfZCgpO1xuICAgICAgdmFyIGV4dGVuc2lvbnMgPSByZXF1aXJlX3JlZ2lzdGVyZWRfZXh0ZW5zaW9ucygpO1xuICAgICAgdmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG4gICAgICB2YXIgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xuICAgICAgZXh0ZW5zaW9ucy5yZWZDb3VudGVyID0gZnVuY3Rpb24oaWdub3JlLCBjb25mLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBjYWNoZTIsIHBvc3RmaXg7XG4gICAgICAgIGNhY2hlMiA9IGNyZWF0ZShudWxsKTtcbiAgICAgICAgcG9zdGZpeCA9IG9wdGlvbnMuYXN5bmMgJiYgZXh0ZW5zaW9ucy5hc3luYyB8fCBvcHRpb25zLnByb21pc2UgJiYgZXh0ZW5zaW9ucy5wcm9taXNlID8gJ2FzeW5jJyA6ICcnO1xuICAgICAgICBjb25mLm9uKCdzZXQnICsgcG9zdGZpeCwgZnVuY3Rpb24oaWQsIGxlbmd0aCkge1xuICAgICAgICAgIGNhY2hlMltpZF0gPSBsZW5ndGggfHwgMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbmYub24oJ2dldCcgKyBwb3N0Zml4LCBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICsrY2FjaGUyW2lkXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbmYub24oJ2RlbGV0ZScgKyBwb3N0Zml4LCBmdW5jdGlvbihpZCkge1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZTJbaWRdO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uZi5vbignY2xlYXInICsgcG9zdGZpeCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2FjaGUyID0ge307XG4gICAgICAgIH0pO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKGNvbmYubWVtb2l6ZWQsIHtcbiAgICAgICAgICBkZWxldGVSZWY6IGQyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGlkID0gY29uZi5nZXQoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2FjaGUyW2lkXSkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghLS1jYWNoZTJbaWRdKSB7XG4gICAgICAgICAgICAgIGNvbmZbJ2RlbGV0ZSddKGlkKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgZ2V0UmVmQ291bnQ6IGQyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGlkID0gY29uZi5nZXQoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2FjaGUyW2lkXSkge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWNoZTJbaWRdO1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9tZW1vaXplZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgbm9ybWFsaXplT3B0cyA9IHJlcXVpcmVfbm9ybWFsaXplX29wdGlvbnMoKTtcbiAgICAgIHZhciByZXNvbHZlTGVuZ3RoID0gcmVxdWlyZV9yZXNvbHZlX2xlbmd0aCgpO1xuICAgICAgdmFyIHBsYWluID0gcmVxdWlyZV9wbGFpbigpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZU9wdHMoYXJndW1lbnRzWzFdKSwgbGVuZ3RoO1xuICAgICAgICBpZiAoIW9wdGlvbnMubm9ybWFsaXplcikge1xuICAgICAgICAgIGxlbmd0aCA9IG9wdGlvbnMubGVuZ3RoID0gcmVzb2x2ZUxlbmd0aChvcHRpb25zLmxlbmd0aCwgZm4ubGVuZ3RoLCBvcHRpb25zLmFzeW5jKTtcbiAgICAgICAgICBpZiAobGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wcmltaXRpdmUpIHtcbiAgICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm5vcm1hbGl6ZXIgPSByZXF1aXJlX3ByaW1pdGl2ZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm5vcm1hbGl6ZXIgPSByZXF1aXJlX2dldF9wcmltaXRpdmVfZml4ZWQoKShsZW5ndGgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5ub3JtYWxpemVyID0gcmVxdWlyZV9nZXQoKSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5ub3JtYWxpemVyID0gcmVxdWlyZV9nZXRfMSgpKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvcHRpb25zLm5vcm1hbGl6ZXIgPSByZXF1aXJlX2dldF9maXhlZCgpKGxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmFzeW5jKSB7XG4gICAgICAgICAgcmVxdWlyZV9hc3luYygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnByb21pc2UpIHtcbiAgICAgICAgICByZXF1aXJlX3Byb21pc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5kaXNwb3NlKSB7XG4gICAgICAgICAgcmVxdWlyZV9kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4QWdlKSB7XG4gICAgICAgICAgcmVxdWlyZV9tYXhfYWdlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4KSB7XG4gICAgICAgICAgcmVxdWlyZV9tYXgoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5yZWZDb3VudGVyKSB7XG4gICAgICAgICAgcmVxdWlyZV9yZWZfY291bnRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwbGFpbihmbiwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3V0aWxzID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGZ1bmN0aW9uIGlzSWRlbnRTdGFydChjNCkge1xuICAgICAgICByZXR1cm4gYzQgPj0gJ2EnICYmIGM0IDw9ICd6JyB8fCBjNCA+PSAnQScgJiYgYzQgPD0gJ1onIHx8IGM0ID09PSAnLScgfHwgYzQgPT09ICdfJztcbiAgICAgIH1cbiAgICAgIGV4cG9ydHMuaXNJZGVudFN0YXJ0ID0gaXNJZGVudFN0YXJ0O1xuICAgICAgZnVuY3Rpb24gaXNJZGVudChjNCkge1xuICAgICAgICByZXR1cm4gYzQgPj0gJ2EnICYmIGM0IDw9ICd6JyB8fCBjNCA+PSAnQScgJiYgYzQgPD0gJ1onIHx8IGM0ID49ICcwJyAmJiBjNCA8PSAnOScgfHwgYzQgPT09ICctJyB8fCBjNCA9PT0gJ18nO1xuICAgICAgfVxuICAgICAgZXhwb3J0cy5pc0lkZW50ID0gaXNJZGVudDtcbiAgICAgIGZ1bmN0aW9uIGlzSGV4KGM0KSB7XG4gICAgICAgIHJldHVybiBjNCA+PSAnYScgJiYgYzQgPD0gJ2YnIHx8IGM0ID49ICdBJyAmJiBjNCA8PSAnRicgfHwgYzQgPj0gJzAnICYmIGM0IDw9ICc5JztcbiAgICAgIH1cbiAgICAgIGV4cG9ydHMuaXNIZXggPSBpc0hleDtcbiAgICAgIGZ1bmN0aW9uIGVzY2FwZUlkZW50aWZpZXIocykge1xuICAgICAgICB2YXIgbGVuID0gcy5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIHZhciBjaHIgPSBzLmNoYXJBdChpKTtcbiAgICAgICAgICBpZiAoZXhwb3J0cy5pZGVudFNwZWNpYWxDaGFyc1tjaHJdKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJ1xcXFwnICsgY2hyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIShjaHIgPT09ICdfJyB8fCBjaHIgPT09ICctJyB8fCBjaHIgPj0gJ0EnICYmIGNociA8PSAnWicgfHwgY2hyID49ICdhJyAmJiBjaHIgPD0gJ3onIHx8IGkgIT09IDAgJiYgY2hyID49ICcwJyAmJiBjaHIgPD0gJzknKSkge1xuICAgICAgICAgICAgICB2YXIgY2hhckNvZGUgPSBjaHIuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgaWYgKChjaGFyQ29kZSAmIDYzNDg4KSA9PT0gNTUyOTYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXh0cmFDaGFyQ29kZSA9IHMuY2hhckNvZGVBdChpKyspO1xuICAgICAgICAgICAgICAgIGlmICgoY2hhckNvZGUgJiA2NDUxMikgIT09IDU1Mjk2IHx8IChleHRyYUNoYXJDb2RlICYgNjQ1MTIpICE9PSA1NjMyMCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1VDUy0yKGRlY29kZSk6IGlsbGVnYWwgc2VxdWVuY2UnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhckNvZGUgPSAoKGNoYXJDb2RlICYgMTAyMykgPDwgMTApICsgKGV4dHJhQ2hhckNvZGUgJiAxMDIzKSArIDY1NTM2O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdCArPSAnXFxcXCcgKyBjaGFyQ29kZS50b1N0cmluZygxNikgKyAnICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQgKz0gY2hyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGV4cG9ydHMuZXNjYXBlSWRlbnRpZmllciA9IGVzY2FwZUlkZW50aWZpZXI7XG4gICAgICBmdW5jdGlvbiBlc2NhcGVTdHIocykge1xuICAgICAgICB2YXIgbGVuID0gcy5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQ7XG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgdmFyIGNociA9IHMuY2hhckF0KGkpO1xuICAgICAgICAgIGlmIChjaHIgPT09ICdcIicpIHtcbiAgICAgICAgICAgIGNociA9ICdcXFxcXCInO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGNociA9ICdcXFxcXFxcXCc7XG4gICAgICAgICAgfSBlbHNlIGlmICgocmVwbGFjZW1lbnQgPSBleHBvcnRzLnN0clJlcGxhY2VtZW50c1JldltjaHJdKSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBjaHIgPSByZXBsYWNlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdcIicgKyByZXN1bHQgKyAnXCInO1xuICAgICAgfVxuICAgICAgZXhwb3J0cy5lc2NhcGVTdHIgPSBlc2NhcGVTdHI7XG4gICAgICBleHBvcnRzLmlkZW50U3BlY2lhbENoYXJzID0ge1xuICAgICAgICAnISc6IHRydWUsXG4gICAgICAgICdcIic6IHRydWUsXG4gICAgICAgICcjJzogdHJ1ZSxcbiAgICAgICAgJDogdHJ1ZSxcbiAgICAgICAgJyUnOiB0cnVlLFxuICAgICAgICAnJic6IHRydWUsXG4gICAgICAgICdcXCcnOiB0cnVlLFxuICAgICAgICAnKCc6IHRydWUsXG4gICAgICAgICcpJzogdHJ1ZSxcbiAgICAgICAgJyonOiB0cnVlLFxuICAgICAgICAnKyc6IHRydWUsXG4gICAgICAgICcsJzogdHJ1ZSxcbiAgICAgICAgJy4nOiB0cnVlLFxuICAgICAgICAnLyc6IHRydWUsXG4gICAgICAgICc7JzogdHJ1ZSxcbiAgICAgICAgJzwnOiB0cnVlLFxuICAgICAgICAnPSc6IHRydWUsXG4gICAgICAgICc+JzogdHJ1ZSxcbiAgICAgICAgJz8nOiB0cnVlLFxuICAgICAgICAnQCc6IHRydWUsXG4gICAgICAgICdbJzogdHJ1ZSxcbiAgICAgICAgJ1xcXFwnOiB0cnVlLFxuICAgICAgICAnXSc6IHRydWUsXG4gICAgICAgICdeJzogdHJ1ZSxcbiAgICAgICAgJ2AnOiB0cnVlLFxuICAgICAgICAneyc6IHRydWUsXG4gICAgICAgICd8JzogdHJ1ZSxcbiAgICAgICAgJ30nOiB0cnVlLFxuICAgICAgICAnfic6IHRydWVcbiAgICAgIH07XG4gICAgICBleHBvcnRzLnN0clJlcGxhY2VtZW50c1JldiA9IHtcbiAgICAgICAgJ1xcbic6ICdcXFxcbicsXG4gICAgICAgICdcXHInOiAnXFxcXHInLFxuICAgICAgICAnXFx0JzogJ1xcXFx0JyxcbiAgICAgICAgJ1xcZic6ICdcXFxcZicsXG4gICAgICAgICdcXHYnOiAnXFxcXHYnXG4gICAgICB9O1xuICAgICAgZXhwb3J0cy5zaW5nbGVRdW90ZUVzY2FwZUNoYXJzID0ge1xuICAgICAgICBuOiAnXFxuJyxcbiAgICAgICAgcjogJ1xccicsXG4gICAgICAgIHQ6ICdcXHQnLFxuICAgICAgICBmOiAnXFxmJyxcbiAgICAgICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgICAgICdcXCcnOiAnXFwnJ1xuICAgICAgfTtcbiAgICAgIGV4cG9ydHMuZG91YmxlUXVvdGVzRXNjYXBlQ2hhcnMgPSB7XG4gICAgICAgIG46ICdcXG4nLFxuICAgICAgICByOiAnXFxyJyxcbiAgICAgICAgdDogJ1xcdCcsXG4gICAgICAgIGY6ICdcXGYnLFxuICAgICAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICAgICAgJ1wiJzogJ1wiJ1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9wYXJzZXJfY29udGV4dCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2YXIgdXRpbHNfMSA9IHJlcXVpcmVfdXRpbHMoKTtcbiAgICAgIGZ1bmN0aW9uIHBhcnNlQ3NzU2VsZWN0b3Ioc3RyLCBwb3MsIHBzZXVkb3MsIGF0dHJFcXVhbGl0eU1vZHMsIHJ1bGVOZXN0aW5nT3BlcmF0b3JzLCBzdWJzdGl0dXRlc0VuYWJsZWQpIHtcbiAgICAgICAgdmFyIGwgPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgY2hyID0gJyc7XG4gICAgICAgIGZ1bmN0aW9uIGdldFN0cihxdW90ZSwgZXNjYXBlVGFibGUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgICAgcG9zKys7XG4gICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgIHdoaWxlIChwb3MgPCBsKSB7XG4gICAgICAgICAgICBpZiAoY2hyID09PSBxdW90ZSkge1xuICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgIGNociA9IHN0ci5jaGFyQXQocG9zKTtcbiAgICAgICAgICAgICAgdmFyIGVzYyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgaWYgKGNociA9PT0gcXVvdGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gcXVvdGU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGVzYyA9IGVzY2FwZVRhYmxlW2Nocl0pICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gZXNjO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWxzXzEuaXNIZXgoY2hyKSkge1xuICAgICAgICAgICAgICAgIHZhciBoZXggPSBjaHI7XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgICAgICAgIHdoaWxlICh1dGlsc18xLmlzSGV4KGNocikpIHtcbiAgICAgICAgICAgICAgICAgIGhleCArPSBjaHI7XG4gICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICAgIGNociA9IHN0ci5jaGFyQXQocG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNociA9PT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICAgIGNociA9IHN0ci5jaGFyQXQocG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIGNociA9IHN0ci5jaGFyQXQocG9zKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRJZGVudCgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgIHdoaWxlIChwb3MgPCBsKSB7XG4gICAgICAgICAgICBpZiAodXRpbHNfMS5pc0lkZW50KGNocikpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgIGlmIChwb3MgPj0gbCkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdFeHBlY3RlZCBzeW1ib2wgYnV0IGVuZCBvZiBmaWxlIHJlYWNoZWQuJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgICAgICBpZiAodXRpbHNfMS5pZGVudFNwZWNpYWxDaGFyc1tjaHJdKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsc18xLmlzSGV4KGNocikpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGV4ID0gY2hyO1xuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAgIGNociA9IHN0ci5jaGFyQXQocG9zKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAodXRpbHNfMS5pc0hleChjaHIpKSB7XG4gICAgICAgICAgICAgICAgICBoZXggKz0gY2hyO1xuICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgICBjaHIgPSBzdHIuY2hhckF0KHBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaHIgPT09ICcgJykge1xuICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgICBjaHIgPSBzdHIuY2hhckF0KHBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gY2hyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICBjaHIgPSBzdHIuY2hhckF0KHBvcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2tpcFdoaXRlc3BhY2UoKSB7XG4gICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICB3aGlsZSAoY2hyID09PSAnICcgfHwgY2hyID09PSAnXFx0JyB8fCBjaHIgPT09ICdcXG4nIHx8IGNociA9PT0gJ1xccicgfHwgY2hyID09PSAnXFxmJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlMygpIHtcbiAgICAgICAgICB2YXIgcmVzID0gcGFyc2VTZWxlY3RvcigpO1xuICAgICAgICAgIGlmIChwb3MgPCBsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignUnVsZSBleHBlY3RlZCBidXQgXCInICsgc3RyLmNoYXJBdChwb3MpICsgJ1wiIGZvdW5kLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlU2VsZWN0b3IoKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gcGFyc2VTaW5nbGVTZWxlY3RvcigpO1xuICAgICAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzID0gc2VsZWN0b3I7XG4gICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgIHdoaWxlIChjaHIgPT09ICcsJykge1xuICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgaWYgKHJlcy50eXBlICE9PSAnc2VsZWN0b3JzJykge1xuICAgICAgICAgICAgICByZXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdG9ycycsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiBbIHNlbGVjdG9yIF1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGVjdG9yID0gcGFyc2VTaW5nbGVTZWxlY3RvcigpO1xuICAgICAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICAgICAgICB0aHJvdyBFcnJvcignUnVsZSBleHBlY3RlZCBhZnRlciBcIixcIi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5zZWxlY3RvcnMucHVzaChzZWxlY3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcGFyc2VTaW5nbGVTZWxlY3RvcigpIHtcbiAgICAgICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICAgIHZhciBzZWxlY3RvciA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdydWxlU2V0J1xuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHJ1bGUgPSBwYXJzZVJ1bGUoKTtcbiAgICAgICAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY3VycmVudFJ1bGUgPSBzZWxlY3RvcjtcbiAgICAgICAgICB3aGlsZSAocnVsZSkge1xuICAgICAgICAgICAgcnVsZS50eXBlID0gJ3J1bGUnO1xuICAgICAgICAgICAgY3VycmVudFJ1bGUucnVsZSA9IHJ1bGU7XG4gICAgICAgICAgICBjdXJyZW50UnVsZSA9IHJ1bGU7XG4gICAgICAgICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgICAgaWYgKHBvcyA+PSBsIHx8IGNociA9PT0gJywnIHx8IGNociA9PT0gJyknKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJ1bGVOZXN0aW5nT3BlcmF0b3JzW2Nocl0pIHtcbiAgICAgICAgICAgICAgdmFyIG9wID0gY2hyO1xuICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgcnVsZSA9IHBhcnNlUnVsZSgpO1xuICAgICAgICAgICAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignUnVsZSBleHBlY3RlZCBhZnRlciBcIicgKyBvcCArICdcIi4nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBydWxlLm5lc3RpbmdPcGVyYXRvciA9IG9wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcnVsZSA9IHBhcnNlUnVsZSgpO1xuICAgICAgICAgICAgICBpZiAocnVsZSkge1xuICAgICAgICAgICAgICAgIHJ1bGUubmVzdGluZ09wZXJhdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcGFyc2VSdWxlKCkge1xuICAgICAgICAgIHZhciBydWxlID0gbnVsbDtcbiAgICAgICAgICB3aGlsZSAocG9zIDwgbCkge1xuICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgICAgaWYgKGNociA9PT0gJyonKSB7XG4gICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAocnVsZSA9IHJ1bGUgfHwge30pLnRhZ05hbWUgPSAnKic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWxzXzEuaXNJZGVudFN0YXJ0KGNocikgfHwgY2hyID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgICAgKHJ1bGUgPSBydWxlIHx8IHt9KS50YWdOYW1lID0gZ2V0SWRlbnQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnLicpIHtcbiAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgIHJ1bGUgPSBydWxlIHx8IHt9O1xuICAgICAgICAgICAgICAocnVsZS5jbGFzc05hbWVzID0gcnVsZS5jbGFzc05hbWVzIHx8IFtdKS5wdXNoKGdldElkZW50KCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT09ICcjJykge1xuICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgKHJ1bGUgPSBydWxlIHx8IHt9KS5pZCA9IGdldElkZW50KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PT0gJ1snKSB7XG4gICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICB2YXIgYXR0ciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBnZXRJZGVudCgpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgIGlmIChjaHIgPT09ICddJykge1xuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBvcGVyYXRvciA9ICcnO1xuICAgICAgICAgICAgICAgIGlmIChhdHRyRXF1YWxpdHlNb2RzW2Nocl0pIHtcbiAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID0gY2hyO1xuICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgICBjaHIgPSBzdHIuY2hhckF0KHBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwb3MgPj0gbCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0V4cGVjdGVkIFwiPVwiIGJ1dCBlbmQgb2YgZmlsZSByZWFjaGVkLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hyICE9PSAnPScpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdFeHBlY3RlZCBcIj1cIiBidXQgXCInICsgY2hyICsgJ1wiIGZvdW5kLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhdHRyLm9wZXJhdG9yID0gb3BlcmF0b3IgKyAnPSc7XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgYXR0ci52YWx1ZVR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgICAgICAgICBpZiAoY2hyID09PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgICBhdHRyVmFsdWUgPSBnZXRTdHIoJ1wiJywgdXRpbHNfMS5kb3VibGVRdW90ZXNFc2NhcGVDaGFycyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT09ICdcXCcnKSB7XG4gICAgICAgICAgICAgICAgICBhdHRyVmFsdWUgPSBnZXRTdHIoJ1xcJycsIHV0aWxzXzEuc2luZ2xlUXVvdGVFc2NhcGVDaGFycyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJzdGl0dXRlc0VuYWJsZWQgJiYgY2hyID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAgICAgYXR0clZhbHVlID0gZ2V0SWRlbnQoKTtcbiAgICAgICAgICAgICAgICAgIGF0dHIudmFsdWVUeXBlID0gJ3N1YnN0aXR1dGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAocG9zIDwgbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hyID09PSAnXScpIHtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhdHRyVmFsdWUgKz0gY2hyO1xuICAgICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJBdChwb3MpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYXR0clZhbHVlID0gYXR0clZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICBpZiAocG9zID49IGwpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdFeHBlY3RlZCBcIl1cIiBidXQgZW5kIG9mIGZpbGUgcmVhY2hlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNociAhPT0gJ10nKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignRXhwZWN0ZWQgXCJdXCIgYnV0IFwiJyArIGNociArICdcIiBmb3VuZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgYXR0ci52YWx1ZSA9IGF0dHJWYWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBydWxlID0gcnVsZSB8fCB7fTtcbiAgICAgICAgICAgICAgKHJ1bGUuYXR0cnMgPSBydWxlLmF0dHJzIHx8IFtdKS5wdXNoKGF0dHIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT09ICc6Jykge1xuICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgdmFyIHBzZXVkb05hbWUgPSBnZXRJZGVudCgpO1xuICAgICAgICAgICAgICB2YXIgcHNldWRvID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHBzZXVkb05hbWVcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKGNociA9PT0gJygnKSB7XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICBpZiAocHNldWRvc1twc2V1ZG9OYW1lXSA9PT0gJ3NlbGVjdG9yJykge1xuICAgICAgICAgICAgICAgICAgcHNldWRvLnZhbHVlVHlwZSA9ICdzZWxlY3Rvcic7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlU2VsZWN0b3IoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcHNldWRvLnZhbHVlVHlwZSA9IHBzZXVkb3NbcHNldWRvTmFtZV0gfHwgJ3N0cmluZyc7XG4gICAgICAgICAgICAgICAgICBpZiAoY2hyID09PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0U3RyKCdcIicsIHV0aWxzXzEuZG91YmxlUXVvdGVzRXNjYXBlQ2hhcnMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT09ICdcXCcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0U3RyKCdcXCcnLCB1dGlsc18xLnNpbmdsZVF1b3RlRXNjYXBlQ2hhcnMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJzdGl0dXRlc0VuYWJsZWQgJiYgY2hyID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0SWRlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcHNldWRvLnZhbHVlVHlwZSA9ICdzdWJzdGl0dXRlJztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwb3MgPCBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNociA9PT0gJyknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gY2hyO1xuICAgICAgICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgIGNociA9IHN0ci5jaGFyQXQocG9zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwb3MgPj0gbCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0V4cGVjdGVkIFwiKVwiIGJ1dCBlbmQgb2YgZmlsZSByZWFjaGVkLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hyICE9PSAnKScpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdFeHBlY3RlZCBcIilcIiBidXQgXCInICsgY2hyICsgJ1wiIGZvdW5kLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICBwc2V1ZG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBydWxlID0gcnVsZSB8fCB7fTtcbiAgICAgICAgICAgICAgKHJ1bGUucHNldWRvcyA9IHJ1bGUucHNldWRvcyB8fCBbXSkucHVzaChwc2V1ZG8pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZTMoKTtcbiAgICAgIH1cbiAgICAgIGV4cG9ydHMucGFyc2VDc3NTZWxlY3RvciA9IHBhcnNlQ3NzU2VsZWN0b3I7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfcmVuZGVyID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHZhciB1dGlsc18xID0gcmVxdWlyZV91dGlscygpO1xuICAgICAgZnVuY3Rpb24gcmVuZGVyRW50aXR5KGVudGl0eSkge1xuICAgICAgICB2YXIgcmVzID0gJyc7XG4gICAgICAgIHN3aXRjaCAoZW50aXR5LnR5cGUpIHtcbiAgICAgICAgIGNhc2UgJ3J1bGVTZXQnOlxuICAgICAgICAgIHZhciBjdXJyZW50RW50aXR5ID0gZW50aXR5LnJ1bGU7XG4gICAgICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnRFbnRpdHkpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RW50aXR5Lm5lc3RpbmdPcGVyYXRvcikge1xuICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGN1cnJlbnRFbnRpdHkubmVzdGluZ09wZXJhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnRzLnB1c2gocmVuZGVyRW50aXR5KGN1cnJlbnRFbnRpdHkpKTtcbiAgICAgICAgICAgIGN1cnJlbnRFbnRpdHkgPSBjdXJyZW50RW50aXR5LnJ1bGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcyA9IHBhcnRzLmpvaW4oJyAnKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAgY2FzZSAnc2VsZWN0b3JzJzpcbiAgICAgICAgICByZXMgPSBlbnRpdHkuc2VsZWN0b3JzLm1hcChyZW5kZXJFbnRpdHkpLmpvaW4oJywgJyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIGNhc2UgJ3J1bGUnOlxuICAgICAgICAgIGlmIChlbnRpdHkudGFnTmFtZSkge1xuICAgICAgICAgICAgaWYgKGVudGl0eS50YWdOYW1lID09PSAnKicpIHtcbiAgICAgICAgICAgICAgcmVzID0gJyonO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzID0gdXRpbHNfMS5lc2NhcGVJZGVudGlmaWVyKGVudGl0eS50YWdOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVudGl0eS5pZCkge1xuICAgICAgICAgICAgcmVzICs9ICcjJyArIHV0aWxzXzEuZXNjYXBlSWRlbnRpZmllcihlbnRpdHkuaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZW50aXR5LmNsYXNzTmFtZXMpIHtcbiAgICAgICAgICAgIHJlcyArPSBlbnRpdHkuY2xhc3NOYW1lcy5tYXAoZnVuY3Rpb24oY24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuICcuJyArIHV0aWxzXzEuZXNjYXBlSWRlbnRpZmllcihjbik7XG4gICAgICAgICAgICB9KS5qb2luKCcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVudGl0eS5hdHRycykge1xuICAgICAgICAgICAgcmVzICs9IGVudGl0eS5hdHRycy5tYXAoZnVuY3Rpb24oYXR0cikge1xuICAgICAgICAgICAgICBpZiAoJ29wZXJhdG9yJyBpbiBhdHRyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIudmFsdWVUeXBlID09PSAnc3Vic3RpdHV0ZScpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAnWycgKyB1dGlsc18xLmVzY2FwZUlkZW50aWZpZXIoYXR0ci5uYW1lKSArIGF0dHIub3BlcmF0b3IgKyAnJCcgKyBhdHRyLnZhbHVlICsgJ10nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gJ1snICsgdXRpbHNfMS5lc2NhcGVJZGVudGlmaWVyKGF0dHIubmFtZSkgKyBhdHRyLm9wZXJhdG9yICsgdXRpbHNfMS5lc2NhcGVTdHIoYXR0ci52YWx1ZSkgKyAnXSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnWycgKyB1dGlsc18xLmVzY2FwZUlkZW50aWZpZXIoYXR0ci5uYW1lKSArICddJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuam9pbignJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbnRpdHkucHNldWRvcykge1xuICAgICAgICAgICAgcmVzICs9IGVudGl0eS5wc2V1ZG9zLm1hcChmdW5jdGlvbihwc2V1ZG8pIHtcbiAgICAgICAgICAgICAgaWYgKHBzZXVkby52YWx1ZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBpZiAocHNldWRvLnZhbHVlVHlwZSA9PT0gJ3NlbGVjdG9yJykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICc6JyArIHV0aWxzXzEuZXNjYXBlSWRlbnRpZmllcihwc2V1ZG8ubmFtZSkgKyAnKCcgKyByZW5kZXJFbnRpdHkocHNldWRvLnZhbHVlKSArICcpJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBzZXVkby52YWx1ZVR5cGUgPT09ICdzdWJzdGl0dXRlJykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICc6JyArIHV0aWxzXzEuZXNjYXBlSWRlbnRpZmllcihwc2V1ZG8ubmFtZSkgKyAnKCQnICsgcHNldWRvLnZhbHVlICsgJyknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHNldWRvLnZhbHVlVHlwZSA9PT0gJ251bWVyaWMnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gJzonICsgdXRpbHNfMS5lc2NhcGVJZGVudGlmaWVyKHBzZXVkby5uYW1lKSArICcoJyArIHBzZXVkby52YWx1ZSArICcpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICc6JyArIHV0aWxzXzEuZXNjYXBlSWRlbnRpZmllcihwc2V1ZG8ubmFtZSkgKyAnKCcgKyB1dGlsc18xLmVzY2FwZUlkZW50aWZpZXIocHNldWRvLnZhbHVlKSArICcpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc6JyArIHV0aWxzXzEuZXNjYXBlSWRlbnRpZmllcihwc2V1ZG8ubmFtZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmpvaW4oJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBlbnRpdHkgdHlwZTogXCInICsgZW50aXR5LnR5cGUgKyAnXCIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICAgIGV4cG9ydHMucmVuZGVyRW50aXR5ID0gcmVuZGVyRW50aXR5O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2xpYiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2YXIgcGFyc2VyX2NvbnRleHRfMSA9IHJlcXVpcmVfcGFyc2VyX2NvbnRleHQoKTtcbiAgICAgIHZhciByZW5kZXJfMSA9IHJlcXVpcmVfcmVuZGVyKCk7XG4gICAgICB2YXIgQ3NzU2VsZWN0b3JQYXJzZXIzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmN0aW9uIENzc1NlbGVjdG9yUGFyc2VyNCgpIHtcbiAgICAgICAgICB0aGlzLnBzZXVkb3MgPSB7fTtcbiAgICAgICAgICB0aGlzLmF0dHJFcXVhbGl0eU1vZHMgPSB7fTtcbiAgICAgICAgICB0aGlzLnJ1bGVOZXN0aW5nT3BlcmF0b3JzID0ge307XG4gICAgICAgICAgdGhpcy5zdWJzdGl0dXRlc0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBDc3NTZWxlY3RvclBhcnNlcjQucHJvdG90eXBlLnJlZ2lzdGVyU2VsZWN0b3JQc2V1ZG9zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHBzZXVkb3MgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgcHNldWRvc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHBzZXVkb3NfMSA9IHBzZXVkb3M7IF9hIDwgcHNldWRvc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIHBzZXVkbyA9IHBzZXVkb3NfMVtfYV07XG4gICAgICAgICAgICB0aGlzLnBzZXVkb3NbcHNldWRvXSA9ICdzZWxlY3Rvcic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBDc3NTZWxlY3RvclBhcnNlcjQucHJvdG90eXBlLnVucmVnaXN0ZXJTZWxlY3RvclBzZXVkb3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcHNldWRvcyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBwc2V1ZG9zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgcHNldWRvc18yID0gcHNldWRvczsgX2EgPCBwc2V1ZG9zXzIubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgcHNldWRvID0gcHNldWRvc18yW19hXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBzZXVkb3NbcHNldWRvXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgICAgIENzc1NlbGVjdG9yUGFyc2VyNC5wcm90b3R5cGUucmVnaXN0ZXJOdW1lcmljUHNldWRvcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBwc2V1ZG9zID0gW107XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHBzZXVkb3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBwc2V1ZG9zXzMgPSBwc2V1ZG9zOyBfYSA8IHBzZXVkb3NfMy5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBwc2V1ZG8gPSBwc2V1ZG9zXzNbX2FdO1xuICAgICAgICAgICAgdGhpcy5wc2V1ZG9zW3BzZXVkb10gPSAnbnVtZXJpYyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBDc3NTZWxlY3RvclBhcnNlcjQucHJvdG90eXBlLnVucmVnaXN0ZXJOdW1lcmljUHNldWRvcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBwc2V1ZG9zID0gW107XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHBzZXVkb3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBwc2V1ZG9zXzQgPSBwc2V1ZG9zOyBfYSA8IHBzZXVkb3NfNC5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBwc2V1ZG8gPSBwc2V1ZG9zXzRbX2FdO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucHNldWRvc1twc2V1ZG9dO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgQ3NzU2VsZWN0b3JQYXJzZXI0LnByb3RvdHlwZS5yZWdpc3Rlck5lc3RpbmdPcGVyYXRvcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgb3BlcmF0b3JzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdG9yc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG9wZXJhdG9yc18xID0gb3BlcmF0b3JzOyBfYSA8IG9wZXJhdG9yc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIG9wZXJhdG9yID0gb3BlcmF0b3JzXzFbX2FdO1xuICAgICAgICAgICAgdGhpcy5ydWxlTmVzdGluZ09wZXJhdG9yc1tvcGVyYXRvcl0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgQ3NzU2VsZWN0b3JQYXJzZXI0LnByb3RvdHlwZS51bnJlZ2lzdGVyTmVzdGluZ09wZXJhdG9ycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBvcGVyYXRvcnMgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0b3JzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgb3BlcmF0b3JzXzIgPSBvcGVyYXRvcnM7IF9hIDwgb3BlcmF0b3JzXzIubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgb3BlcmF0b3IgPSBvcGVyYXRvcnNfMltfYV07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5ydWxlTmVzdGluZ09wZXJhdG9yc1tvcGVyYXRvcl07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBDc3NTZWxlY3RvclBhcnNlcjQucHJvdG90eXBlLnJlZ2lzdGVyQXR0ckVxdWFsaXR5TW9kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBtb2RzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG1vZHNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBtb2RzXzEgPSBtb2RzOyBfYSA8IG1vZHNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBtb2QgPSBtb2RzXzFbX2FdO1xuICAgICAgICAgICAgdGhpcy5hdHRyRXF1YWxpdHlNb2RzW21vZF0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgQ3NzU2VsZWN0b3JQYXJzZXI0LnByb3RvdHlwZS51bnJlZ2lzdGVyQXR0ckVxdWFsaXR5TW9kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBtb2RzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG1vZHNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBtb2RzXzIgPSBtb2RzOyBfYSA8IG1vZHNfMi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBtb2QgPSBtb2RzXzJbX2FdO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0ckVxdWFsaXR5TW9kc1ttb2RdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgQ3NzU2VsZWN0b3JQYXJzZXI0LnByb3RvdHlwZS5lbmFibGVTdWJzdGl0dXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMuc3Vic3RpdHV0ZXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgQ3NzU2VsZWN0b3JQYXJzZXI0LnByb3RvdHlwZS5kaXNhYmxlU3Vic3RpdHV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLnN1YnN0aXR1dGVzRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBDc3NTZWxlY3RvclBhcnNlcjQucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlcl9jb250ZXh0XzEucGFyc2VDc3NTZWxlY3RvcihzdHIsIDAsIHRoaXMucHNldWRvcywgdGhpcy5hdHRyRXF1YWxpdHlNb2RzLCB0aGlzLnJ1bGVOZXN0aW5nT3BlcmF0b3JzLCB0aGlzLnN1YnN0aXR1dGVzRW5hYmxlZCk7XG4gICAgICAgIH07XG4gICAgICAgIENzc1NlbGVjdG9yUGFyc2VyNC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICAgIHJldHVybiByZW5kZXJfMS5yZW5kZXJFbnRpdHkocGF0aCkudHJpbSgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQ3NzU2VsZWN0b3JQYXJzZXI0O1xuICAgICAgfSgpO1xuICAgICAgZXhwb3J0cy5Dc3NTZWxlY3RvclBhcnNlciA9IENzc1NlbGVjdG9yUGFyc2VyMztcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9lczZfcHJvbWlzZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAoZnVuY3Rpb24oZ2xvYmFsMiwgZmFjdG9yeSkge1xuICAgICAgICBfdHlwZW9mKGV4cG9ydHMpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDogZ2xvYmFsMi5FUzZQcm9taXNlID0gZmFjdG9yeSgpO1xuICAgICAgfSkoZXhwb3J0cywgZnVuY3Rpb24oKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgZnVuY3Rpb24gb2JqZWN0T3JGdW5jdGlvbih4KSB7XG4gICAgICAgICAgdmFyIHR5cGUyID0gX3R5cGVvZih4KTtcbiAgICAgICAgICByZXR1cm4geCAhPT0gbnVsbCAmJiAodHlwZTIgPT09ICdvYmplY3QnIHx8IHR5cGUyID09PSAnZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9pc0FycmF5ID0gdm9pZCAwO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgICAgICAgIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfaXNBcnJheSA9IGZ1bmN0aW9uIF9pc0FycmF5KHgpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNBcnJheSA9IF9pc0FycmF5O1xuICAgICAgICB2YXIgbGVuID0gMDtcbiAgICAgICAgdmFyIHZlcnR4TmV4dCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdm9pZCAwO1xuICAgICAgICB2YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAyKGNhbGxiYWNrLCBhcmcpIHtcbiAgICAgICAgICBxdWV1ZTJbbGVuXSA9IGNhbGxiYWNrO1xuICAgICAgICAgIHF1ZXVlMltsZW4gKyAxXSA9IGFyZztcbiAgICAgICAgICBsZW4gKz0gMjtcbiAgICAgICAgICBpZiAobGVuID09PSAyKSB7XG4gICAgICAgICAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgICAgICAgICAgY3VzdG9tU2NoZWR1bGVyRm4oZmx1c2gpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgICAgICAgICBjdXN0b21TY2hlZHVsZXJGbiA9IHNjaGVkdWxlRm47XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0QXNhcChhc2FwRm4pIHtcbiAgICAgICAgICBhc2FwID0gYXNhcEZuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBicm93c2VyV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB2b2lkIDA7XG4gICAgICAgIHZhciBicm93c2VyR2xvYmFsID0gYnJvd3NlcldpbmRvdyB8fCB7fTtcbiAgICAgICAgdmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICAgICAgdmFyIGlzTm9kZTIgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcbiAgICAgICAgdmFyIGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW1wb3J0U2NyaXB0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgZnVuY3Rpb24gdXNlTmV4dFRpY2soKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXNlVmVydHhUaW1lcigpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZlcnR4TmV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmVydHhOZXh0KGZsdXNoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXNlTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHtcbiAgICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSBpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMjtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICAgICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVzZVNldFRpbWVvdXQoKSB7XG4gICAgICAgICAgdmFyIGdsb2JhbFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxTZXRUaW1lb3V0KGZsdXNoLCAxKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBxdWV1ZTIgPSBuZXcgQXJyYXkoMWUzKTtcbiAgICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gcXVldWUyW2ldO1xuICAgICAgICAgICAgdmFyIGFyZyA9IHF1ZXVlMltpICsgMV07XG4gICAgICAgICAgICBjYWxsYmFjayhhcmcpO1xuICAgICAgICAgICAgcXVldWUyW2ldID0gdm9pZCAwO1xuICAgICAgICAgICAgcXVldWUyW2kgKyAxXSA9IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhdHRlbXB0VmVydHgoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciB2ZXJ0eCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCkucmVxdWlyZSgndmVydHgnKTtcbiAgICAgICAgICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4gdXNlVmVydHhUaW1lcigpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzY2hlZHVsZUZsdXNoID0gdm9pZCAwO1xuICAgICAgICBpZiAoaXNOb2RlMikge1xuICAgICAgICAgIHNjaGVkdWxlRmx1c2ggPSB1c2VOZXh0VGljaygpO1xuICAgICAgICB9IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAgICAgc2NoZWR1bGVGbHVzaCA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1dvcmtlcikge1xuICAgICAgICAgIHNjaGVkdWxlRmx1c2ggPSB1c2VNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHZvaWQgMCAmJiB0cnVlKSB7XG4gICAgICAgICAgc2NoZWR1bGVGbHVzaCA9IGF0dGVtcHRWZXJ0eCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjaGVkdWxlRmx1c2ggPSB1c2VTZXRUaW1lb3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzO1xuICAgICAgICAgIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3AzKTtcbiAgICAgICAgICBpZiAoY2hpbGRbUFJPTUlTRV9JRF0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbWFrZVByb21pc2UoY2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgX3N0YXRlID0gcGFyZW50Ll9zdGF0ZTtcbiAgICAgICAgICBpZiAoX3N0YXRlKSB7XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbX3N0YXRlIC0gMV07XG4gICAgICAgICAgICBhc2FwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gaW52b2tlQ2FsbGJhY2soX3N0YXRlLCBjaGlsZCwgY2FsbGJhY2ssIHBhcmVudC5fcmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmUyKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmUkMShvYmplY3QpIHtcbiAgICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICAgICAgICAgIGlmIChvYmplY3QgJiYgX3R5cGVvZihvYmplY3QpID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wMyk7XG4gICAgICAgICAgcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBQUk9NSVNFX0lEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpO1xuICAgICAgICBmdW5jdGlvbiBub29wMygpIHt9XG4gICAgICAgIHZhciBQRU5ESU5HID0gdm9pZCAwO1xuICAgICAgICB2YXIgRlVMRklMTEVEID0gMTtcbiAgICAgICAgdmFyIFJFSkVDVEVEID0gMjtcbiAgICAgICAgZnVuY3Rpb24gc2VsZkZ1bGZpbGxtZW50KCkge1xuICAgICAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKCdZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmJyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdHJ5VGhlbih0aGVuJCQxLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoZW4kJDEuY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuJCQxKSB7XG4gICAgICAgICAgYXNhcChmdW5jdGlvbihwcm9taXNlMikge1xuICAgICAgICAgICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGVycm9yID0gdHJ5VGhlbih0aGVuJCQxLCB0aGVuYWJsZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwcm9taXNlMiwgdmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZ1bGZpbGwocHJvbWlzZTIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmVqZWN0KHByb21pc2UyLCByZWFzb24pO1xuICAgICAgICAgICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlMi5fbGFiZWwgfHwgJyB1bmtub3duIHByb21pc2UnKSk7XG4gICAgICAgICAgICBpZiAoIXNlYWxlZCAmJiBlcnJvcikge1xuICAgICAgICAgICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICByZWplY3QocHJvbWlzZTIsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBwcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICAgICAgICAgIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IEZVTEZJTExFRCkge1xuICAgICAgICAgICAgZnVsZmlsbChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgICAgICAgIHJlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3Vic2NyaWJlMih0aGVuYWJsZSwgdm9pZCAwLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkMSkge1xuICAgICAgICAgIGlmIChtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yID09PSBwcm9taXNlLmNvbnN0cnVjdG9yICYmIHRoZW4kJDEgPT09IHRoZW4gJiYgbWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3Rvci5yZXNvbHZlID09PSByZXNvbHZlJDEpIHtcbiAgICAgICAgICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhlbiQkMSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhlbiQkMSkpIHtcbiAgICAgICAgICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmVqZWN0KHByb21pc2UsIHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9iamVjdE9yRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICB2YXIgdGhlbiQkMSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRoZW4kJDEgPSB2YWx1ZS50aGVuO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgdGhlbiQkMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgICAgICAgICBpZiAocHJvbWlzZS5fb25lcnJvcikge1xuICAgICAgICAgICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdWJsaXNoKHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvbWlzZS5fcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICAgICAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgYXNhcChwdWJsaXNoLCBwcm9taXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICAgICAgICAgIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9taXNlLl9zdGF0ZSA9IFJFSkVDVEVEO1xuICAgICAgICAgIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcbiAgICAgICAgICBhc2FwKHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHN1YnNjcmliZTIocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgICAgICAgICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gX3N1YnNjcmliZXJzLmxlbmd0aDtcbiAgICAgICAgICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuICAgICAgICAgIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gICAgICAgICAgX3N1YnNjcmliZXJzW2xlbmd0aCArIEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICAgICAgICAgIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBSRUpFQ1RFRF0gPSBvblJlamVjdGlvbjtcbiAgICAgICAgICBpZiAobGVuZ3RoID09PSAwICYmIHBhcmVudC5fc3RhdGUpIHtcbiAgICAgICAgICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHVibGlzaChwcm9taXNlKSB7XG4gICAgICAgICAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gICAgICAgICAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTtcbiAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjaGlsZCA9IHZvaWQgMCwgY2FsbGJhY2sgPSB2b2lkIDAsIGRldGFpbCA9IHByb21pc2UuX3Jlc3VsdDtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG4gICAgICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZGV0YWlsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBwcm9taXNlLCBjYWxsYmFjaywgZGV0YWlsKSB7XG4gICAgICAgICAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksIHZhbHVlID0gdm9pZCAwLCBlcnJvciA9IHZvaWQgMCwgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2soZGV0YWlsKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgc3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGVycm9yID0gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICByZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gZGV0YWlsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHt9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdWNjZWVkZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gRlVMRklMTEVEKSB7XG4gICAgICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IFJFSkVDVEVEKSB7XG4gICAgICAgICAgICByZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCByZXNvbHZlcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSkge1xuICAgICAgICAgICAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICAgICAgICAgIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KHByb21pc2UsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaWQgPSAwO1xuICAgICAgICBmdW5jdGlvbiBuZXh0SWQoKSB7XG4gICAgICAgICAgcmV0dXJuIGlkKys7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFrZVByb21pc2UocHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2VbUFJPTUlTRV9JRF0gPSBpZCsrO1xuICAgICAgICAgIHByb21pc2UuX3N0YXRlID0gdm9pZCAwO1xuICAgICAgICAgIHByb21pc2UuX3Jlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRpb25FcnJvcigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgRW51bWVyYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZ1bmN0aW9uIEVudW1lcmF0b3IyKENvbnN0cnVjdG9yLCBpbnB1dCkge1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgICAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3AzKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7XG4gICAgICAgICAgICAgIG1ha2VQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aCB8fCAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VudW1lcmF0ZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QodGhpcy5wcm9taXNlLCB2YWxpZGF0aW9uRXJyb3IoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEVudW1lcmF0b3IyLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gX2VudW1lcmF0ZShpbnB1dCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB0aGlzLl9lYWNoRW50cnkoaW5wdXRbaV0sIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgRW51bWVyYXRvcjIucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiBfZWFjaEVudHJ5KGVudHJ5LCBpKSB7XG4gICAgICAgICAgICB2YXIgYzQgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgdmFyIHJlc29sdmUkJDEgPSBjNC5yZXNvbHZlO1xuICAgICAgICAgICAgaWYgKHJlc29sdmUkJDEgPT09IHJlc29sdmUkMSkge1xuICAgICAgICAgICAgICB2YXIgX3RoZW4gPSB2b2lkIDA7XG4gICAgICAgICAgICAgIHZhciBlcnJvciA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgdmFyIGRpZEVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgX3RoZW4gPSBlbnRyeS50aGVuO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZGlkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVycm9yID0gZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoX3RoZW4gPT09IHRoZW4gJiYgZW50cnkuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGxlZEF0KGVudHJ5Ll9zdGF0ZSwgaSwgZW50cnkuX3Jlc3VsdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzdWx0W2ldID0gZW50cnk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYzQgPT09IFByb21pc2UkMSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gbmV3IGM0KG5vb3AzKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIF90aGVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHByb21pc2UsIGkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYzQoZnVuY3Rpb24ocmVzb2x2ZSQkMTIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlJCQxMihlbnRyeSk7XG4gICAgICAgICAgICAgICAgfSksIGkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkMShlbnRyeSksIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgRW51bWVyYXRvcjIucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbiBfc2V0dGxlZEF0KHN0YXRlLCBpLCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgICAgICAgICAgICByZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIEVudW1lcmF0b3IyLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKSB7XG4gICAgICAgICAgICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG4gICAgICAgICAgICBzdWJzY3JpYmUyKHByb21pc2UsIHZvaWQgMCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChGVUxGSUxMRUQsIGksIHZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgICAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KFJFSkVDVEVELCBpLCByZWFzb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gRW51bWVyYXRvcjI7XG4gICAgICAgIH0oKTtcbiAgICAgICAgZnVuY3Rpb24gYWxsKGVudHJpZXMpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVudW1lcmF0b3IodGhpcywgZW50cmllcykucHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByYWNlKGVudHJpZXMpIHtcbiAgICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICAgICAgICAgIGlmICghaXNBcnJheShlbnRyaWVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbihfLCByZWplY3QyKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QyKG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbihyZXNvbHZlMiwgcmVqZWN0Mikge1xuICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLnRoZW4ocmVzb2x2ZTIsIHJlamVjdDIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0JDEocmVhc29uKSB7XG4gICAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wMyk7XG4gICAgICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbmVlZHNSZXNvbHZlcigpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbmVlZHNOZXcoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmFpbGVkIHRvIGNvbnN0cnVjdCBcXCdQcm9taXNlXFwnOiBQbGVhc2UgdXNlIHRoZSBcXCduZXdcXCcgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi4nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgUHJvbWlzZSQxID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZnVuY3Rpb24gUHJvbWlzZTIocmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHRoaXNbUFJPTUlTRV9JRF0gPSBuZXh0SWQoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdm9pZCAwO1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcbiAgICAgICAgICAgIGlmIChub29wMyAhPT0gcmVzb2x2ZXIpIHtcbiAgICAgICAgICAgICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTtcbiAgICAgICAgICAgICAgdGhpcyBpbnN0YW5jZW9mIFByb21pc2UyID8gaW5pdGlhbGl6ZVByb21pc2UodGhpcywgcmVzb2x2ZXIpIDogbmVlZHNOZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgUHJvbWlzZTIucHJvdG90eXBlWydjYXRjaCddID0gZnVuY3Rpb24gX2NhdGNoKG9uUmVqZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIFByb21pc2UyLnByb3RvdHlwZVsnZmluYWxseSddID0gZnVuY3Rpb24gX2ZpbmFsbHkoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3I7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihjYWxsYmFjaywgY2FsbGJhY2spO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UyO1xuICAgICAgICB9KCk7XG4gICAgICAgIFByb21pc2UkMS5wcm90b3R5cGUudGhlbiA9IHRoZW47XG4gICAgICAgIFByb21pc2UkMS5hbGwgPSBhbGw7XG4gICAgICAgIFByb21pc2UkMS5yYWNlID0gcmFjZTtcbiAgICAgICAgUHJvbWlzZSQxLnJlc29sdmUgPSByZXNvbHZlJDE7XG4gICAgICAgIFByb21pc2UkMS5yZWplY3QgPSByZWplY3QkMTtcbiAgICAgICAgUHJvbWlzZSQxLl9zZXRTY2hlZHVsZXIgPSBzZXRTY2hlZHVsZXI7XG4gICAgICAgIFByb21pc2UkMS5fc2V0QXNhcCA9IHNldEFzYXA7XG4gICAgICAgIFByb21pc2UkMS5fYXNhcCA9IGFzYXA7XG4gICAgICAgIGZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgICAgICAgIHZhciBsb2NhbCA9IHZvaWQgMDtcbiAgICAgICAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGxvY2FsID0gZ2xvYmFsO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBsb2NhbCA9IHNlbGY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFAgPSBsb2NhbC5Qcm9taXNlO1xuICAgICAgICAgIGlmIChQKSB7XG4gICAgICAgICAgICB2YXIgcHJvbWlzZVRvU3RyaW5nID0gbnVsbDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHByb21pc2VUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQLnJlc29sdmUoKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgaWYgKHByb21pc2VUb1N0cmluZyA9PT0gJ1tvYmplY3QgUHJvbWlzZV0nICYmICFQLmNhc3QpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsb2NhbC5Qcm9taXNlID0gUHJvbWlzZSQxO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UkMS5wb2x5ZmlsbCA9IHBvbHlmaWxsO1xuICAgICAgICBQcm9taXNlJDEuUHJvbWlzZSA9IFByb21pc2UkMTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UkMTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3R5cGVkYXJyYXkgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgICAgIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gMWU1O1xuICAgICAgdmFyIEVDTUFTY3JpcHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgICAgICB2YXIgb3Bob3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIENsYXNzOiBmdW5jdGlvbiBDbGFzcyh2KSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0cy5jYWxsKHYpLnJlcGxhY2UoL15cXFtvYmplY3QgKnxcXF0kL2csICcnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIEhhc1Byb3BlcnR5OiBmdW5jdGlvbiBIYXNQcm9wZXJ0eShvLCBwMikge1xuICAgICAgICAgICAgcmV0dXJuIHAyIGluIG87XG4gICAgICAgICAgfSxcbiAgICAgICAgICBIYXNPd25Qcm9wZXJ0eTogZnVuY3Rpb24gSGFzT3duUHJvcGVydHkobywgcDIpIHtcbiAgICAgICAgICAgIHJldHVybiBvcGhvcC5jYWxsKG8sIHAyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIElzQ2FsbGFibGU6IGZ1bmN0aW9uIElzQ2FsbGFibGUobykge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgVG9JbnQzMjogZnVuY3Rpb24gVG9JbnQzMih2KSB7XG4gICAgICAgICAgICByZXR1cm4gdiA+PiAwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgVG9VaW50MzI6IGZ1bmN0aW9uIFRvVWludDMyKHYpIHtcbiAgICAgICAgICAgIHJldHVybiB2ID4+PiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0oKTtcbiAgICAgIHZhciBMTjIgPSBNYXRoLkxOMjtcbiAgICAgIHZhciBhYnMgPSBNYXRoLmFicztcbiAgICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgICB2YXIgbG9nMiA9IE1hdGgubG9nO1xuICAgICAgdmFyIG1pbiA9IE1hdGgubWluO1xuICAgICAgdmFyIHBvdyA9IE1hdGgucG93O1xuICAgICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbiAgICAgIGZ1bmN0aW9uIGNsYW1wMyh2LCBtaW5pbXVtLCBtYXgyKSB7XG4gICAgICAgIHJldHVybiB2IDwgbWluaW11bSA/IG1pbmltdW0gOiB2ID4gbWF4MiA/IG1heDIgOiB2O1xuICAgICAgfVxuICAgICAgdmFyIGdldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgaWYgKG8gIT09IE9iamVjdChvKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3BzID0gW10sIHAyO1xuICAgICAgICBmb3IgKHAyIGluIG8pIHtcbiAgICAgICAgICBpZiAoRUNNQVNjcmlwdC5IYXNPd25Qcm9wZXJ0eShvLCBwMikpIHtcbiAgICAgICAgICAgIHByb3BzLnB1c2gocDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICB9O1xuICAgICAgdmFyIGRlZmluZVByb3A7XG4gICAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7fSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0oKSkge1xuICAgICAgICBkZWZpbmVQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUHJvcCA9IGZ1bmN0aW9uIGRlZmluZVByb3AobywgcDIsIGRlc2MpIHtcbiAgICAgICAgICBpZiAoIW8gPT09IE9iamVjdChvKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChFQ01BU2NyaXB0Lkhhc1Byb3BlcnR5KGRlc2MsICdnZXQnKSAmJiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18pIHtcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXy5jYWxsKG8sIHAyLCBkZXNjLmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChFQ01BU2NyaXB0Lkhhc1Byb3BlcnR5KGRlc2MsICdzZXQnKSAmJiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18pIHtcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG8sIHAyLCBkZXNjLnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChFQ01BU2NyaXB0Lkhhc1Byb3BlcnR5KGRlc2MsICd2YWx1ZScpKSB7XG4gICAgICAgICAgICBvW3AyXSA9IGRlc2MudmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gY29uZmlndXJlUHJvcGVydGllcyhvYmopIHtcbiAgICAgICAgaWYgKGdldE93blByb3BOYW1lcyAmJiBkZWZpbmVQcm9wKSB7XG4gICAgICAgICAgdmFyIHByb3BzID0gZ2V0T3duUHJvcE5hbWVzKG9iaiksIGk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wKG9iaiwgcHJvcHNbaV0sIHtcbiAgICAgICAgICAgICAgdmFsdWU6IG9ialtwcm9wc1tpXV0sXG4gICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbWFrZUFycmF5QWNjZXNzb3JzKG9iaikge1xuICAgICAgICBpZiAoIWRlZmluZVByb3ApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5sZW5ndGggPiBNQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0FycmF5IHRvbyBsYXJnZSBmb3IgcG9seWZpbGwnKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYWtlQXJyYXlBY2Nlc3NvcihpbmRleCkge1xuICAgICAgICAgIGRlZmluZVByb3Aob2JqLCBpbmRleCwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvYmouX2dldHRlcihpbmRleCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodikge1xuICAgICAgICAgICAgICBvYmouX3NldHRlcihpbmRleCwgdik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIG1ha2VBcnJheUFjY2Vzc29yKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBhc19zaWduZWQodmFsdWUsIGJpdHMpIHtcbiAgICAgICAgdmFyIHMgPSAzMiAtIGJpdHM7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8PCBzID4+IHM7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBhc191bnNpZ25lZCh2YWx1ZSwgYml0cykge1xuICAgICAgICB2YXIgcyA9IDMyIC0gYml0cztcbiAgICAgICAgcmV0dXJuIHZhbHVlIDw8IHMgPj4+IHM7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwYWNrSTgobjIpIHtcbiAgICAgICAgcmV0dXJuIFsgbjIgJiAyNTUgXTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHVucGFja0k4KGJ5dGVzKSB7XG4gICAgICAgIHJldHVybiBhc19zaWduZWQoYnl0ZXNbMF0sIDgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcGFja1U4KG4yKSB7XG4gICAgICAgIHJldHVybiBbIG4yICYgMjU1IF07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB1bnBhY2tVOChieXRlcykge1xuICAgICAgICByZXR1cm4gYXNfdW5zaWduZWQoYnl0ZXNbMF0sIDgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcGFja1U4Q2xhbXBlZChuMikge1xuICAgICAgICBuMiA9IHJvdW5kKE51bWJlcihuMikpO1xuICAgICAgICByZXR1cm4gWyBuMiA8IDAgPyAwIDogbjIgPiAyNTUgPyAyNTUgOiBuMiAmIDI1NSBdO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcGFja0kxNihuMikge1xuICAgICAgICByZXR1cm4gWyBuMiA+PiA4ICYgMjU1LCBuMiAmIDI1NSBdO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gdW5wYWNrSTE2KGJ5dGVzKSB7XG4gICAgICAgIHJldHVybiBhc19zaWduZWQoYnl0ZXNbMF0gPDwgOCB8IGJ5dGVzWzFdLCAxNik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwYWNrVTE2KG4yKSB7XG4gICAgICAgIHJldHVybiBbIG4yID4+IDggJiAyNTUsIG4yICYgMjU1IF07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB1bnBhY2tVMTYoYnl0ZXMpIHtcbiAgICAgICAgcmV0dXJuIGFzX3Vuc2lnbmVkKGJ5dGVzWzBdIDw8IDggfCBieXRlc1sxXSwgMTYpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcGFja0kzMihuMikge1xuICAgICAgICByZXR1cm4gWyBuMiA+PiAyNCAmIDI1NSwgbjIgPj4gMTYgJiAyNTUsIG4yID4+IDggJiAyNTUsIG4yICYgMjU1IF07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgICAgICAgcmV0dXJuIGFzX3NpZ25lZChieXRlc1swXSA8PCAyNCB8IGJ5dGVzWzFdIDw8IDE2IHwgYnl0ZXNbMl0gPDwgOCB8IGJ5dGVzWzNdLCAzMik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwYWNrVTMyKG4yKSB7XG4gICAgICAgIHJldHVybiBbIG4yID4+IDI0ICYgMjU1LCBuMiA+PiAxNiAmIDI1NSwgbjIgPj4gOCAmIDI1NSwgbjIgJiAyNTUgXTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHVucGFja1UzMihieXRlcykge1xuICAgICAgICByZXR1cm4gYXNfdW5zaWduZWQoYnl0ZXNbMF0gPDwgMjQgfCBieXRlc1sxXSA8PCAxNiB8IGJ5dGVzWzJdIDw8IDggfCBieXRlc1szXSwgMzIpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcGFja0lFRUU3NTQodiwgZWJpdHMsIGZiaXRzKSB7XG4gICAgICAgIHZhciBiaWFzID0gKDEgPDwgZWJpdHMgLSAxKSAtIDE7XG4gICAgICAgIHZhciBzLCBlLCBmLCBpLCBiaXRzLCBzdHIsIGJ5dGVzO1xuICAgICAgICBmdW5jdGlvbiByb3VuZFRvRXZlbihuMikge1xuICAgICAgICAgIHZhciB3ID0gZmxvb3IobjIpO1xuICAgICAgICAgIHZhciBmbCA9IG4yIC0gdztcbiAgICAgICAgICBpZiAoZmwgPCAuNSkge1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmbCA+IC41KSB7XG4gICAgICAgICAgICByZXR1cm4gdyArIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB3ICUgMiA/IHcgKyAxIDogdztcbiAgICAgICAgfVxuICAgICAgICBpZiAodiAhPT0gdikge1xuICAgICAgICAgIGUgPSAoMSA8PCBlYml0cykgLSAxO1xuICAgICAgICAgIGYgPSBwb3coMiwgZmJpdHMgLSAxKTtcbiAgICAgICAgICBzID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh2ID09PSBJbmZpbml0eSB8fCB2ID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICBlID0gKDEgPDwgZWJpdHMpIC0gMTtcbiAgICAgICAgICBmID0gMDtcbiAgICAgICAgICBzID0gdiA8IDAgPyAxIDogMDtcbiAgICAgICAgfSBlbHNlIGlmICh2ID09PSAwKSB7XG4gICAgICAgICAgZSA9IDA7XG4gICAgICAgICAgZiA9IDA7XG4gICAgICAgICAgcyA9IDEgLyB2ID09PSAtSW5maW5pdHkgPyAxIDogMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzID0gdiA8IDA7XG4gICAgICAgICAgdiA9IGFicyh2KTtcbiAgICAgICAgICBpZiAodiA+PSBwb3coMiwgMSAtIGJpYXMpKSB7XG4gICAgICAgICAgICBlID0gbWluKGZsb29yKGxvZzIodikgLyBMTjIpLCAxMDIzKTtcbiAgICAgICAgICAgIGYgPSByb3VuZFRvRXZlbih2IC8gcG93KDIsIGUpICogcG93KDIsIGZiaXRzKSk7XG4gICAgICAgICAgICBpZiAoZiAvIHBvdygyLCBmYml0cykgPj0gMikge1xuICAgICAgICAgICAgICBlID0gZSArIDE7XG4gICAgICAgICAgICAgIGYgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgPiBiaWFzKSB7XG4gICAgICAgICAgICAgIGUgPSAoMSA8PCBlYml0cykgLSAxO1xuICAgICAgICAgICAgICBmID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGUgPSBlICsgYmlhcztcbiAgICAgICAgICAgICAgZiA9IGYgLSBwb3coMiwgZmJpdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlID0gMDtcbiAgICAgICAgICAgIGYgPSByb3VuZFRvRXZlbih2IC8gcG93KDIsIDEgLSBiaWFzIC0gZmJpdHMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYml0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSBmYml0czsgaTsgaSAtPSAxKSB7XG4gICAgICAgICAgYml0cy5wdXNoKGYgJSAyID8gMSA6IDApO1xuICAgICAgICAgIGYgPSBmbG9vcihmIC8gMik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gZWJpdHM7IGk7IGkgLT0gMSkge1xuICAgICAgICAgIGJpdHMucHVzaChlICUgMiA/IDEgOiAwKTtcbiAgICAgICAgICBlID0gZmxvb3IoZSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIGJpdHMucHVzaChzID8gMSA6IDApO1xuICAgICAgICBiaXRzLnJldmVyc2UoKTtcbiAgICAgICAgc3RyID0gYml0cy5qb2luKCcnKTtcbiAgICAgICAgYnl0ZXMgPSBbXTtcbiAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICBieXRlcy5wdXNoKHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoMCwgOCksIDIpKTtcbiAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnl0ZXMsIGViaXRzLCBmYml0cykge1xuICAgICAgICB2YXIgYml0cyA9IFtdLCBpLCBqLCBiMiwgc3RyLCBiaWFzLCBzLCBlLCBmO1xuICAgICAgICBmb3IgKGkgPSBieXRlcy5sZW5ndGg7IGk7IGkgLT0gMSkge1xuICAgICAgICAgIGIyID0gYnl0ZXNbaSAtIDFdO1xuICAgICAgICAgIGZvciAoaiA9IDg7IGo7IGogLT0gMSkge1xuICAgICAgICAgICAgYml0cy5wdXNoKGIyICUgMiA/IDEgOiAwKTtcbiAgICAgICAgICAgIGIyID0gYjIgPj4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYml0cy5yZXZlcnNlKCk7XG4gICAgICAgIHN0ciA9IGJpdHMuam9pbignJyk7XG4gICAgICAgIGJpYXMgPSAoMSA8PCBlYml0cyAtIDEpIC0gMTtcbiAgICAgICAgcyA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoMCwgMSksIDIpID8gLTEgOiAxO1xuICAgICAgICBlID0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZygxLCAxICsgZWJpdHMpLCAyKTtcbiAgICAgICAgZiA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoMSArIGViaXRzKSwgMik7XG4gICAgICAgIGlmIChlID09PSAoMSA8PCBlYml0cykgLSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGYgPT09IDAgPyBzICogSW5maW5pdHkgOiBOYU47XG4gICAgICAgIH0gZWxzZSBpZiAoZSA+IDApIHtcbiAgICAgICAgICByZXR1cm4gcyAqIHBvdygyLCBlIC0gYmlhcykgKiAoMSArIGYgLyBwb3coMiwgZmJpdHMpKTtcbiAgICAgICAgfSBlbHNlIGlmIChmICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHMgKiBwb3coMiwgLShiaWFzIC0gMSkpICogKGYgLyBwb3coMiwgZmJpdHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcyA8IDAgPyAtMCA6IDA7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB1bnBhY2tGNjQoYjIpIHtcbiAgICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoYjIsIDExLCA1Mik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwYWNrRjY0KHYpIHtcbiAgICAgICAgcmV0dXJuIHBhY2tJRUVFNzU0KHYsIDExLCA1Mik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB1bnBhY2tGMzIoYjIpIHtcbiAgICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoYjIsIDgsIDIzKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHBhY2tGMzIodikge1xuICAgICAgICByZXR1cm4gcGFja0lFRUU3NTQodiwgOCwgMjMpO1xuICAgICAgfVxuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgICAgICBsZW5ndGggPSBFQ01BU2NyaXB0LlRvSW50MzIobGVuZ3RoKTtcbiAgICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0FycmF5QnVmZmVyIHNpemUgaXMgbm90IGEgc21hbGwgZW5vdWdoIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICAgIHRoaXMuX2J5dGVzID0gW107XG4gICAgICAgICAgdGhpcy5fYnl0ZXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICAgIHZhciBpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmJ5dGVMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdGhpcy5fYnl0ZXNbaV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25maWd1cmVQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuQXJyYXlCdWZmZXIgPSBleHBvcnRzLkFycmF5QnVmZmVyIHx8IEFycmF5QnVmZmVyO1xuICAgICAgICBmdW5jdGlvbiBBcnJheUJ1ZmZlclZpZXcoKSB7fVxuICAgICAgICBmdW5jdGlvbiBtYWtlQ29uc3RydWN0b3IoYnl0ZXNQZXJFbGVtZW50LCBwYWNrLCB1bnBhY2spIHtcbiAgICAgICAgICB2YXIgX2N0b3I7XG4gICAgICAgICAgX2N0b3IgPSBmdW5jdGlvbiBjdG9yKGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYXJyYXksIHNlcXVlbmNlLCBpLCBzO1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoIHx8IHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gRUNNQVNjcmlwdC5Ub0ludDMyKGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgICAgIGlmIChsZW5ndGggPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0FycmF5QnVmZmVyVmlldyBzaXplIGlzIG5vdCBhIHNtYWxsIGVub3VnaCBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gdGhpcy5sZW5ndGggKiB0aGlzLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKGFyZ3VtZW50c1swXSkgPT09ICdvYmplY3QnICYmIGFyZ3VtZW50c1swXS5jb25zdHJ1Y3RvciA9PT0gX2N0b3IpIHtcbiAgICAgICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgICB0aGlzLmJ5dGVMZW5ndGggPSB0aGlzLmxlbmd0aCAqIHRoaXMuQllURVNfUEVSX0VMRU1FTlQ7XG4gICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGVyKGksIGFycmF5Ll9nZXR0ZXIoaSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90eXBlb2YoYXJndW1lbnRzWzBdKSA9PT0gJ29iamVjdCcgJiYgIShhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBFQ01BU2NyaXB0LkNsYXNzKGFyZ3VtZW50c1swXSkgPT09ICdBcnJheUJ1ZmZlcicpKSB7XG4gICAgICAgICAgICAgIHNlcXVlbmNlID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICB0aGlzLmxlbmd0aCA9IEVDTUFTY3JpcHQuVG9VaW50MzIoc2VxdWVuY2UubGVuZ3RoKTtcbiAgICAgICAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gdGhpcy5sZW5ndGggKiB0aGlzLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHMgPSBzZXF1ZW5jZVtpXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR0ZXIoaSwgTnVtYmVyKHMpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKGFyZ3VtZW50c1swXSkgPT09ICdvYmplY3QnICYmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBFQ01BU2NyaXB0LkNsYXNzKGFyZ3VtZW50c1swXSkgPT09ICdBcnJheUJ1ZmZlcicpKSB7XG4gICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBFQ01BU2NyaXB0LlRvVWludDMyKGJ5dGVPZmZzZXQpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5ieXRlT2Zmc2V0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdieXRlT2Zmc2V0IG91dCBvZiByYW5nZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0aGlzLmJ5dGVPZmZzZXQgJSB0aGlzLkJZVEVTX1BFUl9FTEVNRU5UKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0FycmF5QnVmZmVyIGxlbmd0aCBtaW51cyB0aGUgYnl0ZU9mZnNldCBpcyBub3QgYSBtdWx0aXBsZSBvZiB0aGUgZWxlbWVudCBzaXplLicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGggLSB0aGlzLmJ5dGVPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYnl0ZUxlbmd0aCAlIHRoaXMuQllURVNfUEVSX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsZW5ndGggb2YgYnVmZmVyIG1pbnVzIGJ5dGVPZmZzZXQgbm90IGEgbXVsdGlwbGUgb2YgdGhlIGVsZW1lbnQgc2l6ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCAvIHRoaXMuQllURVNfUEVSX0VMRU1FTlQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBFQ01BU2NyaXB0LlRvVWludDMyKGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gdGhpcy5sZW5ndGggKiB0aGlzLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLmJ5dGVMZW5ndGggPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2J5dGVPZmZzZXQgYW5kIGxlbmd0aCByZWZlcmVuY2UgYW4gYXJlYSBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnQgdHlwZShzKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IF9jdG9yO1xuICAgICAgICAgICAgY29uZmlndXJlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgIG1ha2VBcnJheUFjY2Vzc29ycyh0aGlzKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIF9jdG9yLnByb3RvdHlwZSA9IG5ldyBBcnJheUJ1ZmZlclZpZXcoKTtcbiAgICAgICAgICBfY3Rvci5wcm90b3R5cGUuQllURVNfUEVSX0VMRU1FTlQgPSBieXRlc1BlckVsZW1lbnQ7XG4gICAgICAgICAgX2N0b3IucHJvdG90eXBlLl9wYWNrID0gcGFjaztcbiAgICAgICAgICBfY3Rvci5wcm90b3R5cGUuX3VucGFjayA9IHVucGFjaztcbiAgICAgICAgICBfY3Rvci5CWVRFU19QRVJfRUxFTUVOVCA9IGJ5dGVzUGVyRWxlbWVudDtcbiAgICAgICAgICBfY3Rvci5wcm90b3R5cGUuX2dldHRlciA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggPSBFQ01BU2NyaXB0LlRvVWludDMyKGluZGV4KTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJ5dGVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbyA9IHRoaXMuYnl0ZU9mZnNldCArIGluZGV4ICogdGhpcy5CWVRFU19QRVJfRUxFTUVOVDsgaSA8IHRoaXMuQllURVNfUEVSX0VMRU1FTlQ7IGkgKz0gMSwgXG4gICAgICAgICAgICBvICs9IDEpIHtcbiAgICAgICAgICAgICAgYnl0ZXMucHVzaCh0aGlzLmJ1ZmZlci5fYnl0ZXNbb10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VucGFjayhieXRlcyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBfY3Rvci5wcm90b3R5cGUuZ2V0ID0gX2N0b3IucHJvdG90eXBlLl9nZXR0ZXI7XG4gICAgICAgICAgX2N0b3IucHJvdG90eXBlLl9zZXR0ZXIgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmRleCA9IEVDTUFTY3JpcHQuVG9VaW50MzIoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFyIGJ5dGVzID0gdGhpcy5fcGFjayh2YWx1ZSk7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICB2YXIgbztcbiAgICAgICAgICAgICAgZm9yIChpID0gMCwgbyA9IHRoaXMuYnl0ZU9mZnNldCArIGluZGV4ICogdGhpcy5CWVRFU19QRVJfRUxFTUVOVDsgaSA8IHRoaXMuQllURVNfUEVSX0VMRU1FTlQ7IGkgKz0gMSwgXG4gICAgICAgICAgICAgIG8gKz0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLl9ieXRlc1tvXSA9IGJ5dGVzW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBfY3Rvci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFycmF5LCBzZXF1ZW5jZSwgb2Zmc2V0LCBsZW4sIGksIHMsIGQyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoLCB0bXA7XG4gICAgICAgICAgICBpZiAoX3R5cGVvZihhcmd1bWVudHNbMF0pID09PSAnb2JqZWN0JyAmJiBhcmd1bWVudHNbMF0uY29uc3RydWN0b3IgPT09IHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgIG9mZnNldCA9IEVDTUFTY3JpcHQuVG9VaW50MzIoYXJndW1lbnRzWzFdKTtcbiAgICAgICAgICAgICAgaWYgKG9mZnNldCArIGFycmF5Lmxlbmd0aCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ09mZnNldCBwbHVzIGxlbmd0aCBvZiBhcnJheSBpcyBvdXQgb2YgcmFuZ2UnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBieXRlT2Zmc2V0ID0gdGhpcy5ieXRlT2Zmc2V0ICsgb2Zmc2V0ICogdGhpcy5CWVRFU19QRVJfRUxFTUVOVDtcbiAgICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IGFycmF5Lmxlbmd0aCAqIHRoaXMuQllURVNfUEVSX0VMRU1FTlQ7XG4gICAgICAgICAgICAgIGlmIChhcnJheS5idWZmZXIgPT09IHRoaXMuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgdG1wID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgcyA9IGFycmF5LmJ5dGVPZmZzZXQ7IGkgPCBieXRlTGVuZ3RoOyBpICs9IDEsIHMgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgdG1wW2ldID0gYXJyYXkuYnVmZmVyLl9ieXRlc1tzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgZDIgPSBieXRlT2Zmc2V0OyBpIDwgYnl0ZUxlbmd0aDsgaSArPSAxLCBkMiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5fYnl0ZXNbZDJdID0gdG1wW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBzID0gYXJyYXkuYnl0ZU9mZnNldCwgZDIgPSBieXRlT2Zmc2V0OyBpIDwgYnl0ZUxlbmd0aDsgaSArPSAxLCBcbiAgICAgICAgICAgICAgICBzICs9IDEsIGQyICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLl9ieXRlc1tkMl0gPSBhcnJheS5idWZmZXIuX2J5dGVzW3NdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKGFyZ3VtZW50c1swXSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBhcmd1bWVudHNbMF0ubGVuZ3RoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBzZXF1ZW5jZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgbGVuID0gRUNNQVNjcmlwdC5Ub1VpbnQzMihzZXF1ZW5jZS5sZW5ndGgpO1xuICAgICAgICAgICAgICBvZmZzZXQgPSBFQ01BU2NyaXB0LlRvVWludDMyKGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgICAgIGlmIChvZmZzZXQgKyBsZW4gPiB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPZmZzZXQgcGx1cyBsZW5ndGggb2YgYXJyYXkgaXMgb3V0IG9mIHJhbmdlJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgcyA9IHNlcXVlbmNlW2ldO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldHRlcihvZmZzZXQgKyBpLCBOdW1iZXIocykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50IHR5cGUocyknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIF9jdG9yLnByb3RvdHlwZS5zdWJhcnJheSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gRUNNQVNjcmlwdC5Ub0ludDMyKHN0YXJ0KTtcbiAgICAgICAgICAgIGVuZCA9IEVDTUFTY3JpcHQuVG9JbnQzMihlbmQpO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgICAgICAgZW5kID0gdGhpcy5sZW5ndGggKyBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCA9IGNsYW1wMyhzdGFydCwgMCwgdGhpcy5sZW5ndGgpO1xuICAgICAgICAgICAgZW5kID0gY2xhbXAzKGVuZCwgMCwgdGhpcy5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgICAgaWYgKGxlbiA8IDApIHtcbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0ICsgc3RhcnQgKiB0aGlzLkJZVEVTX1BFUl9FTEVNRU5ULCBsZW4pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIF9jdG9yO1xuICAgICAgICB9XG4gICAgICAgIHZhciBJbnQ4QXJyYXkgPSBtYWtlQ29uc3RydWN0b3IoMSwgcGFja0k4LCB1bnBhY2tJOCk7XG4gICAgICAgIHZhciBVaW50OEFycmF5MiA9IG1ha2VDb25zdHJ1Y3RvcigxLCBwYWNrVTgsIHVucGFja1U4KTtcbiAgICAgICAgdmFyIFVpbnQ4Q2xhbXBlZEFycmF5MiA9IG1ha2VDb25zdHJ1Y3RvcigxLCBwYWNrVThDbGFtcGVkLCB1bnBhY2tVOCk7XG4gICAgICAgIHZhciBJbnQxNkFycmF5ID0gbWFrZUNvbnN0cnVjdG9yKDIsIHBhY2tJMTYsIHVucGFja0kxNik7XG4gICAgICAgIHZhciBVaW50MTZBcnJheSA9IG1ha2VDb25zdHJ1Y3RvcigyLCBwYWNrVTE2LCB1bnBhY2tVMTYpO1xuICAgICAgICB2YXIgSW50MzJBcnJheSA9IG1ha2VDb25zdHJ1Y3Rvcig0LCBwYWNrSTMyLCB1bnBhY2tJMzIpO1xuICAgICAgICB2YXIgVWludDMyQXJyYXkzID0gbWFrZUNvbnN0cnVjdG9yKDQsIHBhY2tVMzIsIHVucGFja1UzMik7XG4gICAgICAgIHZhciBGbG9hdDMyQXJyYXkgPSBtYWtlQ29uc3RydWN0b3IoNCwgcGFja0YzMiwgdW5wYWNrRjMyKTtcbiAgICAgICAgdmFyIEZsb2F0NjRBcnJheSA9IG1ha2VDb25zdHJ1Y3Rvcig4LCBwYWNrRjY0LCB1bnBhY2tGNjQpO1xuICAgICAgICBleHBvcnRzLkludDhBcnJheSA9IGV4cG9ydHMuSW50OEFycmF5IHx8IEludDhBcnJheTtcbiAgICAgICAgZXhwb3J0cy5VaW50OEFycmF5ID0gZXhwb3J0cy5VaW50OEFycmF5IHx8IFVpbnQ4QXJyYXkyO1xuICAgICAgICBleHBvcnRzLlVpbnQ4Q2xhbXBlZEFycmF5ID0gZXhwb3J0cy5VaW50OENsYW1wZWRBcnJheSB8fCBVaW50OENsYW1wZWRBcnJheTI7XG4gICAgICAgIGV4cG9ydHMuSW50MTZBcnJheSA9IGV4cG9ydHMuSW50MTZBcnJheSB8fCBJbnQxNkFycmF5O1xuICAgICAgICBleHBvcnRzLlVpbnQxNkFycmF5ID0gZXhwb3J0cy5VaW50MTZBcnJheSB8fCBVaW50MTZBcnJheTtcbiAgICAgICAgZXhwb3J0cy5JbnQzMkFycmF5ID0gZXhwb3J0cy5JbnQzMkFycmF5IHx8IEludDMyQXJyYXk7XG4gICAgICAgIGV4cG9ydHMuVWludDMyQXJyYXkgPSBleHBvcnRzLlVpbnQzMkFycmF5IHx8IFVpbnQzMkFycmF5MztcbiAgICAgICAgZXhwb3J0cy5GbG9hdDMyQXJyYXkgPSBleHBvcnRzLkZsb2F0MzJBcnJheSB8fCBGbG9hdDMyQXJyYXk7XG4gICAgICAgIGV4cG9ydHMuRmxvYXQ2NEFycmF5ID0gZXhwb3J0cy5GbG9hdDY0QXJyYXkgfHwgRmxvYXQ2NEFycmF5O1xuICAgICAgfSkoKTtcbiAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gcihhcnJheSwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gRUNNQVNjcmlwdC5Jc0NhbGxhYmxlKGFycmF5LmdldCkgPyBhcnJheS5nZXQoaW5kZXgpIDogYXJyYXlbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBJU19CSUdfRU5ESUFOID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHUxNmFycmF5ID0gbmV3IGV4cG9ydHMuVWludDE2QXJyYXkoWyA0NjYwIF0pLCB1OGFycmF5ID0gbmV3IGV4cG9ydHMuVWludDhBcnJheSh1MTZhcnJheS5idWZmZXIpO1xuICAgICAgICAgIHJldHVybiByKHU4YXJyYXksIDApID09PSAxODtcbiAgICAgICAgfSgpO1xuICAgICAgICBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYnVmZmVyID0gbmV3IGV4cG9ydHMuQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghKGJ1ZmZlciBpbnN0YW5jZW9mIGV4cG9ydHMuQXJyYXlCdWZmZXIgfHwgRUNNQVNjcmlwdC5DbGFzcyhidWZmZXIpID09PSAnQXJyYXlCdWZmZXInKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVHlwZUVycm9yJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyIHx8IG5ldyBleHBvcnRzLkFycmF5QnVmZmVyKDApO1xuICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IEVDTUFTY3JpcHQuVG9VaW50MzIoYnl0ZU9mZnNldCk7XG4gICAgICAgICAgaWYgKHRoaXMuYnl0ZU9mZnNldCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdieXRlT2Zmc2V0IG91dCBvZiByYW5nZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGggLSB0aGlzLmJ5dGVPZmZzZXQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IEVDTUFTY3JpcHQuVG9VaW50MzIoYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLmJ5dGVMZW5ndGggPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYnl0ZU9mZnNldCBhbmQgbGVuZ3RoIHJlZmVyZW5jZSBhbiBhcmVhIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBidWZmZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uZmlndXJlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKGFycmF5VHlwZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihieXRlT2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIGJ5dGVPZmZzZXQgPSBFQ01BU2NyaXB0LlRvVWludDMyKGJ5dGVPZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGJ5dGVPZmZzZXQgKyBhcnJheVR5cGUuQllURVNfUEVSX0VMRU1FTlQgPiB0aGlzLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0FycmF5IGluZGV4IG91dCBvZiByYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnl0ZU9mZnNldCArPSB0aGlzLmJ5dGVPZmZzZXQ7XG4gICAgICAgICAgICB2YXIgdWludDhBcnJheSA9IG5ldyBleHBvcnRzLlVpbnQ4QXJyYXkodGhpcy5idWZmZXIsIGJ5dGVPZmZzZXQsIGFycmF5VHlwZS5CWVRFU19QRVJfRUxFTUVOVCksIGJ5dGVzID0gW10sIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyYXlUeXBlLkJZVEVTX1BFUl9FTEVNRU5UOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgYnl0ZXMucHVzaChyKHVpbnQ4QXJyYXksIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCb29sZWFuKGxpdHRsZUVuZGlhbikgPT09IEJvb2xlYW4oSVNfQklHX0VORElBTikpIHtcbiAgICAgICAgICAgICAgYnl0ZXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHIobmV3IGFycmF5VHlwZShuZXcgZXhwb3J0cy5VaW50OEFycmF5KGJ5dGVzKS5idWZmZXIpLCAwKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIERhdGFWaWV3LnByb3RvdHlwZS5nZXRVaW50OCA9IG1ha2VHZXR0ZXIoZXhwb3J0cy5VaW50OEFycmF5KTtcbiAgICAgICAgRGF0YVZpZXcucHJvdG90eXBlLmdldEludDggPSBtYWtlR2V0dGVyKGV4cG9ydHMuSW50OEFycmF5KTtcbiAgICAgICAgRGF0YVZpZXcucHJvdG90eXBlLmdldFVpbnQxNiA9IG1ha2VHZXR0ZXIoZXhwb3J0cy5VaW50MTZBcnJheSk7XG4gICAgICAgIERhdGFWaWV3LnByb3RvdHlwZS5nZXRJbnQxNiA9IG1ha2VHZXR0ZXIoZXhwb3J0cy5JbnQxNkFycmF5KTtcbiAgICAgICAgRGF0YVZpZXcucHJvdG90eXBlLmdldFVpbnQzMiA9IG1ha2VHZXR0ZXIoZXhwb3J0cy5VaW50MzJBcnJheSk7XG4gICAgICAgIERhdGFWaWV3LnByb3RvdHlwZS5nZXRJbnQzMiA9IG1ha2VHZXR0ZXIoZXhwb3J0cy5JbnQzMkFycmF5KTtcbiAgICAgICAgRGF0YVZpZXcucHJvdG90eXBlLmdldEZsb2F0MzIgPSBtYWtlR2V0dGVyKGV4cG9ydHMuRmxvYXQzMkFycmF5KTtcbiAgICAgICAgRGF0YVZpZXcucHJvdG90eXBlLmdldEZsb2F0NjQgPSBtYWtlR2V0dGVyKGV4cG9ydHMuRmxvYXQ2NEFycmF5KTtcbiAgICAgICAgZnVuY3Rpb24gbWFrZVNldHRlcihhcnJheVR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYnl0ZU9mZnNldCwgdmFsdWUsIGxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgYnl0ZU9mZnNldCA9IEVDTUFTY3JpcHQuVG9VaW50MzIoYnl0ZU9mZnNldCk7XG4gICAgICAgICAgICBpZiAoYnl0ZU9mZnNldCArIGFycmF5VHlwZS5CWVRFU19QRVJfRUxFTUVOVCA+IHRoaXMuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXJyYXkgaW5kZXggb3V0IG9mIHJhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdHlwZUFycmF5ID0gbmV3IGFycmF5VHlwZShbIHZhbHVlIF0pLCBieXRlQXJyYXkgPSBuZXcgZXhwb3J0cy5VaW50OEFycmF5KHR5cGVBcnJheS5idWZmZXIpLCBieXRlcyA9IFtdLCBpLCBieXRlVmlldztcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJheVR5cGUuQllURVNfUEVSX0VMRU1FTlQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBieXRlcy5wdXNoKHIoYnl0ZUFycmF5LCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQm9vbGVhbihsaXR0bGVFbmRpYW4pID09PSBCb29sZWFuKElTX0JJR19FTkRJQU4pKSB7XG4gICAgICAgICAgICAgIGJ5dGVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ5dGVWaWV3ID0gbmV3IGV4cG9ydHMuVWludDhBcnJheSh0aGlzLmJ1ZmZlciwgYnl0ZU9mZnNldCwgYXJyYXlUeXBlLkJZVEVTX1BFUl9FTEVNRU5UKTtcbiAgICAgICAgICAgIGJ5dGVWaWV3LnNldChieXRlcyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBEYXRhVmlldy5wcm90b3R5cGUuc2V0VWludDggPSBtYWtlU2V0dGVyKGV4cG9ydHMuVWludDhBcnJheSk7XG4gICAgICAgIERhdGFWaWV3LnByb3RvdHlwZS5zZXRJbnQ4ID0gbWFrZVNldHRlcihleHBvcnRzLkludDhBcnJheSk7XG4gICAgICAgIERhdGFWaWV3LnByb3RvdHlwZS5zZXRVaW50MTYgPSBtYWtlU2V0dGVyKGV4cG9ydHMuVWludDE2QXJyYXkpO1xuICAgICAgICBEYXRhVmlldy5wcm90b3R5cGUuc2V0SW50MTYgPSBtYWtlU2V0dGVyKGV4cG9ydHMuSW50MTZBcnJheSk7XG4gICAgICAgIERhdGFWaWV3LnByb3RvdHlwZS5zZXRVaW50MzIgPSBtYWtlU2V0dGVyKGV4cG9ydHMuVWludDMyQXJyYXkpO1xuICAgICAgICBEYXRhVmlldy5wcm90b3R5cGUuc2V0SW50MzIgPSBtYWtlU2V0dGVyKGV4cG9ydHMuSW50MzJBcnJheSk7XG4gICAgICAgIERhdGFWaWV3LnByb3RvdHlwZS5zZXRGbG9hdDMyID0gbWFrZVNldHRlcihleHBvcnRzLkZsb2F0MzJBcnJheSk7XG4gICAgICAgIERhdGFWaWV3LnByb3RvdHlwZS5zZXRGbG9hdDY0ID0gbWFrZVNldHRlcihleHBvcnRzLkZsb2F0NjRBcnJheSk7XG4gICAgICAgIGV4cG9ydHMuRGF0YVZpZXcgPSBleHBvcnRzLkRhdGFWaWV3IHx8IERhdGFWaWV3O1xuICAgICAgfSkoKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV93ZWFrbWFwX3BvbHlmaWxsID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzKSB7XG4gICAgICAoZnVuY3Rpb24oc2VsZjIpIHtcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICBpZiAoc2VsZjIuV2Vha01hcCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFzT3duUHJvcGVydHkyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgICAgICAgdmFyIGhhc0RlZmluZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiAxXG4gICAgICAgICAgICB9KS54ID09PSAxO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH0oKTtcbiAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChoYXNEZWZpbmUpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzZWxmMi5XZWFrTWFwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZnVuY3Rpb24gV2Vha01hcDIoKSB7XG4gICAgICAgICAgICBpZiAodGhpcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnN0cnVjdG9yIFdlYWtNYXAgcmVxdWlyZXMgXFwnbmV3XFwnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2lkJywgZ2VuSWQoJ19XZWFrTWFwJykpO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1dlYWtNYXAgaXRlcmFibGUgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShXZWFrTWFwMi5wcm90b3R5cGUsICdkZWxldGUnLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGNoZWNrSW5zdGFuY2UodGhpcywgJ2RlbGV0ZScpO1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlbnRyeSA9IGtleVt0aGlzLl9pZF07XG4gICAgICAgICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICAgICAgICBkZWxldGUga2V5W3RoaXMuX2lkXTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkoV2Vha01hcDIucHJvdG90eXBlLCAnZ2V0JywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBjaGVja0luc3RhbmNlKHRoaXMsICdnZXQnKTtcbiAgICAgICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVudHJ5ID0ga2V5W3RoaXMuX2lkXTtcbiAgICAgICAgICAgIGlmIChlbnRyeSAmJiBlbnRyeVswXSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBlbnRyeVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkoV2Vha01hcDIucHJvdG90eXBlLCAnaGFzJywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBjaGVja0luc3RhbmNlKHRoaXMsICdoYXMnKTtcbiAgICAgICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuICAgICAgICAgICAgaWYgKGVudHJ5ICYmIGVudHJ5WzBdID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkoV2Vha01hcDIucHJvdG90eXBlLCAnc2V0JywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgY2hlY2tJbnN0YW5jZSh0aGlzLCAnc2V0Jyk7XG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB2YWx1ZSB1c2VkIGFzIHdlYWsgbWFwIGtleScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVudHJ5ID0ga2V5W3RoaXMuX2lkXTtcbiAgICAgICAgICAgIGlmIChlbnRyeSAmJiBlbnRyeVswXSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkoa2V5LCB0aGlzLl9pZCwgWyBrZXksIHZhbHVlIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZnVuY3Rpb24gY2hlY2tJbnN0YW5jZSh4LCBtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KHgpIHx8ICFoYXNPd25Qcm9wZXJ0eTIuY2FsbCh4LCAnX2lkJykpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtZXRob2ROYW1lICsgJyBtZXRob2QgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlciAnICsgX3R5cGVvZih4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGdlbklkKHByZWZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArICdfJyArIHJhbmQoKSArICcuJyArIHJhbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcmFuZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShXZWFrTWFwMiwgJ19wb2x5ZmlsbCcsIHRydWUpO1xuICAgICAgICAgIHJldHVybiBXZWFrTWFwMjtcbiAgICAgICAgfSgpO1xuICAgICAgICBmdW5jdGlvbiBpc09iamVjdCh4KSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdCh4KSA9PT0geDtcbiAgICAgICAgfVxuICAgICAgfSkodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogZXhwb3J0cyk7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZ2xvYmFsID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBjaGVjayA9IGZ1bmN0aW9uIGNoZWNrKGl0KSB7XG4gICAgICAgIHJldHVybiBpdCAmJiBpdC5NYXRoID09PSBNYXRoICYmIGl0O1xuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gY2hlY2soKHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihnbG9iYWxUaGlzKSkgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHwgY2hlY2soKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHdpbmRvdykpID09ICdvYmplY3QnICYmIHdpbmRvdykgfHwgY2hlY2soKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzZWxmKSkgPT0gJ29iamVjdCcgJiYgc2VsZikgfHwgY2hlY2soKHR5cGVvZiBnbG9iYWwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGdsb2JhbCkpID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSgpIHx8IGV4cG9ydHMgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9mYWlscyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gISFleGVjKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZnVuY3Rpb25fYmluZF9uYXRpdmUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGZhaWxzID0gcmVxdWlyZV9mYWlscygpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ZXN0ID0gZnVuY3Rpb24oKSB7fS5iaW5kKCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGVzdCAhPSAnZnVuY3Rpb24nIHx8IHRlc3QuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZScpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZnVuY3Rpb25fYXBwbHkgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZV9mdW5jdGlvbl9iaW5kX25hdGl2ZSgpO1xuICAgICAgdmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgICAgdmFyIGFwcGx5ID0gRnVuY3Rpb25Qcm90b3R5cGUuYXBwbHk7XG4gICAgICB2YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9ICh0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoUmVmbGVjdCkpID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2FsbC5hcHBseShhcHBseSwgYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpcyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlX2Z1bmN0aW9uX2JpbmRfbmF0aXZlKCk7XG4gICAgICB2YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gICAgICB2YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG4gICAgICB2YXIgdW5jdXJyeVRoaXNXaXRoQmluZCA9IE5BVElWRV9CSU5EICYmIEZ1bmN0aW9uUHJvdG90eXBlLmJpbmQuYmluZChjYWxsLCBjYWxsKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyB1bmN1cnJ5VGhpc1dpdGhCaW5kIDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9jbGFzc29mX3JhdyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpcygpO1xuICAgICAgdmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoe30udG9TdHJpbmcpO1xuICAgICAgdmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nU2xpY2UodG9TdHJpbmcoaXQpLCA4LCAtMSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpc19jbGF1c2UgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlX2NsYXNzb2ZfcmF3KCk7XG4gICAgICB2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpcygpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gdW5jdXJyeVRoaXMoZm4pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2RvY3VtZW50X2FsbCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZG9jdW1lbnRBbGwgPSAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkb2N1bWVudCkpID09ICdvYmplY3QnICYmIGRvY3VtZW50LmFsbDtcbiAgICAgIHZhciBJU19IVE1MRERBID0gdHlwZW9mIGRvY3VtZW50QWxsID09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50QWxsICE9PSB2b2lkIDA7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgYWxsOiBkb2N1bWVudEFsbCxcbiAgICAgICAgSVNfSFRNTEREQTogSVNfSFRNTEREQVxuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19jYWxsYWJsZTIgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyICRkb2N1bWVudEFsbCA9IHJlcXVpcmVfZG9jdW1lbnRfYWxsKCk7XG4gICAgICB2YXIgZG9jdW1lbnRBbGwgPSAkZG9jdW1lbnRBbGwuYWxsO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSAkZG9jdW1lbnRBbGwuSVNfSFRNTEREQSA/IGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT0gJ2Z1bmN0aW9uJyB8fCBhcmd1bWVudCA9PT0gZG9jdW1lbnRBbGw7XG4gICAgICB9IDogZnVuY3Rpb24oYXJndW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9kZXNjcmlwdG9ycyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZmFpbHMgPSByZXF1aXJlX2ZhaWxzKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIDc7XG4gICAgICAgICAgfVxuICAgICAgICB9KVsxXSAhPT0gNztcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2Z1bmN0aW9uX2NhbGwgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZV9mdW5jdGlvbl9iaW5kX25hdGl2ZSgpO1xuICAgICAgdmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoY2FsbCkgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfb2JqZWN0X3Byb3BlcnR5X2lzX2VudW1lcmFibGUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgICAgdmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7XG4gICAgICAgIDE6IDJcbiAgICAgIH0sIDEpO1xuICAgICAgZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICAgICAgICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbiAgICAgIH0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfY3JlYXRlX3Byb3BlcnR5X2Rlc2NyaXB0b3IgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICAgICAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgICAgICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2luZGV4ZWRfb2JqZWN0ID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmVfZnVuY3Rpb25fdW5jdXJyeV90aGlzKCk7XG4gICAgICB2YXIgZmFpbHMgPSByZXF1aXJlX2ZhaWxzKCk7XG4gICAgICB2YXIgY2xhc3NvZiA9IHJlcXVpcmVfY2xhc3NvZl9yYXcoKTtcbiAgICAgIHZhciAkT2JqZWN0ID0gT2JqZWN0O1xuICAgICAgdmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEkT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG4gICAgICB9KSA/IGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgIHJldHVybiBjbGFzc29mKGl0KSA9PT0gJ1N0cmluZycgPyBzcGxpdChpdCwgJycpIDogJE9iamVjdChpdCk7XG4gICAgICB9IDogJE9iamVjdDtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19udWxsX29yX3VuZGVmaW5lZCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgIHJldHVybiBpdCA9PT0gbnVsbCB8fCBpdCA9PT0gdm9pZCAwO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9yZXF1aXJlX29iamVjdF9jb2VyY2libGUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZV9pc19udWxsX29yX3VuZGVmaW5lZCgpO1xuICAgICAgdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgIGlmIChpc051bGxPclVuZGVmaW5lZChpdCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcignQ2FuXFwndCBjYWxsIG1ldGhvZCBvbiAnICsgaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdDtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfdG9faW5kZXhlZF9vYmplY3QgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlX2luZGV4ZWRfb2JqZWN0KCk7XG4gICAgICB2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmVfcmVxdWlyZV9vYmplY3RfY29lcmNpYmxlKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfaXNfb2JqZWN0MiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUyKCk7XG4gICAgICB2YXIgJGRvY3VtZW50QWxsID0gcmVxdWlyZV9kb2N1bWVudF9hbGwoKTtcbiAgICAgIHZhciBkb2N1bWVudEFsbCA9ICRkb2N1bWVudEFsbC5hbGw7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9ICRkb2N1bWVudEFsbC5JU19IVE1MRERBID8gZnVuY3Rpb24oaXQpIHtcbiAgICAgICAgcmV0dXJuIF90eXBlb2YoaXQpID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KSB8fCBpdCA9PT0gZG9jdW1lbnRBbGw7XG4gICAgICB9IDogZnVuY3Rpb24oaXQpIHtcbiAgICAgICAgcmV0dXJuIF90eXBlb2YoaXQpID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfcGF0aCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2dldF9idWlsdF9pbiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgcGF0aCA9IHJlcXVpcmVfcGF0aCgpO1xuICAgICAgdmFyIGdsb2JhbDIgPSByZXF1aXJlX2dsb2JhbCgpO1xuICAgICAgdmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlX2lzX2NhbGxhYmxlMigpO1xuICAgICAgdmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uIGFGdW5jdGlvbih2YXJpYWJsZSkge1xuICAgICAgICByZXR1cm4gaXNDYWxsYWJsZSh2YXJpYWJsZSkgPyB2YXJpYWJsZSA6IHZvaWQgMDtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWwyW25hbWVzcGFjZV0pIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbDJbbmFtZXNwYWNlXSAmJiBnbG9iYWwyW25hbWVzcGFjZV1bbWV0aG9kXTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfb2JqZWN0X2lzX3Byb3RvdHlwZV9vZiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpcygpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyh7fS5pc1Byb3RvdHlwZU9mKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9lbmdpbmVfdXNlcl9hZ2VudCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gJ3VuZGVmaW5lZCcgJiYgU3RyaW5nKG5hdmlnYXRvci51c2VyQWdlbnQpIHx8ICcnO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2VuZ2luZV92OF92ZXJzaW9uID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBnbG9iYWwyID0gcmVxdWlyZV9nbG9iYWwoKTtcbiAgICAgIHZhciB1c2VyQWdlbnQgPSByZXF1aXJlX2VuZ2luZV91c2VyX2FnZW50KCk7XG4gICAgICB2YXIgcHJvY2VzczIgPSBnbG9iYWwyLnByb2Nlc3M7XG4gICAgICB2YXIgRGVubyA9IGdsb2JhbDIuRGVubztcbiAgICAgIHZhciB2ZXJzaW9ucyA9IHByb2Nlc3MyICYmIHByb2Nlc3MyLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xuICAgICAgdmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG4gICAgICB2YXIgbWF0Y2g7XG4gICAgICB2YXIgdmVyc2lvbjtcbiAgICAgIGlmICh2OCkge1xuICAgICAgICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gICAgICAgIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG4gICAgICB9XG4gICAgICBpZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gICAgICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gICAgICAgIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICAgICAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3N5bWJvbF9jb25zdHJ1Y3Rvcl9kZXRlY3Rpb24gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlX2VuZ2luZV92OF92ZXJzaW9uKCk7XG4gICAgICB2YXIgZmFpbHMgPSByZXF1aXJlX2ZhaWxzKCk7XG4gICAgICB2YXIgZ2xvYmFsMiA9IHJlcXVpcmVfZ2xvYmFsKCk7XG4gICAgICB2YXIgJFN0cmluZyA9IGdsb2JhbDIuU3RyaW5nO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3ltYm9sID0gU3ltYm9sKCdzeW1ib2wgZGV0ZWN0aW9uJyk7XG4gICAgICAgIHJldHVybiAhJFN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8ICFTeW1ib2wuc2hhbSAmJiBWOF9WRVJTSU9OICYmIFY4X1ZFUlNJT04gPCA0MTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3VzZV9zeW1ib2xfYXNfdWlkID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZV9zeW1ib2xfY29uc3RydWN0b3JfZGV0ZWN0aW9uKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0wgJiYgIVN5bWJvbC5zaGFtICYmIF90eXBlb2YoU3ltYm9sLml0ZXJhdG9yKSA9PSAnc3ltYm9sJztcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19zeW1ib2wyID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBnZXRCdWlsdEluID0gcmVxdWlyZV9nZXRfYnVpbHRfaW4oKTtcbiAgICAgIHZhciBpc0NhbGxhYmxlID0gcmVxdWlyZV9pc19jYWxsYWJsZTIoKTtcbiAgICAgIHZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZV9vYmplY3RfaXNfcHJvdG90eXBlX29mKCk7XG4gICAgICB2YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlX3VzZV9zeW1ib2xfYXNfdWlkKCk7XG4gICAgICB2YXIgJE9iamVjdCA9IE9iamVjdDtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbihpdCkge1xuICAgICAgICByZXR1cm4gX3R5cGVvZihpdCkgPT0gJ3N5bWJvbCc7XG4gICAgICB9IDogZnVuY3Rpb24oaXQpIHtcbiAgICAgICAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgICAgICAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgJE9iamVjdChpdCkpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV90cnlfdG9fc3RyaW5nID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciAkU3RyaW5nID0gU3RyaW5nO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gJ09iamVjdCc7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfYV9jYWxsYWJsZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUyKCk7XG4gICAgICB2YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlX3RyeV90b19zdHJpbmcoKTtcbiAgICAgIHZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9nZXRfbWV0aG9kID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBhQ2FsbGFibGUgPSByZXF1aXJlX2FfY2FsbGFibGUoKTtcbiAgICAgIHZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmVfaXNfbnVsbF9vcl91bmRlZmluZWQoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oViwgUCkge1xuICAgICAgICB2YXIgZnVuYyA9IFZbUF07XG4gICAgICAgIHJldHVybiBpc051bGxPclVuZGVmaW5lZChmdW5jKSA/IHZvaWQgMCA6IGFDYWxsYWJsZShmdW5jKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfb3JkaW5hcnlfdG9fcHJpbWl0aXZlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBjYWxsID0gcmVxdWlyZV9mdW5jdGlvbl9jYWxsKCk7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUyKCk7XG4gICAgICB2YXIgaXNPYmplY3QgPSByZXF1aXJlX2lzX29iamVjdDIoKTtcbiAgICAgIHZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbnB1dCwgcHJlZikge1xuICAgICAgICB2YXIgZm4sIHZhbDtcbiAgICAgICAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NhbGxhYmxlKGZuID0gaW5wdXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcignQ2FuXFwndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfaXNfcHVyZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZGVmaW5lX2dsb2JhbF9wcm9wZXJ0eSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZ2xvYmFsMiA9IHJlcXVpcmVfZ2xvYmFsKCk7XG4gICAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWwyLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZ2xvYmFsMltrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9zaGFyZWRfc3RvcmUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGdsb2JhbDIgPSByZXF1aXJlX2dsb2JhbCgpO1xuICAgICAgdmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZV9kZWZpbmVfZ2xvYmFsX3Byb3BlcnR5KCk7XG4gICAgICB2YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG4gICAgICB2YXIgc3RvcmUgPSBnbG9iYWwyW1NIQVJFRF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoU0hBUkVELCB7fSk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3NoYXJlZCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgSVNfUFVSRSA9IHJlcXVpcmVfaXNfcHVyZSgpO1xuICAgICAgdmFyIHN0b3JlID0gcmVxdWlyZV9zaGFyZWRfc3RvcmUoKTtcbiAgICAgIChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiB7fSk7XG4gICAgICB9KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gICAgICAgIHZlcnNpb246ICczLjMzLjAnLFxuICAgICAgICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gICAgICAgIGNvcHlyaWdodDogJ1xceGE5IDIwMTQtMjAyMyBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gICAgICAgIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjMzLjAvTElDRU5TRScsXG4gICAgICAgIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfdG9fb2JqZWN0ID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZV9yZXF1aXJlX29iamVjdF9jb2VyY2libGUoKTtcbiAgICAgIHZhciAkT2JqZWN0ID0gT2JqZWN0O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2hhc19vd25fcHJvcGVydHkgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZV9mdW5jdGlvbl91bmN1cnJ5X3RoaXMoKTtcbiAgICAgIHZhciB0b09iamVjdCA9IHJlcXVpcmVfdG9fb2JqZWN0KCk7XG4gICAgICB2YXIgaGFzT3duUHJvcGVydHkyID0gdW5jdXJyeVRoaXMoe30uaGFzT3duUHJvcGVydHkpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bjIoaXQsIGtleSkge1xuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkyKHRvT2JqZWN0KGl0KSwga2V5KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfdWlkID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmVfZnVuY3Rpb25fdW5jdXJyeV90aGlzKCk7XG4gICAgICB2YXIgaWQgPSAwO1xuICAgICAgdmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgdmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4udG9TdHJpbmcpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHZvaWQgMCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV93ZWxsX2tub3duX3N5bWJvbCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZ2xvYmFsMiA9IHJlcXVpcmVfZ2xvYmFsKCk7XG4gICAgICB2YXIgc2hhcmVkID0gcmVxdWlyZV9zaGFyZWQoKTtcbiAgICAgIHZhciBoYXNPd24yID0gcmVxdWlyZV9oYXNfb3duX3Byb3BlcnR5KCk7XG4gICAgICB2YXIgdWlkID0gcmVxdWlyZV91aWQoKTtcbiAgICAgIHZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZV9zeW1ib2xfY29uc3RydWN0b3JfZGV0ZWN0aW9uKCk7XG4gICAgICB2YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlX3VzZV9zeW1ib2xfYXNfdWlkKCk7XG4gICAgICB2YXIgU3ltYm9sMiA9IGdsb2JhbDIuU3ltYm9sO1xuICAgICAgdmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG4gICAgICB2YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wyWydmb3InXSB8fCBTeW1ib2wyIDogU3ltYm9sMiAmJiBTeW1ib2wyLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duMihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24yKFN5bWJvbDIsIG5hbWUpID8gU3ltYm9sMltuYW1lXSA6IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV90b19wcmltaXRpdmUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGNhbGwgPSByZXF1aXJlX2Z1bmN0aW9uX2NhbGwoKTtcbiAgICAgIHZhciBpc09iamVjdCA9IHJlcXVpcmVfaXNfb2JqZWN0MigpO1xuICAgICAgdmFyIGlzU3ltYm9sID0gcmVxdWlyZV9pc19zeW1ib2wyKCk7XG4gICAgICB2YXIgZ2V0TWV0aG9kID0gcmVxdWlyZV9nZXRfbWV0aG9kKCk7XG4gICAgICB2YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmVfb3JkaW5hcnlfdG9fcHJpbWl0aXZlKCk7XG4gICAgICB2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZV93ZWxsX2tub3duX3N5bWJvbCgpO1xuICAgICAgdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4gICAgICB2YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbnB1dCwgcHJlZikge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHtcbiAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV4b3RpY1RvUHJpbSA9IGdldE1ldGhvZChpbnB1dCwgVE9fUFJJTUlUSVZFKTtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKGV4b3RpY1RvUHJpbSkge1xuICAgICAgICAgIGlmIChwcmVmID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHByZWYgPSAnZGVmYXVsdCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgICAgICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5cXCd0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmID09PSB2b2lkIDApIHtcbiAgICAgICAgICBwcmVmID0gJ251bWJlcic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV90b19wcm9wZXJ0eV9rZXkgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZV90b19wcmltaXRpdmUoKTtcbiAgICAgIHZhciBpc1N5bWJvbCA9IHJlcXVpcmVfaXNfc3ltYm9sMigpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgICAgICAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZG9jdW1lbnRfY3JlYXRlX2VsZW1lbnQgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGdsb2JhbDIgPSByZXF1aXJlX2dsb2JhbCgpO1xuICAgICAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZV9pc19vYmplY3QyKCk7XG4gICAgICB2YXIgZG9jdW1lbnQyID0gZ2xvYmFsMi5kb2N1bWVudDtcbiAgICAgIHZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudDIpICYmIGlzT2JqZWN0KGRvY3VtZW50Mi5jcmVhdGVFbGVtZW50KTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpIHtcbiAgICAgICAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50Mi5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pZThfZG9tX2RlZmluZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlX2Rlc2NyaXB0b3JzKCk7XG4gICAgICB2YXIgZmFpbHMgPSByZXF1aXJlX2ZhaWxzKCk7XG4gICAgICB2YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmVfZG9jdW1lbnRfY3JlYXRlX2VsZW1lbnQoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gNztcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmEgIT09IDc7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9vYmplY3RfZ2V0X293bl9wcm9wZXJ0eV9kZXNjcmlwdG9yID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlX2Rlc2NyaXB0b3JzKCk7XG4gICAgICB2YXIgY2FsbCA9IHJlcXVpcmVfZnVuY3Rpb25fY2FsbCgpO1xuICAgICAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZV9vYmplY3RfcHJvcGVydHlfaXNfZW51bWVyYWJsZSgpO1xuICAgICAgdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmVfY3JlYXRlX3Byb3BlcnR5X2Rlc2NyaXB0b3IoKTtcbiAgICAgIHZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlX3RvX2luZGV4ZWRfb2JqZWN0KCk7XG4gICAgICB2YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmVfdG9fcHJvcGVydHlfa2V5KCk7XG4gICAgICB2YXIgaGFzT3duMiA9IHJlcXVpcmVfaGFzX293bl9wcm9wZXJ0eSgpO1xuICAgICAgdmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZV9pZThfZG9tX2RlZmluZSgpO1xuICAgICAgdmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgICAgZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgICAgICAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgICAgICAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICAgIGlmIChJRThfRE9NX0RFRklORSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duMihPLCBQKSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX2ZvcmNlZCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZmFpbHMgPSByZXF1aXJlX2ZhaWxzKCk7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUyKCk7XG4gICAgICB2YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuICAgICAgdmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gaXNGb3JjZWQoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBQT0xZRklMTCA/IHRydWUgOiB2YWx1ZSA9PT0gTkFUSVZFID8gZmFsc2UgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pIDogISFkZXRlY3Rpb247XG4gICAgICB9O1xuICAgICAgdmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgfTtcbiAgICAgIHZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xuICAgICAgdmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbiAgICAgIHZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9mdW5jdGlvbl9iaW5kX2NvbnRleHQgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZV9mdW5jdGlvbl91bmN1cnJ5X3RoaXNfY2xhdXNlKCk7XG4gICAgICB2YXIgYUNhbGxhYmxlID0gcmVxdWlyZV9hX2NhbGxhYmxlKCk7XG4gICAgICB2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlX2Z1bmN0aW9uX2JpbmRfbmF0aXZlKCk7XG4gICAgICB2YXIgYmluZCA9IHVuY3VycnlUaGlzKHVuY3VycnlUaGlzLmJpbmQpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCkge1xuICAgICAgICBhQ2FsbGFibGUoZm4pO1xuICAgICAgICByZXR1cm4gdGhhdCA9PT0gdm9pZCAwID8gZm4gOiBOQVRJVkVfQklORCA/IGJpbmQoZm4sIHRoYXQpIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3Y4X3Byb3RvdHlwZV9kZWZpbmVfYnVnID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBERVNDUklQVE9SUyA9IHJlcXVpcmVfZGVzY3JpcHRvcnMoKTtcbiAgICAgIHZhciBmYWlscyA9IHJlcXVpcmVfZmFpbHMoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24oKSB7fSwgJ3Byb3RvdHlwZScsIHtcbiAgICAgICAgICB2YWx1ZTogNDIsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICAgIH0pLnByb3RvdHlwZSAhPT0gNDI7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9hbl9vYmplY3QgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZV9pc19vYmplY3QyKCk7XG4gICAgICB2YXIgJFN0cmluZyA9IFN0cmluZztcbiAgICAgIHZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKCRTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX29iamVjdF9kZWZpbmVfcHJvcGVydHkgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBERVNDUklQVE9SUyA9IHJlcXVpcmVfZGVzY3JpcHRvcnMoKTtcbiAgICAgIHZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmVfaWU4X2RvbV9kZWZpbmUoKTtcbiAgICAgIHZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmVfdjhfcHJvdG90eXBlX2RlZmluZV9idWcoKTtcbiAgICAgIHZhciBhbk9iamVjdCA9IHJlcXVpcmVfYW5fb2JqZWN0KCk7XG4gICAgICB2YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmVfdG9fcHJvcGVydHlfa2V5KCk7XG4gICAgICB2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbiAgICAgIHZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgICB2YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgICB2YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbiAgICAgIHZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbiAgICAgIHZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG4gICAgICBleHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICAgICAgICBhbk9iamVjdChPKTtcbiAgICAgICAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICAgIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICAgICAgICBpZiAodHlwZW9mIE8gPT09ICdmdW5jdGlvbicgJiYgUCA9PT0gJ3Byb3RvdHlwZScgJiYgJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzICYmIFdSSVRBQkxFIGluIEF0dHJpYnV0ZXMgJiYgIUF0dHJpYnV0ZXNbV1JJVEFCTEVdKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnQgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICAgICAgICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7XG4gICAgICAgICAgICBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICAgICAgICAgIEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0NPTkZJR1VSQUJMRV0gOiBjdXJyZW50W0NPTkZJR1VSQUJMRV0sXG4gICAgICAgICAgICAgIGVudW1lcmFibGU6IEVOVU1FUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbRU5VTUVSQUJMRV0gOiBjdXJyZW50W0VOVU1FUkFCTEVdLFxuICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gICAgICB9IDogJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICAgICAgICBhbk9iamVjdChPKTtcbiAgICAgICAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICAgIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICAgICAgICBpZiAoSUU4X0RPTV9ERUZJTkUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykge1xuICAgICAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9jcmVhdGVfbm9uX2VudW1lcmFibGVfcHJvcGVydHkgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZV9kZXNjcmlwdG9ycygpO1xuICAgICAgdmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZV9vYmplY3RfZGVmaW5lX3Byb3BlcnR5KCk7XG4gICAgICB2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZV9jcmVhdGVfcHJvcGVydHlfZGVzY3JpcHRvcigpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgICB9IDogZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2V4cG9ydCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZ2xvYmFsMiA9IHJlcXVpcmVfZ2xvYmFsKCk7XG4gICAgICB2YXIgYXBwbHkgPSByZXF1aXJlX2Z1bmN0aW9uX2FwcGx5KCk7XG4gICAgICB2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpc19jbGF1c2UoKTtcbiAgICAgIHZhciBpc0NhbGxhYmxlID0gcmVxdWlyZV9pc19jYWxsYWJsZTIoKTtcbiAgICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlX29iamVjdF9nZXRfb3duX3Byb3BlcnR5X2Rlc2NyaXB0b3IoKS5mO1xuICAgICAgdmFyIGlzRm9yY2VkID0gcmVxdWlyZV9pc19mb3JjZWQoKTtcbiAgICAgIHZhciBwYXRoID0gcmVxdWlyZV9wYXRoKCk7XG4gICAgICB2YXIgYmluZCA9IHJlcXVpcmVfZnVuY3Rpb25fYmluZF9jb250ZXh0KCk7XG4gICAgICB2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZV9jcmVhdGVfbm9uX2VudW1lcmFibGVfcHJvcGVydHkoKTtcbiAgICAgIHZhciBoYXNPd24yID0gcmVxdWlyZV9oYXNfb3duX3Byb3BlcnR5KCk7XG4gICAgICB2YXIgd3JhcENvbnN0cnVjdG9yID0gZnVuY3Rpb24gd3JhcENvbnN0cnVjdG9yKE5hdGl2ZUNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHZhciBfV3JhcHBlciA9IGZ1bmN0aW9uIFdyYXBwZXIoYTIsIGIyLCBjNCkge1xuICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgX1dyYXBwZXIpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpO1xuXG4gICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGEyKTtcblxuICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihhMiwgYjIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihhMiwgYjIsIGM0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFwcGx5KE5hdGl2ZUNvbnN0cnVjdG9yLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgICBfV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgIHJldHVybiBfV3JhcHBlcjtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9wdGlvbnMsIHNvdXJjZSkge1xuICAgICAgICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gICAgICAgIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgICAgICAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgICAgICAgdmFyIFBST1RPID0gb3B0aW9ucy5wcm90bztcbiAgICAgICAgdmFyIG5hdGl2ZVNvdXJjZSA9IEdMT0JBTCA/IGdsb2JhbDIgOiBTVEFUSUMgPyBnbG9iYWwyW1RBUkdFVF0gOiAoZ2xvYmFsMltUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gICAgICAgIHZhciB0YXJnZXQgPSBHTE9CQUwgPyBwYXRoIDogcGF0aFtUQVJHRVRdIHx8IGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShwYXRoLCBUQVJHRVQsIHt9KVtUQVJHRVRdO1xuICAgICAgICB2YXIgdGFyZ2V0UHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgdmFyIEZPUkNFRCwgVVNFX05BVElWRSwgVklSVFVBTF9QUk9UT1RZUEU7XG4gICAgICAgIHZhciBrZXksIHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSwgbmF0aXZlUHJvcGVydHksIHJlc3VsdFByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgICAgICAgIFVTRV9OQVRJVkUgPSAhRk9SQ0VEICYmIG5hdGl2ZVNvdXJjZSAmJiBoYXNPd24yKG5hdGl2ZVNvdXJjZSwga2V5KTtcbiAgICAgICAgICB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgICAgICAgIGlmIChVU0VfTkFUSVZFKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkge1xuICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5hdGl2ZVNvdXJjZSwga2V5KTtcbiAgICAgICAgICAgICAgbmF0aXZlUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuYXRpdmVQcm9wZXJ0eSA9IG5hdGl2ZVNvdXJjZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzb3VyY2VQcm9wZXJ0eSA9IFVTRV9OQVRJVkUgJiYgbmF0aXZlUHJvcGVydHkgPyBuYXRpdmVQcm9wZXJ0eSA6IHNvdXJjZVtrZXldO1xuICAgICAgICAgIGlmIChVU0VfTkFUSVZFICYmIF90eXBlb2YodGFyZ2V0UHJvcGVydHkpID09IF90eXBlb2Yoc291cmNlUHJvcGVydHkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYmluZCAmJiBVU0VfTkFUSVZFKSB7XG4gICAgICAgICAgICByZXN1bHRQcm9wZXJ0eSA9IGJpbmQoc291cmNlUHJvcGVydHksIGdsb2JhbDIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy53cmFwICYmIFVTRV9OQVRJVkUpIHtcbiAgICAgICAgICAgIHJlc3VsdFByb3BlcnR5ID0gd3JhcENvbnN0cnVjdG9yKHNvdXJjZVByb3BlcnR5KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKFBST1RPICYmIGlzQ2FsbGFibGUoc291cmNlUHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXN1bHRQcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHNvdXJjZVByb3BlcnR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0UHJvcGVydHkgPSBzb3VyY2VQcm9wZXJ0eTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdGlvbnMuc2hhbSB8fCBzb3VyY2VQcm9wZXJ0eSAmJiBzb3VyY2VQcm9wZXJ0eS5zaGFtIHx8IHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pIHtcbiAgICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHRQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwga2V5LCByZXN1bHRQcm9wZXJ0eSk7XG4gICAgICAgICAgaWYgKFBST1RPKSB7XG4gICAgICAgICAgICBWSVJUVUFMX1BST1RPVFlQRSA9IFRBUkdFVCArICdQcm90b3R5cGUnO1xuICAgICAgICAgICAgaWYgKCFoYXNPd24yKHBhdGgsIFZJUlRVQUxfUFJPVE9UWVBFKSkge1xuICAgICAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocGF0aCwgVklSVFVBTF9QUk9UT1RZUEUsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShwYXRoW1ZJUlRVQUxfUFJPVE9UWVBFXSwga2V5LCBzb3VyY2VQcm9wZXJ0eSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZWFsICYmIHRhcmdldFByb3RvdHlwZSAmJiAoRk9SQ0VEIHx8ICF0YXJnZXRQcm90b3R5cGVba2V5XSkpIHtcbiAgICAgICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldFByb3RvdHlwZSwga2V5LCBzb3VyY2VQcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2VzX29iamVjdF9oYXNfb3duID0gX19jb21tb25KUyhmdW5jdGlvbigpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciAkID0gcmVxdWlyZV9leHBvcnQoKTtcbiAgICAgIHZhciBoYXNPd24yID0gcmVxdWlyZV9oYXNfb3duX3Byb3BlcnR5KCk7XG4gICAgICAkKHtcbiAgICAgICAgdGFyZ2V0OiAnT2JqZWN0JyxcbiAgICAgICAgc3RhdDogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBoYXNPd246IGhhc093bjJcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2hhc19vd24gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmVxdWlyZV9lc19vYmplY3RfaGFzX293bigpO1xuICAgICAgdmFyIHBhdGggPSByZXF1aXJlX3BhdGgoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcGF0aC5PYmplY3QuaGFzT3duO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2hhc19vd24yID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBwYXJlbnQgPSByZXF1aXJlX2hhc19vd24oKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2hhc19vd24zID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBwYXJlbnQgPSByZXF1aXJlX2hhc19vd24yKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9zaGFyZWRfa2V5ID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBzaGFyZWQgPSByZXF1aXJlX3NoYXJlZCgpO1xuICAgICAgdmFyIHVpZCA9IHJlcXVpcmVfdWlkKCk7XG4gICAgICB2YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9jb3JyZWN0X3Byb3RvdHlwZV9nZXR0ZXIgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGZhaWxzID0gcmVxdWlyZV9mYWlscygpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmN0aW9uIEYoKSB7fVxuICAgICAgICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfb2JqZWN0X2dldF9wcm90b3R5cGVfb2YgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGhhc093bjIgPSByZXF1aXJlX2hhc19vd25fcHJvcGVydHkoKTtcbiAgICAgIHZhciBpc0NhbGxhYmxlID0gcmVxdWlyZV9pc19jYWxsYWJsZTIoKTtcbiAgICAgIHZhciB0b09iamVjdCA9IHJlcXVpcmVfdG9fb2JqZWN0KCk7XG4gICAgICB2YXIgc2hhcmVkS2V5ID0gcmVxdWlyZV9zaGFyZWRfa2V5KCk7XG4gICAgICB2YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZV9jb3JyZWN0X3Byb3RvdHlwZV9nZXR0ZXIoKTtcbiAgICAgIHZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbiAgICAgIHZhciAkT2JqZWN0ID0gT2JqZWN0O1xuICAgICAgdmFyIE9iamVjdFByb3RvdHlwZSA9ICRPYmplY3QucHJvdG90eXBlO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyAkT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24oTykge1xuICAgICAgICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gICAgICAgIGlmIChoYXNPd24yKG9iamVjdCwgSUVfUFJPVE8pKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdFtJRV9QUk9UT107XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiAkT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfbWF0aF90cnVuYyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgY2VpbCA9IE1hdGguY2VpbDtcbiAgICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IE1hdGgudHJ1bmMgfHwgZnVuY3Rpb24gdHJ1bmMoeCkge1xuICAgICAgICB2YXIgbjIgPSAreDtcbiAgICAgICAgcmV0dXJuIChuMiA+IDAgPyBmbG9vciA6IGNlaWwpKG4yKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfdG9faW50ZWdlcl9vcl9pbmZpbml0eSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdHJ1bmMgPSByZXF1aXJlX21hdGhfdHJ1bmMoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJndW1lbnQpIHtcbiAgICAgICAgdmFyIG51bWJlciA9ICthcmd1bWVudDtcbiAgICAgICAgcmV0dXJuIG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gMCA/IDAgOiB0cnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV90b19hYnNvbHV0ZV9pbmRleCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmVfdG9faW50ZWdlcl9vcl9pbmZpbml0eSgpO1xuICAgICAgdmFyIG1heDIgPSBNYXRoLm1heDtcbiAgICAgIHZhciBtaW4gPSBNYXRoLm1pbjtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICAgICAgICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgyKGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3RvX2xlbmd0aCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmVfdG9faW50ZWdlcl9vcl9pbmZpbml0eSgpO1xuICAgICAgdmFyIG1pbiA9IE1hdGgubWluO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCA5MDA3MTk5MjU0NzQwOTkxKSA6IDA7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2xlbmd0aF9vZl9hcnJheV9saWtlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB0b0xlbmd0aCA9IHJlcXVpcmVfdG9fbGVuZ3RoKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gdG9MZW5ndGgob2JqLmxlbmd0aCk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2FycmF5X2luY2x1ZGVzID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlX3RvX2luZGV4ZWRfb2JqZWN0KCk7XG4gICAgICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZV90b19hYnNvbHV0ZV9pbmRleCgpO1xuICAgICAgdmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZV9sZW5ndGhfb2ZfYXJyYXlfbGlrZSgpO1xuICAgICAgdmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZChJU19JTkNMVURFUykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgICAgICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gICAgICAgIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfaGlkZGVuX2tleXMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7fTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9vYmplY3Rfa2V5c19pbnRlcm5hbCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpcygpO1xuICAgICAgdmFyIGhhc093bjIgPSByZXF1aXJlX2hhc19vd25fcHJvcGVydHkoKTtcbiAgICAgIHZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlX3RvX2luZGV4ZWRfb2JqZWN0KCk7XG4gICAgICB2YXIgaW5kZXhPZiA9IHJlcXVpcmVfYXJyYXlfaW5jbHVkZXMoKS5pbmRleE9mO1xuICAgICAgdmFyIGhpZGRlbktleXMgPSByZXF1aXJlX2hpZGRlbl9rZXlzKCk7XG4gICAgICB2YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKSB7XG4gICAgICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGtleSBpbiBPKSB7XG4gICAgICAgICAgIWhhc093bjIoaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24yKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICAgICAgICBpZiAoaGFzT3duMihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgICAgICAgICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHB1c2gocmVzdWx0LCBrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9lbnVtX2J1Z19rZXlzID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gWyAnY29uc3RydWN0b3InLCAnaGFzT3duUHJvcGVydHknLCAnaXNQcm90b3R5cGVPZicsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICd0b0xvY2FsZVN0cmluZycsICd0b1N0cmluZycsICd2YWx1ZU9mJyBdO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX29iamVjdF9rZXlzID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlX29iamVjdF9rZXlzX2ludGVybmFsKCk7XG4gICAgICB2YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlX2VudW1fYnVnX2tleXMoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gICAgICAgIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9vYmplY3RfdG9fYXJyYXkgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZV9kZXNjcmlwdG9ycygpO1xuICAgICAgdmFyIGZhaWxzID0gcmVxdWlyZV9mYWlscygpO1xuICAgICAgdmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZV9mdW5jdGlvbl91bmN1cnJ5X3RoaXMoKTtcbiAgICAgIHZhciBvYmplY3RHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmVfb2JqZWN0X2dldF9wcm90b3R5cGVfb2YoKTtcbiAgICAgIHZhciBvYmplY3RLZXlzID0gcmVxdWlyZV9vYmplY3Rfa2V5cygpO1xuICAgICAgdmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmVfdG9faW5kZXhlZF9vYmplY3QoKTtcbiAgICAgIHZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSByZXF1aXJlX29iamVjdF9wcm9wZXJ0eV9pc19lbnVtZXJhYmxlKCkuZjtcbiAgICAgIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHVuY3VycnlUaGlzKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG4gICAgICB2YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuICAgICAgdmFyIElFX0JVRyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgTyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIE9bMl0gPSAyO1xuICAgICAgICByZXR1cm4gIXByb3BlcnR5SXNFbnVtZXJhYmxlKE8sIDIpO1xuICAgICAgfSk7XG4gICAgICB2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gY3JlYXRlTWV0aG9kKFRPX0VOVFJJRVMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoaXQpO1xuICAgICAgICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTtcbiAgICAgICAgICB2YXIgSUVfV09SS0FST1VORCA9IElFX0JVRyAmJiBvYmplY3RHZXRQcm90b3R5cGVPZihPKSA9PT0gbnVsbDtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICAgICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IChJRV9XT1JLQVJPVU5EID8ga2V5IGluIE8gOiBwcm9wZXJ0eUlzRW51bWVyYWJsZShPLCBrZXkpKSkge1xuICAgICAgICAgICAgICBwdXNoKHJlc3VsdCwgVE9fRU5UUklFUyA/IFsga2V5LCBPW2tleV0gXSA6IE9ba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGVudHJpZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgICAgICAgdmFsdWVzOiBjcmVhdGVNZXRob2QoZmFsc2UpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2VzX29iamVjdF92YWx1ZXMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyICQgPSByZXF1aXJlX2V4cG9ydCgpO1xuICAgICAgdmFyICR2YWx1ZXMgPSByZXF1aXJlX29iamVjdF90b19hcnJheSgpLnZhbHVlcztcbiAgICAgICQoe1xuICAgICAgICB0YXJnZXQ6ICdPYmplY3QnLFxuICAgICAgICBzdGF0OiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzMihPKSB7XG4gICAgICAgICAgcmV0dXJuICR2YWx1ZXMoTyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3ZhbHVlcyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXF1aXJlX2VzX29iamVjdF92YWx1ZXMoKTtcbiAgICAgIHZhciBwYXRoID0gcmVxdWlyZV9wYXRoKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHBhdGguT2JqZWN0LnZhbHVlcztcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV92YWx1ZXMyID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBwYXJlbnQgPSByZXF1aXJlX3ZhbHVlcygpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfdmFsdWVzMyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgcGFyZW50ID0gcmVxdWlyZV92YWx1ZXMyKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV90b19zdHJpbmdfdGFnX3N1cHBvcnQgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmVfd2VsbF9rbm93bl9zeW1ib2woKTtcbiAgICAgIHZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuICAgICAgdmFyIHRlc3QgPSB7fTtcbiAgICAgIHRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2NsYXNzb2YgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmVfdG9fc3RyaW5nX3RhZ19zdXBwb3J0KCk7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUyKCk7XG4gICAgICB2YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmVfY2xhc3NvZl9yYXcoKTtcbiAgICAgIHZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlX3dlbGxfa25vd25fc3ltYm9sKCk7XG4gICAgICB2YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbiAgICAgIHZhciAkT2JqZWN0ID0gT2JqZWN0O1xuICAgICAgdmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cztcbiAgICAgIH0oKSkgPT09ICdBcmd1bWVudHMnO1xuICAgICAgdmFyIHRyeUdldCA9IGZ1bmN0aW9uIHRyeUdldChpdCwga2V5KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGl0W2tleV07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIGl0ID09PSB2b2lkIDAgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9ICRPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWcgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTykgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT09ICdPYmplY3QnICYmIGlzQ2FsbGFibGUoTy5jYWxsZWUpID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3RvX3N0cmluZyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgY2xhc3NvZiA9IHJlcXVpcmVfY2xhc3NvZigpO1xuICAgICAgdmFyICRTdHJpbmcgPSBTdHJpbmc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgIGlmIChjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfc3RyaW5nX211bHRpYnl0ZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpcygpO1xuICAgICAgdmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlX3RvX2ludGVnZXJfb3JfaW5maW5pdHkoKTtcbiAgICAgIHZhciB0b1N0cmluZyA9IHJlcXVpcmVfdG9fc3RyaW5nKCk7XG4gICAgICB2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmVfcmVxdWlyZV9vYmplY3RfY29lcmNpYmxlKCk7XG4gICAgICB2YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbiAgICAgIHZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG4gICAgICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG4gICAgICB2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gY3JlYXRlTWV0aG9kKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigkdGhpcywgcG9zKSB7XG4gICAgICAgICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgICAgICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eShwb3MpO1xuICAgICAgICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgICAgICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgICAgICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmlyc3QgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uKTtcbiAgICAgICAgICByZXR1cm4gZmlyc3QgPCA1NTI5NiB8fCBmaXJzdCA+IDU2MzE5IHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZSB8fCAoc2Vjb25kID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbiArIDEpKSA8IDU2MzIwIHx8IHNlY29uZCA+IDU3MzQzID8gQ09OVkVSVF9UT19TVFJJTkcgPyBjaGFyQXQoUywgcG9zaXRpb24pIDogZmlyc3QgOiBDT05WRVJUX1RPX1NUUklORyA/IHN0cmluZ1NsaWNlKFMsIHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gNTUyOTYgPDwgMTApICsgKHNlY29uZCAtIDU2MzIwKSArIDY1NTM2O1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gICAgICAgIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3dlYWtfbWFwX2Jhc2ljX2RldGVjdGlvbiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZ2xvYmFsMiA9IHJlcXVpcmVfZ2xvYmFsKCk7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUyKCk7XG4gICAgICB2YXIgV2Vha01hcDIgPSBnbG9iYWwyLldlYWtNYXA7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGlzQ2FsbGFibGUoV2Vha01hcDIpICYmIC9uYXRpdmUgY29kZS8udGVzdChTdHJpbmcoV2Vha01hcDIpKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pbnRlcm5hbF9zdGF0ZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZV93ZWFrX21hcF9iYXNpY19kZXRlY3Rpb24oKTtcbiAgICAgIHZhciBnbG9iYWwyID0gcmVxdWlyZV9nbG9iYWwoKTtcbiAgICAgIHZhciBpc09iamVjdCA9IHJlcXVpcmVfaXNfb2JqZWN0MigpO1xuICAgICAgdmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmVfY3JlYXRlX25vbl9lbnVtZXJhYmxlX3Byb3BlcnR5KCk7XG4gICAgICB2YXIgaGFzT3duMiA9IHJlcXVpcmVfaGFzX293bl9wcm9wZXJ0eSgpO1xuICAgICAgdmFyIHNoYXJlZCA9IHJlcXVpcmVfc2hhcmVkX3N0b3JlKCk7XG4gICAgICB2YXIgc2hhcmVkS2V5ID0gcmVxdWlyZV9zaGFyZWRfa2V5KCk7XG4gICAgICB2YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmVfaGlkZGVuX2tleXMoKTtcbiAgICAgIHZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG4gICAgICB2YXIgVHlwZUVycm9yMiA9IGdsb2JhbDIuVHlwZUVycm9yO1xuICAgICAgdmFyIFdlYWtNYXAyID0gZ2xvYmFsMi5XZWFrTWFwO1xuICAgICAgdmFyIHNldDI7XG4gICAgICB2YXIgZ2V0MjtcbiAgICAgIHZhciBoYXM7XG4gICAgICB2YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIGVuZm9yY2UoaXQpIHtcbiAgICAgICAgcmV0dXJuIGhhcyhpdCkgPyBnZXQyKGl0KSA6IHNldDIoaXQsIHt9KTtcbiAgICAgIH07XG4gICAgICB2YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gZ2V0dGVyRm9yKFRZUEUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgICAgdmFyIHN0YXRlO1xuICAgICAgICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldDIoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yMignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIGlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gICAgICAgIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcDIoKSk7XG4gICAgICAgIHN0b3JlLmdldCA9IHN0b3JlLmdldDtcbiAgICAgICAgc3RvcmUuaGFzID0gc3RvcmUuaGFzO1xuICAgICAgICBzdG9yZS5zZXQgPSBzdG9yZS5zZXQ7XG4gICAgICAgIHNldDIgPSBmdW5jdGlvbiBzZXQyKGl0LCBtZXRhZGF0YSkge1xuICAgICAgICAgIGlmIChzdG9yZS5oYXMoaXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yMihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgICAgICAgIHN0b3JlLnNldChpdCwgbWV0YWRhdGEpO1xuICAgICAgICAgIHJldHVybiBtZXRhZGF0YTtcbiAgICAgICAgfTtcbiAgICAgICAgZ2V0MiA9IGZ1bmN0aW9uIGdldDIoaXQpIHtcbiAgICAgICAgICByZXR1cm4gc3RvcmUuZ2V0KGl0KSB8fCB7fTtcbiAgICAgICAgfTtcbiAgICAgICAgaGFzID0gZnVuY3Rpb24gaGFzKGl0KSB7XG4gICAgICAgICAgcmV0dXJuIHN0b3JlLmhhcyhpdCk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgICAgICAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICAgICAgICBzZXQyID0gZnVuY3Rpb24gc2V0MihpdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgICBpZiAoaGFzT3duMihpdCwgU1RBVEUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yMihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgICAgIH07XG4gICAgICAgIGdldDIgPSBmdW5jdGlvbiBnZXQyKGl0KSB7XG4gICAgICAgICAgcmV0dXJuIGhhc093bjIoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICAgICAgICB9O1xuICAgICAgICBoYXMgPSBmdW5jdGlvbiBoYXMoaXQpIHtcbiAgICAgICAgICByZXR1cm4gaGFzT3duMihpdCwgU1RBVEUpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIHN0b3JlO1xuICAgICAgdmFyIFNUQVRFO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIHNldDogc2V0MixcbiAgICAgICAgZ2V0OiBnZXQyLFxuICAgICAgICBoYXM6IGhhcyxcbiAgICAgICAgZW5mb3JjZTogZW5mb3JjZSxcbiAgICAgICAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3JcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZnVuY3Rpb25fbmFtZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlX2Rlc2NyaXB0b3JzKCk7XG4gICAgICB2YXIgaGFzT3duMiA9IHJlcXVpcmVfaGFzX293bl9wcm9wZXJ0eSgpO1xuICAgICAgdmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgICAgdmFyIGdldERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgICAgdmFyIEVYSVNUUyA9IGhhc093bjIoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJyk7XG4gICAgICB2YXIgUFJPUEVSID0gRVhJU1RTICYmIGZ1bmN0aW9uIHNvbWV0aGluZygpIHt9Lm5hbWUgPT09ICdzb21ldGhpbmcnO1xuICAgICAgdmFyIENPTkZJR1VSQUJMRSA9IEVYSVNUUyAmJiAoIURFU0NSSVBUT1JTIHx8IERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBFWElTVFM6IEVYSVNUUyxcbiAgICAgICAgUFJPUEVSOiBQUk9QRVIsXG4gICAgICAgIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX29iamVjdF9kZWZpbmVfcHJvcGVydGllcyA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZV9kZXNjcmlwdG9ycygpO1xuICAgICAgdmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZV92OF9wcm90b3R5cGVfZGVmaW5lX2J1ZygpO1xuICAgICAgdmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZV9vYmplY3RfZGVmaW5lX3Byb3BlcnR5KCk7XG4gICAgICB2YXIgYW5PYmplY3QgPSByZXF1aXJlX2FuX29iamVjdCgpO1xuICAgICAgdmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmVfdG9faW5kZXhlZF9vYmplY3QoKTtcbiAgICAgIHZhciBvYmplY3RLZXlzID0gcmVxdWlyZV9vYmplY3Rfa2V5cygpO1xuICAgICAgZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgJiYgIVY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgICAgICAgYW5PYmplY3QoTyk7XG4gICAgICAgIHZhciBwcm9wcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgICAgICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICAgICAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2h0bWwgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlX2dldF9idWlsdF9pbigpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9vYmplY3RfY3JlYXRlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBhbk9iamVjdCA9IHJlcXVpcmVfYW5fb2JqZWN0KCk7XG4gICAgICB2YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmVfb2JqZWN0X2RlZmluZV9wcm9wZXJ0aWVzKCk7XG4gICAgICB2YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlX2VudW1fYnVnX2tleXMoKTtcbiAgICAgIHZhciBoaWRkZW5LZXlzID0gcmVxdWlyZV9oaWRkZW5fa2V5cygpO1xuICAgICAgdmFyIGh0bWwgPSByZXF1aXJlX2h0bWwoKTtcbiAgICAgIHZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlX2RvY3VtZW50X2NyZWF0ZV9lbGVtZW50KCk7XG4gICAgICB2YXIgc2hhcmVkS2V5ID0gcmVxdWlyZV9zaGFyZWRfa2V5KCk7XG4gICAgICB2YXIgR1QgPSAnPic7XG4gICAgICB2YXIgTFQgPSAnPCc7XG4gICAgICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gICAgICB2YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG4gICAgICB2YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG4gICAgICB2YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIEVtcHR5Q29uc3RydWN0b3IoKSB7fTtcbiAgICAgIHZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiBzY3JpcHRUYWcoY29udGVudCkge1xuICAgICAgICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xuICAgICAgfTtcbiAgICAgIHZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQyKSB7XG4gICAgICAgIGFjdGl2ZVhEb2N1bWVudDIud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gICAgICAgIGFjdGl2ZVhEb2N1bWVudDIuY2xvc2UoKTtcbiAgICAgICAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQyLnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gICAgICAgIGFjdGl2ZVhEb2N1bWVudDIgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGVtcDtcbiAgICAgIH07XG4gICAgICB2YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCkge1xuICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICAgICAgICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICAgIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICAgICAgICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICAgICAgICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gICAgICAgIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gICAgICAgIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xuICAgICAgfTtcbiAgICAgIHZhciBhY3RpdmVYRG9jdW1lbnQ7XG4gICAgICB2YXIgX051bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uIE51bGxQcm90b09iamVjdCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhY3RpdmVYRG9jdW1lbnQgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHt9XG4gICAgICAgIF9OdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudC5kb21haW4gJiYgYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCkgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7XG4gICAgICAgIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIGRlbGV0ZSBfTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9OdWxsUHJvdG9PYmplY3QoKTtcbiAgICAgIH07XG4gICAgICBoaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKE8gIT09IG51bGwpIHtcbiAgICAgICAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgICAgICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgICAgICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gX051bGxQcm90b09iamVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9wZXJ0aWVzID09PSB2b2lkIDAgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZGVmaW5lX2J1aWx0X2luID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlX2NyZWF0ZV9ub25fZW51bWVyYWJsZV9wcm9wZXJ0eSgpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGFyZ2V0LCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pdGVyYXRvcnNfY29yZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgZmFpbHMgPSByZXF1aXJlX2ZhaWxzKCk7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUyKCk7XG4gICAgICB2YXIgaXNPYmplY3QgPSByZXF1aXJlX2lzX29iamVjdDIoKTtcbiAgICAgIHZhciBjcmVhdGUgPSByZXF1aXJlX29iamVjdF9jcmVhdGUoKTtcbiAgICAgIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmVfb2JqZWN0X2dldF9wcm90b3R5cGVfb2YoKTtcbiAgICAgIHZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZV9kZWZpbmVfYnVpbHRfaW4oKTtcbiAgICAgIHZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlX3dlbGxfa25vd25fc3ltYm9sKCk7XG4gICAgICB2YXIgSVNfUFVSRSA9IHJlcXVpcmVfaXNfcHVyZSgpO1xuICAgICAgdmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuICAgICAgdmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcbiAgICAgIHZhciBJdGVyYXRvclByb3RvdHlwZTtcbiAgICAgIHZhciBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gICAgICB2YXIgYXJyYXlJdGVyYXRvcjtcbiAgICAgIGlmIChbXS5rZXlzKSB7XG4gICAgICAgIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gICAgICAgIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkge1xuICAgICAgICAgIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICAgICAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICAgICAgICBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gIWlzT2JqZWN0KEl0ZXJhdG9yUHJvdG90eXBlKSB8fCBmYWlscyhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRlc3QgPSB7fTtcbiAgICAgICAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xuICAgICAgfSk7XG4gICAgICBpZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkge1xuICAgICAgICBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICAgICAgfSBlbHNlIGlmIChJU19QVVJFKSB7XG4gICAgICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgIGRlZmluZUJ1aWx0SW4oSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICAgICAgICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX29iamVjdF90b19zdHJpbmcgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmVfdG9fc3RyaW5nX3RhZ19zdXBwb3J0KCk7XG4gICAgICB2YXIgY2xhc3NvZiA9IHJlcXVpcmVfY2xhc3NvZigpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX3NldF90b19zdHJpbmdfdGFnID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlX3RvX3N0cmluZ190YWdfc3VwcG9ydCgpO1xuICAgICAgdmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZV9vYmplY3RfZGVmaW5lX3Byb3BlcnR5KCkuZjtcbiAgICAgIHZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlX2NyZWF0ZV9ub25fZW51bWVyYWJsZV9wcm9wZXJ0eSgpO1xuICAgICAgdmFyIGhhc093bjIgPSByZXF1aXJlX2hhc19vd25fcHJvcGVydHkoKTtcbiAgICAgIHZhciB0b1N0cmluZyA9IHJlcXVpcmVfb2JqZWN0X3RvX3N0cmluZygpO1xuICAgICAgdmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmVfd2VsbF9rbm93bl9zeW1ib2woKTtcbiAgICAgIHZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgVEFHLCBTVEFUSUMsIFNFVF9NRVRIT0QpIHtcbiAgICAgICAgaWYgKGl0KSB7XG4gICAgICAgICAgdmFyIHRhcmdldCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlO1xuICAgICAgICAgIGlmICghaGFzT3duMih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIFRPX1NUUklOR19UQUcsIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICB2YWx1ZTogVEFHXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFNFVF9NRVRIT0QgJiYgIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICAgICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwgJ3RvU3RyaW5nJywgdG9TdHJpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pdGVyYXRvcnMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7fTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pdGVyYXRvcl9jcmVhdGVfY29uc3RydWN0b3IgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZV9pdGVyYXRvcnNfY29yZSgpLkl0ZXJhdG9yUHJvdG90eXBlO1xuICAgICAgdmFyIGNyZWF0ZSA9IHJlcXVpcmVfb2JqZWN0X2NyZWF0ZSgpO1xuICAgICAgdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmVfY3JlYXRlX3Byb3BlcnR5X2Rlc2NyaXB0b3IoKTtcbiAgICAgIHZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmVfc2V0X3RvX3N0cmluZ190YWcoKTtcbiAgICAgIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlX2l0ZXJhdG9ycygpO1xuICAgICAgdmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiByZXR1cm5UaGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICAgICAgICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICAgICAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtcbiAgICAgICAgICBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoKyFFTlVNRVJBQkxFX05FWFQsIG5leHQpXG4gICAgICAgIH0pO1xuICAgICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgICAgIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9mdW5jdGlvbl91bmN1cnJ5X3RoaXNfYWNjZXNzb3IgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZV9mdW5jdGlvbl91bmN1cnJ5X3RoaXMoKTtcbiAgICAgIHZhciBhQ2FsbGFibGUgPSByZXF1aXJlX2FfY2FsbGFibGUoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBrZXksIG1ldGhvZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiB1bmN1cnJ5VGhpcyhhQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIGtleSlbbWV0aG9kXSkpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfYV9wb3NzaWJsZV9wcm90b3R5cGUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlX2lzX2NhbGxhYmxlMigpO1xuICAgICAgdmFyICRTdHJpbmcgPSBTdHJpbmc7XG4gICAgICB2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJndW1lbnQpIHtcbiAgICAgICAgaWYgKF90eXBlb2YoYXJndW1lbnQpID09ICdvYmplY3QnIHx8IGlzQ2FsbGFibGUoYXJndW1lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5cXCd0IHNldCAnICsgJFN0cmluZyhhcmd1bWVudCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX29iamVjdF9zZXRfcHJvdG90eXBlX29mID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB1bmN1cnJ5VGhpc0FjY2Vzc29yID0gcmVxdWlyZV9mdW5jdGlvbl91bmN1cnJ5X3RoaXNfYWNjZXNzb3IoKTtcbiAgICAgIHZhciBhbk9iamVjdCA9IHJlcXVpcmVfYW5fb2JqZWN0KCk7XG4gICAgICB2YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZV9hX3Bvc3NpYmxlX3Byb3RvdHlwZSgpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICAgICAgICB2YXIgdGVzdCA9IHt9O1xuICAgICAgICB2YXIgc2V0dGVyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNldHRlciA9IHVuY3VycnlUaGlzQWNjZXNzb3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycsICdzZXQnKTtcbiAgICAgICAgICBzZXR0ZXIodGVzdCwgW10pO1xuICAgICAgICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgICAgYW5PYmplY3QoTyk7XG4gICAgICAgICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICAgICAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHtcbiAgICAgICAgICAgIHNldHRlcihPLCBwcm90byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBPO1xuICAgICAgICB9O1xuICAgICAgfSgpIDogdm9pZCAwKTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pdGVyYXRvcl9kZWZpbmUgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyICQgPSByZXF1aXJlX2V4cG9ydCgpO1xuICAgICAgdmFyIGNhbGwgPSByZXF1aXJlX2Z1bmN0aW9uX2NhbGwoKTtcbiAgICAgIHZhciBJU19QVVJFID0gcmVxdWlyZV9pc19wdXJlKCk7XG4gICAgICB2YXIgRnVuY3Rpb25OYW1lID0gcmVxdWlyZV9mdW5jdGlvbl9uYW1lKCk7XG4gICAgICB2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmVfaXNfY2FsbGFibGUyKCk7XG4gICAgICB2YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmVfaXRlcmF0b3JfY3JlYXRlX2NvbnN0cnVjdG9yKCk7XG4gICAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlX29iamVjdF9nZXRfcHJvdG90eXBlX29mKCk7XG4gICAgICB2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlX29iamVjdF9zZXRfcHJvdG90eXBlX29mKCk7XG4gICAgICB2YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlX3NldF90b19zdHJpbmdfdGFnKCk7XG4gICAgICB2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZV9jcmVhdGVfbm9uX2VudW1lcmFibGVfcHJvcGVydHkoKTtcbiAgICAgIHZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZV9kZWZpbmVfYnVpbHRfaW4oKTtcbiAgICAgIHZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlX3dlbGxfa25vd25fc3ltYm9sKCk7XG4gICAgICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZV9pdGVyYXRvcnMoKTtcbiAgICAgIHZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZV9pdGVyYXRvcnNfY29yZSgpO1xuICAgICAgdmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbiAgICAgIHZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG4gICAgICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xuICAgICAgdmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG4gICAgICB2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4gICAgICB2YXIgS0VZUyA9ICdrZXlzJztcbiAgICAgIHZhciBWQUxVRVMgPSAndmFsdWVzJztcbiAgICAgIHZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuICAgICAgdmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiByZXR1cm5UaGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAgICAgICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICAgICAgICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gZ2V0SXRlcmF0aW9uTWV0aG9kKEtJTkQpIHtcbiAgICAgICAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICAgICAgIGNhc2UgS0VZUzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgIGNhc2UgVkFMVUVTOlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHZhbHVlczIoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgY2FzZSBFTlRSSUVTOlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICAgICAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICAgICAgICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gICAgICAgIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gICAgICAgIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gICAgICAgIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gICAgICAgIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcbiAgICAgICAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgICAgICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgICAgICAgIGlmIChDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgICAgICAgIGlmICghSVNfUFVSRSAmJiBnZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICAgICAgICBzZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNDYWxsYWJsZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICAgICAgICAgICAgICAgIGRlZmluZUJ1aWx0SW4oQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoSVNfUFVSRSkge1xuICAgICAgICAgICAgICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgREVGQVVMVCA9PT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgICAgICAgIGlmICghSVNfUFVSRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbmFtZScsIFZBTFVFUyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgICAgICAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMyKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbChuYXRpdmVJdGVyYXRvciwgdGhpcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoREVGQVVMVCkge1xuICAgICAgICAgIG1ldGhvZHMgPSB7XG4gICAgICAgICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAgICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICAgICAgICBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICAgICAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCh7XG4gICAgICAgICAgICAgIHRhcmdldDogTkFNRSxcbiAgICAgICAgICAgICAgcHJvdG86IHRydWUsXG4gICAgICAgICAgICAgIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUVcbiAgICAgICAgICAgIH0sIG1ldGhvZHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICAgICAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7XG4gICAgICAgICAgICBuYW1lOiBERUZBVUxUXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuICAgICAgICByZXR1cm4gbWV0aG9kcztcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfY3JlYXRlX2l0ZXJfcmVzdWx0X29iamVjdCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlLCBkb25lKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIGRvbmU6IGRvbmVcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZXNfc3RyaW5nX2l0ZXJhdG9yID0gX19jb21tb25KUyhmdW5jdGlvbigpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBjaGFyQXQgPSByZXF1aXJlX3N0cmluZ19tdWx0aWJ5dGUoKS5jaGFyQXQ7XG4gICAgICB2YXIgdG9TdHJpbmcgPSByZXF1aXJlX3RvX3N0cmluZygpO1xuICAgICAgdmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlX2ludGVybmFsX3N0YXRlKCk7XG4gICAgICB2YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlX2l0ZXJhdG9yX2RlZmluZSgpO1xuICAgICAgdmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlX2NyZWF0ZV9pdGVyX3Jlc3VsdF9vYmplY3QoKTtcbiAgICAgIHZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbiAgICAgIHZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG4gICAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG4gICAgICBkZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCkge1xuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgICAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgICAgICAgc3RyaW5nOiB0b1N0cmluZyhpdGVyYXRlZCksXG4gICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICAgICAgICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgdmFyIHBvaW50O1xuICAgICAgICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHZvaWQgMCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgICAgIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QocG9pbnQsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2l0ZXJhdG9yX2Nsb3NlID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBjYWxsID0gcmVxdWlyZV9mdW5jdGlvbl9jYWxsKCk7XG4gICAgICB2YXIgYW5PYmplY3QgPSByZXF1aXJlX2FuX29iamVjdCgpO1xuICAgICAgdmFyIGdldE1ldGhvZCA9IHJlcXVpcmVfZ2V0X21ldGhvZCgpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwga2luZCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGlubmVyUmVzdWx0LCBpbm5lckVycm9yO1xuICAgICAgICBhbk9iamVjdChpdGVyYXRvcik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaW5uZXJSZXN1bHQgPSBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICAgICAgICBpZiAoIWlubmVyUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoa2luZCA9PT0gJ3Rocm93Jykge1xuICAgICAgICAgICAgICB0aHJvdyB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2luZCA9PT0gJ3Rocm93Jykge1xuICAgICAgICAgIHRocm93IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbm5lckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgaW5uZXJSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2NhbGxfd2l0aF9zYWZlX2l0ZXJhdGlvbl9jbG9zaW5nID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBhbk9iamVjdCA9IHJlcXVpcmVfYW5fb2JqZWN0KCk7XG4gICAgICB2YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmVfaXRlcmF0b3JfY2xvc2UoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2lzX2FycmF5X2l0ZXJhdG9yX21ldGhvZCA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZV93ZWxsX2tub3duX3N5bWJvbCgpO1xuICAgICAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmVfaXRlcmF0b3JzKCk7XG4gICAgICB2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4gICAgICB2YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgIHJldHVybiBpdCAhPT0gdm9pZCAwICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pbnNwZWN0X3NvdXJjZSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpcygpO1xuICAgICAgdmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlX2lzX2NhbGxhYmxlMigpO1xuICAgICAgdmFyIHN0b3JlID0gcmVxdWlyZV9zaGFyZWRfc3RvcmUoKTtcbiAgICAgIHZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuICAgICAgaWYgKCFpc0NhbGxhYmxlKHN0b3JlLmluc3BlY3RTb3VyY2UpKSB7XG4gICAgICAgIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbihpdCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9pc19jb25zdHJ1Y3RvciA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlX2Z1bmN0aW9uX3VuY3VycnlfdGhpcygpO1xuICAgICAgdmFyIGZhaWxzID0gcmVxdWlyZV9mYWlscygpO1xuICAgICAgdmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlX2lzX2NhbGxhYmxlMigpO1xuICAgICAgdmFyIGNsYXNzb2YgPSByZXF1aXJlX2NsYXNzb2YoKTtcbiAgICAgIHZhciBnZXRCdWlsdEluID0gcmVxdWlyZV9nZXRfYnVpbHRfaW4oKTtcbiAgICAgIHZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZV9pbnNwZWN0X3NvdXJjZSgpO1xuICAgICAgdmFyIG5vb3AzID0gZnVuY3Rpb24gbm9vcDMoKSB7fTtcbiAgICAgIHZhciBlbXB0eSA9IFtdO1xuICAgICAgdmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG4gICAgICB2YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xuICAgICAgdmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbiAgICAgIHZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gIWNvbnN0cnVjdG9yUmVnRXhwLnRlc3Qobm9vcDMpO1xuICAgICAgdmFyIGlzQ29uc3RydWN0b3JNb2Rlcm4gPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gICAgICAgIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdHJ1Y3Qobm9vcDMsIGVtcHR5LCBhcmd1bWVudCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gICAgICAgIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgICAgICAgY2FzZSAnQXN5bmNGdW5jdGlvbic6XG4gICAgICAgICBjYXNlICdHZW5lcmF0b3JGdW5jdGlvbic6XG4gICAgICAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSU5DT1JSRUNUX1RPX1NUUklORyB8fCAhIWV4ZWMoY29uc3RydWN0b3JSZWdFeHAsIGluc3BlY3RTb3VyY2UoYXJndW1lbnQpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGlzQ29uc3RydWN0b3JMZWdhY3kuc2hhbSA9IHRydWU7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9ICFjb25zdHJ1Y3QgfHwgZmFpbHMoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjYWxsZWQ7XG4gICAgICAgIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbCkgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oT2JqZWN0KSB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICB9KSB8fCBjYWxsZWQ7XG4gICAgICB9KSA/IGlzQ29uc3RydWN0b3JMZWdhY3kgOiBpc0NvbnN0cnVjdG9yTW9kZXJuO1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2NyZWF0ZV9wcm9wZXJ0eSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmVfdG9fcHJvcGVydHlfa2V5KCk7XG4gICAgICB2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlX29iamVjdF9kZWZpbmVfcHJvcGVydHkoKTtcbiAgICAgIHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlX2NyZWF0ZV9wcm9wZXJ0eV9kZXNjcmlwdG9yKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgcHJvcGVydHlLZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gICAgICAgIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9nZXRfaXRlcmF0b3JfbWV0aG9kID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBjbGFzc29mID0gcmVxdWlyZV9jbGFzc29mKCk7XG4gICAgICB2YXIgZ2V0TWV0aG9kID0gcmVxdWlyZV9nZXRfbWV0aG9kKCk7XG4gICAgICB2YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlX2lzX251bGxfb3JfdW5kZWZpbmVkKCk7XG4gICAgICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZV9pdGVyYXRvcnMoKTtcbiAgICAgIHZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlX3dlbGxfa25vd25fc3ltYm9sKCk7XG4gICAgICB2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXQpKSB7XG4gICAgICAgICAgcmV0dXJuIGdldE1ldGhvZChpdCwgSVRFUkFUT1IpIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKSB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2dldF9pdGVyYXRvciA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgY2FsbCA9IHJlcXVpcmVfZnVuY3Rpb25fY2FsbCgpO1xuICAgICAgdmFyIGFDYWxsYWJsZSA9IHJlcXVpcmVfYV9jYWxsYWJsZSgpO1xuICAgICAgdmFyIGFuT2JqZWN0ID0gcmVxdWlyZV9hbl9vYmplY3QoKTtcbiAgICAgIHZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmVfdHJ5X3RvX3N0cmluZygpO1xuICAgICAgdmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZV9nZXRfaXRlcmF0b3JfbWV0aG9kKCk7XG4gICAgICB2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJndW1lbnQsIHVzaW5nSXRlcmF0b3IpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBnZXRJdGVyYXRvck1ldGhvZChhcmd1bWVudCkgOiB1c2luZ0l0ZXJhdG9yO1xuICAgICAgICBpZiAoYUNhbGxhYmxlKGl0ZXJhdG9yTWV0aG9kKSkge1xuICAgICAgICAgIHJldHVybiBhbk9iamVjdChjYWxsKGl0ZXJhdG9yTWV0aG9kLCBhcmd1bWVudCkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2FycmF5X2Zyb20gPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIGJpbmQgPSByZXF1aXJlX2Z1bmN0aW9uX2JpbmRfY29udGV4dCgpO1xuICAgICAgdmFyIGNhbGwgPSByZXF1aXJlX2Z1bmN0aW9uX2NhbGwoKTtcbiAgICAgIHZhciB0b09iamVjdCA9IHJlcXVpcmVfdG9fb2JqZWN0KCk7XG4gICAgICB2YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmVfY2FsbF93aXRoX3NhZmVfaXRlcmF0aW9uX2Nsb3NpbmcoKTtcbiAgICAgIHZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlX2lzX2FycmF5X2l0ZXJhdG9yX21ldGhvZCgpO1xuICAgICAgdmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlX2lzX2NvbnN0cnVjdG9yKCk7XG4gICAgICB2YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlX2xlbmd0aF9vZl9hcnJheV9saWtlKCk7XG4gICAgICB2YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlX2NyZWF0ZV9wcm9wZXJ0eSgpO1xuICAgICAgdmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZV9nZXRfaXRlcmF0b3IoKTtcbiAgICAgIHZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmVfZ2V0X2l0ZXJhdG9yX21ldGhvZCgpO1xuICAgICAgdmFyICRBcnJheSA9IEFycmF5O1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSkge1xuICAgICAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgICAgIHZhciBJU19DT05TVFJVQ1RPUiA9IGlzQ29uc3RydWN0b3IodGhpcyk7XG4gICAgICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdm9pZCAwO1xuICAgICAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB2b2lkIDA7XG4gICAgICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICAgICAgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdm9pZCAwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gICAgICAgIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhKHRoaXMgPT09ICRBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgICAgICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgICAgICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgICAgICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMoKSA6IFtdO1xuICAgICAgICAgIGZvciAoOyEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgWyBzdGVwLnZhbHVlLCBpbmRleCBdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgICAgICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6ICRBcnJheShsZW5ndGgpO1xuICAgICAgICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfY2hlY2tfY29ycmVjdG5lc3Nfb2ZfaXRlcmF0aW9uID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlX3dlbGxfa25vd25fc3ltYm9sKCk7XG4gICAgICB2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4gICAgICB2YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG4gICAgICB0cnkge1xuICAgICAgICBjYWxsZWQgPSAwO1xuICAgICAgICBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGRvbmU6ICEhY2FsbGVkKytcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXR1cm46IGZ1bmN0aW9uIF9yZXR1cm4oKSB7XG4gICAgICAgICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhyb3cgMjtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgIHZhciBjYWxsZWQ7XG4gICAgICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGV4ZWMob2JqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHt9XG4gICAgICAgIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZXNfYXJyYXlfZnJvbSA9IF9fY29tbW9uSlMoZnVuY3Rpb24oKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB2YXIgJCA9IHJlcXVpcmVfZXhwb3J0KCk7XG4gICAgICB2YXIgZnJvbSA9IHJlcXVpcmVfYXJyYXlfZnJvbSgpO1xuICAgICAgdmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmVfY2hlY2tfY29ycmVjdG5lc3Nfb2ZfaXRlcmF0aW9uKCk7XG4gICAgICB2YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24oaXRlcmFibGUpIHtcbiAgICAgICAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG4gICAgICB9KTtcbiAgICAgICQoe1xuICAgICAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgICAgIHN0YXQ6IHRydWUsXG4gICAgICAgIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTlxuICAgICAgfSwge1xuICAgICAgICBmcm9tOiBmcm9tXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9mcm9tMiA9IF9fY29tbW9uSlMoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXF1aXJlX2VzX3N0cmluZ19pdGVyYXRvcigpO1xuICAgICAgcmVxdWlyZV9lc19hcnJheV9mcm9tKCk7XG4gICAgICB2YXIgcGF0aCA9IHJlcXVpcmVfcGF0aCgpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBwYXRoLkFycmF5LmZyb207XG4gICAgfSk7XG4gICAgdmFyIHJlcXVpcmVfZnJvbTMgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdmFyIHBhcmVudCA9IHJlcXVpcmVfZnJvbTIoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuICAgIH0pO1xuICAgIHZhciByZXF1aXJlX2Zyb200ID0gX19jb21tb25KUyhmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBwYXJlbnQgPSByZXF1aXJlX2Zyb20zKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiAgICB9KTtcbiAgICB2YXIgcmVxdWlyZV9kb1QgPSBfX2NvbW1vbkpTKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgIHZhciBkb1QzID0ge1xuICAgICAgICAgIG5hbWU6ICdkb1QnLFxuICAgICAgICAgIHZlcnNpb246ICcxLjEuMScsXG4gICAgICAgICAgdGVtcGxhdGVTZXR0aW5nczoge1xuICAgICAgICAgICAgZXZhbHVhdGU6IC9cXHtcXHsoW1xcc1xcU10rPyhcXH0/KSspXFx9XFx9L2csXG4gICAgICAgICAgICBpbnRlcnBvbGF0ZTogL1xce1xcez0oW1xcc1xcU10rPylcXH1cXH0vZyxcbiAgICAgICAgICAgIGVuY29kZTogL1xce1xceyEoW1xcc1xcU10rPylcXH1cXH0vZyxcbiAgICAgICAgICAgIHVzZTogL1xce1xceyMoW1xcc1xcU10rPylcXH1cXH0vZyxcbiAgICAgICAgICAgIHVzZVBhcmFtczogLyhefFteXFx3JF0pZGVmKD86XFwufFxcW1tcXCdcXFwiXSkoW1xcdyRcXC5dKykoPzpbXFwnXFxcIl1cXF0pP1xccypcXDpcXHMqKFtcXHckXFwuXSt8XFxcIlteXFxcIl0rXFxcInxcXCdbXlxcJ10rXFwnfFxce1teXFx9XStcXH0pL2csXG4gICAgICAgICAgICBkZWZpbmU6IC9cXHtcXHsjI1xccyooW1xcd1xcLiRdKylcXHMqKFxcOnw9KShbXFxzXFxTXSs/KSNcXH1cXH0vZyxcbiAgICAgICAgICAgIGRlZmluZVBhcmFtczogL15cXHMqKFtcXHckXSspOihbXFxzXFxTXSspLyxcbiAgICAgICAgICAgIGNvbmRpdGlvbmFsOiAvXFx7XFx7XFw/KFxcPyk/XFxzKihbXFxzXFxTXSo/KVxccypcXH1cXH0vZyxcbiAgICAgICAgICAgIGl0ZXJhdGU6IC9cXHtcXHt+XFxzKig/OlxcfVxcfXwoW1xcc1xcU10rPylcXHMqXFw6XFxzKihbXFx3JF0rKVxccyooPzpcXDpcXHMqKFtcXHckXSspKT9cXHMqXFx9XFx9KS9nLFxuICAgICAgICAgICAgdmFybmFtZTogJ2l0JyxcbiAgICAgICAgICAgIHN0cmlwOiB0cnVlLFxuICAgICAgICAgICAgYXBwZW5kOiB0cnVlLFxuICAgICAgICAgICAgc2VsZmNvbnRhaW5lZDogZmFsc2UsXG4gICAgICAgICAgICBkb05vdFNraXBFbmNvZGVkOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGVtcGxhdGU6IHZvaWQgMCxcbiAgICAgICAgICBjb21waWxlOiB2b2lkIDAsXG4gICAgICAgICAgbG9nOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoKHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihnbG9iYWxUaGlzKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgJ19fbWFnaWNfXycsIHtcbiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfX21hZ2ljX18uZ2xvYmFsVGhpcyA9IF9fbWFnaWNfXztcbiAgICAgICAgICAgIGRlbGV0ZSBPYmplY3QucHJvdG90eXBlLl9fbWFnaWNfXztcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB3aW5kb3cuZ2xvYmFsVGhpcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIGB0aGlzYCcpO1xuICAgICAgICAgICAgfSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICAgICAgZG9UMy5lbmNvZGVIVE1MU291cmNlID0gZnVuY3Rpb24oZG9Ob3RTa2lwRW5jb2RlZCkge1xuICAgICAgICAgIHZhciBlbmNvZGVIVE1MUnVsZXMgPSB7XG4gICAgICAgICAgICAnJic6ICcmIzM4OycsXG4gICAgICAgICAgICAnPCc6ICcmIzYwOycsXG4gICAgICAgICAgICAnPic6ICcmIzYyOycsXG4gICAgICAgICAgICAnXCInOiAnJiMzNDsnLFxuICAgICAgICAgICAgJ1xcJyc6ICcmIzM5OycsXG4gICAgICAgICAgICAnLyc6ICcmIzQ3OydcbiAgICAgICAgICB9LCBtYXRjaEhUTUwgPSBkb05vdFNraXBFbmNvZGVkID8gL1smPD5cIidcXC9dL2cgOiAvJig/ISM/XFx3KzspfDx8PnxcInwnfFxcLy9nO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gY29kZSA/IGNvZGUudG9TdHJpbmcoKS5yZXBsYWNlKG1hdGNoSFRNTCwgZnVuY3Rpb24obTMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZUhUTUxSdWxlc1ttM10gfHwgbTM7XG4gICAgICAgICAgICB9KSA6ICcnO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gZG9UMztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9UMztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbG9iYWxUaGlzLmRvVCA9IGRvVDM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YXJ0ZW5kID0ge1xuICAgICAgICAgIGFwcGVuZDoge1xuICAgICAgICAgICAgc3RhcnQ6ICdcXCcrKCcsXG4gICAgICAgICAgICBlbmQ6ICcpK1xcJycsXG4gICAgICAgICAgICBzdGFydGVuY29kZTogJ1xcJytlbmNvZGVIVE1MKCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNwbGl0OiB7XG4gICAgICAgICAgICBzdGFydDogJ1xcJztvdXQrPSgnLFxuICAgICAgICAgICAgZW5kOiAnKTtvdXQrPVxcJycsXG4gICAgICAgICAgICBzdGFydGVuY29kZTogJ1xcJztvdXQrPWVuY29kZUhUTUwoJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgc2tpcCA9IC8kXi87XG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVEZWZzKGM0LCBibG9jaywgZGVmKSB7XG4gICAgICAgICAgcmV0dXJuICh0eXBlb2YgYmxvY2sgPT09ICdzdHJpbmcnID8gYmxvY2sgOiBibG9jay50b1N0cmluZygpKS5yZXBsYWNlKGM0LmRlZmluZSB8fCBza2lwLCBmdW5jdGlvbihtMywgY29kZSwgYXNzaWduLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGNvZGUuaW5kZXhPZignZGVmLicpID09PSAwKSB7XG4gICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnN1YnN0cmluZyg0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGNvZGUgaW4gZGVmKSkge1xuICAgICAgICAgICAgICBpZiAoYXNzaWduID09PSAnOicpIHtcbiAgICAgICAgICAgICAgICBpZiAoYzQuZGVmaW5lUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZS5yZXBsYWNlKGM0LmRlZmluZVBhcmFtcywgZnVuY3Rpb24obTQsIHBhcmFtLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZltjb2RlXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICBhcmc6IHBhcmFtLFxuICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHZcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIShjb2RlIGluIGRlZikpIHtcbiAgICAgICAgICAgICAgICAgIGRlZltjb2RlXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgRnVuY3Rpb24oJ2RlZicsICdkZWZbXFwnJyArIGNvZGUgKyAnXFwnXT0nICsgdmFsdWUpKGRlZik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9KS5yZXBsYWNlKGM0LnVzZSB8fCBza2lwLCBmdW5jdGlvbihtMywgY29kZSkge1xuICAgICAgICAgICAgaWYgKGM0LnVzZVBhcmFtcykge1xuICAgICAgICAgICAgICBjb2RlID0gY29kZS5yZXBsYWNlKGM0LnVzZVBhcmFtcywgZnVuY3Rpb24obTQsIHMsIGQyLCBwYXJhbSkge1xuICAgICAgICAgICAgICAgIGlmIChkZWZbZDJdICYmIGRlZltkMl0uYXJnICYmIHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcncgPSAoZDIgKyAnOicgKyBwYXJhbSkucmVwbGFjZSgvJ3xcXFxcL2csICdfJyk7XG4gICAgICAgICAgICAgICAgICBkZWYuX19leHAgPSBkZWYuX19leHAgfHwge307XG4gICAgICAgICAgICAgICAgICBkZWYuX19leHBbcnddID0gZGVmW2QyXS50ZXh0LnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58W15cXFxcdyRdKScgKyBkZWZbZDJdLmFyZyArICcoW15cXFxcdyRdKScsICdnJyksICckMScgKyBwYXJhbSArICckMicpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHMgKyAnZGVmLl9fZXhwW1xcJycgKyBydyArICdcXCddJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHYgPSBuZXcgRnVuY3Rpb24oJ2RlZicsICdyZXR1cm4gJyArIGNvZGUpKGRlZik7XG4gICAgICAgICAgICByZXR1cm4gdiA/IHJlc29sdmVEZWZzKGM0LCB2LCBkZWYpIDogdjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1bmVzY2FwZShjb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIGNvZGUucmVwbGFjZSgvXFxcXCgnfFxcXFwpL2csICckMScpLnJlcGxhY2UoL1tcXHJcXHRcXG5dL2csICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgZG9UMy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRtcGwsIGM0LCBkZWYpIHtcbiAgICAgICAgICBjNCA9IGM0IHx8IGRvVDMudGVtcGxhdGVTZXR0aW5ncztcbiAgICAgICAgICB2YXIgY3NlID0gYzQuYXBwZW5kID8gc3RhcnRlbmQuYXBwZW5kIDogc3RhcnRlbmQuc3BsaXQsIG5lZWRodG1sZW5jb2RlLCBzaWQgPSAwLCBpbmR2LCBzdHIgPSBjNC51c2UgfHwgYzQuZGVmaW5lID8gcmVzb2x2ZURlZnMoYzQsIHRtcGwsIGRlZiB8fCB7fSkgOiB0bXBsO1xuICAgICAgICAgIHN0ciA9ICgndmFyIG91dD1cXCcnICsgKGM0LnN0cmlwID8gc3RyLnJlcGxhY2UoLyhefFxccnxcXG4pXFx0KiArfCArXFx0KihcXHJ8XFxufCQpL2csICcgJykucmVwbGFjZSgvXFxyfFxcbnxcXHR8XFwvXFwqW1xcc1xcU10qP1xcKlxcLy9nLCAnJykgOiBzdHIpLnJlcGxhY2UoLyd8XFxcXC9nLCAnXFxcXCQmJykucmVwbGFjZShjNC5pbnRlcnBvbGF0ZSB8fCBza2lwLCBmdW5jdGlvbihtMywgY29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNzZS5zdGFydCArIHVuZXNjYXBlKGNvZGUpICsgY3NlLmVuZDtcbiAgICAgICAgICB9KS5yZXBsYWNlKGM0LmVuY29kZSB8fCBza2lwLCBmdW5jdGlvbihtMywgY29kZSkge1xuICAgICAgICAgICAgbmVlZGh0bWxlbmNvZGUgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGNzZS5zdGFydGVuY29kZSArIHVuZXNjYXBlKGNvZGUpICsgY3NlLmVuZDtcbiAgICAgICAgICB9KS5yZXBsYWNlKGM0LmNvbmRpdGlvbmFsIHx8IHNraXAsIGZ1bmN0aW9uKG0zLCBlbHNlY2FzZSwgY29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsc2VjYXNlID8gY29kZSA/ICdcXCc7fWVsc2UgaWYoJyArIHVuZXNjYXBlKGNvZGUpICsgJyl7b3V0Kz1cXCcnIDogJ1xcJzt9ZWxzZXtvdXQrPVxcJycgOiBjb2RlID8gJ1xcJztpZignICsgdW5lc2NhcGUoY29kZSkgKyAnKXtvdXQrPVxcJycgOiAnXFwnO31vdXQrPVxcJyc7XG4gICAgICAgICAgfSkucmVwbGFjZShjNC5pdGVyYXRlIHx8IHNraXAsIGZ1bmN0aW9uKG0zLCBpdGVyYXRlLCB2bmFtZSwgaW5hbWUpIHtcbiAgICAgICAgICAgIGlmICghaXRlcmF0ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ1xcJzt9IH0gb3V0Kz1cXCcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2lkICs9IDE7XG4gICAgICAgICAgICBpbmR2ID0gaW5hbWUgfHwgJ2knICsgc2lkO1xuICAgICAgICAgICAgaXRlcmF0ZSA9IHVuZXNjYXBlKGl0ZXJhdGUpO1xuICAgICAgICAgICAgcmV0dXJuICdcXCc7dmFyIGFycicgKyBzaWQgKyAnPScgKyBpdGVyYXRlICsgJztpZihhcnInICsgc2lkICsgJyl7dmFyICcgKyB2bmFtZSArICcsJyArIGluZHYgKyAnPS0xLGwnICsgc2lkICsgJz1hcnInICsgc2lkICsgJy5sZW5ndGgtMTt3aGlsZSgnICsgaW5kdiArICc8bCcgKyBzaWQgKyAnKXsnICsgdm5hbWUgKyAnPWFycicgKyBzaWQgKyAnWycgKyBpbmR2ICsgJys9MV07b3V0Kz1cXCcnO1xuICAgICAgICAgIH0pLnJlcGxhY2UoYzQuZXZhbHVhdGUgfHwgc2tpcCwgZnVuY3Rpb24obTMsIGNvZGUpIHtcbiAgICAgICAgICAgIHJldHVybiAnXFwnOycgKyB1bmVzY2FwZShjb2RlKSArICdvdXQrPVxcJyc7XG4gICAgICAgICAgfSkgKyAnXFwnO3JldHVybiBvdXQ7JykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLnJlcGxhY2UoL1xcdC9nLCAnXFxcXHQnKS5yZXBsYWNlKC9cXHIvZywgJ1xcXFxyJykucmVwbGFjZSgvKFxcc3w7fFxcfXxefFxceylvdXRcXCs9Jyc7L2csICckMScpLnJlcGxhY2UoL1xcKycnL2csICcnKTtcbiAgICAgICAgICBpZiAobmVlZGh0bWxlbmNvZGUpIHtcbiAgICAgICAgICAgIGlmICghYzQuc2VsZmNvbnRhaW5lZCAmJiBnbG9iYWxUaGlzICYmICFnbG9iYWxUaGlzLl9lbmNvZGVIVE1MKSB7XG4gICAgICAgICAgICAgIGdsb2JhbFRoaXMuX2VuY29kZUhUTUwgPSBkb1QzLmVuY29kZUhUTUxTb3VyY2UoYzQuZG9Ob3RTa2lwRW5jb2RlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHIgPSAndmFyIGVuY29kZUhUTUwgPSB0eXBlb2YgX2VuY29kZUhUTUwgIT09IFxcJ3VuZGVmaW5lZFxcJyA/IF9lbmNvZGVIVE1MIDogKCcgKyBkb1QzLmVuY29kZUhUTUxTb3VyY2UudG9TdHJpbmcoKSArICcoJyArIChjNC5kb05vdFNraXBFbmNvZGVkIHx8ICcnKSArICcpKTsnICsgc3RyO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihjNC52YXJuYW1lLCBzdHIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCBjcmVhdGUgYSB0ZW1wbGF0ZSBmdW5jdGlvbjogJyArIHN0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZG9UMy5jb21waWxlID0gZnVuY3Rpb24odG1wbCwgZGVmKSB7XG4gICAgICAgICAgcmV0dXJuIGRvVDMudGVtcGxhdGUodG1wbCwgbnVsbCwgZGVmKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKCk7XG4gICAgfSk7XG4gICAgdmFyIGRlZmluaXRpb25zID0gWyB7XG4gICAgICBuYW1lOiAnTkEnLFxuICAgICAgdmFsdWU6ICdpbmFwcGxpY2FibGUnLFxuICAgICAgcHJpb3JpdHk6IDAsXG4gICAgICBncm91cDogJ2luYXBwbGljYWJsZSdcbiAgICB9LCB7XG4gICAgICBuYW1lOiAnUEFTUycsXG4gICAgICB2YWx1ZTogJ3Bhc3NlZCcsXG4gICAgICBwcmlvcml0eTogMSxcbiAgICAgIGdyb3VwOiAncGFzc2VzJ1xuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdDQU5UVEVMTCcsXG4gICAgICB2YWx1ZTogJ2NhbnRUZWxsJyxcbiAgICAgIHByaW9yaXR5OiAyLFxuICAgICAgZ3JvdXA6ICdpbmNvbXBsZXRlJ1xuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdGQUlMJyxcbiAgICAgIHZhbHVlOiAnZmFpbGVkJyxcbiAgICAgIHByaW9yaXR5OiAzLFxuICAgICAgZ3JvdXA6ICd2aW9sYXRpb25zJ1xuICAgIH0gXTtcbiAgICB2YXIgY29uc3RhbnRzID0ge1xuICAgICAgaGVscFVybEJhc2U6ICdodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvJyxcbiAgICAgIGdyaWRTaXplOiAyMDAsXG4gICAgICBzZWxlY3RvclNpbWlsYXJGaWx0ZXJMaW1pdDogNzAwLFxuICAgICAgcmVzdWx0czogW10sXG4gICAgICByZXN1bHRHcm91cHM6IFtdLFxuICAgICAgcmVzdWx0R3JvdXBNYXA6IHt9LFxuICAgICAgaW1wYWN0OiBPYmplY3QuZnJlZXplKFsgJ21pbm9yJywgJ21vZGVyYXRlJywgJ3NlcmlvdXMnLCAnY3JpdGljYWwnIF0pLFxuICAgICAgcHJlbG9hZDogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGFzc2V0czogWyAnY3Nzb20nLCAnbWVkaWEnIF0sXG4gICAgICAgIHRpbWVvdXQ6IDFlNFxuICAgICAgfSksXG4gICAgICBhbGxPcmlnaW5zOiAnPHVuc2FmZV9hbGxfb3JpZ2lucz4nLFxuICAgICAgc2FtZU9yaWdpbjogJzxzYW1lX29yaWdpbj4nXG4gICAgfTtcbiAgICBkZWZpbml0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcbiAgICAgIHZhciBuYW1lID0gZGVmaW5pdGlvbi5uYW1lO1xuICAgICAgdmFyIHZhbHVlID0gZGVmaW5pdGlvbi52YWx1ZTtcbiAgICAgIHZhciBwcmlvcml0eSA9IGRlZmluaXRpb24ucHJpb3JpdHk7XG4gICAgICB2YXIgZ3JvdXAgPSBkZWZpbml0aW9uLmdyb3VwO1xuICAgICAgY29uc3RhbnRzW25hbWVdID0gdmFsdWU7XG4gICAgICBjb25zdGFudHNbbmFtZSArICdfUFJJTyddID0gcHJpb3JpdHk7XG4gICAgICBjb25zdGFudHNbbmFtZSArICdfR1JPVVAnXSA9IGdyb3VwO1xuICAgICAgY29uc3RhbnRzLnJlc3VsdHNbcHJpb3JpdHldID0gdmFsdWU7XG4gICAgICBjb25zdGFudHMucmVzdWx0R3JvdXBzW3ByaW9yaXR5XSA9IGdyb3VwO1xuICAgICAgY29uc3RhbnRzLnJlc3VsdEdyb3VwTWFwW3ZhbHVlXSA9IGdyb3VwO1xuICAgIH0pO1xuICAgIE9iamVjdC5mcmVlemUoY29uc3RhbnRzLnJlc3VsdHMpO1xuICAgIE9iamVjdC5mcmVlemUoY29uc3RhbnRzLnJlc3VsdEdyb3Vwcyk7XG4gICAgT2JqZWN0LmZyZWV6ZShjb25zdGFudHMucmVzdWx0R3JvdXBNYXApO1xuICAgIE9iamVjdC5mcmVlemUoY29uc3RhbnRzKTtcbiAgICB2YXIgY29uc3RhbnRzX2RlZmF1bHQgPSBjb25zdGFudHM7XG4gICAgZnVuY3Rpb24gbG9nKCkge1xuICAgICAgaWYgKCh0eXBlb2YgY29uc29sZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uc29sZSkpID09PSAnb2JqZWN0JyAmJiBjb25zb2xlLmxvZykge1xuICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxvZ19kZWZhdWx0ID0gbG9nO1xuICAgIHZhciB3aGl0ZXNwYWNlUmVnZXggPSAvW1xcdFxcclxcblxcZl0vZztcbiAgICB2YXIgQWJzdHJhY3RWaXJ0dWFsTm9kZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gQWJzdHJhY3RWaXJ0dWFsTm9kZSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFic3RyYWN0VmlydHVhbE5vZGUpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoQWJzdHJhY3RWaXJ0dWFsTm9kZSwgWyB7XG4gICAgICAgIGtleTogJ3Byb3BzJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWaXJ0dWFsTm9kZSBjbGFzcyBtdXN0IGhhdmUgYSBcInByb3BzXCIgb2JqZWN0IGNvbnNpc3Rpbmcgb2YgXCJub2RlVHlwZVwiIGFuZCBcIm5vZGVOYW1lXCIgcHJvcGVydGllcycpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2F0dHJOYW1lcycsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVmlydHVhbE5vZGUgY2xhc3MgbXVzdCBoYXZlIGFuIFwiYXR0ck5hbWVzXCIgcHJvcGVydHknKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdhdHRyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0dHIoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWaXJ0dWFsTm9kZSBjbGFzcyBtdXN0IGhhdmUgYW4gXCJhdHRyXCIgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNBdHRyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0F0dHIoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWaXJ0dWFsTm9kZSBjbGFzcyBtdXN0IGhhdmUgYSBcImhhc0F0dHJcIiBmdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhc0NsYXNzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICAgICAgICAgIHZhciBjbGFzc0F0dHIgPSB0aGlzLmF0dHIoJ2NsYXNzJyk7XG4gICAgICAgICAgaWYgKCFjbGFzc0F0dHIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gJyAnICsgY2xhc3NOYW1lICsgJyAnO1xuICAgICAgICAgIHJldHVybiAoJyAnICsgY2xhc3NBdHRyICsgJyAnKS5yZXBsYWNlKHdoaXRlc3BhY2VSZWdleCwgJyAnKS5pbmRleE9mKHNlbGVjdG9yKSA+PSAwO1xuICAgICAgICB9XG4gICAgICB9IF0pO1xuICAgIH0oKTtcbiAgICB2YXIgYWJzdHJhY3RfdmlydHVhbF9ub2RlX2RlZmF1bHQgPSBBYnN0cmFjdFZpcnR1YWxOb2RlO1xuICAgIHZhciB1dGlsc19leHBvcnRzID0ge307XG4gICAgX19leHBvcnQodXRpbHNfZXhwb3J0cywge1xuICAgICAgRHFFbGVtZW50OiBmdW5jdGlvbiBEcUVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiBkcV9lbGVtZW50X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgYWdncmVnYXRlOiBmdW5jdGlvbiBhZ2dyZWdhdGUoKSB7XG4gICAgICAgIHJldHVybiBhZ2dyZWdhdGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBhZ2dyZWdhdGVDaGVja3M6IGZ1bmN0aW9uIGFnZ3JlZ2F0ZUNoZWNrcygpIHtcbiAgICAgICAgcmV0dXJuIGFnZ3JlZ2F0ZV9jaGVja3NfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBhZ2dyZWdhdGVOb2RlUmVzdWx0czogZnVuY3Rpb24gYWdncmVnYXRlTm9kZVJlc3VsdHMoKSB7XG4gICAgICAgIHJldHVybiBhZ2dyZWdhdGVfbm9kZV9yZXN1bHRzX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgYWdncmVnYXRlUmVzdWx0OiBmdW5jdGlvbiBhZ2dyZWdhdGVSZXN1bHQoKSB7XG4gICAgICAgIHJldHVybiBhZ2dyZWdhdGVfcmVzdWx0X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgYXJlU3R5bGVzU2V0OiBmdW5jdGlvbiBhcmVTdHlsZXNTZXQoKSB7XG4gICAgICAgIHJldHVybiBhcmVfc3R5bGVzX3NldF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGFzc2VydDogZnVuY3Rpb24gYXNzZXJ0KCkge1xuICAgICAgICByZXR1cm4gYXNzZXJ0X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgY2hlY2tIZWxwZXI6IGZ1bmN0aW9uIGNoZWNrSGVscGVyKCkge1xuICAgICAgICByZXR1cm4gY2hlY2tfaGVscGVyX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gX2Nsb25lO1xuICAgICAgfSxcbiAgICAgIGNsb3Nlc3Q6IGZ1bmN0aW9uIGNsb3Nlc3QoKSB7XG4gICAgICAgIHJldHVybiBjbG9zZXN0X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgY29sbGVjdFJlc3VsdHNGcm9tRnJhbWVzOiBmdW5jdGlvbiBjb2xsZWN0UmVzdWx0c0Zyb21GcmFtZXMoKSB7XG4gICAgICAgIHJldHVybiBfY29sbGVjdFJlc3VsdHNGcm9tRnJhbWVzO1xuICAgICAgfSxcbiAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbiBjb250YWlucygpIHtcbiAgICAgICAgcmV0dXJuIF9jb250YWlucztcbiAgICAgIH0sXG4gICAgICBjb252ZXJ0U2VsZWN0b3I6IGZ1bmN0aW9uIGNvbnZlcnRTZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIF9jb252ZXJ0U2VsZWN0b3I7XG4gICAgICB9LFxuICAgICAgY3NzUGFyc2VyOiBmdW5jdGlvbiBjc3NQYXJzZXIoKSB7XG4gICAgICAgIHJldHVybiBjc3NfcGFyc2VyX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZGVlcE1lcmdlOiBmdW5jdGlvbiBkZWVwTWVyZ2UoKSB7XG4gICAgICAgIHJldHVybiBkZWVwX21lcmdlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZXNjYXBlU2VsZWN0b3I6IGZ1bmN0aW9uIGVzY2FwZVNlbGVjdG9yKCkge1xuICAgICAgICByZXR1cm4gZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZXh0ZW5kTWV0YURhdGE6IGZ1bmN0aW9uIGV4dGVuZE1ldGFEYXRhKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kX21ldGFfZGF0YV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGZpbHRlckh0bWxBdHRyczogZnVuY3Rpb24gZmlsdGVySHRtbEF0dHJzKCkge1xuICAgICAgICByZXR1cm4gX2ZpbHRlckh0bWxBdHRycztcbiAgICAgIH0sXG4gICAgICBmaW5hbGl6ZVJ1bGVSZXN1bHQ6IGZ1bmN0aW9uIGZpbmFsaXplUnVsZVJlc3VsdCgpIHtcbiAgICAgICAgcmV0dXJuIF9maW5hbGl6ZVJ1bGVSZXN1bHQ7XG4gICAgICB9LFxuICAgICAgZmluZEJ5OiBmdW5jdGlvbiBmaW5kQnkoKSB7XG4gICAgICAgIHJldHVybiBmaW5kX2J5X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0QWxsQ2hlY2tzOiBmdW5jdGlvbiBnZXRBbGxDaGVja3MoKSB7XG4gICAgICAgIHJldHVybiBnZXRfYWxsX2NoZWNrc19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldEFuY2VzdHJ5OiBmdW5jdGlvbiBnZXRBbmNlc3RyeSgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRBbmNlc3RyeTtcbiAgICAgIH0sXG4gICAgICBnZXRCYXNlTGFuZzogZnVuY3Rpb24gZ2V0QmFzZUxhbmcoKSB7XG4gICAgICAgIHJldHVybiBnZXRfYmFzZV9sYW5nX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0Q2hlY2tNZXNzYWdlOiBmdW5jdGlvbiBnZXRDaGVja01lc3NhZ2UoKSB7XG4gICAgICAgIHJldHVybiBnZXRfY2hlY2tfbWVzc2FnZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldENoZWNrT3B0aW9uOiBmdW5jdGlvbiBnZXRDaGVja09wdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldF9jaGVja19vcHRpb25fZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRFbnZpcm9ubWVudERhdGE6IGZ1bmN0aW9uIGdldEVudmlyb25tZW50RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRFbnZpcm9ubWVudERhdGE7XG4gICAgICB9LFxuICAgICAgZ2V0RmxhdHRlbmVkVHJlZTogZnVuY3Rpb24gZ2V0RmxhdHRlbmVkVHJlZSgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRGbGF0dGVuZWRUcmVlO1xuICAgICAgfSxcbiAgICAgIGdldEZyYW1lQ29udGV4dHM6IGZ1bmN0aW9uIGdldEZyYW1lQ29udGV4dHMoKSB7XG4gICAgICAgIHJldHVybiBfZ2V0RnJhbWVDb250ZXh0cztcbiAgICAgIH0sXG4gICAgICBnZXRGcmllbmRseVVyaUVuZDogZnVuY3Rpb24gZ2V0RnJpZW5kbHlVcmlFbmQoKSB7XG4gICAgICAgIHJldHVybiBnZXRfZnJpZW5kbHlfdXJpX2VuZF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldE5vZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiBnZXROb2RlQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIGdldF9ub2RlX2F0dHJpYnV0ZXNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXROb2RlRnJvbVRyZWU6IGZ1bmN0aW9uIGdldE5vZGVGcm9tVHJlZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFByZWxvYWRDb25maWc6IGZ1bmN0aW9uIGdldFByZWxvYWRDb25maWcoKSB7XG4gICAgICAgIHJldHVybiBfZ2V0UHJlbG9hZENvbmZpZztcbiAgICAgIH0sXG4gICAgICBnZXRSb290Tm9kZTogZnVuY3Rpb24gZ2V0Um9vdE5vZGUoKSB7XG4gICAgICAgIHJldHVybiBnZXRfcm9vdF9ub2RlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0UnVsZTogZnVuY3Rpb24gZ2V0UnVsZSgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRSdWxlO1xuICAgICAgfSxcbiAgICAgIGdldFNjcm9sbDogZnVuY3Rpb24gZ2V0U2Nyb2xsKCkge1xuICAgICAgICByZXR1cm4gZ2V0X3Njcm9sbF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFNjcm9sbFN0YXRlOiBmdW5jdGlvbiBnZXRTY3JvbGxTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldF9zY3JvbGxfc3RhdGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRTZWxlY3RvcjogZnVuY3Rpb24gZ2V0U2VsZWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBnZXRfc2VsZWN0b3JfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRTZWxlY3RvckRhdGE6IGZ1bmN0aW9uIGdldFNlbGVjdG9yRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRTZWxlY3RvckRhdGE7XG4gICAgICB9LFxuICAgICAgZ2V0U2hhZG93U2VsZWN0b3I6IGZ1bmN0aW9uIGdldFNoYWRvd1NlbGVjdG9yKCkge1xuICAgICAgICByZXR1cm4gX2dldFNoYWRvd1NlbGVjdG9yO1xuICAgICAgfSxcbiAgICAgIGdldFN0YW5kYXJkczogZnVuY3Rpb24gZ2V0U3RhbmRhcmRzKCkge1xuICAgICAgICByZXR1cm4gX2dldFN0YW5kYXJkcztcbiAgICAgIH0sXG4gICAgICBnZXRTdHlsZVNoZWV0RmFjdG9yeTogZnVuY3Rpb24gZ2V0U3R5bGVTaGVldEZhY3RvcnkoKSB7XG4gICAgICAgIHJldHVybiBnZXRfc3R5bGVzaGVldF9mYWN0b3J5X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0WHBhdGg6IGZ1bmN0aW9uIGdldFhwYXRoKCkge1xuICAgICAgICByZXR1cm4gZ2V0X3hwYXRoX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaW5qZWN0U3R5bGU6IGZ1bmN0aW9uIGluamVjdFN0eWxlKCkge1xuICAgICAgICByZXR1cm4gaW5qZWN0X3N0eWxlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNBcnJheUxpa2U6IGZ1bmN0aW9uIGlzQXJyYXlMaWtlKCkge1xuICAgICAgICByZXR1cm4gX2lzQXJyYXlMaWtlO1xuICAgICAgfSxcbiAgICAgIGlzQ29udGV4dE9iamVjdDogZnVuY3Rpb24gaXNDb250ZXh0T2JqZWN0KCkge1xuICAgICAgICByZXR1cm4gX2lzQ29udGV4dE9iamVjdDtcbiAgICAgIH0sXG4gICAgICBpc0NvbnRleHRQcm9wOiBmdW5jdGlvbiBpc0NvbnRleHRQcm9wKCkge1xuICAgICAgICByZXR1cm4gX2lzQ29udGV4dFByb3A7XG4gICAgICB9LFxuICAgICAgaXNDb250ZXh0U3BlYzogZnVuY3Rpb24gaXNDb250ZXh0U3BlYygpIHtcbiAgICAgICAgcmV0dXJuIF9pc0NvbnRleHRTcGVjO1xuICAgICAgfSxcbiAgICAgIGlzSGlkZGVuOiBmdW5jdGlvbiBpc0hpZGRlbigpIHtcbiAgICAgICAgcmV0dXJuIGlzX2hpZGRlbl9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGlzSHRtbEVsZW1lbnQ6IGZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiBpc19odG1sX2VsZW1lbnRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc0xhYmVsbGVkRnJhbWVzU2VsZWN0b3I6IGZ1bmN0aW9uIGlzTGFiZWxsZWRGcmFtZXNTZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIF9pc0xhYmVsbGVkRnJhbWVzU2VsZWN0b3I7XG4gICAgICB9LFxuICAgICAgaXNMYWJlbGxlZFNoYWRvd0RvbVNlbGVjdG9yOiBmdW5jdGlvbiBpc0xhYmVsbGVkU2hhZG93RG9tU2VsZWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBfaXNMYWJlbGxlZFNoYWRvd0RvbVNlbGVjdG9yO1xuICAgICAgfSxcbiAgICAgIGlzTm9kZUluQ29udGV4dDogZnVuY3Rpb24gaXNOb2RlSW5Db250ZXh0KCkge1xuICAgICAgICByZXR1cm4gX2lzTm9kZUluQ29udGV4dDtcbiAgICAgIH0sXG4gICAgICBpc1NoYWRvd1Jvb3Q6IGZ1bmN0aW9uIGlzU2hhZG93Um9vdCgpIHtcbiAgICAgICAgcmV0dXJuIGlzX3NoYWRvd19yb290X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNWYWxpZExhbmc6IGZ1bmN0aW9uIGlzVmFsaWRMYW5nKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRfbGFuZ3NfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc1hIVE1MOiBmdW5jdGlvbiBpc1hIVE1MKCkge1xuICAgICAgICByZXR1cm4gaXNfeGh0bWxfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBtYXRjaEFuY2VzdHJ5OiBmdW5jdGlvbiBtYXRjaEFuY2VzdHJ5KCkge1xuICAgICAgICByZXR1cm4gX21hdGNoQW5jZXN0cnk7XG4gICAgICB9LFxuICAgICAgbWF0Y2hlczogZnVuY3Rpb24gbWF0Y2hlcygpIHtcbiAgICAgICAgcmV0dXJuIF9tYXRjaGVzO1xuICAgICAgfSxcbiAgICAgIG1hdGNoZXNFeHByZXNzaW9uOiBmdW5jdGlvbiBtYXRjaGVzRXhwcmVzc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIF9tYXRjaGVzRXhwcmVzc2lvbjtcbiAgICAgIH0sXG4gICAgICBtYXRjaGVzU2VsZWN0b3I6IGZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRfbWF0Y2hlc19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIG1lbW9pemU6IGZ1bmN0aW9uIG1lbW9pemUoKSB7XG4gICAgICAgIHJldHVybiBtZW1vaXplX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgbWVyZ2VSZXN1bHRzOiBmdW5jdGlvbiBtZXJnZVJlc3VsdHMoKSB7XG4gICAgICAgIHJldHVybiBtZXJnZV9yZXN1bHRzX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgbm9kZUxvb2t1cDogZnVuY3Rpb24gbm9kZUxvb2t1cCgpIHtcbiAgICAgICAgcmV0dXJuIF9ub2RlTG9va3VwO1xuICAgICAgfSxcbiAgICAgIG5vZGVTZXJpYWxpemVyOiBmdW5jdGlvbiBub2RlU2VyaWFsaXplcigpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVfc2VyaWFsaXplcl9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIG5vZGVTb3J0ZXI6IGZ1bmN0aW9uIG5vZGVTb3J0ZXIoKSB7XG4gICAgICAgIHJldHVybiBub2RlX3NvcnRlcl9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIG9iamVjdEhhc093bjogZnVuY3Rpb24gb2JqZWN0SGFzT3duKCkge1xuICAgICAgICByZXR1cm4gX29iamVjdEhhc093bjtcbiAgICAgIH0sXG4gICAgICBwYXJzZUNyb3NzT3JpZ2luU3R5bGVzaGVldDogZnVuY3Rpb24gcGFyc2VDcm9zc09yaWdpblN0eWxlc2hlZXQoKSB7XG4gICAgICAgIHJldHVybiBwYXJzZV9jcm9zc29yaWdpbl9zdHlsZXNoZWV0X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgcGFyc2VTYW1lT3JpZ2luU3R5bGVzaGVldDogZnVuY3Rpb24gcGFyc2VTYW1lT3JpZ2luU3R5bGVzaGVldCgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlX3NhbWVvcmlnaW5fc3R5bGVzaGVldF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHBhcnNlU3R5bGVzaGVldDogZnVuY3Rpb24gcGFyc2VTdHlsZXNoZWV0KCkge1xuICAgICAgICByZXR1cm4gcGFyc2Vfc3R5bGVzaGVldF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHBhcnNlVGFiaW5kZXg6IGZ1bmN0aW9uIHBhcnNlVGFiaW5kZXgoKSB7XG4gICAgICAgIHJldHVybiBwYXJzZV90YWJpbmRleF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHBlcmZvcm1hbmNlVGltZXI6IGZ1bmN0aW9uIHBlcmZvcm1hbmNlVGltZXIoKSB7XG4gICAgICAgIHJldHVybiBwZXJmb3JtYW5jZV90aW1lcl9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHBvbGx5ZmlsbEVsZW1lbnRzRnJvbVBvaW50OiBmdW5jdGlvbiBwb2xseWZpbGxFbGVtZW50c0Zyb21Qb2ludCgpIHtcbiAgICAgICAgcmV0dXJuIF9wb2xseWZpbGxFbGVtZW50c0Zyb21Qb2ludDtcbiAgICAgIH0sXG4gICAgICBwcmVsb2FkOiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICAgICAgICByZXR1cm4gX3ByZWxvYWQ7XG4gICAgICB9LFxuICAgICAgcHJlbG9hZENzc29tOiBmdW5jdGlvbiBwcmVsb2FkQ3Nzb20oKSB7XG4gICAgICAgIHJldHVybiBwcmVsb2FkX2Nzc29tX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgcHJlbG9hZE1lZGlhOiBmdW5jdGlvbiBwcmVsb2FkTWVkaWEoKSB7XG4gICAgICAgIHJldHVybiBwcmVsb2FkX21lZGlhX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgcHJvY2Vzc01lc3NhZ2U6IGZ1bmN0aW9uIHByb2Nlc3NNZXNzYWdlKCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc19tZXNzYWdlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgcHVibGlzaE1ldGFEYXRhOiBmdW5jdGlvbiBwdWJsaXNoTWV0YURhdGEoKSB7XG4gICAgICAgIHJldHVybiBfcHVibGlzaE1ldGFEYXRhO1xuICAgICAgfSxcbiAgICAgIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgICAgIHJldHVybiBxdWVyeV9zZWxlY3Rvcl9hbGxfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBxdWVyeVNlbGVjdG9yQWxsRmlsdGVyOiBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yQWxsRmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gcXVlcnlfc2VsZWN0b3JfYWxsX2ZpbHRlcl9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHF1ZXVlOiBmdW5jdGlvbiBxdWV1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHF1ZXVlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgcmVzcG9uZGFibGU6IGZ1bmN0aW9uIHJlc3BvbmRhYmxlKCkge1xuICAgICAgICByZXR1cm4gX3Jlc3BvbmRhYmxlO1xuICAgICAgfSxcbiAgICAgIHJ1bGVTaG91bGRSdW46IGZ1bmN0aW9uIHJ1bGVTaG91bGRSdW4oKSB7XG4gICAgICAgIHJldHVybiBydWxlX3Nob3VsZF9ydW5fZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zZWxlY3Q7XG4gICAgICB9LFxuICAgICAgc2VuZENvbW1hbmRUb0ZyYW1lOiBmdW5jdGlvbiBzZW5kQ29tbWFuZFRvRnJhbWUoKSB7XG4gICAgICAgIHJldHVybiBfc2VuZENvbW1hbmRUb0ZyYW1lO1xuICAgICAgfSxcbiAgICAgIHNldFNjcm9sbFN0YXRlOiBmdW5jdGlvbiBzZXRTY3JvbGxTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHNldF9zY3JvbGxfc3RhdGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBzaGFkb3dTZWxlY3Q6IGZ1bmN0aW9uIHNoYWRvd1NlbGVjdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zaGFkb3dTZWxlY3Q7XG4gICAgICB9LFxuICAgICAgc2hhZG93U2VsZWN0QWxsOiBmdW5jdGlvbiBzaGFkb3dTZWxlY3RBbGwoKSB7XG4gICAgICAgIHJldHVybiBfc2hhZG93U2VsZWN0QWxsO1xuICAgICAgfSxcbiAgICAgIHNob3VsZFByZWxvYWQ6IGZ1bmN0aW9uIHNob3VsZFByZWxvYWQoKSB7XG4gICAgICAgIHJldHVybiBfc2hvdWxkUHJlbG9hZDtcbiAgICAgIH0sXG4gICAgICB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgICAgICByZXR1cm4gdG9fYXJyYXlfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB0b2tlbkxpc3Q6IGZ1bmN0aW9uIHRva2VuTGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuX2xpc3RfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB1bmlxdWVBcnJheTogZnVuY3Rpb24gdW5pcXVlQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB1bmlxdWVfYXJyYXlfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB1dWlkOiBmdW5jdGlvbiB1dWlkKCkge1xuICAgICAgICByZXR1cm4gdXVpZF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHZhbGlkSW5wdXRUeXBlczogZnVuY3Rpb24gdmFsaWRJbnB1dFR5cGVzKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRfaW5wdXRfdHlwZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHZhbGlkTGFuZ3M6IGZ1bmN0aW9uIHZhbGlkTGFuZ3MoKSB7XG4gICAgICAgIHJldHVybiBfdmFsaWRMYW5ncztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBhZ2dyZWdhdGUobWFwLCB2YWx1ZXMyLCBpbml0aWFsKSB7XG4gICAgICB2YWx1ZXMyID0gdmFsdWVzMi5zbGljZSgpO1xuICAgICAgaWYgKGluaXRpYWwpIHtcbiAgICAgICAgdmFsdWVzMi5wdXNoKGluaXRpYWwpO1xuICAgICAgfVxuICAgICAgdmFyIHNvcnRpbmcgPSB2YWx1ZXMyLm1hcChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgcmV0dXJuIG1hcC5pbmRleE9mKHZhbCk7XG4gICAgICB9KS5zb3J0KCk7XG4gICAgICByZXR1cm4gbWFwW3NvcnRpbmcucG9wKCldO1xuICAgIH1cbiAgICB2YXIgYWdncmVnYXRlX2RlZmF1bHQgPSBhZ2dyZWdhdGU7XG4gICAgdmFyIENBTlRURUxMX1BSSU8gPSBjb25zdGFudHNfZGVmYXVsdC5DQU5UVEVMTF9QUklPLCBGQUlMX1BSSU8gPSBjb25zdGFudHNfZGVmYXVsdC5GQUlMX1BSSU87XG4gICAgdmFyIGNoZWNrTWFwID0gW107XG4gICAgY2hlY2tNYXBbY29uc3RhbnRzX2RlZmF1bHQuUEFTU19QUklPXSA9IHRydWU7XG4gICAgY2hlY2tNYXBbY29uc3RhbnRzX2RlZmF1bHQuQ0FOVFRFTExfUFJJT10gPSBudWxsO1xuICAgIGNoZWNrTWFwW2NvbnN0YW50c19kZWZhdWx0LkZBSUxfUFJJT10gPSBmYWxzZTtcbiAgICB2YXIgY2hlY2tUeXBlcyA9IFsgJ2FueScsICdhbGwnLCAnbm9uZScgXTtcbiAgICBmdW5jdGlvbiBhbnlBbGxOb25lKG9iaiwgZnVuY3Rvcikge1xuICAgICAgcmV0dXJuIGNoZWNrVHlwZXMucmVkdWNlKGZ1bmN0aW9uKG91dCwgdHlwZTIpIHtcbiAgICAgICAgb3V0W3R5cGUyXSA9IChvYmpbdHlwZTJdIHx8IFtdKS5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0b3IodmFsLCB0eXBlMik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZ2dyZWdhdGVDaGVja3Mobm9kZVJlc09yaWdpbmFsKSB7XG4gICAgICB2YXIgbm9kZVJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIG5vZGVSZXNPcmlnaW5hbCk7XG4gICAgICBhbnlBbGxOb25lKG5vZGVSZXN1bHQsIGZ1bmN0aW9uKGNoZWNrLCB0eXBlMikge1xuICAgICAgICB2YXIgaSA9IHR5cGVvZiBjaGVjay5yZXN1bHQgPT09ICd1bmRlZmluZWQnID8gLTEgOiBjaGVja01hcC5pbmRleE9mKGNoZWNrLnJlc3VsdCk7XG4gICAgICAgIGNoZWNrLnByaW9yaXR5ID0gaSAhPT0gLTEgPyBpIDogY29uc3RhbnRzX2RlZmF1bHQuQ0FOVFRFTExfUFJJTztcbiAgICAgICAgaWYgKHR5cGUyID09PSAnbm9uZScpIHtcbiAgICAgICAgICBpZiAoY2hlY2sucHJpb3JpdHkgPT09IGNvbnN0YW50c19kZWZhdWx0LlBBU1NfUFJJTykge1xuICAgICAgICAgICAgY2hlY2sucHJpb3JpdHkgPSBjb25zdGFudHNfZGVmYXVsdC5GQUlMX1BSSU87XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGVjay5wcmlvcml0eSA9PT0gY29uc3RhbnRzX2RlZmF1bHQuRkFJTF9QUklPKSB7XG4gICAgICAgICAgICBjaGVjay5wcmlvcml0eSA9IGNvbnN0YW50c19kZWZhdWx0LlBBU1NfUFJJTztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIHByaW9yaXRpZXMgPSB7XG4gICAgICAgIGFsbDogbm9kZVJlc3VsdC5hbGwucmVkdWNlKGZ1bmN0aW9uKGEyLCBiMikge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heChhMiwgYjIucHJpb3JpdHkpO1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgbm9uZTogbm9kZVJlc3VsdC5ub25lLnJlZHVjZShmdW5jdGlvbihhMiwgYjIpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoYTIsIGIyLnByaW9yaXR5KTtcbiAgICAgICAgfSwgMCksXG4gICAgICAgIGFueTogbm9kZVJlc3VsdC5hbnkucmVkdWNlKGZ1bmN0aW9uKGEyLCBiMikge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1pbihhMiwgYjIucHJpb3JpdHkpO1xuICAgICAgICB9LCA0KSAlIDRcbiAgICAgIH07XG4gICAgICBub2RlUmVzdWx0LnByaW9yaXR5ID0gTWF0aC5tYXgocHJpb3JpdGllcy5hbGwsIHByaW9yaXRpZXMubm9uZSwgcHJpb3JpdGllcy5hbnkpO1xuICAgICAgdmFyIGltcGFjdHMgPSBbXTtcbiAgICAgIGNoZWNrVHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlMikge1xuICAgICAgICBub2RlUmVzdWx0W3R5cGUyXSA9IG5vZGVSZXN1bHRbdHlwZTJdLmZpbHRlcihmdW5jdGlvbihjaGVjaykge1xuICAgICAgICAgIHJldHVybiBjaGVjay5wcmlvcml0eSA9PT0gbm9kZVJlc3VsdC5wcmlvcml0eSAmJiBjaGVjay5wcmlvcml0eSA9PT0gcHJpb3JpdGllc1t0eXBlMl07XG4gICAgICAgIH0pO1xuICAgICAgICBub2RlUmVzdWx0W3R5cGUyXS5mb3JFYWNoKGZ1bmN0aW9uKGNoZWNrKSB7XG4gICAgICAgICAgcmV0dXJuIGltcGFjdHMucHVzaChjaGVjay5pbXBhY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKFsgQ0FOVFRFTExfUFJJTywgRkFJTF9QUklPIF0uaW5jbHVkZXMobm9kZVJlc3VsdC5wcmlvcml0eSkpIHtcbiAgICAgICAgbm9kZVJlc3VsdC5pbXBhY3QgPSBhZ2dyZWdhdGVfZGVmYXVsdChjb25zdGFudHNfZGVmYXVsdC5pbXBhY3QsIGltcGFjdHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZVJlc3VsdC5pbXBhY3QgPSBudWxsO1xuICAgICAgfVxuICAgICAgYW55QWxsTm9uZShub2RlUmVzdWx0LCBmdW5jdGlvbihjNCkge1xuICAgICAgICBkZWxldGUgYzQucmVzdWx0O1xuICAgICAgICBkZWxldGUgYzQucHJpb3JpdHk7XG4gICAgICB9KTtcbiAgICAgIG5vZGVSZXN1bHQucmVzdWx0ID0gY29uc3RhbnRzX2RlZmF1bHQucmVzdWx0c1tub2RlUmVzdWx0LnByaW9yaXR5XTtcbiAgICAgIGRlbGV0ZSBub2RlUmVzdWx0LnByaW9yaXR5O1xuICAgICAgcmV0dXJuIG5vZGVSZXN1bHQ7XG4gICAgfVxuICAgIHZhciBhZ2dyZWdhdGVfY2hlY2tzX2RlZmF1bHQgPSBhZ2dyZWdhdGVDaGVja3M7XG4gICAgZnVuY3Rpb24gX2ZpbmFsaXplUnVsZVJlc3VsdChydWxlUmVzdWx0KSB7XG4gICAgICB2YXIgcnVsZSA9IGF4ZS5fYXVkaXQucnVsZXMuZmluZChmdW5jdGlvbihfcmVmKSB7XG4gICAgICAgIHZhciBpZCA9IF9yZWYuaWQ7XG4gICAgICAgIHJldHVybiBpZCA9PT0gcnVsZVJlc3VsdC5pZDtcbiAgICAgIH0pO1xuICAgICAgaWYgKHJ1bGUgJiYgcnVsZS5pbXBhY3QpIHtcbiAgICAgICAgcnVsZVJlc3VsdC5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBbICdhbnknLCAnYWxsJywgJ25vbmUnIF0uZm9yRWFjaChmdW5jdGlvbihjaGVja1R5cGUpIHtcbiAgICAgICAgICAgIChub2RlW2NoZWNrVHlwZV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24oY2hlY2tSZXN1bHQpIHtcbiAgICAgICAgICAgICAgY2hlY2tSZXN1bHQuaW1wYWN0ID0gcnVsZS5pbXBhY3Q7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBPYmplY3QuYXNzaWduKHJ1bGVSZXN1bHQsIGFnZ3JlZ2F0ZV9ub2RlX3Jlc3VsdHNfZGVmYXVsdChydWxlUmVzdWx0Lm5vZGVzKSk7XG4gICAgICBkZWxldGUgcnVsZVJlc3VsdC5ub2RlcztcbiAgICAgIHJldHVybiBydWxlUmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZ2dyZWdhdGVOb2RlUmVzdWx0cyhub2RlUmVzdWx0cykge1xuICAgICAgdmFyIHJ1bGVSZXN1bHQgPSB7fTtcbiAgICAgIG5vZGVSZXN1bHRzID0gbm9kZVJlc3VsdHMubWFwKGZ1bmN0aW9uKG5vZGVSZXN1bHQpIHtcbiAgICAgICAgaWYgKG5vZGVSZXN1bHQuYW55ICYmIG5vZGVSZXN1bHQuYWxsICYmIG5vZGVSZXN1bHQubm9uZSkge1xuICAgICAgICAgIHJldHVybiBhZ2dyZWdhdGVfY2hlY2tzX2RlZmF1bHQobm9kZVJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShub2RlUmVzdWx0Lm5vZGUpKSB7XG4gICAgICAgICAgcmV0dXJuIF9maW5hbGl6ZVJ1bGVSZXN1bHQobm9kZVJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBSZXN1bHQgdHlwZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChub2RlUmVzdWx0cyAmJiBub2RlUmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdExpc3QgPSBub2RlUmVzdWx0cy5tYXAoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlLnJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJ1bGVSZXN1bHQucmVzdWx0ID0gYWdncmVnYXRlX2RlZmF1bHQoY29uc3RhbnRzX2RlZmF1bHQucmVzdWx0cywgcmVzdWx0TGlzdCwgcnVsZVJlc3VsdC5yZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcnVsZVJlc3VsdC5yZXN1bHQgPSAnaW5hcHBsaWNhYmxlJztcbiAgICAgIH1cbiAgICAgIGNvbnN0YW50c19kZWZhdWx0LnJlc3VsdEdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBydWxlUmVzdWx0W2dyb3VwXSA9IFtdO1xuICAgICAgfSk7XG4gICAgICBub2RlUmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGVSZXN1bHQpIHtcbiAgICAgICAgdmFyIGdyb3VwTmFtZSA9IGNvbnN0YW50c19kZWZhdWx0LnJlc3VsdEdyb3VwTWFwW25vZGVSZXN1bHQucmVzdWx0XTtcbiAgICAgICAgcnVsZVJlc3VsdFtncm91cE5hbWVdLnB1c2gobm9kZVJlc3VsdCk7XG4gICAgICB9KTtcbiAgICAgIHZhciBpbXBhY3RHcm91cCA9IGNvbnN0YW50c19kZWZhdWx0LkZBSUxfR1JPVVA7XG4gICAgICBpZiAocnVsZVJlc3VsdFtpbXBhY3RHcm91cF0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGltcGFjdEdyb3VwID0gY29uc3RhbnRzX2RlZmF1bHQuQ0FOVFRFTExfR1JPVVA7XG4gICAgICB9XG4gICAgICBpZiAocnVsZVJlc3VsdFtpbXBhY3RHcm91cF0ubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgaW1wYWN0TGlzdCA9IHJ1bGVSZXN1bHRbaW1wYWN0R3JvdXBdLm1hcChmdW5jdGlvbihmYWlsdXJlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhaWx1cmUuaW1wYWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgcnVsZVJlc3VsdC5pbXBhY3QgPSBhZ2dyZWdhdGVfZGVmYXVsdChjb25zdGFudHNfZGVmYXVsdC5pbXBhY3QsIGltcGFjdExpc3QpIHx8IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBydWxlUmVzdWx0LmltcGFjdCA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZVJlc3VsdDtcbiAgICB9XG4gICAgdmFyIGFnZ3JlZ2F0ZV9ub2RlX3Jlc3VsdHNfZGVmYXVsdCA9IGFnZ3JlZ2F0ZU5vZGVSZXN1bHRzO1xuICAgIGZ1bmN0aW9uIGNvcHlUb0dyb3VwKHJlc3VsdE9iamVjdCwgc3ViUmVzdWx0LCBncm91cCkge1xuICAgICAgdmFyIHJlc3VsdENvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBzdWJSZXN1bHQpO1xuICAgICAgcmVzdWx0Q29weS5ub2RlcyA9IChyZXN1bHRDb3B5W2dyb3VwXSB8fCBbXSkuY29uY2F0KCk7XG4gICAgICBjb25zdGFudHNfZGVmYXVsdC5yZXN1bHRHcm91cHMuZm9yRWFjaChmdW5jdGlvbihyZXN1bHRHcm91cCkge1xuICAgICAgICBkZWxldGUgcmVzdWx0Q29weVtyZXN1bHRHcm91cF07XG4gICAgICB9KTtcbiAgICAgIHJlc3VsdE9iamVjdFtncm91cF0ucHVzaChyZXN1bHRDb3B5KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWdncmVnYXRlUmVzdWx0KHJlc3VsdHMpIHtcbiAgICAgIHZhciByZXN1bHRPYmplY3QgPSB7fTtcbiAgICAgIGNvbnN0YW50c19kZWZhdWx0LnJlc3VsdEdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uKGdyb3VwTmFtZSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0T2JqZWN0W2dyb3VwTmFtZV0gPSBbXTtcbiAgICAgIH0pO1xuICAgICAgcmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKHN1YlJlc3VsdCkge1xuICAgICAgICBpZiAoc3ViUmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgY29weVRvR3JvdXAocmVzdWx0T2JqZWN0LCBzdWJSZXN1bHQsIGNvbnN0YW50c19kZWZhdWx0LkNBTlRURUxMX0dST1VQKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdWJSZXN1bHQucmVzdWx0ID09PSBjb25zdGFudHNfZGVmYXVsdC5OQSkge1xuICAgICAgICAgIGNvcHlUb0dyb3VwKHJlc3VsdE9iamVjdCwgc3ViUmVzdWx0LCBjb25zdGFudHNfZGVmYXVsdC5OQV9HUk9VUCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3RhbnRzX2RlZmF1bHQucmVzdWx0R3JvdXBzLmZvckVhY2goZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHN1YlJlc3VsdFtncm91cF0pICYmIHN1YlJlc3VsdFtncm91cF0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBjb3B5VG9Hcm91cChyZXN1bHRPYmplY3QsIHN1YlJlc3VsdCwgZ3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHRPYmplY3Q7XG4gICAgfVxuICAgIHZhciBhZ2dyZWdhdGVfcmVzdWx0X2RlZmF1bHQgPSBhZ2dyZWdhdGVSZXN1bHQ7XG4gICAgZnVuY3Rpb24gYXJlU3R5bGVzU2V0KGVsLCBzdHlsZXMsIHN0b3BBdCkge1xuICAgICAgdmFyIHN0eWwgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG4gICAgICBpZiAoIXN0eWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGF0dCA9IHN0eWxlc1tpXTtcbiAgICAgICAgaWYgKHN0eWwuZ2V0UHJvcGVydHlWYWx1ZShhdHQucHJvcGVydHkpID09PSBhdHQudmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFlbC5wYXJlbnROb2RlIHx8IGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09IHN0b3BBdC50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmVTdHlsZXNTZXQoZWwucGFyZW50Tm9kZSwgc3R5bGVzLCBzdG9wQXQpO1xuICAgIH1cbiAgICB2YXIgYXJlX3N0eWxlc19zZXRfZGVmYXVsdCA9IGFyZVN0eWxlc1NldDtcbiAgICBmdW5jdGlvbiBhc3NlcnQoYm9vbCwgbWVzc2FnZSkge1xuICAgICAgaWYgKCFib29sKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGFzc2VydF9kZWZhdWx0ID0gYXNzZXJ0O1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodGhpbmcpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGluZyk7XG4gICAgfVxuICAgIHZhciB0b19hcnJheV9kZWZhdWx0ID0gdG9BcnJheTtcbiAgICBmdW5jdGlvbiBlc2NhcGVTZWxlY3Rvcih2YWx1ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh2YWx1ZSk7XG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGNvZGVVbml0O1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgdmFyIGZpcnN0Q29kZVVuaXQgPSBzdHJpbmcuY2hhckNvZGVBdCgwKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNvZGVVbml0ID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICBpZiAoY29kZVVuaXQgPT0gMCkge1xuICAgICAgICAgIHJlc3VsdCArPSAnXFx1ZmZmZCc7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGVVbml0ID49IDEgJiYgY29kZVVuaXQgPD0gMzEgfHwgY29kZVVuaXQgPT0gMTI3IHx8IGluZGV4ID09IDAgJiYgY29kZVVuaXQgPj0gNDggJiYgY29kZVVuaXQgPD0gNTcgfHwgaW5kZXggPT0gMSAmJiBjb2RlVW5pdCA+PSA0OCAmJiBjb2RlVW5pdCA8PSA1NyAmJiBmaXJzdENvZGVVbml0ID09IDQ1KSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICdcXFxcJyArIGNvZGVVbml0LnRvU3RyaW5nKDE2KSArICcgJztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggPT0gMCAmJiBsZW5ndGggPT0gMSAmJiBjb2RlVW5pdCA9PSA0NSkge1xuICAgICAgICAgIHJlc3VsdCArPSAnXFxcXCcgKyBzdHJpbmcuY2hhckF0KGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZVVuaXQgPj0gMTI4IHx8IGNvZGVVbml0ID09IDQ1IHx8IGNvZGVVbml0ID09IDk1IHx8IGNvZGVVbml0ID49IDQ4ICYmIGNvZGVVbml0IDw9IDU3IHx8IGNvZGVVbml0ID49IDY1ICYmIGNvZGVVbml0IDw9IDkwIHx8IGNvZGVVbml0ID49IDk3ICYmIGNvZGVVbml0IDw9IDEyMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmcuY2hhckF0KGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gJ1xcXFwnICsgc3RyaW5nLmNoYXJBdChpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB2YXIgZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQgPSBlc2NhcGVTZWxlY3RvcjtcbiAgICBmdW5jdGlvbiBpc01vc3RseU51bWJlcnMoKSB7XG4gICAgICB2YXIgc3RyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgICAgIHJldHVybiBzdHIubGVuZ3RoICE9PSAwICYmIChzdHIubWF0Y2goL1swLTldL2cpIHx8ICcnKS5sZW5ndGggPj0gc3RyLmxlbmd0aCAvIDI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwbGl0U3RyaW5nKHN0ciwgc3BsaXRJbmRleCkge1xuICAgICAgcmV0dXJuIFsgc3RyLnN1YnN0cmluZygwLCBzcGxpdEluZGV4KSwgc3RyLnN1YnN0cmluZyhzcGxpdEluZGV4KSBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmltUmlnaHQoc3RyKSB7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xccyskLywgJycpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cmlQYXJzZXIodXJsKSB7XG4gICAgICB2YXIgb3JpZ2luYWwgPSB1cmw7XG4gICAgICB2YXIgcHJvdG9jb2wgPSAnJywgZG9tYWluID0gJycsIHBvcnQgPSAnJywgcGF0aCA9ICcnLCBxdWVyeSA9ICcnLCBoYXNoID0gJyc7XG4gICAgICBpZiAodXJsLmluY2x1ZGVzKCcjJykpIHtcbiAgICAgICAgdmFyIF9zcGxpdFN0cmluZyA9IHNwbGl0U3RyaW5nKHVybCwgdXJsLmluZGV4T2YoJyMnKSk7XG4gICAgICAgIHZhciBfc3BsaXRTdHJpbmcyID0gX3NsaWNlZFRvQXJyYXkoX3NwbGl0U3RyaW5nLCAyKTtcbiAgICAgICAgdXJsID0gX3NwbGl0U3RyaW5nMlswXTtcbiAgICAgICAgaGFzaCA9IF9zcGxpdFN0cmluZzJbMV07XG4gICAgICB9XG4gICAgICBpZiAodXJsLmluY2x1ZGVzKCc/JykpIHtcbiAgICAgICAgdmFyIF9zcGxpdFN0cmluZzMgPSBzcGxpdFN0cmluZyh1cmwsIHVybC5pbmRleE9mKCc/JykpO1xuICAgICAgICB2YXIgX3NwbGl0U3RyaW5nNCA9IF9zbGljZWRUb0FycmF5KF9zcGxpdFN0cmluZzMsIDIpO1xuICAgICAgICB1cmwgPSBfc3BsaXRTdHJpbmc0WzBdO1xuICAgICAgICBxdWVyeSA9IF9zcGxpdFN0cmluZzRbMV07XG4gICAgICB9XG4gICAgICBpZiAodXJsLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgICB2YXIgX3VybCRzcGxpdCA9IHVybC5zcGxpdCgnOi8vJyk7XG4gICAgICAgIHZhciBfdXJsJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF91cmwkc3BsaXQsIDIpO1xuICAgICAgICBwcm90b2NvbCA9IF91cmwkc3BsaXQyWzBdO1xuICAgICAgICB1cmwgPSBfdXJsJHNwbGl0MlsxXTtcbiAgICAgICAgdmFyIF9zcGxpdFN0cmluZzUgPSBzcGxpdFN0cmluZyh1cmwsIHVybC5pbmRleE9mKCcvJykpO1xuICAgICAgICB2YXIgX3NwbGl0U3RyaW5nNiA9IF9zbGljZWRUb0FycmF5KF9zcGxpdFN0cmluZzUsIDIpO1xuICAgICAgICBkb21haW4gPSBfc3BsaXRTdHJpbmc2WzBdO1xuICAgICAgICB1cmwgPSBfc3BsaXRTdHJpbmc2WzFdO1xuICAgICAgfSBlbHNlIGlmICh1cmwuc3Vic3RyKDAsIDIpID09PSAnLy8nKSB7XG4gICAgICAgIHVybCA9IHVybC5zdWJzdHIoMik7XG4gICAgICAgIHZhciBfc3BsaXRTdHJpbmc3ID0gc3BsaXRTdHJpbmcodXJsLCB1cmwuaW5kZXhPZignLycpKTtcbiAgICAgICAgdmFyIF9zcGxpdFN0cmluZzggPSBfc2xpY2VkVG9BcnJheShfc3BsaXRTdHJpbmc3LCAyKTtcbiAgICAgICAgZG9tYWluID0gX3NwbGl0U3RyaW5nOFswXTtcbiAgICAgICAgdXJsID0gX3NwbGl0U3RyaW5nOFsxXTtcbiAgICAgIH1cbiAgICAgIGlmIChkb21haW4uc3Vic3RyKDAsIDQpID09PSAnd3d3LicpIHtcbiAgICAgICAgZG9tYWluID0gZG9tYWluLnN1YnN0cig0KTtcbiAgICAgIH1cbiAgICAgIGlmIChkb21haW4gJiYgZG9tYWluLmluY2x1ZGVzKCc6JykpIHtcbiAgICAgICAgdmFyIF9zcGxpdFN0cmluZzkgPSBzcGxpdFN0cmluZyhkb21haW4sIGRvbWFpbi5pbmRleE9mKCc6JykpO1xuICAgICAgICB2YXIgX3NwbGl0U3RyaW5nMTAgPSBfc2xpY2VkVG9BcnJheShfc3BsaXRTdHJpbmc5LCAyKTtcbiAgICAgICAgZG9tYWluID0gX3NwbGl0U3RyaW5nMTBbMF07XG4gICAgICAgIHBvcnQgPSBfc3BsaXRTdHJpbmcxMFsxXTtcbiAgICAgIH1cbiAgICAgIHBhdGggPSB1cmw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcmlnaW5hbDogb3JpZ2luYWwsXG4gICAgICAgIHByb3RvY29sOiBwcm90b2NvbCxcbiAgICAgICAgZG9tYWluOiBkb21haW4sXG4gICAgICAgIHBvcnQ6IHBvcnQsXG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgaGFzaDogaGFzaFxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RnJpZW5kbHlVcmlFbmQoKSB7XG4gICAgICB2YXIgdXJpID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIGlmICh1cmkubGVuZ3RoIDw9IDEgfHwgdXJpLnN1YnN0cigwLCA1KSA9PT0gJ2RhdGE6JyB8fCB1cmkuc3Vic3RyKDAsIDExKSA9PT0gJ2phdmFzY3JpcHQ6JyB8fCB1cmkuaW5jbHVkZXMoJz8nKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY3VycmVudERvbWFpbiA9IG9wdGlvbnMuY3VycmVudERvbWFpbiwgX29wdGlvbnMkbWF4TGVuZ3RoID0gb3B0aW9ucy5tYXhMZW5ndGgsIG1heExlbmd0aCA9IF9vcHRpb25zJG1heExlbmd0aCA9PT0gdm9pZCAwID8gMjUgOiBfb3B0aW9ucyRtYXhMZW5ndGg7XG4gICAgICB2YXIgX3VyaVBhcnNlciA9IHVyaVBhcnNlcih1cmkpLCBwYXRoID0gX3VyaVBhcnNlci5wYXRoLCBkb21haW4gPSBfdXJpUGFyc2VyLmRvbWFpbiwgaGFzaCA9IF91cmlQYXJzZXIuaGFzaDtcbiAgICAgIHZhciBwYXRoRW5kID0gcGF0aC5zdWJzdHIocGF0aC5zdWJzdHIoMCwgcGF0aC5sZW5ndGggLSAyKS5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICBpZiAoaGFzaCkge1xuICAgICAgICBpZiAocGF0aEVuZCAmJiAocGF0aEVuZCArIGhhc2gpLmxlbmd0aCA8PSBtYXhMZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdHJpbVJpZ2h0KHBhdGhFbmQgKyBoYXNoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXRoRW5kLmxlbmd0aCA8IDIgJiYgaGFzaC5sZW5ndGggPiAyICYmIGhhc2gubGVuZ3RoIDw9IG1heExlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB0cmltUmlnaHQoaGFzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRvbWFpbiAmJiBkb21haW4ubGVuZ3RoIDwgbWF4TGVuZ3RoICYmIHBhdGgubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIHRyaW1SaWdodChkb21haW4gKyBwYXRoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXRoID09PSAnLycgKyBwYXRoRW5kICYmIGRvbWFpbiAmJiBjdXJyZW50RG9tYWluICYmIGRvbWFpbiAhPT0gY3VycmVudERvbWFpbiAmJiAoZG9tYWluICsgcGF0aCkubGVuZ3RoIDw9IG1heExlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJpbVJpZ2h0KGRvbWFpbiArIHBhdGgpO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3REb3RJbmRleCA9IHBhdGhFbmQubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIGlmICgobGFzdERvdEluZGV4ID09PSAtMSB8fCBsYXN0RG90SW5kZXggPiAxKSAmJiAobGFzdERvdEluZGV4ICE9PSAtMSB8fCBwYXRoRW5kLmxlbmd0aCA+IDIpICYmIHBhdGhFbmQubGVuZ3RoIDw9IG1heExlbmd0aCAmJiAhcGF0aEVuZC5tYXRjaCgvaW5kZXgoXFwuW2EtekEtWl17Mi00fSk/LykgJiYgIWlzTW9zdGx5TnVtYmVycyhwYXRoRW5kKSkge1xuICAgICAgICByZXR1cm4gdHJpbVJpZ2h0KHBhdGhFbmQpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZ2V0X2ZyaWVuZGx5X3VyaV9lbmRfZGVmYXVsdCA9IGdldEZyaWVuZGx5VXJpRW5kO1xuICAgIGZ1bmN0aW9uIGdldE5vZGVBdHRyaWJ1dGVzKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXMgaW5zdGFuY2VvZiB3aW5kb3cuTmFtZWROb2RlTWFwKSB7XG4gICAgICAgIHJldHVybiBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZS5jbG9uZU5vZGUoZmFsc2UpLmF0dHJpYnV0ZXM7XG4gICAgfVxuICAgIHZhciBnZXRfbm9kZV9hdHRyaWJ1dGVzX2RlZmF1bHQgPSBnZXROb2RlQXR0cmlidXRlcztcbiAgICB2YXIgbWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWV0aG9kO1xuICAgICAgZnVuY3Rpb24gZ2V0TWV0aG9kKG5vZGUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZXMgPSBbICdtYXRjaGVzJywgJ21hdGNoZXNTZWxlY3RvcicsICdtb3pNYXRjaGVzU2VsZWN0b3InLCAnd2Via2l0TWF0Y2hlc1NlbGVjdG9yJywgJ21zTWF0Y2hlc1NlbGVjdG9yJyBdO1xuICAgICAgICB2YXIgbGVuZ3RoID0gY2FuZGlkYXRlcy5sZW5ndGg7XG4gICAgICAgIHZhciBpbmRleCwgY2FuZGlkYXRlO1xuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBjYW5kaWRhdGUgPSBjYW5kaWRhdGVzW2luZGV4XTtcbiAgICAgICAgICBpZiAobm9kZVtjYW5kaWRhdGVdKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUsIHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICghbWV0aG9kIHx8ICFub2RlW21ldGhvZF0pIHtcbiAgICAgICAgICBtZXRob2QgPSBnZXRNZXRob2Qobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVbbWV0aG9kXSkge1xuICAgICAgICAgIHJldHVybiBub2RlW21ldGhvZF0oc2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgfSgpO1xuICAgIHZhciBlbGVtZW50X21hdGNoZXNfZGVmYXVsdCA9IG1hdGNoZXNTZWxlY3RvcjtcbiAgICB2YXIgaW1wb3J0X21lbW9pemVlID0gX190b01vZHVsZShyZXF1aXJlX21lbW9pemVlKCkpO1xuICAgIGF4ZS5fbWVtb2l6ZWRGbnMgPSBbXTtcbiAgICBmdW5jdGlvbiBtZW1vaXplSW1wbGVtZW50YXRpb24oZm4pIHtcbiAgICAgIHZhciBtZW1vaXplZCA9ICgwLCBpbXBvcnRfbWVtb2l6ZWVbJ2RlZmF1bHQnXSkoZm4pO1xuICAgICAgYXhlLl9tZW1vaXplZEZucy5wdXNoKG1lbW9pemVkKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG4gICAgdmFyIG1lbW9pemVfZGVmYXVsdCA9IG1lbW9pemVJbXBsZW1lbnRhdGlvbjtcbiAgICB2YXIgaXNYSFRNTCA9IG1lbW9pemVfZGVmYXVsdChmdW5jdGlvbihkb2MpIHtcbiAgICAgIGlmICghKGRvYyAhPT0gbnVsbCAmJiBkb2MgIT09IHZvaWQgMCAmJiBkb2MuY3JlYXRlRWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvYy5jcmVhdGVFbGVtZW50KCdBJykubG9jYWxOYW1lID09PSAnQSc7XG4gICAgfSk7XG4gICAgdmFyIGlzX3hodG1sX2RlZmF1bHQgPSBpc1hIVE1MO1xuICAgIGZ1bmN0aW9uIF9nZXRTaGFkb3dTZWxlY3RvcihnZW5lcmF0ZVNlbGVjdG9yMiwgZWxtKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICBpZiAoIWVsbSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgZG9jID0gZWxtLmdldFJvb3ROb2RlICYmIGVsbS5nZXRSb290Tm9kZSgpIHx8IGRvY3VtZW50O1xuICAgICAgaWYgKGRvYy5ub2RlVHlwZSAhPT0gMTEpIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlU2VsZWN0b3IyKGVsbSwgb3B0aW9ucywgZG9jKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFjayA9IFtdO1xuICAgICAgd2hpbGUgKGRvYy5ub2RlVHlwZSA9PT0gMTEpIHtcbiAgICAgICAgaWYgKCFkb2MuaG9zdCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICBzdGFjay51bnNoaWZ0KHtcbiAgICAgICAgICBlbG06IGVsbSxcbiAgICAgICAgICBkb2M6IGRvY1xuICAgICAgICB9KTtcbiAgICAgICAgZWxtID0gZG9jLmhvc3Q7XG4gICAgICAgIGRvYyA9IGVsbS5nZXRSb290Tm9kZSgpO1xuICAgICAgfVxuICAgICAgc3RhY2sudW5zaGlmdCh7XG4gICAgICAgIGVsbTogZWxtLFxuICAgICAgICBkb2M6IGRvY1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3RhY2subWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlU2VsZWN0b3IyKGl0ZW0uZWxtLCBvcHRpb25zLCBpdGVtLmRvYyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGlnbm9yZWRBdHRyaWJ1dGVzID0gWyAnY2xhc3MnLCAnc3R5bGUnLCAnaWQnLCAnc2VsZWN0ZWQnLCAnY2hlY2tlZCcsICdkaXNhYmxlZCcsICd0YWJpbmRleCcsICdhcmlhLWNoZWNrZWQnLCAnYXJpYS1zZWxlY3RlZCcsICdhcmlhLWludmFsaWQnLCAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtYnVzeScsICdhcmlhLWRpc2FibGVkJywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1ncmFiYmVkJywgJ2FyaWEtcHJlc3NlZCcsICdhcmlhLXZhbHVlbm93JywgJ3htbG5zJyBdO1xuICAgIHZhciBNQVhBVFRSSUJVVEVMRU5HVEggPSAzMTtcbiAgICB2YXIgYXR0ckNoYXJzUmVnZXggPSAvKFtcXFxcXCJdKS9nO1xuICAgIHZhciBuZXdsaW5lQ2hhcnMgPSAvKFxcclxcbnxcXHJ8XFxuKS9nO1xuICAgIGZ1bmN0aW9uIGVzY2FwZUF0dHJpYnV0ZShzdHIpIHtcbiAgICAgIHJldHVybiBzdHIucmVwbGFjZShhdHRyQ2hhcnNSZWdleCwgJ1xcXFwkMScpLnJlcGxhY2UobmV3bGluZUNoYXJzLCAnXFxcXGEgJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEF0dHJpYnV0ZU5hbWVWYWx1ZShub2RlLCBhdCkge1xuICAgICAgdmFyIG5hbWUgPSBhdC5uYW1lO1xuICAgICAgdmFyIGF0bnY7XG4gICAgICBpZiAobmFtZS5pbmRleE9mKCdocmVmJykgIT09IC0xIHx8IG5hbWUuaW5kZXhPZignc3JjJykgIT09IC0xKSB7XG4gICAgICAgIHZhciBmcmllbmRseSA9IGdldF9mcmllbmRseV91cmlfZW5kX2RlZmF1bHQobm9kZS5nZXRBdHRyaWJ1dGUobmFtZSkpO1xuICAgICAgICBpZiAoZnJpZW5kbHkpIHtcbiAgICAgICAgICBhdG52ID0gZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQoYXQubmFtZSkgKyAnJD1cIicgKyBlc2NhcGVBdHRyaWJ1dGUoZnJpZW5kbHkpICsgJ1wiJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdG52ID0gZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQoYXQubmFtZSkgKyAnPVwiJyArIGVzY2FwZUF0dHJpYnV0ZShub2RlLmdldEF0dHJpYnV0ZShuYW1lKSkgKyAnXCInO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdG52ID0gZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQobmFtZSkgKyAnPVwiJyArIGVzY2FwZUF0dHJpYnV0ZShhdC52YWx1ZSkgKyAnXCInO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGF0bnY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvdW50U29ydChhMiwgYjIpIHtcbiAgICAgIHJldHVybiBhMi5jb3VudCA8IGIyLmNvdW50ID8gLTEgOiBhMi5jb3VudCA9PT0gYjIuY291bnQgPyAwIDogMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlsdGVyQXR0cmlidXRlcyhhdCkge1xuICAgICAgcmV0dXJuICFpZ25vcmVkQXR0cmlidXRlcy5pbmNsdWRlcyhhdC5uYW1lKSAmJiBhdC5uYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgJiYgKCFhdC52YWx1ZSB8fCBhdC52YWx1ZS5sZW5ndGggPCBNQVhBVFRSSUJVVEVMRU5HVEgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZ2V0U2VsZWN0b3JEYXRhKGRvbVRyZWUpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBjbGFzc2VzOiB7fSxcbiAgICAgICAgdGFnczoge30sXG4gICAgICAgIGF0dHJpYnV0ZXM6IHt9XG4gICAgICB9O1xuICAgICAgZG9tVHJlZSA9IEFycmF5LmlzQXJyYXkoZG9tVHJlZSkgPyBkb21UcmVlIDogWyBkb21UcmVlIF07XG4gICAgICB2YXIgY3VycmVudExldmVsID0gZG9tVHJlZS5zbGljZSgpO1xuICAgICAgdmFyIHN0YWNrID0gW107XG4gICAgICB2YXIgX2xvb3AyID0gZnVuY3Rpb24gX2xvb3AyKCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IGN1cnJlbnRMZXZlbC5wb3AoKTtcbiAgICAgICAgdmFyIG5vZGUgPSBjdXJyZW50LmFjdHVhbE5vZGU7XG4gICAgICAgIGlmICghIW5vZGUucXVlcnlTZWxlY3RvckFsbCkge1xuICAgICAgICAgIHZhciB0YWcgPSBub2RlLm5vZGVOYW1lO1xuICAgICAgICAgIGlmIChkYXRhLnRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgZGF0YS50YWdzW3RhZ10rKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YS50YWdzW3RhZ10gPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIEFycmF5LmZyb20obm9kZS5jbGFzc0xpc3QpLmZvckVhY2goZnVuY3Rpb24oY2wpIHtcbiAgICAgICAgICAgICAgdmFyIGluZCA9IGVzY2FwZV9zZWxlY3Rvcl9kZWZhdWx0KGNsKTtcbiAgICAgICAgICAgICAgaWYgKGRhdGEuY2xhc3Nlc1tpbmRdKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5jbGFzc2VzW2luZF0rKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhLmNsYXNzZXNbaW5kXSA9IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgICAgIEFycmF5LmZyb20oZ2V0X25vZGVfYXR0cmlidXRlc19kZWZhdWx0KG5vZGUpKS5maWx0ZXIoZmlsdGVyQXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbihhdCkge1xuICAgICAgICAgICAgICB2YXIgYXRudiA9IGdldEF0dHJpYnV0ZU5hbWVWYWx1ZShub2RlLCBhdCk7XG4gICAgICAgICAgICAgIGlmIChhdG52KSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuYXR0cmlidXRlc1thdG52XSkge1xuICAgICAgICAgICAgICAgICAgZGF0YS5hdHRyaWJ1dGVzW2F0bnZdKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRhdGEuYXR0cmlidXRlc1thdG52XSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgc3RhY2sucHVzaChjdXJyZW50TGV2ZWwpO1xuICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IGN1cnJlbnQuY2hpbGRyZW4uc2xpY2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoIWN1cnJlbnRMZXZlbC5sZW5ndGggJiYgc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgY3VycmVudExldmVsID0gc3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB3aGlsZSAoY3VycmVudExldmVsLmxlbmd0aCkge1xuICAgICAgICBfbG9vcDIoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bmNvbW1vbkNsYXNzZXMobm9kZSwgc2VsZWN0b3JEYXRhKSB7XG4gICAgICB2YXIgcmV0VmFsID0gW107XG4gICAgICB2YXIgY2xhc3NEYXRhID0gc2VsZWN0b3JEYXRhLmNsYXNzZXM7XG4gICAgICB2YXIgdGFnRGF0YSA9IHNlbGVjdG9yRGF0YS50YWdzO1xuICAgICAgaWYgKG5vZGUuY2xhc3NMaXN0KSB7XG4gICAgICAgIEFycmF5LmZyb20obm9kZS5jbGFzc0xpc3QpLmZvckVhY2goZnVuY3Rpb24oY2wpIHtcbiAgICAgICAgICB2YXIgaW5kID0gZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQoY2wpO1xuICAgICAgICAgIGlmIChjbGFzc0RhdGFbaW5kXSA8IHRhZ0RhdGFbbm9kZS5ub2RlTmFtZV0pIHtcbiAgICAgICAgICAgIHJldFZhbC5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogaW5kLFxuICAgICAgICAgICAgICBjb3VudDogY2xhc3NEYXRhW2luZF0sXG4gICAgICAgICAgICAgIHNwZWNpZXM6ICdjbGFzcydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0VmFsLnNvcnQoY291bnRTb3J0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TnRoQ2hpbGRTdHJpbmcoZWxtLCBzZWxlY3Rvcikge1xuICAgICAgdmFyIHNpYmxpbmdzID0gZWxtLnBhcmVudE5vZGUgJiYgQXJyYXkuZnJvbShlbG0ucGFyZW50Tm9kZS5jaGlsZHJlbiB8fCAnJykgfHwgW107XG4gICAgICB2YXIgaGFzTWF0Y2hpbmdTaWJsaW5ncyA9IHNpYmxpbmdzLmZpbmQoZnVuY3Rpb24oc2libGluZykge1xuICAgICAgICByZXR1cm4gc2libGluZyAhPT0gZWxtICYmIGVsZW1lbnRfbWF0Y2hlc19kZWZhdWx0KHNpYmxpbmcsIHNlbGVjdG9yKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGhhc01hdGNoaW5nU2libGluZ3MpIHtcbiAgICAgICAgdmFyIG50aENoaWxkID0gMSArIHNpYmxpbmdzLmluZGV4T2YoZWxtKTtcbiAgICAgICAgcmV0dXJuICc6bnRoLWNoaWxkKCcgKyBudGhDaGlsZCArICcpJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RWxtSWQoZWxtKSB7XG4gICAgICBpZiAoIWVsbS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGRvYyA9IGVsbS5nZXRSb290Tm9kZSAmJiBlbG0uZ2V0Um9vdE5vZGUoKSB8fCBkb2N1bWVudDtcbiAgICAgIHZhciBpZCA9ICcjJyArIGVzY2FwZV9zZWxlY3Rvcl9kZWZhdWx0KGVsbS5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgJycpO1xuICAgICAgaWYgKCFpZC5tYXRjaCgvcGxheWVyX3VpZF8vKSAmJiBkb2MucXVlcnlTZWxlY3RvckFsbChpZCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0QmFzZVNlbGVjdG9yKGVsbSkge1xuICAgICAgdmFyIHhodG1sID0gaXNfeGh0bWxfZGVmYXVsdChkb2N1bWVudCk7XG4gICAgICByZXR1cm4gZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQoeGh0bWwgPyBlbG0ubG9jYWxOYW1lIDogZWxtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bmNvbW1vbkF0dHJpYnV0ZXMobm9kZSwgc2VsZWN0b3JEYXRhKSB7XG4gICAgICB2YXIgcmV0VmFsID0gW107XG4gICAgICB2YXIgYXR0RGF0YSA9IHNlbGVjdG9yRGF0YS5hdHRyaWJ1dGVzO1xuICAgICAgdmFyIHRhZ0RhdGEgPSBzZWxlY3RvckRhdGEudGFncztcbiAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZXMoKSkge1xuICAgICAgICBBcnJheS5mcm9tKGdldF9ub2RlX2F0dHJpYnV0ZXNfZGVmYXVsdChub2RlKSkuZmlsdGVyKGZpbHRlckF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24oYXQpIHtcbiAgICAgICAgICB2YXIgYXRudiA9IGdldEF0dHJpYnV0ZU5hbWVWYWx1ZShub2RlLCBhdCk7XG4gICAgICAgICAgaWYgKGF0bnYgJiYgYXR0RGF0YVthdG52XSA8IHRhZ0RhdGFbbm9kZS5ub2RlTmFtZV0pIHtcbiAgICAgICAgICAgIHJldFZhbC5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogYXRudixcbiAgICAgICAgICAgICAgY291bnQ6IGF0dERhdGFbYXRudl0sXG4gICAgICAgICAgICAgIHNwZWNpZXM6ICdhdHRyaWJ1dGUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldFZhbC5zb3J0KGNvdW50U29ydCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRocmVlTGVhc3RDb21tb25GZWF0dXJlcyhlbG0sIHNlbGVjdG9yRGF0YSkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gJyc7XG4gICAgICB2YXIgZmVhdHVyZXM7XG4gICAgICB2YXIgY2xzcyA9IHVuY29tbW9uQ2xhc3NlcyhlbG0sIHNlbGVjdG9yRGF0YSk7XG4gICAgICB2YXIgYXR0cyA9IHVuY29tbW9uQXR0cmlidXRlcyhlbG0sIHNlbGVjdG9yRGF0YSk7XG4gICAgICBpZiAoY2xzcy5sZW5ndGggJiYgY2xzc1swXS5jb3VudCA9PT0gMSkge1xuICAgICAgICBmZWF0dXJlcyA9IFsgY2xzc1swXSBdO1xuICAgICAgfSBlbHNlIGlmIChhdHRzLmxlbmd0aCAmJiBhdHRzWzBdLmNvdW50ID09PSAxKSB7XG4gICAgICAgIGZlYXR1cmVzID0gWyBhdHRzWzBdIF07XG4gICAgICAgIHNlbGVjdG9yID0gZ2V0QmFzZVNlbGVjdG9yKGVsbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZWF0dXJlcyA9IGNsc3MuY29uY2F0KGF0dHMpO1xuICAgICAgICBmZWF0dXJlcy5zb3J0KGNvdW50U29ydCk7XG4gICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuc2xpY2UoMCwgMyk7XG4gICAgICAgIGlmICghZmVhdHVyZXMuc29tZShmdW5jdGlvbihmZWF0KSB7XG4gICAgICAgICAgcmV0dXJuIGZlYXQuc3BlY2llcyA9PT0gJ2NsYXNzJztcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBzZWxlY3RvciA9IGdldEJhc2VTZWxlY3RvcihlbG0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZlYXR1cmVzLnNvcnQoZnVuY3Rpb24oYTIsIGIyKSB7XG4gICAgICAgICAgICByZXR1cm4gYTIuc3BlY2llcyAhPT0gYjIuc3BlY2llcyAmJiBhMi5zcGVjaWVzID09PSAnY2xhc3MnID8gLTEgOiBhMi5zcGVjaWVzID09PSBiMi5zcGVjaWVzID8gMCA6IDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3RvciArPSBmZWF0dXJlcy5yZWR1Y2UoZnVuY3Rpb24odmFsLCBmZWF0KSB7XG4gICAgICAgIHN3aXRjaCAoZmVhdC5zcGVjaWVzKSB7XG4gICAgICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgICAgcmV0dXJuIHZhbCArICcuJyArIGZlYXQubmFtZTtcblxuICAgICAgICAgY2FzZSAnYXR0cmlidXRlJzpcbiAgICAgICAgICByZXR1cm4gdmFsICsgJ1snICsgZmVhdC5uYW1lICsgJ10nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9LCAnJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlU2VsZWN0b3IoZWxtLCBvcHRpb25zLCBkb2MpIHtcbiAgICAgIGlmICghYXhlLl9zZWxlY3RvckRhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3QgYXhlLl9zZWxlY3RvckRhdGEgdG8gYmUgc2V0IHVwJyk7XG4gICAgICB9XG4gICAgICB2YXIgX29wdGlvbnMkdG9Sb290ID0gb3B0aW9ucy50b1Jvb3QsIHRvUm9vdCA9IF9vcHRpb25zJHRvUm9vdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR0b1Jvb3Q7XG4gICAgICB2YXIgc2VsZWN0b3I7XG4gICAgICB2YXIgc2ltaWxhcjtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gZ2V0RWxtSWQoZWxtKTtcbiAgICAgICAgaWYgKCFmZWF0dXJlcykge1xuICAgICAgICAgIGZlYXR1cmVzID0gZ2V0VGhyZWVMZWFzdENvbW1vbkZlYXR1cmVzKGVsbSwgYXhlLl9zZWxlY3RvckRhdGEpO1xuICAgICAgICAgIGZlYXR1cmVzICs9IGdldE50aENoaWxkU3RyaW5nKGVsbSwgZmVhdHVyZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIHNlbGVjdG9yID0gZmVhdHVyZXMgKyAnID4gJyArIHNlbGVjdG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdG9yID0gZmVhdHVyZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaW1pbGFyIHx8IHNpbWlsYXIubGVuZ3RoID4gY29uc3RhbnRzX2RlZmF1bHQuc2VsZWN0b3JTaW1pbGFyRmlsdGVyTGltaXQpIHtcbiAgICAgICAgICBzaW1pbGFyID0gZmluZFNpbWlsYXIoZG9jLCBzZWxlY3Rvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2ltaWxhciA9IHNpbWlsYXIuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50X21hdGNoZXNfZGVmYXVsdChpdGVtLCBzZWxlY3Rvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxtID0gZWxtLnBhcmVudEVsZW1lbnQ7XG4gICAgICB9IHdoaWxlICgoc2ltaWxhci5sZW5ndGggPiAxIHx8IHRvUm9vdCkgJiYgZWxtICYmIGVsbS5ub2RlVHlwZSAhPT0gMTEpO1xuICAgICAgaWYgKHNpbWlsYXIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IuaW5kZXhPZignID4gJykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiAnOnJvb3QnICsgc2VsZWN0b3Iuc3Vic3RyaW5nKHNlbGVjdG9yLmluZGV4T2YoJyA+ICcpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnOnJvb3QnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcihlbG0sIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfZ2V0U2hhZG93U2VsZWN0b3IoZ2VuZXJhdGVTZWxlY3RvciwgZWxtLCBvcHRpb25zKTtcbiAgICB9XG4gICAgdmFyIGdldF9zZWxlY3Rvcl9kZWZhdWx0ID0gbWVtb2l6ZV9kZWZhdWx0KGdldFNlbGVjdG9yKTtcbiAgICB2YXIgZmluZFNpbWlsYXIgPSBtZW1vaXplX2RlZmF1bHQoZnVuY3Rpb24oZG9jLCBzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20oZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUFuY2VzdHJ5KG5vZGUpIHtcbiAgICAgIHZhciBub2RlTmFtZTIgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcGFyZW50RWxlbWVudCA9IG5vZGUucGFyZW50RWxlbWVudDtcbiAgICAgIHZhciBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgdmFyIG50aENoaWxkID0gJyc7XG4gICAgICBpZiAobm9kZU5hbWUyICE9PSAnaGVhZCcgJiYgbm9kZU5hbWUyICE9PSAnYm9keScgJiYgKHBhcmVudE5vZGUgPT09IG51bGwgfHwgcGFyZW50Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50Tm9kZS5jaGlsZHJlbi5sZW5ndGgpID4gMSkge1xuICAgICAgICB2YXIgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHBhcmVudE5vZGUuY2hpbGRyZW4sIG5vZGUpICsgMTtcbiAgICAgICAgbnRoQ2hpbGQgPSAnOm50aC1jaGlsZCgnLmNvbmNhdChpbmRleCwgJyknKTtcbiAgICAgIH1cbiAgICAgIGlmICghcGFyZW50RWxlbWVudCkge1xuICAgICAgICByZXR1cm4gbm9kZU5hbWUyICsgbnRoQ2hpbGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZ2VuZXJhdGVBbmNlc3RyeShwYXJlbnRFbGVtZW50KSArICcgPiAnICsgbm9kZU5hbWUyICsgbnRoQ2hpbGQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9nZXRBbmNlc3RyeShlbG0sIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfZ2V0U2hhZG93U2VsZWN0b3IoZ2VuZXJhdGVBbmNlc3RyeSwgZWxtLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0WFBhdGhBcnJheShub2RlLCBwYXRoKSB7XG4gICAgICB2YXIgc2libGluZywgY291bnQ7XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFwYXRoICYmIG5vZGUubm9kZVR5cGUgPT09IDkpIHtcbiAgICAgICAgcGF0aCA9IFsge1xuICAgICAgICAgIHN0cjogJ2h0bWwnXG4gICAgICAgIH0gXTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9XG4gICAgICBwYXRoID0gcGF0aCB8fCBbXTtcbiAgICAgIGlmIChub2RlLnBhcmVudE5vZGUgJiYgbm9kZS5wYXJlbnROb2RlICE9PSBub2RlKSB7XG4gICAgICAgIHBhdGggPSBnZXRYUGF0aEFycmF5KG5vZGUucGFyZW50Tm9kZSwgcGF0aCk7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5wcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgY291bnQgPSAxO1xuICAgICAgICBzaWJsaW5nID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoc2libGluZy5ub2RlVHlwZSA9PT0gMSAmJiBzaWJsaW5nLm5vZGVOYW1lID09PSBub2RlLm5vZGVOYW1lKSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzaWJsaW5nID0gc2libGluZy5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIH0gd2hpbGUgKHNpYmxpbmcpO1xuICAgICAgICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgICAgICBjb3VudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgICBzaWJsaW5nID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmIChzaWJsaW5nLm5vZGVUeXBlID09PSAxICYmIHNpYmxpbmcubm9kZU5hbWUgPT09IG5vZGUubm9kZU5hbWUpIHtcbiAgICAgICAgICAgIGNvdW50ID0gMTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb3VudCA9IG51bGw7XG4gICAgICAgICAgICBzaWJsaW5nID0gc2libGluZy5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChzaWJsaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0ge307XG4gICAgICAgIGVsZW1lbnQuc3RyID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgaWQgPSBub2RlLmdldEF0dHJpYnV0ZSAmJiBlc2NhcGVfc2VsZWN0b3JfZGVmYXVsdChub2RlLmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgICAgIGlmIChpZCAmJiBub2RlLm93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnIycgKyBpZCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgZWxlbWVudC5pZCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudCA+IDEpIHtcbiAgICAgICAgICBlbGVtZW50LmNvdW50ID0gY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcGF0aC5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHhwYXRoVG9TdHJpbmcoeHBhdGhBcnJheSkge1xuICAgICAgcmV0dXJuIHhwYXRoQXJyYXkucmVkdWNlKGZ1bmN0aW9uKHN0ciwgZWxtKSB7XG4gICAgICAgIGlmIChlbG0uaWQpIHtcbiAgICAgICAgICByZXR1cm4gJy8nLmNvbmNhdChlbG0uc3RyLCAnW0BpZD1cXCcnKS5jb25jYXQoZWxtLmlkLCAnXFwnXScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzdHIgKyAnLycuY29uY2F0KGVsbS5zdHIpICsgKGVsbS5jb3VudCA+IDAgPyAnWycuY29uY2F0KGVsbS5jb3VudCwgJ10nKSA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfSwgJycpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRYcGF0aChub2RlKSB7XG4gICAgICB2YXIgeHBhdGhBcnJheSA9IGdldFhQYXRoQXJyYXkobm9kZSk7XG4gICAgICByZXR1cm4geHBhdGhUb1N0cmluZyh4cGF0aEFycmF5KTtcbiAgICB9XG4gICAgdmFyIGdldF94cGF0aF9kZWZhdWx0ID0gZ2V0WHBhdGg7XG4gICAgdmFyIF9jYWNoZSA9IHt9O1xuICAgIHZhciBjYWNoZSA9IHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFsaWRhdGVLZXkoa2V5KTtcbiAgICAgICAgX2NhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXksIGNyZWF0b3IpIHtcbiAgICAgICAgdmFsaWRhdGVDcmVhdG9yKGNyZWF0b3IpO1xuICAgICAgICBpZiAoa2V5IGluIF9jYWNoZSkge1xuICAgICAgICAgIHJldHVybiBfY2FjaGVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjcmVhdG9yKCk7XG4gICAgICAgICAgYXNzZXJ0X2RlZmF1bHQodmFsdWUgIT09IHZvaWQgMCwgJ0NhY2hlIGNyZWF0b3IgZnVuY3Rpb24gc2hvdWxkIG5vdCByZXR1cm4gdW5kZWZpbmVkJyk7XG4gICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIF9jYWNoZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBfY2FjaGUgPSB7fTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlS2V5KGtleSkge1xuICAgICAgYXNzZXJ0X2RlZmF1bHQodHlwZW9mIGtleSA9PT0gJ3N0cmluZycsICdrZXkgbXVzdCBiZSBhIHN0cmluZywgJyArIF90eXBlb2Yoa2V5KSArICcgZ2l2ZW4nKTtcbiAgICAgIGFzc2VydF9kZWZhdWx0KGtleSAhPT0gJycsICdrZXkgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVDcmVhdG9yKGNyZWF0b3IpIHtcbiAgICAgIGFzc2VydF9kZWZhdWx0KHR5cGVvZiBjcmVhdG9yID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBjcmVhdG9yID09PSAndW5kZWZpbmVkJywgJ2NyZWF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZCwgJyArIF90eXBlb2YoY3JlYXRvcikgKyAnIGdpdmVuJyk7XG4gICAgfVxuICAgIHZhciBjYWNoZV9kZWZhdWx0ID0gY2FjaGU7XG4gICAgZnVuY3Rpb24gZ2V0Tm9kZUZyb21UcmVlKHZOb2RlLCBub2RlKSB7XG4gICAgICB2YXIgZWwgPSBub2RlIHx8IHZOb2RlO1xuICAgICAgcmV0dXJuIGNhY2hlX2RlZmF1bHQuZ2V0KCdub2RlTWFwJykgPyBjYWNoZV9kZWZhdWx0LmdldCgnbm9kZU1hcCcpLmdldChlbCkgOiBudWxsO1xuICAgIH1cbiAgICB2YXIgZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQgPSBnZXROb2RlRnJvbVRyZWU7XG4gICAgdmFyIENBQ0hFX0tFWSA9ICdEcUVsbS5SdW5PcHRpb25zJztcbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHIsIG1heExlbmd0aCkge1xuICAgICAgbWF4TGVuZ3RoID0gbWF4TGVuZ3RoIHx8IDMwMDtcbiAgICAgIGlmIChzdHIubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHN0ci5pbmRleE9mKCc+Jyk7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNvdXJjZShlbGVtZW50KSB7XG4gICAgICBpZiAoIShlbGVtZW50ICE9PSBudWxsICYmIGVsZW1lbnQgIT09IHZvaWQgMCAmJiBlbGVtZW50Lm91dGVySFRNTCkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgdmFyIHNvdXJjZSA9IGVsZW1lbnQub3V0ZXJIVE1MO1xuICAgICAgaWYgKCFzb3VyY2UgJiYgdHlwZW9mIHdpbmRvdy5YTUxTZXJpYWxpemVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNvdXJjZSA9IG5ldyB3aW5kb3cuWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydW5jYXRlKHNvdXJjZSB8fCAnJyk7XG4gICAgfVxuICAgIHZhciBEcUVsZW1lbnQgPSBtZW1vaXplX2RlZmF1bHQoZnVuY3Rpb24gRHFFbGVtZW50MihlbG0sIG9wdGlvbnMsIHNwZWMpIHtcbiAgICAgIHZhciBfb3B0aW9ucywgX3NwZWMsIF90aGlzJHNwZWMkc2VsZWN0b3IsIF90aGlzJF92aXJ0dWFsTm9kZTtcbiAgICAgIChfb3B0aW9ucyA9IG9wdGlvbnMpICE9PSBudWxsICYmIF9vcHRpb25zICE9PSB2b2lkIDAgPyBfb3B0aW9ucyA6IG9wdGlvbnMgPSBudWxsO1xuICAgICAgKF9zcGVjID0gc3BlYykgIT09IG51bGwgJiYgX3NwZWMgIT09IHZvaWQgMCA/IF9zcGVjIDogc3BlYyA9IHt9O1xuICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIHZhciBfY2FjaGVfZGVmYXVsdCRnZXQ7XG4gICAgICAgIG9wdGlvbnMgPSAoX2NhY2hlX2RlZmF1bHQkZ2V0ID0gY2FjaGVfZGVmYXVsdC5nZXQoQ0FDSEVfS0VZKSkgIT09IG51bGwgJiYgX2NhY2hlX2RlZmF1bHQkZ2V0ICE9PSB2b2lkIDAgPyBfY2FjaGVfZGVmYXVsdCRnZXQgOiB7fTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gICAgICBpZiAoZWxtIGluc3RhbmNlb2YgYWJzdHJhY3RfdmlydHVhbF9ub2RlX2RlZmF1bHQpIHtcbiAgICAgICAgdGhpcy5fdmlydHVhbE5vZGUgPSBlbG07XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbG0uYWN0dWFsTm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbG07XG4gICAgICAgIHRoaXMuX3ZpcnR1YWxOb2RlID0gZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQoZWxtKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZnJvbUZyYW1lID0gKChfdGhpcyRzcGVjJHNlbGVjdG9yID0gdGhpcy5zcGVjLnNlbGVjdG9yKSA9PT0gbnVsbCB8fCBfdGhpcyRzcGVjJHNlbGVjdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRzcGVjJHNlbGVjdG9yLmxlbmd0aCkgPiAxO1xuICAgICAgdGhpcy5faW5jbHVkZUVsZW1lbnRJbkpzb24gPSBvcHRpb25zLmVsZW1lbnRSZWY7XG4gICAgICBpZiAob3B0aW9ucy5hYnNvbHV0ZVBhdGhzKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgICAgICAgdG9Sb290OiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB0aGlzLm5vZGVJbmRleGVzID0gW107XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnNwZWMubm9kZUluZGV4ZXMpKSB7XG4gICAgICAgIHRoaXMubm9kZUluZGV4ZXMgPSB0aGlzLnNwZWMubm9kZUluZGV4ZXM7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiAoKF90aGlzJF92aXJ0dWFsTm9kZSA9IHRoaXMuX3ZpcnR1YWxOb2RlKSA9PT0gbnVsbCB8fCBfdGhpcyRfdmlydHVhbE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJF92aXJ0dWFsTm9kZS5ub2RlSW5kZXgpID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLm5vZGVJbmRleGVzID0gWyB0aGlzLl92aXJ0dWFsTm9kZS5ub2RlSW5kZXggXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICAgIGlmICghYXhlLl9hdWRpdC5ub0h0bWwpIHtcbiAgICAgICAgdmFyIF90aGlzJHNwZWMkc291cmNlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IChfdGhpcyRzcGVjJHNvdXJjZSA9IHRoaXMuc3BlYy5zb3VyY2UpICE9PSBudWxsICYmIF90aGlzJHNwZWMkc291cmNlICE9PSB2b2lkIDAgPyBfdGhpcyRzcGVjJHNvdXJjZSA6IGdldFNvdXJjZSh0aGlzLl9lbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pO1xuICAgIERxRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgICBnZXQgc2VsZWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwZWMuc2VsZWN0b3IgfHwgWyBnZXRfc2VsZWN0b3JfZGVmYXVsdCh0aGlzLmVsZW1lbnQsIHRoaXMuX29wdGlvbnMpIF07XG4gICAgICB9LFxuICAgICAgZ2V0IGFuY2VzdHJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGVjLmFuY2VzdHJ5IHx8IFsgX2dldEFuY2VzdHJ5KHRoaXMuZWxlbWVudCkgXTtcbiAgICAgIH0sXG4gICAgICBnZXQgeHBhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwZWMueHBhdGggfHwgWyBnZXRfeHBhdGhfZGVmYXVsdCh0aGlzLmVsZW1lbnQpIF07XG4gICAgICB9LFxuICAgICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgICAgfSxcbiAgICAgIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICB2YXIgc3BlYyA9IHtcbiAgICAgICAgICBzZWxlY3RvcjogdGhpcy5zZWxlY3RvcixcbiAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlLFxuICAgICAgICAgIHhwYXRoOiB0aGlzLnhwYXRoLFxuICAgICAgICAgIGFuY2VzdHJ5OiB0aGlzLmFuY2VzdHJ5LFxuICAgICAgICAgIG5vZGVJbmRleGVzOiB0aGlzLm5vZGVJbmRleGVzLFxuICAgICAgICAgIGZyb21GcmFtZTogdGhpcy5mcm9tRnJhbWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuX2luY2x1ZGVFbGVtZW50SW5Kc29uKSB7XG4gICAgICAgICAgc3BlYy5lbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BlYztcbiAgICAgIH1cbiAgICB9O1xuICAgIERxRWxlbWVudC5mcm9tRnJhbWUgPSBmdW5jdGlvbiBmcm9tRnJhbWUobm9kZSwgb3B0aW9ucywgZnJhbWUpIHtcbiAgICAgIHZhciBzcGVjID0gRHFFbGVtZW50Lm1lcmdlU3BlY3Mobm9kZSwgZnJhbWUpO1xuICAgICAgcmV0dXJuIG5ldyBEcUVsZW1lbnQoZnJhbWUuZWxlbWVudCwgb3B0aW9ucywgc3BlYyk7XG4gICAgfTtcbiAgICBEcUVsZW1lbnQubWVyZ2VTcGVjcyA9IGZ1bmN0aW9uIG1lcmdlU3BlY3MoY2hpbGQsIHBhcmVudEZyYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNoaWxkLCB7XG4gICAgICAgIHNlbGVjdG9yOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHBhcmVudEZyYW1lLnNlbGVjdG9yKSwgX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkLnNlbGVjdG9yKSksXG4gICAgICAgIGFuY2VzdHJ5OiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHBhcmVudEZyYW1lLmFuY2VzdHJ5KSwgX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkLmFuY2VzdHJ5KSksXG4gICAgICAgIHhwYXRoOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHBhcmVudEZyYW1lLnhwYXRoKSwgX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkLnhwYXRoKSksXG4gICAgICAgIG5vZGVJbmRleGVzOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHBhcmVudEZyYW1lLm5vZGVJbmRleGVzKSwgX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkLm5vZGVJbmRleGVzKSksXG4gICAgICAgIGZyb21GcmFtZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBEcUVsZW1lbnQuc2V0UnVuT3B0aW9ucyA9IGZ1bmN0aW9uIHNldFJ1bk9wdGlvbnMoX3JlZjIpIHtcbiAgICAgIHZhciBlbGVtZW50UmVmID0gX3JlZjIuZWxlbWVudFJlZiwgYWJzb2x1dGVQYXRocyA9IF9yZWYyLmFic29sdXRlUGF0aHM7XG4gICAgICBjYWNoZV9kZWZhdWx0LnNldChDQUNIRV9LRVksIHtcbiAgICAgICAgZWxlbWVudFJlZjogZWxlbWVudFJlZixcbiAgICAgICAgYWJzb2x1dGVQYXRoczogYWJzb2x1dGVQYXRoc1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgZHFfZWxlbWVudF9kZWZhdWx0ID0gRHFFbGVtZW50O1xuICAgIGZ1bmN0aW9uIGNoZWNrSGVscGVyKGNoZWNrUmVzdWx0LCBvcHRpb25zLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzQXN5bmM6IGZhbHNlLFxuICAgICAgICBhc3luYzogZnVuY3Rpb24gYXN5bmMoKSB7XG4gICAgICAgICAgdGhpcy5pc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGNoZWNrUmVzdWx0LnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgcmVzb2x2ZShjaGVja1Jlc3VsdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKF9kYXRhKSB7XG4gICAgICAgICAgY2hlY2tSZXN1bHQuZGF0YSA9IF9kYXRhO1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGVkTm9kZXM6IGZ1bmN0aW9uIHJlbGF0ZWROb2Rlcyhub2Rlcykge1xuICAgICAgICAgIGlmICghd2luZG93Lk5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGVzIGluc3RhbmNlb2Ygd2luZG93Lk5vZGUgfHwgbm9kZXMgaW5zdGFuY2VvZiBhYnN0cmFjdF92aXJ0dWFsX25vZGVfZGVmYXVsdCkge1xuICAgICAgICAgICAgbm9kZXMgPSBbIG5vZGVzIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVzID0gdG9fYXJyYXlfZGVmYXVsdChub2Rlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoZWNrUmVzdWx0LnJlbGF0ZWROb2RlcyA9IFtdO1xuICAgICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBhYnN0cmFjdF92aXJ0dWFsX25vZGVfZGVmYXVsdCkge1xuICAgICAgICAgICAgICBub2RlID0gbm9kZS5hY3R1YWxOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZSkge1xuICAgICAgICAgICAgICB2YXIgZHFFbG0gPSBuZXcgZHFfZWxlbWVudF9kZWZhdWx0KG5vZGUpO1xuICAgICAgICAgICAgICBjaGVja1Jlc3VsdC5yZWxhdGVkTm9kZXMucHVzaChkcUVsbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBjaGVja19oZWxwZXJfZGVmYXVsdCA9IGNoZWNrSGVscGVyO1xuICAgIGZ1bmN0aW9uIF9jbG9uZShvYmopIHtcbiAgICAgIHJldHVybiBjbG9uZVJlY3VzZWQob2JqLCBuZXcgTWFwKCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbG9uZVJlY3VzZWQob2JqLCBzZWVuKSB7XG4gICAgICB2YXIgX3dpbmRvdywgX3dpbmRvdzI7XG4gICAgICBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH1cbiAgICAgIGlmICgoX3dpbmRvdyA9IHdpbmRvdykgIT09IG51bGwgJiYgX3dpbmRvdyAhPT0gdm9pZCAwICYmIF93aW5kb3cuTm9kZSAmJiBvYmogaW5zdGFuY2VvZiB3aW5kb3cuTm9kZSB8fCAoX3dpbmRvdzIgPSB3aW5kb3cpICE9PSBudWxsICYmIF93aW5kb3cyICE9PSB2b2lkIDAgJiYgX3dpbmRvdzIuSFRNTENvbGxlY3Rpb24gJiYgb2JqIGluc3RhbmNlb2Ygd2luZG93LkhUTUxDb2xsZWN0aW9uIHx8ICdub2RlTmFtZScgaW4gb2JqICYmICdub2RlVHlwZScgaW4gb2JqICYmICdvd25lckRvY3VtZW50JyBpbiBvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH1cbiAgICAgIGlmIChzZWVuLmhhcyhvYmopKSB7XG4gICAgICAgIHJldHVybiBzZWVuLmdldChvYmopO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICB2YXIgb3V0MiA9IFtdO1xuICAgICAgICBzZWVuLnNldChvYmosIG91dDIpO1xuICAgICAgICBvYmouZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIG91dDIucHVzaChjbG9uZVJlY3VzZWQodmFsdWUsIHNlZW4pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXQyO1xuICAgICAgfVxuICAgICAgdmFyIG91dCA9IHt9O1xuICAgICAgc2Vlbi5zZXQob2JqLCBvdXQpO1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBvdXRba2V5XSA9IGNsb25lUmVjdXNlZChvYmpba2V5XSwgc2Vlbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICB2YXIgaW1wb3J0X2Nzc19zZWxlY3Rvcl9wYXJzZXIgPSBfX3RvTW9kdWxlKHJlcXVpcmVfbGliKCkpO1xuICAgIHZhciBwYXJzZXIgPSBuZXcgaW1wb3J0X2Nzc19zZWxlY3Rvcl9wYXJzZXIuQ3NzU2VsZWN0b3JQYXJzZXIoKTtcbiAgICBwYXJzZXIucmVnaXN0ZXJTZWxlY3RvclBzZXVkb3MoJ25vdCcpO1xuICAgIHBhcnNlci5yZWdpc3RlclNlbGVjdG9yUHNldWRvcygnaXMnKTtcbiAgICBwYXJzZXIucmVnaXN0ZXJOZXN0aW5nT3BlcmF0b3JzKCc+Jyk7XG4gICAgcGFyc2VyLnJlZ2lzdGVyQXR0ckVxdWFsaXR5TW9kcygnXicsICckJywgJyonLCAnficpO1xuICAgIHZhciBjc3NfcGFyc2VyX2RlZmF1bHQgPSBwYXJzZXI7XG4gICAgZnVuY3Rpb24gX21hdGNoZXModk5vZGUsIHNlbGVjdG9yKSB7XG4gICAgICB2YXIgZXhwcmVzc2lvbnMgPSBfY29udmVydFNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIHJldHVybiBleHByZXNzaW9ucy5zb21lKGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIF9tYXRjaGVzRXhwcmVzc2lvbih2Tm9kZSwgZXhwcmVzc2lvbik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWF0Y2hlc1RhZyh2Tm9kZSwgZXhwKSB7XG4gICAgICByZXR1cm4gdk5vZGUucHJvcHMubm9kZVR5cGUgPT09IDEgJiYgKGV4cC50YWcgPT09ICcqJyB8fCB2Tm9kZS5wcm9wcy5ub2RlTmFtZSA9PT0gZXhwLnRhZyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hdGNoZXNDbGFzc2VzKHZOb2RlLCBleHApIHtcbiAgICAgIHJldHVybiAhZXhwLmNsYXNzZXMgfHwgZXhwLmNsYXNzZXMuZXZlcnkoZnVuY3Rpb24oY2wpIHtcbiAgICAgICAgcmV0dXJuIHZOb2RlLmhhc0NsYXNzKGNsLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYXRjaGVzQXR0cmlidXRlcyh2Tm9kZSwgZXhwKSB7XG4gICAgICByZXR1cm4gIWV4cC5hdHRyaWJ1dGVzIHx8IGV4cC5hdHRyaWJ1dGVzLmV2ZXJ5KGZ1bmN0aW9uKGF0dCkge1xuICAgICAgICB2YXIgbm9kZUF0dCA9IHZOb2RlLmF0dHIoYXR0LmtleSk7XG4gICAgICAgIHJldHVybiBub2RlQXR0ICE9PSBudWxsICYmIGF0dC50ZXN0KG5vZGVBdHQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hdGNoZXNJZCh2Tm9kZSwgZXhwKSB7XG4gICAgICByZXR1cm4gIWV4cC5pZCB8fCB2Tm9kZS5wcm9wcy5pZCA9PT0gZXhwLmlkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHNldWRvcyh0YXJnZXQsIGV4cCkge1xuICAgICAgaWYgKCFleHAucHNldWRvcyB8fCBleHAucHNldWRvcy5ldmVyeShmdW5jdGlvbihwc2V1ZG8pIHtcbiAgICAgICAgaWYgKHBzZXVkby5uYW1lID09PSAnbm90Jykge1xuICAgICAgICAgIHJldHVybiAhcHNldWRvLmV4cHJlc3Npb25zLnNvbWUoZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIF9tYXRjaGVzRXhwcmVzc2lvbih0YXJnZXQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHBzZXVkby5uYW1lID09PSAnaXMnKSB7XG4gICAgICAgICAgcmV0dXJuIHBzZXVkby5leHByZXNzaW9ucy5zb21lKGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiBfbWF0Y2hlc0V4cHJlc3Npb24odGFyZ2V0LCBleHByZXNzaW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RoZSBwc2V1ZG8gc2VsZWN0b3IgJyArIHBzZXVkby5uYW1lICsgJyBoYXMgbm90IHlldCBiZWVuIGltcGxlbWVudGVkJyk7XG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWF0Y2hFeHByZXNzaW9uKHZOb2RlLCBleHByZXNzaW9uKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlc1RhZyh2Tm9kZSwgZXhwcmVzc2lvbikgJiYgbWF0Y2hlc0NsYXNzZXModk5vZGUsIGV4cHJlc3Npb24pICYmIG1hdGNoZXNBdHRyaWJ1dGVzKHZOb2RlLCBleHByZXNzaW9uKSAmJiBtYXRjaGVzSWQodk5vZGUsIGV4cHJlc3Npb24pICYmIG1hdGNoZXNQc2V1ZG9zKHZOb2RlLCBleHByZXNzaW9uKTtcbiAgICB9XG4gICAgdmFyIGVzY2FwZVJlZ0V4cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGZyb20gPSAvKD89W1xcLVxcW1xcXXt9KCkqKz8uXFxcXFxcXiR8LCNcXHNdKS9nO1xuICAgICAgdmFyIHRvMiA9ICdcXFxcJztcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGZyb20sIHRvMik7XG4gICAgICB9O1xuICAgIH0oKTtcbiAgICB2YXIgcmVVbmVzY2FwZSA9IC9cXFxcL2c7XG4gICAgZnVuY3Rpb24gY29udmVydEF0dHJpYnV0ZXMoYXR0cykge1xuICAgICAgaWYgKCFhdHRzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdHRzLm1hcChmdW5jdGlvbihhdHQpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZUtleSA9IGF0dC5uYW1lLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpO1xuICAgICAgICB2YXIgYXR0cmlidXRlVmFsdWUgPSAoYXR0LnZhbHVlIHx8ICcnKS5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKTtcbiAgICAgICAgdmFyIHRlc3QsIHJlZ2V4cDtcbiAgICAgICAgc3dpdGNoIChhdHQub3BlcmF0b3IpIHtcbiAgICAgICAgIGNhc2UgJ149JzpcbiAgICAgICAgICByZWdleHAgPSBuZXcgUmVnRXhwKCdeJyArIGVzY2FwZVJlZ0V4cChhdHRyaWJ1dGVWYWx1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlICckPSc6XG4gICAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAoYXR0cmlidXRlVmFsdWUpICsgJyQnKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAgY2FzZSAnfj0nOlxuICAgICAgICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBlc2NhcGVSZWdFeHAoYXR0cmlidXRlVmFsdWUpICsgJyhcXFxcc3wkKScpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlICd8PSc6XG4gICAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cCgnXicgKyBlc2NhcGVSZWdFeHAoYXR0cmlidXRlVmFsdWUpICsgJygtfCQpJyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgIHRlc3QgPSBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlVmFsdWUgPT09IHZhbHVlO1xuICAgICAgICAgIH07XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIGNhc2UgJyo9JzpcbiAgICAgICAgICB0ZXN0ID0gZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmluY2x1ZGVzKGF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlICchPSc6XG4gICAgICAgICAgdGVzdCA9IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVWYWx1ZSAhPT0gdmFsdWU7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0ZXN0ID0gZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJpYnV0ZVZhbHVlID09PSAnJyAmJiAvXlsqJF5dPSQvLnRlc3QoYXR0Lm9wZXJhdG9yKSkge1xuICAgICAgICAgIHRlc3QgPSBmdW5jdGlvbiB0ZXN0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0ZXN0KSB7XG4gICAgICAgICAgdGVzdCA9IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAmJiByZWdleHAudGVzdCh2YWx1ZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleTogYXR0cmlidXRlS2V5LFxuICAgICAgICAgIHZhbHVlOiBhdHRyaWJ1dGVWYWx1ZSxcbiAgICAgICAgICB0eXBlOiB0eXBlb2YgYXR0LnZhbHVlID09PSAndW5kZWZpbmVkJyA/ICdhdHRyRXhpc3QnIDogJ2F0dHJWYWx1ZScsXG4gICAgICAgICAgdGVzdDogdGVzdFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbnZlcnRDbGFzc2VzKGNsYXNzZXMpIHtcbiAgICAgIGlmICghY2xhc3Nlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xhc3Nlcy5tYXAoZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogY2xhc3NOYW1lLFxuICAgICAgICAgIHJlZ2V4cDogbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGVzY2FwZVJlZ0V4cChjbGFzc05hbWUpICsgJyhcXFxcc3wkKScpXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29udmVydFBzZXVkb3MocHNldWRvcykge1xuICAgICAgaWYgKCFwc2V1ZG9zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwc2V1ZG9zLm1hcChmdW5jdGlvbihwMikge1xuICAgICAgICB2YXIgZXhwcmVzc2lvbnM7XG4gICAgICAgIGlmIChbICdpcycsICdub3QnIF0uaW5jbHVkZXMocDIubmFtZSkpIHtcbiAgICAgICAgICBleHByZXNzaW9ucyA9IHAyLnZhbHVlO1xuICAgICAgICAgIGV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnMuc2VsZWN0b3JzID8gZXhwcmVzc2lvbnMuc2VsZWN0b3JzIDogWyBleHByZXNzaW9ucyBdO1xuICAgICAgICAgIGV4cHJlc3Npb25zID0gY29udmVydEV4cHJlc3Npb25zKGV4cHJlc3Npb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IHAyLm5hbWUsXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLFxuICAgICAgICAgIHZhbHVlOiBwMi52YWx1ZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbnZlcnRFeHByZXNzaW9ucyhleHByZXNzaW9ucykge1xuICAgICAgcmV0dXJuIGV4cHJlc3Npb25zLm1hcChmdW5jdGlvbihleHApIHtcbiAgICAgICAgdmFyIG5ld0V4cCA9IFtdO1xuICAgICAgICB2YXIgcnVsZSA9IGV4cC5ydWxlO1xuICAgICAgICB3aGlsZSAocnVsZSkge1xuICAgICAgICAgIG5ld0V4cC5wdXNoKHtcbiAgICAgICAgICAgIHRhZzogcnVsZS50YWdOYW1lID8gcnVsZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgOiAnKicsXG4gICAgICAgICAgICBjb21iaW5hdG9yOiBydWxlLm5lc3RpbmdPcGVyYXRvciA/IHJ1bGUubmVzdGluZ09wZXJhdG9yIDogJyAnLFxuICAgICAgICAgICAgaWQ6IHJ1bGUuaWQsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBjb252ZXJ0QXR0cmlidXRlcyhydWxlLmF0dHJzKSxcbiAgICAgICAgICAgIGNsYXNzZXM6IGNvbnZlcnRDbGFzc2VzKHJ1bGUuY2xhc3NOYW1lcyksXG4gICAgICAgICAgICBwc2V1ZG9zOiBjb252ZXJ0UHNldWRvcyhydWxlLnBzZXVkb3MpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcnVsZSA9IHJ1bGUucnVsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RXhwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9jb252ZXJ0U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgIHZhciBleHByZXNzaW9ucyA9IGNzc19wYXJzZXJfZGVmYXVsdC5wYXJzZShzZWxlY3Rvcik7XG4gICAgICBleHByZXNzaW9ucyA9IGV4cHJlc3Npb25zLnNlbGVjdG9ycyA/IGV4cHJlc3Npb25zLnNlbGVjdG9ycyA6IFsgZXhwcmVzc2lvbnMgXTtcbiAgICAgIHJldHVybiBjb252ZXJ0RXhwcmVzc2lvbnMoZXhwcmVzc2lvbnMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvcHRpbWl6ZWRNYXRjaGVzRXhwcmVzc2lvbih2Tm9kZSwgZXhwcmVzc2lvbnMsIGluZGV4LCBtYXRjaEFueVBhcmVudCkge1xuICAgICAgaWYgKCF2Tm9kZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXhwcmVzc2lvbnMpO1xuICAgICAgdmFyIGV4cHJlc3Npb24gPSBpc0FycmF5ID8gZXhwcmVzc2lvbnNbaW5kZXhdIDogZXhwcmVzc2lvbnM7XG4gICAgICB2YXIgbWFjaGVkRXhwcmVzc2lvbiA9IG1hdGNoRXhwcmVzc2lvbih2Tm9kZSwgZXhwcmVzc2lvbik7XG4gICAgICB3aGlsZSAoIW1hY2hlZEV4cHJlc3Npb24gJiYgbWF0Y2hBbnlQYXJlbnQgJiYgdk5vZGUucGFyZW50KSB7XG4gICAgICAgIHZOb2RlID0gdk5vZGUucGFyZW50O1xuICAgICAgICBtYWNoZWRFeHByZXNzaW9uID0gbWF0Y2hFeHByZXNzaW9uKHZOb2RlLCBleHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgaWYgKFsgJyAnLCAnPicgXS5pbmNsdWRlcyhleHByZXNzaW9uLmNvbWJpbmF0b3IpID09PSBmYWxzZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXhlLnV0aWxzLm1hdGNoZXNFeHByZXNzaW9uIGRvZXMgbm90IHN1cHBvcnQgdGhlIGNvbWJpbmF0b3I6ICcgKyBleHByZXNzaW9uLmNvbWJpbmF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIG1hY2hlZEV4cHJlc3Npb24gPSBtYWNoZWRFeHByZXNzaW9uICYmIG9wdGltaXplZE1hdGNoZXNFeHByZXNzaW9uKHZOb2RlLnBhcmVudCwgZXhwcmVzc2lvbnMsIGluZGV4IC0gMSwgZXhwcmVzc2lvbi5jb21iaW5hdG9yID09PSAnICcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hY2hlZEV4cHJlc3Npb247XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9tYXRjaGVzRXhwcmVzc2lvbih2Tm9kZSwgZXhwcmVzc2lvbnMsIG1hdGNoQW55UGFyZW50KSB7XG4gICAgICByZXR1cm4gb3B0aW1pemVkTWF0Y2hlc0V4cHJlc3Npb24odk5vZGUsIGV4cHJlc3Npb25zLCBleHByZXNzaW9ucy5sZW5ndGggLSAxLCBtYXRjaEFueVBhcmVudCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb3Nlc3Qodk5vZGUsIHNlbGVjdG9yKSB7XG4gICAgICB3aGlsZSAodk5vZGUpIHtcbiAgICAgICAgaWYgKF9tYXRjaGVzKHZOb2RlLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gdk5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2Tm9kZS5wYXJlbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHJlc29sdmUgcGFyZW50IGZvciBub24tRE9NIG5vZGVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdk5vZGUgPSB2Tm9kZS5wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGNsb3Nlc3RfZGVmYXVsdCA9IGNsb3Nlc3Q7XG4gICAgZnVuY3Rpb24gbm9vcCgpIHt9XG4gICAgZnVuY3Rpb24gZnVuY0d1YXJkKGYpIHtcbiAgICAgIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdRdWV1ZSBtZXRob2RzIHJlcXVpcmUgZnVuY3Rpb25zIGFzIGFyZ3VtZW50cycpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBxdWV1ZSgpIHtcbiAgICAgIHZhciB0YXNrcyA9IFtdO1xuICAgICAgdmFyIHN0YXJ0ZWQgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDA7XG4gICAgICB2YXIgY29tcGxldGVRdWV1ZSA9IG5vb3A7XG4gICAgICB2YXIgY29tcGxldGUgPSBmYWxzZTtcbiAgICAgIHZhciBlcnIyO1xuICAgICAgdmFyIGRlZmF1bHRGYWlsID0gZnVuY3Rpb24gZGVmYXVsdEZhaWwoZSkge1xuICAgICAgICBlcnIyID0gZTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoZXJyMiAhPT0gdm9pZCAwICYmIGVycjIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxvZ19kZWZhdWx0KCdVbmNhdWdodCBlcnJvciAob2YgcXVldWUpJywgZXJyMik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAxKTtcbiAgICAgIH07XG4gICAgICB2YXIgZmFpbGVkID0gZGVmYXVsdEZhaWw7XG4gICAgICBmdW5jdGlvbiBjcmVhdGVSZXNvbHZlKGkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICB0YXNrc1tpXSA9IHI7XG4gICAgICAgICAgcmVtYWluaW5nIC09IDE7XG4gICAgICAgICAgaWYgKCFyZW1haW5pbmcgJiYgY29tcGxldGVRdWV1ZSAhPT0gbm9vcCkge1xuICAgICAgICAgICAgY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgY29tcGxldGVRdWV1ZSh0YXNrcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYWJvcnQobXNnKSB7XG4gICAgICAgIGNvbXBsZXRlUXVldWUgPSBub29wO1xuICAgICAgICBmYWlsZWQobXNnKTtcbiAgICAgICAgcmV0dXJuIHRhc2tzO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcG9wKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGFza3MubGVuZ3RoO1xuICAgICAgICBmb3IgKDtzdGFydGVkIDwgbGVuZ3RoOyBzdGFydGVkKyspIHtcbiAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzW3N0YXJ0ZWRdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0YXNrLmNhbGwobnVsbCwgY3JlYXRlUmVzb2x2ZShzdGFydGVkKSwgYWJvcnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGFib3J0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHEgPSB7XG4gICAgICAgIGRlZmVyOiBmdW5jdGlvbiBkZWZlcihmbikge1xuICAgICAgICAgIGlmIChfdHlwZW9mKGZuKSA9PT0gJ29iamVjdCcgJiYgZm4udGhlbiAmJiBmblsnY2F0Y2gnXSkge1xuICAgICAgICAgICAgdmFyIGRlZmVyID0gZm47XG4gICAgICAgICAgICBmbiA9IGZ1bmN0aW9uIGZuKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICBkZWZlci50aGVuKHJlc29sdmUpWydjYXRjaCddKHJlamVjdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jR3VhcmQoZm4pO1xuICAgICAgICAgIGlmIChlcnIyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXVlIGFscmVhZHkgY29tcGxldGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRhc2tzLnB1c2goZm4pO1xuICAgICAgICAgICsrcmVtYWluaW5nO1xuICAgICAgICAgIHBvcCgpO1xuICAgICAgICAgIHJldHVybiBxO1xuICAgICAgICB9LFxuICAgICAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKGZuKSB7XG4gICAgICAgICAgZnVuY0d1YXJkKGZuKTtcbiAgICAgICAgICBpZiAoY29tcGxldGVRdWV1ZSAhPT0gbm9vcCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdxdWV1ZSBgdGhlbmAgYWxyZWFkeSBzZXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlcnIyKSB7XG4gICAgICAgICAgICBjb21wbGV0ZVF1ZXVlID0gZm47XG4gICAgICAgICAgICBpZiAoIXJlbWFpbmluZykge1xuICAgICAgICAgICAgICBjb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgIGNvbXBsZXRlUXVldWUodGFza3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcTtcbiAgICAgICAgfSxcbiAgICAgICAgY2F0Y2g6IGZ1bmN0aW9uIF9jYXRjaChmbikge1xuICAgICAgICAgIGZ1bmNHdWFyZChmbik7XG4gICAgICAgICAgaWYgKGZhaWxlZCAhPT0gZGVmYXVsdEZhaWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncXVldWUgYGNhdGNoYCBhbHJlYWR5IHNldCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWVycjIpIHtcbiAgICAgICAgICAgIGZhaWxlZCA9IGZuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbihlcnIyKTtcbiAgICAgICAgICAgIGVycjIgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcTtcbiAgICAgICAgfSxcbiAgICAgICAgYWJvcnQ6IGFib3J0XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHE7XG4gICAgfVxuICAgIHZhciBxdWV1ZV9kZWZhdWx0ID0gcXVldWU7XG4gICAgdmFyIHV1aWQ7XG4gICAgdmFyIF9ybmc7XG4gICAgdmFyIF9jcnlwdG8gPSB3aW5kb3cuY3J5cHRvIHx8IHdpbmRvdy5tc0NyeXB0bztcbiAgICBpZiAoIV9ybmcgJiYgX2NyeXB0byAmJiBfY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdmFyIF9ybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgIF9ybmcgPSBmdW5jdGlvbiB3aGF0d2dSTkcoKSB7XG4gICAgICAgIF9jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKF9ybmRzOCk7XG4gICAgICAgIHJldHVybiBfcm5kczg7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIV9ybmcpIHtcbiAgICAgIHZhciBfcm5kcyA9IG5ldyBBcnJheSgxNik7XG4gICAgICBfcm5nID0gZnVuY3Rpb24gX3JuZygpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHI7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgaWYgKChpICYgMykgPT09IDApIHtcbiAgICAgICAgICAgIHIgPSBNYXRoLnJhbmRvbSgpICogNDI5NDk2NzI5NjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3JuZHNbaV0gPSByID4+PiAoKGkgJiAzKSA8PCAzKSAmIDI1NTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3JuZHM7XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgQnVmZmVyQ2xhc3MgPSB0eXBlb2Ygd2luZG93LkJ1ZmZlciA9PSAnZnVuY3Rpb24nID8gd2luZG93LkJ1ZmZlciA6IEFycmF5O1xuICAgIHZhciBfYnl0ZVRvSGV4ID0gW107XG4gICAgdmFyIF9oZXhUb0J5dGUgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICBfYnl0ZVRvSGV4W2ldID0gKGkgKyAyNTYpLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG4gICAgICBfaGV4VG9CeXRlW19ieXRlVG9IZXhbaV1dID0gaTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2UocywgYnVmLCBvZmZzZXQpIHtcbiAgICAgIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwLCBpaSA9IDA7XG4gICAgICBidWYgPSBidWYgfHwgW107XG4gICAgICBzLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWzAtOWEtZl17Mn0vZywgZnVuY3Rpb24ob2N0KSB7XG4gICAgICAgIGlmIChpaSA8IDE2KSB7XG4gICAgICAgICAgYnVmW2kgKyBpaSsrXSA9IF9oZXhUb0J5dGVbb2N0XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB3aGlsZSAoaWkgPCAxNikge1xuICAgICAgICBidWZbaSArIGlpKytdID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVucGFyc2UoYnVmLCBvZmZzZXQpIHtcbiAgICAgIHZhciBpID0gb2Zmc2V0IHx8IDAsIGJ0aCA9IF9ieXRlVG9IZXg7XG4gICAgICByZXR1cm4gYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICsgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgKyBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXTtcbiAgICB9XG4gICAgdmFyIF9zZWVkQnl0ZXMgPSBfcm5nKCk7XG4gICAgdmFyIF9ub2RlSWQgPSBbIF9zZWVkQnl0ZXNbMF0gfCAxLCBfc2VlZEJ5dGVzWzFdLCBfc2VlZEJ5dGVzWzJdLCBfc2VlZEJ5dGVzWzNdLCBfc2VlZEJ5dGVzWzRdLCBfc2VlZEJ5dGVzWzVdIF07XG4gICAgdmFyIF9jbG9ja3NlcSA9IChfc2VlZEJ5dGVzWzZdIDw8IDggfCBfc2VlZEJ5dGVzWzddKSAmIDE2MzgzO1xuICAgIHZhciBfbGFzdE1TZWNzID0gMDtcbiAgICB2YXIgX2xhc3ROU2VjcyA9IDA7XG4gICAgZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgICAgIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICAgICAgdmFyIGIyID0gYnVmIHx8IFtdO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9IG51bGwgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxO1xuICAgICAgdmFyIG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPSBudWxsID8gb3B0aW9ucy5tc2VjcyA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdmFyIG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPSBudWxsID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxO1xuICAgICAgdmFyIGR0ID0gbXNlY3MgLSBfbGFzdE1TZWNzICsgKG5zZWNzIC0gX2xhc3ROU2VjcykgLyAxZTQ7XG4gICAgICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDE2MzgzO1xuICAgICAgfVxuICAgICAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09IG51bGwpIHtcbiAgICAgICAgbnNlY3MgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKG5zZWNzID49IDFlNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3V1aWQudjEoKTogQ2FuXFwndCBjcmVhdGUgbW9yZSB0aGFuIDEwTSB1dWlkcy9zZWMnKTtcbiAgICAgIH1cbiAgICAgIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgICAgIF9sYXN0TlNlY3MgPSBuc2VjcztcbiAgICAgIF9jbG9ja3NlcSA9IGNsb2Nrc2VxO1xuICAgICAgbXNlY3MgKz0gMTIyMTkyOTI4ZTU7XG4gICAgICB2YXIgdGwgPSAoKG1zZWNzICYgMjY4NDM1NDU1KSAqIDFlNCArIG5zZWNzKSAlIDQyOTQ5NjcyOTY7XG4gICAgICBiMltpKytdID0gdGwgPj4+IDI0ICYgMjU1O1xuICAgICAgYjJbaSsrXSA9IHRsID4+PiAxNiAmIDI1NTtcbiAgICAgIGIyW2krK10gPSB0bCA+Pj4gOCAmIDI1NTtcbiAgICAgIGIyW2krK10gPSB0bCAmIDI1NTtcbiAgICAgIHZhciB0bWggPSBtc2VjcyAvIDQyOTQ5NjcyOTYgKiAxZTQgJiAyNjg0MzU0NTU7XG4gICAgICBiMltpKytdID0gdG1oID4+PiA4ICYgMjU1O1xuICAgICAgYjJbaSsrXSA9IHRtaCAmIDI1NTtcbiAgICAgIGIyW2krK10gPSB0bWggPj4+IDI0ICYgMTUgfCAxNjtcbiAgICAgIGIyW2krK10gPSB0bWggPj4+IDE2ICYgMjU1O1xuICAgICAgYjJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMTI4O1xuICAgICAgYjJbaSsrXSA9IGNsb2Nrc2VxICYgMjU1O1xuICAgICAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgICAgIGZvciAodmFyIG4yID0gMDsgbjIgPCA2OyBuMisrKSB7XG4gICAgICAgIGIyW2kgKyBuMl0gPSBub2RlW24yXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWYgPyBidWYgOiB1bnBhcnNlKGIyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgICAgIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJ1ZiA9IG9wdGlvbnMgPT0gJ2JpbmFyeScgPyBuZXcgQnVmZmVyQ2xhc3MoMTYpIDogbnVsbDtcbiAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IF9ybmcpKCk7XG4gICAgICBybmRzWzZdID0gcm5kc1s2XSAmIDE1IHwgNjQ7XG4gICAgICBybmRzWzhdID0gcm5kc1s4XSAmIDYzIHwgMTI4O1xuICAgICAgaWYgKGJ1Zikge1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7IGlpKyspIHtcbiAgICAgICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmIHx8IHVucGFyc2Uocm5kcyk7XG4gICAgfVxuICAgIHV1aWQgPSB2NDtcbiAgICB1dWlkLnYxID0gdjE7XG4gICAgdXVpZC52NCA9IHY0O1xuICAgIHV1aWQucGFyc2UgPSBwYXJzZTtcbiAgICB1dWlkLnVucGFyc2UgPSB1bnBhcnNlO1xuICAgIHV1aWQuQnVmZmVyQ2xhc3MgPSBCdWZmZXJDbGFzcztcbiAgICBheGUuX3V1aWQgPSB2MSgpO1xuICAgIHZhciB1dWlkX2RlZmF1bHQgPSB2NDtcbiAgICB2YXIgZXJyb3JUeXBlcyA9IE9iamVjdC5mcmVlemUoWyAnRXZhbEVycm9yJywgJ1JhbmdlRXJyb3InLCAnUmVmZXJlbmNlRXJyb3InLCAnU3ludGF4RXJyb3InLCAnVHlwZUVycm9yJywgJ1VSSUVycm9yJyBdKTtcbiAgICBmdW5jdGlvbiBzdHJpbmdpZnlNZXNzYWdlKF9yZWYzKSB7XG4gICAgICB2YXIgdG9waWMgPSBfcmVmMy50b3BpYywgY2hhbm5lbElkID0gX3JlZjMuY2hhbm5lbElkLCBtZXNzYWdlID0gX3JlZjMubWVzc2FnZSwgbWVzc2FnZUlkID0gX3JlZjMubWVzc2FnZUlkLCBrZWVwYWxpdmUgPSBfcmVmMy5rZWVwYWxpdmU7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgY2hhbm5lbElkOiBjaGFubmVsSWQsXG4gICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgbWVzc2FnZUlkOiBtZXNzYWdlSWQsXG4gICAgICAgIGtlZXBhbGl2ZTogISFrZWVwYWxpdmUsXG4gICAgICAgIHNvdXJjZTogZ2V0U291cmNlMigpXG4gICAgICB9O1xuICAgICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBkYXRhLmVycm9yID0ge1xuICAgICAgICAgIG5hbWU6IG1lc3NhZ2UubmFtZSxcbiAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLm1lc3NhZ2UsXG4gICAgICAgICAgc3RhY2s6IG1lc3NhZ2Uuc3RhY2tcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEucGF5bG9hZCA9IG1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlTWVzc2FnZShkYXRhU3RyaW5nKSB7XG4gICAgICB2YXIgZGF0YTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpO1xuICAgICAgfSBjYXRjaCAoX3VudXNlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWlzUmVzcG9uZGFibGVNZXNzYWdlKGRhdGEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBfZGF0YTIgPSBkYXRhLCB0b3BpYyA9IF9kYXRhMi50b3BpYywgY2hhbm5lbElkID0gX2RhdGEyLmNoYW5uZWxJZCwgbWVzc2FnZUlkID0gX2RhdGEyLm1lc3NhZ2VJZCwga2VlcGFsaXZlID0gX2RhdGEyLmtlZXBhbGl2ZTtcbiAgICAgIHZhciBtZXNzYWdlID0gX3R5cGVvZihkYXRhLmVycm9yKSA9PT0gJ29iamVjdCcgPyBidWlsZEVycm9yT2JqZWN0KGRhdGEuZXJyb3IpIDogZGF0YS5wYXlsb2FkO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICBtZXNzYWdlSWQ6IG1lc3NhZ2VJZCxcbiAgICAgICAgY2hhbm5lbElkOiBjaGFubmVsSWQsXG4gICAgICAgIGtlZXBhbGl2ZTogISFrZWVwYWxpdmVcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzUmVzcG9uZGFibGVNZXNzYWdlKHBvc3RlZE1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBwb3N0ZWRNZXNzYWdlICE9PSBudWxsICYmIF90eXBlb2YocG9zdGVkTWVzc2FnZSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwb3N0ZWRNZXNzYWdlLmNoYW5uZWxJZCA9PT0gJ3N0cmluZycgJiYgcG9zdGVkTWVzc2FnZS5zb3VyY2UgPT09IGdldFNvdXJjZTIoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRFcnJvck9iamVjdChlcnJvcikge1xuICAgICAgdmFyIG1zZyA9IGVycm9yLm1lc3NhZ2UgfHwgJ1Vua25vd24gZXJyb3Igb2NjdXJyZWQnO1xuICAgICAgdmFyIGVycm9yTmFtZSA9IGVycm9yVHlwZXMuaW5jbHVkZXMoZXJyb3IubmFtZSkgPyBlcnJvci5uYW1lIDogJ0Vycm9yJztcbiAgICAgIHZhciBFcnJDb25zdHJ1Y3RvciA9IHdpbmRvd1tlcnJvck5hbWVdIHx8IEVycm9yO1xuICAgICAgaWYgKGVycm9yLnN0YWNrKSB7XG4gICAgICAgIG1zZyArPSAnXFxuJyArIGVycm9yLnN0YWNrLnJlcGxhY2UoZXJyb3IubWVzc2FnZSwgJycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBFcnJDb25zdHJ1Y3Rvcihtc2cpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTb3VyY2UyKCkge1xuICAgICAgdmFyIGFwcGxpY2F0aW9uID0gJ2F4ZUFQSSc7XG4gICAgICB2YXIgdmVyc2lvbiA9ICcnO1xuICAgICAgaWYgKHR5cGVvZiBheGUgIT09ICd1bmRlZmluZWQnICYmIGF4ZS5fYXVkaXQgJiYgYXhlLl9hdWRpdC5hcHBsaWNhdGlvbikge1xuICAgICAgICBhcHBsaWNhdGlvbiA9IGF4ZS5fYXVkaXQuYXBwbGljYXRpb247XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGF4ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmVyc2lvbiA9IGF4ZS52ZXJzaW9uO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFwcGxpY2F0aW9uICsgJy4nICsgdmVyc2lvbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNzZXJ0SXNQYXJlbnRXaW5kb3cod2luKSB7XG4gICAgICBhc3NldE5vdEdsb2JhbFdpbmRvdyh3aW4pO1xuICAgICAgYXNzZXJ0X2RlZmF1bHQod2luZG93LnBhcmVudCA9PT0gd2luLCAnU291cmNlIG9mIHRoZSByZXNwb25zZSBtdXN0IGJlIHRoZSBwYXJlbnQgd2luZG93LicpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc3NlcnRJc0ZyYW1lV2luZG93KHdpbikge1xuICAgICAgYXNzZXROb3RHbG9iYWxXaW5kb3cod2luKTtcbiAgICAgIGFzc2VydF9kZWZhdWx0KHdpbi5wYXJlbnQgPT09IHdpbmRvdywgJ1Jlc3BvbmRhYmxlIHRhcmdldCBtdXN0IGJlIGEgZnJhbWUgaW4gdGhlIGN1cnJlbnQgd2luZG93Jyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzc2V0Tm90R2xvYmFsV2luZG93KHdpbikge1xuICAgICAgYXNzZXJ0X2RlZmF1bHQod2luZG93ICE9PSB3aW4sICdNZXNzYWdlcyBjYW4gbm90IGJlIHNlbnQgdG8gdGhlIHNhbWUgd2luZG93LicpO1xuICAgIH1cbiAgICB2YXIgY2hhbm5lbHMgPSB7fTtcbiAgICBmdW5jdGlvbiBzdG9yZVJlcGx5SGFuZGxlcihjaGFubmVsSWQsIHJlcGx5SGFuZGxlcikge1xuICAgICAgdmFyIHNlbmRUb1BhcmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgICAgIGFzc2VydF9kZWZhdWx0KCFjaGFubmVsc1tjaGFubmVsSWRdLCAnQSByZXBseUhhbmRsZXIgYWxyZWFkeSBleGlzdHMgZm9yIHRoaXMgbWVzc2FnZSBjaGFubmVsLicpO1xuICAgICAgY2hhbm5lbHNbY2hhbm5lbElkXSA9IHtcbiAgICAgICAgcmVwbHlIYW5kbGVyOiByZXBseUhhbmRsZXIsXG4gICAgICAgIHNlbmRUb1BhcmVudDogc2VuZFRvUGFyZW50XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRSZXBseUhhbmRsZXIoY2hhbm5lbElkKSB7XG4gICAgICByZXR1cm4gY2hhbm5lbHNbY2hhbm5lbElkXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVsZXRlUmVwbHlIYW5kbGVyKGNoYW5uZWxJZCkge1xuICAgICAgZGVsZXRlIGNoYW5uZWxzW2NoYW5uZWxJZF07XG4gICAgfVxuICAgIHZhciBtZXNzYWdlSWRzID0gW107XG4gICAgZnVuY3Rpb24gY3JlYXRlTWVzc2FnZUlkKCkge1xuICAgICAgdmFyIHV1aWQyID0gJycuY29uY2F0KHY0KCksICc6JykuY29uY2F0KHY0KCkpO1xuICAgICAgaWYgKG1lc3NhZ2VJZHMuaW5jbHVkZXModXVpZDIpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVNZXNzYWdlSWQoKTtcbiAgICAgIH1cbiAgICAgIG1lc3NhZ2VJZHMucHVzaCh1dWlkMik7XG4gICAgICByZXR1cm4gdXVpZDI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzTmV3TWVzc2FnZSh1dWlkMikge1xuICAgICAgaWYgKG1lc3NhZ2VJZHMuaW5jbHVkZXModXVpZDIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG1lc3NhZ2VJZHMucHVzaCh1dWlkMik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG9zdE1lc3NhZ2Uod2luLCBkYXRhLCBzZW5kVG9QYXJlbnQsIHJlcGx5SGFuZGxlcikge1xuICAgICAgc2VuZFRvUGFyZW50ID8gYXNzZXJ0SXNQYXJlbnRXaW5kb3cod2luKSA6IGFzc2VydElzRnJhbWVXaW5kb3cod2luKTtcbiAgICAgIGlmIChkYXRhLm1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvciAmJiAhc2VuZFRvUGFyZW50KSB7XG4gICAgICAgIGF4ZS5sb2coZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGFTdHJpbmcgPSBzdHJpbmdpZnlNZXNzYWdlKF9leHRlbmRzKHtcbiAgICAgICAgbWVzc2FnZUlkOiBjcmVhdGVNZXNzYWdlSWQoKVxuICAgICAgfSwgZGF0YSkpO1xuICAgICAgdmFyIGFsbG93ZWRPcmlnaW5zID0gYXhlLl9hdWRpdC5hbGxvd2VkT3JpZ2lucztcbiAgICAgIGlmICghYWxsb3dlZE9yaWdpbnMgfHwgIWFsbG93ZWRPcmlnaW5zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHJlcGx5SGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzdG9yZVJlcGx5SGFuZGxlcihkYXRhLmNoYW5uZWxJZCwgcmVwbHlIYW5kbGVyLCBzZW5kVG9QYXJlbnQpO1xuICAgICAgfVxuICAgICAgYWxsb3dlZE9yaWdpbnMuZm9yRWFjaChmdW5jdGlvbihvcmlnaW4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3aW4ucG9zdE1lc3NhZ2UoZGF0YVN0cmluZywgb3JpZ2luKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyMikge1xuICAgICAgICAgIGlmIChlcnIyIGluc3RhbmNlb2Ygd2luLkRPTUV4Y2VwdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbGxvd2VkT3JpZ2lucyB2YWx1ZSBcIicuY29uY2F0KG9yaWdpbiwgJ1wiIGlzIG5vdCBhIHZhbGlkIG9yaWdpbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZXJyMjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc0Vycm9yKHdpbiwgZXJyb3IsIGNoYW5uZWxJZCkge1xuICAgICAgaWYgKCF3aW4ucGFyZW50ICE9PSB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIGF4ZS5sb2coZXJyb3IpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgcG9zdE1lc3NhZ2Uod2luLCB7XG4gICAgICAgICAgdG9waWM6IG51bGwsXG4gICAgICAgICAgY2hhbm5lbElkOiBjaGFubmVsSWQsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3IsXG4gICAgICAgICAgbWVzc2FnZUlkOiBjcmVhdGVNZXNzYWdlSWQoKSxcbiAgICAgICAgICBrZWVwYWxpdmU6IHRydWVcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9IGNhdGNoIChlcnIyKSB7XG4gICAgICAgIHJldHVybiBheGUubG9nKGVycjIpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVSZXNwb25kZXIod2luLCBjaGFubmVsSWQpIHtcbiAgICAgIHZhciBzZW5kVG9QYXJlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gcmVzcG9uZChtZXNzYWdlLCBrZWVwYWxpdmUsIHJlcGx5SGFuZGxlcikge1xuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICBjaGFubmVsSWQ6IGNoYW5uZWxJZCxcbiAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgIGtlZXBhbGl2ZToga2VlcGFsaXZlXG4gICAgICAgIH07XG4gICAgICAgIHBvc3RNZXNzYWdlKHdpbiwgZGF0YSwgc2VuZFRvUGFyZW50LCByZXBseUhhbmRsZXIpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb3JpZ2luSXNBbGxvd2VkKG9yaWdpbikge1xuICAgICAgdmFyIGFsbG93ZWRPcmlnaW5zID0gYXhlLl9hdWRpdC5hbGxvd2VkT3JpZ2lucztcbiAgICAgIHJldHVybiBhbGxvd2VkT3JpZ2lucyAmJiBhbGxvd2VkT3JpZ2lucy5pbmNsdWRlcygnKicpIHx8IGFsbG93ZWRPcmlnaW5zLmluY2x1ZGVzKG9yaWdpbik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VIYW5kbGVyKF9yZWY0LCB0b3BpY0hhbmRsZXIpIHtcbiAgICAgIHZhciBvcmlnaW4gPSBfcmVmNC5vcmlnaW4sIGRhdGFTdHJpbmcgPSBfcmVmNC5kYXRhLCB3aW4gPSBfcmVmNC5zb3VyY2U7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZGF0YSA9IHBhcnNlTWVzc2FnZShkYXRhU3RyaW5nKSB8fCB7fTtcbiAgICAgICAgdmFyIGNoYW5uZWxJZCA9IGRhdGEuY2hhbm5lbElkLCBtZXNzYWdlID0gZGF0YS5tZXNzYWdlLCBtZXNzYWdlSWQgPSBkYXRhLm1lc3NhZ2VJZDtcbiAgICAgICAgaWYgKCFvcmlnaW5Jc0FsbG93ZWQob3JpZ2luKSB8fCAhaXNOZXdNZXNzYWdlKG1lc3NhZ2VJZCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvciAmJiB3aW4ucGFyZW50ICE9PSB3aW5kb3cpIHtcbiAgICAgICAgICBheGUubG9nKG1lc3NhZ2UpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChkYXRhLnRvcGljKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uZGVyID0gY3JlYXRlUmVzcG9uZGVyKHdpbiwgY2hhbm5lbElkKTtcbiAgICAgICAgICAgIGFzc2VydElzUGFyZW50V2luZG93KHdpbik7XG4gICAgICAgICAgICB0b3BpY0hhbmRsZXIoZGF0YSwgcmVzcG9uZGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbFJlcGx5SGFuZGxlcih3aW4sIGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBwcm9jZXNzRXJyb3Iod2luLCBlcnJvciwgY2hhbm5lbElkKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXhlLmxvZyhlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2FsbFJlcGx5SGFuZGxlcih3aW4sIGRhdGEpIHtcbiAgICAgIHZhciBjaGFubmVsSWQgPSBkYXRhLmNoYW5uZWxJZCwgbWVzc2FnZSA9IGRhdGEubWVzc2FnZSwga2VlcGFsaXZlID0gZGF0YS5rZWVwYWxpdmU7XG4gICAgICB2YXIgX3JlZjUgPSBnZXRSZXBseUhhbmRsZXIoY2hhbm5lbElkKSB8fCB7fSwgcmVwbHlIYW5kbGVyID0gX3JlZjUucmVwbHlIYW5kbGVyLCBzZW5kVG9QYXJlbnQgPSBfcmVmNS5zZW5kVG9QYXJlbnQ7XG4gICAgICBpZiAoIXJlcGx5SGFuZGxlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZW5kVG9QYXJlbnQgPyBhc3NlcnRJc1BhcmVudFdpbmRvdyh3aW4pIDogYXNzZXJ0SXNGcmFtZVdpbmRvdyh3aW4pO1xuICAgICAgdmFyIHJlc3BvbmRlciA9IGNyZWF0ZVJlc3BvbmRlcih3aW4sIGNoYW5uZWxJZCwgc2VuZFRvUGFyZW50KTtcbiAgICAgIGlmICgha2VlcGFsaXZlICYmIGNoYW5uZWxJZCkge1xuICAgICAgICBkZWxldGVSZXBseUhhbmRsZXIoY2hhbm5lbElkKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcGx5SGFuZGxlcihtZXNzYWdlLCBrZWVwYWxpdmUsIHJlc3BvbmRlcik7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBheGUubG9nKGVycm9yKTtcbiAgICAgICAgcmVzcG9uZGVyKGVycm9yLCBrZWVwYWxpdmUpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZnJhbWVNZXNzZW5nZXIgPSB7XG4gICAgICBvcGVuOiBmdW5jdGlvbiBvcGVuKHRvcGljSGFuZGxlcikge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihtZXNzYWdlRXZlbnQpIHtcbiAgICAgICAgICBtZXNzYWdlSGFuZGxlcihtZXNzYWdlRXZlbnQsIHRvcGljSGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgcG9zdDogZnVuY3Rpb24gcG9zdCh3aW4sIGRhdGEsIHJlcGx5SGFuZGxlcikge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3N0TWVzc2FnZSh3aW4sIGRhdGEsIGZhbHNlLCByZXBseUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gc2V0RGVmYXVsdEZyYW1lTWVzc2VuZ2VyKHJlc3BvbmRhYmxlMikge1xuICAgICAgcmVzcG9uZGFibGUyLnVwZGF0ZU1lc3NlbmdlcihmcmFtZU1lc3Nlbmdlcik7XG4gICAgfVxuICAgIHZhciBjbG9zZUhhbmRsZXI7XG4gICAgdmFyIHBvc3RNZXNzYWdlMjtcbiAgICB2YXIgdG9waWNIYW5kbGVycyA9IHt9O1xuICAgIGZ1bmN0aW9uIF9yZXNwb25kYWJsZSh3aW4sIHRvcGljLCBtZXNzYWdlLCBrZWVwYWxpdmUsIHJlcGx5SGFuZGxlcikge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgY2hhbm5lbElkOiAnJy5jb25jYXQodjQoKSwgJzonKS5jb25jYXQodjQoKSksXG4gICAgICAgIGtlZXBhbGl2ZToga2VlcGFsaXZlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlMih3aW4sIGRhdGEsIHJlcGx5SGFuZGxlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VMaXN0ZW5lcihkYXRhLCByZXNwb25kZXIpIHtcbiAgICAgIHZhciB0b3BpYyA9IGRhdGEudG9waWMsIG1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2UsIGtlZXBhbGl2ZSA9IGRhdGEua2VlcGFsaXZlO1xuICAgICAgdmFyIHRvcGljSGFuZGxlciA9IHRvcGljSGFuZGxlcnNbdG9waWNdO1xuICAgICAgaWYgKCF0b3BpY0hhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgdG9waWNIYW5kbGVyKG1lc3NhZ2UsIGtlZXBhbGl2ZSwgcmVzcG9uZGVyKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGF4ZS5sb2coZXJyb3IpO1xuICAgICAgICByZXNwb25kZXIoZXJyb3IsIGtlZXBhbGl2ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIF9yZXNwb25kYWJsZS51cGRhdGVNZXNzZW5nZXIgPSBmdW5jdGlvbiB1cGRhdGVNZXNzZW5nZXIoX3JlZjYpIHtcbiAgICAgIHZhciBvcGVuID0gX3JlZjYub3BlbiwgcG9zdCA9IF9yZWY2LnBvc3Q7XG4gICAgICBhc3NlcnRfZGVmYXVsdCh0eXBlb2Ygb3BlbiA9PT0gJ2Z1bmN0aW9uJywgJ29wZW4gY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICBhc3NlcnRfZGVmYXVsdCh0eXBlb2YgcG9zdCA9PT0gJ2Z1bmN0aW9uJywgJ3Bvc3QgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICBpZiAoY2xvc2VIYW5kbGVyKSB7XG4gICAgICAgIGNsb3NlSGFuZGxlcigpO1xuICAgICAgfVxuICAgICAgdmFyIGNsb3NlID0gb3BlbihtZXNzYWdlTGlzdGVuZXIpO1xuICAgICAgaWYgKGNsb3NlKSB7XG4gICAgICAgIGFzc2VydF9kZWZhdWx0KHR5cGVvZiBjbG9zZSA9PT0gJ2Z1bmN0aW9uJywgJ29wZW4gY2FsbGJhY2sgbXVzdCByZXR1cm4gYSBjbGVhbnVwIGZ1bmN0aW9uJyk7XG4gICAgICAgIGNsb3NlSGFuZGxlciA9IGNsb3NlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VIYW5kbGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHBvc3RNZXNzYWdlMiA9IHBvc3Q7XG4gICAgfTtcbiAgICBfcmVzcG9uZGFibGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKHRvcGljLCB0b3BpY0hhbmRsZXIpIHtcbiAgICAgIGFzc2VydF9kZWZhdWx0KHR5cGVvZiB0b3BpY0hhbmRsZXIgPT09ICdmdW5jdGlvbicsICdTdWJzY3JpYmVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgYXNzZXJ0X2RlZmF1bHQoIXRvcGljSGFuZGxlcnNbdG9waWNdLCAnVG9waWMgJy5jb25jYXQodG9waWMsICcgaXMgYWxyZWFkeSByZWdpc3RlcmVkIHRvLicpKTtcbiAgICAgIHRvcGljSGFuZGxlcnNbdG9waWNdID0gdG9waWNIYW5kbGVyO1xuICAgIH07XG4gICAgX3Jlc3BvbmRhYmxlLmlzSW5GcmFtZSA9IGZ1bmN0aW9uIGlzSW5GcmFtZSgpIHtcbiAgICAgIHZhciB3aW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHdpbmRvdztcbiAgICAgIHJldHVybiAhIXdpbi5mcmFtZUVsZW1lbnQ7XG4gICAgfTtcbiAgICBzZXREZWZhdWx0RnJhbWVNZXNzZW5nZXIoX3Jlc3BvbmRhYmxlKTtcbiAgICBmdW5jdGlvbiBfc2VuZENvbW1hbmRUb0ZyYW1lKG5vZGUsIHBhcmFtZXRlcnMsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIF9wYXJhbWV0ZXJzJG9wdGlvbnMkcCwgX3BhcmFtZXRlcnMkb3B0aW9ucztcbiAgICAgIHZhciB3aW4gPSBub2RlLmNvbnRlbnRXaW5kb3c7XG4gICAgICB2YXIgcGluZ1dhaXRUaW1lID0gKF9wYXJhbWV0ZXJzJG9wdGlvbnMkcCA9IChfcGFyYW1ldGVycyRvcHRpb25zID0gcGFyYW1ldGVycy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfcGFyYW1ldGVycyRvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGFyYW1ldGVycyRvcHRpb25zLnBpbmdXYWl0VGltZSkgIT09IG51bGwgJiYgX3BhcmFtZXRlcnMkb3B0aW9ucyRwICE9PSB2b2lkIDAgPyBfcGFyYW1ldGVycyRvcHRpb25zJHAgOiA1MDA7XG4gICAgICBpZiAoIXdpbikge1xuICAgICAgICBsb2dfZGVmYXVsdCgnRnJhbWUgZG9lcyBub3QgaGF2ZSBhIGNvbnRlbnQgd2luZG93Jywgbm9kZSk7XG4gICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwaW5nV2FpdFRpbWUgPT09IDApIHtcbiAgICAgICAgY2FsbEF4ZVN0YXJ0KG5vZGUsIHBhcmFtZXRlcnMsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCFwYXJhbWV0ZXJzLmRlYnVnKSB7XG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKCdObyByZXNwb25zZSBmcm9tIGZyYW1lJywgbm9kZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgICB9LCBwaW5nV2FpdFRpbWUpO1xuICAgICAgX3Jlc3BvbmRhYmxlKHdpbiwgJ2F4ZS5waW5nJywgbnVsbCwgdm9pZCAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICBjYWxsQXhlU3RhcnQobm9kZSwgcGFyYW1ldGVycywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYWxsQXhlU3RhcnQobm9kZSwgcGFyYW1ldGVycywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgX3BhcmFtZXRlcnMkb3B0aW9ucyRmLCBfcGFyYW1ldGVycyRvcHRpb25zMjtcbiAgICAgIHZhciBmcmFtZVdhaXRUaW1lID0gKF9wYXJhbWV0ZXJzJG9wdGlvbnMkZiA9IChfcGFyYW1ldGVycyRvcHRpb25zMiA9IHBhcmFtZXRlcnMub3B0aW9ucykgPT09IG51bGwgfHwgX3BhcmFtZXRlcnMkb3B0aW9uczIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wYXJhbWV0ZXJzJG9wdGlvbnMyLmZyYW1lV2FpdFRpbWUpICE9PSBudWxsICYmIF9wYXJhbWV0ZXJzJG9wdGlvbnMkZiAhPT0gdm9pZCAwID8gX3BhcmFtZXRlcnMkb3B0aW9ucyRmIDogNmU0O1xuICAgICAgdmFyIHdpbiA9IG5vZGUuY29udGVudFdpbmRvdztcbiAgICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiBjb2xsZWN0UmVzdWx0RnJhbWVzVGltZW91dCgpIHtcbiAgICAgICAgcmVqZWN0KGVycignQXhlIGluIGZyYW1lIHRpbWVkIG91dCcsIG5vZGUpKTtcbiAgICAgIH0sIGZyYW1lV2FpdFRpbWUpO1xuICAgICAgX3Jlc3BvbmRhYmxlKHdpbiwgJ2F4ZS5zdGFydCcsIHBhcmFtZXRlcnMsIHZvaWQgMCwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlcnIobWVzc2FnZSwgbm9kZSkge1xuICAgICAgdmFyIHNlbGVjdG9yO1xuICAgICAgaWYgKGF4ZS5fdHJlZSkge1xuICAgICAgICBzZWxlY3RvciA9IGdldF9zZWxlY3Rvcl9kZWZhdWx0KG5vZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlICsgJzogJyArIChzZWxlY3RvciB8fCBub2RlKSk7XG4gICAgfVxuICAgIHZhciBjdXN0b21TZXJpYWxpemVyID0gbnVsbDtcbiAgICB2YXIgbm9kZVNlcmlhbGl6ZXIgPSB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShzZXJpYWxpemVyKSB7XG4gICAgICAgIGFzc2VydF9kZWZhdWx0KF90eXBlb2Yoc2VyaWFsaXplcikgPT09ICdvYmplY3QnLCAnc2VyaWFsaXplciBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgICAgICBjdXN0b21TZXJpYWxpemVyID0gc2VyaWFsaXplcjtcbiAgICAgIH0sXG4gICAgICB0b1NwZWM6IGZ1bmN0aW9uIHRvU3BlYyhub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlU2VyaWFsaXplci5kcUVsbVRvU3BlYyhuZXcgZHFfZWxlbWVudF9kZWZhdWx0KG5vZGUpKTtcbiAgICAgIH0sXG4gICAgICBkcUVsbVRvU3BlYzogZnVuY3Rpb24gZHFFbG1Ub1NwZWMoZHFFbG0sIHJ1bk9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9jdXN0b21TZXJpYWxpemVyO1xuICAgICAgICBpZiAoZHFFbG0gaW5zdGFuY2VvZiBkcV9lbGVtZW50X2RlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGRxRWxtO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydW5PcHRpb25zKSB7XG4gICAgICAgICAgZHFFbG0gPSBjbG9uZUxpbWl0ZWREcUVsZW1lbnQoZHFFbG0sIHJ1bk9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKChfY3VzdG9tU2VyaWFsaXplciA9IGN1c3RvbVNlcmlhbGl6ZXIpID09PSBudWxsIHx8IF9jdXN0b21TZXJpYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY3VzdG9tU2VyaWFsaXplci50b1NwZWMpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGN1c3RvbVNlcmlhbGl6ZXIudG9TcGVjKGRxRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHFFbG0udG9KU09OKCk7XG4gICAgICB9LFxuICAgICAgbWVyZ2VTcGVjczogZnVuY3Rpb24gbWVyZ2VTcGVjcyhub2RlU3BlYywgcGFyZW50RnJhbWVTcGVjKSB7XG4gICAgICAgIHZhciBfY3VzdG9tU2VyaWFsaXplcjI7XG4gICAgICAgIGlmICh0eXBlb2YgKChfY3VzdG9tU2VyaWFsaXplcjIgPSBjdXN0b21TZXJpYWxpemVyKSA9PT0gbnVsbCB8fCBfY3VzdG9tU2VyaWFsaXplcjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jdXN0b21TZXJpYWxpemVyMi5tZXJnZVNwZWNzKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBjdXN0b21TZXJpYWxpemVyLm1lcmdlU3BlY3Mobm9kZVNwZWMsIHBhcmVudEZyYW1lU3BlYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRxX2VsZW1lbnRfZGVmYXVsdC5tZXJnZVNwZWNzKG5vZGVTcGVjLCBwYXJlbnRGcmFtZVNwZWMpO1xuICAgICAgfSxcbiAgICAgIG1hcFJhd1Jlc3VsdHM6IGZ1bmN0aW9uIG1hcFJhd1Jlc3VsdHMocmF3UmVzdWx0cykge1xuICAgICAgICByZXR1cm4gcmF3UmVzdWx0cy5tYXAoZnVuY3Rpb24ocmF3UmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCByYXdSZXN1bHQsIHtcbiAgICAgICAgICAgIG5vZGVzOiBub2RlU2VyaWFsaXplci5tYXBSYXdOb2RlUmVzdWx0cyhyYXdSZXN1bHQubm9kZXMpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG1hcFJhd05vZGVSZXN1bHRzOiBmdW5jdGlvbiBtYXBSYXdOb2RlUmVzdWx0cyhub2RlUmVzdWx0cykge1xuICAgICAgICByZXR1cm4gbm9kZVJlc3VsdHMgPT09IG51bGwgfHwgbm9kZVJlc3VsdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGVSZXN1bHRzLm1hcChmdW5jdGlvbihfcmVmNykge1xuICAgICAgICAgIHZhciBub2RlID0gX3JlZjcubm9kZSwgbm9kZVJlc3VsdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNywgX2V4Y2x1ZGVkKTtcbiAgICAgICAgICBub2RlUmVzdWx0Lm5vZGUgPSBub2RlU2VyaWFsaXplci5kcUVsbVRvU3BlYyhub2RlKTtcbiAgICAgICAgICBmb3IgKHZhciBfaTIgPSAwLCBfYXJyID0gWyAnYW55JywgJ2FsbCcsICdub25lJyBdOyBfaTIgPCBfYXJyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgICAgIHZhciB0eXBlMiA9IF9hcnJbX2kyXTtcbiAgICAgICAgICAgIG5vZGVSZXN1bHRbdHlwZTJdID0gbm9kZVJlc3VsdFt0eXBlMl0ubWFwKGZ1bmN0aW9uKF9yZWY4KSB7XG4gICAgICAgICAgICAgIHZhciByZWxhdGVkTm9kZXMgPSBfcmVmOC5yZWxhdGVkTm9kZXMsIGNoZWNrUmVzdWx0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY4LCBfZXhjbHVkZWQyKTtcbiAgICAgICAgICAgICAgY2hlY2tSZXN1bHQucmVsYXRlZE5vZGVzID0gcmVsYXRlZE5vZGVzLm1hcChub2RlU2VyaWFsaXplci5kcUVsbVRvU3BlYyk7XG4gICAgICAgICAgICAgIHJldHVybiBjaGVja1Jlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbm9kZVJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgbm9kZV9zZXJpYWxpemVyX2RlZmF1bHQgPSBub2RlU2VyaWFsaXplcjtcbiAgICBmdW5jdGlvbiBjbG9uZUxpbWl0ZWREcUVsZW1lbnQoZHFFbG0sIHJ1bk9wdGlvbnMpIHtcbiAgICAgIHZhciBmcm9tRnJhbWUyID0gZHFFbG0uZnJvbUZyYW1lO1xuICAgICAgdmFyIGhhc0FuY2VzdHJ5ID0gcnVuT3B0aW9ucy5hbmNlc3RyeSwgaGFzWHBhdGggPSBydW5PcHRpb25zLnhwYXRoO1xuICAgICAgdmFyIGhhc1NlbGVjdG9ycyA9IHJ1bk9wdGlvbnMuc2VsZWN0b3JzICE9PSBmYWxzZSB8fCBmcm9tRnJhbWUyO1xuICAgICAgZHFFbG0gPSBuZXcgZHFfZWxlbWVudF9kZWZhdWx0KGRxRWxtLmVsZW1lbnQsIHJ1bk9wdGlvbnMsIHtcbiAgICAgICAgc291cmNlOiBkcUVsbS5zb3VyY2UsXG4gICAgICAgIG5vZGVJbmRleGVzOiBkcUVsbS5ub2RlSW5kZXhlcyxcbiAgICAgICAgc2VsZWN0b3I6IGhhc1NlbGVjdG9ycyA/IGRxRWxtLnNlbGVjdG9yIDogWyAnOnJvb3QnIF0sXG4gICAgICAgIGFuY2VzdHJ5OiBoYXNBbmNlc3RyeSA/IGRxRWxtLmFuY2VzdHJ5IDogWyAnOnJvb3QnIF0sXG4gICAgICAgIHhwYXRoOiBoYXNYcGF0aCA/IGRxRWxtLnhwYXRoIDogJy8nXG4gICAgICB9KTtcbiAgICAgIGRxRWxtLmZyb21GcmFtZSA9IGZyb21GcmFtZTI7XG4gICAgICByZXR1cm4gZHFFbG07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEFsbENoZWNrcyhvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KG9iamVjdC5hbnkgfHwgW10pLmNvbmNhdChvYmplY3QuYWxsIHx8IFtdKS5jb25jYXQob2JqZWN0Lm5vbmUgfHwgW10pO1xuICAgIH1cbiAgICB2YXIgZ2V0X2FsbF9jaGVja3NfZGVmYXVsdCA9IGdldEFsbENoZWNrcztcbiAgICBmdW5jdGlvbiBmaW5kQnkoYXJyYXksIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmluZChmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIF90eXBlb2Yob2JqKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0Lmhhc093bihvYmosIGtleSkgJiYgb2JqW2tleV0gPT09IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGZpbmRfYnlfZGVmYXVsdCA9IGZpbmRCeTtcbiAgICBmdW5jdGlvbiBwdXNoRnJhbWUocmVzdWx0U2V0LCBvcHRpb25zLCBmcmFtZVNwZWMpIHtcbiAgICAgIHJlc3VsdFNldC5mb3JFYWNoKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICByZXMubm9kZSA9IG5vZGVfc2VyaWFsaXplcl9kZWZhdWx0Lm1lcmdlU3BlY3MocmVzLm5vZGUsIGZyYW1lU3BlYyk7XG4gICAgICAgIHZhciBjaGVja3MgPSBnZXRfYWxsX2NoZWNrc19kZWZhdWx0KHJlcyk7XG4gICAgICAgIGNoZWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNoZWNrKSB7XG4gICAgICAgICAgY2hlY2sucmVsYXRlZE5vZGVzID0gY2hlY2sucmVsYXRlZE5vZGVzLm1hcChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZV9zZXJpYWxpemVyX2RlZmF1bHQubWVyZ2VTcGVjcyhub2RlLCBmcmFtZVNwZWMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzcGxpY2VOb2Rlcyh0YXJnZXQsIHRvMikge1xuICAgICAgdmFyIGZpcnN0RnJvbUZyYW1lID0gdG8yWzBdLm5vZGU7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IHRhcmdldC5sZW5ndGg7IF9pMysrKSB7XG4gICAgICAgIG5vZGUgPSB0YXJnZXRbX2kzXS5ub2RlO1xuICAgICAgICB2YXIgcmVzdWx0U29ydCA9IG5vZGVJbmRleFNvcnQobm9kZS5ub2RlSW5kZXhlcywgZmlyc3RGcm9tRnJhbWUubm9kZUluZGV4ZXMpO1xuICAgICAgICBpZiAocmVzdWx0U29ydCA+IDAgfHwgcmVzdWx0U29ydCA9PT0gMCAmJiBmaXJzdEZyb21GcmFtZS5zZWxlY3Rvci5sZW5ndGggPCBub2RlLnNlbGVjdG9yLmxlbmd0aCkge1xuICAgICAgICAgIHRhcmdldC5zcGxpY2UuYXBwbHkodGFyZ2V0LCBbIF9pMywgMCBdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodG8yKSkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGFyZ2V0LnB1c2guYXBwbHkodGFyZ2V0LCBfdG9Db25zdW1hYmxlQXJyYXkodG8yKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVJlc3VsdChyZXN1bHQpIHtcbiAgICAgIGlmICghcmVzdWx0IHx8ICFyZXN1bHQucmVzdWx0cykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQucmVzdWx0cykpIHtcbiAgICAgICAgcmV0dXJuIFsgcmVzdWx0LnJlc3VsdHMgXTtcbiAgICAgIH1cbiAgICAgIGlmICghcmVzdWx0LnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHRzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtZXJnZVJlc3VsdHMoZnJhbWVSZXN1bHRzLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbWVyZ2VkUmVzdWx0ID0gW107XG4gICAgICBmcmFtZVJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihmcmFtZVJlc3VsdCkge1xuICAgICAgICB2YXIgcmVzdWx0cyA9IG5vcm1hbGl6ZVJlc3VsdChmcmFtZVJlc3VsdCk7XG4gICAgICAgIGlmICghcmVzdWx0cyB8fCAhcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZyYW1lU3BlYyA9IGdldEZyYW1lU3BlYyhmcmFtZVJlc3VsdCk7XG4gICAgICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihydWxlUmVzdWx0KSB7XG4gICAgICAgICAgaWYgKHJ1bGVSZXN1bHQubm9kZXMgJiYgZnJhbWVTcGVjKSB7XG4gICAgICAgICAgICBwdXNoRnJhbWUocnVsZVJlc3VsdC5ub2Rlcywgb3B0aW9ucywgZnJhbWVTcGVjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlcyA9IGZpbmRfYnlfZGVmYXVsdChtZXJnZWRSZXN1bHQsICdpZCcsIHJ1bGVSZXN1bHQuaWQpO1xuICAgICAgICAgIGlmICghcmVzKSB7XG4gICAgICAgICAgICBtZXJnZWRSZXN1bHQucHVzaChydWxlUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJ1bGVSZXN1bHQubm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHNwbGljZU5vZGVzKHJlcy5ub2RlcywgcnVsZVJlc3VsdC5ub2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgbWVyZ2VkUmVzdWx0LmZvckVhY2goZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQubm9kZXMpIHtcbiAgICAgICAgICByZXN1bHQubm9kZXMuc29ydChmdW5jdGlvbihub2RlQSwgbm9kZUIpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlSW5kZXhTb3J0KG5vZGVBLm5vZGUubm9kZUluZGV4ZXMsIG5vZGVCLm5vZGUubm9kZUluZGV4ZXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtZXJnZWRSZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vZGVJbmRleFNvcnQoKSB7XG4gICAgICB2YXIgbm9kZUluZGV4ZXNBID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgICAgIHZhciBub2RlSW5kZXhlc0IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KG5vZGVJbmRleGVzQSA9PT0gbnVsbCB8fCBub2RlSW5kZXhlc0EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGVJbmRleGVzQS5sZW5ndGgsIG5vZGVJbmRleGVzQiA9PT0gbnVsbCB8fCBub2RlSW5kZXhlc0IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGVJbmRleGVzQi5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgbGVuZ3RoOyBfaTQrKykge1xuICAgICAgICB2YXIgaW5kZXhBID0gbm9kZUluZGV4ZXNBID09PSBudWxsIHx8IG5vZGVJbmRleGVzQSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZUluZGV4ZXNBW19pNF07XG4gICAgICAgIHZhciBpbmRleEIgPSBub2RlSW5kZXhlc0IgPT09IG51bGwgfHwgbm9kZUluZGV4ZXNCID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub2RlSW5kZXhlc0JbX2k0XTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbmRleEEgIT09ICdudW1iZXInIHx8IGlzTmFOKGluZGV4QSkpIHtcbiAgICAgICAgICByZXR1cm4gX2k0ID09PSAwID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaW5kZXhCICE9PSAnbnVtYmVyJyB8fCBpc05hTihpbmRleEIpKSB7XG4gICAgICAgICAgcmV0dXJuIF9pNCA9PT0gMCA/IC0xIDogMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXhBICE9PSBpbmRleEIpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXhBIC0gaW5kZXhCO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIG1lcmdlX3Jlc3VsdHNfZGVmYXVsdCA9IG1lcmdlUmVzdWx0cztcbiAgICBmdW5jdGlvbiBnZXRGcmFtZVNwZWMoZnJhbWVSZXN1bHQpIHtcbiAgICAgIGlmIChmcmFtZVJlc3VsdC5mcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVfc2VyaWFsaXplcl9kZWZhdWx0LnRvU3BlYyhmcmFtZVJlc3VsdC5mcmFtZUVsZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmIChmcmFtZVJlc3VsdC5mcmFtZVNwZWMpIHtcbiAgICAgICAgcmV0dXJuIGZyYW1lUmVzdWx0LmZyYW1lU3BlYztcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfY29sbGVjdFJlc3VsdHNGcm9tRnJhbWVzKHBhcmVudENvbnRlbnQsIG9wdGlvbnMsIGNvbW1hbmQsIHBhcmFtZXRlciwgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBvcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgZWxlbWVudFJlZjogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgdmFyIHEgPSBxdWV1ZV9kZWZhdWx0KCk7XG4gICAgICB2YXIgZnJhbWVzID0gcGFyZW50Q29udGVudC5mcmFtZXM7XG4gICAgICBmcmFtZXMuZm9yRWFjaChmdW5jdGlvbihfcmVmOSkge1xuICAgICAgICB2YXIgZnJhbWVFbGVtZW50ID0gX3JlZjkubm9kZSwgY29udGV4dCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmOSwgX2V4Y2x1ZGVkMyk7XG4gICAgICAgIHEuZGVmZXIoZnVuY3Rpb24ocmVzLCByZWopIHtcbiAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICAgIGNvbW1hbmQ6IGNvbW1hbmQsXG4gICAgICAgICAgICBwYXJhbWV0ZXI6IHBhcmFtZXRlcixcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHRcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKHJlc3VsdHMpIHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0cykge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcyh7XG4gICAgICAgICAgICAgIHJlc3VsdHM6IHJlc3VsdHMsXG4gICAgICAgICAgICAgIGZyYW1lRWxlbWVudDogZnJhbWVFbGVtZW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3NlbmRDb21tYW5kVG9GcmFtZShmcmFtZUVsZW1lbnQsIHBhcmFtcywgY2FsbGJhY2ssIHJlaik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBxLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICByZXNvbHZlKG1lcmdlX3Jlc3VsdHNfZGVmYXVsdChkYXRhLCBvcHRpb25zKSk7XG4gICAgICB9KVsnY2F0Y2gnXShyZWplY3QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfY29udGFpbnModk5vZGUsIG90aGVyVk5vZGUpIHtcbiAgICAgIGlmICghdk5vZGUuc2hhZG93SWQgJiYgIW90aGVyVk5vZGUuc2hhZG93SWQgJiYgdk5vZGUuYWN0dWFsTm9kZSAmJiB0eXBlb2Ygdk5vZGUuYWN0dWFsTm9kZS5jb250YWlucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdk5vZGUuYWN0dWFsTm9kZS5jb250YWlucyhvdGhlclZOb2RlLmFjdHVhbE5vZGUpO1xuICAgICAgfVxuICAgICAgZG8ge1xuICAgICAgICBpZiAodk5vZGUgPT09IG90aGVyVk5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhlclZOb2RlLm5vZGVJbmRleCA8IHZOb2RlLm5vZGVJbmRleCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlclZOb2RlID0gb3RoZXJWTm9kZS5wYXJlbnQ7XG4gICAgICB9IHdoaWxlIChvdGhlclZOb2RlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVlcE1lcmdlKCkge1xuICAgICAgdmFyIHRhcmdldCA9IHt9O1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNvdXJjZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICBzb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIGlmICghc291cmNlIHx8IF90eXBlb2Yoc291cmNlKSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pNSA9IDAsIF9PYmplY3Qka2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IF9pNSA8IF9PYmplY3Qka2V5cy5sZW5ndGg7IF9pNSsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IF9PYmplY3Qka2V5c1tfaTVdO1xuICAgICAgICAgIGlmICghdGFyZ2V0Lmhhc093blByb3BlcnR5KGtleSkgfHwgX3R5cGVvZihzb3VyY2Vba2V5XSkgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodGFyZ2V0W2tleV0pKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IGRlZXBNZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICB2YXIgZGVlcF9tZXJnZV9kZWZhdWx0ID0gZGVlcE1lcmdlO1xuICAgIGZ1bmN0aW9uIGV4dGVuZE1ldGFEYXRhKHRvMiwgZnJvbSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0bzIsIGZyb20pO1xuICAgICAgT2JqZWN0LmtleXMoZnJvbSkuZmlsdGVyKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBmcm9tW3Byb3BdID09PSAnZnVuY3Rpb24nO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHRvMltwcm9wXSA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdG8yW3Byb3BdID0gZnJvbVtwcm9wXSh0bzIpO1xuICAgICAgICB9IGNhdGNoIChfdW51c2VkMikge31cbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgZXh0ZW5kX21ldGFfZGF0YV9kZWZhdWx0ID0gZXh0ZW5kTWV0YURhdGE7XG4gICAgdmFyIHBvc3NpYmxlU2hhZG93Um9vdHMgPSBbICdhcnRpY2xlJywgJ2FzaWRlJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdkaXYnLCAnZm9vdGVyJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWRlcicsICdtYWluJywgJ25hdicsICdwJywgJ3NlY3Rpb24nLCAnc3BhbicgXTtcbiAgICBmdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAgICAgaWYgKG5vZGUuc2hhZG93Um9vdCkge1xuICAgICAgICB2YXIgbm9kZU5hbWUyID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAocG9zc2libGVTaGFkb3dSb290cy5pbmNsdWRlcyhub2RlTmFtZTIpIHx8IC9eW2Etel1bYS16MC05Xy4tXSotW2EtejAtOV8uLV0qJC8udGVzdChub2RlTmFtZTIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGlzX3NoYWRvd19yb290X2RlZmF1bHQgPSBpc1NoYWRvd1Jvb3Q7XG4gICAgdmFyIGRvbV9leHBvcnRzID0ge307XG4gICAgX19leHBvcnQoZG9tX2V4cG9ydHMsIHtcbiAgICAgIGNyZWF0ZUdyaWQ6IGZ1bmN0aW9uIGNyZWF0ZUdyaWQoKSB7XG4gICAgICAgIHJldHVybiBfY3JlYXRlR3JpZDtcbiAgICAgIH0sXG4gICAgICBmaW5kRWxtc0luQ29udGV4dDogZnVuY3Rpb24gZmluZEVsbXNJbkNvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiBmaW5kX2VsbXNfaW5fY29udGV4dF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGZpbmROZWFyYnlFbG1zOiBmdW5jdGlvbiBmaW5kTmVhcmJ5RWxtcygpIHtcbiAgICAgICAgcmV0dXJuIF9maW5kTmVhcmJ5RWxtcztcbiAgICAgIH0sXG4gICAgICBmaW5kVXA6IGZ1bmN0aW9uIGZpbmRVcCgpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRfdXBfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBmaW5kVXBWaXJ0dWFsOiBmdW5jdGlvbiBmaW5kVXBWaXJ0dWFsKCkge1xuICAgICAgICByZXR1cm4gZmluZF91cF92aXJ0dWFsX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZm9jdXNEaXNhYmxlZDogZnVuY3Rpb24gZm9jdXNEaXNhYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIGZvY3VzX2Rpc2FibGVkX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0Q29tcG9zZWRQYXJlbnQ6IGZ1bmN0aW9uIGdldENvbXBvc2VkUGFyZW50KCkge1xuICAgICAgICByZXR1cm4gZ2V0X2NvbXBvc2VkX3BhcmVudF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldEVsZW1lbnRCeVJlZmVyZW5jZTogZnVuY3Rpb24gZ2V0RWxlbWVudEJ5UmVmZXJlbmNlKCkge1xuICAgICAgICByZXR1cm4gZ2V0X2VsZW1lbnRfYnlfcmVmZXJlbmNlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0RWxlbWVudENvb3JkaW5hdGVzOiBmdW5jdGlvbiBnZXRFbGVtZW50Q29vcmRpbmF0ZXMoKSB7XG4gICAgICAgIHJldHVybiBnZXRfZWxlbWVudF9jb29yZGluYXRlc19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldEVsZW1lbnRTdGFjazogZnVuY3Rpb24gZ2V0RWxlbWVudFN0YWNrKCkge1xuICAgICAgICByZXR1cm4gZ2V0X2VsZW1lbnRfc3RhY2tfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRNb2RhbERpYWxvZzogZnVuY3Rpb24gZ2V0TW9kYWxEaWFsb2coKSB7XG4gICAgICAgIHJldHVybiBnZXRfbW9kYWxfZGlhbG9nX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0T3ZlcmZsb3dIaWRkZW5BbmNlc3RvcnM6IGZ1bmN0aW9uIGdldE92ZXJmbG93SGlkZGVuQW5jZXN0b3JzKCkge1xuICAgICAgICByZXR1cm4gZ2V0X292ZXJmbG93X2hpZGRlbl9hbmNlc3RvcnNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRSb290Tm9kZTogZnVuY3Rpb24gZ2V0Um9vdE5vZGUoKSB7XG4gICAgICAgIHJldHVybiBnZXRfcm9vdF9ub2RlX2RlZmF1bHQyO1xuICAgICAgfSxcbiAgICAgIGdldFNjcm9sbE9mZnNldDogZnVuY3Rpb24gZ2V0U2Nyb2xsT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gZ2V0X3Njcm9sbF9vZmZzZXRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRUYWJiYWJsZUVsZW1lbnRzOiBmdW5jdGlvbiBnZXRUYWJiYWJsZUVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gZ2V0X3RhYmJhYmxlX2VsZW1lbnRzX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0VGFyZ2V0UmVjdHM6IGZ1bmN0aW9uIGdldFRhcmdldFJlY3RzKCkge1xuICAgICAgICByZXR1cm4gZ2V0X3RhcmdldF9yZWN0c19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFRhcmdldFNpemU6IGZ1bmN0aW9uIGdldFRhcmdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiBnZXRfdGFyZ2V0X3NpemVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRUZXh0RWxlbWVudFN0YWNrOiBmdW5jdGlvbiBnZXRUZXh0RWxlbWVudFN0YWNrKCkge1xuICAgICAgICByZXR1cm4gZ2V0X3RleHRfZWxlbWVudF9zdGFja19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFZpZXdwb3J0U2l6ZTogZnVuY3Rpb24gZ2V0Vmlld3BvcnRTaXplKCkge1xuICAgICAgICByZXR1cm4gZ2V0X3ZpZXdwb3J0X3NpemVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRWaXNpYmxlQ2hpbGRUZXh0UmVjdHM6IGZ1bmN0aW9uIGdldFZpc2libGVDaGlsZFRleHRSZWN0cygpIHtcbiAgICAgICAgcmV0dXJuIGdldF92aXNpYmxlX2NoaWxkX3RleHRfcmVjdHNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBoYXNDb250ZW50OiBmdW5jdGlvbiBoYXNDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gaGFzX2NvbnRlbnRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBoYXNDb250ZW50VmlydHVhbDogZnVuY3Rpb24gaGFzQ29udGVudFZpcnR1YWwoKSB7XG4gICAgICAgIHJldHVybiBoYXNfY29udGVudF92aXJ0dWFsX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaGFzTGFuZ1RleHQ6IGZ1bmN0aW9uIGhhc0xhbmdUZXh0KCkge1xuICAgICAgICByZXR1cm4gX2hhc0xhbmdUZXh0O1xuICAgICAgfSxcbiAgICAgIGlkcmVmczogZnVuY3Rpb24gaWRyZWZzKCkge1xuICAgICAgICByZXR1cm4gaWRyZWZzX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaW5zZXJ0ZWRJbnRvRm9jdXNPcmRlcjogZnVuY3Rpb24gaW5zZXJ0ZWRJbnRvRm9jdXNPcmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGluc2VydGVkX2ludG9fZm9jdXNfb3JkZXJfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc0N1cnJlbnRQYWdlTGluazogZnVuY3Rpb24gaXNDdXJyZW50UGFnZUxpbmsoKSB7XG4gICAgICAgIHJldHVybiBfaXNDdXJyZW50UGFnZUxpbms7XG4gICAgICB9LFxuICAgICAgaXNGb2N1c2FibGU6IGZ1bmN0aW9uIGlzRm9jdXNhYmxlKCkge1xuICAgICAgICByZXR1cm4gX2lzRm9jdXNhYmxlO1xuICAgICAgfSxcbiAgICAgIGlzSFRNTDU6IGZ1bmN0aW9uIGlzSFRNTDUoKSB7XG4gICAgICAgIHJldHVybiBpc19odG1sNV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGlzSGlkZGVuRm9yRXZlcnlvbmU6IGZ1bmN0aW9uIGlzSGlkZGVuRm9yRXZlcnlvbmUoKSB7XG4gICAgICAgIHJldHVybiBfaXNIaWRkZW5Gb3JFdmVyeW9uZTtcbiAgICAgIH0sXG4gICAgICBpc0hpZGRlbldpdGhDU1M6IGZ1bmN0aW9uIGlzSGlkZGVuV2l0aENTUygpIHtcbiAgICAgICAgcmV0dXJuIGlzX2hpZGRlbl93aXRoX2Nzc19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGlzSW5UYWJPcmRlcjogZnVuY3Rpb24gaXNJblRhYk9yZGVyKCkge1xuICAgICAgICByZXR1cm4gX2lzSW5UYWJPcmRlcjtcbiAgICAgIH0sXG4gICAgICBpc0luVGV4dEJsb2NrOiBmdW5jdGlvbiBpc0luVGV4dEJsb2NrKCkge1xuICAgICAgICByZXR1cm4gaXNfaW5fdGV4dF9ibG9ja19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGlzSW5lcnQ6IGZ1bmN0aW9uIGlzSW5lcnQoKSB7XG4gICAgICAgIHJldHVybiBfaXNJbmVydDtcbiAgICAgIH0sXG4gICAgICBpc01vZGFsT3BlbjogZnVuY3Rpb24gaXNNb2RhbE9wZW4oKSB7XG4gICAgICAgIHJldHVybiBpc19tb2RhbF9vcGVuX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNNdWx0aWxpbmU6IGZ1bmN0aW9uIGlzTXVsdGlsaW5lKCkge1xuICAgICAgICByZXR1cm4gX2lzTXVsdGlsaW5lO1xuICAgICAgfSxcbiAgICAgIGlzTmF0aXZlbHlGb2N1c2FibGU6IGZ1bmN0aW9uIGlzTmF0aXZlbHlGb2N1c2FibGUoKSB7XG4gICAgICAgIHJldHVybiBpc19uYXRpdmVseV9mb2N1c2FibGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc05vZGU6IGZ1bmN0aW9uIGlzTm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIGlzX25vZGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc09mZnNjcmVlbjogZnVuY3Rpb24gaXNPZmZzY3JlZW4oKSB7XG4gICAgICAgIHJldHVybiBpc19vZmZzY3JlZW5fZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc09wYXF1ZTogZnVuY3Rpb24gaXNPcGFxdWUoKSB7XG4gICAgICAgIHJldHVybiBpc19vcGFxdWVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc1NraXBMaW5rOiBmdW5jdGlvbiBpc1NraXBMaW5rKCkge1xuICAgICAgICByZXR1cm4gX2lzU2tpcExpbms7XG4gICAgICB9LFxuICAgICAgaXNWaXNpYmxlOiBmdW5jdGlvbiBpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiBpc192aXNpYmxlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNWaXNpYmxlT25TY3JlZW46IGZ1bmN0aW9uIGlzVmlzaWJsZU9uU2NyZWVuKCkge1xuICAgICAgICByZXR1cm4gX2lzVmlzaWJsZU9uU2NyZWVuO1xuICAgICAgfSxcbiAgICAgIGlzVmlzaWJsZVRvU2NyZWVuUmVhZGVyczogZnVuY3Rpb24gaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzKCkge1xuICAgICAgICByZXR1cm4gX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVycztcbiAgICAgIH0sXG4gICAgICBpc1Zpc3VhbENvbnRlbnQ6IGZ1bmN0aW9uIGlzVmlzdWFsQ29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIGlzX3Zpc3VhbF9jb250ZW50X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgcmVkdWNlVG9FbGVtZW50c0JlbG93RmxvYXRpbmc6IGZ1bmN0aW9uIHJlZHVjZVRvRWxlbWVudHNCZWxvd0Zsb2F0aW5nKCkge1xuICAgICAgICByZXR1cm4gcmVkdWNlX3RvX2VsZW1lbnRzX2JlbG93X2Zsb2F0aW5nX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgc2hhZG93RWxlbWVudHNGcm9tUG9pbnQ6IGZ1bmN0aW9uIHNoYWRvd0VsZW1lbnRzRnJvbVBvaW50KCkge1xuICAgICAgICByZXR1cm4gc2hhZG93X2VsZW1lbnRzX2Zyb21fcG9pbnRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB1cmxQcm9wc0Zyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uIHVybFByb3BzRnJvbUF0dHJpYnV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHVybF9wcm9wc19mcm9tX2F0dHJpYnV0ZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHZpc3VhbGx5Q29udGFpbnM6IGZ1bmN0aW9uIHZpc3VhbGx5Q29udGFpbnMoKSB7XG4gICAgICAgIHJldHVybiBfdmlzdWFsbHlDb250YWlucztcbiAgICAgIH0sXG4gICAgICB2aXN1YWxseU92ZXJsYXBzOiBmdW5jdGlvbiB2aXN1YWxseU92ZXJsYXBzKCkge1xuICAgICAgICByZXR1cm4gdmlzdWFsbHlfb3ZlcmxhcHNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB2aXN1YWxseVNvcnQ6IGZ1bmN0aW9uIHZpc3VhbGx5U29ydCgpIHtcbiAgICAgICAgcmV0dXJuIF92aXN1YWxseVNvcnQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZ2V0Um9vdE5vZGUobm9kZSkge1xuICAgICAgdmFyIGRvYyA9IG5vZGUuZ2V0Um9vdE5vZGUgJiYgbm9kZS5nZXRSb290Tm9kZSgpIHx8IGRvY3VtZW50O1xuICAgICAgaWYgKGRvYyA9PT0gbm9kZSkge1xuICAgICAgICBkb2MgPSBkb2N1bWVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkb2M7XG4gICAgfVxuICAgIHZhciBnZXRfcm9vdF9ub2RlX2RlZmF1bHQgPSBnZXRSb290Tm9kZTtcbiAgICB2YXIgZ2V0X3Jvb3Rfbm9kZV9kZWZhdWx0MiA9IGdldF9yb290X25vZGVfZGVmYXVsdDtcbiAgICBmdW5jdGlvbiBmaW5kRWxtc0luQ29udGV4dChfcmVmMTApIHtcbiAgICAgIHZhciBjb250ZXh0ID0gX3JlZjEwLmNvbnRleHQsIHZhbHVlID0gX3JlZjEwLnZhbHVlLCBhdHRyID0gX3JlZjEwLmF0dHIsIF9yZWYxMCRlbG0gPSBfcmVmMTAuZWxtLCBlbG0gPSBfcmVmMTAkZWxtID09PSB2b2lkIDAgPyAnJyA6IF9yZWYxMCRlbG07XG4gICAgICB2YXIgcm9vdDtcbiAgICAgIHZhciBlc2NhcGVkVmFsdWUgPSBlc2NhcGVfc2VsZWN0b3JfZGVmYXVsdCh2YWx1ZSk7XG4gICAgICBpZiAoY29udGV4dC5ub2RlVHlwZSA9PT0gOSB8fCBjb250ZXh0Lm5vZGVUeXBlID09PSAxMSkge1xuICAgICAgICByb290ID0gY29udGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QgPSBnZXRfcm9vdF9ub2RlX2RlZmF1bHQyKGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEFycmF5LmZyb20ocm9vdC5xdWVyeVNlbGVjdG9yQWxsKGVsbSArICdbJyArIGF0dHIgKyAnPScgKyBlc2NhcGVkVmFsdWUgKyAnXScpKTtcbiAgICB9XG4gICAgdmFyIGZpbmRfZWxtc19pbl9jb250ZXh0X2RlZmF1bHQgPSBmaW5kRWxtc0luQ29udGV4dDtcbiAgICBmdW5jdGlvbiBmaW5kVXBWaXJ0dWFsKGVsZW1lbnQsIHRhcmdldCkge1xuICAgICAgdmFyIHBhcmVudDtcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQuYWN0dWFsTm9kZTtcbiAgICAgIGlmICghZWxlbWVudC5zaGFkb3dJZCAmJiB0eXBlb2YgZWxlbWVudC5hY3R1YWxOb2RlLmNsb3Nlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZWxlbWVudC5hY3R1YWxOb2RlLmNsb3Nlc3QodGFyZ2V0KTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgZG8ge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuYXNzaWduZWRTbG90ID8gcGFyZW50LmFzc2lnbmVkU2xvdCA6IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSA9PT0gMTEpIHtcbiAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQuaG9zdDtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAocGFyZW50ICYmICFlbGVtZW50X21hdGNoZXNfZGVmYXVsdChwYXJlbnQsIHRhcmdldCkgJiYgcGFyZW50ICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoIWVsZW1lbnRfbWF0Y2hlc19kZWZhdWx0KHBhcmVudCwgdGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICAgIHZhciBmaW5kX3VwX3ZpcnR1YWxfZGVmYXVsdCA9IGZpbmRVcFZpcnR1YWw7XG4gICAgZnVuY3Rpb24gZmluZFVwKGVsZW1lbnQsIHRhcmdldCkge1xuICAgICAgcmV0dXJuIGZpbmRfdXBfdmlydHVhbF9kZWZhdWx0KGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KGVsZW1lbnQpLCB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgZmluZF91cF9kZWZhdWx0ID0gZmluZFVwO1xuICAgIGZ1bmN0aW9uIF9yZWN0c092ZXJsYXAocmVjdDEsIHJlY3QyKSB7XG4gICAgICByZXR1cm4gKHJlY3QxLmxlZnQgfCAwKSA8IChyZWN0Mi5yaWdodCB8IDApICYmIChyZWN0MS5yaWdodCB8IDApID4gKHJlY3QyLmxlZnQgfCAwKSAmJiAocmVjdDEudG9wIHwgMCkgPCAocmVjdDIuYm90dG9tIHwgMCkgJiYgKHJlY3QxLmJvdHRvbSB8IDApID4gKHJlY3QyLnRvcCB8IDApO1xuICAgIH1cbiAgICB2YXIgZ2V0T3ZlcmZsb3dIaWRkZW5BbmNlc3RvcnMgPSBtZW1vaXplX2RlZmF1bHQoZnVuY3Rpb24gZ2V0T3ZlcmZsb3dIaWRkZW5BbmNlc3RvcnNNZW1vaXplZCh2Tm9kZSkge1xuICAgICAgdmFyIGFuY2VzdG9ycyA9IFtdO1xuICAgICAgaWYgKCF2Tm9kZSkge1xuICAgICAgICByZXR1cm4gYW5jZXN0b3JzO1xuICAgICAgfVxuICAgICAgdmFyIG92ZXJmbG93ID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ292ZXJmbG93Jyk7XG4gICAgICBpZiAob3ZlcmZsb3cgPT09ICdoaWRkZW4nKSB7XG4gICAgICAgIGFuY2VzdG9ycy5wdXNoKHZOb2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhbmNlc3RvcnMuY29uY2F0KGdldE92ZXJmbG93SGlkZGVuQW5jZXN0b3JzKHZOb2RlLnBhcmVudCkpO1xuICAgIH0pO1xuICAgIHZhciBnZXRfb3ZlcmZsb3dfaGlkZGVuX2FuY2VzdG9yc19kZWZhdWx0ID0gZ2V0T3ZlcmZsb3dIaWRkZW5BbmNlc3RvcnM7XG4gICAgdmFyIGNsaXBSZWdleCA9IC9yZWN0XFxzKlxcKChbMC05XSspcHgsP1xccyooWzAtOV0rKXB4LD9cXHMqKFswLTldKylweCw/XFxzKihbMC05XSspcHhcXHMqXFwpLztcbiAgICB2YXIgY2xpcFBhdGhSZWdleCA9IC8oXFx3KylcXCgoXFxkKykvO1xuICAgIGZ1bmN0aW9uIG5hdGl2ZWx5SGlkZGVuKHZOb2RlKSB7XG4gICAgICByZXR1cm4gWyAnc3R5bGUnLCAnc2NyaXB0JywgJ25vc2NyaXB0JywgJ3RlbXBsYXRlJyBdLmluY2x1ZGVzKHZOb2RlLnByb3BzLm5vZGVOYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlzcGxheUhpZGRlbih2Tm9kZSkge1xuICAgICAgaWYgKHZOb2RlLnByb3BzLm5vZGVOYW1lID09PSAnYXJlYScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykgPT09ICdub25lJztcbiAgICB9XG4gICAgZnVuY3Rpb24gdmlzaWJpbGl0eUhpZGRlbih2Tm9kZSkge1xuICAgICAgdmFyIF9yZWYxMSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sIGlzQW5jZXN0b3IgPSBfcmVmMTEuaXNBbmNlc3RvcjtcbiAgICAgIHJldHVybiAhaXNBbmNlc3RvciAmJiBbICdoaWRkZW4nLCAnY29sbGFwc2UnIF0uaW5jbHVkZXModk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ3Zpc2liaWxpdHknKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbnRlbnRWaXNpYmlsdHlIaWRkZW4odk5vZGUpIHtcbiAgICAgIHZhciBfcmVmMTIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LCBpc0FuY2VzdG9yID0gX3JlZjEyLmlzQW5jZXN0b3I7XG4gICAgICByZXR1cm4gISFpc0FuY2VzdG9yICYmIHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdjb250ZW50LXZpc2liaWxpdHknKSA9PT0gJ2hpZGRlbic7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFyaWFIaWRkZW4odk5vZGUpIHtcbiAgICAgIHJldHVybiB2Tm9kZS5hdHRyKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZSc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9wYWNpdHlIaWRkZW4odk5vZGUpIHtcbiAgICAgIHJldHVybiB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnb3BhY2l0eScpID09PSAnMCc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNjcm9sbEhpZGRlbih2Tm9kZSkge1xuICAgICAgdmFyIHNjcm9sbCA9IGdldF9zY3JvbGxfZGVmYXVsdCh2Tm9kZS5hY3R1YWxOb2RlKTtcbiAgICAgIHZhciBlbEhlaWdodCA9IHBhcnNlSW50KHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSk7XG4gICAgICB2YXIgZWxXaWR0aCA9IHBhcnNlSW50KHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpKTtcbiAgICAgIHJldHVybiAhIXNjcm9sbCAmJiAoZWxIZWlnaHQgPT09IDAgfHwgZWxXaWR0aCA9PT0gMCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG92ZXJmbG93SGlkZGVuKHZOb2RlKSB7XG4gICAgICB2YXIgX3JlZjEzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwgaXNBbmNlc3RvciA9IF9yZWYxMy5pc0FuY2VzdG9yO1xuICAgICAgaWYgKGlzQW5jZXN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBvc2l0aW9uID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ3Bvc2l0aW9uJyk7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG5vZGVzID0gZ2V0X292ZXJmbG93X2hpZGRlbl9hbmNlc3RvcnNfZGVmYXVsdCh2Tm9kZSk7XG4gICAgICBpZiAoIW5vZGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcmVjdCA9IHZOb2RlLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICAgIHJldHVybiBub2Rlcy5zb21lKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnYWJzb2x1dGUnICYmICFoYXNQb3NpdGlvbmVkQW5jZXN0b3JCZXR3ZWVuKHZOb2RlLCBub2RlKSAmJiBub2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZVJlY3QgPSBub2RlLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICAgICAgaWYgKG5vZGVSZWN0LndpZHRoIDwgMiB8fCBub2RlUmVjdC5oZWlnaHQgPCAyKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFfcmVjdHNPdmVybGFwKHJlY3QsIG5vZGVSZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGlwSGlkZGVuKHZOb2RlKSB7XG4gICAgICB2YXIgbWF0Y2hlc0NsaXAgPSB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnY2xpcCcpLm1hdGNoKGNsaXBSZWdleCk7XG4gICAgICB2YXIgbWF0Y2hlc0NsaXBQYXRoID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ2NsaXAtcGF0aCcpLm1hdGNoKGNsaXBQYXRoUmVnZXgpO1xuICAgICAgaWYgKG1hdGNoZXNDbGlwICYmIG1hdGNoZXNDbGlwLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgncG9zaXRpb24nKTtcbiAgICAgICAgaWYgKFsgJ2ZpeGVkJywgJ2Fic29sdXRlJyBdLmluY2x1ZGVzKHBvc2l0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBtYXRjaGVzQ2xpcFszXSAtIG1hdGNoZXNDbGlwWzFdIDw9IDAgJiYgbWF0Y2hlc0NsaXBbMl0gLSBtYXRjaGVzQ2xpcFs0XSA8PSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2hlc0NsaXBQYXRoKSB7XG4gICAgICAgIHZhciB0eXBlMiA9IG1hdGNoZXNDbGlwUGF0aFsxXTtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VJbnQobWF0Y2hlc0NsaXBQYXRoWzJdLCAxMCk7XG4gICAgICAgIHN3aXRjaCAodHlwZTIpIHtcbiAgICAgICAgIGNhc2UgJ2luc2V0JzpcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPj0gNTA7XG5cbiAgICAgICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwO1xuXG4gICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFyZWFIaWRkZW4odk5vZGUsIHZpc2libGVGdW5jdGlvbikge1xuICAgICAgdmFyIG1hcEVsID0gY2xvc2VzdF9kZWZhdWx0KHZOb2RlLCAnbWFwJyk7XG4gICAgICBpZiAoIW1hcEVsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1hcEVsTmFtZSA9IG1hcEVsLmF0dHIoJ25hbWUnKTtcbiAgICAgIGlmICghbWFwRWxOYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1hcEVsUm9vdE5vZGUgPSBnZXRfcm9vdF9ub2RlX2RlZmF1bHQodk5vZGUuYWN0dWFsTm9kZSk7XG4gICAgICBpZiAoIW1hcEVsUm9vdE5vZGUgfHwgbWFwRWxSb290Tm9kZS5ub2RlVHlwZSAhPT0gOSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZWZzID0gcXVlcnlfc2VsZWN0b3JfYWxsX2RlZmF1bHQoYXhlLl90cmVlLCAnaW1nW3VzZW1hcD1cIiMnLmNvbmNhdChlc2NhcGVfc2VsZWN0b3JfZGVmYXVsdChtYXBFbE5hbWUpLCAnXCJdJykpO1xuICAgICAgaWYgKCFyZWZzIHx8ICFyZWZzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWZzLnNvbWUoZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgIHJldHVybiAhdmlzaWJsZUZ1bmN0aW9uKHJlZik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGV0YWlsc0hpZGRlbih2Tm9kZSkge1xuICAgICAgdmFyIF92Tm9kZSRwYXJlbnQ7XG4gICAgICBpZiAoKChfdk5vZGUkcGFyZW50ID0gdk5vZGUucGFyZW50KSA9PT0gbnVsbCB8fCBfdk5vZGUkcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdk5vZGUkcGFyZW50LnByb3BzLm5vZGVOYW1lKSAhPT0gJ2RldGFpbHMnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh2Tm9kZS5wcm9wcy5ub2RlTmFtZSA9PT0gJ3N1bW1hcnknKSB7XG4gICAgICAgIHZhciBmaXJzdFN1bW1hcnkgPSB2Tm9kZS5wYXJlbnQuY2hpbGRyZW4uZmluZChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUucHJvcHMubm9kZU5hbWUgPT09ICdzdW1tYXJ5JztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmaXJzdFN1bW1hcnkgPT09IHZOb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gIXZOb2RlLnBhcmVudC5oYXNBdHRyKCdvcGVuJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc1Bvc2l0aW9uZWRBbmNlc3RvckJldHdlZW4oY2hpbGQsIGFuY2VzdG9yKSB7XG4gICAgICB2YXIgbm9kZSA9IGNoaWxkLnBhcmVudDtcbiAgICAgIHdoaWxlIChub2RlICYmIG5vZGUgIT09IGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChbICdyZWxhdGl2ZScsICdzdGlja3knIF0uaW5jbHVkZXMobm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgncG9zaXRpb24nKSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBoaWRkZW5NZXRob2RzID0gWyBkaXNwbGF5SGlkZGVuLCB2aXNpYmlsaXR5SGlkZGVuLCBjb250ZW50VmlzaWJpbHR5SGlkZGVuLCBkZXRhaWxzSGlkZGVuIF07XG4gICAgZnVuY3Rpb24gX2lzSGlkZGVuRm9yRXZlcnlvbmUodk5vZGUpIHtcbiAgICAgIHZhciBfcmVmMTQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LCBza2lwQW5jZXN0b3JzID0gX3JlZjE0LnNraXBBbmNlc3RvcnMsIF9yZWYxNCRpc0FuY2VzdG9yID0gX3JlZjE0LmlzQW5jZXN0b3IsIGlzQW5jZXN0b3IgPSBfcmVmMTQkaXNBbmNlc3RvciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTQkaXNBbmNlc3RvcjtcbiAgICAgIHZOb2RlID0gX25vZGVMb29rdXAodk5vZGUpLnZOb2RlO1xuICAgICAgaWYgKHNraXBBbmNlc3RvcnMpIHtcbiAgICAgICAgcmV0dXJuIGlzSGlkZGVuU2VsZih2Tm9kZSwgaXNBbmNlc3Rvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNIaWRkZW5BbmNlc3RvcnModk5vZGUsIGlzQW5jZXN0b3IpO1xuICAgIH1cbiAgICB2YXIgaXNIaWRkZW5TZWxmID0gbWVtb2l6ZV9kZWZhdWx0KGZ1bmN0aW9uIGlzSGlkZGVuU2VsZk1lbW9pemVkKHZOb2RlLCBpc0FuY2VzdG9yKSB7XG4gICAgICBpZiAobmF0aXZlbHlIaWRkZW4odk5vZGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF2Tm9kZS5hY3R1YWxOb2RlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChoaWRkZW5NZXRob2RzLnNvbWUoZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBtZXRob2Qodk5vZGUsIHtcbiAgICAgICAgICBpc0FuY2VzdG9yOiBpc0FuY2VzdG9yXG4gICAgICAgIH0pO1xuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXZOb2RlLmFjdHVhbE5vZGUuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgdmFyIGlzSGlkZGVuQW5jZXN0b3JzID0gbWVtb2l6ZV9kZWZhdWx0KGZ1bmN0aW9uIGlzSGlkZGVuQW5jZXN0b3JzTWVtb2l6ZWQodk5vZGUsIGlzQW5jZXN0b3IpIHtcbiAgICAgIGlmIChpc0hpZGRlblNlbGYodk5vZGUsIGlzQW5jZXN0b3IpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF2Tm9kZS5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSGlkZGVuQW5jZXN0b3JzKHZOb2RlLnBhcmVudCwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9zZWRQYXJlbnQoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQuYXNzaWduZWRTbG90KSB7XG4gICAgICAgIHJldHVybiBnZXRDb21wb3NlZFBhcmVudChlbGVtZW50LmFzc2lnbmVkU2xvdCk7XG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKHBhcmVudE5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50Tm9kZTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJlbnROb2RlLmhvc3QpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50Tm9kZS5ob3N0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGdldF9jb21wb3NlZF9wYXJlbnRfZGVmYXVsdCA9IGdldENvbXBvc2VkUGFyZW50O1xuICAgIGZ1bmN0aW9uIGdldFNjcm9sbE9mZnNldChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQubm9kZVR5cGUgJiYgZWxlbWVudC5kb2N1bWVudCkge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5kb2N1bWVudDtcbiAgICAgIH1cbiAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSA5KSB7XG4gICAgICAgIHZhciBkb2NFbGVtZW50ID0gZWxlbWVudC5kb2N1bWVudEVsZW1lbnQsIGJvZHkgPSBlbGVtZW50LmJvZHk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGVmdDogZG9jRWxlbWVudCAmJiBkb2NFbGVtZW50LnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCxcbiAgICAgICAgICB0b3A6IGRvY0VsZW1lbnQgJiYgZG9jRWxlbWVudC5zY3JvbGxUb3AgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCB8fCAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICAgIHRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBnZXRfc2Nyb2xsX29mZnNldF9kZWZhdWx0ID0gZ2V0U2Nyb2xsT2Zmc2V0O1xuICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRDb29yZGluYXRlcyhlbGVtZW50KSB7XG4gICAgICB2YXIgc2Nyb2xsT2Zmc2V0ID0gZ2V0X3Njcm9sbF9vZmZzZXRfZGVmYXVsdChkb2N1bWVudCksIHhPZmZzZXQgPSBzY3JvbGxPZmZzZXQubGVmdCwgeU9mZnNldCA9IHNjcm9sbE9mZnNldC50b3AsIGNvb3JkcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IGNvb3Jkcy50b3AgKyB5T2Zmc2V0LFxuICAgICAgICByaWdodDogY29vcmRzLnJpZ2h0ICsgeE9mZnNldCxcbiAgICAgICAgYm90dG9tOiBjb29yZHMuYm90dG9tICsgeU9mZnNldCxcbiAgICAgICAgbGVmdDogY29vcmRzLmxlZnQgKyB4T2Zmc2V0LFxuICAgICAgICB3aWR0aDogY29vcmRzLnJpZ2h0IC0gY29vcmRzLmxlZnQsXG4gICAgICAgIGhlaWdodDogY29vcmRzLmJvdHRvbSAtIGNvb3Jkcy50b3BcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBnZXRfZWxlbWVudF9jb29yZGluYXRlc19kZWZhdWx0ID0gZ2V0RWxlbWVudENvb3JkaW5hdGVzO1xuICAgIGZ1bmN0aW9uIGdldFZpZXdwb3J0U2l6ZSh3aW4pIHtcbiAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gICAgICB2YXIgZG9jRWxlbWVudCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBpZiAod2luLmlubmVyV2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogd2luLmlubmVyV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiB3aW4uaW5uZXJIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChkb2NFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IGRvY0VsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBkb2NFbGVtZW50LmNsaWVudEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIGJvZHkgPSBkb2MuYm9keTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBib2R5LmNsaWVudFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGJvZHkuY2xpZW50SGVpZ2h0XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgZ2V0X3ZpZXdwb3J0X3NpemVfZGVmYXVsdCA9IGdldFZpZXdwb3J0U2l6ZTtcbiAgICBmdW5jdGlvbiBub1BhcmVudFNjcm9sbGVkKGVsZW1lbnQsIG9mZnNldCkge1xuICAgICAgZWxlbWVudCA9IGdldF9jb21wb3NlZF9wYXJlbnRfZGVmYXVsdChlbGVtZW50KTtcbiAgICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2h0bWwnKSB7XG4gICAgICAgIGlmIChlbGVtZW50LnNjcm9sbFRvcCkge1xuICAgICAgICAgIG9mZnNldCArPSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICBpZiAob2Zmc2V0ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudCA9IGdldF9jb21wb3NlZF9wYXJlbnRfZGVmYXVsdChlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc09mZnNjcmVlbihlbGVtZW50KSB7XG4gICAgICB2YXIgX3JlZjE1ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwgaXNBbmNlc3RvciA9IF9yZWYxNS5pc0FuY2VzdG9yO1xuICAgICAgaWYgKGlzQW5jZXN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIF9ub2RlTG9va3VwMiA9IF9ub2RlTG9va3VwKGVsZW1lbnQpLCBkb21Ob2RlID0gX25vZGVMb29rdXAyLmRvbU5vZGU7XG4gICAgICBpZiAoIWRvbU5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHZhciBsZWZ0Qm91bmRhcnk7XG4gICAgICB2YXIgZG9jRWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIHZhciBzdHlsID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9tTm9kZSk7XG4gICAgICB2YXIgZGlyID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSB8fCBkb2NFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKTtcbiAgICAgIHZhciBjb29yZHMgPSBnZXRfZWxlbWVudF9jb29yZGluYXRlc19kZWZhdWx0KGRvbU5vZGUpO1xuICAgICAgaWYgKGNvb3Jkcy5ib3R0b20gPCAwICYmIChub1BhcmVudFNjcm9sbGVkKGRvbU5vZGUsIGNvb3Jkcy5ib3R0b20pIHx8IHN0eWwucG9zaXRpb24gPT09ICdhYnNvbHV0ZScpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNvb3Jkcy5sZWZ0ID09PSAwICYmIGNvb3Jkcy5yaWdodCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZGlyID09PSAnbHRyJykge1xuICAgICAgICBpZiAoY29vcmRzLnJpZ2h0IDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVmdEJvdW5kYXJ5ID0gTWF0aC5tYXgoZG9jRWxlbWVudC5zY3JvbGxXaWR0aCwgZ2V0X3ZpZXdwb3J0X3NpemVfZGVmYXVsdCh3aW5kb3cpLndpZHRoKTtcbiAgICAgICAgaWYgKGNvb3Jkcy5sZWZ0ID49IGxlZnRCb3VuZGFyeSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpc19vZmZzY3JlZW5fZGVmYXVsdCA9IGlzT2Zmc2NyZWVuO1xuICAgIHZhciBoaWRkZW5NZXRob2RzMiA9IFsgb3BhY2l0eUhpZGRlbiwgc2Nyb2xsSGlkZGVuLCBvdmVyZmxvd0hpZGRlbiwgY2xpcEhpZGRlbiwgaXNfb2Zmc2NyZWVuX2RlZmF1bHQgXTtcbiAgICBmdW5jdGlvbiBfaXNWaXNpYmxlT25TY3JlZW4odk5vZGUpIHtcbiAgICAgIHZOb2RlID0gX25vZGVMb29rdXAodk5vZGUpLnZOb2RlO1xuICAgICAgcmV0dXJuIGlzVmlzaWJsZU9uU2NyZWVuVmlydHVhbCh2Tm9kZSk7XG4gICAgfVxuICAgIHZhciBpc1Zpc2libGVPblNjcmVlblZpcnR1YWwgPSBtZW1vaXplX2RlZmF1bHQoZnVuY3Rpb24gaXNWaXNpYmxlT25TY3JlZW5NZW1vaXplZCh2Tm9kZSwgaXNBbmNlc3Rvcikge1xuICAgICAgaWYgKHZOb2RlLmFjdHVhbE5vZGUgJiYgdk5vZGUucHJvcHMubm9kZU5hbWUgPT09ICdhcmVhJykge1xuICAgICAgICByZXR1cm4gIWFyZWFIaWRkZW4odk5vZGUsIGlzVmlzaWJsZU9uU2NyZWVuVmlydHVhbCk7XG4gICAgICB9XG4gICAgICBpZiAoX2lzSGlkZGVuRm9yRXZlcnlvbmUodk5vZGUsIHtcbiAgICAgICAgc2tpcEFuY2VzdG9yczogdHJ1ZSxcbiAgICAgICAgaXNBbmNlc3RvcjogaXNBbmNlc3RvclxuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHZOb2RlLmFjdHVhbE5vZGUgJiYgaGlkZGVuTWV0aG9kczIuc29tZShmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZCh2Tm9kZSwge1xuICAgICAgICAgIGlzQW5jZXN0b3I6IGlzQW5jZXN0b3JcbiAgICAgICAgfSk7XG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXZOb2RlLnBhcmVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1Zpc2libGVPblNjcmVlblZpcnR1YWwodk5vZGUucGFyZW50LCB0cnVlKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBfZ2V0Qm91bmRpbmdSZWN0KHJlY3RBLCByZWN0Qikge1xuICAgICAgdmFyIHRvcCA9IE1hdGgubWluKHJlY3RBLnRvcCwgcmVjdEIudG9wKTtcbiAgICAgIHZhciByaWdodCA9IE1hdGgubWF4KHJlY3RBLnJpZ2h0LCByZWN0Qi5yaWdodCk7XG4gICAgICB2YXIgYm90dG9tID0gTWF0aC5tYXgocmVjdEEuYm90dG9tLCByZWN0Qi5ib3R0b20pO1xuICAgICAgdmFyIGxlZnQgPSBNYXRoLm1pbihyZWN0QS5sZWZ0LCByZWN0Qi5sZWZ0KTtcbiAgICAgIHJldHVybiBuZXcgd2luZG93LkRPTVJlY3QobGVmdCwgdG9wLCByaWdodCAtIGxlZnQsIGJvdHRvbSAtIHRvcCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9pc1BvaW50SW5SZWN0KF9yZWYxNiwgX3JlZjE3KSB7XG4gICAgICB2YXIgeCA9IF9yZWYxNi54LCB5ID0gX3JlZjE2Lnk7XG4gICAgICB2YXIgdG9wID0gX3JlZjE3LnRvcCwgcmlnaHQgPSBfcmVmMTcucmlnaHQsIGJvdHRvbSA9IF9yZWYxNy5ib3R0b20sIGxlZnQgPSBfcmVmMTcubGVmdDtcbiAgICAgIHJldHVybiB5ID49IHRvcCAmJiB4IDw9IHJpZ2h0ICYmIHkgPD0gYm90dG9tICYmIHggPj0gbGVmdDtcbiAgICB9XG4gICAgdmFyIG1hdGhfZXhwb3J0cyA9IHt9O1xuICAgIF9fZXhwb3J0KG1hdGhfZXhwb3J0cywge1xuICAgICAgZ2V0Qm91bmRpbmdSZWN0OiBmdW5jdGlvbiBnZXRCb3VuZGluZ1JlY3QoKSB7XG4gICAgICAgIHJldHVybiBfZ2V0Qm91bmRpbmdSZWN0O1xuICAgICAgfSxcbiAgICAgIGdldEludGVyc2VjdGlvblJlY3Q6IGZ1bmN0aW9uIGdldEludGVyc2VjdGlvblJlY3QoKSB7XG4gICAgICAgIHJldHVybiBfZ2V0SW50ZXJzZWN0aW9uUmVjdDtcbiAgICAgIH0sXG4gICAgICBnZXRPZmZzZXQ6IGZ1bmN0aW9uIGdldE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRPZmZzZXQ7XG4gICAgICB9LFxuICAgICAgZ2V0UmVjdENlbnRlcjogZnVuY3Rpb24gZ2V0UmVjdENlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRSZWN0Q2VudGVyO1xuICAgICAgfSxcbiAgICAgIGhhc1Zpc3VhbE92ZXJsYXA6IGZ1bmN0aW9uIGhhc1Zpc3VhbE92ZXJsYXAoKSB7XG4gICAgICAgIHJldHVybiBfaGFzVmlzdWFsT3ZlcmxhcDtcbiAgICAgIH0sXG4gICAgICBpc1BvaW50SW5SZWN0OiBmdW5jdGlvbiBpc1BvaW50SW5SZWN0KCkge1xuICAgICAgICByZXR1cm4gX2lzUG9pbnRJblJlY3Q7XG4gICAgICB9LFxuICAgICAgcmVjdEhhc01pbmltdW1TaXplOiBmdW5jdGlvbiByZWN0SGFzTWluaW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiBfcmVjdEhhc01pbmltdW1TaXplO1xuICAgICAgfSxcbiAgICAgIHJlY3RzT3ZlcmxhcDogZnVuY3Rpb24gcmVjdHNPdmVybGFwKCkge1xuICAgICAgICByZXR1cm4gX3JlY3RzT3ZlcmxhcDtcbiAgICAgIH0sXG4gICAgICBzcGxpdFJlY3RzOiBmdW5jdGlvbiBzcGxpdFJlY3RzKCkge1xuICAgICAgICByZXR1cm4gX3NwbGl0UmVjdHM7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gX2dldEludGVyc2VjdGlvblJlY3QocmVjdDEsIHJlY3QyKSB7XG4gICAgICB2YXIgbGVmdFggPSBNYXRoLm1heChyZWN0MS5sZWZ0LCByZWN0Mi5sZWZ0KTtcbiAgICAgIHZhciByaWdodFggPSBNYXRoLm1pbihyZWN0MS5yaWdodCwgcmVjdDIucmlnaHQpO1xuICAgICAgdmFyIHRvcFkgPSBNYXRoLm1heChyZWN0MS50b3AsIHJlY3QyLnRvcCk7XG4gICAgICB2YXIgYm90dG9tWSA9IE1hdGgubWluKHJlY3QxLmJvdHRvbSwgcmVjdDIuYm90dG9tKTtcbiAgICAgIGlmIChsZWZ0WCA+PSByaWdodFggfHwgdG9wWSA+PSBib3R0b21ZKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuRE9NUmVjdChsZWZ0WCwgdG9wWSwgcmlnaHRYIC0gbGVmdFgsIGJvdHRvbVkgLSB0b3BZKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2dldFJlY3RDZW50ZXIoX3JlZjE4KSB7XG4gICAgICB2YXIgbGVmdCA9IF9yZWYxOC5sZWZ0LCB0b3AgPSBfcmVmMTgudG9wLCB3aWR0aCA9IF9yZWYxOC53aWR0aCwgaGVpZ2h0ID0gX3JlZjE4LmhlaWdodDtcbiAgICAgIHJldHVybiBuZXcgd2luZG93LkRPTVBvaW50KGxlZnQgKyB3aWR0aCAvIDIsIHRvcCArIGhlaWdodCAvIDIpO1xuICAgIH1cbiAgICB2YXIgcm91bmRpbmdNYXJnaW4gPSAuMDU7XG4gICAgZnVuY3Rpb24gX3JlY3RIYXNNaW5pbXVtU2l6ZShtaW5TaXplLCBfcmVmMTkpIHtcbiAgICAgIHZhciB3aWR0aCA9IF9yZWYxOS53aWR0aCwgaGVpZ2h0ID0gX3JlZjE5LmhlaWdodDtcbiAgICAgIHJldHVybiB3aWR0aCArIHJvdW5kaW5nTWFyZ2luID49IG1pblNpemUgJiYgaGVpZ2h0ICsgcm91bmRpbmdNYXJnaW4gPj0gbWluU2l6ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2dldE9mZnNldCh2VGFyZ2V0LCB2TmVpZ2hib3IpIHtcbiAgICAgIHZhciBtaW5SYWRpdXNOZWlnaGJvdXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDEyO1xuICAgICAgdmFyIHRhcmdldFJlY3RzID0gZ2V0X3RhcmdldF9yZWN0c19kZWZhdWx0KHZUYXJnZXQpO1xuICAgICAgdmFyIG5laWdoYm9yUmVjdHMgPSBnZXRfdGFyZ2V0X3JlY3RzX2RlZmF1bHQodk5laWdoYm9yKTtcbiAgICAgIGlmICghdGFyZ2V0UmVjdHMubGVuZ3RoIHx8ICFuZWlnaGJvclJlY3RzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciB0YXJnZXRCb3VuZGluZ0JveCA9IHRhcmdldFJlY3RzLnJlZHVjZShfZ2V0Qm91bmRpbmdSZWN0KTtcbiAgICAgIHZhciB0YXJnZXRDZW50ZXIgPSBfZ2V0UmVjdENlbnRlcih0YXJnZXRCb3VuZGluZ0JveCk7XG4gICAgICB2YXIgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobmVpZ2hib3JSZWN0cyksIF9zdGVwMjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7ICkge1xuICAgICAgICAgIHZhciByZWN0ID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgIGlmIChfaXNQb2ludEluUmVjdCh0YXJnZXRDZW50ZXIsIHJlY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNsb3Nlc3RQb2ludCA9IGdldENsb3Nlc3RQb2ludCh0YXJnZXRDZW50ZXIsIHJlY3QpO1xuICAgICAgICAgIHZhciBkaXN0YW5jZTIgPSBwb2ludERpc3RhbmNlKHRhcmdldENlbnRlciwgY2xvc2VzdFBvaW50KTtcbiAgICAgICAgICBtaW5EaXN0YW5jZSA9IE1hdGgubWluKG1pbkRpc3RhbmNlLCBkaXN0YW5jZTIpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZWlnaGJvclRhcmdldFNpemUgPSBnZXRfdGFyZ2V0X3NpemVfZGVmYXVsdCh2TmVpZ2hib3IpO1xuICAgICAgaWYgKF9yZWN0SGFzTWluaW11bVNpemUobWluUmFkaXVzTmVpZ2hib3VyICogMiwgbmVpZ2hib3JUYXJnZXRTaXplKSkge1xuICAgICAgICByZXR1cm4gbWluRGlzdGFuY2U7XG4gICAgICB9XG4gICAgICB2YXIgbmVpZ2hib3JCb3VuZGluZ0JveCA9IG5laWdoYm9yUmVjdHMucmVkdWNlKF9nZXRCb3VuZGluZ1JlY3QpO1xuICAgICAgdmFyIG5laWdoYm9yQ2VudGVyID0gX2dldFJlY3RDZW50ZXIobmVpZ2hib3JCb3VuZGluZ0JveCk7XG4gICAgICB2YXIgY2VudGVyRGlzdGFuY2UgPSBwb2ludERpc3RhbmNlKHRhcmdldENlbnRlciwgbmVpZ2hib3JDZW50ZXIpIC0gbWluUmFkaXVzTmVpZ2hib3VyO1xuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKG1pbkRpc3RhbmNlLCBjZW50ZXJEaXN0YW5jZSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRDbG9zZXN0UG9pbnQocG9pbnQsIHJlY3QpIHtcbiAgICAgIHZhciB4O1xuICAgICAgdmFyIHk7XG4gICAgICBpZiAocG9pbnQueCA8IHJlY3QubGVmdCkge1xuICAgICAgICB4ID0gcmVjdC5sZWZ0O1xuICAgICAgfSBlbHNlIGlmIChwb2ludC54ID4gcmVjdC5yaWdodCkge1xuICAgICAgICB4ID0gcmVjdC5yaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSBwb2ludC54O1xuICAgICAgfVxuICAgICAgaWYgKHBvaW50LnkgPCByZWN0LnRvcCkge1xuICAgICAgICB5ID0gcmVjdC50b3A7XG4gICAgICB9IGVsc2UgaWYgKHBvaW50LnkgPiByZWN0LmJvdHRvbSkge1xuICAgICAgICB5ID0gcmVjdC5ib3R0b207XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ID0gcG9pbnQueTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50RGlzdGFuY2UocG9pbnRBLCBwb2ludEIpIHtcbiAgICAgIHJldHVybiBNYXRoLmh5cG90KHBvaW50QS54IC0gcG9pbnRCLngsIHBvaW50QS55IC0gcG9pbnRCLnkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfaGFzVmlzdWFsT3ZlcmxhcCh2Tm9kZUEsIHZOb2RlQikge1xuICAgICAgdmFyIHJlY3RBID0gdk5vZGVBLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICAgIHZhciByZWN0QiA9IHZOb2RlQi5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gICAgICBpZiAocmVjdEEubGVmdCA+PSByZWN0Qi5yaWdodCB8fCByZWN0QS5yaWdodCA8PSByZWN0Qi5sZWZ0IHx8IHJlY3RBLnRvcCA+PSByZWN0Qi5ib3R0b20gfHwgcmVjdEEuYm90dG9tIDw9IHJlY3RCLnRvcCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3Zpc3VhbGx5U29ydCh2Tm9kZUEsIHZOb2RlQikgPiAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfc3BsaXRSZWN0cyhvdXRlclJlY3QsIG92ZXJsYXBSZWN0cykge1xuICAgICAgdmFyIHVuaXF1ZVJlY3RzID0gWyBvdXRlclJlY3QgXTtcbiAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIob3ZlcmxhcFJlY3RzKSwgX3N0ZXAzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIF9sb29wMyA9IGZ1bmN0aW9uIF9sb29wMygpIHtcbiAgICAgICAgICB2YXIgb3ZlcmxhcFJlY3QgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgICAgdW5pcXVlUmVjdHMgPSB1bmlxdWVSZWN0cy5yZWR1Y2UoZnVuY3Rpb24ocmVjdHMsIGlucHV0UmVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlY3RzLmNvbmNhdChzcGxpdFJlY3QoaW5wdXRSZWN0LCBvdmVybGFwUmVjdCkpO1xuICAgICAgICAgIH0sIFtdKTtcbiAgICAgICAgICBpZiAodW5pcXVlUmVjdHMubGVuZ3RoID4gNGUzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NwbGl0UmVjdHM6IFRvbyBtYW55IHJlY3RzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOyApIHtcbiAgICAgICAgICBfbG9vcDMoKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjMuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMy5mKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5pcXVlUmVjdHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwbGl0UmVjdChpbnB1dFJlY3QsIGNsaXBSZWN0KSB7XG4gICAgICB2YXIgdG9wID0gaW5wdXRSZWN0LnRvcCwgbGVmdCA9IGlucHV0UmVjdC5sZWZ0LCBib3R0b20gPSBpbnB1dFJlY3QuYm90dG9tLCByaWdodCA9IGlucHV0UmVjdC5yaWdodDtcbiAgICAgIHZhciB5QWxpZ25lZCA9IHRvcCA8IGNsaXBSZWN0LmJvdHRvbSAmJiBib3R0b20gPiBjbGlwUmVjdC50b3A7XG4gICAgICB2YXIgeEFsaWduZWQgPSBsZWZ0IDwgY2xpcFJlY3QucmlnaHQgJiYgcmlnaHQgPiBjbGlwUmVjdC5sZWZ0O1xuICAgICAgdmFyIHJlY3RzID0gW107XG4gICAgICBpZiAoYmV0d2VlbihjbGlwUmVjdC50b3AsIHRvcCwgYm90dG9tKSAmJiB4QWxpZ25lZCkge1xuICAgICAgICByZWN0cy5wdXNoKHtcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIGJvdHRvbTogY2xpcFJlY3QudG9wLFxuICAgICAgICAgIHJpZ2h0OiByaWdodFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChiZXR3ZWVuKGNsaXBSZWN0LnJpZ2h0LCBsZWZ0LCByaWdodCkgJiYgeUFsaWduZWQpIHtcbiAgICAgICAgcmVjdHMucHVzaCh7XG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgbGVmdDogY2xpcFJlY3QucmlnaHQsXG4gICAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgICAgcmlnaHQ6IHJpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGJldHdlZW4oY2xpcFJlY3QuYm90dG9tLCB0b3AsIGJvdHRvbSkgJiYgeEFsaWduZWQpIHtcbiAgICAgICAgcmVjdHMucHVzaCh7XG4gICAgICAgICAgdG9wOiBjbGlwUmVjdC5ib3R0b20sXG4gICAgICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICAgIGxlZnQ6IGxlZnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmV0d2VlbihjbGlwUmVjdC5sZWZ0LCBsZWZ0LCByaWdodCkgJiYgeUFsaWduZWQpIHtcbiAgICAgICAgcmVjdHMucHVzaCh7XG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICBib3R0b206IGJvdHRvbSxcbiAgICAgICAgICByaWdodDogY2xpcFJlY3QubGVmdFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKGlzRW5jbG9zZWRSZWN0KGlucHV0UmVjdCwgY2xpcFJlY3QpKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlY3RzLnB1c2goaW5wdXRSZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWN0cy5tYXAoY29tcHV0ZVJlY3QpO1xuICAgIH1cbiAgICB2YXIgYmV0d2VlbiA9IGZ1bmN0aW9uIGJldHdlZW4obnVtLCBtaW4sIG1heDIpIHtcbiAgICAgIHJldHVybiBudW0gPiBtaW4gJiYgbnVtIDwgbWF4MjtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNvbXB1dGVSZWN0KGJhc2VSZWN0KSB7XG4gICAgICByZXR1cm4gbmV3IHdpbmRvdy5ET01SZWN0KGJhc2VSZWN0LmxlZnQsIGJhc2VSZWN0LnRvcCwgYmFzZVJlY3QucmlnaHQgLSBiYXNlUmVjdC5sZWZ0LCBiYXNlUmVjdC5ib3R0b20gLSBiYXNlUmVjdC50b3ApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0VuY2xvc2VkUmVjdChyZWN0QSwgcmVjdEIpIHtcbiAgICAgIHJldHVybiByZWN0QS50b3AgPj0gcmVjdEIudG9wICYmIHJlY3RBLmxlZnQgPj0gcmVjdEIubGVmdCAmJiByZWN0QS5ib3R0b20gPD0gcmVjdEIuYm90dG9tICYmIHJlY3RBLnJpZ2h0IDw9IHJlY3RCLnJpZ2h0O1xuICAgIH1cbiAgICB2YXIgUk9PVF9MRVZFTCA9IDA7XG4gICAgdmFyIERFRkFVTFRfTEVWRUwgPSAuMTtcbiAgICB2YXIgRkxPQVRfTEVWRUwgPSAuMjtcbiAgICB2YXIgUE9TSVRJT05fTEVWRUwgPSAuMztcbiAgICB2YXIgbm9kZUluZGV4ID0gMDtcbiAgICBmdW5jdGlvbiBfY3JlYXRlR3JpZCgpIHtcbiAgICAgIHZhciByb290ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudC5ib2R5O1xuICAgICAgdmFyIHJvb3RHcmlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcGFyZW50Vk5vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG4gICAgICBpZiAoY2FjaGVfZGVmYXVsdC5nZXQoJ2dyaWRDcmVhdGVkJykgJiYgIXBhcmVudFZOb2RlKSB7XG4gICAgICAgIHJldHVybiBjb25zdGFudHNfZGVmYXVsdC5ncmlkU2l6ZTtcbiAgICAgIH1cbiAgICAgIGNhY2hlX2RlZmF1bHQuc2V0KCdncmlkQ3JlYXRlZCcsIHRydWUpO1xuICAgICAgaWYgKCFwYXJlbnRWTm9kZSkge1xuICAgICAgICB2YXIgX3Jvb3RHcmlkO1xuICAgICAgICB2YXIgdk5vZGUgPSBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgICBpZiAoIXZOb2RlKSB7XG4gICAgICAgICAgdk5vZGUgPSBuZXcgdmlydHVhbF9ub2RlX2RlZmF1bHQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBub2RlSW5kZXggPSAwO1xuICAgICAgICB2Tm9kZS5fc3RhY2tpbmdPcmRlciA9IFsgY3JlYXRlU3RhY2tpbmdDb250ZXh0KFJPT1RfTEVWRUwsIG5vZGVJbmRleCsrLCBudWxsKSBdO1xuICAgICAgICAoX3Jvb3RHcmlkID0gcm9vdEdyaWQpICE9PSBudWxsICYmIF9yb290R3JpZCAhPT0gdm9pZCAwID8gX3Jvb3RHcmlkIDogcm9vdEdyaWQgPSBuZXcgR3JpZCgpO1xuICAgICAgICBhZGROb2RlVG9HcmlkKHJvb3RHcmlkLCB2Tm9kZSk7XG4gICAgICAgIGlmIChnZXRfc2Nyb2xsX2RlZmF1bHQodk5vZGUuYWN0dWFsTm9kZSkpIHtcbiAgICAgICAgICB2YXIgc3ViR3JpZCA9IG5ldyBHcmlkKHZOb2RlKTtcbiAgICAgICAgICB2Tm9kZS5fc3ViR3JpZCA9IHN1YkdyaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB0cmVlV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihyb290LCB3aW5kb3cuTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQsIG51bGwsIGZhbHNlKTtcbiAgICAgIHZhciBub2RlID0gcGFyZW50Vk5vZGUgPyB0cmVlV2Fsa2VyLm5leHROb2RlKCkgOiB0cmVlV2Fsa2VyLmN1cnJlbnROb2RlO1xuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgdmFyIF92Tm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgICBpZiAoX3ZOb2RlICYmIF92Tm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICBwYXJlbnRWTm9kZSA9IF92Tm9kZS5wYXJlbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5hc3NpZ25lZFNsb3QpIHtcbiAgICAgICAgICBwYXJlbnRWTm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUuYXNzaWduZWRTbG90KTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICBwYXJlbnRWTm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUucGFyZW50RWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICYmIGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICBwYXJlbnRWTm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUucGFyZW50Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfdk5vZGUpIHtcbiAgICAgICAgICBfdk5vZGUgPSBuZXcgYXhlLlZpcnR1YWxOb2RlKG5vZGUsIHBhcmVudFZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBfdk5vZGUuX3N0YWNraW5nT3JkZXIgPSBjcmVhdGVTdGFja2luZ09yZGVyKF92Tm9kZSwgcGFyZW50Vk5vZGUsIG5vZGVJbmRleCsrKTtcbiAgICAgICAgdmFyIHNjcm9sbFJlZ2lvblBhcmVudCA9IGZpbmRTY3JvbGxSZWdpb25QYXJlbnQoX3ZOb2RlLCBwYXJlbnRWTm9kZSk7XG4gICAgICAgIHZhciBncmlkID0gc2Nyb2xsUmVnaW9uUGFyZW50ID8gc2Nyb2xsUmVnaW9uUGFyZW50Ll9zdWJHcmlkIDogcm9vdEdyaWQ7XG4gICAgICAgIGlmIChnZXRfc2Nyb2xsX2RlZmF1bHQoX3ZOb2RlLmFjdHVhbE5vZGUpKSB7XG4gICAgICAgICAgdmFyIF9zdWJHcmlkID0gbmV3IEdyaWQoX3ZOb2RlKTtcbiAgICAgICAgICBfdk5vZGUuX3N1YkdyaWQgPSBfc3ViR3JpZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVjdCA9IF92Tm9kZS5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gICAgICAgIGlmIChyZWN0LndpZHRoICE9PSAwICYmIHJlY3QuaGVpZ2h0ICE9PSAwICYmIF9pc1Zpc2libGVPblNjcmVlbihub2RlKSkge1xuICAgICAgICAgIGFkZE5vZGVUb0dyaWQoZ3JpZCwgX3ZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNfc2hhZG93X3Jvb3RfZGVmYXVsdChub2RlKSkge1xuICAgICAgICAgIF9jcmVhdGVHcmlkKG5vZGUuc2hhZG93Um9vdCwgZ3JpZCwgX3ZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gdHJlZVdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnN0YW50c19kZWZhdWx0LmdyaWRTaXplO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1N0YWNraW5nQ29udGV4dCh2Tm9kZSwgcGFyZW50Vk5vZGUpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdwb3NpdGlvbicpO1xuICAgICAgdmFyIHpJbmRleCA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCd6LWluZGV4Jyk7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdmaXhlZCcgfHwgcG9zaXRpb24gPT09ICdzdGlja3knKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHpJbmRleCAhPT0gJ2F1dG8nICYmIHBvc2l0aW9uICE9PSAnc3RhdGljJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnb3BhY2l0eScpICE9PSAnMScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgdHJhbnNmb3JtID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJy13ZWJraXQtdHJhbnNmb3JtJykgfHwgdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJy1tcy10cmFuc2Zvcm0nKSB8fCB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykgfHwgJ25vbmUnO1xuICAgICAgaWYgKHRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1peEJsZW5kTW9kZSA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdtaXgtYmxlbmQtbW9kZScpO1xuICAgICAgaWYgKG1peEJsZW5kTW9kZSAmJiBtaXhCbGVuZE1vZGUgIT09ICdub3JtYWwnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGZpbHRlciA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdmaWx0ZXInKTtcbiAgICAgIGlmIChmaWx0ZXIgJiYgZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcGVyc3BlY3RpdmUgPSB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgncGVyc3BlY3RpdmUnKTtcbiAgICAgIGlmIChwZXJzcGVjdGl2ZSAmJiBwZXJzcGVjdGl2ZSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGNsaXBQYXRoID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ2NsaXAtcGF0aCcpO1xuICAgICAgaWYgKGNsaXBQYXRoICYmIGNsaXBQYXRoICE9PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgbWFzayA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCctd2Via2l0LW1hc2snKSB8fCB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnbWFzaycpIHx8ICdub25lJztcbiAgICAgIGlmIChtYXNrICE9PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgbWFza0ltYWdlID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJy13ZWJraXQtbWFzay1pbWFnZScpIHx8IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdtYXNrLWltYWdlJykgfHwgJ25vbmUnO1xuICAgICAgaWYgKG1hc2tJbWFnZSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1hc2tCb3JkZXIgPSB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnLXdlYmtpdC1tYXNrLWJvcmRlcicpIHx8IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdtYXNrLWJvcmRlcicpIHx8ICdub25lJztcbiAgICAgIGlmIChtYXNrQm9yZGVyICE9PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ2lzb2xhdGlvbicpID09PSAnaXNvbGF0ZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgd2lsbENoYW5nZSA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCd3aWxsLWNoYW5nZScpO1xuICAgICAgaWYgKHdpbGxDaGFuZ2UgPT09ICd0cmFuc2Zvcm0nIHx8IHdpbGxDaGFuZ2UgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmcnKSA9PT0gJ3RvdWNoJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBjb250YWluID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ2NvbnRhaW4nKTtcbiAgICAgIGlmIChbICdsYXlvdXQnLCAncGFpbnQnLCAnc3RyaWN0JywgJ2NvbnRlbnQnIF0uaW5jbHVkZXMoY29udGFpbikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoekluZGV4ICE9PSAnYXV0bycgJiYgaXNGbGV4T3JHcmlkQ29udGFpbmVyKHBhcmVudFZOb2RlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNGbGV4T3JHcmlkQ29udGFpbmVyKHZOb2RlKSB7XG4gICAgICBpZiAoIXZOb2RlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBkaXNwbGF5MiA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5Jyk7XG4gICAgICByZXR1cm4gWyAnZmxleCcsICdpbmxpbmUtZmxleCcsICdncmlkJywgJ2lubGluZS1ncmlkJyBdLmluY2x1ZGVzKGRpc3BsYXkyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlU3RhY2tpbmdPcmRlcih2Tm9kZSwgcGFyZW50Vk5vZGUsIHRyZWVPcmRlcikge1xuICAgICAgdmFyIHN0YWNraW5nT3JkZXIgPSBwYXJlbnRWTm9kZS5fc3RhY2tpbmdPcmRlci5zbGljZSgpO1xuICAgICAgaWYgKGlzU3RhY2tpbmdDb250ZXh0KHZOb2RlLCBwYXJlbnRWTm9kZSkpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc3RhY2tpbmdPcmRlci5maW5kSW5kZXgoZnVuY3Rpb24oX3JlZjIwKSB7XG4gICAgICAgICAgdmFyIHN0YWNrTGV2ZWwyID0gX3JlZjIwLnN0YWNrTGV2ZWw7XG4gICAgICAgICAgcmV0dXJuIFsgUk9PVF9MRVZFTCwgRkxPQVRfTEVWRUwsIFBPU0lUSU9OX0xFVkVMIF0uaW5jbHVkZXMoc3RhY2tMZXZlbDIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHN0YWNraW5nT3JkZXIuc3BsaWNlKGluZGV4LCBzdGFja2luZ09yZGVyLmxlbmd0aCAtIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0YWNrTGV2ZWwgPSBnZXRTdGFja0xldmVsKHZOb2RlLCBwYXJlbnRWTm9kZSk7XG4gICAgICBpZiAoc3RhY2tMZXZlbCAhPT0gbnVsbCkge1xuICAgICAgICBzdGFja2luZ09yZGVyLnB1c2goY3JlYXRlU3RhY2tpbmdDb250ZXh0KHN0YWNrTGV2ZWwsIHRyZWVPcmRlciwgdk5vZGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFja2luZ09yZGVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVTdGFja2luZ0NvbnRleHQoc3RhY2tMZXZlbCwgdHJlZU9yZGVyLCB2Tm9kZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhY2tMZXZlbDogc3RhY2tMZXZlbCxcbiAgICAgICAgdHJlZU9yZGVyOiB0cmVlT3JkZXIsXG4gICAgICAgIHZOb2RlOiB2Tm9kZVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3RhY2tMZXZlbCh2Tm9kZSwgcGFyZW50Vk5vZGUpIHtcbiAgICAgIHZhciB6SW5kZXggPSBnZXRSZWFsWkluZGV4KHZOb2RlLCBwYXJlbnRWTm9kZSk7XG4gICAgICBpZiAoIVsgJ2F1dG8nLCAnMCcgXS5pbmNsdWRlcyh6SW5kZXgpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCh6SW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdwb3NpdGlvbicpICE9PSAnc3RhdGljJykge1xuICAgICAgICByZXR1cm4gUE9TSVRJT05fTEVWRUw7XG4gICAgICB9XG4gICAgICBpZiAodk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ2Zsb2F0JykgIT09ICdub25lJykge1xuICAgICAgICByZXR1cm4gRkxPQVRfTEVWRUw7XG4gICAgICB9XG4gICAgICBpZiAoaXNTdGFja2luZ0NvbnRleHQodk5vZGUsIHBhcmVudFZOb2RlKSkge1xuICAgICAgICByZXR1cm4gREVGQVVMVF9MRVZFTDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRSZWFsWkluZGV4KHZOb2RlLCBwYXJlbnRWTm9kZSkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ3Bvc2l0aW9uJyk7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdzdGF0aWMnICYmICFpc0ZsZXhPckdyaWRDb250YWluZXIocGFyZW50Vk5vZGUpKSB7XG4gICAgICAgIHJldHVybiAnYXV0byc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ3otaW5kZXgnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZFNjcm9sbFJlZ2lvblBhcmVudCh2Tm9kZSwgcGFyZW50Vk5vZGUpIHtcbiAgICAgIHZhciBzY3JvbGxSZWdpb25QYXJlbnQgPSBudWxsO1xuICAgICAgdmFyIGNoZWNrZWROb2RlcyA9IFsgdk5vZGUgXTtcbiAgICAgIHdoaWxlIChwYXJlbnRWTm9kZSkge1xuICAgICAgICBpZiAoZ2V0X3Njcm9sbF9kZWZhdWx0KHBhcmVudFZOb2RlLmFjdHVhbE5vZGUpKSB7XG4gICAgICAgICAgc2Nyb2xsUmVnaW9uUGFyZW50ID0gcGFyZW50Vk5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudFZOb2RlLl9zY3JvbGxSZWdpb25QYXJlbnQpIHtcbiAgICAgICAgICBzY3JvbGxSZWdpb25QYXJlbnQgPSBwYXJlbnRWTm9kZS5fc2Nyb2xsUmVnaW9uUGFyZW50O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrZWROb2Rlcy5wdXNoKHBhcmVudFZOb2RlKTtcbiAgICAgICAgcGFyZW50Vk5vZGUgPSBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChwYXJlbnRWTm9kZS5hY3R1YWxOb2RlLnBhcmVudEVsZW1lbnQgfHwgcGFyZW50Vk5vZGUuYWN0dWFsTm9kZS5wYXJlbnROb2RlKTtcbiAgICAgIH1cbiAgICAgIGNoZWNrZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKHZpcnR1YWxOb2RlKSB7XG4gICAgICAgIHJldHVybiB2aXJ0dWFsTm9kZS5fc2Nyb2xsUmVnaW9uUGFyZW50ID0gc2Nyb2xsUmVnaW9uUGFyZW50O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2Nyb2xsUmVnaW9uUGFyZW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGROb2RlVG9HcmlkKGdyaWQsIHZOb2RlKSB7XG4gICAgICB2YXIgb3ZlcmZsb3dIaWRkZW5Ob2RlcyA9IGdldF9vdmVyZmxvd19oaWRkZW5fYW5jZXN0b3JzX2RlZmF1bHQodk5vZGUpO1xuICAgICAgdk5vZGUuY2xpZW50UmVjdHMuZm9yRWFjaChmdW5jdGlvbihjbGllbnRSZWN0KSB7XG4gICAgICAgIHZhciBfdk5vZGUkX2dyaWQ7XG4gICAgICAgIHZhciB2aXNpYmxlUmVjdCA9IG92ZXJmbG93SGlkZGVuTm9kZXMucmVkdWNlKGZ1bmN0aW9uKHJlY3QsIG92ZXJmbG93Tm9kZSkge1xuICAgICAgICAgIHJldHVybiByZWN0ICYmIF9nZXRJbnRlcnNlY3Rpb25SZWN0KHJlY3QsIG92ZXJmbG93Tm9kZS5ib3VuZGluZ0NsaWVudFJlY3QpO1xuICAgICAgICB9LCBjbGllbnRSZWN0KTtcbiAgICAgICAgaWYgKCF2aXNpYmxlUmVjdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAoX3ZOb2RlJF9ncmlkID0gdk5vZGUuX2dyaWQpICE9PSBudWxsICYmIF92Tm9kZSRfZ3JpZCAhPT0gdm9pZCAwID8gX3ZOb2RlJF9ncmlkIDogdk5vZGUuX2dyaWQgPSBncmlkO1xuICAgICAgICB2YXIgZ3JpZFJlY3QgPSBncmlkLmdldEdyaWRQb3NpdGlvbk9mUmVjdCh2aXNpYmxlUmVjdCk7XG4gICAgICAgIGdyaWQubG9vcEdyaWRQb3NpdGlvbihncmlkUmVjdCwgZnVuY3Rpb24oZ3JpZENlbGwpIHtcbiAgICAgICAgICBpZiAoIWdyaWRDZWxsLmluY2x1ZGVzKHZOb2RlKSkge1xuICAgICAgICAgICAgZ3JpZENlbGwucHVzaCh2Tm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgR3JpZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gR3JpZCgpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyaWQpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5jZWxscyA9IFtdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhHcmlkLCBbIHtcbiAgICAgICAga2V5OiAndG9HcmlkSW5kZXgnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdG9HcmlkSW5kZXgobnVtKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtIC8gY29uc3RhbnRzX2RlZmF1bHQuZ3JpZFNpemUpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldENlbGxGcm9tUG9pbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2VsbEZyb21Qb2ludChfcmVmMjEpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkY2VsbHMsIF9yb3c7XG4gICAgICAgICAgdmFyIHggPSBfcmVmMjEueCwgeSA9IF9yZWYyMS55O1xuICAgICAgICAgIGFzc2VydF9kZWZhdWx0KHRoaXMuYm91bmRhcmllcywgJ0dyaWQgZG9lcyBub3QgaGF2ZSBjZWxscyBhZGRlZCcpO1xuICAgICAgICAgIHZhciByb3dJbmRleCA9IHRoaXMudG9HcmlkSW5kZXgoeSk7XG4gICAgICAgICAgdmFyIGNvbEluZGV4ID0gdGhpcy50b0dyaWRJbmRleCh4KTtcbiAgICAgICAgICBhc3NlcnRfZGVmYXVsdChfaXNQb2ludEluUmVjdCh7XG4gICAgICAgICAgICB5OiByb3dJbmRleCxcbiAgICAgICAgICAgIHg6IGNvbEluZGV4XG4gICAgICAgICAgfSwgdGhpcy5ib3VuZGFyaWVzKSwgJ0VsZW1lbnQgbWlkcG9pbnQgZXhjZWVkcyB0aGUgZ3JpZCBib3VuZHMnKTtcbiAgICAgICAgICB2YXIgcm93ID0gKF90aGlzJGNlbGxzID0gdGhpcy5jZWxsc1tyb3dJbmRleCAtIHRoaXMuY2VsbHMuX25lZ2F0aXZlSW5kZXhdKSAhPT0gbnVsbCAmJiBfdGhpcyRjZWxscyAhPT0gdm9pZCAwID8gX3RoaXMkY2VsbHMgOiBbXTtcbiAgICAgICAgICByZXR1cm4gKF9yb3cgPSByb3dbY29sSW5kZXggLSByb3cuX25lZ2F0aXZlSW5kZXhdKSAhPT0gbnVsbCAmJiBfcm93ICE9PSB2b2lkIDAgPyBfcm93IDogW107XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnbG9vcEdyaWRQb3NpdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb29wR3JpZFBvc2l0aW9uKGdyaWRQb3NpdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgX2dyaWRQb3NpdGlvbiA9IGdyaWRQb3NpdGlvbiwgbGVmdCA9IF9ncmlkUG9zaXRpb24ubGVmdCwgcmlnaHQgPSBfZ3JpZFBvc2l0aW9uLnJpZ2h0LCB0b3AgPSBfZ3JpZFBvc2l0aW9uLnRvcCwgYm90dG9tID0gX2dyaWRQb3NpdGlvbi5ib3R0b207XG4gICAgICAgICAgaWYgKHRoaXMuYm91bmRhcmllcykge1xuICAgICAgICAgICAgZ3JpZFBvc2l0aW9uID0gX2dldEJvdW5kaW5nUmVjdCh0aGlzLmJvdW5kYXJpZXMsIGdyaWRQb3NpdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYm91bmRhcmllcyA9IGdyaWRQb3NpdGlvbjtcbiAgICAgICAgICBsb29wTmVnYXRpdmVJbmRleE1hdHJpeCh0aGlzLmNlbGxzLCB0b3AsIGJvdHRvbSwgZnVuY3Rpb24oZ3JpZFJvdywgcm93KSB7XG4gICAgICAgICAgICBsb29wTmVnYXRpdmVJbmRleE1hdHJpeChncmlkUm93LCBsZWZ0LCByaWdodCwgZnVuY3Rpb24oZ3JpZENlbGwsIGNvbCkge1xuICAgICAgICAgICAgICBjYWxsYmFjayhncmlkQ2VsbCwge1xuICAgICAgICAgICAgICAgIHJvdzogcm93LFxuICAgICAgICAgICAgICAgIGNvbDogY29sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0R3JpZFBvc2l0aW9uT2ZSZWN0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdyaWRQb3NpdGlvbk9mUmVjdChfcmVmMjIpIHtcbiAgICAgICAgICB2YXIgdG9wID0gX3JlZjIyLnRvcCwgcmlnaHQgPSBfcmVmMjIucmlnaHQsIGJvdHRvbSA9IF9yZWYyMi5ib3R0b20sIGxlZnQgPSBfcmVmMjIubGVmdDtcbiAgICAgICAgICB2YXIgbWFyZ2luID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgICAgICAgIHRvcCA9IHRoaXMudG9HcmlkSW5kZXgodG9wIC0gbWFyZ2luKTtcbiAgICAgICAgICByaWdodCA9IHRoaXMudG9HcmlkSW5kZXgocmlnaHQgKyBtYXJnaW4gLSAxKTtcbiAgICAgICAgICBib3R0b20gPSB0aGlzLnRvR3JpZEluZGV4KGJvdHRvbSArIG1hcmdpbiAtIDEpO1xuICAgICAgICAgIGxlZnQgPSB0aGlzLnRvR3JpZEluZGV4KGxlZnQgLSBtYXJnaW4pO1xuICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LkRPTVJlY3QobGVmdCwgdG9wLCByaWdodCAtIGxlZnQsIGJvdHRvbSAtIHRvcCk7XG4gICAgICAgIH1cbiAgICAgIH0gXSk7XG4gICAgfSgpO1xuICAgIGZ1bmN0aW9uIGxvb3BOZWdhdGl2ZUluZGV4TWF0cml4KG1hdHJpeCwgc3RhcnQsIGVuZCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfbWF0cml4JF9uZWdhdGl2ZUluZGU7XG4gICAgICAoX21hdHJpeCRfbmVnYXRpdmVJbmRlID0gbWF0cml4Ll9uZWdhdGl2ZUluZGV4KSAhPT0gbnVsbCAmJiBfbWF0cml4JF9uZWdhdGl2ZUluZGUgIT09IHZvaWQgMCA/IF9tYXRyaXgkX25lZ2F0aXZlSW5kZSA6IG1hdHJpeC5fbmVnYXRpdmVJbmRleCA9IDA7XG4gICAgICBpZiAoc3RhcnQgPCBtYXRyaXguX25lZ2F0aXZlSW5kZXgpIHtcbiAgICAgICAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgbWF0cml4Ll9uZWdhdGl2ZUluZGV4IC0gc3RhcnQ7IF9pNisrKSB7XG4gICAgICAgICAgbWF0cml4LnNwbGljZSgwLCAwLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF0cml4Ll9uZWdhdGl2ZUluZGV4ID0gc3RhcnQ7XG4gICAgICB9XG4gICAgICB2YXIgc3RhcnRPZmZzZXQgPSBzdGFydCAtIG1hdHJpeC5fbmVnYXRpdmVJbmRleDtcbiAgICAgIHZhciBlbmRPZmZzZXQgPSBlbmQgLSBtYXRyaXguX25lZ2F0aXZlSW5kZXg7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IHN0YXJ0T2Zmc2V0OyBpbmRleCA8PSBlbmRPZmZzZXQ7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIF9pbmRleCwgX21hdHJpeCRfaW5kZXg7XG4gICAgICAgIChfbWF0cml4JF9pbmRleCA9IG1hdHJpeFtfaW5kZXggPSBpbmRleF0pICE9PSBudWxsICYmIF9tYXRyaXgkX2luZGV4ICE9PSB2b2lkIDAgPyBfbWF0cml4JF9pbmRleCA6IG1hdHJpeFtfaW5kZXhdID0gW107XG4gICAgICAgIGNhbGxiYWNrKG1hdHJpeFtpbmRleF0sIGluZGV4ICsgbWF0cml4Ll9uZWdhdGl2ZUluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gX2ZpbmROZWFyYnlFbG1zKHZOb2RlKSB7XG4gICAgICB2YXIgX3ZOb2RlJF9ncmlkMjtcbiAgICAgIHZhciBtYXJnaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICBfY3JlYXRlR3JpZCgpO1xuICAgICAgaWYgKCEoKF92Tm9kZSRfZ3JpZDIgPSB2Tm9kZS5fZ3JpZCkgIT09IG51bGwgJiYgX3ZOb2RlJF9ncmlkMiAhPT0gdm9pZCAwICYmIChfdk5vZGUkX2dyaWQyID0gX3ZOb2RlJF9ncmlkMi5jZWxscykgIT09IG51bGwgJiYgX3ZOb2RlJF9ncmlkMiAhPT0gdm9pZCAwICYmIF92Tm9kZSRfZ3JpZDIubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVjdCA9IHZOb2RlLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICAgIHZhciBncmlkID0gdk5vZGUuX2dyaWQ7XG4gICAgICB2YXIgc2VsZklzRml4ZWQgPSBoYXNGaXhlZFBvc2l0aW9uKHZOb2RlKTtcbiAgICAgIHZhciBncmlkUG9zaXRpb24gPSBncmlkLmdldEdyaWRQb3NpdGlvbk9mUmVjdChyZWN0LCBtYXJnaW4pO1xuICAgICAgdmFyIG5laWdoYm9ycyA9IFtdO1xuICAgICAgZ3JpZC5sb29wR3JpZFBvc2l0aW9uKGdyaWRQb3NpdGlvbiwgZnVuY3Rpb24odk5laWdoYm9ycykge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHZOZWlnaGJvcnMpLCBfc3RlcDQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgICB2YXIgdk5laWdoYm9yID0gX3N0ZXA0LnZhbHVlO1xuICAgICAgICAgICAgaWYgKHZOZWlnaGJvciAmJiB2TmVpZ2hib3IgIT09IHZOb2RlICYmICFuZWlnaGJvcnMuaW5jbHVkZXModk5laWdoYm9yKSAmJiBzZWxmSXNGaXhlZCA9PT0gaGFzRml4ZWRQb3NpdGlvbih2TmVpZ2hib3IpKSB7XG4gICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKHZOZWlnaGJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmVpZ2hib3JzO1xuICAgIH1cbiAgICB2YXIgaGFzRml4ZWRQb3NpdGlvbiA9IG1lbW9pemVfZGVmYXVsdChmdW5jdGlvbih2Tm9kZSkge1xuICAgICAgaWYgKCF2Tm9kZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzRml4ZWRQb3NpdGlvbih2Tm9kZS5wYXJlbnQpO1xuICAgIH0pO1xuICAgIHZhciBnZXRNb2RhbERpYWxvZyA9IG1lbW9pemVfZGVmYXVsdChmdW5jdGlvbiBnZXRNb2RhbERpYWxvZ01lbW9pemVkKCkge1xuICAgICAgdmFyIF9kaWFsb2dzJGZpbmQ7XG4gICAgICBpZiAoIWF4ZS5fdHJlZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBkaWFsb2dzID0gcXVlcnlfc2VsZWN0b3JfYWxsX2ZpbHRlcl9kZWZhdWx0KGF4ZS5fdHJlZVswXSwgJ2RpYWxvZ1tvcGVuXScsIGZ1bmN0aW9uKHZOb2RlKSB7XG4gICAgICAgIHZhciByZWN0ID0gdk5vZGUuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgICB2YXIgc3RhY2sgPSBkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludChyZWN0LmxlZnQgKyAxLCByZWN0LnRvcCArIDEpO1xuICAgICAgICByZXR1cm4gc3RhY2suaW5jbHVkZXModk5vZGUuYWN0dWFsTm9kZSkgJiYgX2lzVmlzaWJsZU9uU2NyZWVuKHZOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFkaWFsb2dzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBtb2RhbERpYWxvZyA9IGRpYWxvZ3MuZmluZChmdW5jdGlvbihkaWFsb2cpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBkaWFsb2cuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgICB2YXIgc3RhY2sgPSBkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludChyZWN0LmxlZnQgLSAxMCwgcmVjdC50b3AgLSAxMCk7XG4gICAgICAgIHJldHVybiBzdGFjay5pbmNsdWRlcyhkaWFsb2cuYWN0dWFsTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChtb2RhbERpYWxvZykge1xuICAgICAgICByZXR1cm4gbW9kYWxEaWFsb2c7XG4gICAgICB9XG4gICAgICByZXR1cm4gKF9kaWFsb2dzJGZpbmQgPSBkaWFsb2dzLmZpbmQoZnVuY3Rpb24oZGlhbG9nKSB7XG4gICAgICAgIHZhciBfZ2V0Tm9kZUZyb21HcmlkO1xuICAgICAgICB2YXIgX3JlZjIzID0gKF9nZXROb2RlRnJvbUdyaWQgPSBnZXROb2RlRnJvbUdyaWQoZGlhbG9nKSkgIT09IG51bGwgJiYgX2dldE5vZGVGcm9tR3JpZCAhPT0gdm9pZCAwID8gX2dldE5vZGVGcm9tR3JpZCA6IHt9LCB2Tm9kZSA9IF9yZWYyMy52Tm9kZSwgcmVjdCA9IF9yZWYyMy5yZWN0O1xuICAgICAgICBpZiAoIXZOb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFjayA9IGRvY3VtZW50LmVsZW1lbnRzRnJvbVBvaW50KHJlY3QubGVmdCArIDEsIHJlY3QudG9wICsgMSk7XG4gICAgICAgIHJldHVybiAhc3RhY2suaW5jbHVkZXModk5vZGUuYWN0dWFsTm9kZSk7XG4gICAgICB9KSkgIT09IG51bGwgJiYgX2RpYWxvZ3MkZmluZCAhPT0gdm9pZCAwID8gX2RpYWxvZ3MkZmluZCA6IG51bGw7XG4gICAgfSk7XG4gICAgdmFyIGdldF9tb2RhbF9kaWFsb2dfZGVmYXVsdCA9IGdldE1vZGFsRGlhbG9nO1xuICAgIGZ1bmN0aW9uIGdldE5vZGVGcm9tR3JpZChkaWFsb2cpIHtcbiAgICAgIF9jcmVhdGVHcmlkKCk7XG4gICAgICB2YXIgZ3JpZCA9IGF4ZS5fdHJlZVswXS5fZ3JpZDtcbiAgICAgIHZhciB2aWV3UmVjdCA9IG5ldyB3aW5kb3cuRE9NUmVjdCgwLCAwLCB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgIGlmICghZ3JpZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBncmlkLmNlbGxzLmxlbmd0aDsgcm93KyspIHtcbiAgICAgICAgdmFyIGNvbHMgPSBncmlkLmNlbGxzW3Jvd107XG4gICAgICAgIGlmICghY29scykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGNvbHMubGVuZ3RoOyBjb2wrKykge1xuICAgICAgICAgIHZhciBjZWxscyA9IGNvbHNbY29sXTtcbiAgICAgICAgICBpZiAoIWNlbGxzKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgX2k3ID0gMDsgX2k3IDwgY2VsbHMubGVuZ3RoOyBfaTcrKykge1xuICAgICAgICAgICAgdmFyIHZOb2RlID0gY2VsbHNbX2k3XTtcbiAgICAgICAgICAgIHZhciByZWN0ID0gdk5vZGUuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IF9nZXRJbnRlcnNlY3Rpb25SZWN0KHJlY3QsIHZpZXdSZWN0KTtcbiAgICAgICAgICAgIGlmICh2Tm9kZS5wcm9wcy5ub2RlTmFtZSAhPT0gJ2h0bWwnICYmIHZOb2RlICE9PSBkaWFsb2cgJiYgdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ3BvaW50ZXItZXZlbnRzJykgIT09ICdub25lJyAmJiBpbnRlcnNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2Tm9kZTogdk5vZGUsXG4gICAgICAgICAgICAgICAgcmVjdDogaW50ZXJzZWN0aW9uXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9pc0luZXJ0KHZOb2RlKSB7XG4gICAgICB2YXIgX3JlZjI0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwgc2tpcEFuY2VzdG9ycyA9IF9yZWYyNC5za2lwQW5jZXN0b3JzLCBpc0FuY2VzdG9yID0gX3JlZjI0LmlzQW5jZXN0b3I7XG4gICAgICBpZiAoc2tpcEFuY2VzdG9ycykge1xuICAgICAgICByZXR1cm4gaXNJbmVydFNlbGYodk5vZGUsIGlzQW5jZXN0b3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSW5lcnRBbmNlc3RvcnModk5vZGUsIGlzQW5jZXN0b3IpO1xuICAgIH1cbiAgICB2YXIgaXNJbmVydFNlbGYgPSBtZW1vaXplX2RlZmF1bHQoZnVuY3Rpb24gaXNJbmVydFNlbGZNZW1vaXplZCh2Tm9kZSwgaXNBbmNlc3Rvcikge1xuICAgICAgaWYgKHZOb2RlLmhhc0F0dHIoJ2luZXJ0JykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWlzQW5jZXN0b3IgJiYgdk5vZGUuYWN0dWFsTm9kZSkge1xuICAgICAgICB2YXIgbW9kYWxEaWFsb2cgPSBnZXRfbW9kYWxfZGlhbG9nX2RlZmF1bHQoKTtcbiAgICAgICAgaWYgKG1vZGFsRGlhbG9nICYmICFfY29udGFpbnMobW9kYWxEaWFsb2csIHZOb2RlKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgdmFyIGlzSW5lcnRBbmNlc3RvcnMgPSBtZW1vaXplX2RlZmF1bHQoZnVuY3Rpb24gaXNJbmVydEFuY2VzdG9yc01lbW9pemVkKHZOb2RlLCBpc0FuY2VzdG9yKSB7XG4gICAgICBpZiAoaXNJbmVydFNlbGYodk5vZGUsIGlzQW5jZXN0b3IpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF2Tm9kZS5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSW5lcnRBbmNlc3RvcnModk5vZGUucGFyZW50LCB0cnVlKTtcbiAgICB9KTtcbiAgICB2YXIgYWxsb3dlZERpc2FibGVkTm9kZU5hbWVzID0gWyAnYnV0dG9uJywgJ2NvbW1hbmQnLCAnZmllbGRzZXQnLCAna2V5Z2VuJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdzZWxlY3QnLCAndGV4dGFyZWEnLCAnaW5wdXQnIF07XG4gICAgZnVuY3Rpb24gaXNEaXNhYmxlZEF0dHJBbGxvd2VkKG5vZGVOYW1lMikge1xuICAgICAgcmV0dXJuIGFsbG93ZWREaXNhYmxlZE5vZGVOYW1lcy5pbmNsdWRlcyhub2RlTmFtZTIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb2N1c0Rpc2FibGVkKGVsKSB7XG4gICAgICB2YXIgX25vZGVMb29rdXAzID0gX25vZGVMb29rdXAoZWwpLCB2Tm9kZSA9IF9ub2RlTG9va3VwMy52Tm9kZTtcbiAgICAgIGlmIChpc0Rpc2FibGVkQXR0ckFsbG93ZWQodk5vZGUucHJvcHMubm9kZU5hbWUpICYmIHZOb2RlLmhhc0F0dHIoJ2Rpc2FibGVkJykgfHwgX2lzSW5lcnQodk5vZGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHBhcmVudE5vZGUgPSB2Tm9kZS5wYXJlbnQ7XG4gICAgICB2YXIgYW5jZXN0b3JzID0gW107XG4gICAgICB2YXIgZmllbGRzZXREaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgd2hpbGUgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5zaGFkb3dJZCA9PT0gdk5vZGUuc2hhZG93SWQgJiYgIWZpZWxkc2V0RGlzYWJsZWQpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2gocGFyZW50Tm9kZSk7XG4gICAgICAgIGlmIChwYXJlbnROb2RlLnByb3BzLm5vZGVOYW1lID09PSAnbGVnZW5kJykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnROb2RlLl9pbkRpc2FibGVkRmllbGRzZXQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGZpZWxkc2V0RGlzYWJsZWQgPSBwYXJlbnROb2RlLl9pbkRpc2FibGVkRmllbGRzZXQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudE5vZGUucHJvcHMubm9kZU5hbWUgPT09ICdmaWVsZHNldCcgJiYgcGFyZW50Tm9kZS5oYXNBdHRyKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgZmllbGRzZXREaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50O1xuICAgICAgfVxuICAgICAgYW5jZXN0b3JzLmZvckVhY2goZnVuY3Rpb24oYW5jZXN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9yLl9pbkRpc2FibGVkRmllbGRzZXQgPSBmaWVsZHNldERpc2FibGVkO1xuICAgICAgfSk7XG4gICAgICBpZiAoZmllbGRzZXREaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2Tm9kZS5wcm9wcy5ub2RlTmFtZSAhPT0gJ2FyZWEnKSB7XG4gICAgICAgIGlmICghdk5vZGUuYWN0dWFsTm9kZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2lzSGlkZGVuRm9yRXZlcnlvbmUodk5vZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZm9jdXNfZGlzYWJsZWRfZGVmYXVsdCA9IGZvY3VzRGlzYWJsZWQ7XG4gICAgdmFyIGFuZ3VsYXJTa2lwTGlua1JlZ2V4ID0gL15cXC9cXCMvO1xuICAgIHZhciBhbmd1bGFyUm91dGVyTGlua1JlZ2V4ID0gL14jWyEvXS87XG4gICAgZnVuY3Rpb24gX2lzQ3VycmVudFBhZ2VMaW5rKGFuY2hvcikge1xuICAgICAgdmFyIF93aW5kb3ckbG9jYXRpb247XG4gICAgICB2YXIgaHJlZiA9IGFuY2hvci5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgIGlmICghaHJlZiB8fCBocmVmID09PSAnIycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGFuZ3VsYXJTa2lwTGlua1JlZ2V4LnRlc3QoaHJlZikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaCA9IGFuY2hvci5oYXNoLCBwcm90b2NvbCA9IGFuY2hvci5wcm90b2NvbCwgaG9zdG5hbWUgPSBhbmNob3IuaG9zdG5hbWUsIHBvcnQgPSBhbmNob3IucG9ydCwgcGF0aG5hbWUgPSBhbmNob3IucGF0aG5hbWU7XG4gICAgICBpZiAoYW5ndWxhclJvdXRlckxpbmtSZWdleC50ZXN0KGhhc2gpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChocmVmLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiAoKF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24pID09PSBudWxsIHx8IF93aW5kb3ckbG9jYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF93aW5kb3ckbG9jYXRpb24ub3JpZ2luKSAhPT0gJ3N0cmluZycgfHwgd2luZG93LmxvY2F0aW9uLm9yaWdpbi5pbmRleE9mKCc6Ly8nKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgY3VycmVudFBhZ2VVcmwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgdmFyIHVybDtcbiAgICAgIGlmICghaG9zdG5hbWUpIHtcbiAgICAgICAgdXJsID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybCA9ICcnLmNvbmNhdChwcm90b2NvbCwgJy8vJykuY29uY2F0KGhvc3RuYW1lKS5jb25jYXQocG9ydCA/ICc6Jy5jb25jYXQocG9ydCkgOiAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXBhdGhuYW1lKSB7XG4gICAgICAgIHVybCArPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwgKz0gKHBhdGhuYW1lWzBdICE9PSAnLycgPyAnLycgOiAnJykgKyBwYXRobmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmwgPT09IGN1cnJlbnRQYWdlVXJsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRFbGVtZW50QnlSZWZlcmVuY2Uobm9kZSwgYXR0cikge1xuICAgICAgdmFyIGZyYWdtZW50ID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgICBpZiAoIWZyYWdtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHIgPT09ICdocmVmJyAmJiAhX2lzQ3VycmVudFBhZ2VMaW5rKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGZyYWdtZW50LmluZGV4T2YoJyMnKSAhPT0gLTEpIHtcbiAgICAgICAgZnJhZ21lbnQgPSBkZWNvZGVVUklDb21wb25lbnQoZnJhZ21lbnQuc3Vic3RyKGZyYWdtZW50LmluZGV4T2YoJyMnKSArIDEpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjYW5kaWRhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmcmFnbWVudCk7XG4gICAgICBpZiAoY2FuZGlkYXRlKSB7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGU7XG4gICAgICB9XG4gICAgICBjYW5kaWRhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShmcmFnbWVudCk7XG4gICAgICBpZiAoY2FuZGlkYXRlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlWzBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBnZXRfZWxlbWVudF9ieV9yZWZlcmVuY2VfZGVmYXVsdCA9IGdldEVsZW1lbnRCeVJlZmVyZW5jZTtcbiAgICBmdW5jdGlvbiBfdmlzdWFsbHlTb3J0KGEyLCBiMikge1xuICAgICAgX2NyZWF0ZUdyaWQoKTtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChhMi5fc3RhY2tpbmdPcmRlci5sZW5ndGgsIGIyLl9zdGFja2luZ09yZGVyLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBfaTggPSAwOyBfaTggPCBsZW5ndGg7IF9pOCsrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYjIuX3N0YWNraW5nT3JkZXJbX2k4XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGEyLl9zdGFja2luZ09yZGVyW19pOF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIyLl9zdGFja2luZ09yZGVyW19pOF0uc3RhY2tMZXZlbCA+IGEyLl9zdGFja2luZ09yZGVyW19pOF0uc3RhY2tMZXZlbCkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiMi5fc3RhY2tpbmdPcmRlcltfaThdLnN0YWNrTGV2ZWwgPCBhMi5fc3RhY2tpbmdPcmRlcltfaThdLnN0YWNrTGV2ZWwpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIyLl9zdGFja2luZ09yZGVyW19pOF0udHJlZU9yZGVyICE9PSBhMi5fc3RhY2tpbmdPcmRlcltfaThdLnRyZWVPcmRlcikge1xuICAgICAgICAgIHJldHVybiBiMi5fc3RhY2tpbmdPcmRlcltfaThdLnRyZWVPcmRlciAtIGEyLl9zdGFja2luZ09yZGVyW19pOF0udHJlZU9yZGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgYU5vZGUgPSBhMi5hY3R1YWxOb2RlO1xuICAgICAgdmFyIGJOb2RlID0gYjIuYWN0dWFsTm9kZTtcbiAgICAgIGlmIChhTm9kZS5nZXRSb290Tm9kZSAmJiBhTm9kZS5nZXRSb290Tm9kZSgpICE9PSBiTm9kZS5nZXRSb290Tm9kZSgpKSB7XG4gICAgICAgIHZhciBib3VuZGFyaWVzID0gW107XG4gICAgICAgIHdoaWxlIChhTm9kZSkge1xuICAgICAgICAgIGJvdW5kYXJpZXMucHVzaCh7XG4gICAgICAgICAgICByb290OiBhTm9kZS5nZXRSb290Tm9kZSgpLFxuICAgICAgICAgICAgbm9kZTogYU5vZGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhTm9kZSA9IGFOb2RlLmdldFJvb3ROb2RlKCkuaG9zdDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYk5vZGUgJiYgIWJvdW5kYXJpZXMuZmluZChmdW5jdGlvbihib3VuZGFyeSkge1xuICAgICAgICAgIHJldHVybiBib3VuZGFyeS5yb290ID09PSBiTm9kZS5nZXRSb290Tm9kZSgpO1xuICAgICAgICB9KSkge1xuICAgICAgICAgIGJOb2RlID0gYk5vZGUuZ2V0Um9vdE5vZGUoKS5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIGFOb2RlID0gYm91bmRhcmllcy5maW5kKGZ1bmN0aW9uKGJvdW5kYXJ5KSB7XG4gICAgICAgICAgcmV0dXJuIGJvdW5kYXJ5LnJvb3QgPT09IGJOb2RlLmdldFJvb3ROb2RlKCk7XG4gICAgICAgIH0pLm5vZGU7XG4gICAgICAgIGlmIChhTm9kZSA9PT0gYk5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gYTIuYWN0dWFsTm9kZS5nZXRSb290Tm9kZSgpICE9PSBhTm9kZS5nZXRSb290Tm9kZSgpID8gLTEgOiAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgX3dpbmRvdyROb2RlID0gd2luZG93Lk5vZGUsIERPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyA9IF93aW5kb3ckTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcsIERPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5TID0gX3dpbmRvdyROb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5TLCBET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkgPSBfd2luZG93JE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZO1xuICAgICAgdmFyIGRvY1Bvc2l0aW9uID0gYU5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYk5vZGUpO1xuICAgICAgdmFyIERPTU9yZGVyID0gZG9jUG9zaXRpb24gJiBET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcgPyAxIDogLTE7XG4gICAgICB2YXIgaXNEZXNjZW5kYW50ID0gZG9jUG9zaXRpb24gJiBET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUyB8fCBkb2NQb3NpdGlvbiAmIERPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWTtcbiAgICAgIHZhciBhUG9zaXRpb24gPSBnZXRQb3NpdGlvbk9yZGVyKGEyKTtcbiAgICAgIHZhciBiUG9zaXRpb24gPSBnZXRQb3NpdGlvbk9yZGVyKGIyKTtcbiAgICAgIGlmIChhUG9zaXRpb24gPT09IGJQb3NpdGlvbiB8fCBpc0Rlc2NlbmRhbnQpIHtcbiAgICAgICAgcmV0dXJuIERPTU9yZGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJQb3NpdGlvbiAtIGFQb3NpdGlvbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UG9zaXRpb25PcmRlcih2Tm9kZSkge1xuICAgICAgaWYgKHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykuaW5kZXhPZignaW5saW5lJykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgfVxuICAgICAgaWYgKGlzRmxvYXRlZCh2Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNGbG9hdGVkKHZOb2RlKSB7XG4gICAgICBpZiAoIXZOb2RlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh2Tm9kZS5faXNGbG9hdGVkICE9PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIHZOb2RlLl9pc0Zsb2F0ZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZmxvYXRTdHlsZSA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdmbG9hdCcpO1xuICAgICAgaWYgKGZsb2F0U3R5bGUgIT09ICdub25lJykge1xuICAgICAgICB2Tm9kZS5faXNGbG9hdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZmxvYXRlZCA9IGlzRmxvYXRlZCh2Tm9kZS5wYXJlbnQpO1xuICAgICAgdk5vZGUuX2lzRmxvYXRlZCA9IGZsb2F0ZWQ7XG4gICAgICByZXR1cm4gZmxvYXRlZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UmVjdFN0YWNrKGdyaWQsIHJlY3QpIHtcbiAgICAgIHZhciByZWN1cnNlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gICAgICB2YXIgY2VudGVyID0gX2dldFJlY3RDZW50ZXIocmVjdCk7XG4gICAgICB2YXIgZ3JpZENlbGwgPSBncmlkLmdldENlbGxGcm9tUG9pbnQoY2VudGVyKSB8fCBbXTtcbiAgICAgIHZhciBmbG9vclggPSBNYXRoLmZsb29yKGNlbnRlci54KTtcbiAgICAgIHZhciBmbG9vclkgPSBNYXRoLmZsb29yKGNlbnRlci55KTtcbiAgICAgIHZhciBzdGFjayA9IGdyaWRDZWxsLmZpbHRlcihmdW5jdGlvbihncmlkQ2VsbE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGdyaWRDZWxsTm9kZS5jbGllbnRSZWN0cy5zb21lKGZ1bmN0aW9uKGNsaWVudFJlY3QpIHtcbiAgICAgICAgICB2YXIgcmVjdFggPSBjbGllbnRSZWN0LmxlZnQ7XG4gICAgICAgICAgdmFyIHJlY3RZID0gY2xpZW50UmVjdC50b3A7XG4gICAgICAgICAgcmV0dXJuIGZsb29yWCA8IE1hdGguZmxvb3IocmVjdFggKyBjbGllbnRSZWN0LndpZHRoKSAmJiBmbG9vclggPj0gTWF0aC5mbG9vcihyZWN0WCkgJiYgZmxvb3JZIDwgTWF0aC5mbG9vcihyZWN0WSArIGNsaWVudFJlY3QuaGVpZ2h0KSAmJiBmbG9vclkgPj0gTWF0aC5mbG9vcihyZWN0WSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgZ3JpZENvbnRhaW5lciA9IGdyaWQuY29udGFpbmVyO1xuICAgICAgaWYgKGdyaWRDb250YWluZXIpIHtcbiAgICAgICAgc3RhY2sgPSBnZXRSZWN0U3RhY2soZ3JpZENvbnRhaW5lci5fZ3JpZCwgZ3JpZENvbnRhaW5lci5ib3VuZGluZ0NsaWVudFJlY3QsIHRydWUpLmNvbmNhdChzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlY3Vyc2VkKSB7XG4gICAgICAgIHN0YWNrID0gc3RhY2suc29ydChfdmlzdWFsbHlTb3J0KS5tYXAoZnVuY3Rpb24odk5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gdk5vZGUuYWN0dWFsTm9kZTtcbiAgICAgICAgfSkuY29uY2F0KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZmlsdGVyKGZ1bmN0aW9uKG5vZGUsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgIHJldHVybiBhcnJheS5pbmRleE9mKG5vZGUpID09PSBpbmRleDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRTdGFjayhub2RlKSB7XG4gICAgICBfY3JlYXRlR3JpZCgpO1xuICAgICAgdmFyIHZOb2RlID0gZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQobm9kZSk7XG4gICAgICB2YXIgZ3JpZCA9IHZOb2RlLl9ncmlkO1xuICAgICAgaWYgKCFncmlkKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXRSZWN0U3RhY2soZ3JpZCwgdk5vZGUuYm91bmRpbmdDbGllbnRSZWN0KTtcbiAgICB9XG4gICAgdmFyIGdldF9lbGVtZW50X3N0YWNrX2RlZmF1bHQgPSBnZXRFbGVtZW50U3RhY2s7XG4gICAgZnVuY3Rpb24gZ2V0VGFiYmFibGVFbGVtZW50cyh2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIG5vZGVBbmREZXNjZW5kZW50cyA9IHF1ZXJ5X3NlbGVjdG9yX2FsbF9kZWZhdWx0KHZpcnR1YWxOb2RlLCAnKicpO1xuICAgICAgdmFyIHRhYmJhYmxlRWxlbWVudHMgPSBub2RlQW5kRGVzY2VuZGVudHMuZmlsdGVyKGZ1bmN0aW9uKHZOb2RlKSB7XG4gICAgICAgIHZhciBpc0ZvY3VzYWJsZTIgPSB2Tm9kZS5pc0ZvY3VzYWJsZTtcbiAgICAgICAgdmFyIHRhYkluZGV4ID0gcGFyc2VfdGFiaW5kZXhfZGVmYXVsdCh2Tm9kZS5hY3R1YWxOb2RlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSk7XG4gICAgICAgIHJldHVybiB0YWJJbmRleCAhPT0gbnVsbCA/IGlzRm9jdXNhYmxlMiAmJiB0YWJJbmRleCA+PSAwIDogaXNGb2N1c2FibGUyO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGFiYmFibGVFbGVtZW50cztcbiAgICB9XG4gICAgdmFyIGdldF90YWJiYWJsZV9lbGVtZW50c19kZWZhdWx0ID0gZ2V0VGFiYmFibGVFbGVtZW50cztcbiAgICBmdW5jdGlvbiBpc05hdGl2ZWx5Rm9jdXNhYmxlKGVsKSB7XG4gICAgICB2YXIgX25vZGVMb29rdXA0ID0gX25vZGVMb29rdXAoZWwpLCB2Tm9kZSA9IF9ub2RlTG9va3VwNC52Tm9kZTtcbiAgICAgIGlmICghdk5vZGUgfHwgZm9jdXNfZGlzYWJsZWRfZGVmYXVsdCh2Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh2Tm9kZS5wcm9wcy5ub2RlTmFtZSkge1xuICAgICAgIGNhc2UgJ2EnOlxuICAgICAgIGNhc2UgJ2FyZWEnOlxuICAgICAgICBpZiAodk5vZGUuaGFzQXR0cignaHJlZicpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIHJldHVybiB2Tm9kZS5wcm9wcy50eXBlICE9PSAnaGlkZGVuJztcblxuICAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgIGNhc2UgJ3N1bW1hcnknOlxuICAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgY2FzZSAnZGV0YWlscyc6XG4gICAgICAgIHJldHVybiAhcXVlcnlfc2VsZWN0b3JfYWxsX2RlZmF1bHQodk5vZGUsICdzdW1tYXJ5JykubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgaXNfbmF0aXZlbHlfZm9jdXNhYmxlX2RlZmF1bHQgPSBpc05hdGl2ZWx5Rm9jdXNhYmxlO1xuICAgIGZ1bmN0aW9uIF9pc0ZvY3VzYWJsZShlbCkge1xuICAgICAgdmFyIF9ub2RlTG9va3VwNSA9IF9ub2RlTG9va3VwKGVsKSwgdk5vZGUgPSBfbm9kZUxvb2t1cDUudk5vZGU7XG4gICAgICBpZiAodk5vZGUucHJvcHMubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZvY3VzX2Rpc2FibGVkX2RlZmF1bHQodk5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNfbmF0aXZlbHlfZm9jdXNhYmxlX2RlZmF1bHQodk5vZGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHRhYmluZGV4ID0gcGFyc2VfdGFiaW5kZXhfZGVmYXVsdCh2Tm9kZS5hdHRyKCd0YWJpbmRleCcpKTtcbiAgICAgIHJldHVybiB0YWJpbmRleCAhPT0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2lzSW5UYWJPcmRlcihlbCkge1xuICAgICAgdmFyIF9ub2RlTG9va3VwNiA9IF9ub2RlTG9va3VwKGVsKSwgdk5vZGUgPSBfbm9kZUxvb2t1cDYudk5vZGU7XG4gICAgICBpZiAodk5vZGUucHJvcHMubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhYmluZGV4ID0gcGFyc2VfdGFiaW5kZXhfZGVmYXVsdCh2Tm9kZS5hdHRyKCd0YWJpbmRleCcpKTtcbiAgICAgIGlmICh0YWJpbmRleCA8PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2lzRm9jdXNhYmxlKHZOb2RlKTtcbiAgICB9XG4gICAgdmFyIGdldF90YXJnZXRfcmVjdHNfZGVmYXVsdCA9IG1lbW9pemVfZGVmYXVsdChnZXRUYXJnZXRSZWN0cyk7XG4gICAgZnVuY3Rpb24gZ2V0VGFyZ2V0UmVjdHModk5vZGUpIHtcbiAgICAgIHZhciBub2RlUmVjdCA9IHZOb2RlLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICAgIHZhciBvdmVybGFwcGluZ1ZOb2RlcyA9IF9maW5kTmVhcmJ5RWxtcyh2Tm9kZSkuZmlsdGVyKGZ1bmN0aW9uKHZOZWlnaGJvcikge1xuICAgICAgICByZXR1cm4gX2hhc1Zpc3VhbE92ZXJsYXAodk5vZGUsIHZOZWlnaGJvcikgJiYgdk5laWdoYm9yLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdwb2ludGVyLWV2ZW50cycpICE9PSAnbm9uZScgJiYgIWlzRGVzY2VuZGFudE5vdEluVGFiT3JkZXIodk5vZGUsIHZOZWlnaGJvcik7XG4gICAgICB9KTtcbiAgICAgIGlmICghb3ZlcmxhcHBpbmdWTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbIG5vZGVSZWN0IF07XG4gICAgICB9XG4gICAgICB2YXIgb2JzY3VyaW5nUmVjdHMgPSBvdmVybGFwcGluZ1ZOb2Rlcy5tYXAoZnVuY3Rpb24oX3JlZjI1KSB7XG4gICAgICAgIHZhciByZWN0ID0gX3JlZjI1LmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfc3BsaXRSZWN0cyhub2RlUmVjdCwgb2JzY3VyaW5nUmVjdHMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0Rlc2NlbmRhbnROb3RJblRhYk9yZGVyKHZBbmNlc3Rvciwgdk5vZGUpIHtcbiAgICAgIHJldHVybiBfY29udGFpbnModkFuY2VzdG9yLCB2Tm9kZSkgJiYgIV9pc0luVGFiT3JkZXIodk5vZGUpO1xuICAgIH1cbiAgICB2YXIgZ2V0X3RhcmdldF9zaXplX2RlZmF1bHQgPSBtZW1vaXplX2RlZmF1bHQoZ2V0VGFyZ2V0U2l6ZSk7XG4gICAgZnVuY3Rpb24gZ2V0VGFyZ2V0U2l6ZSh2Tm9kZSwgbWluU2l6ZSkge1xuICAgICAgdmFyIHJlY3RzID0gZ2V0X3RhcmdldF9yZWN0c19kZWZhdWx0KHZOb2RlKTtcbiAgICAgIHJldHVybiBnZXRMYXJnZXN0UmVjdChyZWN0cywgbWluU2l6ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldExhcmdlc3RSZWN0KHJlY3RzLCBtaW5TaXplKSB7XG4gICAgICByZXR1cm4gcmVjdHMucmVkdWNlKGZ1bmN0aW9uKHJlY3RBLCByZWN0Qikge1xuICAgICAgICB2YXIgcmVjdEFpc01pbmltdW0gPSBfcmVjdEhhc01pbmltdW1TaXplKG1pblNpemUsIHJlY3RBKTtcbiAgICAgICAgdmFyIHJlY3RCaXNNaW5pbXVtID0gX3JlY3RIYXNNaW5pbXVtU2l6ZShtaW5TaXplLCByZWN0Qik7XG4gICAgICAgIGlmIChyZWN0QWlzTWluaW11bSAhPT0gcmVjdEJpc01pbmltdW0pIHtcbiAgICAgICAgICByZXR1cm4gcmVjdEFpc01pbmltdW0gPyByZWN0QSA6IHJlY3RCO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmVhQSA9IHJlY3RBLndpZHRoICogcmVjdEEuaGVpZ2h0O1xuICAgICAgICB2YXIgYXJlYUIgPSByZWN0Qi53aWR0aCAqIHJlY3RCLmhlaWdodDtcbiAgICAgICAgcmV0dXJuIGFyZWFBID4gYXJlYUIgPyByZWN0QSA6IHJlY3RCO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciB0ZXh0X2V4cG9ydHMgPSB7fTtcbiAgICBfX2V4cG9ydCh0ZXh0X2V4cG9ydHMsIHtcbiAgICAgIGFjY2Vzc2libGVUZXh0OiBmdW5jdGlvbiBhY2Nlc3NpYmxlVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIGFjY2Vzc2libGVfdGV4dF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGFjY2Vzc2libGVUZXh0VmlydHVhbDogZnVuY3Rpb24gYWNjZXNzaWJsZVRleHRWaXJ0dWFsKCkge1xuICAgICAgICByZXR1cm4gX2FjY2Vzc2libGVUZXh0VmlydHVhbDtcbiAgICAgIH0sXG4gICAgICBhdXRvY29tcGxldGU6IGZ1bmN0aW9uIGF1dG9jb21wbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9hdXRvY29tcGxldGU7XG4gICAgICB9LFxuICAgICAgZm9ybUNvbnRyb2xWYWx1ZTogZnVuY3Rpb24gZm9ybUNvbnRyb2xWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1fY29udHJvbF92YWx1ZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGZvcm1Db250cm9sVmFsdWVNZXRob2RzOiBmdW5jdGlvbiBmb3JtQ29udHJvbFZhbHVlTWV0aG9kcygpIHtcbiAgICAgICAgcmV0dXJuIF9mb3JtQ29udHJvbFZhbHVlTWV0aG9kcztcbiAgICAgIH0sXG4gICAgICBoYXNVbmljb2RlOiBmdW5jdGlvbiBoYXNVbmljb2RlKCkge1xuICAgICAgICByZXR1cm4gaGFzX3VuaWNvZGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc0h1bWFuSW50ZXJwcmV0YWJsZTogZnVuY3Rpb24gaXNIdW1hbkludGVycHJldGFibGUoKSB7XG4gICAgICAgIHJldHVybiBpc19odW1hbl9pbnRlcnByZXRhYmxlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNJY29uTGlnYXR1cmU6IGZ1bmN0aW9uIGlzSWNvbkxpZ2F0dXJlKCkge1xuICAgICAgICByZXR1cm4gX2lzSWNvbkxpZ2F0dXJlO1xuICAgICAgfSxcbiAgICAgIGlzVmFsaWRBdXRvY29tcGxldGU6IGZ1bmN0aW9uIGlzVmFsaWRBdXRvY29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiBpc192YWxpZF9hdXRvY29tcGxldGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBsYWJlbDogZnVuY3Rpb24gbGFiZWwoKSB7XG4gICAgICAgIHJldHVybiBsYWJlbF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGxhYmVsVGV4dDogZnVuY3Rpb24gbGFiZWxUZXh0KCkge1xuICAgICAgICByZXR1cm4gbGFiZWxfdGV4dF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGxhYmVsVmlydHVhbDogZnVuY3Rpb24gbGFiZWxWaXJ0dWFsKCkge1xuICAgICAgICByZXR1cm4gbGFiZWxfdmlydHVhbF9kZWZhdWx0MjtcbiAgICAgIH0sXG4gICAgICBuYXRpdmVFbGVtZW50VHlwZTogZnVuY3Rpb24gbmF0aXZlRWxlbWVudFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVfZWxlbWVudF90eXBlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgbmF0aXZlVGV4dEFsdGVybmF0aXZlOiBmdW5jdGlvbiBuYXRpdmVUZXh0QWx0ZXJuYXRpdmUoKSB7XG4gICAgICAgIHJldHVybiBfbmF0aXZlVGV4dEFsdGVybmF0aXZlO1xuICAgICAgfSxcbiAgICAgIG5hdGl2ZVRleHRNZXRob2RzOiBmdW5jdGlvbiBuYXRpdmVUZXh0TWV0aG9kcygpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZV90ZXh0X21ldGhvZHNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICByZW1vdmVVbmljb2RlOiBmdW5jdGlvbiByZW1vdmVVbmljb2RlKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlX3VuaWNvZGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBzYW5pdGl6ZTogZnVuY3Rpb24gc2FuaXRpemUoKSB7XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHN1YnRyZWVUZXh0OiBmdW5jdGlvbiBzdWJ0cmVlVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHN1YnRyZWVfdGV4dF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHRpdGxlVGV4dDogZnVuY3Rpb24gdGl0bGVUZXh0KCkge1xuICAgICAgICByZXR1cm4gdGl0bGVfdGV4dF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHVuc3VwcG9ydGVkOiBmdW5jdGlvbiB1bnN1cHBvcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHVuc3VwcG9ydGVkX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgdmlzaWJsZTogZnVuY3Rpb24gdmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHZpc2libGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB2aXNpYmxlVGV4dE5vZGVzOiBmdW5jdGlvbiB2aXNpYmxlVGV4dE5vZGVzKCkge1xuICAgICAgICByZXR1cm4gdmlzaWJsZV90ZXh0X25vZGVzX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgdmlzaWJsZVZpcnR1YWw6IGZ1bmN0aW9uIHZpc2libGVWaXJ0dWFsKCkge1xuICAgICAgICByZXR1cm4gdmlzaWJsZV92aXJ0dWFsX2RlZmF1bHQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gaWRyZWZzKG5vZGUsIGF0dHIpIHtcbiAgICAgIG5vZGUgPSBub2RlLmFjdHVhbE5vZGUgfHwgbm9kZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkb2MgPSBnZXRfcm9vdF9ub2RlX2RlZmF1bHQyKG5vZGUpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIHZhciBhdHRyVmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgaWYgKGF0dHJWYWx1ZSkge1xuICAgICAgICAgIGF0dHJWYWx1ZSA9IHRva2VuX2xpc3RfZGVmYXVsdChhdHRyVmFsdWUpO1xuICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhdHRyVmFsdWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChkb2MuZ2V0RWxlbWVudEJ5SWQoYXR0clZhbHVlW2luZGV4XSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSBjYXRjaCAoX3VudXNlZDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHJlc29sdmUgaWQgcmVmZXJlbmNlcyBmb3Igbm9uLURPTSBub2RlcycpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaWRyZWZzX2RlZmF1bHQgPSBpZHJlZnM7XG4gICAgZnVuY3Rpb24gYWNjZXNzaWJsZVRleHQoZWxlbWVudCwgY29udGV4dCkge1xuICAgICAgdmFyIHZpcnR1YWxOb2RlID0gZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQoZWxlbWVudCk7XG4gICAgICByZXR1cm4gX2FjY2Vzc2libGVUZXh0VmlydHVhbCh2aXJ0dWFsTm9kZSwgY29udGV4dCk7XG4gICAgfVxuICAgIHZhciBhY2Nlc3NpYmxlX3RleHRfZGVmYXVsdCA9IGFjY2Vzc2libGVUZXh0O1xuICAgIGZ1bmN0aW9uIGFyaWFsYWJlbGxlZGJ5VGV4dChlbGVtZW50KSB7XG4gICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgX25vZGVMb29rdXA3ID0gX25vZGVMb29rdXAoZWxlbWVudCksIHZOb2RlID0gX25vZGVMb29rdXA3LnZOb2RlO1xuICAgICAgaWYgKCh2Tm9kZSA9PT0gbnVsbCB8fCB2Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdk5vZGUucHJvcHMubm9kZVR5cGUpICE9PSAxKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmICh2Tm9kZS5wcm9wcy5ub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0LmluTGFiZWxsZWRCeUNvbnRleHQgfHwgY29udGV4dC5pbkNvbnRyb2xDb250ZXh0IHx8ICF2Tm9kZS5hdHRyKCdhcmlhLWxhYmVsbGVkYnknKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVmcyA9IGlkcmVmc19kZWZhdWx0KHZOb2RlLCAnYXJpYS1sYWJlbGxlZGJ5JykuZmlsdGVyKGZ1bmN0aW9uKGVsbSkge1xuICAgICAgICByZXR1cm4gZWxtO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVmcy5yZWR1Y2UoZnVuY3Rpb24oYWNjZXNzaWJsZU5hbWUsIGVsbSkge1xuICAgICAgICB2YXIgYWNjZXNzaWJsZU5hbWVBZGQgPSBhY2Nlc3NpYmxlX3RleHRfZGVmYXVsdChlbG0sIF9leHRlbmRzKHtcbiAgICAgICAgICBpbkxhYmVsbGVkQnlDb250ZXh0OiB0cnVlLFxuICAgICAgICAgIHN0YXJ0Tm9kZTogY29udGV4dC5zdGFydE5vZGUgfHwgdk5vZGVcbiAgICAgICAgfSwgY29udGV4dCkpO1xuICAgICAgICBpZiAoIWFjY2Vzc2libGVOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGFjY2Vzc2libGVOYW1lQWRkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAnJy5jb25jYXQoYWNjZXNzaWJsZU5hbWUsICcgJykuY29uY2F0KGFjY2Vzc2libGVOYW1lQWRkKTtcbiAgICAgICAgfVxuICAgICAgfSwgJycpO1xuICAgIH1cbiAgICB2YXIgYXJpYWxhYmVsbGVkYnlfdGV4dF9kZWZhdWx0ID0gYXJpYWxhYmVsbGVkYnlUZXh0O1xuICAgIGZ1bmN0aW9uIF9hcmlhbGFiZWxUZXh0KGVsZW1lbnQpIHtcbiAgICAgIHZhciBfbm9kZUxvb2t1cDggPSBfbm9kZUxvb2t1cChlbGVtZW50KSwgdk5vZGUgPSBfbm9kZUxvb2t1cDgudk5vZGU7XG4gICAgICBpZiAoKHZOb2RlID09PSBudWxsIHx8IHZOb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2Tm9kZS5wcm9wcy5ub2RlVHlwZSkgIT09IDEpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZOb2RlLmF0dHIoJ2FyaWEtbGFiZWwnKSB8fCAnJztcbiAgICB9XG4gICAgdmFyIGFyaWFBdHRycyA9IHtcbiAgICAgICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnOiB7XG4gICAgICAgIHR5cGU6ICdpZHJlZicsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICAgIH0sXG4gICAgICAnYXJpYS1hdG9taWMnOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzoge1xuICAgICAgICB0eXBlOiAnbm10b2tlbicsXG4gICAgICAgIHZhbHVlczogWyAnaW5saW5lJywgJ2xpc3QnLCAnYm90aCcsICdub25lJyBdXG4gICAgICB9LFxuICAgICAgJ2FyaWEtYnJhaWxsZWxhYmVsJzoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtYnJhaWxsZXJvbGVkZXNjcmlwdGlvbic6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIGdsb2JhbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWJ1c3knOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtY2hlY2tlZCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ2ZhbHNlJywgJ21peGVkJywgJ3RydWUnLCAndW5kZWZpbmVkJyBdXG4gICAgICB9LFxuICAgICAgJ2FyaWEtY29sY291bnQnOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICBtaW5WYWx1ZTogLTFcbiAgICAgIH0sXG4gICAgICAnYXJpYS1jb2xpbmRleCc6IHtcbiAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgIG1pblZhbHVlOiAxXG4gICAgICB9LFxuICAgICAgJ2FyaWEtY29sc3Bhbic6IHtcbiAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgIG1pblZhbHVlOiAxXG4gICAgICB9LFxuICAgICAgJ2FyaWEtY29udHJvbHMnOiB7XG4gICAgICAgIHR5cGU6ICdpZHJlZnMnLFxuICAgICAgICBhbGxvd0VtcHR5OiB0cnVlLFxuICAgICAgICBnbG9iYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICAnYXJpYS1jdXJyZW50Jzoge1xuICAgICAgICB0eXBlOiAnbm10b2tlbicsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIHZhbHVlczogWyAncGFnZScsICdzdGVwJywgJ2xvY2F0aW9uJywgJ2RhdGUnLCAndGltZScsICd0cnVlJywgJ2ZhbHNlJyBdLFxuICAgICAgICBnbG9iYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IHtcbiAgICAgICAgdHlwZTogJ2lkcmVmcycsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIGdsb2JhbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWRlc2NyaXB0aW9uJzoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtZGV0YWlscyc6IHtcbiAgICAgICAgdHlwZTogJ2lkcmVmJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtZGlzYWJsZWQnOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtZHJvcGVmZmVjdCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW5zJyxcbiAgICAgICAgdmFsdWVzOiBbICdjb3B5JywgJ2V4ZWN1dGUnLCAnbGluaycsICdtb3ZlJywgJ25vbmUnLCAncG9wdXAnIF0sXG4gICAgICAgIGdsb2JhbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWVycm9ybWVzc2FnZSc6IHtcbiAgICAgICAgdHlwZTogJ2lkcmVmJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgdmFsdWVzOiBbICd0cnVlJywgJ2ZhbHNlJywgJ3VuZGVmaW5lZCcgXVxuICAgICAgfSxcbiAgICAgICdhcmlhLWZsb3d0byc6IHtcbiAgICAgICAgdHlwZTogJ2lkcmVmcycsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIGdsb2JhbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWdyYWJiZWQnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgdmFsdWVzOiBbICd0cnVlJywgJ2ZhbHNlJywgJ3VuZGVmaW5lZCcgXSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgdmFsdWVzOiBbICd0cnVlJywgJ2ZhbHNlJywgJ21lbnUnLCAnbGlzdGJveCcsICd0cmVlJywgJ2dyaWQnLCAnZGlhbG9nJyBdLFxuICAgICAgICBnbG9iYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICAnYXJpYS1oaWRkZW4nOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgdmFsdWVzOiBbICd0cnVlJywgJ2ZhbHNlJywgJ3VuZGVmaW5lZCcgXSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtaW52YWxpZCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ2dyYW1tYXInLCAnZmFsc2UnLCAnc3BlbGxpbmcnLCAndHJ1ZScgXSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEta2V5c2hvcnRjdXRzJzoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtbGFiZWwnOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhbGxvd0VtcHR5OiB0cnVlLFxuICAgICAgICBnbG9iYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5Jzoge1xuICAgICAgICB0eXBlOiAnaWRyZWZzJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtbGV2ZWwnOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICBtaW5WYWx1ZTogMVxuICAgICAgfSxcbiAgICAgICdhcmlhLWxpdmUnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgdmFsdWVzOiBbICdhc3NlcnRpdmUnLCAnb2ZmJywgJ3BvbGl0ZScgXSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtbW9kYWwnOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgfSxcbiAgICAgICdhcmlhLW11bHRpbGluZSc6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICB9LFxuICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzoge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgIH0sXG4gICAgICAnYXJpYS1vcmllbnRhdGlvbic6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ2hvcml6b250YWwnLCAndW5kZWZpbmVkJywgJ3ZlcnRpY2FsJyBdXG4gICAgICB9LFxuICAgICAgJ2FyaWEtb3ducyc6IHtcbiAgICAgICAgdHlwZTogJ2lkcmVmcycsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIGdsb2JhbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXBsYWNlaG9sZGVyJzoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXBvc2luc2V0Jzoge1xuICAgICAgICB0eXBlOiAnaW50JyxcbiAgICAgICAgbWluVmFsdWU6IDFcbiAgICAgIH0sXG4gICAgICAnYXJpYS1wcmVzc2VkJzoge1xuICAgICAgICB0eXBlOiAnbm10b2tlbicsXG4gICAgICAgIHZhbHVlczogWyAnZmFsc2UnLCAnbWl4ZWQnLCAndHJ1ZScsICd1bmRlZmluZWQnIF1cbiAgICAgIH0sXG4gICAgICAnYXJpYS1yZWFkb25seSc6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICB9LFxuICAgICAgJ2FyaWEtcmVsZXZhbnQnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VucycsXG4gICAgICAgIHZhbHVlczogWyAnYWRkaXRpb25zJywgJ2FsbCcsICdyZW1vdmFscycsICd0ZXh0JyBdLFxuICAgICAgICBnbG9iYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICAnYXJpYS1yZXF1aXJlZCc6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICB9LFxuICAgICAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgZ2xvYmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtcm93Y291bnQnOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICBtaW5WYWx1ZTogLTFcbiAgICAgIH0sXG4gICAgICAnYXJpYS1yb3dpbmRleCc6IHtcbiAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgIG1pblZhbHVlOiAxXG4gICAgICB9LFxuICAgICAgJ2FyaWEtcm93c3Bhbic6IHtcbiAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgIG1pblZhbHVlOiAwXG4gICAgICB9LFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgdmFsdWVzOiBbICdmYWxzZScsICd0cnVlJywgJ3VuZGVmaW5lZCcgXVxuICAgICAgfSxcbiAgICAgICdhcmlhLXNldHNpemUnOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICBtaW5WYWx1ZTogLTFcbiAgICAgIH0sXG4gICAgICAnYXJpYS1zb3J0Jzoge1xuICAgICAgICB0eXBlOiAnbm10b2tlbicsXG4gICAgICAgIHZhbHVlczogWyAnYXNjZW5kaW5nJywgJ2Rlc2NlbmRpbmcnLCAnbm9uZScsICdvdGhlcicgXVxuICAgICAgfSxcbiAgICAgICdhcmlhLXZhbHVlbWF4Jzoge1xuICAgICAgICB0eXBlOiAnZGVjaW1hbCdcbiAgICAgIH0sXG4gICAgICAnYXJpYS12YWx1ZW1pbic6IHtcbiAgICAgICAgdHlwZTogJ2RlY2ltYWwnXG4gICAgICB9LFxuICAgICAgJ2FyaWEtdmFsdWVub3cnOiB7XG4gICAgICAgIHR5cGU6ICdkZWNpbWFsJ1xuICAgICAgfSxcbiAgICAgICdhcmlhLXZhbHVldGV4dCc6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBhcmlhX2F0dHJzX2RlZmF1bHQgPSBhcmlhQXR0cnM7XG4gICAgdmFyIGFyaWFSb2xlcyA9IHtcbiAgICAgIGFsZXJ0OiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgYWxlcnRkaWFsb2c6IHtcbiAgICAgICAgdHlwZTogJ3dpbmRvdycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLW1vZGFsJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnYWxlcnQnLCAnZGlhbG9nJyBdLFxuICAgICAgICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiB0cnVlXG4gICAgICB9LFxuICAgICAgYXBwbGljYXRpb246IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3N0cnVjdHVyZScgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGFydGljbGU6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1wb3NpbnNldCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2RvY3VtZW50JyBdXG4gICAgICB9LFxuICAgICAgYmFubmVyOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xhbmRtYXJrJyBdXG4gICAgICB9LFxuICAgICAgYmxvY2txdW90ZToge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICBidXR0b246IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXByZXNzZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdjb21tYW5kJyBdLFxuICAgICAgICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWUsXG4gICAgICAgIGNoaWxkcmVuUHJlc2VudGF0aW9uYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICBjYXB0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICByZXF1aXJlZENvbnRleHQ6IFsgJ2ZpZ3VyZScsICd0YWJsZScsICdncmlkJywgJ3RyZWVncmlkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXSxcbiAgICAgICAgcHJvaGliaXRlZEF0dHJzOiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScgXVxuICAgICAgfSxcbiAgICAgIGNlbGw6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHJlcXVpcmVkQ29udGV4dDogWyAncm93JyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtY29saW5kZXgnLCAnYXJpYS1jb2xzcGFuJywgJ2FyaWEtcm93aW5kZXgnLCAnYXJpYS1yb3dzcGFuJywgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBjaGVja2JveDoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgcmVxdWlyZWRBdHRyczogWyAnYXJpYS1jaGVja2VkJyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXJlcXVpcmVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnaW5wdXQnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZSxcbiAgICAgICAgY2hpbGRyZW5QcmVzZW50YXRpb25hbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGNvZGU6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdLFxuICAgICAgICBwcm9oaWJpdGVkQXR0cnM6IFsgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5JyBdXG4gICAgICB9LFxuICAgICAgY29sdW1uaGVhZGVyOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICByZXF1aXJlZENvbnRleHQ6IFsgJ3JvdycgXSxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLXNvcnQnLCAnYXJpYS1jb2xpbmRleCcsICdhcmlhLWNvbHNwYW4nLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1yb3dpbmRleCcsICdhcmlhLXJvd3NwYW4nLCAnYXJpYS1zZWxlY3RlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2NlbGwnLCAnZ3JpZGNlbGwnLCAnc2VjdGlvbmhlYWQnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBjb21ib2JveDoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgcmVxdWlyZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWNvbnRyb2xzJyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtb3ducycsICdhcmlhLWF1dG9jb21wbGV0ZScsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtb3JpZW50YXRpb24nIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWxlY3QnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBjb21tYW5kOiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICd3aWRnZXQnIF1cbiAgICAgIH0sXG4gICAgICBjb21wbGVtZW50YXJ5OiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xhbmRtYXJrJyBdXG4gICAgICB9LFxuICAgICAgY29tcG9zaXRlOiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICd3aWRnZXQnIF1cbiAgICAgIH0sXG4gICAgICBjb250ZW50aW5mbzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgIGNvbW1lbnQ6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1sZXZlbCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2FydGljbGUnIF1cbiAgICAgIH0sXG4gICAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgZGVsZXRpb246IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdLFxuICAgICAgICBwcm9oaWJpdGVkQXR0cnM6IFsgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5JyBdXG4gICAgICB9LFxuICAgICAgZGlhbG9nOiB7XG4gICAgICAgIHR5cGU6ICd3aW5kb3cnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1tb2RhbCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3dpbmRvdycgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGRpcmVjdG9yeToge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgZGVwcmVjYXRlZDogdHJ1ZSxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGlzdCcgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlXG4gICAgICB9LFxuICAgICAgZG9jdW1lbnQ6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3N0cnVjdHVyZScgXVxuICAgICAgfSxcbiAgICAgIGVtcGhhc2lzOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXSxcbiAgICAgICAgcHJvaGliaXRlZEF0dHJzOiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScgXVxuICAgICAgfSxcbiAgICAgIGZlZWQ6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHJlcXVpcmVkT3duZWQ6IFsgJ2FydGljbGUnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xpc3QnIF1cbiAgICAgIH0sXG4gICAgICBmaWd1cmU6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF0sXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGZvcm06IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGFuZG1hcmsnIF1cbiAgICAgIH0sXG4gICAgICBncmlkOiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICByZXF1aXJlZE93bmVkOiBbICdyb3dncm91cCcsICdyb3cnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1sZXZlbCcsICdhcmlhLW11bHRpc2VsZWN0YWJsZScsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLWNvbGNvdW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1yb3djb3VudCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2NvbXBvc2l0ZScsICd0YWJsZScgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBncmlkY2VsbDoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgcmVxdWlyZWRDb250ZXh0OiBbICdyb3cnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1yZWFkb25seScsICdhcmlhLXJlcXVpcmVkJywgJ2FyaWEtc2VsZWN0ZWQnLCAnYXJpYS1jb2xpbmRleCcsICdhcmlhLWNvbHNwYW4nLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXJvd2luZGV4JywgJ2FyaWEtcm93c3BhbicgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2NlbGwnLCAnd2lkZ2V0JyBdLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBncm91cDoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICBoZWFkaW5nOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICByZXF1aXJlZEF0dHJzOiBbICdhcmlhLWxldmVsJyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uaGVhZCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGltZzoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgY2hpbGRyZW5QcmVzZW50YXRpb25hbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICd3aWRnZXQnIF1cbiAgICAgIH0sXG4gICAgICBpbnNlcnRpb246IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdLFxuICAgICAgICBwcm9oaWJpdGVkQXR0cnM6IFsgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5JyBdXG4gICAgICB9LFxuICAgICAgbGFuZG1hcms6IHtcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICBsaW5rOiB7XG4gICAgICAgIHR5cGU6ICd3aWRnZXQnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdjb21tYW5kJyBdLFxuICAgICAgICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBsaXN0OiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICByZXF1aXJlZE93bmVkOiBbICdsaXN0aXRlbScgXSxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgIGxpc3Rib3g6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIHJlcXVpcmVkT3duZWQ6IFsgJ2dyb3VwJywgJ29wdGlvbicgXSxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLW11bHRpc2VsZWN0YWJsZScsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1vcmllbnRhdGlvbicgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlbGVjdCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGxpc3RpdGVtOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICByZXF1aXJlZENvbnRleHQ6IFsgJ2xpc3QnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1sZXZlbCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScsICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlXG4gICAgICB9LFxuICAgICAgbG9nOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgbWFpbjoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgIG1hcnF1ZWU6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICBtYXRoOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdLFxuICAgICAgICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWVudToge1xuICAgICAgICB0eXBlOiAnY29tcG9zaXRlJyxcbiAgICAgICAgcmVxdWlyZWRPd25lZDogWyAnZ3JvdXAnLCAnbWVudWl0ZW1yYWRpbycsICdtZW51aXRlbScsICdtZW51aXRlbWNoZWNrYm94JywgJ21lbnUnLCAnc2VwYXJhdG9yJyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtb3JpZW50YXRpb24nIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWxlY3QnIF1cbiAgICAgIH0sXG4gICAgICBtZW51YmFyOiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICByZXF1aXJlZE93bmVkOiBbICdncm91cCcsICdtZW51aXRlbXJhZGlvJywgJ21lbnVpdGVtJywgJ21lbnVpdGVtY2hlY2tib3gnLCAnbWVudScsICdzZXBhcmF0b3InIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1vcmllbnRhdGlvbicgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ21lbnUnIF1cbiAgICAgIH0sXG4gICAgICBtZW51aXRlbToge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgcmVxdWlyZWRDb250ZXh0OiBbICdtZW51JywgJ21lbnViYXInLCAnZ3JvdXAnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1wb3NpbnNldCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2NvbW1hbmQnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG1lbnVpdGVtY2hlY2tib3g6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIHJlcXVpcmVkQ29udGV4dDogWyAnbWVudScsICdtZW51YmFyJywgJ2dyb3VwJyBdLFxuICAgICAgICByZXF1aXJlZEF0dHJzOiBbICdhcmlhLWNoZWNrZWQnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1zZXRzaXplJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnY2hlY2tib3gnLCAnbWVudWl0ZW0nIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZSxcbiAgICAgICAgY2hpbGRyZW5QcmVzZW50YXRpb25hbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG1lbnVpdGVtcmFkaW86IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIHJlcXVpcmVkQ29udGV4dDogWyAnbWVudScsICdtZW51YmFyJywgJ2dyb3VwJyBdLFxuICAgICAgICByZXF1aXJlZEF0dHJzOiBbICdhcmlhLWNoZWNrZWQnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1zZXRzaXplJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbWVudWl0ZW1jaGVja2JveCcsICdyYWRpbycgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlLFxuICAgICAgICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWV0ZXI6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHJlcXVpcmVkQXR0cnM6IFsgJ2FyaWEtdmFsdWVub3cnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS12YWx1ZW1heCcsICdhcmlhLXZhbHVlbWluJywgJ2FyaWEtdmFsdWV0ZXh0JyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAncmFuZ2UnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIGNoaWxkcmVuUHJlc2VudGF0aW9uYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICBtYXJrOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXSxcbiAgICAgICAgcHJvaGliaXRlZEF0dHJzOiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScgXVxuICAgICAgfSxcbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGFuZG1hcmsnIF1cbiAgICAgIH0sXG4gICAgICBub25lOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc3RydWN0dXJlJyBdLFxuICAgICAgICBwcm9oaWJpdGVkQXR0cnM6IFsgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5JyBdXG4gICAgICB9LFxuICAgICAgbm90ZToge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgIG9wdGlvbjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgcmVxdWlyZWRDb250ZXh0OiBbICdncm91cCcsICdsaXN0Ym94JyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtc2VsZWN0ZWQnLCAnYXJpYS1jaGVja2VkJywgJ2FyaWEtcG9zaW5zZXQnLCAnYXJpYS1zZXRzaXplJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnaW5wdXQnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZSxcbiAgICAgICAgY2hpbGRyZW5QcmVzZW50YXRpb25hbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF0sXG4gICAgICAgIHByb2hpYml0ZWRBdHRyczogWyAnYXJpYS1sYWJlbCcsICdhcmlhLWxhYmVsbGVkYnknIF1cbiAgICAgIH0sXG4gICAgICBwcmVzZW50YXRpb246IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzdHJ1Y3R1cmUnIF0sXG4gICAgICAgIHByb2hpYml0ZWRBdHRyczogWyAnYXJpYS1sYWJlbCcsICdhcmlhLWxhYmVsbGVkYnknIF1cbiAgICAgIH0sXG4gICAgICBwcm9ncmVzc2Jhcjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtdmFsdWVtYXgnLCAnYXJpYS12YWx1ZW1pbicsICdhcmlhLXZhbHVlbm93JywgJ2FyaWEtdmFsdWV0ZXh0JyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAncmFuZ2UnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIGNoaWxkcmVuUHJlc2VudGF0aW9uYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICByYWRpbzoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgcmVxdWlyZWRBdHRyczogWyAnYXJpYS1jaGVja2VkJyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtcG9zaW5zZXQnLCAnYXJpYS1zZXRzaXplJywgJ2FyaWEtcmVxdWlyZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdpbnB1dCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlLFxuICAgICAgICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgcmFkaW9ncm91cDoge1xuICAgICAgICB0eXBlOiAnY29tcG9zaXRlJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1vcmllbnRhdGlvbicgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlbGVjdCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICByYW5nZToge1xuICAgICAgICB0eXBlOiAnYWJzdHJhY3QnLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnd2lkZ2V0JyBdXG4gICAgICB9LFxuICAgICAgcmVnaW9uOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xhbmRtYXJrJyBdLFxuICAgICAgICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJvbGV0eXBlOiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbXVxuICAgICAgfSxcbiAgICAgIHJvdzoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgcmVxdWlyZWRDb250ZXh0OiBbICdncmlkJywgJ3Jvd2dyb3VwJywgJ3RhYmxlJywgJ3RyZWVncmlkJyBdLFxuICAgICAgICByZXF1aXJlZE93bmVkOiBbICdjZWxsJywgJ2NvbHVtbmhlYWRlcicsICdncmlkY2VsbCcsICdyb3doZWFkZXInIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1jb2xpbmRleCcsICdhcmlhLWxldmVsJywgJ2FyaWEtcm93aW5kZXgnLCAnYXJpYS1zZWxlY3RlZCcsICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2dyb3VwJywgJ3dpZGdldCcgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlXG4gICAgICB9LFxuICAgICAgcm93Z3JvdXA6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHJlcXVpcmVkQ29udGV4dDogWyAnZ3JpZCcsICd0YWJsZScsICd0cmVlZ3JpZCcgXSxcbiAgICAgICAgcmVxdWlyZWRPd25lZDogWyAncm93JyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc3RydWN0dXJlJyBdLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWVcbiAgICAgIH0sXG4gICAgICByb3doZWFkZXI6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHJlcXVpcmVkQ29udGV4dDogWyAncm93JyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtc29ydCcsICdhcmlhLWNvbGluZGV4JywgJ2FyaWEtY29sc3BhbicsICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1yZXF1aXJlZCcsICdhcmlhLXJvd2luZGV4JywgJ2FyaWEtcm93c3BhbicsICdhcmlhLXNlbGVjdGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnY2VsbCcsICdncmlkY2VsbCcsICdzZWN0aW9uaGVhZCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgcmVxdWlyZWRBdHRyczogWyAnYXJpYS12YWx1ZW5vdycgXSxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWNvbnRyb2xzJywgJ2FyaWEtb3JpZW50YXRpb24nLCAnYXJpYS12YWx1ZW1heCcsICdhcmlhLXZhbHVlbWluJywgJ2FyaWEtdmFsdWV0ZXh0JyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAncmFuZ2UnIF0sXG4gICAgICAgIGNoaWxkcmVuUHJlc2VudGF0aW9uYWw6IHRydWVcbiAgICAgIH0sXG4gICAgICBzZWFyY2g6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGFuZG1hcmsnIF1cbiAgICAgIH0sXG4gICAgICBzZWFyY2hib3g6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtYXV0b2NvbXBsZXRlJywgJ2FyaWEtbXVsdGlsaW5lJywgJ2FyaWEtcGxhY2Vob2xkZXInLCAnYXJpYS1yZWFkb25seScsICdhcmlhLXJlcXVpcmVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAndGV4dGJveCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHNlY3Rpb246IHtcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3N0cnVjdHVyZScgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlXG4gICAgICB9LFxuICAgICAgc2VjdGlvbmhlYWQ6IHtcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3N0cnVjdHVyZScgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlXG4gICAgICB9LFxuICAgICAgc2VsZWN0OiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdjb21wb3NpdGUnLCAnZ3JvdXAnIF1cbiAgICAgIH0sXG4gICAgICBzZXBhcmF0b3I6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHJlcXVpcmVkQXR0cnM6IFsgJ2FyaWEtdmFsdWVub3cnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS12YWx1ZW1heCcsICdhcmlhLXZhbHVlbWluJywgJ2FyaWEtb3JpZW50YXRpb24nLCAnYXJpYS12YWx1ZXRleHQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzdHJ1Y3R1cmUnLCAnd2lkZ2V0JyBdLFxuICAgICAgICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgc2xpZGVyOiB7XG4gICAgICAgIHR5cGU6ICd3aWRnZXQnLFxuICAgICAgICByZXF1aXJlZEF0dHJzOiBbICdhcmlhLXZhbHVlbm93JyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtdmFsdWVtYXgnLCAnYXJpYS12YWx1ZW1pbicsICdhcmlhLW9yaWVudGF0aW9uJywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1yZXF1aXJlZCcsICdhcmlhLXZhbHVldGV4dCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2lucHV0JywgJ3JhbmdlJyBdLFxuICAgICAgICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgc3BpbmJ1dHRvbjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLXZhbHVlbWF4JywgJ2FyaWEtdmFsdWVtaW4nLCAnYXJpYS1yZWFkb25seScsICdhcmlhLXJlcXVpcmVkJywgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLXZhbHVldGV4dCcsICdhcmlhLXZhbHVlbm93JyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnY29tcG9zaXRlJywgJ2lucHV0JywgJ3JhbmdlJyBdLFxuICAgICAgICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiB0cnVlXG4gICAgICB9LFxuICAgICAgc3RhdHVzOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgc3Ryb25nOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXSxcbiAgICAgICAgcHJvaGliaXRlZEF0dHJzOiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScgXVxuICAgICAgfSxcbiAgICAgIHN0cnVjdHVyZToge1xuICAgICAgICB0eXBlOiAnYWJzdHJhY3QnLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAncm9sZXR5cGUnIF1cbiAgICAgIH0sXG4gICAgICBzdWJzY3JpcHQ6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdLFxuICAgICAgICBwcm9oaWJpdGVkQXR0cnM6IFsgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5JyBdXG4gICAgICB9LFxuICAgICAgc3VwZXJzY3JpcHQ6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdLFxuICAgICAgICBwcm9oaWJpdGVkQXR0cnM6IFsgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5JyBdXG4gICAgICB9LFxuICAgICAgc3dpdGNoOiB7XG4gICAgICAgIHR5cGU6ICd3aWRnZXQnLFxuICAgICAgICByZXF1aXJlZEF0dHJzOiBbICdhcmlhLWNoZWNrZWQnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtcmVxdWlyZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdjaGVja2JveCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlLFxuICAgICAgICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgc3VnZ2VzdGlvbjoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgcmVxdWlyZWRPd25lZDogWyAnaW5zZXJ0aW9uJywgJ2RlbGV0aW9uJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXSxcbiAgICAgICAgcHJvaGliaXRlZEF0dHJzOiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScgXVxuICAgICAgfSxcbiAgICAgIHRhYjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgcmVxdWlyZWRDb250ZXh0OiBbICd0YWJsaXN0JyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtcG9zaW5zZXQnLCAnYXJpYS1zZWxlY3RlZCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb25oZWFkJywgJ3dpZGdldCcgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlLFxuICAgICAgICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgdGFibGU6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIHJlcXVpcmVkT3duZWQ6IFsgJ3Jvd2dyb3VwJywgJ3JvdycgXSxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWNvbGNvdW50JywgJ2FyaWEtcm93Y291bnQnLCAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB0YWJsaXN0OiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICByZXF1aXJlZE93bmVkOiBbICd0YWInIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1sZXZlbCcsICdhcmlhLW11bHRpc2VsZWN0YWJsZScsICdhcmlhLW9yaWVudGF0aW9uJywgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnY29tcG9zaXRlJyBdXG4gICAgICB9LFxuICAgICAgdGFicGFuZWw6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgdGVybToge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlXG4gICAgICB9LFxuICAgICAgdGV4dDoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF0sXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRleHRib3g6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtYXV0b2NvbXBsZXRlJywgJ2FyaWEtbXVsdGlsaW5lJywgJ2FyaWEtcGxhY2Vob2xkZXInLCAnYXJpYS1yZWFkb25seScsICdhcmlhLXJlcXVpcmVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnaW5wdXQnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB0aW1lOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgIHRpbWVyOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzdGF0dXMnIF1cbiAgICAgIH0sXG4gICAgICB0b29sYmFyOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtb3JpZW50YXRpb24nLCAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdncm91cCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF0sXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRyZWU6IHtcbiAgICAgICAgdHlwZTogJ2NvbXBvc2l0ZScsXG4gICAgICAgIHJlcXVpcmVkT3duZWQ6IFsgJ2dyb3VwJywgJ3RyZWVpdGVtJyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1vcmllbnRhdGlvbicgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlbGVjdCcgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICB0cmVlZ3JpZDoge1xuICAgICAgICB0eXBlOiAnY29tcG9zaXRlJyxcbiAgICAgICAgcmVxdWlyZWRPd25lZDogWyAncm93Z3JvdXAnLCAncm93JyBdLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLWNvbGNvdW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcsICdhcmlhLW11bHRpc2VsZWN0YWJsZScsICdhcmlhLW9yaWVudGF0aW9uJywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1yZXF1aXJlZCcsICdhcmlhLXJvd2NvdW50JyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnZ3JpZCcsICd0cmVlJyBdLFxuICAgICAgICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHRyZWVpdGVtOiB7XG4gICAgICAgIHR5cGU6ICd3aWRnZXQnLFxuICAgICAgICByZXF1aXJlZENvbnRleHQ6IFsgJ2dyb3VwJywgJ3RyZWUnIF0sXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1jaGVja2VkJywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2VsZWN0ZWQnLCAnYXJpYS1zZXRzaXplJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGlzdGl0ZW0nLCAnb3B0aW9uJyBdLFxuICAgICAgICBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB3aWRnZXQ6IHtcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3JvbGV0eXBlJyBdXG4gICAgICB9LFxuICAgICAgd2luZG93OiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdyb2xldHlwZScgXVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGFyaWFfcm9sZXNfZGVmYXVsdCA9IGFyaWFSb2xlcztcbiAgICB2YXIgZHB1YlJvbGVzID0ge1xuICAgICAgJ2RvYy1hYnN0cmFjdCc6IHtcbiAgICAgICAgdHlwZTogJ3NlY3Rpb24nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1hY2tub3dsZWRnbWVudHMnOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xhbmRtYXJrJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1hZnRlcndvcmQnOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xhbmRtYXJrJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1hcHBlbmRpeCc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGFuZG1hcmsnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWJhY2tsaW5rJzoge1xuICAgICAgICB0eXBlOiAnbGluaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGluaycgXVxuICAgICAgfSxcbiAgICAgICdkb2MtYmlibGlvZW50cnknOiB7XG4gICAgICAgIHR5cGU6ICdsaXN0aXRlbScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWxldmVsJywgJ2FyaWEtcG9zaW5zZXQnLCAnYXJpYS1zZXRzaXplJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGlzdGl0ZW0nIF0sXG4gICAgICAgIGRlcHJlY2F0ZWQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAnZG9jLWJpYmxpb2dyYXBoeSc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGFuZG1hcmsnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWJpYmxpb3JlZic6IHtcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIG5hbWVGcm9tQ29udGVudDogdHJ1ZSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xpbmsnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWNoYXB0ZXInOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xhbmRtYXJrJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1jb2xvcGhvbic6IHtcbiAgICAgICAgdHlwZTogJ3NlY3Rpb24nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1jb25jbHVzaW9uJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgICdkb2MtY292ZXInOiB7XG4gICAgICAgIHR5cGU6ICdpbWcnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdpbWcnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWNyZWRpdCc6IHtcbiAgICAgICAgdHlwZTogJ3NlY3Rpb24nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1jcmVkaXRzJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgICdkb2MtZGVkaWNhdGlvbic6IHtcbiAgICAgICAgdHlwZTogJ3NlY3Rpb24nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1lbmRub3RlJzoge1xuICAgICAgICB0eXBlOiAnbGlzdGl0ZW0nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xpc3RpdGVtJyBdLFxuICAgICAgICBkZXByZWNhdGVkOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2RvYy1lbmRub3Rlcyc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGFuZG1hcmsnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWVwaWdyYXBoJzoge1xuICAgICAgICB0eXBlOiAnc2VjdGlvbicsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWVwaWxvZ3VlJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgICdkb2MtZXJyYXRhJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgICdkb2MtZXhhbXBsZSc6IHtcbiAgICAgICAgdHlwZTogJ3NlY3Rpb24nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1mb290bm90ZSc6IHtcbiAgICAgICAgdHlwZTogJ3NlY3Rpb24nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1mb3Jld29yZCc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGFuZG1hcmsnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWdsb3NzYXJ5Jzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgICdkb2MtZ2xvc3NyZWYnOiB7XG4gICAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWUsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsaW5rJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1pbmRleCc6IHtcbiAgICAgICAgdHlwZTogJ25hdmlnYXRpb24nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICduYXZpZ2F0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1pbnRyb2R1Y3Rpb24nOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2xhbmRtYXJrJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1ub3RlcmVmJzoge1xuICAgICAgICB0eXBlOiAnbGluaycsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgbmFtZUZyb21Db250ZW50OiB0cnVlLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGluaycgXVxuICAgICAgfSxcbiAgICAgICdkb2Mtbm90aWNlJzoge1xuICAgICAgICB0eXBlOiAnbm90ZScsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ25vdGUnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLXBhZ2VicmVhayc6IHtcbiAgICAgICAgdHlwZTogJ3NlcGFyYXRvcicsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLW9yaWVudGF0aW9uJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VwYXJhdG9yJyBdLFxuICAgICAgICBjaGlsZHJlblByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2RvYy1wYWdlbGlzdCc6IHtcbiAgICAgICAgdHlwZTogJ25hdmlnYXRpb24nLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICduYXZpZ2F0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1wYXJ0Jzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgICdkb2MtcHJlZmFjZSc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbGFuZG1hcmsnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLXByb2xvZ3VlJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhbGxvd2VkQXR0cnM6IFsgJ2FyaWEtZXhwYW5kZWQnIF0sXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdsYW5kbWFyaycgXVxuICAgICAgfSxcbiAgICAgICdkb2MtcHVsbHF1b3RlJzoge1xuICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgIHN1cGVyY2xhc3NSb2xlOiBbICdub25lJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1xbmEnOiB7XG4gICAgICAgIHR5cGU6ICdzZWN0aW9uJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2Mtc3VidGl0bGUnOiB7XG4gICAgICAgIHR5cGU6ICdzZWN0aW9uaGVhZCcsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ3NlY3Rpb25oZWFkJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy10aXAnOiB7XG4gICAgICAgIHR5cGU6ICdub3RlJyxcbiAgICAgICAgYWxsb3dlZEF0dHJzOiBbICdhcmlhLWV4cGFuZGVkJyBdLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnbm90ZScgXVxuICAgICAgfSxcbiAgICAgICdkb2MtdG9jJzoge1xuICAgICAgICB0eXBlOiAnbmF2aWdhdGlvbicsXG4gICAgICAgIGFsbG93ZWRBdHRyczogWyAnYXJpYS1leHBhbmRlZCcgXSxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ25hdmlnYXRpb24nIF1cbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBkcHViX3JvbGVzX2RlZmF1bHQgPSBkcHViUm9sZXM7XG4gICAgdmFyIGdyYXBoaWNzUm9sZXMgPSB7XG4gICAgICAnZ3JhcGhpY3MtZG9jdW1lbnQnOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBzdXBlcmNsYXNzUm9sZTogWyAnZG9jdW1lbnQnIF0sXG4gICAgICAgIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAnZ3JhcGhpY3Mtb2JqZWN0Jzoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2dyb3VwJyBdLFxuICAgICAgICBuYW1lRnJvbUNvbnRlbnQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAnZ3JhcGhpY3Mtc3ltYm9sJzoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgc3VwZXJjbGFzc1JvbGU6IFsgJ2ltZycgXSxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWVSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgY2hpbGRyZW5QcmVzZW50YXRpb25hbDogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGdyYXBoaWNzX3JvbGVzX2RlZmF1bHQgPSBncmFwaGljc1JvbGVzO1xuICAgIHZhciBodG1sRWxtcyA9IHtcbiAgICAgIGE6IHtcbiAgICAgICAgdmFyaWFudDoge1xuICAgICAgICAgIGhyZWY6IHtcbiAgICAgICAgICAgIG1hdGNoZXM6ICdbaHJlZl0nLFxuICAgICAgICAgICAgY29udGVudFR5cGVzOiBbICdpbnRlcmFjdGl2ZScsICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdidXR0b24nLCAnY2hlY2tib3gnLCAnbWVudWl0ZW0nLCAnbWVudWl0ZW1jaGVja2JveCcsICdtZW51aXRlbXJhZGlvJywgJ29wdGlvbicsICdyYWRpbycsICdzd2l0Y2gnLCAndGFiJywgJ3RyZWVpdGVtJywgJ2RvYy1iYWNrbGluaycsICdkb2MtYmlibGlvcmVmJywgJ2RvYy1nbG9zc3JlZicsICdkb2Mtbm90ZXJlZicgXSxcbiAgICAgICAgICAgIG5hbWluZ01ldGhvZHM6IFsgJ3N1YnRyZWVUZXh0JyBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhYmJyOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgYWRkcmVzczoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGFyZWE6IHtcbiAgICAgICAgdmFyaWFudDoge1xuICAgICAgICAgIGhyZWY6IHtcbiAgICAgICAgICAgIG1hdGNoZXM6ICdbaHJlZl0nLFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdidXR0b24nLCAnbGluaycgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBuYW1pbmdNZXRob2RzOiBbICdhbHRUZXh0JyBdXG4gICAgICB9LFxuICAgICAgYXJ0aWNsZToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3NlY3Rpb25pbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdmZWVkJywgJ3ByZXNlbnRhdGlvbicsICdub25lJywgJ2RvY3VtZW50JywgJ2FwcGxpY2F0aW9uJywgJ21haW4nLCAncmVnaW9uJyBdLFxuICAgICAgICBzaGFkb3dSb290OiB0cnVlXG4gICAgICB9LFxuICAgICAgYXNpZGU6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdzZWN0aW9uaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnZmVlZCcsICdub3RlJywgJ3ByZXNlbnRhdGlvbicsICdub25lJywgJ3JlZ2lvbicsICdzZWFyY2gnLCAnZG9jLWRlZGljYXRpb24nLCAnZG9jLWV4YW1wbGUnLCAnZG9jLWZvb3Rub3RlJywgJ2RvYy1nbG9zc2FyeScsICdkb2MtcHVsbHF1b3RlJywgJ2RvYy10aXAnIF1cbiAgICAgIH0sXG4gICAgICBhdWRpbzoge1xuICAgICAgICB2YXJpYW50OiB7XG4gICAgICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgICAgIG1hdGNoZXM6ICdbY29udHJvbHNdJyxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlczogWyAnaW50ZXJhY3RpdmUnLCAnZW1iZWRkZWQnLCAncGhyYXNpbmcnLCAnZmxvdycgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29udGVudFR5cGVzOiBbICdlbWJlZGRlZCcsICdwaHJhc2luZycsICdmbG93JyBdXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2FwcGxpY2F0aW9uJyBdLFxuICAgICAgICBjaHJvbWl1bVJvbGU6ICdBdWRpbydcbiAgICAgIH0sXG4gICAgICBiOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgYmFzZToge1xuICAgICAgICBhbGxvd2VkUm9sZXM6IGZhbHNlLFxuICAgICAgICBub0FyaWFBdHRyczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGJkaToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGJkbzoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGJsb2NrcXVvdGU6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWUsXG4gICAgICAgIHNoYWRvd1Jvb3Q6IHRydWVcbiAgICAgIH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIHNoYWRvd1Jvb3Q6IHRydWVcbiAgICAgIH0sXG4gICAgICBicjoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAncHJlc2VudGF0aW9uJywgJ25vbmUnIF0sXG4gICAgICAgIG5hbWluZ01ldGhvZHM6IFsgJ3RpdGxlVGV4dCcsICdzaW5nbGVTcGFjZScgXVxuICAgICAgfSxcbiAgICAgIGJ1dHRvbjoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2ludGVyYWN0aXZlJywgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnY2hlY2tib3gnLCAnY29tYm9ib3gnLCAnZ3JpZGNlbGwnLCAnbGluaycsICdtZW51aXRlbScsICdtZW51aXRlbWNoZWNrYm94JywgJ21lbnVpdGVtcmFkaW8nLCAnb3B0aW9uJywgJ3JhZGlvJywgJ3NlcGFyYXRvcicsICdzbGlkZXInLCAnc3dpdGNoJywgJ3RhYicsICd0cmVlaXRlbScgXSxcbiAgICAgICAgbmFtaW5nTWV0aG9kczogWyAnc3VidHJlZVRleHQnIF1cbiAgICAgIH0sXG4gICAgICBjYW52YXM6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlLFxuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2VtYmVkZGVkJywgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGNocm9taXVtUm9sZTogJ0NhbnZhcydcbiAgICAgIH0sXG4gICAgICBjYXB0aW9uOiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2VcbiAgICAgIH0sXG4gICAgICBjaXRlOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgY29kZToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGNvbDoge1xuICAgICAgICBhbGxvd2VkUm9sZXM6IGZhbHNlLFxuICAgICAgICBub0FyaWFBdHRyczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGNvbGdyb3VwOiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIG5vQXJpYUF0dHJzOiB0cnVlXG4gICAgICB9LFxuICAgICAgZGF0YToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGRhdGFsaXN0OiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWUsXG4gICAgICAgIGltcGxpY2l0QXR0cnM6IHtcbiAgICAgICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiAnZmFsc2UnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZDoge1xuICAgICAgICBhbGxvd2VkUm9sZXM6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZGVsOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgZGZuOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgZGV0YWlsczoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2ludGVyYWN0aXZlJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2VcbiAgICAgIH0sXG4gICAgICBkaWFsb2c6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2FsZXJ0ZGlhbG9nJyBdXG4gICAgICB9LFxuICAgICAgZGl2OiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlLFxuICAgICAgICBzaGFkb3dSb290OiB0cnVlXG4gICAgICB9LFxuICAgICAgZGw6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2dyb3VwJywgJ2xpc3QnLCAncHJlc2VudGF0aW9uJywgJ25vbmUnIF0sXG4gICAgICAgIGNocm9taXVtUm9sZTogJ0Rlc2NyaXB0aW9uTGlzdCdcbiAgICAgIH0sXG4gICAgICBkdDoge1xuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2xpc3RpdGVtJyBdXG4gICAgICB9LFxuICAgICAgZW06IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWVcbiAgICAgIH0sXG4gICAgICBlbWJlZDoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2ludGVyYWN0aXZlJywgJ2VtYmVkZGVkJywgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnYXBwbGljYXRpb24nLCAnZG9jdW1lbnQnLCAnaW1nJywgJ3ByZXNlbnRhdGlvbicsICdub25lJyBdLFxuICAgICAgICBjaHJvbWl1bVJvbGU6ICdFbWJlZGRlZE9iamVjdCdcbiAgICAgIH0sXG4gICAgICBmaWVsZHNldDoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnbm9uZScsICdwcmVzZW50YXRpb24nLCAncmFkaW9ncm91cCcgXSxcbiAgICAgICAgbmFtaW5nTWV0aG9kczogWyAnZmllbGRzZXRMZWdlbmRUZXh0JyBdXG4gICAgICB9LFxuICAgICAgZmlnY2FwdGlvbjoge1xuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2dyb3VwJywgJ25vbmUnLCAncHJlc2VudGF0aW9uJyBdXG4gICAgICB9LFxuICAgICAgZmlndXJlOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlLFxuICAgICAgICBuYW1pbmdNZXRob2RzOiBbICdmaWd1cmVUZXh0JywgJ3RpdGxlVGV4dCcgXVxuICAgICAgfSxcbiAgICAgIGZvb3Rlcjoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnZ3JvdXAnLCAnbm9uZScsICdwcmVzZW50YXRpb24nLCAnZG9jLWZvb3Rub3RlJyBdLFxuICAgICAgICBzaGFkb3dSb290OiB0cnVlXG4gICAgICB9LFxuICAgICAgZm9ybToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnZm9ybScsICdzZWFyY2gnLCAnbm9uZScsICdwcmVzZW50YXRpb24nIF1cbiAgICAgIH0sXG4gICAgICBoMToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2hlYWRpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdub25lJywgJ3ByZXNlbnRhdGlvbicsICd0YWInLCAnZG9jLXN1YnRpdGxlJyBdLFxuICAgICAgICBzaGFkb3dSb290OiB0cnVlLFxuICAgICAgICBpbXBsaWNpdEF0dHJzOiB7XG4gICAgICAgICAgJ2FyaWEtbGV2ZWwnOiAnMSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGgyOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAnaGVhZGluZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ25vbmUnLCAncHJlc2VudGF0aW9uJywgJ3RhYicsICdkb2Mtc3VidGl0bGUnIF0sXG4gICAgICAgIHNoYWRvd1Jvb3Q6IHRydWUsXG4gICAgICAgIGltcGxpY2l0QXR0cnM6IHtcbiAgICAgICAgICAnYXJpYS1sZXZlbCc6ICcyJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaDM6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdoZWFkaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnbm9uZScsICdwcmVzZW50YXRpb24nLCAndGFiJywgJ2RvYy1zdWJ0aXRsZScgXSxcbiAgICAgICAgc2hhZG93Um9vdDogdHJ1ZSxcbiAgICAgICAgaW1wbGljaXRBdHRyczoge1xuICAgICAgICAgICdhcmlhLWxldmVsJzogJzMnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBoNDoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2hlYWRpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdub25lJywgJ3ByZXNlbnRhdGlvbicsICd0YWInLCAnZG9jLXN1YnRpdGxlJyBdLFxuICAgICAgICBzaGFkb3dSb290OiB0cnVlLFxuICAgICAgICBpbXBsaWNpdEF0dHJzOiB7XG4gICAgICAgICAgJ2FyaWEtbGV2ZWwnOiAnNCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGg1OiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAnaGVhZGluZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ25vbmUnLCAncHJlc2VudGF0aW9uJywgJ3RhYicsICdkb2Mtc3VidGl0bGUnIF0sXG4gICAgICAgIHNoYWRvd1Jvb3Q6IHRydWUsXG4gICAgICAgIGltcGxpY2l0QXR0cnM6IHtcbiAgICAgICAgICAnYXJpYS1sZXZlbCc6ICc1J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaDY6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdoZWFkaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnbm9uZScsICdwcmVzZW50YXRpb24nLCAndGFiJywgJ2RvYy1zdWJ0aXRsZScgXSxcbiAgICAgICAgc2hhZG93Um9vdDogdHJ1ZSxcbiAgICAgICAgaW1wbGljaXRBdHRyczoge1xuICAgICAgICAgICdhcmlhLWxldmVsJzogJzYnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBoZWFkOiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIG5vQXJpYUF0dHJzOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGVhZGVyOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdncm91cCcsICdub25lJywgJ3ByZXNlbnRhdGlvbicsICdkb2MtZm9vdG5vdGUnIF0sXG4gICAgICAgIHNoYWRvd1Jvb3Q6IHRydWVcbiAgICAgIH0sXG4gICAgICBoZ3JvdXA6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdoZWFkaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhyOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdub25lJywgJ3ByZXNlbnRhdGlvbicsICdkb2MtcGFnZWJyZWFrJyBdLFxuICAgICAgICBuYW1pbmdNZXRob2RzOiBbICd0aXRsZVRleHQnLCAnc2luZ2xlU3BhY2UnIF1cbiAgICAgIH0sXG4gICAgICBodG1sOiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIG5vQXJpYUF0dHJzOiB0cnVlXG4gICAgICB9LFxuICAgICAgaToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGlmcmFtZToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2ludGVyYWN0aXZlJywgJ2VtYmVkZGVkJywgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnYXBwbGljYXRpb24nLCAnZG9jdW1lbnQnLCAnaW1nJywgJ25vbmUnLCAncHJlc2VudGF0aW9uJyBdLFxuICAgICAgICBjaHJvbWl1bVJvbGU6ICdJZnJhbWUnXG4gICAgICB9LFxuICAgICAgaW1nOiB7XG4gICAgICAgIHZhcmlhbnQ6IHtcbiAgICAgICAgICBub25FbXB0eUFsdDoge1xuICAgICAgICAgICAgbWF0Y2hlczogWyB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBhbHQ6ICcvLisvJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGhhc0FjY2Vzc2libGVOYW1lOiB0cnVlXG4gICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2J1dHRvbicsICdjaGVja2JveCcsICdsaW5rJywgJ21hdGgnLCAnbWVudWl0ZW0nLCAnbWVudWl0ZW1jaGVja2JveCcsICdtZW51aXRlbXJhZGlvJywgJ21ldGVyJywgJ29wdGlvbicsICdwcm9ncmVzc2JhcicsICdyYWRpbycsICdzY3JvbGxiYXInLCAnc2VwYXJhdG9yJywgJ3NsaWRlcicsICdzd2l0Y2gnLCAndGFiJywgJ3RyZWVpdGVtJywgJ2RvYy1jb3ZlcicgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlbWFwOiB7XG4gICAgICAgICAgICBtYXRjaGVzOiAnW3VzZW1hcF0nLFxuICAgICAgICAgICAgY29udGVudFR5cGVzOiBbICdpbnRlcmFjdGl2ZScsICdlbWJlZGRlZCcsICdmbG93JyBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ3ByZXNlbnRhdGlvbicsICdub25lJyBdLFxuICAgICAgICAgICAgY29udGVudFR5cGVzOiBbICdlbWJlZGRlZCcsICdmbG93JyBdXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBuYW1pbmdNZXRob2RzOiBbICdhbHRUZXh0JyBdXG4gICAgICB9LFxuICAgICAgaW5wdXQ6IHtcbiAgICAgICAgdmFyaWFudDoge1xuICAgICAgICAgIGJ1dHRvbjoge1xuICAgICAgICAgICAgbWF0Y2hlczoge1xuICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWyAnY2hlY2tib3gnLCAnY29tYm9ib3gnLCAnbGluaycsICdtZW51aXRlbScsICdtZW51aXRlbWNoZWNrYm94JywgJ21lbnVpdGVtcmFkaW8nLCAnb3B0aW9uJywgJ3JhZGlvJywgJ3N3aXRjaCcsICd0YWInIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGJ1dHRvblR5cGU6IHtcbiAgICAgICAgICAgIG1hdGNoZXM6IHtcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFsgJ2J1dHRvbicsICdzdWJtaXQnLCAncmVzZXQnIF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWluZ01ldGhvZHM6IFsgJ3ZhbHVlVGV4dCcsICd0aXRsZVRleHQnLCAnYnV0dG9uRGVmYXVsdFRleHQnIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoZWNrYm94UHJlc3NlZDoge1xuICAgICAgICAgICAgbWF0Y2hlczoge1xuICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94J1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgJ2FyaWEtcHJlc3NlZCc6ICcvLiovJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdidXR0b24nLCAnbWVudWl0ZW1jaGVja2JveCcsICdvcHRpb24nLCAnc3dpdGNoJyBdLFxuICAgICAgICAgICAgaW1wbGljaXRBdHRyczoge1xuICAgICAgICAgICAgICAnYXJpYS1jaGVja2VkJzogJ2ZhbHNlJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hlY2tib3g6IHtcbiAgICAgICAgICAgIG1hdGNoZXM6IHtcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICdhcmlhLXByZXNzZWQnOiBudWxsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ21lbnVpdGVtY2hlY2tib3gnLCAnb3B0aW9uJywgJ3N3aXRjaCcgXSxcbiAgICAgICAgICAgIGltcGxpY2l0QXR0cnM6IHtcbiAgICAgICAgICAgICAgJ2FyaWEtY2hlY2tlZCc6ICdmYWxzZSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG5vUm9sZXM6IHtcbiAgICAgICAgICAgIG1hdGNoZXM6IHtcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFsgJ2NvbG9yJywgJ2RhdGUnLCAnZGF0ZXRpbWUtbG9jYWwnLCAnZmlsZScsICdtb250aCcsICdudW1iZXInLCAncGFzc3dvcmQnLCAncmFuZ2UnLCAncmVzZXQnLCAnc3VibWl0JywgJ3RpbWUnLCAnd2VlaycgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaGlkZGVuOiB7XG4gICAgICAgICAgICBtYXRjaGVzOiB7XG4gICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaGlkZGVuJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgICAgIG5vQXJpYUF0dHJzOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgbWF0Y2hlczoge1xuICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2ltYWdlJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdsaW5rJywgJ21lbnVpdGVtJywgJ21lbnVpdGVtY2hlY2tib3gnLCAnbWVudWl0ZW1yYWRpbycsICdyYWRpbycsICdzd2l0Y2gnIF0sXG4gICAgICAgICAgICBuYW1pbmdNZXRob2RzOiBbICdhbHRUZXh0JywgJ3ZhbHVlVGV4dCcsICdsYWJlbFRleHQnLCAndGl0bGVUZXh0JywgJ2J1dHRvbkRlZmF1bHRUZXh0JyBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICByYWRpbzoge1xuICAgICAgICAgICAgbWF0Y2hlczoge1xuICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JhZGlvJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdtZW51aXRlbXJhZGlvJyBdLFxuICAgICAgICAgICAgaW1wbGljaXRBdHRyczoge1xuICAgICAgICAgICAgICAnYXJpYS1jaGVja2VkJzogJ2ZhbHNlJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGV4dFdpdGhMaXN0OiB7XG4gICAgICAgICAgICBtYXRjaGVzOiB7XG4gICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIGxpc3Q6ICcvLiovJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29udGVudFR5cGVzOiBbICdpbnRlcmFjdGl2ZScsICdmbG93JyBdLFxuICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdjb21ib2JveCcsICdzZWFyY2hib3gnLCAnc3BpbmJ1dHRvbicgXSxcbiAgICAgICAgICAgIGltcGxpY2l0QXR0cnM6IHtcbiAgICAgICAgICAgICAgJ2FyaWEtdmFsdWVub3cnOiAnJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWluZ01ldGhvZHM6IFsgJ2xhYmVsVGV4dCcsICdwbGFjZWhvbGRlclRleHQnIF1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbnM6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWVcbiAgICAgIH0sXG4gICAgICBrYmQ6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWVcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2ludGVyYWN0aXZlJywgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIGNocm9taXVtUm9sZTogJ0xhYmVsJ1xuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBhbGxvd2VkUm9sZXM6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbGk6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdtZW51aXRlbScsICdtZW51aXRlbWNoZWNrYm94JywgJ21lbnVpdGVtcmFkaW8nLCAnb3B0aW9uJywgJ25vbmUnLCAncHJlc2VudGF0aW9uJywgJ3JhZGlvJywgJ3NlcGFyYXRvcicsICd0YWInLCAndHJlZWl0ZW0nLCAnZG9jLWJpYmxpb2VudHJ5JywgJ2RvYy1lbmRub3RlJyBdLFxuICAgICAgICBpbXBsaWNpdEF0dHJzOiB7XG4gICAgICAgICAgJ2FyaWEtc2V0c2l6ZSc6ICcxJyxcbiAgICAgICAgICAnYXJpYS1wb3NpbnNldCc6ICcxJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbGluazoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIG5vQXJpYUF0dHJzOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWFpbjoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIHNoYWRvd1Jvb3Q6IHRydWVcbiAgICAgIH0sXG4gICAgICBtYXA6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IGZhbHNlLFxuICAgICAgICBub0FyaWFBdHRyczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG1hdGg6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdlbWJlZGRlZCcsICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbWFyazoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG1lbnU6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2RpcmVjdG9yeScsICdncm91cCcsICdsaXN0Ym94JywgJ21lbnUnLCAnbWVudWJhcicsICdub25lJywgJ3ByZXNlbnRhdGlvbicsICdyYWRpb2dyb3VwJywgJ3RhYmxpc3QnLCAndG9vbGJhcicsICd0cmVlJyBdXG4gICAgICB9LFxuICAgICAgbWV0YToge1xuICAgICAgICB2YXJpYW50OiB7XG4gICAgICAgICAgaXRlbXByb3A6IHtcbiAgICAgICAgICAgIG1hdGNoZXM6ICdbaXRlbXByb3BdJyxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWVcbiAgICAgIH0sXG4gICAgICBtZXRlcjoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIGNocm9taXVtUm9sZTogJ3Byb2dyZXNzYmFyJ1xuICAgICAgfSxcbiAgICAgIG5hdjoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3NlY3Rpb25pbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdkb2MtaW5kZXgnLCAnZG9jLXBhZ2VsaXN0JywgJ2RvYy10b2MnLCAnbWVudScsICdtZW51YmFyJywgJ25vbmUnLCAncHJlc2VudGF0aW9uJywgJ3RhYmxpc3QnIF0sXG4gICAgICAgIHNoYWRvd1Jvb3Q6IHRydWVcbiAgICAgIH0sXG4gICAgICBub3NjcmlwdDoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIG5vQXJpYUF0dHJzOiB0cnVlXG4gICAgICB9LFxuICAgICAgb2JqZWN0OiB7XG4gICAgICAgIHZhcmlhbnQ6IHtcbiAgICAgICAgICB1c2VtYXA6IHtcbiAgICAgICAgICAgIG1hdGNoZXM6ICdbdXNlbWFwXScsXG4gICAgICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2ludGVyYWN0aXZlJywgJ2VtYmVkZGVkJywgJ3BocmFzaW5nJywgJ2Zsb3cnIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlczogWyAnZW1iZWRkZWQnLCAncGhyYXNpbmcnLCAnZmxvdycgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdhcHBsaWNhdGlvbicsICdkb2N1bWVudCcsICdpbWcnIF0sXG4gICAgICAgIGNocm9taXVtUm9sZTogJ1BsdWdpbk9iamVjdCdcbiAgICAgIH0sXG4gICAgICBvbDoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnZGlyZWN0b3J5JywgJ2dyb3VwJywgJ2xpc3Rib3gnLCAnbWVudScsICdtZW51YmFyJywgJ25vbmUnLCAncHJlc2VudGF0aW9uJywgJ3JhZGlvZ3JvdXAnLCAndGFibGlzdCcsICd0b29sYmFyJywgJ3RyZWUnIF1cbiAgICAgIH0sXG4gICAgICBvcHRncm91cDoge1xuICAgICAgICBhbGxvd2VkUm9sZXM6IGZhbHNlXG4gICAgICB9LFxuICAgICAgb3B0aW9uOiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIGltcGxpY2l0QXR0cnM6IHtcbiAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZSxcbiAgICAgICAgbmFtaW5nTWV0aG9kczogWyAnc3VidHJlZVRleHQnIF1cbiAgICAgIH0sXG4gICAgICBwOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlLFxuICAgICAgICBzaGFkb3dSb290OiB0cnVlXG4gICAgICB9LFxuICAgICAgcGFyYW06IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWVcbiAgICAgIH0sXG4gICAgICBwaWN0dXJlOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWVcbiAgICAgIH0sXG4gICAgICBwcmU6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWVcbiAgICAgIH0sXG4gICAgICBwcm9ncmVzczoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIGltcGxpY2l0QXR0cnM6IHtcbiAgICAgICAgICAnYXJpYS12YWx1ZW1heCc6ICcxMDAnLFxuICAgICAgICAgICdhcmlhLXZhbHVlbWluJzogJzAnLFxuICAgICAgICAgICdhcmlhLXZhbHVlbm93JzogJzAnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBxOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgcnA6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgcnQ6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgcnVieToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHM6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWVcbiAgICAgIH0sXG4gICAgICBzYW1wOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgc2NyaXB0OiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWVcbiAgICAgIH0sXG4gICAgICBzZWFyY2g6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2Zvcm0nLCAnZ3JvdXAnLCAnbm9uZScsICdwcmVzZW50YXRpb24nLCAncmVnaW9uJywgJ3NlYXJjaCcgXVxuICAgICAgfSxcbiAgICAgIHNlY3Rpb246IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdzZWN0aW9uaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogWyAnYWxlcnQnLCAnYWxlcnRkaWFsb2cnLCAnYXBwbGljYXRpb24nLCAnYmFubmVyJywgJ2NvbXBsZW1lbnRhcnknLCAnY29udGVudGluZm8nLCAnZGlhbG9nJywgJ2RvY3VtZW50JywgJ2ZlZWQnLCAnZ3JvdXAnLCAnbG9nJywgJ21haW4nLCAnbWFycXVlZScsICduYXZpZ2F0aW9uJywgJ25vbmUnLCAnbm90ZScsICdwcmVzZW50YXRpb24nLCAnc2VhcmNoJywgJ3N0YXR1cycsICd0YWJwYW5lbCcsICdkb2MtYWJzdHJhY3QnLCAnZG9jLWFja25vd2xlZGdtZW50cycsICdkb2MtYWZ0ZXJ3b3JkJywgJ2RvYy1hcHBlbmRpeCcsICdkb2MtYmlibGlvZ3JhcGh5JywgJ2RvYy1jaGFwdGVyJywgJ2RvYy1jb2xvcGhvbicsICdkb2MtY29uY2x1c2lvbicsICdkb2MtY3JlZGl0JywgJ2RvYy1jcmVkaXRzJywgJ2RvYy1kZWRpY2F0aW9uJywgJ2RvYy1lbmRub3RlcycsICdkb2MtZXBpZ3JhcGgnLCAnZG9jLWVwaWxvZ3VlJywgJ2RvYy1lcnJhdGEnLCAnZG9jLWV4YW1wbGUnLCAnZG9jLWZvcmV3b3JkJywgJ2RvYy1nbG9zc2FyeScsICdkb2MtaW5kZXgnLCAnZG9jLWludHJvZHVjdGlvbicsICdkb2Mtbm90aWNlJywgJ2RvYy1wYWdlbGlzdCcsICdkb2MtcGFydCcsICdkb2MtcHJlZmFjZScsICdkb2MtcHJvbG9ndWUnLCAnZG9jLXB1bGxxdW90ZScsICdkb2MtcW5hJywgJ2RvYy10b2MnIF0sXG4gICAgICAgIHNoYWRvd1Jvb3Q6IHRydWVcbiAgICAgIH0sXG4gICAgICBzZWxlY3Q6IHtcbiAgICAgICAgdmFyaWFudDoge1xuICAgICAgICAgIGNvbWJvYm94OiB7XG4gICAgICAgICAgICBtYXRjaGVzOiB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBtdWx0aXBsZTogbnVsbCxcbiAgICAgICAgICAgICAgICBzaXplOiBbIG51bGwsICcxJyBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ21lbnUnIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAnaW50ZXJhY3RpdmUnLCAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgaW1wbGljaXRBdHRyczoge1xuICAgICAgICAgICdhcmlhLXZhbHVlbm93JzogJydcbiAgICAgICAgfSxcbiAgICAgICAgbmFtaW5nTWV0aG9kczogWyAnbGFiZWxUZXh0JyBdXG4gICAgICB9LFxuICAgICAgc2xvdDoge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIG5vQXJpYUF0dHJzOiB0cnVlXG4gICAgICB9LFxuICAgICAgc21hbGw6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWVcbiAgICAgIH0sXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWVcbiAgICAgIH0sXG4gICAgICBzcGFuOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlLFxuICAgICAgICBzaGFkb3dSb290OiB0cnVlXG4gICAgICB9LFxuICAgICAgc3Ryb25nOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdmc6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdlbWJlZGRlZCcsICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWUsXG4gICAgICAgIGNocm9taXVtUm9sZTogJ1NWR1Jvb3QnLFxuICAgICAgICBuYW1pbmdNZXRob2RzOiBbICdzdmdUaXRsZVRleHQnIF1cbiAgICAgIH0sXG4gICAgICBzdWI6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdwaHJhc2luZycsICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdW1tYXJ5OiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIG5hbWluZ01ldGhvZHM6IFsgJ3N1YnRyZWVUZXh0JyBdXG4gICAgICB9LFxuICAgICAgc3VwOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdGFibGU6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IHRydWUsXG4gICAgICAgIG5hbWluZ01ldGhvZHM6IFsgJ3RhYmxlQ2FwdGlvblRleHQnLCAndGFibGVTdW1tYXJ5VGV4dCcgXVxuICAgICAgfSxcbiAgICAgIHRib2R5OiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWVcbiAgICAgIH0sXG4gICAgICB0ZXh0YXJlYToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2ludGVyYWN0aXZlJywgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIGltcGxpY2l0QXR0cnM6IHtcbiAgICAgICAgICAnYXJpYS12YWx1ZW5vdyc6ICcnLFxuICAgICAgICAgICdhcmlhLW11bHRpbGluZSc6ICd0cnVlJ1xuICAgICAgICB9LFxuICAgICAgICBuYW1pbmdNZXRob2RzOiBbICdsYWJlbFRleHQnLCAncGxhY2Vob2xkZXJUZXh0JyBdXG4gICAgICB9LFxuICAgICAgdGZvb3Q6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdGhlYWQ6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdGltZToge1xuICAgICAgICBjb250ZW50VHlwZXM6IFsgJ3BocmFzaW5nJywgJ2Zsb3cnIF0sXG4gICAgICAgIGFsbG93ZWRSb2xlczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIGFsbG93ZWRSb2xlczogZmFsc2UsXG4gICAgICAgIG5vQXJpYUF0dHJzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdGQ6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdGg6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdHI6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdHJhY2s6IHtcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBmYWxzZSxcbiAgICAgICAgbm9BcmlhQXR0cnM6IHRydWVcbiAgICAgIH0sXG4gICAgICB1OiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdWw6IHtcbiAgICAgICAgY29udGVudFR5cGVzOiBbICdmbG93JyBdLFxuICAgICAgICBhbGxvd2VkUm9sZXM6IFsgJ2RpcmVjdG9yeScsICdncm91cCcsICdsaXN0Ym94JywgJ21lbnUnLCAnbWVudWJhcicsICdub25lJywgJ3ByZXNlbnRhdGlvbicsICdyYWRpb2dyb3VwJywgJ3RhYmxpc3QnLCAndG9vbGJhcicsICd0cmVlJyBdXG4gICAgICB9LFxuICAgICAgdmFyOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgdmlkZW86IHtcbiAgICAgICAgdmFyaWFudDoge1xuICAgICAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgICAgICBtYXRjaGVzOiAnW2NvbnRyb2xzXScsXG4gICAgICAgICAgICBjb250ZW50VHlwZXM6IFsgJ2ludGVyYWN0aXZlJywgJ2VtYmVkZGVkJywgJ3BocmFzaW5nJywgJ2Zsb3cnIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlczogWyAnZW1iZWRkZWQnLCAncGhyYXNpbmcnLCAnZmxvdycgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdhcHBsaWNhdGlvbicgXSxcbiAgICAgICAgY2hyb21pdW1Sb2xlOiAndmlkZW8nXG4gICAgICB9LFxuICAgICAgd2JyOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlczogWyAncGhyYXNpbmcnLCAnZmxvdycgXSxcbiAgICAgICAgYWxsb3dlZFJvbGVzOiBbICdwcmVzZW50YXRpb24nLCAnbm9uZScgXVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGh0bWxfZWxtc19kZWZhdWx0ID0gaHRtbEVsbXM7XG4gICAgdmFyIGNzc0NvbG9ycyA9IHtcbiAgICAgIGFsaWNlYmx1ZTogWyAyNDAsIDI0OCwgMjU1IF0sXG4gICAgICBhbnRpcXVld2hpdGU6IFsgMjUwLCAyMzUsIDIxNSBdLFxuICAgICAgYXF1YTogWyAwLCAyNTUsIDI1NSBdLFxuICAgICAgYXF1YW1hcmluZTogWyAxMjcsIDI1NSwgMjEyIF0sXG4gICAgICBhenVyZTogWyAyNDAsIDI1NSwgMjU1IF0sXG4gICAgICBiZWlnZTogWyAyNDUsIDI0NSwgMjIwIF0sXG4gICAgICBiaXNxdWU6IFsgMjU1LCAyMjgsIDE5NiBdLFxuICAgICAgYmxhY2s6IFsgMCwgMCwgMCBdLFxuICAgICAgYmxhbmNoZWRhbG1vbmQ6IFsgMjU1LCAyMzUsIDIwNSBdLFxuICAgICAgYmx1ZTogWyAwLCAwLCAyNTUgXSxcbiAgICAgIGJsdWV2aW9sZXQ6IFsgMTM4LCA0MywgMjI2IF0sXG4gICAgICBicm93bjogWyAxNjUsIDQyLCA0MiBdLFxuICAgICAgYnVybHl3b29kOiBbIDIyMiwgMTg0LCAxMzUgXSxcbiAgICAgIGNhZGV0Ymx1ZTogWyA5NSwgMTU4LCAxNjAgXSxcbiAgICAgIGNoYXJ0cmV1c2U6IFsgMTI3LCAyNTUsIDAgXSxcbiAgICAgIGNob2NvbGF0ZTogWyAyMTAsIDEwNSwgMzAgXSxcbiAgICAgIGNvcmFsOiBbIDI1NSwgMTI3LCA4MCBdLFxuICAgICAgY29ybmZsb3dlcmJsdWU6IFsgMTAwLCAxNDksIDIzNyBdLFxuICAgICAgY29ybnNpbGs6IFsgMjU1LCAyNDgsIDIyMCBdLFxuICAgICAgY3JpbXNvbjogWyAyMjAsIDIwLCA2MCBdLFxuICAgICAgY3lhbjogWyAwLCAyNTUsIDI1NSBdLFxuICAgICAgZGFya2JsdWU6IFsgMCwgMCwgMTM5IF0sXG4gICAgICBkYXJrY3lhbjogWyAwLCAxMzksIDEzOSBdLFxuICAgICAgZGFya2dvbGRlbnJvZDogWyAxODQsIDEzNCwgMTEgXSxcbiAgICAgIGRhcmtncmF5OiBbIDE2OSwgMTY5LCAxNjkgXSxcbiAgICAgIGRhcmtncmVlbjogWyAwLCAxMDAsIDAgXSxcbiAgICAgIGRhcmtncmV5OiBbIDE2OSwgMTY5LCAxNjkgXSxcbiAgICAgIGRhcmtraGFraTogWyAxODksIDE4MywgMTA3IF0sXG4gICAgICBkYXJrbWFnZW50YTogWyAxMzksIDAsIDEzOSBdLFxuICAgICAgZGFya29saXZlZ3JlZW46IFsgODUsIDEwNywgNDcgXSxcbiAgICAgIGRhcmtvcmFuZ2U6IFsgMjU1LCAxNDAsIDAgXSxcbiAgICAgIGRhcmtvcmNoaWQ6IFsgMTUzLCA1MCwgMjA0IF0sXG4gICAgICBkYXJrcmVkOiBbIDEzOSwgMCwgMCBdLFxuICAgICAgZGFya3NhbG1vbjogWyAyMzMsIDE1MCwgMTIyIF0sXG4gICAgICBkYXJrc2VhZ3JlZW46IFsgMTQzLCAxODgsIDE0MyBdLFxuICAgICAgZGFya3NsYXRlYmx1ZTogWyA3MiwgNjEsIDEzOSBdLFxuICAgICAgZGFya3NsYXRlZ3JheTogWyA0NywgNzksIDc5IF0sXG4gICAgICBkYXJrc2xhdGVncmV5OiBbIDQ3LCA3OSwgNzkgXSxcbiAgICAgIGRhcmt0dXJxdW9pc2U6IFsgMCwgMjA2LCAyMDkgXSxcbiAgICAgIGRhcmt2aW9sZXQ6IFsgMTQ4LCAwLCAyMTEgXSxcbiAgICAgIGRlZXBwaW5rOiBbIDI1NSwgMjAsIDE0NyBdLFxuICAgICAgZGVlcHNreWJsdWU6IFsgMCwgMTkxLCAyNTUgXSxcbiAgICAgIGRpbWdyYXk6IFsgMTA1LCAxMDUsIDEwNSBdLFxuICAgICAgZGltZ3JleTogWyAxMDUsIDEwNSwgMTA1IF0sXG4gICAgICBkb2RnZXJibHVlOiBbIDMwLCAxNDQsIDI1NSBdLFxuICAgICAgZmlyZWJyaWNrOiBbIDE3OCwgMzQsIDM0IF0sXG4gICAgICBmbG9yYWx3aGl0ZTogWyAyNTUsIDI1MCwgMjQwIF0sXG4gICAgICBmb3Jlc3RncmVlbjogWyAzNCwgMTM5LCAzNCBdLFxuICAgICAgZnVjaHNpYTogWyAyNTUsIDAsIDI1NSBdLFxuICAgICAgZ2FpbnNib3JvOiBbIDIyMCwgMjIwLCAyMjAgXSxcbiAgICAgIGdob3N0d2hpdGU6IFsgMjQ4LCAyNDgsIDI1NSBdLFxuICAgICAgZ29sZDogWyAyNTUsIDIxNSwgMCBdLFxuICAgICAgZ29sZGVucm9kOiBbIDIxOCwgMTY1LCAzMiBdLFxuICAgICAgZ3JheTogWyAxMjgsIDEyOCwgMTI4IF0sXG4gICAgICBncmVlbjogWyAwLCAxMjgsIDAgXSxcbiAgICAgIGdyZWVueWVsbG93OiBbIDE3MywgMjU1LCA0NyBdLFxuICAgICAgZ3JleTogWyAxMjgsIDEyOCwgMTI4IF0sXG4gICAgICBob25leWRldzogWyAyNDAsIDI1NSwgMjQwIF0sXG4gICAgICBob3RwaW5rOiBbIDI1NSwgMTA1LCAxODAgXSxcbiAgICAgIGluZGlhbnJlZDogWyAyMDUsIDkyLCA5MiBdLFxuICAgICAgaW5kaWdvOiBbIDc1LCAwLCAxMzAgXSxcbiAgICAgIGl2b3J5OiBbIDI1NSwgMjU1LCAyNDAgXSxcbiAgICAgIGtoYWtpOiBbIDI0MCwgMjMwLCAxNDAgXSxcbiAgICAgIGxhdmVuZGVyOiBbIDIzMCwgMjMwLCAyNTAgXSxcbiAgICAgIGxhdmVuZGVyYmx1c2g6IFsgMjU1LCAyNDAsIDI0NSBdLFxuICAgICAgbGF3bmdyZWVuOiBbIDEyNCwgMjUyLCAwIF0sXG4gICAgICBsZW1vbmNoaWZmb246IFsgMjU1LCAyNTAsIDIwNSBdLFxuICAgICAgbGlnaHRibHVlOiBbIDE3MywgMjE2LCAyMzAgXSxcbiAgICAgIGxpZ2h0Y29yYWw6IFsgMjQwLCAxMjgsIDEyOCBdLFxuICAgICAgbGlnaHRjeWFuOiBbIDIyNCwgMjU1LCAyNTUgXSxcbiAgICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiBbIDI1MCwgMjUwLCAyMTAgXSxcbiAgICAgIGxpZ2h0Z3JheTogWyAyMTEsIDIxMSwgMjExIF0sXG4gICAgICBsaWdodGdyZWVuOiBbIDE0NCwgMjM4LCAxNDQgXSxcbiAgICAgIGxpZ2h0Z3JleTogWyAyMTEsIDIxMSwgMjExIF0sXG4gICAgICBsaWdodHBpbms6IFsgMjU1LCAxODIsIDE5MyBdLFxuICAgICAgbGlnaHRzYWxtb246IFsgMjU1LCAxNjAsIDEyMiBdLFxuICAgICAgbGlnaHRzZWFncmVlbjogWyAzMiwgMTc4LCAxNzAgXSxcbiAgICAgIGxpZ2h0c2t5Ymx1ZTogWyAxMzUsIDIwNiwgMjUwIF0sXG4gICAgICBsaWdodHNsYXRlZ3JheTogWyAxMTksIDEzNiwgMTUzIF0sXG4gICAgICBsaWdodHNsYXRlZ3JleTogWyAxMTksIDEzNiwgMTUzIF0sXG4gICAgICBsaWdodHN0ZWVsYmx1ZTogWyAxNzYsIDE5NiwgMjIyIF0sXG4gICAgICBsaWdodHllbGxvdzogWyAyNTUsIDI1NSwgMjI0IF0sXG4gICAgICBsaW1lOiBbIDAsIDI1NSwgMCBdLFxuICAgICAgbGltZWdyZWVuOiBbIDUwLCAyMDUsIDUwIF0sXG4gICAgICBsaW5lbjogWyAyNTAsIDI0MCwgMjMwIF0sXG4gICAgICBtYWdlbnRhOiBbIDI1NSwgMCwgMjU1IF0sXG4gICAgICBtYXJvb246IFsgMTI4LCAwLCAwIF0sXG4gICAgICBtZWRpdW1hcXVhbWFyaW5lOiBbIDEwMiwgMjA1LCAxNzAgXSxcbiAgICAgIG1lZGl1bWJsdWU6IFsgMCwgMCwgMjA1IF0sXG4gICAgICBtZWRpdW1vcmNoaWQ6IFsgMTg2LCA4NSwgMjExIF0sXG4gICAgICBtZWRpdW1wdXJwbGU6IFsgMTQ3LCAxMTIsIDIxOSBdLFxuICAgICAgbWVkaXVtc2VhZ3JlZW46IFsgNjAsIDE3OSwgMTEzIF0sXG4gICAgICBtZWRpdW1zbGF0ZWJsdWU6IFsgMTIzLCAxMDQsIDIzOCBdLFxuICAgICAgbWVkaXVtc3ByaW5nZ3JlZW46IFsgMCwgMjUwLCAxNTQgXSxcbiAgICAgIG1lZGl1bXR1cnF1b2lzZTogWyA3MiwgMjA5LCAyMDQgXSxcbiAgICAgIG1lZGl1bXZpb2xldHJlZDogWyAxOTksIDIxLCAxMzMgXSxcbiAgICAgIG1pZG5pZ2h0Ymx1ZTogWyAyNSwgMjUsIDExMiBdLFxuICAgICAgbWludGNyZWFtOiBbIDI0NSwgMjU1LCAyNTAgXSxcbiAgICAgIG1pc3R5cm9zZTogWyAyNTUsIDIyOCwgMjI1IF0sXG4gICAgICBtb2NjYXNpbjogWyAyNTUsIDIyOCwgMTgxIF0sXG4gICAgICBuYXZham93aGl0ZTogWyAyNTUsIDIyMiwgMTczIF0sXG4gICAgICBuYXZ5OiBbIDAsIDAsIDEyOCBdLFxuICAgICAgb2xkbGFjZTogWyAyNTMsIDI0NSwgMjMwIF0sXG4gICAgICBvbGl2ZTogWyAxMjgsIDEyOCwgMCBdLFxuICAgICAgb2xpdmVkcmFiOiBbIDEwNywgMTQyLCAzNSBdLFxuICAgICAgb3JhbmdlOiBbIDI1NSwgMTY1LCAwIF0sXG4gICAgICBvcmFuZ2VyZWQ6IFsgMjU1LCA2OSwgMCBdLFxuICAgICAgb3JjaGlkOiBbIDIxOCwgMTEyLCAyMTQgXSxcbiAgICAgIHBhbGVnb2xkZW5yb2Q6IFsgMjM4LCAyMzIsIDE3MCBdLFxuICAgICAgcGFsZWdyZWVuOiBbIDE1MiwgMjUxLCAxNTIgXSxcbiAgICAgIHBhbGV0dXJxdW9pc2U6IFsgMTc1LCAyMzgsIDIzOCBdLFxuICAgICAgcGFsZXZpb2xldHJlZDogWyAyMTksIDExMiwgMTQ3IF0sXG4gICAgICBwYXBheWF3aGlwOiBbIDI1NSwgMjM5LCAyMTMgXSxcbiAgICAgIHBlYWNocHVmZjogWyAyNTUsIDIxOCwgMTg1IF0sXG4gICAgICBwZXJ1OiBbIDIwNSwgMTMzLCA2MyBdLFxuICAgICAgcGluazogWyAyNTUsIDE5MiwgMjAzIF0sXG4gICAgICBwbHVtOiBbIDIyMSwgMTYwLCAyMjEgXSxcbiAgICAgIHBvd2RlcmJsdWU6IFsgMTc2LCAyMjQsIDIzMCBdLFxuICAgICAgcHVycGxlOiBbIDEyOCwgMCwgMTI4IF0sXG4gICAgICByZWJlY2NhcHVycGxlOiBbIDEwMiwgNTEsIDE1MyBdLFxuICAgICAgcmVkOiBbIDI1NSwgMCwgMCBdLFxuICAgICAgcm9zeWJyb3duOiBbIDE4OCwgMTQzLCAxNDMgXSxcbiAgICAgIHJveWFsYmx1ZTogWyA2NSwgMTA1LCAyMjUgXSxcbiAgICAgIHNhZGRsZWJyb3duOiBbIDEzOSwgNjksIDE5IF0sXG4gICAgICBzYWxtb246IFsgMjUwLCAxMjgsIDExNCBdLFxuICAgICAgc2FuZHlicm93bjogWyAyNDQsIDE2NCwgOTYgXSxcbiAgICAgIHNlYWdyZWVuOiBbIDQ2LCAxMzksIDg3IF0sXG4gICAgICBzZWFzaGVsbDogWyAyNTUsIDI0NSwgMjM4IF0sXG4gICAgICBzaWVubmE6IFsgMTYwLCA4MiwgNDUgXSxcbiAgICAgIHNpbHZlcjogWyAxOTIsIDE5MiwgMTkyIF0sXG4gICAgICBza3libHVlOiBbIDEzNSwgMjA2LCAyMzUgXSxcbiAgICAgIHNsYXRlYmx1ZTogWyAxMDYsIDkwLCAyMDUgXSxcbiAgICAgIHNsYXRlZ3JheTogWyAxMTIsIDEyOCwgMTQ0IF0sXG4gICAgICBzbGF0ZWdyZXk6IFsgMTEyLCAxMjgsIDE0NCBdLFxuICAgICAgc25vdzogWyAyNTUsIDI1MCwgMjUwIF0sXG4gICAgICBzcHJpbmdncmVlbjogWyAwLCAyNTUsIDEyNyBdLFxuICAgICAgc3RlZWxibHVlOiBbIDcwLCAxMzAsIDE4MCBdLFxuICAgICAgdGFuOiBbIDIxMCwgMTgwLCAxNDAgXSxcbiAgICAgIHRlYWw6IFsgMCwgMTI4LCAxMjggXSxcbiAgICAgIHRoaXN0bGU6IFsgMjE2LCAxOTEsIDIxNiBdLFxuICAgICAgdG9tYXRvOiBbIDI1NSwgOTksIDcxIF0sXG4gICAgICB0dXJxdW9pc2U6IFsgNjQsIDIyNCwgMjA4IF0sXG4gICAgICB2aW9sZXQ6IFsgMjM4LCAxMzAsIDIzOCBdLFxuICAgICAgd2hlYXQ6IFsgMjQ1LCAyMjIsIDE3OSBdLFxuICAgICAgd2hpdGU6IFsgMjU1LCAyNTUsIDI1NSBdLFxuICAgICAgd2hpdGVzbW9rZTogWyAyNDUsIDI0NSwgMjQ1IF0sXG4gICAgICB5ZWxsb3c6IFsgMjU1LCAyNTUsIDAgXSxcbiAgICAgIHllbGxvd2dyZWVuOiBbIDE1NCwgMjA1LCA1MCBdXG4gICAgfTtcbiAgICB2YXIgY3NzX2NvbG9yc19kZWZhdWx0ID0gY3NzQ29sb3JzO1xuICAgIHZhciBvcmlnaW5hbHMgPSB7XG4gICAgICBhcmlhQXR0cnM6IGFyaWFfYXR0cnNfZGVmYXVsdCxcbiAgICAgIGFyaWFSb2xlczogX2V4dGVuZHMoe30sIGFyaWFfcm9sZXNfZGVmYXVsdCwgZHB1Yl9yb2xlc19kZWZhdWx0LCBncmFwaGljc19yb2xlc19kZWZhdWx0KSxcbiAgICAgIGh0bWxFbG1zOiBodG1sX2VsbXNfZGVmYXVsdCxcbiAgICAgIGNzc0NvbG9yczogY3NzX2NvbG9yc19kZWZhdWx0XG4gICAgfTtcbiAgICB2YXIgc3RhbmRhcmRzID0gX2V4dGVuZHMoe30sIG9yaWdpbmFscyk7XG4gICAgZnVuY3Rpb24gY29uZmlndXJlU3RhbmRhcmRzKGNvbmZpZykge1xuICAgICAgT2JqZWN0LmtleXMoc3RhbmRhcmRzKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3BOYW1lKSB7XG4gICAgICAgIGlmIChjb25maWdbcHJvcE5hbWVdKSB7XG4gICAgICAgICAgc3RhbmRhcmRzW3Byb3BOYW1lXSA9IGRlZXBfbWVyZ2VfZGVmYXVsdChzdGFuZGFyZHNbcHJvcE5hbWVdLCBjb25maWdbcHJvcE5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2V0U3RhbmRhcmRzKCkge1xuICAgICAgT2JqZWN0LmtleXMoc3RhbmRhcmRzKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3BOYW1lKSB7XG4gICAgICAgIHN0YW5kYXJkc1twcm9wTmFtZV0gPSBvcmlnaW5hbHNbcHJvcE5hbWVdO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBzdGFuZGFyZHNfZGVmYXVsdCA9IHN0YW5kYXJkcztcbiAgICBmdW5jdGlvbiBpc1Vuc3VwcG9ydGVkUm9sZShyb2xlKSB7XG4gICAgICB2YXIgcm9sZURlZmluaXRpb24gPSBzdGFuZGFyZHNfZGVmYXVsdC5hcmlhUm9sZXNbcm9sZV07XG4gICAgICByZXR1cm4gcm9sZURlZmluaXRpb24gPyAhIXJvbGVEZWZpbml0aW9uLnVuc3VwcG9ydGVkIDogZmFsc2U7XG4gICAgfVxuICAgIHZhciBpc191bnN1cHBvcnRlZF9yb2xlX2RlZmF1bHQgPSBpc1Vuc3VwcG9ydGVkUm9sZTtcbiAgICBmdW5jdGlvbiBpc1ZhbGlkUm9sZShyb2xlKSB7XG4gICAgICB2YXIgX3JlZjI2ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwgYWxsb3dBYnN0cmFjdCA9IF9yZWYyNi5hbGxvd0Fic3RyYWN0LCBfcmVmMjYkZmxhZ1Vuc3VwcG9ydGUgPSBfcmVmMjYuZmxhZ1Vuc3VwcG9ydGVkLCBmbGFnVW5zdXBwb3J0ZWQgPSBfcmVmMjYkZmxhZ1Vuc3VwcG9ydGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjI2JGZsYWdVbnN1cHBvcnRlO1xuICAgICAgdmFyIHJvbGVEZWZpbml0aW9uID0gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYVJvbGVzW3JvbGVdO1xuICAgICAgdmFyIGlzUm9sZVVuc3VwcG9ydGVkID0gaXNfdW5zdXBwb3J0ZWRfcm9sZV9kZWZhdWx0KHJvbGUpO1xuICAgICAgaWYgKCFyb2xlRGVmaW5pdGlvbiB8fCBmbGFnVW5zdXBwb3J0ZWQgJiYgaXNSb2xlVW5zdXBwb3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFsbG93QWJzdHJhY3QgPyB0cnVlIDogcm9sZURlZmluaXRpb24udHlwZSAhPT0gJ2Fic3RyYWN0JztcbiAgICB9XG4gICAgdmFyIGlzX3ZhbGlkX3JvbGVfZGVmYXVsdCA9IGlzVmFsaWRSb2xlO1xuICAgIGZ1bmN0aW9uIGdldEV4cGxpY2l0Um9sZSh2Tm9kZSkge1xuICAgICAgdmFyIF9yZWYyNyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sIGZhbGxiYWNrID0gX3JlZjI3LmZhbGxiYWNrLCBhYnN0cmFjdHMgPSBfcmVmMjcuYWJzdHJhY3RzLCBkcHViID0gX3JlZjI3LmRwdWI7XG4gICAgICB2Tm9kZSA9IHZOb2RlIGluc3RhbmNlb2YgYWJzdHJhY3RfdmlydHVhbF9ub2RlX2RlZmF1bHQgPyB2Tm9kZSA6IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KHZOb2RlKTtcbiAgICAgIGlmICh2Tm9kZS5wcm9wcy5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciByb2xlQXR0ciA9ICh2Tm9kZS5hdHRyKCdyb2xlJykgfHwgJycpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJvbGVMaXN0ID0gZmFsbGJhY2sgPyB0b2tlbl9saXN0X2RlZmF1bHQocm9sZUF0dHIpIDogWyByb2xlQXR0ciBdO1xuICAgICAgdmFyIGZpcnN0VmFsaWRSb2xlID0gcm9sZUxpc3QuZmluZChmdW5jdGlvbihyb2xlKSB7XG4gICAgICAgIGlmICghZHB1YiAmJiByb2xlLnN1YnN0cigwLCA0KSA9PT0gJ2RvYy0nKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc192YWxpZF9yb2xlX2RlZmF1bHQocm9sZSwge1xuICAgICAgICAgIGFsbG93QWJzdHJhY3Q6IGFic3RyYWN0c1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpcnN0VmFsaWRSb2xlIHx8IG51bGw7XG4gICAgfVxuICAgIHZhciBnZXRfZXhwbGljaXRfcm9sZV9kZWZhdWx0ID0gZ2V0RXhwbGljaXRSb2xlO1xuICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRzQnlDb250ZW50VHlwZSh0eXBlMikge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0YW5kYXJkc19kZWZhdWx0Lmh0bWxFbG1zKS5maWx0ZXIoZnVuY3Rpb24obm9kZU5hbWUyKSB7XG4gICAgICAgIHZhciBlbG0gPSBzdGFuZGFyZHNfZGVmYXVsdC5odG1sRWxtc1tub2RlTmFtZTJdO1xuICAgICAgICBpZiAoZWxtLmNvbnRlbnRUeXBlcykge1xuICAgICAgICAgIHJldHVybiBlbG0uY29udGVudFR5cGVzLmluY2x1ZGVzKHR5cGUyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVsbS52YXJpYW50KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbG0udmFyaWFudFsnZGVmYXVsdCddICYmIGVsbS52YXJpYW50WydkZWZhdWx0J10uY29udGVudFR5cGVzKSB7XG4gICAgICAgICAgcmV0dXJuIGVsbS52YXJpYW50WydkZWZhdWx0J10uY29udGVudFR5cGVzLmluY2x1ZGVzKHR5cGUyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGdldF9lbGVtZW50c19ieV9jb250ZW50X3R5cGVfZGVmYXVsdCA9IGdldEVsZW1lbnRzQnlDb250ZW50VHlwZTtcbiAgICBmdW5jdGlvbiBnZXRHbG9iYWxBcmlhQXR0cnMoKSB7XG4gICAgICByZXR1cm4gY2FjaGVfZGVmYXVsdC5nZXQoJ2dsb2JhbEFyaWFBdHRycycsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RhbmRhcmRzX2RlZmF1bHQuYXJpYUF0dHJzKS5maWx0ZXIoZnVuY3Rpb24oYXR0ck5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYUF0dHJzW2F0dHJOYW1lXS5nbG9iYWw7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBnZXRfZ2xvYmFsX2FyaWFfYXR0cnNfZGVmYXVsdCA9IGdldEdsb2JhbEFyaWFBdHRycztcbiAgICBmdW5jdGlvbiB0b0dyaWQobm9kZSkge1xuICAgICAgdmFyIHRhYmxlID0gW107XG4gICAgICB2YXIgcm93cyA9IG5vZGUucm93cztcbiAgICAgIGZvciAodmFyIF9pOSA9IDAsIHJvd0xlbmd0aCA9IHJvd3MubGVuZ3RoOyBfaTkgPCByb3dMZW5ndGg7IF9pOSsrKSB7XG4gICAgICAgIHZhciBjZWxscyA9IHJvd3NbX2k5XS5jZWxscztcbiAgICAgICAgdGFibGVbX2k5XSA9IHRhYmxlW19pOV0gfHwgW107XG4gICAgICAgIHZhciBjb2x1bW5JbmRleCA9IDA7XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBjZWxsTGVuZ3RoID0gY2VsbHMubGVuZ3RoOyBqIDwgY2VsbExlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZm9yICh2YXIgY29sU3BhbiA9IDA7IGNvbFNwYW4gPCBjZWxsc1tqXS5jb2xTcGFuOyBjb2xTcGFuKyspIHtcbiAgICAgICAgICAgIHZhciByb3dzcGFuQXR0ciA9IGNlbGxzW2pdLmdldEF0dHJpYnV0ZSgncm93c3BhbicpO1xuICAgICAgICAgICAgdmFyIHJvd3NwYW5WYWx1ZSA9IHBhcnNlSW50KHJvd3NwYW5BdHRyKSA9PT0gMCB8fCBjZWxsc1tqXS5yb3dzcGFuID09PSAwID8gcm93cy5sZW5ndGggOiBjZWxsc1tqXS5yb3dTcGFuO1xuICAgICAgICAgICAgZm9yICh2YXIgcm93U3BhbiA9IDA7IHJvd1NwYW4gPCByb3dzcGFuVmFsdWU7IHJvd1NwYW4rKykge1xuICAgICAgICAgICAgICB0YWJsZVtfaTkgKyByb3dTcGFuXSA9IHRhYmxlW19pOSArIHJvd1NwYW5dIHx8IFtdO1xuICAgICAgICAgICAgICB3aGlsZSAodGFibGVbX2k5ICsgcm93U3Bhbl1bY29sdW1uSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uSW5kZXgrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0YWJsZVtfaTkgKyByb3dTcGFuXVtjb2x1bW5JbmRleF0gPSBjZWxsc1tqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbHVtbkluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuICAgIHZhciB0b19ncmlkX2RlZmF1bHQgPSBtZW1vaXplX2RlZmF1bHQodG9HcmlkKTtcbiAgICBmdW5jdGlvbiBnZXRDZWxsUG9zaXRpb24oY2VsbCwgdGFibGVHcmlkKSB7XG4gICAgICB2YXIgcm93SW5kZXgsIGluZGV4O1xuICAgICAgaWYgKCF0YWJsZUdyaWQpIHtcbiAgICAgICAgdGFibGVHcmlkID0gdG9fZ3JpZF9kZWZhdWx0KGZpbmRfdXBfZGVmYXVsdChjZWxsLCAndGFibGUnKSk7XG4gICAgICB9XG4gICAgICBmb3IgKHJvd0luZGV4ID0gMDsgcm93SW5kZXggPCB0YWJsZUdyaWQubGVuZ3RoOyByb3dJbmRleCsrKSB7XG4gICAgICAgIGlmICh0YWJsZUdyaWRbcm93SW5kZXhdKSB7XG4gICAgICAgICAgaW5kZXggPSB0YWJsZUdyaWRbcm93SW5kZXhdLmluZGV4T2YoY2VsbCk7XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgeDogaW5kZXgsXG4gICAgICAgICAgICAgIHk6IHJvd0luZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZ2V0X2NlbGxfcG9zaXRpb25fZGVmYXVsdCA9IG1lbW9pemVfZGVmYXVsdChnZXRDZWxsUG9zaXRpb24pO1xuICAgIGZ1bmN0aW9uIF9nZXRTY29wZShlbCkge1xuICAgICAgdmFyIF9ub2RlTG9va3VwOSA9IF9ub2RlTG9va3VwKGVsKSwgdk5vZGUgPSBfbm9kZUxvb2t1cDkudk5vZGUsIGNlbGwgPSBfbm9kZUxvb2t1cDkuZG9tTm9kZTtcbiAgICAgIHZhciBzY29wZSA9IHZOb2RlLmF0dHIoJ3Njb3BlJyk7XG4gICAgICB2YXIgcm9sZSA9IHZOb2RlLmF0dHIoJ3JvbGUnKTtcbiAgICAgIGlmICghWyAndGQnLCAndGgnIF0uaW5jbHVkZXModk5vZGUucHJvcHMubm9kZU5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFREIG9yIFRIIGVsZW1lbnQnKTtcbiAgICAgIH1cbiAgICAgIGlmIChyb2xlID09PSAnY29sdW1uaGVhZGVyJykge1xuICAgICAgICByZXR1cm4gJ2NvbCc7XG4gICAgICB9IGVsc2UgaWYgKHJvbGUgPT09ICdyb3doZWFkZXInKSB7XG4gICAgICAgIHJldHVybiAncm93JztcbiAgICAgIH0gZWxzZSBpZiAoc2NvcGUgPT09ICdjb2wnIHx8IHNjb3BlID09PSAncm93Jykge1xuICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgICB9IGVsc2UgaWYgKHZOb2RlLnByb3BzLm5vZGVOYW1lICE9PSAndGgnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoIXZOb2RlLmFjdHVhbE5vZGUpIHtcbiAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgIH1cbiAgICAgIHZhciB0YWJsZUdyaWQgPSB0b19ncmlkX2RlZmF1bHQoZmluZF91cF9kZWZhdWx0KGNlbGwsICd0YWJsZScpKTtcbiAgICAgIHZhciBwb3MgPSBnZXRfY2VsbF9wb3NpdGlvbl9kZWZhdWx0KGNlbGwsIHRhYmxlR3JpZCk7XG4gICAgICB2YXIgaGVhZGVyUm93ID0gdGFibGVHcmlkW3Bvcy55XS5ldmVyeShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdUSCc7XG4gICAgICB9KTtcbiAgICAgIGlmIChoZWFkZXJSb3cpIHtcbiAgICAgICAgcmV0dXJuICdjb2wnO1xuICAgICAgfVxuICAgICAgdmFyIGhlYWRlckNvbCA9IHRhYmxlR3JpZC5tYXAoZnVuY3Rpb24oY29sKSB7XG4gICAgICAgIHJldHVybiBjb2xbcG9zLnhdO1xuICAgICAgfSkuZXZlcnkoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdUSCc7XG4gICAgICB9KTtcbiAgICAgIGlmIChoZWFkZXJDb2wpIHtcbiAgICAgICAgcmV0dXJuICdyb3cnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdhdXRvJztcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNDb2x1bW5IZWFkZXIoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIFsgJ2NvbCcsICdhdXRvJyBdLmluZGV4T2YoX2dldFNjb3BlKGVsZW1lbnQpKSAhPT0gLTE7XG4gICAgfVxuICAgIHZhciBpc19jb2x1bW5faGVhZGVyX2RlZmF1bHQgPSBpc0NvbHVtbkhlYWRlcjtcbiAgICBmdW5jdGlvbiBpc1Jvd0hlYWRlcihjZWxsKSB7XG4gICAgICByZXR1cm4gWyAncm93JywgJ2F1dG8nIF0uaW5jbHVkZXMoX2dldFNjb3BlKGNlbGwpKTtcbiAgICB9XG4gICAgdmFyIGlzX3Jvd19oZWFkZXJfZGVmYXVsdCA9IGlzUm93SGVhZGVyO1xuICAgIGZ1bmN0aW9uIHNhbml0aXplKHN0cikge1xuICAgICAgaWYgKCFzdHIpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHJcXG4vZywgJ1xcbicpLnJlcGxhY2UoL1xcdTAwQTAvZywgJyAnKS5yZXBsYWNlKC9bXFxzXXsyLH0vZywgJyAnKS50cmltKCk7XG4gICAgfVxuICAgIHZhciBzYW5pdGl6ZV9kZWZhdWx0ID0gc2FuaXRpemU7XG4gICAgdmFyIGdldFNlY3Rpb25pbmdDb250ZW50U2VsZWN0b3IgPSBmdW5jdGlvbiBnZXRTZWN0aW9uaW5nQ29udGVudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNhY2hlX2RlZmF1bHQuZ2V0KCdzZWN0aW9uaW5nQ29udGVudFNlbGVjdG9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRfZWxlbWVudHNfYnlfY29udGVudF90eXBlX2RlZmF1bHQoJ3NlY3Rpb25pbmcnKS5tYXAoZnVuY3Rpb24obm9kZU5hbWUyKSB7XG4gICAgICAgICAgcmV0dXJuICcnLmNvbmNhdChub2RlTmFtZTIsICc6bm90KFtyb2xlXSknKTtcbiAgICAgICAgfSkuam9pbignLCAnKSArICcgLCBbcm9sZT1hcnRpY2xlXSwgW3JvbGU9Y29tcGxlbWVudGFyeV0sIFtyb2xlPW5hdmlnYXRpb25dLCBbcm9sZT1yZWdpb25dJztcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIGdldFNlY3Rpb25pbmdDb250ZW50UGx1c01haW5TZWxlY3RvciA9IGZ1bmN0aW9uIGdldFNlY3Rpb25pbmdDb250ZW50UGx1c01haW5TZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjYWNoZV9kZWZhdWx0LmdldCgnc2VjdGlvbmluZ0NvbnRlbnRQbHVzTWFpblNlbGVjdG9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRTZWN0aW9uaW5nQ29udGVudFNlbGVjdG9yKCkgKyAnICwgbWFpbjpub3QoW3JvbGVdKSwgW3JvbGU9bWFpbl0nO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBoYXNBY2Nlc3NpYmxlTmFtZSh2Tm9kZSkge1xuICAgICAgdmFyIF9yZWYyOCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sIF9yZWYyOCRjaGVja1RpdGxlID0gX3JlZjI4LmNoZWNrVGl0bGUsIGNoZWNrVGl0bGUgPSBfcmVmMjgkY2hlY2tUaXRsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMjgkY2hlY2tUaXRsZTtcbiAgICAgIHJldHVybiAhIShzYW5pdGl6ZV9kZWZhdWx0KGFyaWFsYWJlbGxlZGJ5X3RleHRfZGVmYXVsdCh2Tm9kZSkpIHx8IHNhbml0aXplX2RlZmF1bHQoX2FyaWFsYWJlbFRleHQodk5vZGUpKSB8fCBjaGVja1RpdGxlICYmICh2Tm9kZSA9PT0gbnVsbCB8fCB2Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdk5vZGUucHJvcHMubm9kZVR5cGUpID09PSAxICYmIHNhbml0aXplX2RlZmF1bHQodk5vZGUuYXR0cigndGl0bGUnKSkpO1xuICAgIH1cbiAgICB2YXIgaW1wbGljaXRIdG1sUm9sZXMgPSB7XG4gICAgICBhOiBmdW5jdGlvbiBhKHZOb2RlKSB7XG4gICAgICAgIHJldHVybiB2Tm9kZS5oYXNBdHRyKCdocmVmJykgPyAnbGluaycgOiBudWxsO1xuICAgICAgfSxcbiAgICAgIGFyZWE6IGZ1bmN0aW9uIGFyZWEodk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHZOb2RlLmhhc0F0dHIoJ2hyZWYnKSA/ICdsaW5rJyA6IG51bGw7XG4gICAgICB9LFxuICAgICAgYXJ0aWNsZTogJ2FydGljbGUnLFxuICAgICAgYXNpZGU6IGZ1bmN0aW9uIGFzaWRlKHZOb2RlKSB7XG4gICAgICAgIGlmIChjbG9zZXN0X2RlZmF1bHQodk5vZGUucGFyZW50LCBnZXRTZWN0aW9uaW5nQ29udGVudFNlbGVjdG9yKCkpICYmICFoYXNBY2Nlc3NpYmxlTmFtZSh2Tm9kZSwge1xuICAgICAgICAgIGNoZWNrVGl0bGU6IHRydWVcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2NvbXBsZW1lbnRhcnknO1xuICAgICAgfSxcbiAgICAgIGJvZHk6ICdkb2N1bWVudCcsXG4gICAgICBidXR0b246ICdidXR0b24nLFxuICAgICAgZGF0YWxpc3Q6ICdsaXN0Ym94JyxcbiAgICAgIGRkOiAnZGVmaW5pdGlvbicsXG4gICAgICBkZm46ICd0ZXJtJyxcbiAgICAgIGRldGFpbHM6ICdncm91cCcsXG4gICAgICBkaWFsb2c6ICdkaWFsb2cnLFxuICAgICAgZHQ6ICd0ZXJtJyxcbiAgICAgIGZpZWxkc2V0OiAnZ3JvdXAnLFxuICAgICAgZmlndXJlOiAnZmlndXJlJyxcbiAgICAgIGZvb3RlcjogZnVuY3Rpb24gZm9vdGVyKHZOb2RlKSB7XG4gICAgICAgIHZhciBzZWN0aW9uaW5nRWxlbWVudCA9IGNsb3Nlc3RfZGVmYXVsdCh2Tm9kZSwgZ2V0U2VjdGlvbmluZ0NvbnRlbnRQbHVzTWFpblNlbGVjdG9yKCkpO1xuICAgICAgICByZXR1cm4gIXNlY3Rpb25pbmdFbGVtZW50ID8gJ2NvbnRlbnRpbmZvJyA6IG51bGw7XG4gICAgICB9LFxuICAgICAgZm9ybTogZnVuY3Rpb24gZm9ybSh2Tm9kZSkge1xuICAgICAgICByZXR1cm4gaGFzQWNjZXNzaWJsZU5hbWUodk5vZGUpID8gJ2Zvcm0nIDogbnVsbDtcbiAgICAgIH0sXG4gICAgICBoMTogJ2hlYWRpbmcnLFxuICAgICAgaDI6ICdoZWFkaW5nJyxcbiAgICAgIGgzOiAnaGVhZGluZycsXG4gICAgICBoNDogJ2hlYWRpbmcnLFxuICAgICAgaDU6ICdoZWFkaW5nJyxcbiAgICAgIGg2OiAnaGVhZGluZycsXG4gICAgICBoZWFkZXI6IGZ1bmN0aW9uIGhlYWRlcih2Tm9kZSkge1xuICAgICAgICB2YXIgc2VjdGlvbmluZ0VsZW1lbnQgPSBjbG9zZXN0X2RlZmF1bHQodk5vZGUsIGdldFNlY3Rpb25pbmdDb250ZW50UGx1c01haW5TZWxlY3RvcigpKTtcbiAgICAgICAgcmV0dXJuICFzZWN0aW9uaW5nRWxlbWVudCA/ICdiYW5uZXInIDogbnVsbDtcbiAgICAgIH0sXG4gICAgICBocjogJ3NlcGFyYXRvcicsXG4gICAgICBpbWc6IGZ1bmN0aW9uIGltZyh2Tm9kZSkge1xuICAgICAgICB2YXIgZW1wdHlBbHQgPSB2Tm9kZS5oYXNBdHRyKCdhbHQnKSAmJiAhdk5vZGUuYXR0cignYWx0Jyk7XG4gICAgICAgIHZhciBoYXNHbG9iYWxBcmlhID0gZ2V0X2dsb2JhbF9hcmlhX2F0dHJzX2RlZmF1bHQoKS5maW5kKGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgICByZXR1cm4gdk5vZGUuaGFzQXR0cihhdHRyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBlbXB0eUFsdCAmJiAhaGFzR2xvYmFsQXJpYSAmJiAhX2lzRm9jdXNhYmxlKHZOb2RlKSA/ICdwcmVzZW50YXRpb24nIDogJ2ltZyc7XG4gICAgICB9LFxuICAgICAgaW5wdXQ6IGZ1bmN0aW9uIGlucHV0KHZOb2RlKSB7XG4gICAgICAgIHZhciBzdWdnZXN0aW9uc1NvdXJjZUVsZW1lbnQ7XG4gICAgICAgIGlmICh2Tm9kZS5oYXNBdHRyKCdsaXN0JykpIHtcbiAgICAgICAgICB2YXIgbGlzdEVsZW1lbnQgPSBpZHJlZnNfZGVmYXVsdCh2Tm9kZS5hY3R1YWxOb2RlLCAnbGlzdCcpLmZpbHRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gISFub2RlO1xuICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgIHN1Z2dlc3Rpb25zU291cmNlRWxlbWVudCA9IGxpc3RFbGVtZW50ICYmIGxpc3RFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdkYXRhbGlzdCc7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh2Tm9kZS5wcm9wcy50eXBlKSB7XG4gICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgcmV0dXJuICdjaGVja2JveCc7XG5cbiAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgcmV0dXJuICdzcGluYnV0dG9uJztcblxuICAgICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICAgIHJldHVybiAncmFkaW8nO1xuXG4gICAgICAgICBjYXNlICdyYW5nZSc6XG4gICAgICAgICAgcmV0dXJuICdzbGlkZXInO1xuXG4gICAgICAgICBjYXNlICdzZWFyY2gnOlxuICAgICAgICAgIHJldHVybiAhc3VnZ2VzdGlvbnNTb3VyY2VFbGVtZW50ID8gJ3NlYXJjaGJveCcgOiAnY29tYm9ib3gnO1xuXG4gICAgICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICAgY2FzZSAnc3VibWl0JzpcbiAgICAgICAgICByZXR1cm4gJ2J1dHRvbic7XG5cbiAgICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICAgY2FzZSAndGVsJzpcbiAgICAgICAgIGNhc2UgJ3VybCc6XG4gICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgICBjYXNlICcnOlxuICAgICAgICAgIHJldHVybiAhc3VnZ2VzdGlvbnNTb3VyY2VFbGVtZW50ID8gJ3RleHRib3gnIDogJ2NvbWJvYm94JztcblxuICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gJ3RleHRib3gnO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbGk6ICdsaXN0aXRlbScsXG4gICAgICBtYWluOiAnbWFpbicsXG4gICAgICBtYXRoOiAnbWF0aCcsXG4gICAgICBtZW51OiAnbGlzdCcsXG4gICAgICBtZXRlcjogJ21ldGVyJyxcbiAgICAgIG5hdjogJ25hdmlnYXRpb24nLFxuICAgICAgb2w6ICdsaXN0JyxcbiAgICAgIG9wdGdyb3VwOiAnZ3JvdXAnLFxuICAgICAgb3B0aW9uOiAnb3B0aW9uJyxcbiAgICAgIG91dHB1dDogJ3N0YXR1cycsXG4gICAgICBwcm9ncmVzczogJ3Byb2dyZXNzYmFyJyxcbiAgICAgIHNlYXJjaDogJ3NlYXJjaCcsXG4gICAgICBzZWN0aW9uOiBmdW5jdGlvbiBzZWN0aW9uKHZOb2RlKSB7XG4gICAgICAgIHJldHVybiBoYXNBY2Nlc3NpYmxlTmFtZSh2Tm9kZSkgPyAncmVnaW9uJyA6IG51bGw7XG4gICAgICB9LFxuICAgICAgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3Qodk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHZOb2RlLmhhc0F0dHIoJ211bHRpcGxlJykgfHwgcGFyc2VJbnQodk5vZGUuYXR0cignc2l6ZScpKSA+IDEgPyAnbGlzdGJveCcgOiAnY29tYm9ib3gnO1xuICAgICAgfSxcbiAgICAgIHN1bW1hcnk6ICdidXR0b24nLFxuICAgICAgdGFibGU6ICd0YWJsZScsXG4gICAgICB0Ym9keTogJ3Jvd2dyb3VwJyxcbiAgICAgIHRkOiBmdW5jdGlvbiB0ZCh2Tm9kZSkge1xuICAgICAgICB2YXIgdGFibGUgPSBjbG9zZXN0X2RlZmF1bHQodk5vZGUsICd0YWJsZScpO1xuICAgICAgICB2YXIgcm9sZSA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQodGFibGUpO1xuICAgICAgICByZXR1cm4gWyAnZ3JpZCcsICd0cmVlZ3JpZCcgXS5pbmNsdWRlcyhyb2xlKSA/ICdncmlkY2VsbCcgOiAnY2VsbCc7XG4gICAgICB9LFxuICAgICAgdGV4dGFyZWE6ICd0ZXh0Ym94JyxcbiAgICAgIHRmb290OiAncm93Z3JvdXAnLFxuICAgICAgdGg6IGZ1bmN0aW9uIHRoKHZOb2RlKSB7XG4gICAgICAgIGlmIChpc19jb2x1bW5faGVhZGVyX2RlZmF1bHQodk5vZGUpKSB7XG4gICAgICAgICAgcmV0dXJuICdjb2x1bW5oZWFkZXInO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc19yb3dfaGVhZGVyX2RlZmF1bHQodk5vZGUpKSB7XG4gICAgICAgICAgcmV0dXJuICdyb3doZWFkZXInO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGhlYWQ6ICdyb3dncm91cCcsXG4gICAgICB0cjogJ3JvdycsXG4gICAgICB1bDogJ2xpc3QnXG4gICAgfTtcbiAgICB2YXIgaW1wbGljaXRfaHRtbF9yb2xlc19kZWZhdWx0ID0gaW1wbGljaXRIdG1sUm9sZXM7XG4gICAgZnVuY3Rpb24gZnJvbVByaW1hdGl2ZShzb21lU3RyaW5nLCBtYXRjaGVyKSB7XG4gICAgICB2YXIgbWF0Y2hlclR5cGUgPSBfdHlwZW9mKG1hdGNoZXIpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWF0Y2hlcikgJiYgdHlwZW9mIHNvbWVTdHJpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVyLmluY2x1ZGVzKHNvbWVTdHJpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKG1hdGNoZXJUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiAhIW1hdGNoZXIoc29tZVN0cmluZyk7XG4gICAgICB9XG4gICAgICBpZiAoc29tZVN0cmluZyAhPT0gbnVsbCAmJiBzb21lU3RyaW5nICE9PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKG1hdGNoZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hlci50ZXN0KHNvbWVTdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXlxcLy4qXFwvJC8udGVzdChtYXRjaGVyKSkge1xuICAgICAgICAgIHZhciBwYXR0ZXJuID0gbWF0Y2hlci5zdWJzdHJpbmcoMSwgbWF0Y2hlci5sZW5ndGggLSAxKTtcbiAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChwYXR0ZXJuKS50ZXN0KHNvbWVTdHJpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hlciA9PT0gc29tZVN0cmluZztcbiAgICB9XG4gICAgdmFyIGZyb21fcHJpbWF0aXZlX2RlZmF1bHQgPSBmcm9tUHJpbWF0aXZlO1xuICAgIGZ1bmN0aW9uIGhhc0FjY2Vzc2libGVOYW1lMih2Tm9kZSwgbWF0Y2hlcikge1xuICAgICAgcmV0dXJuIGZyb21fcHJpbWF0aXZlX2RlZmF1bHQoISFfYWNjZXNzaWJsZVRleHRWaXJ0dWFsKHZOb2RlKSwgbWF0Y2hlcik7XG4gICAgfVxuICAgIHZhciBoYXNfYWNjZXNzaWJsZV9uYW1lX2RlZmF1bHQgPSBoYXNBY2Nlc3NpYmxlTmFtZTI7XG4gICAgZnVuY3Rpb24gZnJvbUZ1bmN0aW9uKGdldFZhbHVlLCBtYXRjaGVyKSB7XG4gICAgICB2YXIgbWF0Y2hlclR5cGUgPSBfdHlwZW9mKG1hdGNoZXIpO1xuICAgICAgaWYgKG1hdGNoZXJUeXBlICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1hdGNoZXIpIHx8IG1hdGNoZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3QgbWF0Y2hlciB0byBiZSBhbiBvYmplY3QnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXRjaGVyKS5ldmVyeShmdW5jdGlvbihwcm9wTmFtZSkge1xuICAgICAgICByZXR1cm4gZnJvbV9wcmltYXRpdmVfZGVmYXVsdChnZXRWYWx1ZShwcm9wTmFtZSksIG1hdGNoZXJbcHJvcE5hbWVdKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgZnJvbV9mdW5jdGlvbl9kZWZhdWx0ID0gZnJvbUZ1bmN0aW9uO1xuICAgIGZ1bmN0aW9uIGF0dHJpYnV0ZXModk5vZGUsIG1hdGNoZXIpIHtcbiAgICAgIHZOb2RlID0gX25vZGVMb29rdXAodk5vZGUpLnZOb2RlO1xuICAgICAgcmV0dXJuIGZyb21fZnVuY3Rpb25fZGVmYXVsdChmdW5jdGlvbihhdHRyTmFtZSkge1xuICAgICAgICByZXR1cm4gdk5vZGUuYXR0cihhdHRyTmFtZSk7XG4gICAgICB9LCBtYXRjaGVyKTtcbiAgICB9XG4gICAgdmFyIGF0dHJpYnV0ZXNfZGVmYXVsdCA9IGF0dHJpYnV0ZXM7XG4gICAgZnVuY3Rpb24gY29uZGl0aW9uKGFyZywgbWF0Y2hlcikge1xuICAgICAgcmV0dXJuICEhbWF0Y2hlcihhcmcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleHBsaWNpdFJvbGUodk5vZGUsIG1hdGNoZXIpIHtcbiAgICAgIHJldHVybiBmcm9tX3ByaW1hdGl2ZV9kZWZhdWx0KGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQodk5vZGUpLCBtYXRjaGVyKTtcbiAgICB9XG4gICAgdmFyIGV4cGxpY2l0X3JvbGVfZGVmYXVsdCA9IGV4cGxpY2l0Um9sZTtcbiAgICBmdW5jdGlvbiBpbXBsaWNpdFJvbGUodk5vZGUsIG1hdGNoZXIpIHtcbiAgICAgIHJldHVybiBmcm9tX3ByaW1hdGl2ZV9kZWZhdWx0KGltcGxpY2l0X3JvbGVfZGVmYXVsdCh2Tm9kZSksIG1hdGNoZXIpO1xuICAgIH1cbiAgICB2YXIgaW1wbGljaXRfcm9sZV9kZWZhdWx0MiA9IGltcGxpY2l0Um9sZTtcbiAgICBmdW5jdGlvbiBub2RlTmFtZSh2Tm9kZSwgbWF0Y2hlcikge1xuICAgICAgdk5vZGUgPSBfbm9kZUxvb2t1cCh2Tm9kZSkudk5vZGU7XG4gICAgICByZXR1cm4gZnJvbV9wcmltYXRpdmVfZGVmYXVsdCh2Tm9kZS5wcm9wcy5ub2RlTmFtZSwgbWF0Y2hlcik7XG4gICAgfVxuICAgIHZhciBub2RlX25hbWVfZGVmYXVsdCA9IG5vZGVOYW1lO1xuICAgIGZ1bmN0aW9uIHByb3BlcnRpZXModk5vZGUsIG1hdGNoZXIpIHtcbiAgICAgIHZOb2RlID0gX25vZGVMb29rdXAodk5vZGUpLnZOb2RlO1xuICAgICAgcmV0dXJuIGZyb21fZnVuY3Rpb25fZGVmYXVsdChmdW5jdGlvbihwcm9wTmFtZSkge1xuICAgICAgICByZXR1cm4gdk5vZGUucHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfSwgbWF0Y2hlcik7XG4gICAgfVxuICAgIHZhciBwcm9wZXJ0aWVzX2RlZmF1bHQgPSBwcm9wZXJ0aWVzO1xuICAgIGZ1bmN0aW9uIHNlbWFudGljUm9sZSh2Tm9kZSwgbWF0Y2hlcikge1xuICAgICAgcmV0dXJuIGZyb21fcHJpbWF0aXZlX2RlZmF1bHQoZ2V0X3JvbGVfZGVmYXVsdCh2Tm9kZSksIG1hdGNoZXIpO1xuICAgIH1cbiAgICB2YXIgc2VtYW50aWNfcm9sZV9kZWZhdWx0ID0gc2VtYW50aWNSb2xlO1xuICAgIHZhciBtYXRjaGVycyA9IHtcbiAgICAgIGhhc0FjY2Vzc2libGVOYW1lOiBoYXNfYWNjZXNzaWJsZV9uYW1lX2RlZmF1bHQsXG4gICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzX2RlZmF1bHQsXG4gICAgICBjb25kaXRpb246IGNvbmRpdGlvbixcbiAgICAgIGV4cGxpY2l0Um9sZTogZXhwbGljaXRfcm9sZV9kZWZhdWx0LFxuICAgICAgaW1wbGljaXRSb2xlOiBpbXBsaWNpdF9yb2xlX2RlZmF1bHQyLFxuICAgICAgbm9kZU5hbWU6IG5vZGVfbmFtZV9kZWZhdWx0LFxuICAgICAgcHJvcGVydGllczogcHJvcGVydGllc19kZWZhdWx0LFxuICAgICAgc2VtYW50aWNSb2xlOiBzZW1hbnRpY19yb2xlX2RlZmF1bHRcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGZyb21EZWZpbml0aW9uKHZOb2RlLCBkZWZpbml0aW9uKSB7XG4gICAgICB2Tm9kZSA9IF9ub2RlTG9va3VwKHZOb2RlKS52Tm9kZTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uLnNvbWUoZnVuY3Rpb24oZGVmaW5pdGlvbkl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gZnJvbURlZmluaXRpb24odk5vZGUsIGRlZmluaXRpb25JdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBfbWF0Y2hlcyh2Tm9kZSwgZGVmaW5pdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoZGVmaW5pdGlvbikuZXZlcnkoZnVuY3Rpb24obWF0Y2hlck5hbWUpIHtcbiAgICAgICAgaWYgKCFtYXRjaGVyc1ttYXRjaGVyTmFtZV0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWF0Y2hlciB0eXBlIFwiJy5jb25jYXQobWF0Y2hlck5hbWUsICdcIicpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF0Y2hNZXRob2QgPSBtYXRjaGVyc1ttYXRjaGVyTmFtZV07XG4gICAgICAgIHZhciBtYXRjaGVyID0gZGVmaW5pdGlvblttYXRjaGVyTmFtZV07XG4gICAgICAgIHJldHVybiBtYXRjaE1ldGhvZCh2Tm9kZSwgbWF0Y2hlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGZyb21fZGVmaW5pdGlvbl9kZWZhdWx0ID0gZnJvbURlZmluaXRpb247XG4gICAgZnVuY3Rpb24gbWF0Y2hlczIodk5vZGUsIGRlZmluaXRpb24pIHtcbiAgICAgIHJldHVybiBmcm9tX2RlZmluaXRpb25fZGVmYXVsdCh2Tm9kZSwgZGVmaW5pdGlvbik7XG4gICAgfVxuICAgIHZhciBtYXRjaGVzX2RlZmF1bHQgPSBtYXRjaGVzMjtcbiAgICBtYXRjaGVzX2RlZmF1bHQuaGFzQWNjZXNzaWJsZU5hbWUgPSBoYXNfYWNjZXNzaWJsZV9uYW1lX2RlZmF1bHQ7XG4gICAgbWF0Y2hlc19kZWZhdWx0LmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzX2RlZmF1bHQ7XG4gICAgbWF0Y2hlc19kZWZhdWx0LmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICBtYXRjaGVzX2RlZmF1bHQuZXhwbGljaXRSb2xlID0gZXhwbGljaXRfcm9sZV9kZWZhdWx0O1xuICAgIG1hdGNoZXNfZGVmYXVsdC5mcm9tRGVmaW5pdGlvbiA9IGZyb21fZGVmaW5pdGlvbl9kZWZhdWx0O1xuICAgIG1hdGNoZXNfZGVmYXVsdC5mcm9tRnVuY3Rpb24gPSBmcm9tX2Z1bmN0aW9uX2RlZmF1bHQ7XG4gICAgbWF0Y2hlc19kZWZhdWx0LmZyb21QcmltYXRpdmUgPSBmcm9tX3ByaW1hdGl2ZV9kZWZhdWx0O1xuICAgIG1hdGNoZXNfZGVmYXVsdC5pbXBsaWNpdFJvbGUgPSBpbXBsaWNpdF9yb2xlX2RlZmF1bHQyO1xuICAgIG1hdGNoZXNfZGVmYXVsdC5ub2RlTmFtZSA9IG5vZGVfbmFtZV9kZWZhdWx0O1xuICAgIG1hdGNoZXNfZGVmYXVsdC5wcm9wZXJ0aWVzID0gcHJvcGVydGllc19kZWZhdWx0O1xuICAgIG1hdGNoZXNfZGVmYXVsdC5zZW1hbnRpY1JvbGUgPSBzZW1hbnRpY19yb2xlX2RlZmF1bHQ7XG4gICAgdmFyIG1hdGNoZXNfZGVmYXVsdDIgPSBtYXRjaGVzX2RlZmF1bHQ7XG4gICAgZnVuY3Rpb24gZ2V0RWxlbWVudFNwZWModk5vZGUpIHtcbiAgICAgIHZhciBfcmVmMjkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LCBfcmVmMjkkbm9NYXRjaEFjY2Vzc2kgPSBfcmVmMjkubm9NYXRjaEFjY2Vzc2libGVOYW1lLCBub01hdGNoQWNjZXNzaWJsZU5hbWUgPSBfcmVmMjkkbm9NYXRjaEFjY2Vzc2kgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjI5JG5vTWF0Y2hBY2Nlc3NpO1xuICAgICAgdmFyIHN0YW5kYXJkID0gc3RhbmRhcmRzX2RlZmF1bHQuaHRtbEVsbXNbdk5vZGUucHJvcHMubm9kZU5hbWVdO1xuICAgICAgaWYgKCFzdGFuZGFyZCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICBpZiAoIXN0YW5kYXJkLnZhcmlhbnQpIHtcbiAgICAgICAgcmV0dXJuIHN0YW5kYXJkO1xuICAgICAgfVxuICAgICAgdmFyIHZhcmlhbnQgPSBzdGFuZGFyZC52YXJpYW50LCBzcGVjID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHN0YW5kYXJkLCBfZXhjbHVkZWQ0KTtcbiAgICAgIGZvciAodmFyIHZhcmlhbnROYW1lIGluIHZhcmlhbnQpIHtcbiAgICAgICAgaWYgKCF2YXJpYW50Lmhhc093blByb3BlcnR5KHZhcmlhbnROYW1lKSB8fCB2YXJpYW50TmFtZSA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF92YXJpYW50JHZhcmlhbnROYW1lID0gdmFyaWFudFt2YXJpYW50TmFtZV0sIG1hdGNoZXM0ID0gX3ZhcmlhbnQkdmFyaWFudE5hbWUubWF0Y2hlcywgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3ZhcmlhbnQkdmFyaWFudE5hbWUsIF9leGNsdWRlZDUpO1xuICAgICAgICB2YXIgbWF0Y2hQcm9wZXJ0aWVzID0gQXJyYXkuaXNBcnJheShtYXRjaGVzNCkgPyBtYXRjaGVzNCA6IFsgbWF0Y2hlczQgXTtcbiAgICAgICAgZm9yICh2YXIgX2kxMCA9IDA7IF9pMTAgPCBtYXRjaFByb3BlcnRpZXMubGVuZ3RoICYmIG5vTWF0Y2hBY2Nlc3NpYmxlTmFtZTsgX2kxMCsrKSB7XG4gICAgICAgICAgaWYgKG1hdGNoUHJvcGVydGllc1tfaTEwXS5oYXNPd25Qcm9wZXJ0eSgnaGFzQWNjZXNzaWJsZU5hbWUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YW5kYXJkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hlc19kZWZhdWx0Mih2Tm9kZSwgbWF0Y2hlczQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgc3BlY1twcm9wTmFtZV0gPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfcHJvcE5hbWUgaW4gdmFyaWFudFsnZGVmYXVsdCddKSB7XG4gICAgICAgIGlmICh2YXJpYW50WydkZWZhdWx0J10uaGFzT3duUHJvcGVydHkoX3Byb3BOYW1lKSAmJiB0eXBlb2Ygc3BlY1tfcHJvcE5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNwZWNbX3Byb3BOYW1lXSA9IHZhcmlhbnRbJ2RlZmF1bHQnXVtfcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3BlYztcbiAgICB9XG4gICAgdmFyIGdldF9lbGVtZW50X3NwZWNfZGVmYXVsdCA9IGdldEVsZW1lbnRTcGVjO1xuICAgIGZ1bmN0aW9uIGltcGxpY2l0Um9sZTIobm9kZSkge1xuICAgICAgdmFyIF9yZWYzMCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sIGNocm9taXVtID0gX3JlZjMwLmNocm9taXVtO1xuICAgICAgdmFyIHZOb2RlID0gbm9kZSBpbnN0YW5jZW9mIGFic3RyYWN0X3ZpcnR1YWxfbm9kZV9kZWZhdWx0ID8gbm9kZSA6IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgbm9kZSA9IHZOb2RlLmFjdHVhbE5vZGU7XG4gICAgICBpZiAoIXZOb2RlKSB7XG4gICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignQ2Fubm90IGdldCBpbXBsaWNpdCByb2xlIG9mIGEgbm9kZSBvdXRzaWRlIHRoZSBjdXJyZW50IHNjb3BlLicpO1xuICAgICAgfVxuICAgICAgdmFyIG5vZGVOYW1lMiA9IHZOb2RlLnByb3BzLm5vZGVOYW1lO1xuICAgICAgdmFyIHJvbGUgPSBpbXBsaWNpdF9odG1sX3JvbGVzX2RlZmF1bHRbbm9kZU5hbWUyXTtcbiAgICAgIGlmICghcm9sZSAmJiBjaHJvbWl1bSkge1xuICAgICAgICB2YXIgX2dldF9lbGVtZW50X3NwZWNfZGVmID0gZ2V0X2VsZW1lbnRfc3BlY19kZWZhdWx0KHZOb2RlKSwgY2hyb21pdW1Sb2xlID0gX2dldF9lbGVtZW50X3NwZWNfZGVmLmNocm9taXVtUm9sZTtcbiAgICAgICAgcmV0dXJuIGNocm9taXVtUm9sZSB8fCBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiByb2xlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiByb2xlKHZOb2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb2xlIHx8IG51bGw7XG4gICAgfVxuICAgIHZhciBpbXBsaWNpdF9yb2xlX2RlZmF1bHQgPSBpbXBsaWNpdFJvbGUyO1xuICAgIHZhciBpbmhlcml0c1ByZXNlbnRhdGlvbkNoYWluID0ge1xuICAgICAgdGQ6IFsgJ3RyJyBdLFxuICAgICAgdGg6IFsgJ3RyJyBdLFxuICAgICAgdHI6IFsgJ3RoZWFkJywgJ3Rib2R5JywgJ3Rmb290JywgJ3RhYmxlJyBdLFxuICAgICAgdGhlYWQ6IFsgJ3RhYmxlJyBdLFxuICAgICAgdGJvZHk6IFsgJ3RhYmxlJyBdLFxuICAgICAgdGZvb3Q6IFsgJ3RhYmxlJyBdLFxuICAgICAgbGk6IFsgJ29sJywgJ3VsJyBdLFxuICAgICAgZHQ6IFsgJ2RsJywgJ2RpdicgXSxcbiAgICAgIGRkOiBbICdkbCcsICdkaXYnIF0sXG4gICAgICBkaXY6IFsgJ2RsJyBdXG4gICAgfTtcbiAgICBmdW5jdGlvbiBnZXRJbmhlcml0ZWRSb2xlKHZOb2RlLCBleHBsaWNpdFJvbGVPcHRpb25zKSB7XG4gICAgICB2YXIgcGFyZW50Tm9kZU5hbWVzID0gaW5oZXJpdHNQcmVzZW50YXRpb25DaGFpblt2Tm9kZS5wcm9wcy5ub2RlTmFtZV07XG4gICAgICBpZiAoIXBhcmVudE5vZGVOYW1lcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICghdk5vZGUucGFyZW50KSB7XG4gICAgICAgIGlmICghdk5vZGUuYWN0dWFsTm9kZSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignQ2Fubm90IGRldGVybWluZSByb2xlIHByZXNlbnRhdGlvbmFsIGluaGVyaXRhbmNlIG9mIGEgcmVxdWlyZWQgcGFyZW50IG91dHNpZGUgdGhlIGN1cnJlbnQgc2NvcGUuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcmVudE5vZGVOYW1lcy5pbmNsdWRlcyh2Tm9kZS5wYXJlbnQucHJvcHMubm9kZU5hbWUpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHBhcmVudFJvbGUgPSBnZXRfZXhwbGljaXRfcm9sZV9kZWZhdWx0KHZOb2RlLnBhcmVudCwgZXhwbGljaXRSb2xlT3B0aW9ucyk7XG4gICAgICBpZiAoWyAnbm9uZScsICdwcmVzZW50YXRpb24nIF0uaW5jbHVkZXMocGFyZW50Um9sZSkgJiYgIWhhc0NvbmZsaWN0UmVzb2x1dGlvbih2Tm9kZS5wYXJlbnQpKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnRSb2xlO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudFJvbGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gZ2V0SW5oZXJpdGVkUm9sZSh2Tm9kZS5wYXJlbnQsIGV4cGxpY2l0Um9sZU9wdGlvbnMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNvbHZlSW1wbGljaXRSb2xlKHZOb2RlLCBfcmVmMzEpIHtcbiAgICAgIHZhciBjaHJvbWl1bSA9IF9yZWYzMS5jaHJvbWl1bSwgZXhwbGljaXRSb2xlT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMzEsIF9leGNsdWRlZDYpO1xuICAgICAgdmFyIGltcGxpY2l0Um9sZTMgPSBpbXBsaWNpdF9yb2xlX2RlZmF1bHQodk5vZGUsIHtcbiAgICAgICAgY2hyb21pdW06IGNocm9taXVtXG4gICAgICB9KTtcbiAgICAgIGlmICghaW1wbGljaXRSb2xlMykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBwcmVzZW50YXRpb25hbFJvbGUgPSBnZXRJbmhlcml0ZWRSb2xlKHZOb2RlLCBleHBsaWNpdFJvbGVPcHRpb25zKTtcbiAgICAgIGlmIChwcmVzZW50YXRpb25hbFJvbGUpIHtcbiAgICAgICAgcmV0dXJuIHByZXNlbnRhdGlvbmFsUm9sZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbXBsaWNpdFJvbGUzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNDb25mbGljdFJlc29sdXRpb24odk5vZGUpIHtcbiAgICAgIHZhciBoYXNHbG9iYWxBcmlhID0gZ2V0X2dsb2JhbF9hcmlhX2F0dHJzX2RlZmF1bHQoKS5zb21lKGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgcmV0dXJuIHZOb2RlLmhhc0F0dHIoYXR0cik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBoYXNHbG9iYWxBcmlhIHx8IF9pc0ZvY3VzYWJsZSh2Tm9kZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc29sdmVSb2xlKG5vZGUpIHtcbiAgICAgIHZhciBfcmVmMzIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIG5vSW1wbGljaXQgPSBfcmVmMzIubm9JbXBsaWNpdCwgcm9sZU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjMyLCBfZXhjbHVkZWQ3KTtcbiAgICAgIHZhciBfbm9kZUxvb2t1cDEwID0gX25vZGVMb29rdXAobm9kZSksIHZOb2RlID0gX25vZGVMb29rdXAxMC52Tm9kZTtcbiAgICAgIGlmICh2Tm9kZS5wcm9wcy5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBleHBsaWNpdFJvbGUyID0gZ2V0X2V4cGxpY2l0X3JvbGVfZGVmYXVsdCh2Tm9kZSwgcm9sZU9wdGlvbnMpO1xuICAgICAgaWYgKCFleHBsaWNpdFJvbGUyKSB7XG4gICAgICAgIHJldHVybiBub0ltcGxpY2l0ID8gbnVsbCA6IHJlc29sdmVJbXBsaWNpdFJvbGUodk5vZGUsIHJvbGVPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGlmICghWyAncHJlc2VudGF0aW9uJywgJ25vbmUnIF0uaW5jbHVkZXMoZXhwbGljaXRSb2xlMikpIHtcbiAgICAgICAgcmV0dXJuIGV4cGxpY2l0Um9sZTI7XG4gICAgICB9XG4gICAgICBpZiAoaGFzQ29uZmxpY3RSZXNvbHV0aW9uKHZOb2RlKSkge1xuICAgICAgICByZXR1cm4gbm9JbXBsaWNpdCA/IG51bGwgOiByZXNvbHZlSW1wbGljaXRSb2xlKHZOb2RlLCByb2xlT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXhwbGljaXRSb2xlMjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Um9sZShub2RlKSB7XG4gICAgICB2YXIgX3JlZjMzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBub1ByZXNlbnRhdGlvbmFsID0gX3JlZjMzLm5vUHJlc2VudGF0aW9uYWwsIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjMzLCBfZXhjbHVkZWQ4KTtcbiAgICAgIHZhciByb2xlID0gcmVzb2x2ZVJvbGUobm9kZSwgb3B0aW9ucyk7XG4gICAgICBpZiAobm9QcmVzZW50YXRpb25hbCAmJiBbICdwcmVzZW50YXRpb24nLCAnbm9uZScgXS5pbmNsdWRlcyhyb2xlKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb2xlO1xuICAgIH1cbiAgICB2YXIgZ2V0X3JvbGVfZGVmYXVsdCA9IGdldFJvbGU7XG4gICAgdmFyIGFsd2F5c1RpdGxlRWxlbWVudHMgPSBbICdpZnJhbWUnIF07XG4gICAgZnVuY3Rpb24gdGl0bGVUZXh0KG5vZGUpIHtcbiAgICAgIHZhciBfbm9kZUxvb2t1cDExID0gX25vZGVMb29rdXAobm9kZSksIHZOb2RlID0gX25vZGVMb29rdXAxMS52Tm9kZTtcbiAgICAgIGlmICh2Tm9kZS5wcm9wcy5ub2RlVHlwZSAhPT0gMSB8fCAhbm9kZS5oYXNBdHRyKCd0aXRsZScpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmICghbWF0Y2hlc19kZWZhdWx0KHZOb2RlLCBhbHdheXNUaXRsZUVsZW1lbnRzKSAmJiBbICdub25lJywgJ3ByZXNlbnRhdGlvbicgXS5pbmNsdWRlcyhnZXRfcm9sZV9kZWZhdWx0KHZOb2RlKSkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZOb2RlLmF0dHIoJ3RpdGxlJyk7XG4gICAgfVxuICAgIHZhciB0aXRsZV90ZXh0X2RlZmF1bHQgPSB0aXRsZVRleHQ7XG4gICAgZnVuY3Rpb24gbmFtZWRGcm9tQ29udGVudHModk5vZGUpIHtcbiAgICAgIHZhciBfcmVmMzQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LCBzdHJpY3QgPSBfcmVmMzQuc3RyaWN0O1xuICAgICAgdk5vZGUgPSB2Tm9kZSBpbnN0YW5jZW9mIGFic3RyYWN0X3ZpcnR1YWxfbm9kZV9kZWZhdWx0ID8gdk5vZGUgOiBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdCh2Tm9kZSk7XG4gICAgICBpZiAodk5vZGUucHJvcHMubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KHZOb2RlKTtcbiAgICAgIHZhciByb2xlRGVmID0gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYVJvbGVzW3JvbGVdO1xuICAgICAgaWYgKHJvbGVEZWYgJiYgcm9sZURlZi5uYW1lRnJvbUNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhcm9sZURlZiB8fCBbICdwcmVzZW50YXRpb24nLCAnbm9uZScgXS5pbmNsdWRlcyhyb2xlKTtcbiAgICB9XG4gICAgdmFyIG5hbWVkX2Zyb21fY29udGVudHNfZGVmYXVsdCA9IG5hbWVkRnJvbUNvbnRlbnRzO1xuICAgIGZ1bmN0aW9uIGdldE93bmVkVmlydHVhbCh2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGFjdHVhbE5vZGUgPSB2aXJ0dWFsTm9kZS5hY3R1YWxOb2RlLCBjaGlsZHJlbiA9IHZpcnR1YWxOb2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldE93bmVkVmlydHVhbCByZXF1aXJlcyBhIHZpcnR1YWwgbm9kZScpO1xuICAgICAgfVxuICAgICAgaWYgKHZpcnR1YWxOb2RlLmhhc0F0dHIoJ2FyaWEtb3ducycpKSB7XG4gICAgICAgIHZhciBvd25zID0gaWRyZWZzX2RlZmF1bHQoYWN0dWFsTm9kZSwgJ2FyaWEtb3ducycpLmZpbHRlcihmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuICEhZWxlbWVudDtcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gYXhlLnV0aWxzLmdldE5vZGVGcm9tVHJlZShlbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkcmVuKSwgX3RvQ29uc3VtYWJsZUFycmF5KG93bnMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfdG9Db25zdW1hYmxlQXJyYXkoY2hpbGRyZW4pO1xuICAgIH1cbiAgICB2YXIgZ2V0X293bmVkX3ZpcnR1YWxfZGVmYXVsdCA9IGdldE93bmVkVmlydHVhbDtcbiAgICB2YXIgdW5zdXBwb3J0ZWRfZGVmYXVsdCA9IHtcbiAgICAgIGFjY2Vzc2libGVOYW1lRnJvbUZpZWxkVmFsdWU6IFsgJ3Byb2dyZXNzYmFyJyBdXG4gICAgfTtcbiAgICBmdW5jdGlvbiBfaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzKHZOb2RlKSB7XG4gICAgICB2Tm9kZSA9IF9ub2RlTG9va3VwKHZOb2RlKS52Tm9kZTtcbiAgICAgIHJldHVybiBpc1Zpc2libGVUb1NjcmVlblJlYWRlcnNWaXJ0dWFsKHZOb2RlKTtcbiAgICB9XG4gICAgdmFyIGlzVmlzaWJsZVRvU2NyZWVuUmVhZGVyc1ZpcnR1YWwgPSBtZW1vaXplX2RlZmF1bHQoZnVuY3Rpb24gaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzTWVtb2l6ZWQodk5vZGUsIGlzQW5jZXN0b3IpIHtcbiAgICAgIGlmIChhcmlhSGlkZGVuKHZOb2RlKSB8fCBfaXNJbmVydCh2Tm9kZSwge1xuICAgICAgICBza2lwQW5jZXN0b3JzOiB0cnVlLFxuICAgICAgICBpc0FuY2VzdG9yOiBpc0FuY2VzdG9yXG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodk5vZGUuYWN0dWFsTm9kZSAmJiB2Tm9kZS5wcm9wcy5ub2RlTmFtZSA9PT0gJ2FyZWEnKSB7XG4gICAgICAgIHJldHVybiAhYXJlYUhpZGRlbih2Tm9kZSwgaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzVmlydHVhbCk7XG4gICAgICB9XG4gICAgICBpZiAoX2lzSGlkZGVuRm9yRXZlcnlvbmUodk5vZGUsIHtcbiAgICAgICAgc2tpcEFuY2VzdG9yczogdHJ1ZSxcbiAgICAgICAgaXNBbmNlc3RvcjogaXNBbmNlc3RvclxuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF2Tm9kZS5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzVmlydHVhbCh2Tm9kZS5wYXJlbnQsIHRydWUpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIHZpc2libGVWaXJ0dWFsKGVsZW1lbnQsIHNjcmVlblJlYWRlciwgbm9SZWN1cnNpbmcpIHtcbiAgICAgIHZhciBfbm9kZUxvb2t1cDEyID0gX25vZGVMb29rdXAoZWxlbWVudCksIHZOb2RlID0gX25vZGVMb29rdXAxMi52Tm9kZTtcbiAgICAgIHZhciB2aXNpYmxlTWV0aG9kID0gc2NyZWVuUmVhZGVyID8gX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVycyA6IF9pc1Zpc2libGVPblNjcmVlbjtcbiAgICAgIHZhciB2aXNpYmxlMiA9ICFlbGVtZW50LmFjdHVhbE5vZGUgfHwgZWxlbWVudC5hY3R1YWxOb2RlICYmIHZpc2libGVNZXRob2QoZWxlbWVudCk7XG4gICAgICB2YXIgcmVzdWx0ID0gdk5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHZhciBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcywgbm9kZVR5cGUgPSBfY2hpbGQkcHJvcHMubm9kZVR5cGUsIG5vZGVWYWx1ZSA9IF9jaGlsZCRwcm9wcy5ub2RlVmFsdWU7XG4gICAgICAgIGlmIChub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgIGlmIChub2RlVmFsdWUgJiYgdmlzaWJsZTIpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFub1JlY3Vyc2luZykge1xuICAgICAgICAgIHJldHVybiB2aXNpYmxlVmlydHVhbChjaGlsZCwgc2NyZWVuUmVhZGVyKTtcbiAgICAgICAgfVxuICAgICAgfSkuam9pbignJyk7XG4gICAgICByZXR1cm4gc2FuaXRpemVfZGVmYXVsdChyZXN1bHQpO1xuICAgIH1cbiAgICB2YXIgdmlzaWJsZV92aXJ0dWFsX2RlZmF1bHQgPSB2aXNpYmxlVmlydHVhbDtcbiAgICB2YXIgbm9uVGV4dElucHV0VHlwZXMgPSBbICdidXR0b24nLCAnY2hlY2tib3gnLCAnY29sb3InLCAnZmlsZScsICdoaWRkZW4nLCAnaW1hZ2UnLCAncGFzc3dvcmQnLCAncmFkaW8nLCAncmVzZXQnLCAnc3VibWl0JyBdO1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlVGV4dGJveChub2RlKSB7XG4gICAgICBub2RlID0gbm9kZSBpbnN0YW5jZW9mIGFic3RyYWN0X3ZpcnR1YWxfbm9kZV9kZWZhdWx0ID8gbm9kZSA6IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgdmFyIG5vZGVOYW1lMiA9IG5vZGUucHJvcHMubm9kZU5hbWU7XG4gICAgICByZXR1cm4gbm9kZU5hbWUyID09PSAndGV4dGFyZWEnIHx8IG5vZGVOYW1lMiA9PT0gJ2lucHV0JyAmJiAhbm9uVGV4dElucHV0VHlwZXMuaW5jbHVkZXMoKG5vZGUuYXR0cigndHlwZScpIHx8ICcnKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG4gICAgdmFyIGlzX25hdGl2ZV90ZXh0Ym94X2RlZmF1bHQgPSBpc05hdGl2ZVRleHRib3g7XG4gICAgZnVuY3Rpb24gaXNOYXRpdmVTZWxlY3Qobm9kZSkge1xuICAgICAgbm9kZSA9IG5vZGUgaW5zdGFuY2VvZiBhYnN0cmFjdF92aXJ0dWFsX25vZGVfZGVmYXVsdCA/IG5vZGUgOiBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChub2RlKTtcbiAgICAgIHZhciBub2RlTmFtZTIgPSBub2RlLnByb3BzLm5vZGVOYW1lO1xuICAgICAgcmV0dXJuIG5vZGVOYW1lMiA9PT0gJ3NlbGVjdCc7XG4gICAgfVxuICAgIHZhciBpc19uYXRpdmVfc2VsZWN0X2RlZmF1bHQgPSBpc05hdGl2ZVNlbGVjdDtcbiAgICBmdW5jdGlvbiBpc0FyaWFUZXh0Ym94KG5vZGUpIHtcbiAgICAgIHZhciByb2xlID0gZ2V0X2V4cGxpY2l0X3JvbGVfZGVmYXVsdChub2RlKTtcbiAgICAgIHJldHVybiByb2xlID09PSAndGV4dGJveCc7XG4gICAgfVxuICAgIHZhciBpc19hcmlhX3RleHRib3hfZGVmYXVsdCA9IGlzQXJpYVRleHRib3g7XG4gICAgZnVuY3Rpb24gaXNBcmlhTGlzdGJveChub2RlKSB7XG4gICAgICB2YXIgcm9sZSA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQobm9kZSk7XG4gICAgICByZXR1cm4gcm9sZSA9PT0gJ2xpc3Rib3gnO1xuICAgIH1cbiAgICB2YXIgaXNfYXJpYV9saXN0Ym94X2RlZmF1bHQgPSBpc0FyaWFMaXN0Ym94O1xuICAgIGZ1bmN0aW9uIGlzQXJpYUNvbWJvYm94KG5vZGUpIHtcbiAgICAgIHZhciByb2xlID0gZ2V0X2V4cGxpY2l0X3JvbGVfZGVmYXVsdChub2RlKTtcbiAgICAgIHJldHVybiByb2xlID09PSAnY29tYm9ib3gnO1xuICAgIH1cbiAgICB2YXIgaXNfYXJpYV9jb21ib2JveF9kZWZhdWx0ID0gaXNBcmlhQ29tYm9ib3g7XG4gICAgdmFyIHJhbmdlUm9sZXMgPSBbICdwcm9ncmVzc2JhcicsICdzY3JvbGxiYXInLCAnc2xpZGVyJywgJ3NwaW5idXR0b24nIF07XG4gICAgZnVuY3Rpb24gaXNBcmlhUmFuZ2Uobm9kZSkge1xuICAgICAgdmFyIHJvbGUgPSBnZXRfZXhwbGljaXRfcm9sZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgcmV0dXJuIHJhbmdlUm9sZXMuaW5jbHVkZXMocm9sZSk7XG4gICAgfVxuICAgIHZhciBpc19hcmlhX3JhbmdlX2RlZmF1bHQgPSBpc0FyaWFSYW5nZTtcbiAgICB2YXIgY29udHJvbFZhbHVlUm9sZXMgPSBbICd0ZXh0Ym94JywgJ3Byb2dyZXNzYmFyJywgJ3Njcm9sbGJhcicsICdzbGlkZXInLCAnc3BpbmJ1dHRvbicsICdjb21ib2JveCcsICdsaXN0Ym94JyBdO1xuICAgIHZhciBfZm9ybUNvbnRyb2xWYWx1ZU1ldGhvZHMgPSB7XG4gICAgICBuYXRpdmVUZXh0Ym94VmFsdWU6IG5hdGl2ZVRleHRib3hWYWx1ZSxcbiAgICAgIG5hdGl2ZVNlbGVjdFZhbHVlOiBuYXRpdmVTZWxlY3RWYWx1ZSxcbiAgICAgIGFyaWFUZXh0Ym94VmFsdWU6IGFyaWFUZXh0Ym94VmFsdWUsXG4gICAgICBhcmlhTGlzdGJveFZhbHVlOiBhcmlhTGlzdGJveFZhbHVlLFxuICAgICAgYXJpYUNvbWJvYm94VmFsdWU6IGFyaWFDb21ib2JveFZhbHVlLFxuICAgICAgYXJpYVJhbmdlVmFsdWU6IGFyaWFSYW5nZVZhbHVlXG4gICAgfTtcbiAgICBmdW5jdGlvbiBmb3JtQ29udHJvbFZhbHVlKHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgYWN0dWFsTm9kZSA9IHZpcnR1YWxOb2RlLmFjdHVhbE5vZGU7XG4gICAgICB2YXIgdW5zdXBwb3J0ZWRSb2xlcyA9IHVuc3VwcG9ydGVkX2RlZmF1bHQuYWNjZXNzaWJsZU5hbWVGcm9tRmllbGRWYWx1ZSB8fCBbXTtcbiAgICAgIHZhciByb2xlID0gZ2V0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSk7XG4gICAgICBpZiAoY29udGV4dC5zdGFydE5vZGUgPT09IHZpcnR1YWxOb2RlIHx8ICFjb250cm9sVmFsdWVSb2xlcy5pbmNsdWRlcyhyb2xlKSB8fCB1bnN1cHBvcnRlZFJvbGVzLmluY2x1ZGVzKHJvbGUpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZU1ldGhvZHMgPSBPYmplY3Qua2V5cyhfZm9ybUNvbnRyb2xWYWx1ZU1ldGhvZHMpLm1hcChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBfZm9ybUNvbnRyb2xWYWx1ZU1ldGhvZHNbbmFtZV07XG4gICAgICB9KTtcbiAgICAgIHZhciB2YWx1ZVN0cmluZyA9IHZhbHVlTWV0aG9kcy5yZWR1Y2UoZnVuY3Rpb24oYWNjTmFtZSwgc3RlcCkge1xuICAgICAgICByZXR1cm4gYWNjTmFtZSB8fCBzdGVwKHZpcnR1YWxOb2RlLCBjb250ZXh0KTtcbiAgICAgIH0sICcnKTtcbiAgICAgIGlmIChjb250ZXh0LmRlYnVnKSB7XG4gICAgICAgIGxvZ19kZWZhdWx0KHZhbHVlU3RyaW5nIHx8ICd7ZW1wdHktdmFsdWV9JywgYWN0dWFsTm9kZSwgY29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVTdHJpbmc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5hdGl2ZVRleHRib3hWYWx1ZShub2RlKSB7XG4gICAgICB2YXIgX25vZGVMb29rdXAxMyA9IF9ub2RlTG9va3VwKG5vZGUpLCB2Tm9kZSA9IF9ub2RlTG9va3VwMTMudk5vZGU7XG4gICAgICBpZiAoaXNfbmF0aXZlX3RleHRib3hfZGVmYXVsdCh2Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHZOb2RlLnByb3BzLnZhbHVlIHx8ICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBuYXRpdmVTZWxlY3RWYWx1ZShub2RlKSB7XG4gICAgICB2YXIgX25vZGVMb29rdXAxNCA9IF9ub2RlTG9va3VwKG5vZGUpLCB2Tm9kZSA9IF9ub2RlTG9va3VwMTQudk5vZGU7XG4gICAgICBpZiAoIWlzX25hdGl2ZV9zZWxlY3RfZGVmYXVsdCh2Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgdmFyIG9wdGlvbnMgPSBxdWVyeV9zZWxlY3Rvcl9hbGxfZGVmYXVsdCh2Tm9kZSwgJ29wdGlvbicpO1xuICAgICAgdmFyIHNlbGVjdGVkT3B0aW9ucyA9IG9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICByZXR1cm4gb3B0aW9uLnByb3BzLnNlbGVjdGVkO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXNlbGVjdGVkT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZWN0ZWRPcHRpb25zLnB1c2gob3B0aW9uc1swXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZWN0ZWRPcHRpb25zLm1hcChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZpc2libGVfdmlydHVhbF9kZWZhdWx0KG9wdGlvbik7XG4gICAgICB9KS5qb2luKCcgJykgfHwgJyc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFyaWFUZXh0Ym94VmFsdWUobm9kZSkge1xuICAgICAgdmFyIF9ub2RlTG9va3VwMTUgPSBfbm9kZUxvb2t1cChub2RlKSwgdk5vZGUgPSBfbm9kZUxvb2t1cDE1LnZOb2RlLCBkb21Ob2RlID0gX25vZGVMb29rdXAxNS5kb21Ob2RlO1xuICAgICAgaWYgKCFpc19hcmlhX3RleHRib3hfZGVmYXVsdCh2Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgaWYgKCFkb21Ob2RlIHx8IGRvbU5vZGUgJiYgIV9pc0hpZGRlbkZvckV2ZXJ5b25lKGRvbU5vZGUpKSB7XG4gICAgICAgIHJldHVybiB2aXNpYmxlX3ZpcnR1YWxfZGVmYXVsdCh2Tm9kZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZG9tTm9kZS50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXJpYUxpc3Rib3hWYWx1ZShub2RlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgX25vZGVMb29rdXAxNiA9IF9ub2RlTG9va3VwKG5vZGUpLCB2Tm9kZSA9IF9ub2RlTG9va3VwMTYudk5vZGU7XG4gICAgICBpZiAoIWlzX2FyaWFfbGlzdGJveF9kZWZhdWx0KHZOb2RlKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBnZXRfb3duZWRfdmlydHVhbF9kZWZhdWx0KHZOb2RlKS5maWx0ZXIoZnVuY3Rpb24ob3duZWQpIHtcbiAgICAgICAgcmV0dXJuIGdldF9yb2xlX2RlZmF1bHQob3duZWQpID09PSAnb3B0aW9uJyAmJiBvd25lZC5hdHRyKCdhcmlhLXNlbGVjdGVkJykgPT09ICd0cnVlJztcbiAgICAgIH0pO1xuICAgICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2FjY2Vzc2libGVUZXh0VmlydHVhbChzZWxlY3RlZFswXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFyaWFDb21ib2JveFZhbHVlKG5vZGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBfbm9kZUxvb2t1cDE3ID0gX25vZGVMb29rdXAobm9kZSksIHZOb2RlID0gX25vZGVMb29rdXAxNy52Tm9kZTtcbiAgICAgIGlmICghaXNfYXJpYV9jb21ib2JveF9kZWZhdWx0KHZOb2RlKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgbGlzdGJveCA9IGdldF9vd25lZF92aXJ0dWFsX2RlZmF1bHQodk5vZGUpLmZpbHRlcihmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgcmV0dXJuIGdldF9yb2xlX2RlZmF1bHQoZWxtKSA9PT0gJ2xpc3Rib3gnO1xuICAgICAgfSlbMF07XG4gICAgICByZXR1cm4gbGlzdGJveCA/IGFyaWFMaXN0Ym94VmFsdWUobGlzdGJveCwgY29udGV4dCkgOiAnJztcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJpYVJhbmdlVmFsdWUobm9kZSkge1xuICAgICAgdmFyIF9ub2RlTG9va3VwMTggPSBfbm9kZUxvb2t1cChub2RlKSwgdk5vZGUgPSBfbm9kZUxvb2t1cDE4LnZOb2RlO1xuICAgICAgaWYgKCFpc19hcmlhX3JhbmdlX2RlZmF1bHQodk5vZGUpIHx8ICF2Tm9kZS5oYXNBdHRyKCdhcmlhLXZhbHVlbm93JykpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlTm93ID0gK3ZOb2RlLmF0dHIoJ2FyaWEtdmFsdWVub3cnKTtcbiAgICAgIHJldHVybiAhaXNOYU4odmFsdWVOb3cpID8gU3RyaW5nKHZhbHVlTm93KSA6ICcwJztcbiAgICB9XG4gICAgdmFyIGZvcm1fY29udHJvbF92YWx1ZV9kZWZhdWx0ID0gZm9ybUNvbnRyb2xWYWx1ZTtcbiAgICBmdW5jdGlvbiBzdWJ0cmVlVGV4dCh2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGFscmVhZHlQcm9jZXNzZWQyID0gX2FjY2Vzc2libGVUZXh0VmlydHVhbC5hbHJlYWR5UHJvY2Vzc2VkO1xuICAgICAgY29udGV4dC5zdGFydE5vZGUgPSBjb250ZXh0LnN0YXJ0Tm9kZSB8fCB2aXJ0dWFsTm9kZTtcbiAgICAgIHZhciBfY29udGV4dCA9IGNvbnRleHQsIHN0cmljdCA9IF9jb250ZXh0LnN0cmljdCwgaW5Db250cm9sQ29udGV4dCA9IF9jb250ZXh0LmluQ29udHJvbENvbnRleHQsIGluTGFiZWxsZWRCeUNvbnRleHQgPSBfY29udGV4dC5pbkxhYmVsbGVkQnlDb250ZXh0O1xuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlKTtcbiAgICAgIHZhciBfZ2V0X2VsZW1lbnRfc3BlY19kZWYyID0gZ2V0X2VsZW1lbnRfc3BlY19kZWZhdWx0KHZpcnR1YWxOb2RlLCB7XG4gICAgICAgIG5vTWF0Y2hBY2Nlc3NpYmxlTmFtZTogdHJ1ZVxuICAgICAgfSksIGNvbnRlbnRUeXBlcyA9IF9nZXRfZWxlbWVudF9zcGVjX2RlZjIuY29udGVudFR5cGVzO1xuICAgICAgaWYgKGFscmVhZHlQcm9jZXNzZWQyKHZpcnR1YWxOb2RlLCBjb250ZXh0KSB8fCB2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlVHlwZSAhPT0gMSB8fCBjb250ZW50VHlwZXMgIT09IG51bGwgJiYgY29udGVudFR5cGVzICE9PSB2b2lkIDAgJiYgY29udGVudFR5cGVzLmluY2x1ZGVzKCdlbWJlZGRlZCcpIHx8IGNvbnRyb2xWYWx1ZVJvbGVzLmluY2x1ZGVzKHJvbGUpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmICghY29udGV4dC5zdWJ0cmVlRGVzY2VuZGFudCAmJiAhY29udGV4dC5pbkxhYmVsbGVkQnlDb250ZXh0ICYmICFuYW1lZF9mcm9tX2NvbnRlbnRzX2RlZmF1bHQodmlydHVhbE5vZGUsIHtcbiAgICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICAgIH0pKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaWN0KSB7XG4gICAgICAgIHZhciBzdWJ0cmVlRGVzY2VuZGFudCA9ICFpbkNvbnRyb2xDb250ZXh0ICYmICFpbkxhYmVsbGVkQnlDb250ZXh0O1xuICAgICAgICBjb250ZXh0ID0gX2V4dGVuZHMoe1xuICAgICAgICAgIHN1YnRyZWVEZXNjZW5kYW50OiBzdWJ0cmVlRGVzY2VuZGFudFxuICAgICAgICB9LCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXRfb3duZWRfdmlydHVhbF9kZWZhdWx0KHZpcnR1YWxOb2RlKS5yZWR1Y2UoZnVuY3Rpb24oY29udGVudFRleHQsIGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBhcHBlbmRBY2Nlc3NpYmxlVGV4dChjb250ZW50VGV4dCwgY2hpbGQsIGNvbnRleHQpO1xuICAgICAgfSwgJycpO1xuICAgIH1cbiAgICB2YXIgcGhyYXNpbmdFbGVtZW50cyA9IGdldF9lbGVtZW50c19ieV9jb250ZW50X3R5cGVfZGVmYXVsdCgncGhyYXNpbmcnKS5jb25jYXQoWyAnI3RleHQnIF0pO1xuICAgIGZ1bmN0aW9uIGFwcGVuZEFjY2Vzc2libGVUZXh0KGNvbnRlbnRUZXh0LCB2aXJ0dWFsTm9kZSwgY29udGV4dCkge1xuICAgICAgdmFyIG5vZGVOYW1lMiA9IHZpcnR1YWxOb2RlLnByb3BzLm5vZGVOYW1lO1xuICAgICAgdmFyIGNvbnRlbnRUZXh0QWRkID0gX2FjY2Vzc2libGVUZXh0VmlydHVhbCh2aXJ0dWFsTm9kZSwgY29udGV4dCk7XG4gICAgICBpZiAoIWNvbnRlbnRUZXh0QWRkKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50VGV4dDtcbiAgICAgIH1cbiAgICAgIGlmICghcGhyYXNpbmdFbGVtZW50cy5pbmNsdWRlcyhub2RlTmFtZTIpKSB7XG4gICAgICAgIGlmIChjb250ZW50VGV4dEFkZFswXSAhPT0gJyAnKSB7XG4gICAgICAgICAgY29udGVudFRleHRBZGQgKz0gJyAnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50VGV4dCAmJiBjb250ZW50VGV4dFtjb250ZW50VGV4dC5sZW5ndGggLSAxXSAhPT0gJyAnKSB7XG4gICAgICAgICAgY29udGVudFRleHRBZGQgPSAnICcgKyBjb250ZW50VGV4dEFkZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnRUZXh0ICsgY29udGVudFRleHRBZGQ7XG4gICAgfVxuICAgIHZhciBzdWJ0cmVlX3RleHRfZGVmYXVsdCA9IHN1YnRyZWVUZXh0O1xuICAgIGZ1bmN0aW9uIGxhYmVsVGV4dCh2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGFscmVhZHlQcm9jZXNzZWQyID0gX2FjY2Vzc2libGVUZXh0VmlydHVhbC5hbHJlYWR5UHJvY2Vzc2VkO1xuICAgICAgaWYgKGNvbnRleHQuaW5Db250cm9sQ29udGV4dCB8fCBjb250ZXh0LmluTGFiZWxsZWRCeUNvbnRleHQgfHwgYWxyZWFkeVByb2Nlc3NlZDIodmlydHVhbE5vZGUsIGNvbnRleHQpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmICghY29udGV4dC5zdGFydE5vZGUpIHtcbiAgICAgICAgY29udGV4dC5zdGFydE5vZGUgPSB2aXJ0dWFsTm9kZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYWJlbENvbnRleHQgPSBfZXh0ZW5kcyh7XG4gICAgICAgIGluQ29udHJvbENvbnRleHQ6IHRydWVcbiAgICAgIH0sIGNvbnRleHQpO1xuICAgICAgdmFyIGV4cGxpY2l0TGFiZWxzID0gZ2V0RXhwbGljaXRMYWJlbHModmlydHVhbE5vZGUpO1xuICAgICAgdmFyIGltcGxpY2l0TGFiZWwgPSBjbG9zZXN0X2RlZmF1bHQodmlydHVhbE5vZGUsICdsYWJlbCcpO1xuICAgICAgdmFyIGxhYmVscztcbiAgICAgIGlmIChpbXBsaWNpdExhYmVsKSB7XG4gICAgICAgIGxhYmVscyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZXhwbGljaXRMYWJlbHMpLCBbIGltcGxpY2l0TGFiZWwuYWN0dWFsTm9kZSBdKTtcbiAgICAgICAgbGFiZWxzLnNvcnQobm9kZV9zb3J0ZXJfZGVmYXVsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYWJlbHMgPSBleHBsaWNpdExhYmVscztcbiAgICAgIH1cbiAgICAgIHJldHVybiBsYWJlbHMubWFwKGZ1bmN0aW9uKGxhYmVsMykge1xuICAgICAgICByZXR1cm4gYWNjZXNzaWJsZV90ZXh0X2RlZmF1bHQobGFiZWwzLCBsYWJlbENvbnRleHQpO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQgIT09ICcnO1xuICAgICAgfSkuam9pbignICcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRFeHBsaWNpdExhYmVscyh2aXJ0dWFsTm9kZSkge1xuICAgICAgaWYgKCF2aXJ0dWFsTm9kZS5hdHRyKCdpZCcpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghdmlydHVhbE5vZGUuYWN0dWFsTm9kZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgcmVzb2x2ZSBleHBsaWNpdCBsYWJlbCByZWZlcmVuY2UgZm9yIG5vbi1ET00gbm9kZXMnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmaW5kX2VsbXNfaW5fY29udGV4dF9kZWZhdWx0KHtcbiAgICAgICAgZWxtOiAnbGFiZWwnLFxuICAgICAgICBhdHRyOiAnZm9yJyxcbiAgICAgICAgdmFsdWU6IHZpcnR1YWxOb2RlLmF0dHIoJ2lkJyksXG4gICAgICAgIGNvbnRleHQ6IHZpcnR1YWxOb2RlLmFjdHVhbE5vZGVcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgbGFiZWxfdGV4dF9kZWZhdWx0ID0gbGFiZWxUZXh0O1xuICAgIHZhciBkZWZhdWx0QnV0dG9uVmFsdWVzID0ge1xuICAgICAgc3VibWl0OiAnU3VibWl0JyxcbiAgICAgIGltYWdlOiAnU3VibWl0JyxcbiAgICAgIHJlc2V0OiAnUmVzZXQnLFxuICAgICAgYnV0dG9uOiAnJ1xuICAgIH07XG4gICAgdmFyIG5hdGl2ZVRleHRNZXRob2RzID0ge1xuICAgICAgdmFsdWVUZXh0OiBmdW5jdGlvbiB2YWx1ZVRleHQodk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHZOb2RlLnByb3BzLnZhbHVlIHx8ICcnO1xuICAgICAgfSxcbiAgICAgIGJ1dHRvbkRlZmF1bHRUZXh0OiBmdW5jdGlvbiBidXR0b25EZWZhdWx0VGV4dCh2Tm9kZSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdEJ1dHRvblZhbHVlc1t2Tm9kZS5wcm9wcy50eXBlXSB8fCAnJztcbiAgICAgIH0sXG4gICAgICB0YWJsZUNhcHRpb25UZXh0OiBkZXNjZW5kYW50VGV4dC5iaW5kKG51bGwsICdjYXB0aW9uJyksXG4gICAgICBmaWd1cmVUZXh0OiBkZXNjZW5kYW50VGV4dC5iaW5kKG51bGwsICdmaWdjYXB0aW9uJyksXG4gICAgICBzdmdUaXRsZVRleHQ6IGRlc2NlbmRhbnRUZXh0LmJpbmQobnVsbCwgJ3RpdGxlJyksXG4gICAgICBmaWVsZHNldExlZ2VuZFRleHQ6IGRlc2NlbmRhbnRUZXh0LmJpbmQobnVsbCwgJ2xlZ2VuZCcpLFxuICAgICAgYWx0VGV4dDogYXR0clRleHQuYmluZChudWxsLCAnYWx0JyksXG4gICAgICB0YWJsZVN1bW1hcnlUZXh0OiBhdHRyVGV4dC5iaW5kKG51bGwsICdzdW1tYXJ5JyksXG4gICAgICB0aXRsZVRleHQ6IHRpdGxlX3RleHRfZGVmYXVsdCxcbiAgICAgIHN1YnRyZWVUZXh0OiBzdWJ0cmVlX3RleHRfZGVmYXVsdCxcbiAgICAgIGxhYmVsVGV4dDogbGFiZWxfdGV4dF9kZWZhdWx0LFxuICAgICAgc2luZ2xlU3BhY2U6IGZ1bmN0aW9uIHNpbmdsZVNwYWNlKCkge1xuICAgICAgICByZXR1cm4gJyAnO1xuICAgICAgfSxcbiAgICAgIHBsYWNlaG9sZGVyVGV4dDogYXR0clRleHQuYmluZChudWxsLCAncGxhY2Vob2xkZXInKVxuICAgIH07XG4gICAgZnVuY3Rpb24gYXR0clRleHQoYXR0ciwgdk5vZGUpIHtcbiAgICAgIHJldHVybiB2Tm9kZS5hdHRyKGF0dHIpIHx8ICcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZXNjZW5kYW50VGV4dChub2RlTmFtZTIsIF9yZWYzNSwgY29udGV4dCkge1xuICAgICAgdmFyIGFjdHVhbE5vZGUgPSBfcmVmMzUuYWN0dWFsTm9kZTtcbiAgICAgIG5vZGVOYW1lMiA9IG5vZGVOYW1lMi50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIG5vZGVOYW1lczIgPSBbIG5vZGVOYW1lMiwgYWN0dWFsTm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF0uam9pbignLCcpO1xuICAgICAgdmFyIGNhbmRpZGF0ZSA9IGFjdHVhbE5vZGUucXVlcnlTZWxlY3Rvcihub2RlTmFtZXMyKTtcbiAgICAgIGlmICghY2FuZGlkYXRlIHx8IGNhbmRpZGF0ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBub2RlTmFtZTIpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY2Vzc2libGVfdGV4dF9kZWZhdWx0KGNhbmRpZGF0ZSwgY29udGV4dCk7XG4gICAgfVxuICAgIHZhciBuYXRpdmVfdGV4dF9tZXRob2RzX2RlZmF1bHQgPSBuYXRpdmVUZXh0TWV0aG9kcztcbiAgICBmdW5jdGlvbiBfbmF0aXZlVGV4dEFsdGVybmF0aXZlKHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgYWN0dWFsTm9kZSA9IHZpcnR1YWxOb2RlLmFjdHVhbE5vZGU7XG4gICAgICBpZiAodmlydHVhbE5vZGUucHJvcHMubm9kZVR5cGUgIT09IDEgfHwgWyAncHJlc2VudGF0aW9uJywgJ25vbmUnIF0uaW5jbHVkZXMoZ2V0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSkpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciB0ZXh0TWV0aG9kcyA9IGZpbmRUZXh0TWV0aG9kcyh2aXJ0dWFsTm9kZSk7XG4gICAgICB2YXIgYWNjZXNzaWJsZU5hbWUgPSB0ZXh0TWV0aG9kcy5yZWR1Y2UoZnVuY3Rpb24oYWNjTmFtZSwgc3RlcCkge1xuICAgICAgICByZXR1cm4gYWNjTmFtZSB8fCBzdGVwKHZpcnR1YWxOb2RlLCBjb250ZXh0KTtcbiAgICAgIH0sICcnKTtcbiAgICAgIGlmIChjb250ZXh0LmRlYnVnKSB7XG4gICAgICAgIGF4ZS5sb2coYWNjZXNzaWJsZU5hbWUgfHwgJ3tlbXB0eS12YWx1ZX0nLCBhY3R1YWxOb2RlLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2Nlc3NpYmxlTmFtZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZFRleHRNZXRob2RzKHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgZWxtU3BlYyA9IGdldF9lbGVtZW50X3NwZWNfZGVmYXVsdCh2aXJ0dWFsTm9kZSwge1xuICAgICAgICBub01hdGNoQWNjZXNzaWJsZU5hbWU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdmFyIG1ldGhvZHMgPSBlbG1TcGVjLm5hbWluZ01ldGhvZHMgfHwgW107XG4gICAgICByZXR1cm4gbWV0aG9kcy5tYXAoZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlX3RleHRfbWV0aG9kc19kZWZhdWx0W21ldGhvZE5hbWVdO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFVuaWNvZGVOb25CbXBSZWdFeHAoKSB7XG4gICAgICByZXR1cm4gL1tcXHUxRDAwLVxcdTFEN0ZcXHUxRDgwLVxcdTFEQkZcXHUxREMwLVxcdTFERkZcXHUyMEEwLVxcdTIwQ0ZcXHUyMEQwLVxcdTIwRkZcXHUyMTAwLVxcdTIxNEZcXHUyMTUwLVxcdTIxOEZcXHUyMTkwLVxcdTIxRkZcXHUyMjAwLVxcdTIyRkZcXHUyMzAwLVxcdTIzRkZcXHUyNDAwLVxcdTI0M0ZcXHUyNDQwLVxcdTI0NUZcXHUyNDYwLVxcdTI0RkZcXHUyNTAwLVxcdTI1N0ZcXHUyNTgwLVxcdTI1OUZcXHUyNUEwLVxcdTI1RkZcXHUyNjAwLVxcdTI2RkZcXHUyNzAwLVxcdTI3QkZcXHVFMDAwLVxcdUY4RkZdL2c7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFB1bmN0dWF0aW9uUmVnRXhwKCkge1xuICAgICAgcmV0dXJuIC9bXFx1MjAwMC1cXHUyMDZGXFx1MkUwMC1cXHUyRTdGXFxcXCchXCIjJCUmXFx4YTNcXHhhMlxceGE1XFx4YTdcXHUyMGFjKCkqKyxcXC0uXFwvOjs8PT4/QFxcW1xcXV5fYHt8fX5cXHhiMV0vZztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3VwcGxlbWVudGFyeVByaXZhdGVVc2VSZWdFeHAoKSB7XG4gICAgICByZXR1cm4gL1tcXHVEQjgwLVxcdURCQkZdW1xcdURDMDAtXFx1REZGRl0vZztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q2F0ZWdvcnlGb3JtYXRSZWdFeHAoKSB7XG4gICAgICByZXR1cm4gL1tcXHhBRFxcdTA2MDAtXFx1MDYwNVxcdTA2MUNcXHUwNkREXFx1MDcwRlxcdTA4RTJcXHUxODBFXFx1MjAwQi1cXHUyMDBGXFx1MjAyQS1cXHUyMDJFXFx1MjA2MC1cXHUyMDY0XFx1MjA2Ni1cXHUyMDZGXFx1RkVGRlxcdUZGRjktXFx1RkZGQl18XFx1RDgwNFtcXHVEQ0JEXFx1RENDRF18XFx1RDgwRFtcXHVEQzMwLVxcdURDMzhdfFxcdUQ4MkZbXFx1RENBMC1cXHVEQ0EzXXxcXHVEODM0W1xcdURENzMtXFx1REQ3QV18XFx1REI0MFtcXHVEQzAxXFx1REMyMC1cXHVEQzdGXS9nO1xuICAgIH1cbiAgICB2YXIgZW1vamlfcmVnZXhfZGVmYXVsdCA9IGZ1bmN0aW9uIGVtb2ppX3JlZ2V4X2RlZmF1bHQoKSB7XG4gICAgICByZXR1cm4gL1sjKjAtOV1cXHVGRTBGP1xcdTIwRTN8W1xceEE5XFx4QUVcXHUyMDNDXFx1MjA0OVxcdTIxMjJcXHUyMTM5XFx1MjE5NC1cXHUyMTk5XFx1MjFBOVxcdTIxQUFcXHUyMzFBXFx1MjMxQlxcdTIzMjhcXHUyM0NGXFx1MjNFRC1cXHUyM0VGXFx1MjNGMVxcdTIzRjJcXHUyM0Y4LVxcdTIzRkFcXHUyNEMyXFx1MjVBQVxcdTI1QUJcXHUyNUI2XFx1MjVDMFxcdTI1RkJcXHUyNUZDXFx1MjVGRVxcdTI2MDAtXFx1MjYwNFxcdTI2MEVcXHUyNjExXFx1MjYxNFxcdTI2MTVcXHUyNjE4XFx1MjYyMFxcdTI2MjJcXHUyNjIzXFx1MjYyNlxcdTI2MkFcXHUyNjJFXFx1MjYyRlxcdTI2MzgtXFx1MjYzQVxcdTI2NDBcXHUyNjQyXFx1MjY0OC1cXHUyNjUzXFx1MjY1RlxcdTI2NjBcXHUyNjYzXFx1MjY2NVxcdTI2NjZcXHUyNjY4XFx1MjY3QlxcdTI2N0VcXHUyNjdGXFx1MjY5MlxcdTI2OTQtXFx1MjY5N1xcdTI2OTlcXHUyNjlCXFx1MjY5Q1xcdTI2QTBcXHUyNkE3XFx1MjZBQVxcdTI2QjBcXHUyNkIxXFx1MjZCRFxcdTI2QkVcXHUyNkM0XFx1MjZDOFxcdTI2Q0ZcXHUyNkQxXFx1MjZFOVxcdTI2RjAtXFx1MjZGNVxcdTI2RjdcXHUyNkY4XFx1MjZGQVxcdTI3MDJcXHUyNzA4XFx1MjcwOVxcdTI3MEZcXHUyNzEyXFx1MjcxNFxcdTI3MTZcXHUyNzFEXFx1MjcyMVxcdTI3MzNcXHUyNzM0XFx1Mjc0NFxcdTI3NDdcXHUyNzU3XFx1Mjc2M1xcdTI3QTFcXHUyOTM0XFx1MjkzNVxcdTJCMDUtXFx1MkIwN1xcdTJCMUJcXHUyQjFDXFx1MkI1NVxcdTMwMzBcXHUzMDNEXFx1MzI5N1xcdTMyOTldXFx1RkUwRj98W1xcdTI2MURcXHUyNzBDXFx1MjcwRF0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RkUwRik/fFtcXHUyNzBBXFx1MjcwQl0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xbXFx1MjNFOS1cXHUyM0VDXFx1MjNGMFxcdTIzRjNcXHUyNUZEXFx1MjY5M1xcdTI2QTFcXHUyNkFCXFx1MjZDNVxcdTI2Q0VcXHUyNkQ0XFx1MjZFQVxcdTI2RkRcXHUyNzA1XFx1MjcyOFxcdTI3NENcXHUyNzRFXFx1Mjc1My1cXHUyNzU1XFx1Mjc5NS1cXHUyNzk3XFx1MjdCMFxcdTI3QkZcXHUyQjUwXXxcXHUyNkQzXFx1RkUwRj8oPzpcXHUyMDBEXFx1RDgzRFxcdURDQTUpP3xcXHUyNkY5KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUZFMEYpPyg/OlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj8pP3xcXHUyNzY0XFx1RkUwRj8oPzpcXHUyMDBEKD86XFx1RDgzRFxcdUREMjV8XFx1RDgzRVxcdURFNzkpKT98XFx1RDgzQyg/OltcXHVEQzA0XFx1REQ3MFxcdURENzFcXHVERDdFXFx1REQ3RlxcdURFMDJcXHVERTM3XFx1REYyMVxcdURGMjQtXFx1REYyQ1xcdURGMzZcXHVERjdEXFx1REY5NlxcdURGOTdcXHVERjk5LVxcdURGOUJcXHVERjlFXFx1REY5RlxcdURGQ0RcXHVERkNFXFx1REZENC1cXHVERkRGXFx1REZGNVxcdURGRjddXFx1RkUwRj98W1xcdURGODVcXHVERkMyXFx1REZDN10oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xbXFx1REZDNFxcdURGQ0FdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURGQ0JcXHVERkNDXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVGRTBGKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURDQ0ZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1REUwMVxcdURFMUFcXHVERTJGXFx1REUzMi1cXHVERTM2XFx1REUzOC1cXHVERTNBXFx1REU1MFxcdURFNTFcXHVERjAwLVxcdURGMjBcXHVERjJELVxcdURGMzVcXHVERjM3LVxcdURGNDNcXHVERjQ1LVxcdURGNEFcXHVERjRDLVxcdURGN0NcXHVERjdFLVxcdURGODRcXHVERjg2LVxcdURGOTNcXHVERkEwLVxcdURGQzFcXHVERkM1XFx1REZDNlxcdURGQzhcXHVERkM5XFx1REZDRi1cXHVERkQzXFx1REZFMC1cXHVERkYwXFx1REZGOC1cXHVERkZGXXxcXHVEREU2XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXXxcXHVEREU3XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRlxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRVxcdURERkZdfFxcdURERThcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFOVxcdURERUItXFx1RERFRVxcdURERjAtXFx1RERGN1xcdURERkEtXFx1RERGRl18XFx1RERFOVxcdUQ4M0NbXFx1RERFQVxcdURERUNcXHVEREVGXFx1RERGMFxcdURERjJcXHVEREY0XFx1RERGRl18XFx1RERFQVxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBXFx1RERFQ1xcdURERURcXHVEREY3LVxcdURERkFdfFxcdURERUJcXHVEODNDW1xcdURERUUtXFx1RERGMFxcdURERjJcXHVEREY0XFx1RERGN118XFx1RERFQ1xcdUQ4M0NbXFx1RERFNlxcdURERTdcXHVEREU5LVxcdURERUVcXHVEREYxLVxcdURERjNcXHVEREY1LVxcdURERkFcXHVEREZDXFx1RERGRV18XFx1RERFRFxcdUQ4M0NbXFx1RERGMFxcdURERjJcXHVEREYzXFx1RERGN1xcdURERjlcXHVEREZBXXxcXHVEREVFXFx1RDgzQ1tcXHVEREU4LVxcdURERUFcXHVEREYxLVxcdURERjRcXHVEREY2LVxcdURERjldfFxcdURERUZcXHVEODNDW1xcdURERUFcXHVEREYyXFx1RERGNFxcdURERjVdfFxcdURERjBcXHVEODNDW1xcdURERUFcXHVEREVDLVxcdURERUVcXHVEREYyXFx1RERGM1xcdURERjVcXHVEREY3XFx1RERGQ1xcdURERkVcXHVEREZGXXxcXHVEREYxXFx1RDgzQ1tcXHVEREU2LVxcdURERThcXHVEREVFXFx1RERGMFxcdURERjctXFx1RERGQlxcdURERkVdfFxcdURERjJcXHVEODNDW1xcdURERTZcXHVEREU4LVxcdURERURcXHVEREYwLVxcdURERkZdfFxcdURERjNcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQS1cXHVEREVDXFx1RERFRVxcdURERjFcXHVEREY0XFx1RERGNVxcdURERjdcXHVEREZBXFx1RERGRl18XFx1RERGNFxcdUQ4M0NcXHVEREYyfFxcdURERjVcXHVEODNDW1xcdURERTZcXHVEREVBLVxcdURERURcXHVEREYwLVxcdURERjNcXHVEREY3LVxcdURERjlcXHVEREZDXFx1RERGRV18XFx1RERGNlxcdUQ4M0NcXHVEREU2fFxcdURERjdcXHVEODNDW1xcdURERUFcXHVEREY0XFx1RERGOFxcdURERkFcXHVEREZDXXxcXHVEREY4XFx1RDgzQ1tcXHVEREU2LVxcdURERUFcXHVEREVDLVxcdURERjRcXHVEREY3LVxcdURERjlcXHVEREZCXFx1RERGRC1cXHVEREZGXXxcXHVEREY5XFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERTlcXHVEREVCLVxcdURERURcXHVEREVGLVxcdURERjRcXHVEREY3XFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRl18XFx1RERGQVxcdUQ4M0NbXFx1RERFNlxcdURERUNcXHVEREYyXFx1RERGM1xcdURERjhcXHVEREZFXFx1RERGRl18XFx1RERGQlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBXFx1RERFQ1xcdURERUVcXHVEREYzXFx1RERGQV18XFx1RERGQ1xcdUQ4M0NbXFx1RERFQlxcdURERjhdfFxcdURERkRcXHVEODNDXFx1RERGMHxcXHVEREZFXFx1RDgzQ1tcXHVEREVBXFx1RERGOV18XFx1RERGRlxcdUQ4M0NbXFx1RERFNlxcdURERjJcXHVEREZDXXxcXHVERjQ0KD86XFx1MjAwRFxcdUQ4M0RcXHVERkVCKT98XFx1REY0Qig/OlxcdTIwMERcXHVEODNEXFx1REZFOSk/fFxcdURGQzMoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pPyg/OlxcdTIwMEQoPzpbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj8oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98XFx1MjdBMVxcdUZFMEY/KSk/fFxcdURGRjNcXHVGRTBGPyg/OlxcdTIwMEQoPzpcXHUyNkE3XFx1RkUwRj98XFx1RDgzQ1xcdURGMDgpKT98XFx1REZGNCg/OlxcdTIwMERcXHUyNjIwXFx1RkUwRj98XFx1REI0MFxcdURDNjdcXHVEQjQwXFx1REM2MlxcdURCNDAoPzpcXHVEQzY1XFx1REI0MFxcdURDNkVcXHVEQjQwXFx1REM2N3xcXHVEQzczXFx1REI0MFxcdURDNjNcXHVEQjQwXFx1REM3NHxcXHVEQzc3XFx1REI0MFxcdURDNkNcXHVEQjQwXFx1REM3MylcXHVEQjQwXFx1REM3Rik/KXxcXHVEODNEKD86W1xcdURDM0ZcXHVEQ0ZEXFx1REQ0OVxcdURENEFcXHVERDZGXFx1REQ3MFxcdURENzNcXHVERDc2LVxcdURENzlcXHVERDg3XFx1REQ4QS1cXHVERDhEXFx1RERBNVxcdUREQThcXHVEREIxXFx1RERCMlxcdUREQkNcXHVEREMyLVxcdUREQzRcXHVEREQxLVxcdURERDNcXHVERERDLVxcdUREREVcXHVEREUxXFx1RERFM1xcdURERThcXHVEREVGXFx1RERGM1xcdURERkFcXHVERUNCXFx1REVDRC1cXHVERUNGXFx1REVFMC1cXHVERUU1XFx1REVFOVxcdURFRjBcXHVERUYzXVxcdUZFMEY/fFtcXHVEQzQyXFx1REM0M1xcdURDNDYtXFx1REM1MFxcdURDNjZcXHVEQzY3XFx1REM2Qi1cXHVEQzZEXFx1REM3MlxcdURDNzQtXFx1REM3NlxcdURDNzhcXHVEQzdDXFx1REM4M1xcdURDODVcXHVEQzhGXFx1REM5MVxcdURDQUFcXHVERDdBXFx1REQ5NVxcdUREOTZcXHVERTRDXFx1REU0RlxcdURFQzBcXHVERUNDXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVEQzZFXFx1REM3MFxcdURDNzFcXHVEQzczXFx1REM3N1xcdURDODFcXHVEQzgyXFx1REM4NlxcdURDODdcXHVERTQ1LVxcdURFNDdcXHVERTRCXFx1REU0RFxcdURFNEVcXHVERUEzXFx1REVCNFxcdURFQjVdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURENzRcXHVERDkwXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVGRTBGKT98W1xcdURDMDAtXFx1REMwN1xcdURDMDktXFx1REMxNFxcdURDMTYtXFx1REMyNVxcdURDMjctXFx1REMzQVxcdURDM0MtXFx1REMzRVxcdURDNDBcXHVEQzQ0XFx1REM0NVxcdURDNTEtXFx1REM2NVxcdURDNkFcXHVEQzc5LVxcdURDN0JcXHVEQzdELVxcdURDODBcXHVEQzg0XFx1REM4OC1cXHVEQzhFXFx1REM5MFxcdURDOTItXFx1RENBOVxcdURDQUItXFx1RENGQ1xcdURDRkYtXFx1REQzRFxcdURENEItXFx1REQ0RVxcdURENTAtXFx1REQ2N1xcdUREQTRcXHVEREZCLVxcdURFMkRcXHVERTJGLVxcdURFMzRcXHVERTM3LVxcdURFNDFcXHVERTQzXFx1REU0NFxcdURFNDgtXFx1REU0QVxcdURFODAtXFx1REVBMlxcdURFQTQtXFx1REVCM1xcdURFQjctXFx1REVCRlxcdURFQzEtXFx1REVDNVxcdURFRDAtXFx1REVEMlxcdURFRDUtXFx1REVEN1xcdURFREMtXFx1REVERlxcdURFRUJcXHVERUVDXFx1REVGNC1cXHVERUZDXFx1REZFMC1cXHVERkVCXFx1REZGMF18XFx1REMwOCg/OlxcdTIwMERcXHUyQjFCKT98XFx1REMxNSg/OlxcdTIwMERcXHVEODNFXFx1RERCQSk/fFxcdURDMjYoPzpcXHUyMDBEKD86XFx1MkIxQnxcXHVEODNEXFx1REQyNSkpP3xcXHVEQzNCKD86XFx1MjAwRFxcdTI3NDRcXHVGRTBGPyk/fFxcdURDNDFcXHVGRTBGPyg/OlxcdTIwMERcXHVEODNEXFx1RERFOFxcdUZFMEY/KT98XFx1REM2OCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4fFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0QoPzpbXFx1REM2OFxcdURDNjldXFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/KXxbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/KXxcXHVEODNFKD86W1xcdUREQUZcXHVEREJDXFx1RERCRF0oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98W1xcdUREQjAtXFx1RERCM10pKXxcXHVEODNDKD86XFx1REZGQig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUZcXHVEREJDXFx1RERCRF0oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98W1xcdUREQjAtXFx1RERCM118XFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OFxcdUQ4M0NbXFx1REZGQy1cXHVERkZGXSkpKT98XFx1REZGQyg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUZcXHVEREJDXFx1RERCRF0oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98W1xcdUREQjAtXFx1RERCM118XFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OFxcdUQ4M0NbXFx1REZGQlxcdURGRkQtXFx1REZGRl0pKSk/fFxcdURGRkQoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEXFx1RDgzRCg/OlxcdURDOEJcXHUyMDBEXFx1RDgzRCk/XFx1REM2OFxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGXFx1RERCQ1xcdUREQkRdKD86XFx1MjAwRFxcdTI3QTFcXHVGRTBGPyk/fFtcXHVEREIwLVxcdUREQjNdfFxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjhcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKSkpP3xcXHVERkZFKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzhCXFx1MjAwRFxcdUQ4M0QpP1xcdURDNjhcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRlxcdUREQkNcXHVEREJEXSg/OlxcdTIwMERcXHUyN0ExXFx1RkUwRj8pP3xbXFx1RERCMC1cXHVEREIzXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkRcXHVERkZGXSkpKT98XFx1REZGRig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUZcXHVEREJDXFx1RERCRF0oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98W1xcdUREQjAtXFx1RERCM118XFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OFxcdUQ4M0NbXFx1REZGQi1cXHVERkZFXSkpKT8pKT98XFx1REM2OSg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9bXFx1REM2OFxcdURDNjldfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0QoPzpbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/fFxcdURDNjlcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjYoPzpcXHUyMDBEXFx1RDgzRFxcdURDNjYpP3xcXHVEQzY3KD86XFx1MjAwRFxcdUQ4M0RbXFx1REM2NlxcdURDNjddKT8pKXxcXHVEODNFKD86W1xcdUREQUZcXHVEREJDXFx1RERCRF0oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98W1xcdUREQjAtXFx1RERCM10pKXxcXHVEODNDKD86XFx1REZGQig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86W1xcdURDNjhcXHVEQzY5XXxcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGXFx1RERCQ1xcdUREQkRdKD86XFx1MjAwRFxcdTI3QTFcXHVGRTBGPyk/fFtcXHVEREIwLVxcdUREQjNdfFxcdUREMURcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV1cXHVEODNDW1xcdURGRkMtXFx1REZGRl0pKSk/fFxcdURGRkMoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEXFx1RDgzRCg/OltcXHVEQzY4XFx1REM2OV18XFx1REM4QlxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XSlcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRlxcdUREQkNcXHVEREJEXSg/OlxcdTIwMERcXHUyN0ExXFx1RkUwRj8pP3xbXFx1RERCMC1cXHVEREIzXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldXFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXSkpKT98XFx1REZGRCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86W1xcdURDNjhcXHVEQzY5XXxcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGXFx1RERCQ1xcdUREQkRdKD86XFx1MjAwRFxcdTI3QTFcXHVGRTBGPyk/fFtcXHVEREIwLVxcdUREQjNdfFxcdUREMURcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV1cXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKSkpP3xcXHVERkZFKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRFxcdUQ4M0QoPzpbXFx1REM2OFxcdURDNjldfFxcdURDOEJcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUZcXHVEREJDXFx1RERCRF0oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98W1xcdUREQjAtXFx1RERCM118XFx1REQxRFxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XVxcdUQ4M0NbXFx1REZGQi1cXHVERkZEXFx1REZGRl0pKSk/fFxcdURGRkYoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEXFx1RDgzRCg/OltcXHVEQzY4XFx1REM2OV18XFx1REM4QlxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XSlcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRlxcdUREQkNcXHVEREJEXSg/OlxcdTIwMERcXHUyN0ExXFx1RkUwRj8pP3xbXFx1RERCMC1cXHVEREIzXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldXFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdKSkpPykpP3xcXHVEQzZGKD86XFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml1cXHVGRTBGPyk/fFxcdURENzUoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RkUwRik/KD86XFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml1cXHVGRTBGPyk/fFxcdURFMkUoPzpcXHUyMDBEXFx1RDgzRFxcdURDQTgpP3xcXHVERTM1KD86XFx1MjAwRFxcdUQ4M0RcXHVEQ0FCKT98XFx1REUzNig/OlxcdTIwMERcXHVEODNDXFx1REYyQlxcdUZFMEY/KT98XFx1REU0Mig/OlxcdTIwMERbXFx1MjE5NFxcdTIxOTVdXFx1RkUwRj8pP3xcXHVERUI2KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEKD86W1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KD86XFx1MjAwRFxcdTI3QTFcXHVGRTBGPyk/fFxcdTI3QTFcXHVGRTBGPykpPyl8XFx1RDgzRSg/OltcXHVERDBDXFx1REQwRlxcdUREMTgtXFx1REQxRlxcdUREMzAtXFx1REQzNFxcdUREMzZcXHVERDc3XFx1RERCNVxcdUREQjZcXHVEREJCXFx1REREMlxcdURERDNcXHVEREQ1XFx1REVDMy1cXHVERUM1XFx1REVGMFxcdURFRjItXFx1REVGOF0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xbXFx1REQyNlxcdUREMzVcXHVERDM3LVxcdUREMzlcXHVERDNEXFx1REQzRVxcdUREQjhcXHVEREI5XFx1RERDRFxcdUREQ0ZcXHVEREQ0XFx1RERENi1cXHVEREREXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/KD86XFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml1cXHVGRTBGPyk/fFtcXHVERERFXFx1RERERl0oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdUREMERcXHVERDBFXFx1REQxMC1cXHVERDE3XFx1REQyMC1cXHVERDI1XFx1REQyNy1cXHVERDJGXFx1REQzQVxcdUREM0YtXFx1REQ0NVxcdURENDctXFx1REQ3NlxcdURENzgtXFx1RERCNFxcdUREQjdcXHVEREJBXFx1RERCQy1cXHVERENDXFx1REREMFxcdURERTAtXFx1RERGRlxcdURFNzAtXFx1REU3Q1xcdURFODAtXFx1REU4OVxcdURFOEYtXFx1REVDMlxcdURFQzZcXHVERUNFLVxcdURFRENcXHVERURGLVxcdURFRTldfFxcdUREM0MoPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/fFxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFxcdUREQ0UoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pPyg/OlxcdTIwMEQoPzpbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj8oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98XFx1MjdBMVxcdUZFMEY/KSk/fFxcdURERDEoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGODRcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRlxcdUREQkNcXHVEREJEXSg/OlxcdTIwMERcXHUyN0ExXFx1RkUwRj8pP3xbXFx1RERCMC1cXHVEREIzXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxfFxcdURERDFcXHUyMDBEXFx1RDgzRVxcdURERDIoPzpcXHUyMDBEXFx1RDgzRVxcdURERDIpP3xcXHVEREQyKD86XFx1MjAwRFxcdUQ4M0VcXHVEREQyKT8pKXxcXHVEODNDKD86XFx1REZGQig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMEQoPzpcXHVEODNEXFx1REM4QlxcdTIwMEQpP1xcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZDLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY4NFxcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGXFx1RERCQ1xcdUREQkRdKD86XFx1MjAwRFxcdTI3QTFcXHVGRTBGPyk/fFtcXHVEREIwLVxcdUREQjNdfFxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkItXFx1REZGRl0pKSk/fFxcdURGRkMoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEKD86XFx1RDgzRFxcdURDOEJcXHUyMDBEKT9cXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQlxcdURGRkQtXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjg0XFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUZcXHVEREJDXFx1RERCRF0oPzpcXHUyMDBEXFx1MjdBMVxcdUZFMEY/KT98W1xcdUREQjAtXFx1RERCM118XFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSkpKT98XFx1REZGRCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMEQoPzpcXHVEODNEXFx1REM4QlxcdTIwMEQpP1xcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCXFx1REZGQ1xcdURGRkVcXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGODRcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRlxcdUREQkNcXHVEREJEXSg/OlxcdTIwMERcXHUyN0ExXFx1RkUwRj8pP3xbXFx1RERCMC1cXHVEREIzXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKSkpP3xcXHVERkZFKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCk/XFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkItXFx1REZGRFxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY4NFxcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGXFx1RERCQ1xcdUREQkRdKD86XFx1MjAwRFxcdTI3QTFcXHVGRTBGPyk/fFtcXHVEREIwLVxcdUREQjNdfFxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkItXFx1REZGRl0pKSk/fFxcdURGRkYoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEKD86XFx1RDgzRFxcdURDOEJcXHUyMDBEKT9cXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQi1cXHVERkZFXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGODRcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRlxcdUREQkNcXHVEREJEXSg/OlxcdTIwMERcXHUyN0ExXFx1RkUwRj8pP3xbXFx1RERCMC1cXHVEREIzXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKSkpPykpP3xcXHVERUYxKD86XFx1RDgzQyg/OlxcdURGRkIoPzpcXHUyMDBEXFx1RDgzRVxcdURFRjJcXHVEODNDW1xcdURGRkMtXFx1REZGRl0pP3xcXHVERkZDKD86XFx1MjAwRFxcdUQ4M0VcXHVERUYyXFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXSk/fFxcdURGRkQoPzpcXHUyMDBEXFx1RDgzRVxcdURFRjJcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKT98XFx1REZGRSg/OlxcdTIwMERcXHVEODNFXFx1REVGMlxcdUQ4M0NbXFx1REZGQi1cXHVERkZEXFx1REZGRl0pP3xcXHVERkZGKD86XFx1MjAwRFxcdUQ4M0VcXHVERUYyXFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdKT8pKT8pL2c7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0ciwgb3B0aW9ucykge1xuICAgICAgdmFyIGVtb2ppID0gb3B0aW9ucy5lbW9qaSwgbm9uQm1wID0gb3B0aW9ucy5ub25CbXAsIHB1bmN0dWF0aW9ucyA9IG9wdGlvbnMucHVuY3R1YXRpb25zO1xuICAgICAgdmFyIHZhbHVlID0gZmFsc2U7XG4gICAgICBpZiAoZW1vamkpIHtcbiAgICAgICAgdmFsdWUgfHwgKHZhbHVlID0gZW1vamlfcmVnZXhfZGVmYXVsdCgpLnRlc3Qoc3RyKSk7XG4gICAgICB9XG4gICAgICBpZiAobm9uQm1wKSB7XG4gICAgICAgIHZhbHVlIHx8ICh2YWx1ZSA9IGdldFVuaWNvZGVOb25CbXBSZWdFeHAoKS50ZXN0KHN0cikgfHwgZ2V0U3VwcGxlbWVudGFyeVByaXZhdGVVc2VSZWdFeHAoKS50ZXN0KHN0cikgfHwgZ2V0Q2F0ZWdvcnlGb3JtYXRSZWdFeHAoKS50ZXN0KHN0cikpO1xuICAgICAgfVxuICAgICAgaWYgKHB1bmN0dWF0aW9ucykge1xuICAgICAgICB2YWx1ZSB8fCAodmFsdWUgPSBnZXRQdW5jdHVhdGlvblJlZ0V4cCgpLnRlc3Qoc3RyKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHZhciBoYXNfdW5pY29kZV9kZWZhdWx0ID0gaGFzVW5pY29kZTtcbiAgICBmdW5jdGlvbiBfaXNJY29uTGlnYXR1cmUodGV4dFZOb2RlKSB7XG4gICAgICB2YXIgZGlmZmVyZW5jZVRocmVzaG9sZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogLjE1O1xuICAgICAgdmFyIG9jY3VycmVuY2VUaHJlc2hvbGQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDM7XG4gICAgICB2YXIgbm9kZVZhbHVlID0gdGV4dFZOb2RlLmFjdHVhbE5vZGUubm9kZVZhbHVlLnRyaW0oKTtcbiAgICAgIGlmICghc2FuaXRpemVfZGVmYXVsdChub2RlVmFsdWUpIHx8IGhhc191bmljb2RlX2RlZmF1bHQobm9kZVZhbHVlLCB7XG4gICAgICAgIGVtb2ppOiB0cnVlLFxuICAgICAgICBub25CbXA6IHRydWVcbiAgICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBjYW52YXNDb250ZXh0ID0gY2FjaGVfZGVmYXVsdC5nZXQoJ2NhbnZhc0NvbnRleHQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJywge1xuICAgICAgICAgIHdpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNhbnZhcyA9IGNhbnZhc0NvbnRleHQuY2FudmFzO1xuICAgICAgdmFyIGZvbnRzID0gY2FjaGVfZGVmYXVsdC5nZXQoJ2ZvbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGV4dFZOb2RlLnBhcmVudC5hY3R1YWxOb2RlKTtcbiAgICAgIHZhciBmb250RmFtaWx5ID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1mYW1pbHknKTtcbiAgICAgIGlmICghZm9udHNbZm9udEZhbWlseV0pIHtcbiAgICAgICAgZm9udHNbZm9udEZhbWlseV0gPSB7XG4gICAgICAgICAgb2NjdXJyZW5jZXM6IDAsXG4gICAgICAgICAgbnVtTGlnYXR1cmVzOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB2YXIgZm9udCA9IGZvbnRzW2ZvbnRGYW1pbHldO1xuICAgICAgaWYgKGZvbnQub2NjdXJyZW5jZXMgPj0gb2NjdXJyZW5jZVRocmVzaG9sZCkge1xuICAgICAgICBpZiAoZm9udC5udW1MaWdhdHVyZXMgLyBmb250Lm9jY3VycmVuY2VzID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udC5udW1MaWdhdHVyZXMgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvbnQub2NjdXJyZW5jZXMrKztcbiAgICAgIHZhciBmb250U2l6ZSA9IDMwO1xuICAgICAgdmFyIGZvbnRTdHlsZSA9ICcnLmNvbmNhdChmb250U2l6ZSwgJ3B4ICcpLmNvbmNhdChmb250RmFtaWx5KTtcbiAgICAgIGNhbnZhc0NvbnRleHQuZm9udCA9IGZvbnRTdHlsZTtcbiAgICAgIHZhciBmaXJzdENoYXIgPSBub2RlVmFsdWUuY2hhckF0KDApO1xuICAgICAgdmFyIHdpZHRoID0gY2FudmFzQ29udGV4dC5tZWFzdXJlVGV4dChmaXJzdENoYXIpLndpZHRoO1xuICAgICAgaWYgKHdpZHRoID09PSAwKSB7XG4gICAgICAgIGZvbnQubnVtTGlnYXR1cmVzKys7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHdpZHRoIDwgMzApIHtcbiAgICAgICAgdmFyIGRpZmYgPSAzMCAvIHdpZHRoO1xuICAgICAgICB3aWR0aCAqPSBkaWZmO1xuICAgICAgICBmb250U2l6ZSAqPSBkaWZmO1xuICAgICAgICBmb250U3R5bGUgPSAnJy5jb25jYXQoZm9udFNpemUsICdweCAnKS5jb25jYXQoZm9udEZhbWlseSk7XG4gICAgICB9XG4gICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBmb250U2l6ZTtcbiAgICAgIGNhbnZhc0NvbnRleHQuZm9udCA9IGZvbnRTdHlsZTtcbiAgICAgIGNhbnZhc0NvbnRleHQudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgY2FudmFzQ29udGV4dC50ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICAgIGNhbnZhc0NvbnRleHQuZmlsbFRleHQoZmlyc3RDaGFyLCAwLCAwKTtcbiAgICAgIHZhciBjb21wYXJlRGF0YSA9IG5ldyBVaW50MzJBcnJheShjYW52YXNDb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgZm9udFNpemUpLmRhdGEuYnVmZmVyKTtcbiAgICAgIGlmICghY29tcGFyZURhdGEuc29tZShmdW5jdGlvbihwaXhlbCkge1xuICAgICAgICByZXR1cm4gcGl4ZWw7XG4gICAgICB9KSkge1xuICAgICAgICBmb250Lm51bUxpZ2F0dXJlcysrO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNhbnZhc0NvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBmb250U2l6ZSk7XG4gICAgICBjYW52YXNDb250ZXh0LmZpbGxUZXh0KG5vZGVWYWx1ZSwgMCwgMCk7XG4gICAgICB2YXIgY29tcGFyZVdpdGggPSBuZXcgVWludDMyQXJyYXkoY2FudmFzQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGZvbnRTaXplKS5kYXRhLmJ1ZmZlcik7XG4gICAgICB2YXIgZGlmZmVyZW5jZXMgPSBjb21wYXJlRGF0YS5yZWR1Y2UoZnVuY3Rpb24oZGlmZiwgcGl4ZWwsIGkpIHtcbiAgICAgICAgaWYgKHBpeGVsID09PSAwICYmIGNvbXBhcmVXaXRoW2ldID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGRpZmY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBpeGVsICE9PSAwICYmIGNvbXBhcmVXaXRoW2ldICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGRpZmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICsrZGlmZjtcbiAgICAgIH0sIDApO1xuICAgICAgdmFyIGV4cGVjdGVkV2lkdGggPSBub2RlVmFsdWUuc3BsaXQoJycpLnJlZHVjZShmdW5jdGlvbih0b3RhbFdpZHRoLCBfY2hhcjIpIHtcbiAgICAgICAgcmV0dXJuIHRvdGFsV2lkdGggKyBjYW52YXNDb250ZXh0Lm1lYXN1cmVUZXh0KF9jaGFyMikud2lkdGg7XG4gICAgICB9LCAwKTtcbiAgICAgIHZhciBhY3R1YWxXaWR0aCA9IGNhbnZhc0NvbnRleHQubWVhc3VyZVRleHQobm9kZVZhbHVlKS53aWR0aDtcbiAgICAgIHZhciBwaXhlbERpZmZlcmVuY2UgPSBkaWZmZXJlbmNlcyAvIGNvbXBhcmVEYXRhLmxlbmd0aDtcbiAgICAgIHZhciBzaXplRGlmZmVyZW5jZSA9IDEgLSBhY3R1YWxXaWR0aCAvIGV4cGVjdGVkV2lkdGg7XG4gICAgICBpZiAocGl4ZWxEaWZmZXJlbmNlID49IGRpZmZlcmVuY2VUaHJlc2hvbGQgJiYgc2l6ZURpZmZlcmVuY2UgPj0gZGlmZmVyZW5jZVRocmVzaG9sZCkge1xuICAgICAgICBmb250Lm51bUxpZ2F0dXJlcysrO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2FjY2Vzc2libGVUZXh0VmlydHVhbCh2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgY29udGV4dCA9IHByZXBhcmVDb250ZXh0KHZpcnR1YWxOb2RlLCBjb250ZXh0KTtcbiAgICAgIGlmIChzaG91bGRJZ25vcmVIaWRkZW4odmlydHVhbE5vZGUsIGNvbnRleHQpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRJZ25vcmVJY29uTGlnYXR1cmUodmlydHVhbE5vZGUsIGNvbnRleHQpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciBjb21wdXRhdGlvblN0ZXBzID0gWyBhcmlhbGFiZWxsZWRieV90ZXh0X2RlZmF1bHQsIF9hcmlhbGFiZWxUZXh0LCBfbmF0aXZlVGV4dEFsdGVybmF0aXZlLCBmb3JtX2NvbnRyb2xfdmFsdWVfZGVmYXVsdCwgc3VidHJlZV90ZXh0X2RlZmF1bHQsIHRleHROb2RlVmFsdWUsIHRpdGxlX3RleHRfZGVmYXVsdCBdO1xuICAgICAgdmFyIGFjY2Vzc2libGVOYW1lID0gY29tcHV0YXRpb25TdGVwcy5yZWR1Y2UoZnVuY3Rpb24oYWNjTmFtZSwgc3RlcCkge1xuICAgICAgICBpZiAoY29udGV4dC5zdGFydE5vZGUgPT09IHZpcnR1YWxOb2RlKSB7XG4gICAgICAgICAgYWNjTmFtZSA9IHNhbml0aXplX2RlZmF1bHQoYWNjTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjY05hbWUgIT09ICcnKSB7XG4gICAgICAgICAgcmV0dXJuIGFjY05hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ZXAodmlydHVhbE5vZGUsIGNvbnRleHQpO1xuICAgICAgfSwgJycpO1xuICAgICAgaWYgKGNvbnRleHQuZGVidWcpIHtcbiAgICAgICAgYXhlLmxvZyhhY2Nlc3NpYmxlTmFtZSB8fCAne2VtcHR5LXZhbHVlfScsIHZpcnR1YWxOb2RlLmFjdHVhbE5vZGUsIGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY2Vzc2libGVOYW1lO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXh0Tm9kZVZhbHVlKHZpcnR1YWxOb2RlKSB7XG4gICAgICBpZiAodmlydHVhbE5vZGUucHJvcHMubm9kZVR5cGUgIT09IDMpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZpcnR1YWxOb2RlLnByb3BzLm5vZGVWYWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2hvdWxkSWdub3JlSGlkZGVuKHZpcnR1YWxOb2RlLCBjb250ZXh0KSB7XG4gICAgICBpZiAoIXZpcnR1YWxOb2RlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0LmluY2x1ZGVIaWRkZW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICFfaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzKHZpcnR1YWxOb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2hvdWxkSWdub3JlSWNvbkxpZ2F0dXJlKHZpcnR1YWxOb2RlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgX2NvbnRleHQkb2NjdXJyZW5jZVRoO1xuICAgICAgdmFyIGlnbm9yZUljb25MaWdhdHVyZSA9IGNvbnRleHQuaWdub3JlSWNvbkxpZ2F0dXJlLCBwaXhlbFRocmVzaG9sZCA9IGNvbnRleHQucGl4ZWxUaHJlc2hvbGQ7XG4gICAgICB2YXIgb2NjdXJyZW5jZVRocmVzaG9sZCA9IChfY29udGV4dCRvY2N1cnJlbmNlVGggPSBjb250ZXh0Lm9jY3VycmVuY2VUaHJlc2hvbGQpICE9PSBudWxsICYmIF9jb250ZXh0JG9jY3VycmVuY2VUaCAhPT0gdm9pZCAwID8gX2NvbnRleHQkb2NjdXJyZW5jZVRoIDogY29udGV4dC5vY2N1cmFuY2VUaHJlc2hvbGQ7XG4gICAgICBpZiAodmlydHVhbE5vZGUucHJvcHMubm9kZVR5cGUgIT09IDMgfHwgIWlnbm9yZUljb25MaWdhdHVyZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2lzSWNvbkxpZ2F0dXJlKHZpcnR1YWxOb2RlLCBwaXhlbFRocmVzaG9sZCwgb2NjdXJyZW5jZVRocmVzaG9sZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb250ZXh0KHZpcnR1YWxOb2RlLCBjb250ZXh0KSB7XG4gICAgICBpZiAoIWNvbnRleHQuc3RhcnROb2RlKSB7XG4gICAgICAgIGNvbnRleHQgPSBfZXh0ZW5kcyh7XG4gICAgICAgICAgc3RhcnROb2RlOiB2aXJ0dWFsTm9kZVxuICAgICAgICB9LCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGlmICh2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0LmluTGFiZWxsZWRCeUNvbnRleHQgJiYgY29udGV4dC5pbmNsdWRlSGlkZGVuID09PSB2b2lkIDApIHtcbiAgICAgICAgY29udGV4dCA9IF9leHRlbmRzKHtcbiAgICAgICAgICBpbmNsdWRlSGlkZGVuOiAhX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVycyh2aXJ0dWFsTm9kZSlcbiAgICAgICAgfSwgY29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gICAgX2FjY2Vzc2libGVUZXh0VmlydHVhbC5hbHJlYWR5UHJvY2Vzc2VkID0gZnVuY3Rpb24gYWxyZWFkeVByb2Nlc3NlZCh2aXJ0dWFsbm9kZSwgY29udGV4dCkge1xuICAgICAgY29udGV4dC5wcm9jZXNzZWQgPSBjb250ZXh0LnByb2Nlc3NlZCB8fCBbXTtcbiAgICAgIGlmIChjb250ZXh0LnByb2Nlc3NlZC5pbmNsdWRlcyh2aXJ0dWFsbm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb250ZXh0LnByb2Nlc3NlZC5wdXNoKHZpcnR1YWxub2RlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHJlbW92ZVVuaWNvZGUoc3RyLCBvcHRpb25zKSB7XG4gICAgICB2YXIgZW1vamkgPSBvcHRpb25zLmVtb2ppLCBub25CbXAgPSBvcHRpb25zLm5vbkJtcCwgcHVuY3R1YXRpb25zID0gb3B0aW9ucy5wdW5jdHVhdGlvbnM7XG4gICAgICBpZiAoZW1vamkpIHtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoZW1vamlfcmVnZXhfZGVmYXVsdCgpLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAobm9uQm1wKSB7XG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKGdldFVuaWNvZGVOb25CbXBSZWdFeHAoKSwgJycpLnJlcGxhY2UoZ2V0U3VwcGxlbWVudGFyeVByaXZhdGVVc2VSZWdFeHAoKSwgJycpLnJlcGxhY2UoZ2V0Q2F0ZWdvcnlGb3JtYXRSZWdFeHAoKSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKHB1bmN0dWF0aW9ucykge1xuICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShnZXRQdW5jdHVhdGlvblJlZ0V4cCgpLCAnJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICB2YXIgcmVtb3ZlX3VuaWNvZGVfZGVmYXVsdCA9IHJlbW92ZVVuaWNvZGU7XG4gICAgZnVuY3Rpb24gaXNIdW1hbkludGVycHJldGFibGUoc3RyKSB7XG4gICAgICBpZiAoaXNFbXB0eShzdHIpIHx8IGlzTm9uRGlnaXRDaGFyYWN0ZXIoc3RyKSB8fCBpc1N5bWJvbGljVGV4dChzdHIpIHx8IGlzVW5pY29kZU9yUHVuY3R1YXRpb24oc3RyKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHN0cikge1xuICAgICAgcmV0dXJuIHNhbml0aXplX2RlZmF1bHQoc3RyKS5sZW5ndGggPT09IDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzTm9uRGlnaXRDaGFyYWN0ZXIoc3RyKSB7XG4gICAgICByZXR1cm4gc3RyLmxlbmd0aCA9PT0gMSAmJiBzdHIubWF0Y2goL1xcRC8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1N5bWJvbGljVGV4dChzdHIpIHtcbiAgICAgIHZhciBzeW1ib2xpY1RleHQgPSBbICdhYScsICdhYmMnIF07XG4gICAgICByZXR1cm4gc3ltYm9saWNUZXh0LmluY2x1ZGVzKHN0ci50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNVbmljb2RlT3JQdW5jdHVhdGlvbihzdHIpIHtcbiAgICAgIHZhciBub1VuaWNvZGVTdHIgPSByZW1vdmVfdW5pY29kZV9kZWZhdWx0KHN0ciwge1xuICAgICAgICBlbW9qaTogdHJ1ZSxcbiAgICAgICAgbm9uQm1wOiB0cnVlLFxuICAgICAgICBwdW5jdHVhdGlvbnM6IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICFzYW5pdGl6ZV9kZWZhdWx0KG5vVW5pY29kZVN0cik7XG4gICAgfVxuICAgIHZhciBpc19odW1hbl9pbnRlcnByZXRhYmxlX2RlZmF1bHQgPSBpc0h1bWFuSW50ZXJwcmV0YWJsZTtcbiAgICB2YXIgX2F1dG9jb21wbGV0ZSA9IHtcbiAgICAgIHN0YXRlVGVybXM6IFsgJ29uJywgJ29mZicgXSxcbiAgICAgIHN0YW5kYWxvbmVUZXJtczogWyAnbmFtZScsICdob25vcmlmaWMtcHJlZml4JywgJ2dpdmVuLW5hbWUnLCAnYWRkaXRpb25hbC1uYW1lJywgJ2ZhbWlseS1uYW1lJywgJ2hvbm9yaWZpYy1zdWZmaXgnLCAnbmlja25hbWUnLCAndXNlcm5hbWUnLCAnbmV3LXBhc3N3b3JkJywgJ2N1cnJlbnQtcGFzc3dvcmQnLCAnb3JnYW5pemF0aW9uLXRpdGxlJywgJ29yZ2FuaXphdGlvbicsICdzdHJlZXQtYWRkcmVzcycsICdhZGRyZXNzLWxpbmUxJywgJ2FkZHJlc3MtbGluZTInLCAnYWRkcmVzcy1saW5lMycsICdhZGRyZXNzLWxldmVsNCcsICdhZGRyZXNzLWxldmVsMycsICdhZGRyZXNzLWxldmVsMicsICdhZGRyZXNzLWxldmVsMScsICdjb3VudHJ5JywgJ2NvdW50cnktbmFtZScsICdwb3N0YWwtY29kZScsICdjYy1uYW1lJywgJ2NjLWdpdmVuLW5hbWUnLCAnY2MtYWRkaXRpb25hbC1uYW1lJywgJ2NjLWZhbWlseS1uYW1lJywgJ2NjLW51bWJlcicsICdjYy1leHAnLCAnY2MtZXhwLW1vbnRoJywgJ2NjLWV4cC15ZWFyJywgJ2NjLWNzYycsICdjYy10eXBlJywgJ3RyYW5zYWN0aW9uLWN1cnJlbmN5JywgJ3RyYW5zYWN0aW9uLWFtb3VudCcsICdsYW5ndWFnZScsICdiZGF5JywgJ2JkYXktZGF5JywgJ2JkYXktbW9udGgnLCAnYmRheS15ZWFyJywgJ3NleCcsICd1cmwnLCAncGhvdG8nLCAnb25lLXRpbWUtY29kZScgXSxcbiAgICAgIHF1YWxpZmllcnM6IFsgJ2hvbWUnLCAnd29yaycsICdtb2JpbGUnLCAnZmF4JywgJ3BhZ2VyJyBdLFxuICAgICAgcXVhbGlmaWVkVGVybXM6IFsgJ3RlbCcsICd0ZWwtY291bnRyeS1jb2RlJywgJ3RlbC1uYXRpb25hbCcsICd0ZWwtYXJlYS1jb2RlJywgJ3RlbC1sb2NhbCcsICd0ZWwtbG9jYWwtcHJlZml4JywgJ3RlbC1sb2NhbC1zdWZmaXgnLCAndGVsLWV4dGVuc2lvbicsICdlbWFpbCcsICdpbXBwJyBdLFxuICAgICAgbG9jYXRpb25zOiBbICdiaWxsaW5nJywgJ3NoaXBwaW5nJyBdXG4gICAgfTtcbiAgICBmdW5jdGlvbiBpc1ZhbGlkQXV0b2NvbXBsZXRlKGF1dG9jb21wbGV0ZVZhbHVlKSB7XG4gICAgICB2YXIgX3JlZjM2ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwgX3JlZjM2JGxvb3NlVHlwZWQgPSBfcmVmMzYubG9vc2VUeXBlZCwgbG9vc2VUeXBlZCA9IF9yZWYzNiRsb29zZVR5cGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzNiRsb29zZVR5cGVkLCBfcmVmMzYkc3RhdGVUZXJtcyA9IF9yZWYzNi5zdGF0ZVRlcm1zLCBzdGF0ZVRlcm1zID0gX3JlZjM2JHN0YXRlVGVybXMgPT09IHZvaWQgMCA/IFtdIDogX3JlZjM2JHN0YXRlVGVybXMsIF9yZWYzNiRsb2NhdGlvbnMgPSBfcmVmMzYubG9jYXRpb25zLCBsb2NhdGlvbnMgPSBfcmVmMzYkbG9jYXRpb25zID09PSB2b2lkIDAgPyBbXSA6IF9yZWYzNiRsb2NhdGlvbnMsIF9yZWYzNiRxdWFsaWZpZXJzID0gX3JlZjM2LnF1YWxpZmllcnMsIHF1YWxpZmllcnMgPSBfcmVmMzYkcXVhbGlmaWVycyA9PT0gdm9pZCAwID8gW10gOiBfcmVmMzYkcXVhbGlmaWVycywgX3JlZjM2JHN0YW5kYWxvbmVUZXJtID0gX3JlZjM2LnN0YW5kYWxvbmVUZXJtcywgc3RhbmRhbG9uZVRlcm1zID0gX3JlZjM2JHN0YW5kYWxvbmVUZXJtID09PSB2b2lkIDAgPyBbXSA6IF9yZWYzNiRzdGFuZGFsb25lVGVybSwgX3JlZjM2JHF1YWxpZmllZFRlcm1zID0gX3JlZjM2LnF1YWxpZmllZFRlcm1zLCBxdWFsaWZpZWRUZXJtcyA9IF9yZWYzNiRxdWFsaWZpZWRUZXJtcyA9PT0gdm9pZCAwID8gW10gOiBfcmVmMzYkcXVhbGlmaWVkVGVybXMsIF9yZWYzNiRpZ25vcmVkVmFsdWVzID0gX3JlZjM2Lmlnbm9yZWRWYWx1ZXMsIGlnbm9yZWRWYWx1ZXMgPSBfcmVmMzYkaWdub3JlZFZhbHVlcyA9PT0gdm9pZCAwID8gW10gOiBfcmVmMzYkaWdub3JlZFZhbHVlcztcbiAgICAgIGF1dG9jb21wbGV0ZVZhbHVlID0gYXV0b2NvbXBsZXRlVmFsdWUudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgICBzdGF0ZVRlcm1zID0gc3RhdGVUZXJtcy5jb25jYXQoX2F1dG9jb21wbGV0ZS5zdGF0ZVRlcm1zKTtcbiAgICAgIGlmIChzdGF0ZVRlcm1zLmluY2x1ZGVzKGF1dG9jb21wbGV0ZVZhbHVlKSB8fCBhdXRvY29tcGxldGVWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBxdWFsaWZpZXJzID0gcXVhbGlmaWVycy5jb25jYXQoX2F1dG9jb21wbGV0ZS5xdWFsaWZpZXJzKTtcbiAgICAgIGxvY2F0aW9ucyA9IGxvY2F0aW9ucy5jb25jYXQoX2F1dG9jb21wbGV0ZS5sb2NhdGlvbnMpO1xuICAgICAgc3RhbmRhbG9uZVRlcm1zID0gc3RhbmRhbG9uZVRlcm1zLmNvbmNhdChfYXV0b2NvbXBsZXRlLnN0YW5kYWxvbmVUZXJtcyk7XG4gICAgICBxdWFsaWZpZWRUZXJtcyA9IHF1YWxpZmllZFRlcm1zLmNvbmNhdChfYXV0b2NvbXBsZXRlLnF1YWxpZmllZFRlcm1zKTtcbiAgICAgIHZhciBhdXRvY29tcGxldGVUZXJtcyA9IGF1dG9jb21wbGV0ZVZhbHVlLnNwbGl0KC9cXHMrL2cpO1xuICAgICAgaWYgKGF1dG9jb21wbGV0ZVRlcm1zW2F1dG9jb21wbGV0ZVRlcm1zLmxlbmd0aCAtIDFdID09PSAnd2ViYXV0aG4nKSB7XG4gICAgICAgIGF1dG9jb21wbGV0ZVRlcm1zLnBvcCgpO1xuICAgICAgICBpZiAoYXV0b2NvbXBsZXRlVGVybXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWxvb3NlVHlwZWQpIHtcbiAgICAgICAgaWYgKGF1dG9jb21wbGV0ZVRlcm1zWzBdLmxlbmd0aCA+IDggJiYgYXV0b2NvbXBsZXRlVGVybXNbMF0uc3Vic3RyKDAsIDgpID09PSAnc2VjdGlvbi0nKSB7XG4gICAgICAgICAgYXV0b2NvbXBsZXRlVGVybXMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYXRpb25zLmluY2x1ZGVzKGF1dG9jb21wbGV0ZVRlcm1zWzBdKSkge1xuICAgICAgICAgIGF1dG9jb21wbGV0ZVRlcm1zLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHF1YWxpZmllcnMuaW5jbHVkZXMoYXV0b2NvbXBsZXRlVGVybXNbMF0pKSB7XG4gICAgICAgICAgYXV0b2NvbXBsZXRlVGVybXMuc2hpZnQoKTtcbiAgICAgICAgICBzdGFuZGFsb25lVGVybXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXV0b2NvbXBsZXRlVGVybXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgcHVycG9zZVRlcm0gPSBhdXRvY29tcGxldGVUZXJtc1thdXRvY29tcGxldGVUZXJtcy5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChpZ25vcmVkVmFsdWVzLmluY2x1ZGVzKHB1cnBvc2VUZXJtKSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YW5kYWxvbmVUZXJtcy5pbmNsdWRlcyhwdXJwb3NlVGVybSkgfHwgcXVhbGlmaWVkVGVybXMuaW5jbHVkZXMocHVycG9zZVRlcm0pO1xuICAgIH1cbiAgICB2YXIgaXNfdmFsaWRfYXV0b2NvbXBsZXRlX2RlZmF1bHQgPSBpc1ZhbGlkQXV0b2NvbXBsZXRlO1xuICAgIGZ1bmN0aW9uIGxhYmVsVmlydHVhbCh2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHJlZiwgY2FuZGlkYXRlO1xuICAgICAgaWYgKHZpcnR1YWxOb2RlLmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpKSB7XG4gICAgICAgIHJlZiA9IGlkcmVmc19kZWZhdWx0KHZpcnR1YWxOb2RlLmFjdHVhbE5vZGUsICdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgICAgY2FuZGlkYXRlID0gcmVmLm1hcChmdW5jdGlvbih0aGluZykge1xuICAgICAgICAgIHZhciB2Tm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KHRoaW5nKTtcbiAgICAgICAgICByZXR1cm4gdk5vZGUgPyB2aXNpYmxlX3ZpcnR1YWxfZGVmYXVsdCh2Tm9kZSkgOiAnJztcbiAgICAgICAgfSkuam9pbignICcpLnRyaW0oKTtcbiAgICAgICAgaWYgKGNhbmRpZGF0ZSkge1xuICAgICAgICAgIHJldHVybiBjYW5kaWRhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhbmRpZGF0ZSA9IHZpcnR1YWxOb2RlLmF0dHIoJ2FyaWEtbGFiZWwnKTtcbiAgICAgIGlmIChjYW5kaWRhdGUpIHtcbiAgICAgICAgY2FuZGlkYXRlID0gc2FuaXRpemVfZGVmYXVsdChjYW5kaWRhdGUpO1xuICAgICAgICBpZiAoY2FuZGlkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBsYWJlbF92aXJ0dWFsX2RlZmF1bHQgPSBsYWJlbFZpcnR1YWw7XG4gICAgZnVuY3Rpb24gdmlzaWJsZShlbGVtZW50LCBzY3JlZW5SZWFkZXIsIG5vUmVjdXJzaW5nKSB7XG4gICAgICBlbGVtZW50ID0gZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQoZWxlbWVudCk7XG4gICAgICByZXR1cm4gdmlzaWJsZV92aXJ0dWFsX2RlZmF1bHQoZWxlbWVudCwgc2NyZWVuUmVhZGVyLCBub1JlY3Vyc2luZyk7XG4gICAgfVxuICAgIHZhciB2aXNpYmxlX2RlZmF1bHQgPSB2aXNpYmxlO1xuICAgIGZ1bmN0aW9uIGxhYmVsVmlydHVhbDIodmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciByZWYsIGNhbmRpZGF0ZSwgZG9jO1xuICAgICAgY2FuZGlkYXRlID0gbGFiZWxfdmlydHVhbF9kZWZhdWx0KHZpcnR1YWxOb2RlKTtcbiAgICAgIGlmIChjYW5kaWRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2aXJ0dWFsTm9kZS5hdHRyKCdpZCcpKSB7XG4gICAgICAgIGlmICghdmlydHVhbE5vZGUuYWN0dWFsTm9kZSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCByZXNvbHZlIGV4cGxpY2l0IGxhYmVsIHJlZmVyZW5jZSBmb3Igbm9uLURPTSBub2RlcycpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZCA9IGVzY2FwZV9zZWxlY3Rvcl9kZWZhdWx0KHZpcnR1YWxOb2RlLmF0dHIoJ2lkJykpO1xuICAgICAgICBkb2MgPSBnZXRfcm9vdF9ub2RlX2RlZmF1bHQyKHZpcnR1YWxOb2RlLmFjdHVhbE5vZGUpO1xuICAgICAgICByZWYgPSBkb2MucXVlcnlTZWxlY3RvcignbGFiZWxbZm9yPVwiJyArIGlkICsgJ1wiXScpO1xuICAgICAgICBjYW5kaWRhdGUgPSByZWYgJiYgdmlzaWJsZV9kZWZhdWx0KHJlZiwgdHJ1ZSk7XG4gICAgICAgIGlmIChjYW5kaWRhdGUpIHtcbiAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWYgPSBjbG9zZXN0X2RlZmF1bHQodmlydHVhbE5vZGUsICdsYWJlbCcpO1xuICAgICAgY2FuZGlkYXRlID0gcmVmICYmIHZpc2libGVfdmlydHVhbF9kZWZhdWx0KHJlZiwgdHJ1ZSk7XG4gICAgICBpZiAoY2FuZGlkYXRlKSB7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGxhYmVsX3ZpcnR1YWxfZGVmYXVsdDIgPSBsYWJlbFZpcnR1YWwyO1xuICAgIGZ1bmN0aW9uIGxhYmVsKG5vZGUpIHtcbiAgICAgIG5vZGUgPSBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChub2RlKTtcbiAgICAgIHJldHVybiBsYWJlbF92aXJ0dWFsX2RlZmF1bHQyKG5vZGUpO1xuICAgIH1cbiAgICB2YXIgbGFiZWxfZGVmYXVsdCA9IGxhYmVsO1xuICAgIHZhciBuYXRpdmVFbGVtZW50VHlwZSA9IFsge1xuICAgICAgbWF0Y2hlczogWyB7XG4gICAgICAgIG5vZGVOYW1lOiAndGV4dGFyZWEnXG4gICAgICB9LCB7XG4gICAgICAgIG5vZGVOYW1lOiAnaW5wdXQnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgdHlwZTogWyAndGV4dCcsICdwYXNzd29yZCcsICdzZWFyY2gnLCAndGVsJywgJ2VtYWlsJywgJ3VybCcgXVxuICAgICAgICB9XG4gICAgICB9IF0sXG4gICAgICBuYW1pbmdNZXRob2RzOiAnbGFiZWxUZXh0J1xuICAgIH0sIHtcbiAgICAgIG1hdGNoZXM6IHtcbiAgICAgICAgbm9kZU5hbWU6ICdpbnB1dCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICB0eXBlOiBbICdidXR0b24nLCAnc3VibWl0JywgJ3Jlc2V0JyBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBuYW1pbmdNZXRob2RzOiBbICd2YWx1ZVRleHQnLCAndGl0bGVUZXh0JywgJ2J1dHRvbkRlZmF1bHRUZXh0JyBdXG4gICAgfSwge1xuICAgICAgbWF0Y2hlczoge1xuICAgICAgICBub2RlTmFtZTogJ2lucHV0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHR5cGU6ICdpbWFnZSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG5hbWluZ01ldGhvZHM6IFsgJ2FsdFRleHQnLCAndmFsdWVUZXh0JywgJ2xhYmVsVGV4dCcsICd0aXRsZVRleHQnLCAnYnV0dG9uRGVmYXVsdFRleHQnIF1cbiAgICB9LCB7XG4gICAgICBtYXRjaGVzOiAnYnV0dG9uJyxcbiAgICAgIG5hbWluZ01ldGhvZHM6ICdzdWJ0cmVlVGV4dCdcbiAgICB9LCB7XG4gICAgICBtYXRjaGVzOiAnZmllbGRzZXQnLFxuICAgICAgbmFtaW5nTWV0aG9kczogJ2ZpZWxkc2V0TGVnZW5kVGV4dCdcbiAgICB9LCB7XG4gICAgICBtYXRjaGVzOiAnT1VUUFVUJyxcbiAgICAgIG5hbWluZ01ldGhvZHM6ICdzdWJ0cmVlVGV4dCdcbiAgICB9LCB7XG4gICAgICBtYXRjaGVzOiBbIHtcbiAgICAgICAgbm9kZU5hbWU6ICdzZWxlY3QnXG4gICAgICB9LCB7XG4gICAgICAgIG5vZGVOYW1lOiAnaW5wdXQnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgdHlwZTogL14oPyF0ZXh0fHBhc3N3b3JkfHNlYXJjaHx0ZWx8ZW1haWx8dXJsfGJ1dHRvbnxzdWJtaXR8cmVzZXQpL1xuICAgICAgICB9XG4gICAgICB9IF0sXG4gICAgICBuYW1pbmdNZXRob2RzOiAnbGFiZWxUZXh0J1xuICAgIH0sIHtcbiAgICAgIG1hdGNoZXM6ICdzdW1tYXJ5JyxcbiAgICAgIG5hbWluZ01ldGhvZHM6ICdzdWJ0cmVlVGV4dCdcbiAgICB9LCB7XG4gICAgICBtYXRjaGVzOiAnZmlndXJlJyxcbiAgICAgIG5hbWluZ01ldGhvZHM6IFsgJ2ZpZ3VyZVRleHQnLCAndGl0bGVUZXh0JyBdXG4gICAgfSwge1xuICAgICAgbWF0Y2hlczogJ2ltZycsXG4gICAgICBuYW1pbmdNZXRob2RzOiAnYWx0VGV4dCdcbiAgICB9LCB7XG4gICAgICBtYXRjaGVzOiAndGFibGUnLFxuICAgICAgbmFtaW5nTWV0aG9kczogWyAndGFibGVDYXB0aW9uVGV4dCcsICd0YWJsZVN1bW1hcnlUZXh0JyBdXG4gICAgfSwge1xuICAgICAgbWF0Y2hlczogWyAnaHInLCAnYnInIF0sXG4gICAgICBuYW1pbmdNZXRob2RzOiBbICd0aXRsZVRleHQnLCAnc2luZ2xlU3BhY2UnIF1cbiAgICB9IF07XG4gICAgdmFyIG5hdGl2ZV9lbGVtZW50X3R5cGVfZGVmYXVsdCA9IG5hdGl2ZUVsZW1lbnRUeXBlO1xuICAgIGZ1bmN0aW9uIHZpc2libGVUZXh0Tm9kZXModk5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnRWaXNpYmxlID0gX2lzVmlzaWJsZU9uU2NyZWVuKHZOb2RlKTtcbiAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgdk5vZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQuYWN0dWFsTm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgIGlmIChwYXJlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgICBub2Rlcy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZXMgPSBub2Rlcy5jb25jYXQodmlzaWJsZVRleHROb2RlcyhjaGlsZCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgdmFyIHZpc2libGVfdGV4dF9ub2Rlc19kZWZhdWx0ID0gdmlzaWJsZVRleHROb2RlcztcbiAgICB2YXIgZ2V0VmlzaWJsZUNoaWxkVGV4dFJlY3RzID0gbWVtb2l6ZV9kZWZhdWx0KGZ1bmN0aW9uIGdldFZpc2libGVDaGlsZFRleHRSZWN0c01lbW9pemVkKG5vZGUpIHtcbiAgICAgIHZhciB2Tm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgdmFyIG5vZGVSZWN0ID0gdk5vZGUuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgdmFyIGNsaWVudFJlY3RzID0gW107XG4gICAgICB2YXIgb3ZlcmZsb3dIaWRkZW5Ob2RlcyA9IGdldF9vdmVyZmxvd19oaWRkZW5fYW5jZXN0b3JzX2RlZmF1bHQodk5vZGUpO1xuICAgICAgbm9kZS5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24odGV4dE5vZGUpIHtcbiAgICAgICAgaWYgKHRleHROb2RlLm5vZGVUeXBlICE9PSAzIHx8IHNhbml0aXplX2RlZmF1bHQodGV4dE5vZGUubm9kZVZhbHVlKSA9PT0gJycpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnRlbnRSZWN0cyA9IGdldENvbnRlbnRSZWN0cyh0ZXh0Tm9kZSk7XG4gICAgICAgIGlmIChpc091dHNpZGVOb2RlQm91bmRzKGNvbnRlbnRSZWN0cywgbm9kZVJlY3QpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsaWVudFJlY3RzLnB1c2guYXBwbHkoY2xpZW50UmVjdHMsIF90b0NvbnN1bWFibGVBcnJheShmaWx0ZXJIaWRkZW5SZWN0cyhjb250ZW50UmVjdHMsIG92ZXJmbG93SGlkZGVuTm9kZXMpKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjbGllbnRSZWN0cy5sZW5ndGggPyBjbGllbnRSZWN0cyA6IGZpbHRlckhpZGRlblJlY3RzKFsgbm9kZVJlY3QgXSwgb3ZlcmZsb3dIaWRkZW5Ob2Rlcyk7XG4gICAgfSk7XG4gICAgdmFyIGdldF92aXNpYmxlX2NoaWxkX3RleHRfcmVjdHNfZGVmYXVsdCA9IGdldFZpc2libGVDaGlsZFRleHRSZWN0cztcbiAgICBmdW5jdGlvbiBnZXRDb250ZW50UmVjdHMobm9kZSkge1xuICAgICAgdmFyIHJhbmdlMiA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICByYW5nZTIuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20ocmFuZ2UyLmdldENsaWVudFJlY3RzKCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc091dHNpZGVOb2RlQm91bmRzKHJlY3RzLCBub2RlUmVjdCkge1xuICAgICAgcmV0dXJuIHJlY3RzLnNvbWUoZnVuY3Rpb24ocmVjdCkge1xuICAgICAgICB2YXIgY2VudGVyUG9pbnQgPSBfZ2V0UmVjdENlbnRlcihyZWN0KTtcbiAgICAgICAgcmV0dXJuICFfaXNQb2ludEluUmVjdChjZW50ZXJQb2ludCwgbm9kZVJlY3QpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbHRlckhpZGRlblJlY3RzKGNvbnRlbnRSZWN0cywgb3ZlcmZsb3dIaWRkZW5Ob2Rlcykge1xuICAgICAgdmFyIHZpc2libGVSZWN0cyA9IFtdO1xuICAgICAgY29udGVudFJlY3RzLmZvckVhY2goZnVuY3Rpb24oY29udGVudFJlY3QpIHtcbiAgICAgICAgaWYgKGNvbnRlbnRSZWN0LndpZHRoIDwgMSB8fCBjb250ZW50UmVjdC5oZWlnaHQgPCAxKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2aXNpYmxlUmVjdCA9IG92ZXJmbG93SGlkZGVuTm9kZXMucmVkdWNlKGZ1bmN0aW9uKHJlY3QsIG92ZXJmbG93Tm9kZSkge1xuICAgICAgICAgIHJldHVybiByZWN0ICYmIF9nZXRJbnRlcnNlY3Rpb25SZWN0KHJlY3QsIG92ZXJmbG93Tm9kZS5ib3VuZGluZ0NsaWVudFJlY3QpO1xuICAgICAgICB9LCBjb250ZW50UmVjdCk7XG4gICAgICAgIGlmICh2aXNpYmxlUmVjdCkge1xuICAgICAgICAgIHZpc2libGVSZWN0cy5wdXNoKHZpc2libGVSZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmlzaWJsZVJlY3RzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRUZXh0RWxlbWVudFN0YWNrKG5vZGUpIHtcbiAgICAgIF9jcmVhdGVHcmlkKCk7XG4gICAgICB2YXIgdk5vZGUgPSBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChub2RlKTtcbiAgICAgIHZhciBncmlkID0gdk5vZGUuX2dyaWQ7XG4gICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGNsaWVudFJlY3RzID0gZ2V0X3Zpc2libGVfY2hpbGRfdGV4dF9yZWN0c19kZWZhdWx0KG5vZGUpO1xuICAgICAgcmV0dXJuIGNsaWVudFJlY3RzLm1hcChmdW5jdGlvbihyZWN0KSB7XG4gICAgICAgIHJldHVybiBnZXRSZWN0U3RhY2soZ3JpZCwgcmVjdCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGdldF90ZXh0X2VsZW1lbnRfc3RhY2tfZGVmYXVsdCA9IGdldFRleHRFbGVtZW50U3RhY2s7XG4gICAgdmFyIHZpc3VhbFJvbGVzID0gWyAnY2hlY2tib3gnLCAnaW1nJywgJ21ldGVyJywgJ3Byb2dyZXNzYmFyJywgJ3Njcm9sbGJhcicsICdyYWRpbycsICdzbGlkZXInLCAnc3BpbmJ1dHRvbicsICd0ZXh0Ym94JyBdO1xuICAgIGZ1bmN0aW9uIGlzVmlzdWFsQ29udGVudChlbCkge1xuICAgICAgdmFyIF9ub2RlTG9va3VwMTkgPSBfbm9kZUxvb2t1cChlbCksIHZOb2RlID0gX25vZGVMb29rdXAxOS52Tm9kZTtcbiAgICAgIHZhciByb2xlID0gYXhlLmNvbW1vbnMuYXJpYS5nZXRFeHBsaWNpdFJvbGUodk5vZGUpO1xuICAgICAgaWYgKHJvbGUpIHtcbiAgICAgICAgcmV0dXJuIHZpc3VhbFJvbGVzLmluZGV4T2Yocm9sZSkgIT09IC0xO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh2Tm9kZS5wcm9wcy5ub2RlTmFtZSkge1xuICAgICAgIGNhc2UgJ2ltZyc6XG4gICAgICAgY2FzZSAnaWZyYW1lJzpcbiAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgY2FzZSAnY2FudmFzJzpcbiAgICAgICBjYXNlICdzdmcnOlxuICAgICAgIGNhc2UgJ21hdGgnOlxuICAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgY2FzZSAna2V5Z2VuJzpcbiAgICAgICBjYXNlICdwcm9ncmVzcyc6XG4gICAgICAgY2FzZSAnbWV0ZXInOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgcmV0dXJuIHZOb2RlLnByb3BzLnR5cGUgIT09ICdoaWRkZW4nO1xuXG4gICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaXNfdmlzdWFsX2NvbnRlbnRfZGVmYXVsdCA9IGlzVmlzdWFsQ29udGVudDtcbiAgICB2YXIgaGlkZGVuVGV4dEVsbXMgPSBbICdoZWFkJywgJ3RpdGxlJywgJ3RlbXBsYXRlJywgJ3NjcmlwdCcsICdzdHlsZScsICdpZnJhbWUnLCAnb2JqZWN0JywgJ3ZpZGVvJywgJ2F1ZGlvJywgJ25vc2NyaXB0JyBdO1xuICAgIGZ1bmN0aW9uIGhhc0NoaWxkVGV4dE5vZGVzKGVsbSkge1xuICAgICAgaWYgKGhpZGRlblRleHRFbG1zLmluY2x1ZGVzKGVsbS5wcm9wcy5ub2RlTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsbS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uKF9yZWYzNykge1xuICAgICAgICB2YXIgcHJvcHMgPSBfcmVmMzcucHJvcHM7XG4gICAgICAgIHJldHVybiBwcm9wcy5ub2RlVHlwZSA9PT0gMyAmJiBwcm9wcy5ub2RlVmFsdWUudHJpbSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc0NvbnRlbnRWaXJ0dWFsKGVsbSwgbm9SZWN1cnNpb24sIGlnbm9yZUFyaWEpIHtcbiAgICAgIHJldHVybiBoYXNDaGlsZFRleHROb2RlcyhlbG0pIHx8IGlzX3Zpc3VhbF9jb250ZW50X2RlZmF1bHQoZWxtLmFjdHVhbE5vZGUpIHx8ICFpZ25vcmVBcmlhICYmICEhbGFiZWxfdmlydHVhbF9kZWZhdWx0KGVsbSkgfHwgIW5vUmVjdXJzaW9uICYmIGVsbS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjaGlsZC5hY3R1YWxOb2RlLm5vZGVUeXBlID09PSAxICYmIGhhc0NvbnRlbnRWaXJ0dWFsKGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgaGFzX2NvbnRlbnRfdmlydHVhbF9kZWZhdWx0ID0gaGFzQ29udGVudFZpcnR1YWw7XG4gICAgZnVuY3Rpb24gaGFzQ29udGVudChlbG0sIG5vUmVjdXJzaW9uLCBpZ25vcmVBcmlhKSB7XG4gICAgICBlbG0gPSBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChlbG0pO1xuICAgICAgcmV0dXJuIGhhc19jb250ZW50X3ZpcnR1YWxfZGVmYXVsdChlbG0sIG5vUmVjdXJzaW9uLCBpZ25vcmVBcmlhKTtcbiAgICB9XG4gICAgdmFyIGhhc19jb250ZW50X2RlZmF1bHQgPSBoYXNDb250ZW50O1xuICAgIGZ1bmN0aW9uIF9oYXNMYW5nVGV4dCh2aXJ0dWFsTm9kZSkge1xuICAgICAgaWYgKHR5cGVvZiB2aXJ0dWFsTm9kZS5jaGlsZHJlbiA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzQ2hpbGRUZXh0Tm9kZXModmlydHVhbE5vZGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZpcnR1YWxOb2RlLnByb3BzLm5vZGVUeXBlID09PSAxICYmIGlzX3Zpc3VhbF9jb250ZW50X2RlZmF1bHQodmlydHVhbE5vZGUpKSB7XG4gICAgICAgIHJldHVybiAhIWF4ZS5jb21tb25zLnRleHQuYWNjZXNzaWJsZVRleHRWaXJ0dWFsKHZpcnR1YWxOb2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2aXJ0dWFsTm9kZS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiAhY2hpbGQuYXR0cignbGFuZycpICYmIF9oYXNMYW5nVGV4dChjaGlsZCkgJiYgIV9pc0hpZGRlbkZvckV2ZXJ5b25lKGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnNlcnRlZEludG9Gb2N1c09yZGVyKGVsKSB7XG4gICAgICB2YXIgdGFiSW5kZXggPSBwYXJzZV90YWJpbmRleF9kZWZhdWx0KGVsLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSk7XG4gICAgICByZXR1cm4gdGFiSW5kZXggPiAtMSAmJiBfaXNGb2N1c2FibGUoZWwpICYmICFpc19uYXRpdmVseV9mb2N1c2FibGVfZGVmYXVsdChlbCk7XG4gICAgfVxuICAgIHZhciBpbnNlcnRlZF9pbnRvX2ZvY3VzX29yZGVyX2RlZmF1bHQgPSBpbnNlcnRlZEludG9Gb2N1c09yZGVyO1xuICAgIGZ1bmN0aW9uIGlzSGlkZGVuV2l0aENTUyhlbCwgZGVzY2VuZGVudFZpc2liaWxpdHlWYWx1ZSkge1xuICAgICAgdmFyIF9ub2RlTG9va3VwMjAgPSBfbm9kZUxvb2t1cChlbCksIHZOb2RlID0gX25vZGVMb29rdXAyMC52Tm9kZSwgZG9tTm9kZSA9IF9ub2RlTG9va3VwMjAuZG9tTm9kZTtcbiAgICAgIGlmICghdk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIF9pc0hpZGRlbldpdGhDU1MoZG9tTm9kZSwgZGVzY2VuZGVudFZpc2liaWxpdHlWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAodk5vZGUuX2lzSGlkZGVuV2l0aENTUyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHZOb2RlLl9pc0hpZGRlbldpdGhDU1MgPSBfaXNIaWRkZW5XaXRoQ1NTKGRvbU5vZGUsIGRlc2NlbmRlbnRWaXNpYmlsaXR5VmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZOb2RlLl9pc0hpZGRlbldpdGhDU1M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9pc0hpZGRlbldpdGhDU1MoZWwsIGRlc2NlbmRlbnRWaXNpYmlsaXR5VmFsdWUpIHtcbiAgICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gOSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZWwubm9kZVR5cGUgPT09IDExKSB7XG4gICAgICAgIGVsID0gZWwuaG9zdDtcbiAgICAgIH1cbiAgICAgIGlmIChbICdTVFlMRScsICdTQ1JJUFQnIF0uaW5jbHVkZXMoZWwubm9kZU5hbWUudG9VcHBlckNhc2UoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICAgICAgaWYgKCFzdHlsZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0eWxlIGRvZXMgbm90IGV4aXN0IGZvciB0aGUgZ2l2ZW4gZWxlbWVudC4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBkaXNwbGF5VmFsdWUgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5Jyk7XG4gICAgICBpZiAoZGlzcGxheVZhbHVlID09PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgSElEREVOX1ZJU0lCSUxJVFlfVkFMVUVTID0gWyAnaGlkZGVuJywgJ2NvbGxhcHNlJyBdO1xuICAgICAgdmFyIHZpc2liaWxpdHlWYWx1ZSA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3Zpc2liaWxpdHknKTtcbiAgICAgIGlmIChISURERU5fVklTSUJJTElUWV9WQUxVRVMuaW5jbHVkZXModmlzaWJpbGl0eVZhbHVlKSAmJiAhZGVzY2VuZGVudFZpc2liaWxpdHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChISURERU5fVklTSUJJTElUWV9WQUxVRVMuaW5jbHVkZXModmlzaWJpbGl0eVZhbHVlKSAmJiBkZXNjZW5kZW50VmlzaWJpbGl0eVZhbHVlICYmIEhJRERFTl9WSVNJQklMSVRZX1ZBTFVFUy5pbmNsdWRlcyhkZXNjZW5kZW50VmlzaWJpbGl0eVZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJlbnQgPSBnZXRfY29tcG9zZWRfcGFyZW50X2RlZmF1bHQoZWwpO1xuICAgICAgaWYgKHBhcmVudCAmJiAhSElEREVOX1ZJU0lCSUxJVFlfVkFMVUVTLmluY2x1ZGVzKHZpc2liaWxpdHlWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzSGlkZGVuV2l0aENTUyhwYXJlbnQsIHZpc2liaWxpdHlWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpc19oaWRkZW5fd2l0aF9jc3NfZGVmYXVsdCA9IGlzSGlkZGVuV2l0aENTUztcbiAgICBmdW5jdGlvbiBpc0hUTUw1KGRvYykge1xuICAgICAgdmFyIG5vZGUgPSBkb2MuZG9jdHlwZTtcbiAgICAgIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlLm5hbWUgPT09ICdodG1sJyAmJiAhbm9kZS5wdWJsaWNJZCAmJiAhbm9kZS5zeXN0ZW1JZDtcbiAgICB9XG4gICAgdmFyIGlzX2h0bWw1X2RlZmF1bHQgPSBpc0hUTUw1O1xuICAgIGZ1bmN0aW9uIGdldFJvbGVUeXBlKHJvbGUpIHtcbiAgICAgIHZhciBfd2luZG93MztcbiAgICAgIGlmIChyb2xlIGluc3RhbmNlb2YgYWJzdHJhY3RfdmlydHVhbF9ub2RlX2RlZmF1bHQgfHwgKF93aW5kb3czID0gd2luZG93KSAhPT0gbnVsbCAmJiBfd2luZG93MyAhPT0gdm9pZCAwICYmIF93aW5kb3czLk5vZGUgJiYgcm9sZSBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlKSB7XG4gICAgICAgIHJvbGUgPSBheGUuY29tbW9ucy5hcmlhLmdldFJvbGUocm9sZSk7XG4gICAgICB9XG4gICAgICB2YXIgcm9sZURlZiA9IHN0YW5kYXJkc19kZWZhdWx0LmFyaWFSb2xlc1tyb2xlXTtcbiAgICAgIHJldHVybiAocm9sZURlZiA9PT0gbnVsbCB8fCByb2xlRGVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByb2xlRGVmLnR5cGUpIHx8IG51bGw7XG4gICAgfVxuICAgIHZhciBnZXRfcm9sZV90eXBlX2RlZmF1bHQgPSBnZXRSb2xlVHlwZTtcbiAgICBmdW5jdGlvbiB3YWxrRG9tTm9kZShub2RlLCBmdW5jdG9yKSB7XG4gICAgICBpZiAoZnVuY3Rvcihub2RlLmFjdHVhbE5vZGUpICE9PSBmYWxzZSkge1xuICAgICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gd2Fsa0RvbU5vZGUoY2hpbGQsIGZ1bmN0b3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGJsb2NrTGlrZSA9IFsgJ2Jsb2NrJywgJ2xpc3QtaXRlbScsICd0YWJsZScsICdmbGV4JywgJ2dyaWQnLCAnaW5saW5lLWJsb2NrJyBdO1xuICAgIGZ1bmN0aW9uIGlzQmxvY2soZWxtKSB7XG4gICAgICB2YXIgZGlzcGxheTIgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbG0pLmdldFByb3BlcnR5VmFsdWUoJ2Rpc3BsYXknKTtcbiAgICAgIHJldHVybiBibG9ja0xpa2UuaW5jbHVkZXMoZGlzcGxheTIpIHx8IGRpc3BsYXkyLnN1YnN0cigwLCA2KSA9PT0gJ3RhYmxlLSc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEJsb2NrUGFyZW50KG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnRCbG9jayA9IGdldF9jb21wb3NlZF9wYXJlbnRfZGVmYXVsdChub2RlKTtcbiAgICAgIHdoaWxlIChwYXJlbnRCbG9jayAmJiAhaXNCbG9jayhwYXJlbnRCbG9jaykpIHtcbiAgICAgICAgcGFyZW50QmxvY2sgPSBnZXRfY29tcG9zZWRfcGFyZW50X2RlZmF1bHQocGFyZW50QmxvY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KHBhcmVudEJsb2NrKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNJblRleHRCbG9jayhub2RlLCBvcHRpb25zKSB7XG4gICAgICBpZiAoaXNCbG9jayhub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdmlydHVhbFBhcmVudCA9IGdldEJsb2NrUGFyZW50KG5vZGUpO1xuICAgICAgdmFyIHBhcmVudFRleHQgPSAnJztcbiAgICAgIHZhciB3aWRnZXRUZXh0ID0gJyc7XG4gICAgICB2YXIgaW5CckJsb2NrID0gMDtcbiAgICAgIHdhbGtEb21Ob2RlKHZpcnR1YWxQYXJlbnQsIGZ1bmN0aW9uKGN1cnJOb2RlKSB7XG4gICAgICAgIGlmIChpbkJyQmxvY2sgPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJOb2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgcGFyZW50VGV4dCArPSBjdXJyTm9kZS5ub2RlVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJOb2RlLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBub2RlTmFtZTIgPSAoY3Vyck5vZGUubm9kZU5hbWUgfHwgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmIChjdXJyTm9kZSA9PT0gbm9kZSkge1xuICAgICAgICAgIGluQnJCbG9jayA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFsgJ0JSJywgJ0hSJyBdLmluY2x1ZGVzKG5vZGVOYW1lMikpIHtcbiAgICAgICAgICBpZiAoaW5CckJsb2NrID09PSAwKSB7XG4gICAgICAgICAgICBwYXJlbnRUZXh0ID0gJyc7XG4gICAgICAgICAgICB3aWRnZXRUZXh0ID0gJyc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluQnJCbG9jayA9IDI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJOb2RlLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyB8fCBjdXJyTm9kZS5zdHlsZS5vdmVyZmxvdyA9PT0gJ2hpZGRlbicgfHwgIVsgJycsIG51bGwsICdub25lJyBdLmluY2x1ZGVzKGN1cnJOb2RlLnN0eWxlWydmbG9hdCddKSB8fCAhWyAnJywgbnVsbCwgJ3JlbGF0aXZlJyBdLmluY2x1ZGVzKGN1cnJOb2RlLnN0eWxlLnBvc2l0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChnZXRfcm9sZV90eXBlX2RlZmF1bHQoY3Vyck5vZGUpID09PSAnd2lkZ2V0Jykge1xuICAgICAgICAgIHdpZGdldFRleHQgKz0gY3Vyck5vZGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHBhcmVudFRleHQgPSBzYW5pdGl6ZV9kZWZhdWx0KHBhcmVudFRleHQpO1xuICAgICAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMubm9MZW5ndGhDb21wYXJlKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnRUZXh0Lmxlbmd0aCAhPT0gMDtcbiAgICAgIH1cbiAgICAgIHdpZGdldFRleHQgPSBzYW5pdGl6ZV9kZWZhdWx0KHdpZGdldFRleHQpO1xuICAgICAgcmV0dXJuIHBhcmVudFRleHQubGVuZ3RoID4gd2lkZ2V0VGV4dC5sZW5ndGg7XG4gICAgfVxuICAgIHZhciBpc19pbl90ZXh0X2Jsb2NrX2RlZmF1bHQgPSBpc0luVGV4dEJsb2NrO1xuICAgIGZ1bmN0aW9uIGlzTW9kYWxPcGVuKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIG1vZGFsUGVyY2VudCA9IG9wdGlvbnMubW9kYWxQZXJjZW50IHx8IC43NTtcbiAgICAgIGlmIChjYWNoZV9kZWZhdWx0LmdldCgnaXNNb2RhbE9wZW4nKSkge1xuICAgICAgICByZXR1cm4gY2FjaGVfZGVmYXVsdC5nZXQoJ2lzTW9kYWxPcGVuJyk7XG4gICAgICB9XG4gICAgICB2YXIgZGVmaW5pdGVNb2RhbHMgPSBxdWVyeV9zZWxlY3Rvcl9hbGxfZmlsdGVyX2RlZmF1bHQoYXhlLl90cmVlWzBdLCAnZGlhbG9nLCBbcm9sZT1kaWFsb2ddLCBbYXJpYS1tb2RhbD10cnVlXScsIF9pc1Zpc2libGVPblNjcmVlbik7XG4gICAgICBpZiAoZGVmaW5pdGVNb2RhbHMubGVuZ3RoKSB7XG4gICAgICAgIGNhY2hlX2RlZmF1bHQuc2V0KCdpc01vZGFsT3BlbicsIHRydWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3cG9ydCA9IGdldF92aWV3cG9ydF9zaXplX2RlZmF1bHQod2luZG93KTtcbiAgICAgIHZhciBwZXJjZW50V2lkdGggPSB2aWV3cG9ydC53aWR0aCAqIG1vZGFsUGVyY2VudDtcbiAgICAgIHZhciBwZXJjZW50SGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0ICogbW9kYWxQZXJjZW50O1xuICAgICAgdmFyIHggPSAodmlld3BvcnQud2lkdGggLSBwZXJjZW50V2lkdGgpIC8gMjtcbiAgICAgIHZhciB5ID0gKHZpZXdwb3J0LmhlaWdodCAtIHBlcmNlbnRIZWlnaHQpIC8gMjtcbiAgICAgIHZhciBwb2ludHMgPSBbIHtcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfSwge1xuICAgICAgICB4OiB2aWV3cG9ydC53aWR0aCAtIHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH0sIHtcbiAgICAgICAgeDogdmlld3BvcnQud2lkdGggLyAyLFxuICAgICAgICB5OiB2aWV3cG9ydC5oZWlnaHQgLyAyXG4gICAgICB9LCB7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHZpZXdwb3J0LmhlaWdodCAtIHlcbiAgICAgIH0sIHtcbiAgICAgICAgeDogdmlld3BvcnQud2lkdGggLSB4LFxuICAgICAgICB5OiB2aWV3cG9ydC5oZWlnaHQgLSB5XG4gICAgICB9IF07XG4gICAgICB2YXIgc3RhY2tzID0gcG9pbnRzLm1hcChmdW5jdGlvbihwb2ludCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludChwb2ludC54LCBwb2ludC55KSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBfbG9vcDQgPSBmdW5jdGlvbiBfbG9vcDQoKSB7XG4gICAgICAgIHZhciBtb2RhbEVsZW1lbnQgPSBzdGFja3NbX2kxMV0uZmluZChmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbG0pO1xuICAgICAgICAgIHJldHVybiBwYXJzZUludChzdHlsZS53aWR0aCwgMTApID49IHBlcmNlbnRXaWR0aCAmJiBwYXJzZUludChzdHlsZS5oZWlnaHQsIDEwKSA+PSBwZXJjZW50SGVpZ2h0ICYmIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BvaW50ZXItZXZlbnRzJykgIT09ICdub25lJyAmJiAoc3R5bGUucG9zaXRpb24gPT09ICdhYnNvbHV0ZScgfHwgc3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG1vZGFsRWxlbWVudCAmJiBzdGFja3MuZXZlcnkoZnVuY3Rpb24oc3RhY2spIHtcbiAgICAgICAgICByZXR1cm4gc3RhY2suaW5jbHVkZXMobW9kYWxFbGVtZW50KTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBjYWNoZV9kZWZhdWx0LnNldCgnaXNNb2RhbE9wZW4nLCB0cnVlKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdjogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0sIF9yZXQ7XG4gICAgICBmb3IgKHZhciBfaTExID0gMDsgX2kxMSA8IHN0YWNrcy5sZW5ndGg7IF9pMTErKykge1xuICAgICAgICBfcmV0ID0gX2xvb3A0KCk7XG4gICAgICAgIGlmIChfcmV0KSB7XG4gICAgICAgICAgcmV0dXJuIF9yZXQudjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2FjaGVfZGVmYXVsdC5zZXQoJ2lzTW9kYWxPcGVuJywgdm9pZCAwKTtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHZhciBpc19tb2RhbF9vcGVuX2RlZmF1bHQgPSBpc01vZGFsT3BlbjtcbiAgICBmdW5jdGlvbiBfaXNNdWx0aWxpbmUoZG9tTm9kZSkge1xuICAgICAgdmFyIG1hcmdpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMjtcbiAgICAgIHZhciByYW5nZTIgPSBkb21Ob2RlLm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgIHJhbmdlMi5zZXRTdGFydChkb21Ob2RlLCAwKTtcbiAgICAgIHJhbmdlMi5zZXRFbmQoZG9tTm9kZSwgZG9tTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICB2YXIgbGFzdExpbmVFbmQgPSAwO1xuICAgICAgdmFyIGxpbmVDb3VudCA9IDA7XG4gICAgICB2YXIgX2l0ZXJhdG9yNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJhbmdlMi5nZXRDbGllbnRSZWN0cygpKSwgX3N0ZXA1O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgdmFyIHJlY3QgPSBfc3RlcDUudmFsdWU7XG4gICAgICAgICAgaWYgKHJlY3QuaGVpZ2h0IDw9IG1hcmdpbikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsYXN0TGluZUVuZCA+IHJlY3QudG9wICsgbWFyZ2luKSB7XG4gICAgICAgICAgICBsYXN0TGluZUVuZCA9IE1hdGgubWF4KGxhc3RMaW5lRW5kLCByZWN0LmJvdHRvbSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaW5lQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGxhc3RMaW5lRW5kID0gcmVjdC5ib3R0b207XG4gICAgICAgICAgICBsaW5lQ291bnQrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I1LmYoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNOb2RlKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2Ygd2luZG93Lk5vZGU7XG4gICAgfVxuICAgIHZhciBpc19ub2RlX2RlZmF1bHQgPSBpc05vZGU7XG4gICAgdmFyIGNhY2hlS2V5ID0gJ2NvbG9yLmluY29tcGxldGVEYXRhJztcbiAgICB2YXIgaW5jb21wbGV0ZURhdGEgPSB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHJlYXNvbikge1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29tcGxldGUgZGF0YToga2V5IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF0YSA9IGNhY2hlX2RlZmF1bHQuZ2V0KGNhY2hlS2V5LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVhc29uKSB7XG4gICAgICAgICAgZGF0YVtrZXldID0gcmVhc29uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICB9LFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBkYXRhID0gY2FjaGVfZGVmYXVsdC5nZXQoY2FjaGVLZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhW2tleV07XG4gICAgICB9LFxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBjYWNoZV9kZWZhdWx0LnNldChjYWNoZUtleSwge30pO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGluY29tcGxldGVfZGF0YV9kZWZhdWx0ID0gaW5jb21wbGV0ZURhdGE7XG4gICAgZnVuY3Rpb24gZWxlbWVudEhhc0ltYWdlKGVsbSwgc3R5bGUpIHtcbiAgICAgIHZhciBncmFwaGljTm9kZXMgPSBbICdJTUcnLCAnQ0FOVkFTJywgJ09CSkVDVCcsICdJRlJBTUUnLCAnVklERU8nLCAnU1ZHJyBdO1xuICAgICAgdmFyIG5vZGVOYW1lMiA9IGVsbS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgaWYgKGdyYXBoaWNOb2Rlcy5pbmNsdWRlcyhub2RlTmFtZTIpKSB7XG4gICAgICAgIGluY29tcGxldGVfZGF0YV9kZWZhdWx0LnNldCgnYmdDb2xvcicsICdpbWdOb2RlJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgc3R5bGUgPSBzdHlsZSB8fCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbG0pO1xuICAgICAgdmFyIGJnSW1hZ2VTdHlsZSA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQtaW1hZ2UnKTtcbiAgICAgIHZhciBoYXNCZ0ltYWdlID0gYmdJbWFnZVN0eWxlICE9PSAnbm9uZSc7XG4gICAgICBpZiAoaGFzQmdJbWFnZSkge1xuICAgICAgICB2YXIgaGFzR3JhZGllbnQgPSAvZ3JhZGllbnQvLnRlc3QoYmdJbWFnZVN0eWxlKTtcbiAgICAgICAgaW5jb21wbGV0ZV9kYXRhX2RlZmF1bHQuc2V0KCdiZ0NvbG9yJywgaGFzR3JhZGllbnQgPyAnYmdHcmFkaWVudCcgOiAnYmdJbWFnZScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0JnSW1hZ2U7XG4gICAgfVxuICAgIHZhciBlbGVtZW50X2hhc19pbWFnZV9kZWZhdWx0ID0gZWxlbWVudEhhc0ltYWdlO1xuICAgIHZhciBpbXBvcnRzX2V4cG9ydHMgPSB7fTtcbiAgICBfX2V4cG9ydChpbXBvcnRzX2V4cG9ydHMsIHtcbiAgICAgIEFycmF5RnJvbTogZnVuY3Rpb24gQXJyYXlGcm9tKCkge1xuICAgICAgICByZXR1cm4gaW1wb3J0X2Zyb20yWydkZWZhdWx0J107XG4gICAgICB9LFxuICAgICAgQ29sb3JqczogZnVuY3Rpb24gQ29sb3JqcygpIHtcbiAgICAgICAgcmV0dXJuIF9Db2xvcjtcbiAgICAgIH0sXG4gICAgICBDc3NTZWxlY3RvclBhcnNlcjogZnVuY3Rpb24gQ3NzU2VsZWN0b3JQYXJzZXIoKSB7XG4gICAgICAgIHJldHVybiBpbXBvcnRfY3NzX3NlbGVjdG9yX3BhcnNlcjIuQ3NzU2VsZWN0b3JQYXJzZXI7XG4gICAgICB9LFxuICAgICAgZG9UOiBmdW5jdGlvbiBkb1QoKSB7XG4gICAgICAgIHJldHVybiBpbXBvcnRfZG90WydkZWZhdWx0J107XG4gICAgICB9LFxuICAgICAgZW1vamlSZWdleFRleHQ6IGZ1bmN0aW9uIGVtb2ppUmVnZXhUZXh0KCkge1xuICAgICAgICByZXR1cm4gZW1vamlfcmVnZXhfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBtZW1vaXplOiBmdW5jdGlvbiBtZW1vaXplKCkge1xuICAgICAgICByZXR1cm4gaW1wb3J0X21lbW9pemVlMlsnZGVmYXVsdCddO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBpbXBvcnRfZXM2X3Byb21pc2UgPSBfX3RvTW9kdWxlKHJlcXVpcmVfZXM2X3Byb21pc2UoKSk7XG4gICAgdmFyIGltcG9ydF90eXBlZGFycmF5ID0gX190b01vZHVsZShyZXF1aXJlX3R5cGVkYXJyYXkoKSk7XG4gICAgdmFyIGltcG9ydF93ZWFrbWFwX3BvbHlmaWxsID0gX190b01vZHVsZShyZXF1aXJlX3dlYWttYXBfcG9seWZpbGwoKSk7XG4gICAgdmFyIGltcG9ydF9oYXNfb3duID0gX190b01vZHVsZShyZXF1aXJlX2hhc19vd24zKCkpO1xuICAgIHZhciBpbXBvcnRfdmFsdWVzID0gX190b01vZHVsZShyZXF1aXJlX3ZhbHVlczMoKSk7XG4gICAgdmFyIGltcG9ydF9mcm9tID0gX190b01vZHVsZShyZXF1aXJlX2Zyb200KCkpO1xuICAgIGlmICghKCdoYXNPd24nIGluIE9iamVjdCkpIHtcbiAgICAgIE9iamVjdC5oYXNPd24gPSBpbXBvcnRfaGFzX293blsnZGVmYXVsdCddO1xuICAgIH1cbiAgICBpZiAoISgndmFsdWVzJyBpbiBPYmplY3QpKSB7XG4gICAgICBPYmplY3QudmFsdWVzID0gaW1wb3J0X3ZhbHVlc1snZGVmYXVsdCddO1xuICAgIH1cbiAgICBpZiAoISgnUHJvbWlzZScgaW4gd2luZG93KSkge1xuICAgICAgaW1wb3J0X2VzNl9wcm9taXNlWydkZWZhdWx0J10ucG9seWZpbGwoKTtcbiAgICB9XG4gICAgaWYgKCEoJ1VpbnQzMkFycmF5JyBpbiB3aW5kb3cpKSB7XG4gICAgICB3aW5kb3cuVWludDMyQXJyYXkgPSBpbXBvcnRfdHlwZWRhcnJheS5VaW50MzJBcnJheTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5VaW50MzJBcnJheSkge1xuICAgICAgaWYgKCEoJ3NvbWUnIGluIHdpbmRvdy5VaW50MzJBcnJheS5wcm90b3R5cGUpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuVWludDMyQXJyYXkucHJvdG90eXBlLCAnc29tZScsIHtcbiAgICAgICAgICB2YWx1ZTogQXJyYXkucHJvdG90eXBlLnNvbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoISgncmVkdWNlJyBpbiB3aW5kb3cuVWludDMyQXJyYXkucHJvdG90eXBlKSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlVpbnQzMkFycmF5LnByb3RvdHlwZSwgJ3JlZHVjZScsIHtcbiAgICAgICAgICB2YWx1ZTogQXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDAgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT09IHZvaWQgMCAmJiBzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgICB9KSgpO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnZmluZCcsIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHByZWRpY2F0ZSkge1xuICAgICAgICAgIGlmICh0aGlzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICBmb3IgKHZhciBfaTEyID0gMDsgX2kxMiA8IGxlbmd0aDsgX2kxMisrKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGxpc3RbX2kxMl07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIF9pMTIsIGxpc3QpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2ZpbmRJbmRleCcsIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICAgIGlmICh0aGlzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICBmb3IgKHZhciBfaTEzID0gMDsgX2kxMyA8IGxlbmd0aDsgX2kxMysrKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGxpc3RbX2kxM107XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIF9pMTMsIGxpc3QpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfaTEzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5pbmNsdWRlcykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2luY2x1ZGVzJywge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoc2VhcmNoRWxlbWVudCkge1xuICAgICAgICAgIHZhciBPID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICAgIHZhciBsZW4gPSBwYXJzZUludChPLmxlbmd0aCwgMTApIHx8IDA7XG4gICAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbjIgPSBwYXJzZUludChhcmd1bWVudHNbMV0sIDEwKSB8fCAwO1xuICAgICAgICAgIHZhciBrO1xuICAgICAgICAgIGlmIChuMiA+PSAwKSB7XG4gICAgICAgICAgICBrID0gbjI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGsgPSBsZW4gKyBuMjtcbiAgICAgICAgICAgIGlmIChrIDwgMCkge1xuICAgICAgICAgICAgICBrID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGN1cnJlbnRFbGVtZW50O1xuICAgICAgICAgIHdoaWxlIChrIDwgbGVuKSB7XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IE9ba107XG4gICAgICAgICAgICBpZiAoc2VhcmNoRWxlbWVudCA9PT0gY3VycmVudEVsZW1lbnQgfHwgc2VhcmNoRWxlbWVudCAhPT0gc2VhcmNoRWxlbWVudCAmJiBjdXJyZW50RWxlbWVudCAhPT0gY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdzb21lJywge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoZnVuKSB7XG4gICAgICAgICAgaWYgKHRoaXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnNvbWUgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgZnVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMiA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgMDtcbiAgICAgICAgICBmb3IgKHZhciBfaTE0ID0gMDsgX2kxNCA8IGxlbjsgX2kxNCsrKSB7XG4gICAgICAgICAgICBpZiAoX2kxNCBpbiB0ICYmIGZ1bi5jYWxsKHRoaXNBcmcsIHRbX2kxNF0sIF9pMTQsIHQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmZyb20pIHtcbiAgICAgIEFycmF5LmZyb20gPSBpbXBvcnRfZnJvbVsnZGVmYXVsdCddO1xuICAgIH1cbiAgICBpZiAoIVN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMpIHtcbiAgICAgIFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbihzZWFyY2gsIHN0YXJ0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhcnQgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleE9mKHNlYXJjaCwgc3RhcnQpICE9PSAtMTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUuZmxhdCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2ZsYXQnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZsYXQoKSB7XG4gICAgICAgICAgdmFyIGRlcHRoID0gaXNOYU4oYXJndW1lbnRzWzBdKSA/IDEgOiBOdW1iZXIoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICByZXR1cm4gZGVwdGggPyBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwodGhpcywgZnVuY3Rpb24oYWNjLCBjdXIpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cikpIHtcbiAgICAgICAgICAgICAgYWNjLnB1c2guYXBwbHkoYWNjLCBmbGF0LmNhbGwoY3VyLCBkZXB0aCAtIDEpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFjYy5wdXNoKGN1cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgIH0sIFtdKSA6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuTm9kZSAmJiAhKCdpc0Nvbm5lY3RlZCcgaW4gd2luZG93Lk5vZGUucHJvdG90eXBlKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5Ob2RlLnByb3RvdHlwZSwgJ2lzQ29ubmVjdGVkJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gIXRoaXMub3duZXJEb2N1bWVudCB8fCAhKHRoaXMub3duZXJEb2N1bWVudC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIHRoaXMuRE9DVU1FTlRfUE9TSVRJT05fRElTQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBpbXBvcnRfY3NzX3NlbGVjdG9yX3BhcnNlcjIgPSBfX3RvTW9kdWxlKHJlcXVpcmVfbGliKCkpO1xuICAgIHZhciBpbXBvcnRfZG90ID0gX190b01vZHVsZShyZXF1aXJlX2RvVCgpKTtcbiAgICB2YXIgaW1wb3J0X21lbW9pemVlMiA9IF9fdG9Nb2R1bGUocmVxdWlyZV9tZW1vaXplZSgpKTtcbiAgICBmdW5jdGlvbiBtdWx0aXBseU1hdHJpY2VzKEEsIEIpIHtcbiAgICAgIHZhciBtMyA9IEEubGVuZ3RoO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KEFbMF0pKSB7XG4gICAgICAgIEEgPSBbIEEgXTtcbiAgICAgIH1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShCWzBdKSkge1xuICAgICAgICBCID0gQi5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICAgIHJldHVybiBbIHggXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB2YXIgcDIgPSBCWzBdLmxlbmd0aDtcbiAgICAgIHZhciBCX2NvbHMgPSBCWzBdLm1hcChmdW5jdGlvbihfLCBpKSB7XG4gICAgICAgIHJldHVybiBCLm1hcChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgcmV0dXJuIHhbaV07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgcHJvZHVjdCA9IEEubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICByZXR1cm4gQl9jb2xzLm1hcChmdW5jdGlvbihjb2wpIHtcbiAgICAgICAgICB2YXIgcmV0ID0gMDtcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocm93KSkge1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihjb2wpLCBfc3RlcDY7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjYucygpOyAhKF9zdGVwNiA9IF9pdGVyYXRvcjYubigpKS5kb25lOyApIHtcbiAgICAgICAgICAgICAgICB2YXIgYzQgPSBfc3RlcDYudmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0ICs9IHJvdyAqIGM0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yNi5lKGVycik7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBfaXRlcmF0b3I2LmYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIF9pMTUgPSAwOyBfaTE1IDwgcm93Lmxlbmd0aDsgX2kxNSsrKSB7XG4gICAgICAgICAgICByZXQgKz0gcm93W19pMTVdICogKGNvbFtfaTE1XSB8fCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChtMyA9PT0gMSkge1xuICAgICAgICBwcm9kdWN0ID0gcHJvZHVjdFswXTtcbiAgICAgIH1cbiAgICAgIGlmIChwMiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcHJvZHVjdC5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICAgIHJldHVybiB4WzBdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9kdWN0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1N0cmluZyhzdHIpIHtcbiAgICAgIHJldHVybiB0eXBlKHN0cikgPT09ICdzdHJpbmcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0eXBlKG8pIHtcbiAgICAgIHZhciBzdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG4gICAgICByZXR1cm4gKHN0ci5tYXRjaCgvXlxcW29iamVjdFxccysoLio/KVxcXSQvKVsxXSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9QcmVjaXNpb24objIsIHByZWNpc2lvbikge1xuICAgICAgbjIgPSArbjI7XG4gICAgICBwcmVjaXNpb24gPSArcHJlY2lzaW9uO1xuICAgICAgdmFyIGludGVnZXJMZW5ndGggPSAoTWF0aC5mbG9vcihuMikgKyAnJykubGVuZ3RoO1xuICAgICAgaWYgKHByZWNpc2lvbiA+IGludGVnZXJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuICtuMi50b0ZpeGVkKHByZWNpc2lvbiAtIGludGVnZXJMZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHAxMCA9IE1hdGgucG93KDEwLCBpbnRlZ2VyTGVuZ3RoIC0gcHJlY2lzaW9uKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobjIgLyBwMTApICogcDEwO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZUZ1bmN0aW9uKHN0cikge1xuICAgICAgaWYgKCFzdHIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3RyID0gc3RyLnRyaW0oKTtcbiAgICAgIHZhciBpc0Z1bmN0aW9uUmVnZXggPSAvXihbYS16XSspXFwoKC4rPylcXCkkL2k7XG4gICAgICB2YXIgaXNOdW1iZXJSZWdleCA9IC9eLT9bXFxkLl0rJC87XG4gICAgICB2YXIgcGFydHMgPSBzdHIubWF0Y2goaXNGdW5jdGlvblJlZ2V4KTtcbiAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBwYXJ0c1syXS5yZXBsYWNlKC9cXC8/XFxzKihbLVxcdy5dKyg/OiV8ZGVnKT8pL2csIGZ1bmN0aW9uKCQwLCBhcmcpIHtcbiAgICAgICAgICBpZiAoLyUkLy50ZXN0KGFyZykpIHtcbiAgICAgICAgICAgIGFyZyA9IG5ldyBOdW1iZXIoYXJnLnNsaWNlKDAsIC0xKSAvIDEwMCk7XG4gICAgICAgICAgICBhcmcudHlwZSA9ICc8cGVyY2VudGFnZT4nO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL2RlZyQvLnRlc3QoYXJnKSkge1xuICAgICAgICAgICAgYXJnID0gbmV3IE51bWJlcigrYXJnLnNsaWNlKDAsIC0zKSk7XG4gICAgICAgICAgICBhcmcudHlwZSA9ICc8YW5nbGU+JztcbiAgICAgICAgICAgIGFyZy51bml0ID0gJ2RlZyc7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc051bWJlclJlZ2V4LnRlc3QoYXJnKSkge1xuICAgICAgICAgICAgYXJnID0gbmV3IE51bWJlcihhcmcpO1xuICAgICAgICAgICAgYXJnLnR5cGUgPSAnPG51bWJlcj4nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJDAuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICBhcmcgPSBhcmcgaW5zdGFuY2VvZiBOdW1iZXIgPyBhcmcgOiBuZXcgTnVtYmVyKGFyZyk7XG4gICAgICAgICAgICBhcmcuYWxwaGEgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogcGFydHNbMV0udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICByYXdOYW1lOiBwYXJ0c1sxXSxcbiAgICAgICAgICByYXdBcmdzOiBwYXJ0c1syXSxcbiAgICAgICAgICBhcmdzOiBhcmdzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gICAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcDIpIHtcbiAgICAgIGlmIChpc05hTihzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIGVuZDtcbiAgICAgIH1cbiAgICAgIGlmIChpc05hTihlbmQpKSB7XG4gICAgICAgIHJldHVybiBzdGFydDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFydCArIChlbmQgLSBzdGFydCkgKiBwMjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGVJbnYoc3RhcnQsIGVuZCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgLSBzdGFydCkgLyAoZW5kIC0gc3RhcnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYXBSYW5nZShmcm9tLCB0bzIsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gaW50ZXJwb2xhdGUodG8yWzBdLCB0bzJbMV0sIGludGVycG9sYXRlSW52KGZyb21bMF0sIGZyb21bMV0sIHZhbHVlKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlQ29vcmRHcmFtbWFyKGNvb3JkR3JhbW1hcnMpIHtcbiAgICAgIHJldHVybiBjb29yZEdyYW1tYXJzLm1hcChmdW5jdGlvbihjb29yZEdyYW1tYXIyKSB7XG4gICAgICAgIHJldHVybiBjb29yZEdyYW1tYXIyLnNwbGl0KCd8JykubWFwKGZ1bmN0aW9uKHR5cGUyKSB7XG4gICAgICAgICAgdHlwZTIgPSB0eXBlMi50cmltKCk7XG4gICAgICAgICAgdmFyIHJhbmdlMiA9IHR5cGUyLm1hdGNoKC9eKDxbYS16XSs+KVxcWygtP1suXFxkXSspLFxccyooLT9bLlxcZF0rKVxcXT8kLyk7XG4gICAgICAgICAgaWYgKHJhbmdlMikge1xuICAgICAgICAgICAgdmFyIHJldCA9IG5ldyBTdHJpbmcocmFuZ2UyWzFdKTtcbiAgICAgICAgICAgIHJldC5yYW5nZSA9IFsgK3JhbmdlMlsyXSwgK3JhbmdlMlszXSBdO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHR5cGUyO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgdXRpbCA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHRvUHJlY2lzaW9uOiB0b1ByZWNpc2lvbixcbiAgICAgIHBhcnNlRnVuY3Rpb246IHBhcnNlRnVuY3Rpb24sXG4gICAgICBsYXN0OiBsYXN0LFxuICAgICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgICAgaW50ZXJwb2xhdGVJbnY6IGludGVycG9sYXRlSW52LFxuICAgICAgbWFwUmFuZ2U6IG1hcFJhbmdlLFxuICAgICAgcGFyc2VDb29yZEdyYW1tYXI6IHBhcnNlQ29vcmRHcmFtbWFyLFxuICAgICAgbXVsdGlwbHlNYXRyaWNlczogbXVsdGlwbHlNYXRyaWNlc1xuICAgIH0pO1xuICAgIHZhciBIb29rcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gSG9va3MoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb29rcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKEhvb2tzLCBbIHtcbiAgICAgICAga2V5OiAnYWRkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChuYW1lLCBjYWxsYmFjaywgZmlyc3QpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSAhPSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgdGhpcy5hZGQobmFtZSwgYXJndW1lbnRzWzBdW25hbWVdLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAoQXJyYXkuaXNBcnJheShuYW1lKSA/IG5hbWUgOiBbIG5hbWUgXSkuZm9yRWFjaChmdW5jdGlvbihuYW1lMikge1xuICAgICAgICAgICAgdGhpc1tuYW1lMl0gPSB0aGlzW25hbWUyXSB8fCBbXTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICB0aGlzW25hbWUyXVtmaXJzdCA/ICd1bnNoaWZ0JyA6ICdwdXNoJ10oY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3J1bicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBydW4obmFtZSwgZW52KSB7XG4gICAgICAgICAgdGhpc1tuYW1lXSA9IHRoaXNbbmFtZV0gfHwgW107XG4gICAgICAgICAgdGhpc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKGVudiAmJiBlbnYuY29udGV4dCA/IGVudi5jb250ZXh0IDogZW52LCBlbnYpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IF0pO1xuICAgIH0oKTtcbiAgICB2YXIgaG9va3MgPSBuZXcgSG9va3MoKTtcbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICBnYW11dF9tYXBwaW5nOiAnbGNoLmMnLFxuICAgICAgcHJlY2lzaW9uOiA1LFxuICAgICAgZGVsdGFFOiAnNzYnXG4gICAgfTtcbiAgICB2YXIgV0hJVEVTID0ge1xuICAgICAgRDUwOiBbIC4zNDU3IC8gLjM1ODUsIDEsICgxIC0gLjM0NTcgLSAuMzU4NSkgLyAuMzU4NSBdLFxuICAgICAgRDY1OiBbIC4zMTI3IC8gLjMyOSwgMSwgKDEgLSAuMzEyNyAtIC4zMjkpIC8gLjMyOSBdXG4gICAgfTtcbiAgICBmdW5jdGlvbiBnZXRXaGl0ZShuYW1lKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSkge1xuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBXSElURVNbbmFtZV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkYXB0JDEoVzEsIFcyLCBYWVopIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICAgIFcxID0gZ2V0V2hpdGUoVzEpO1xuICAgICAgVzIgPSBnZXRXaGl0ZShXMik7XG4gICAgICBpZiAoIVcxIHx8ICFXMikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNaXNzaW5nIHdoaXRlIHBvaW50IHRvIGNvbnZlcnQgJy5jb25jYXQoIVcxID8gJ2Zyb20nIDogJycpLmNvbmNhdCghVzEgJiYgIVcyID8gJy8nIDogJycpLmNvbmNhdCghVzIgPyAndG8nIDogJycpKTtcbiAgICAgIH1cbiAgICAgIGlmIChXMSA9PT0gVzIpIHtcbiAgICAgICAgcmV0dXJuIFhZWjtcbiAgICAgIH1cbiAgICAgIHZhciBlbnYgPSB7XG4gICAgICAgIFcxOiBXMSxcbiAgICAgICAgVzI6IFcyLFxuICAgICAgICBYWVo6IFhZWixcbiAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgfTtcbiAgICAgIGhvb2tzLnJ1bignY2hyb21hdGljLWFkYXB0YXRpb24tc3RhcnQnLCBlbnYpO1xuICAgICAgaWYgKCFlbnYuTSkge1xuICAgICAgICBpZiAoZW52LlcxID09PSBXSElURVMuRDY1ICYmIGVudi5XMiA9PT0gV0hJVEVTLkQ1MCkge1xuICAgICAgICAgIGVudi5NID0gWyBbIDEuMDQ3OTI5ODIwODQwNTQ4OCwgLjAyMjk0Njc5MzM0MTAxOTA4OCwgLS4wNTAxOTIyMjk1NDMxMzU1NyBdLCBbIC4wMjk2Mjc4MTU2ODgxNTkzNDQsIC45OTA0MzQ0ODQ1NzMyNDksIC0uMDE3MDczODI1MDI5Mzg1MTQgXSwgWyAtLjAwOTI0MzA1ODE1MjU5MTE3OCwgLjAxNTA1NTE0NDg5NjU3Nzg5NSwgLjc1MTg3NDI4OTk1ODAwMDggXSBdO1xuICAgICAgICB9IGVsc2UgaWYgKGVudi5XMSA9PT0gV0hJVEVTLkQ1MCAmJiBlbnYuVzIgPT09IFdISVRFUy5ENjUpIHtcbiAgICAgICAgICBlbnYuTSA9IFsgWyAuOTU1NDczNDUyNzA0MjE4MiwgLS4wMjMwOTg1MzY4NzQyNjE0MjMsIC4wNjMyNTkzMDg2NjEwMjE3IF0sIFsgLS4wMjgzNjk3MDY5NjMyMDgxMzYsIDEuMDA5OTk1NDU4MDA1ODIyNiwgLjAyMTA0MTM5ODk2Njk0MzAwOCBdLCBbIC4wMTIzMTQwMDE2ODgzMTk4OTksIC0uMDIwNTA3Njk2NDMzNDc3OTEyLCAxLjMzMDM2NTkzNjYwODA3NTMgXSBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBob29rcy5ydW4oJ2Nocm9tYXRpYy1hZGFwdGF0aW9uLWVuZCcsIGVudik7XG4gICAgICBpZiAoZW52Lk0pIHtcbiAgICAgICAgcmV0dXJuIG11bHRpcGx5TWF0cmljZXMoZW52Lk0sIGVudi5YWVopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT25seSBCcmFkZm9yZCBDQVQgd2l0aCB3aGl0ZSBwb2ludHMgRDUwIGFuZCBENjUgc3VwcG9ydGVkIGZvciBub3cuJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBcXHUwM2I1JDQgPSA3NWUtNjtcbiAgICB2YXIgX0NvbG9yU3BhY2UyID0gKF9DbGFzc19icmFuZCA9IG5ldyBXZWFrU2V0KCksIF9wYXRoID0gbmV3IFdlYWtNYXAoKSwgZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBfQ29sb3JTcGFjZShvcHRpb25zKSB7XG4gICAgICAgIHZhciBfb3B0aW9ucyRjb29yZHMsIF9yZWYzOCwgX29wdGlvbnMkd2hpdGUsIF9vcHRpb25zJGZvcm1hdHMsIF90aGlzJGZvcm1hdHMkZnVuY3RpbywgX3RoaXMkZm9ybWF0cywgX3RoaXMkZm9ybWF0czI7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfQ29sb3JTcGFjZSk7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYyh0aGlzLCBfQ2xhc3NfYnJhbmQpO1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyh0aGlzLCBfcGF0aCwgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5pZCA9IG9wdGlvbnMuaWQ7XG4gICAgICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICAgICAgdGhpcy5iYXNlID0gb3B0aW9ucy5iYXNlID8gX0NvbG9yU3BhY2UyLmdldChvcHRpb25zLmJhc2UpIDogbnVsbDtcbiAgICAgICAgdGhpcy5hbGlhc2VzID0gb3B0aW9ucy5hbGlhc2VzO1xuICAgICAgICBpZiAodGhpcy5iYXNlKSB7XG4gICAgICAgICAgdGhpcy5mcm9tQmFzZSA9IG9wdGlvbnMuZnJvbUJhc2U7XG4gICAgICAgICAgdGhpcy50b0Jhc2UgPSBvcHRpb25zLnRvQmFzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2Nvb3JkcyA9IChfb3B0aW9ucyRjb29yZHMgPSBvcHRpb25zLmNvb3JkcykgIT09IG51bGwgJiYgX29wdGlvbnMkY29vcmRzICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRjb29yZHMgOiB0aGlzLmJhc2UuY29vcmRzO1xuICAgICAgICB0aGlzLmNvb3JkcyA9IF9jb29yZHM7XG4gICAgICAgIHZhciB3aGl0ZTIgPSAoX3JlZjM4ID0gKF9vcHRpb25zJHdoaXRlID0gb3B0aW9ucy53aGl0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkd2hpdGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJHdoaXRlIDogdGhpcy5iYXNlLndoaXRlKSAhPT0gbnVsbCAmJiBfcmVmMzggIT09IHZvaWQgMCA/IF9yZWYzOCA6ICdENjUnO1xuICAgICAgICB0aGlzLndoaXRlID0gZ2V0V2hpdGUod2hpdGUyKTtcbiAgICAgICAgdGhpcy5mb3JtYXRzID0gKF9vcHRpb25zJGZvcm1hdHMgPSBvcHRpb25zLmZvcm1hdHMpICE9PSBudWxsICYmIF9vcHRpb25zJGZvcm1hdHMgIT09IHZvaWQgMCA/IF9vcHRpb25zJGZvcm1hdHMgOiB7fTtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLmZvcm1hdHMpIHtcbiAgICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5mb3JtYXRzW25hbWVdO1xuICAgICAgICAgIGZvcm1hdC50eXBlIHx8IChmb3JtYXQudHlwZSA9ICdmdW5jdGlvbicpO1xuICAgICAgICAgIGZvcm1hdC5uYW1lIHx8IChmb3JtYXQubmFtZSA9IG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNzc0lkICYmICEoKF90aGlzJGZvcm1hdHMkZnVuY3RpbyA9IHRoaXMuZm9ybWF0cy5mdW5jdGlvbnMpICE9PSBudWxsICYmIF90aGlzJGZvcm1hdHMkZnVuY3RpbyAhPT0gdm9pZCAwICYmIF90aGlzJGZvcm1hdHMkZnVuY3Rpby5jb2xvcikpIHtcbiAgICAgICAgICB0aGlzLmZvcm1hdHMuY29sb3IgPSB7XG4gICAgICAgICAgICBpZDogb3B0aW9ucy5jc3NJZFxuICAgICAgICAgIH07XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjc3NJZCcsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvcHRpb25zLmNzc0lkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKF90aGlzJGZvcm1hdHMgPSB0aGlzLmZvcm1hdHMpICE9PSBudWxsICYmIF90aGlzJGZvcm1hdHMgIT09IHZvaWQgMCAmJiBfdGhpcyRmb3JtYXRzLmNvbG9yICYmICEoKF90aGlzJGZvcm1hdHMyID0gdGhpcy5mb3JtYXRzKSAhPT0gbnVsbCAmJiBfdGhpcyRmb3JtYXRzMiAhPT0gdm9pZCAwICYmIF90aGlzJGZvcm1hdHMyLmNvbG9yLmlkKSkge1xuICAgICAgICAgIHRoaXMuZm9ybWF0cy5jb2xvci5pZCA9IHRoaXMuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZlcnJlZCA9IG9wdGlvbnMucmVmZXJyZWQ7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldChfcGF0aCwgdGhpcywgX2Fzc2VydENsYXNzQnJhbmQoX0NsYXNzX2JyYW5kLCB0aGlzLCBfZ2V0UGF0aCkuY2FsbCh0aGlzKS5yZXZlcnNlKCkpO1xuICAgICAgICBob29rcy5ydW4oJ2NvbG9yc3BhY2UtaW5pdC1lbmQnLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoX0NvbG9yU3BhY2UsIFsge1xuICAgICAgICBrZXk6ICdpbkdhbXV0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluR2FtdXQoY29vcmRzKSB7XG4gICAgICAgICAgdmFyIF9yZWYzOSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sIF9yZWYzOSRlcHNpbG9uID0gX3JlZjM5LmVwc2lsb24sIGVwc2lsb24gPSBfcmVmMzkkZXBzaWxvbiA9PT0gdm9pZCAwID8gXFx1MDNiNSQ0IDogX3JlZjM5JGVwc2lsb247XG4gICAgICAgICAgaWYgKHRoaXMuaXNQb2xhcikge1xuICAgICAgICAgICAgY29vcmRzID0gdGhpcy50b0Jhc2UoY29vcmRzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2UuaW5HYW11dChjb29yZHMsIHtcbiAgICAgICAgICAgICAgZXBzaWxvbjogZXBzaWxvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjb29yZE1ldGEgPSBPYmplY3QudmFsdWVzKHRoaXMuY29vcmRzKTtcbiAgICAgICAgICByZXR1cm4gY29vcmRzLmV2ZXJ5KGZ1bmN0aW9uKGM0LCBpKSB7XG4gICAgICAgICAgICB2YXIgbWV0YSA9IGNvb3JkTWV0YVtpXTtcbiAgICAgICAgICAgIGlmIChtZXRhLnR5cGUgIT09ICdhbmdsZScgJiYgbWV0YS5yYW5nZSkge1xuICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGM0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBfbWV0YSRyYW5nZSA9IF9zbGljZWRUb0FycmF5KG1ldGEucmFuZ2UsIDIpLCBtaW4gPSBfbWV0YSRyYW5nZVswXSwgbWF4MiA9IF9tZXRhJHJhbmdlWzFdO1xuICAgICAgICAgICAgICByZXR1cm4gKG1pbiA9PT0gdm9pZCAwIHx8IGM0ID49IG1pbiAtIGVwc2lsb24pICYmIChtYXgyID09PSB2b2lkIDAgfHwgYzQgPD0gbWF4MiArIGVwc2lsb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnY3NzSWQnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkZm9ybWF0cyRmdW5jdGlvMjtcbiAgICAgICAgICByZXR1cm4gKChfdGhpcyRmb3JtYXRzJGZ1bmN0aW8yID0gdGhpcy5mb3JtYXRzLmZ1bmN0aW9ucykgPT09IG51bGwgfHwgX3RoaXMkZm9ybWF0cyRmdW5jdGlvMiA9PT0gdm9pZCAwIHx8IChfdGhpcyRmb3JtYXRzJGZ1bmN0aW8yID0gX3RoaXMkZm9ybWF0cyRmdW5jdGlvMi5jb2xvcikgPT09IG51bGwgfHwgX3RoaXMkZm9ybWF0cyRmdW5jdGlvMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZm9ybWF0cyRmdW5jdGlvMi5pZCkgfHwgdGhpcy5pZDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdpc1BvbGFyJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaWQgaW4gdGhpcy5jb29yZHMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvb3Jkc1tpZF0udHlwZSA9PT0gJ2FuZ2xlJykge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEZvcm1hdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGb3JtYXQoZm9ybWF0KSB7XG4gICAgICAgICAgaWYgKF90eXBlb2YoZm9ybWF0KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IF9hc3NlcnRDbGFzc0JyYW5kKF9DbGFzc19icmFuZCwgdGhpcywgX3Byb2Nlc3NGb3JtYXQpLmNhbGwodGhpcywgZm9ybWF0KTtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXQ7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgICAgICByZXQgPSBPYmplY3QudmFsdWVzKHRoaXMuZm9ybWF0cylbMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldCA9IHRoaXMuZm9ybWF0c1tmb3JtYXRdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICByZXQgPSBfYXNzZXJ0Q2xhc3NCcmFuZChfQ2xhc3NfYnJhbmQsIHRoaXMsIF9wcm9jZXNzRm9ybWF0KS5jYWxsKHRoaXMsIHJldCk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICd0bycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0byhzcGFjZSwgY29vcmRzKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHZhciBfcmVmNDAgPSBbIHNwYWNlLnNwYWNlLCBzcGFjZS5jb29yZHMgXTtcbiAgICAgICAgICAgIHNwYWNlID0gX3JlZjQwWzBdO1xuICAgICAgICAgICAgY29vcmRzID0gX3JlZjQwWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGFjZSA9IF9Db2xvclNwYWNlMi5nZXQoc3BhY2UpO1xuICAgICAgICAgIGlmICh0aGlzID09PSBzcGFjZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvb3JkcztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29vcmRzID0gY29vcmRzLm1hcChmdW5jdGlvbihjNCkge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTihjNCkgPyAwIDogYzQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIG15UGF0aCA9IF9jbGFzc1ByaXZhdGVGaWVsZEdldChfcGF0aCwgdGhpcyk7XG4gICAgICAgICAgdmFyIG90aGVyUGF0aCA9IF9jbGFzc1ByaXZhdGVGaWVsZEdldChfcGF0aCwgc3BhY2UpO1xuICAgICAgICAgIHZhciBjb25uZWN0aW9uU3BhY2UsIGNvbm5lY3Rpb25TcGFjZUluZGV4O1xuICAgICAgICAgIGZvciAodmFyIF9pMTYgPSAwOyBfaTE2IDwgbXlQYXRoLmxlbmd0aDsgX2kxNisrKSB7XG4gICAgICAgICAgICBpZiAobXlQYXRoW19pMTZdID09PSBvdGhlclBhdGhbX2kxNl0pIHtcbiAgICAgICAgICAgICAgY29ubmVjdGlvblNwYWNlID0gbXlQYXRoW19pMTZdO1xuICAgICAgICAgICAgICBjb25uZWN0aW9uU3BhY2VJbmRleCA9IF9pMTY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjb25uZWN0aW9uU3BhY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNvbnZlcnQgYmV0d2VlbiBjb2xvciBzcGFjZXMgJy5jb25jYXQodGhpcywgJyBhbmQgJykuY29uY2F0KHNwYWNlLCAnOiBubyBjb25uZWN0aW9uIHNwYWNlIHdhcyBmb3VuZCcpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgX2kxNyA9IG15UGF0aC5sZW5ndGggLSAxOyBfaTE3ID4gY29ubmVjdGlvblNwYWNlSW5kZXg7IF9pMTctLSkge1xuICAgICAgICAgICAgY29vcmRzID0gbXlQYXRoW19pMTddLnRvQmFzZShjb29yZHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBfaTE4ID0gY29ubmVjdGlvblNwYWNlSW5kZXggKyAxOyBfaTE4IDwgb3RoZXJQYXRoLmxlbmd0aDsgX2kxOCsrKSB7XG4gICAgICAgICAgICBjb29yZHMgPSBvdGhlclBhdGhbX2kxOF0uZnJvbUJhc2UoY29vcmRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvb3JkcztcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdmcm9tJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb20oc3BhY2UsIGNvb3Jkcykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjQxID0gWyBzcGFjZS5zcGFjZSwgc3BhY2UuY29vcmRzIF07XG4gICAgICAgICAgICBzcGFjZSA9IF9yZWY0MVswXTtcbiAgICAgICAgICAgIGNvb3JkcyA9IF9yZWY0MVsxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BhY2UgPSBfQ29sb3JTcGFjZTIuZ2V0KHNwYWNlKTtcbiAgICAgICAgICByZXR1cm4gc3BhY2UudG8odGhpcywgY29vcmRzKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICByZXR1cm4gJycuY29uY2F0KHRoaXMubmFtZSwgJyAoJykuY29uY2F0KHRoaXMuaWQsICcpJyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0TWluQ29vcmRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1pbkNvb3JkcygpIHtcbiAgICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaWQgaW4gdGhpcy5jb29yZHMpIHtcbiAgICAgICAgICAgIHZhciBfcmFuZ2UyJG1pbjtcbiAgICAgICAgICAgIHZhciBtZXRhID0gdGhpcy5jb29yZHNbaWRdO1xuICAgICAgICAgICAgdmFyIHJhbmdlMiA9IG1ldGEucmFuZ2UgfHwgbWV0YS5yZWZSYW5nZTtcbiAgICAgICAgICAgIHJldC5wdXNoKChfcmFuZ2UyJG1pbiA9IHJhbmdlMiA9PT0gbnVsbCB8fCByYW5nZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJhbmdlMi5taW4pICE9PSBudWxsICYmIF9yYW5nZTIkbWluICE9PSB2b2lkIDAgPyBfcmFuZ2UyJG1pbiA6IDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICB9IF0sIFsge1xuICAgICAgICBrZXk6ICdhbGwnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoT2JqZWN0LnZhbHVlcyhfQ29sb3JTcGFjZTIucmVnaXN0cnkpKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVnaXN0ZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIoaWQsIHNwYWNlKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHNwYWNlID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgaWQgPSBzcGFjZS5pZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BhY2UgPSB0aGlzLmdldChzcGFjZSk7XG4gICAgICAgICAgaWYgKHRoaXMucmVnaXN0cnlbaWRdICYmIHRoaXMucmVnaXN0cnlbaWRdICE9PSBzcGFjZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEdXBsaWNhdGUgY29sb3Igc3BhY2UgcmVnaXN0cmF0aW9uOiBcXCcnLmNvbmNhdChpZCwgJ1xcJycpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yZWdpc3RyeVtpZF0gPSBzcGFjZTtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBzcGFjZS5hbGlhc2VzKSB7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHNwYWNlLmFsaWFzZXMpLCBfc3RlcDc7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjcucygpOyAhKF9zdGVwNyA9IF9pdGVyYXRvcjcubigpKS5kb25lOyApIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxpYXMgPSBfc3RlcDcudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlcihhbGlhcywgc3BhY2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yNy5lKGVycik7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBfaXRlcmF0b3I3LmYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNwYWNlO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoc3BhY2UpIHtcbiAgICAgICAgICBpZiAoIXNwYWNlIHx8IHNwYWNlIGluc3RhbmNlb2YgX0NvbG9yU3BhY2UyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3BhY2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhcmdUeXBlID0gdHlwZShzcGFjZSk7XG4gICAgICAgICAgaWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gX0NvbG9yU3BhY2UyLnJlZ2lzdHJ5W3NwYWNlLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAgICAgaWYgKCFyZXQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gY29sb3Igc3BhY2UgZm91bmQgd2l0aCBpZCA9IFwiJy5jb25jYXQoc3BhY2UsICdcIicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYWx0ZXJuYXRpdmVzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIGFsdGVybmF0aXZlc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFsdGVybmF0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBfQ29sb3JTcGFjZTIuZ2V0LmFwcGx5KF9Db2xvclNwYWNlMiwgYWx0ZXJuYXRpdmVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignJy5jb25jYXQoc3BhY2UsICcgaXMgbm90IGEgdmFsaWQgY29sb3Igc3BhY2UnKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVzb2x2ZUNvb3JkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmVDb29yZChyZWYsIHdvcmtpbmdTcGFjZSkge1xuICAgICAgICAgIHZhciBjb29yZFR5cGUgPSB0eXBlKHJlZik7XG4gICAgICAgICAgdmFyIHNwYWNlLCBjb29yZDtcbiAgICAgICAgICBpZiAoY29vcmRUeXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHJlZi5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgICAgICAgIHZhciBfcmVmJHNwbGl0ID0gcmVmLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgIHZhciBfcmVmJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9yZWYkc3BsaXQsIDIpO1xuICAgICAgICAgICAgICBzcGFjZSA9IF9yZWYkc3BsaXQyWzBdO1xuICAgICAgICAgICAgICBjb29yZCA9IF9yZWYkc3BsaXQyWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3BhY2UgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIGNvb3JkID0gcmVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZWYpKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjQyID0gX3NsaWNlZFRvQXJyYXkocmVmLCAyKTtcbiAgICAgICAgICAgIHNwYWNlID0gX3JlZjQyWzBdO1xuICAgICAgICAgICAgY29vcmQgPSBfcmVmNDJbMV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNwYWNlID0gcmVmLnNwYWNlO1xuICAgICAgICAgICAgY29vcmQgPSByZWYuY29vcmRJZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BhY2UgPSBfQ29sb3JTcGFjZTIuZ2V0KHNwYWNlKTtcbiAgICAgICAgICBpZiAoIXNwYWNlKSB7XG4gICAgICAgICAgICBzcGFjZSA9IHdvcmtpbmdTcGFjZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFzcGFjZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHJlc29sdmUgY29vcmRpbmF0ZSByZWZlcmVuY2UgJy5jb25jYXQocmVmLCAnOiBObyBjb2xvciBzcGFjZSBzcGVjaWZpZWQgYW5kIHJlbGF0aXZlIHJlZmVyZW5jZXMgYXJlIG5vdCBhbGxvd2VkIGhlcmUnKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvb3JkVHlwZSA9IHR5cGUoY29vcmQpO1xuICAgICAgICAgIGlmIChjb29yZFR5cGUgPT09ICdudW1iZXInIHx8IGNvb3JkVHlwZSA9PT0gJ3N0cmluZycgJiYgY29vcmQgPj0gMCkge1xuICAgICAgICAgICAgdmFyIG1ldGEgPSBPYmplY3QuZW50cmllcyhzcGFjZS5jb29yZHMpW2Nvb3JkXTtcbiAgICAgICAgICAgIGlmIChtZXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAgc3BhY2U6IHNwYWNlLFxuICAgICAgICAgICAgICAgIGlkOiBtZXRhWzBdLFxuICAgICAgICAgICAgICAgIGluZGV4OiBjb29yZFxuICAgICAgICAgICAgICB9LCBtZXRhWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc3BhY2UgPSBfQ29sb3JTcGFjZTIuZ2V0KHNwYWNlKTtcbiAgICAgICAgICB2YXIgbm9ybWFsaXplZENvb3JkID0gY29vcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgZm9yICh2YXIgaWQgaW4gc3BhY2UuY29vcmRzKSB7XG4gICAgICAgICAgICB2YXIgX21ldGEkbmFtZTtcbiAgICAgICAgICAgIHZhciBfbWV0YSA9IHNwYWNlLmNvb3Jkc1tpZF07XG4gICAgICAgICAgICBpZiAoaWQudG9Mb3dlckNhc2UoKSA9PT0gbm9ybWFsaXplZENvb3JkIHx8ICgoX21ldGEkbmFtZSA9IF9tZXRhLm5hbWUpID09PSBudWxsIHx8IF9tZXRhJG5hbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tZXRhJG5hbWUudG9Mb3dlckNhc2UoKSkgPT09IG5vcm1hbGl6ZWRDb29yZCkge1xuICAgICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICAgICAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgfSwgX21ldGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBcIicuY29uY2F0KGNvb3JkLCAnXCIgY29vcmRpbmF0ZSBmb3VuZCBpbiAnKS5jb25jYXQoc3BhY2UubmFtZSwgJy4gSXRzIGNvb3JkaW5hdGVzIGFyZTogJykuY29uY2F0KE9iamVjdC5rZXlzKHNwYWNlLmNvb3Jkcykuam9pbignLCAnKSkpO1xuICAgICAgICB9XG4gICAgICB9IF0pO1xuICAgIH0oKSk7XG4gICAgZnVuY3Rpb24gX3Byb2Nlc3NGb3JtYXQoZm9ybWF0KSB7XG4gICAgICBpZiAoZm9ybWF0LmNvb3JkcyAmJiAhZm9ybWF0LmNvb3JkR3JhbW1hcikge1xuICAgICAgICBmb3JtYXQudHlwZSB8fCAoZm9ybWF0LnR5cGUgPSAnZnVuY3Rpb24nKTtcbiAgICAgICAgZm9ybWF0Lm5hbWUgfHwgKGZvcm1hdC5uYW1lID0gJ2NvbG9yJyk7XG4gICAgICAgIGZvcm1hdC5jb29yZEdyYW1tYXIgPSBwYXJzZUNvb3JkR3JhbW1hcihmb3JtYXQuY29vcmRzKTtcbiAgICAgICAgdmFyIGNvb3JkRm9ybWF0cyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuY29vcmRzKS5tYXAoZnVuY3Rpb24oX3JlZjE1MCwgaSkge1xuICAgICAgICAgIHZhciBfcmVmMTUxID0gX3NsaWNlZFRvQXJyYXkoX3JlZjE1MCwgMiksIGlkID0gX3JlZjE1MVswXSwgY29vcmRNZXRhID0gX3JlZjE1MVsxXTtcbiAgICAgICAgICB2YXIgb3V0cHV0VHlwZSA9IGZvcm1hdC5jb29yZEdyYW1tYXJbaV1bMF07XG4gICAgICAgICAgdmFyIGZyb21SYW5nZSA9IGNvb3JkTWV0YS5yYW5nZSB8fCBjb29yZE1ldGEucmVmUmFuZ2U7XG4gICAgICAgICAgdmFyIHRvUmFuZ2UgPSBvdXRwdXRUeXBlLnJhbmdlLCBzdWZmaXggPSAnJztcbiAgICAgICAgICBpZiAob3V0cHV0VHlwZSA9PSAnPHBlcmNlbnRhZ2U+Jykge1xuICAgICAgICAgICAgdG9SYW5nZSA9IFsgMCwgMTAwIF07XG4gICAgICAgICAgICBzdWZmaXggPSAnJSc7XG4gICAgICAgICAgfSBlbHNlIGlmIChvdXRwdXRUeXBlID09ICc8YW5nbGU+Jykge1xuICAgICAgICAgICAgc3VmZml4ID0gJ2RlZyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmcm9tUmFuZ2U6IGZyb21SYW5nZSxcbiAgICAgICAgICAgIHRvUmFuZ2U6IHRvUmFuZ2UsXG4gICAgICAgICAgICBzdWZmaXg6IHN1ZmZpeFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBmb3JtYXQuc2VyaWFsaXplQ29vcmRzID0gZnVuY3Rpb24oY29vcmRzLCBwcmVjaXNpb24pIHtcbiAgICAgICAgICByZXR1cm4gY29vcmRzLm1hcChmdW5jdGlvbihjNCwgaSkge1xuICAgICAgICAgICAgdmFyIF9jb29yZEZvcm1hdHMkaSA9IGNvb3JkRm9ybWF0c1tpXSwgZnJvbVJhbmdlID0gX2Nvb3JkRm9ybWF0cyRpLmZyb21SYW5nZSwgdG9SYW5nZSA9IF9jb29yZEZvcm1hdHMkaS50b1JhbmdlLCBzdWZmaXggPSBfY29vcmRGb3JtYXRzJGkuc3VmZml4O1xuICAgICAgICAgICAgaWYgKGZyb21SYW5nZSAmJiB0b1JhbmdlKSB7XG4gICAgICAgICAgICAgIGM0ID0gbWFwUmFuZ2UoZnJvbVJhbmdlLCB0b1JhbmdlLCBjNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjNCA9IHRvUHJlY2lzaW9uKGM0LCBwcmVjaXNpb24pO1xuICAgICAgICAgICAgaWYgKHN1ZmZpeCkge1xuICAgICAgICAgICAgICBjNCArPSBzdWZmaXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYzQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZ2V0UGF0aCgpIHtcbiAgICAgIHZhciByZXQgPSBbIHRoaXMgXTtcbiAgICAgIGZvciAodmFyIF9zcGFjZTIgPSB0aGlzOyBfc3BhY2UyID0gX3NwYWNlMi5iYXNlOyApIHtcbiAgICAgICAgcmV0LnB1c2goX3NwYWNlMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICB2YXIgQ29sb3JTcGFjZSA9IF9Db2xvclNwYWNlMjtcbiAgICBfX3B1YmxpY0ZpZWxkKENvbG9yU3BhY2UsICdyZWdpc3RyeScsIHt9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKENvbG9yU3BhY2UsICdERUZBVUxUX0ZPUk1BVCcsIHtcbiAgICAgIHR5cGU6ICdmdW5jdGlvbnMnLFxuICAgICAgbmFtZTogJ2NvbG9yJ1xuICAgIH0pO1xuICAgIHZhciBYWVpfRDY1ID0gbmV3IENvbG9yU3BhY2Uoe1xuICAgICAgaWQ6ICd4eXotZDY1JyxcbiAgICAgIG5hbWU6ICdYWVogRDY1JyxcbiAgICAgIGNvb3Jkczoge1xuICAgICAgICB4OiB7XG4gICAgICAgICAgbmFtZTogJ1gnXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHtcbiAgICAgICAgICBuYW1lOiAnWSdcbiAgICAgICAgfSxcbiAgICAgICAgejoge1xuICAgICAgICAgIG5hbWU6ICdaJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2hpdGU6ICdENjUnLFxuICAgICAgZm9ybWF0czoge1xuICAgICAgICBjb2xvcjoge1xuICAgICAgICAgIGlkczogWyAneHl6LWQ2NScsICd4eXonIF1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFsaWFzZXM6IFsgJ3h5eicgXVxuICAgIH0pO1xuICAgIHZhciBSR0JDb2xvclNwYWNlID0gZnVuY3Rpb24oX0NvbG9yU3BhY2UzKSB7XG4gICAgICBmdW5jdGlvbiBSR0JDb2xvclNwYWNlKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9vcHRpb25zJHJlZmVycmVkO1xuICAgICAgICB2YXIgX3RoaXM7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSR0JDb2xvclNwYWNlKTtcbiAgICAgICAgaWYgKCFvcHRpb25zLmNvb3Jkcykge1xuICAgICAgICAgIG9wdGlvbnMuY29vcmRzID0ge1xuICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICByYW5nZTogWyAwLCAxIF0sXG4gICAgICAgICAgICAgIG5hbWU6ICdSZWQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZzoge1xuICAgICAgICAgICAgICByYW5nZTogWyAwLCAxIF0sXG4gICAgICAgICAgICAgIG5hbWU6ICdHcmVlbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgIHJhbmdlOiBbIDAsIDEgXSxcbiAgICAgICAgICAgICAgbmFtZTogJ0JsdWUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuYmFzZSkge1xuICAgICAgICAgIG9wdGlvbnMuYmFzZSA9IFhZWl9ENjU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudG9YWVpfTSAmJiBvcHRpb25zLmZyb21YWVpfTSkge1xuICAgICAgICAgIHZhciBfb3B0aW9ucyR0b0Jhc2UsIF9vcHRpb25zJGZyb21CYXNlO1xuICAgICAgICAgIChfb3B0aW9ucyR0b0Jhc2UgPSBvcHRpb25zLnRvQmFzZSkgIT09IG51bGwgJiYgX29wdGlvbnMkdG9CYXNlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR0b0Jhc2UgOiBvcHRpb25zLnRvQmFzZSA9IGZ1bmN0aW9uKHJnYikge1xuICAgICAgICAgICAgdmFyIHh5eiA9IG11bHRpcGx5TWF0cmljZXMob3B0aW9ucy50b1hZWl9NLCByZ2IpO1xuICAgICAgICAgICAgaWYgKF90aGlzLndoaXRlICE9PSBfdGhpcy5iYXNlLndoaXRlKSB7XG4gICAgICAgICAgICAgIHh5eiA9IGFkYXB0JDEoX3RoaXMud2hpdGUsIF90aGlzLmJhc2Uud2hpdGUsIHh5eik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geHl6O1xuICAgICAgICAgIH07XG4gICAgICAgICAgKF9vcHRpb25zJGZyb21CYXNlID0gb3B0aW9ucy5mcm9tQmFzZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZnJvbUJhc2UgIT09IHZvaWQgMCA/IF9vcHRpb25zJGZyb21CYXNlIDogb3B0aW9ucy5mcm9tQmFzZSA9IGZ1bmN0aW9uKHh5eikge1xuICAgICAgICAgICAgeHl6ID0gYWRhcHQkMShfdGhpcy5iYXNlLndoaXRlLCBfdGhpcy53aGl0ZSwgeHl6KTtcbiAgICAgICAgICAgIHJldHVybiBtdWx0aXBseU1hdHJpY2VzKG9wdGlvbnMuZnJvbVhZWl9NLCB4eXopO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgKF9vcHRpb25zJHJlZmVycmVkID0gb3B0aW9ucy5yZWZlcnJlZCkgIT09IG51bGwgJiYgX29wdGlvbnMkcmVmZXJyZWQgIT09IHZvaWQgMCA/IF9vcHRpb25zJHJlZmVycmVkIDogb3B0aW9ucy5yZWZlcnJlZCA9ICdkaXNwbGF5JztcbiAgICAgICAgcmV0dXJuIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBSR0JDb2xvclNwYWNlLCBbIG9wdGlvbnMgXSk7XG4gICAgICB9XG4gICAgICBfaW5oZXJpdHMoUkdCQ29sb3JTcGFjZSwgX0NvbG9yU3BhY2UzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoUkdCQ29sb3JTcGFjZSk7XG4gICAgfShDb2xvclNwYWNlKTtcbiAgICBmdW5jdGlvbiBwYXJzZTIoc3RyKSB7XG4gICAgICB2YXIgX1N0cmluZztcbiAgICAgIHZhciBlbnYgPSB7XG4gICAgICAgIHN0cjogKF9TdHJpbmcgPSBTdHJpbmcoc3RyKSkgPT09IG51bGwgfHwgX1N0cmluZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX1N0cmluZy50cmltKClcbiAgICAgIH07XG4gICAgICBob29rcy5ydW4oJ3BhcnNlLXN0YXJ0JywgZW52KTtcbiAgICAgIGlmIChlbnYuY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIGVudi5jb2xvcjtcbiAgICAgIH1cbiAgICAgIGVudi5wYXJzZWQgPSBwYXJzZUZ1bmN0aW9uKGVudi5zdHIpO1xuICAgICAgaWYgKGVudi5wYXJzZWQpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBlbnYucGFyc2VkLm5hbWU7XG4gICAgICAgIGlmIChuYW1lID09PSAnY29sb3InKSB7XG4gICAgICAgICAgdmFyIGlkID0gZW52LnBhcnNlZC5hcmdzLnNoaWZ0KCk7XG4gICAgICAgICAgdmFyIGFscGhhID0gZW52LnBhcnNlZC5yYXdBcmdzLmluZGV4T2YoJy8nKSA+IDAgPyBlbnYucGFyc2VkLmFyZ3MucG9wKCkgOiAxO1xuICAgICAgICAgIHZhciBfaXRlcmF0b3I4ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoQ29sb3JTcGFjZS5hbGwpLCBfc3RlcDg7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBfbG9vcDUgPSBmdW5jdGlvbiBfbG9vcDUoKSB7XG4gICAgICAgICAgICAgIHZhciBzcGFjZSA9IF9zdGVwOC52YWx1ZTtcbiAgICAgICAgICAgICAgdmFyIGNvbG9yU3BlYyA9IHNwYWNlLmdldEZvcm1hdCgnY29sb3InKTtcbiAgICAgICAgICAgICAgaWYgKGNvbG9yU3BlYykge1xuICAgICAgICAgICAgICAgIHZhciBfY29sb3JTcGVjJGlkcztcbiAgICAgICAgICAgICAgICBpZiAoaWQgPT09IGNvbG9yU3BlYy5pZCB8fCAoX2NvbG9yU3BlYyRpZHMgPSBjb2xvclNwZWMuaWRzKSAhPT0gbnVsbCAmJiBfY29sb3JTcGVjJGlkcyAhPT0gdm9pZCAwICYmIF9jb2xvclNwZWMkaWRzLmluY2x1ZGVzKGlkKSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGFyZ0NvdW50ID0gT2JqZWN0LmtleXMoc3BhY2UuY29vcmRzKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICB2YXIgY29vcmRzID0gQXJyYXkoYXJnQ291bnQpLmZpbGwoMCk7XG4gICAgICAgICAgICAgICAgICBjb29yZHMuZm9yRWFjaChmdW5jdGlvbihfLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb29yZHNbaV0gPSBlbnYucGFyc2VkLmFyZ3NbaV0gfHwgMDtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdjoge1xuICAgICAgICAgICAgICAgICAgICAgIHNwYWNlSWQ6IHNwYWNlLmlkLFxuICAgICAgICAgICAgICAgICAgICAgIGNvb3JkczogY29vcmRzLFxuICAgICAgICAgICAgICAgICAgICAgIGFscGhhOiBhbHBoYVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgX3JldDI7XG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOyApIHtcbiAgICAgICAgICAgICAgX3JldDIgPSBfbG9vcDUoKTtcbiAgICAgICAgICAgICAgaWYgKF9yZXQyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZXQyLnY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjguZShlcnIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBfaXRlcmF0b3I4LmYoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGRpZFlvdU1lYW4gPSAnJztcbiAgICAgICAgICBpZiAoaWQgaW4gQ29sb3JTcGFjZS5yZWdpc3RyeSkge1xuICAgICAgICAgICAgdmFyIF9Db2xvclNwYWNlJHJlZ2lzdHJ5JDtcbiAgICAgICAgICAgIHZhciBjc3NJZCA9IChfQ29sb3JTcGFjZSRyZWdpc3RyeSQgPSBDb2xvclNwYWNlLnJlZ2lzdHJ5W2lkXS5mb3JtYXRzKSA9PT0gbnVsbCB8fCBfQ29sb3JTcGFjZSRyZWdpc3RyeSQgPT09IHZvaWQgMCB8fCAoX0NvbG9yU3BhY2UkcmVnaXN0cnkkID0gX0NvbG9yU3BhY2UkcmVnaXN0cnkkLmZ1bmN0aW9ucykgPT09IG51bGwgfHwgX0NvbG9yU3BhY2UkcmVnaXN0cnkkID09PSB2b2lkIDAgfHwgKF9Db2xvclNwYWNlJHJlZ2lzdHJ5JCA9IF9Db2xvclNwYWNlJHJlZ2lzdHJ5JC5jb2xvcikgPT09IG51bGwgfHwgX0NvbG9yU3BhY2UkcmVnaXN0cnkkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfQ29sb3JTcGFjZSRyZWdpc3RyeSQuaWQ7XG4gICAgICAgICAgICBpZiAoY3NzSWQpIHtcbiAgICAgICAgICAgICAgZGlkWW91TWVhbiA9ICdEaWQgeW91IG1lYW4gY29sb3IoJy5jb25jYXQoY3NzSWQsICcpPycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgcGFyc2UgY29sb3IoJy5jb25jYXQoaWQsICcpLiAnKSArIChkaWRZb3VNZWFuIHx8ICdNaXNzaW5nIGEgcGx1Z2luPycpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgX2l0ZXJhdG9yOSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKENvbG9yU3BhY2UuYWxsKSwgX3N0ZXA5O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgX2xvb3A2ID0gZnVuY3Rpb24gX2xvb3A2KCkge1xuICAgICAgICAgICAgICB2YXIgc3BhY2UgPSBfc3RlcDkudmFsdWU7XG4gICAgICAgICAgICAgIHZhciBmb3JtYXQgPSBzcGFjZS5nZXRGb3JtYXQobmFtZSk7XG4gICAgICAgICAgICAgIGlmIChmb3JtYXQgJiYgZm9ybWF0LnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2FscGhhID0gMTtcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0Lmxhc3RBbHBoYSB8fCBsYXN0KGVudi5wYXJzZWQuYXJncykuYWxwaGEpIHtcbiAgICAgICAgICAgICAgICAgIF9hbHBoYSA9IGVudi5wYXJzZWQuYXJncy5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNvb3JkcyA9IGVudi5wYXJzZWQuYXJncztcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmNvb3JkR3JhbW1hcikge1xuICAgICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3BhY2UuY29vcmRzKS5mb3JFYWNoKGZ1bmN0aW9uKF9yZWY0MywgaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2Nvb3JkcyRpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjQ0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjQzLCAyKSwgaWQgPSBfcmVmNDRbMF0sIGNvb3JkTWV0YSA9IF9yZWY0NFsxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkR3JhbW1hcjIgPSBmb3JtYXQuY29vcmRHcmFtbWFyW2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZWRUeXBlID0gKF9jb29yZHMkaSA9IGNvb3Jkc1tpXSkgPT09IG51bGwgfHwgX2Nvb3JkcyRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY29vcmRzJGkudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgY29vcmRHcmFtbWFyMiA9IGNvb3JkR3JhbW1hcjIuZmluZChmdW5jdGlvbihjNCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjNCA9PSBwcm92aWRlZFR5cGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvb3JkR3JhbW1hcjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmROYW1lID0gY29vcmRNZXRhLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignJy5jb25jYXQocHJvdmlkZWRUeXBlLCAnIG5vdCBhbGxvd2VkIGZvciAnKS5jb25jYXQoY29vcmROYW1lLCAnIGluICcpLmNvbmNhdChuYW1lLCAnKCknKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21SYW5nZSA9IGNvb3JkR3JhbW1hcjIucmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm92aWRlZFR5cGUgPT09ICc8cGVyY2VudGFnZT4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZnJvbVJhbmdlIHx8IChmcm9tUmFuZ2UgPSBbIDAsIDEgXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvUmFuZ2UgPSBjb29yZE1ldGEucmFuZ2UgfHwgY29vcmRNZXRhLnJlZlJhbmdlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbVJhbmdlICYmIHRvUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb29yZHNbaV0gPSBtYXBSYW5nZShmcm9tUmFuZ2UsIHRvUmFuZ2UsIGNvb3Jkc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgdjoge1xuICAgICAgICAgICAgICAgICAgICBzcGFjZUlkOiBzcGFjZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgY29vcmRzOiBjb29yZHMsXG4gICAgICAgICAgICAgICAgICAgIGFscGhhOiBfYWxwaGFcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBfcmV0MztcbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yOS5zKCk7ICEoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uKCkpLmRvbmU7ICkge1xuICAgICAgICAgICAgICBfcmV0MyA9IF9sb29wNigpO1xuICAgICAgICAgICAgICBpZiAoX3JldDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JldDMudjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yOS5lKGVycik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjkuZigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjEwID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoQ29sb3JTcGFjZS5hbGwpLCBfc3RlcDEwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMTAucygpOyAhKF9zdGVwMTAgPSBfaXRlcmF0b3IxMC5uKCkpLmRvbmU7ICkge1xuICAgICAgICAgICAgdmFyIHNwYWNlID0gX3N0ZXAxMC52YWx1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGZvcm1hdElkIGluIHNwYWNlLmZvcm1hdHMpIHtcbiAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IHNwYWNlLmZvcm1hdHNbZm9ybWF0SWRdO1xuICAgICAgICAgICAgICBpZiAoZm9ybWF0LnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGZvcm1hdC50ZXN0ICYmICFmb3JtYXQudGVzdChlbnYuc3RyKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBjb2xvciA9IGZvcm1hdC5wYXJzZShlbnYuc3RyKTtcbiAgICAgICAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9jb2xvciRhbHBoYTtcbiAgICAgICAgICAgICAgICAoX2NvbG9yJGFscGhhID0gY29sb3IuYWxwaGEpICE9PSBudWxsICYmIF9jb2xvciRhbHBoYSAhPT0gdm9pZCAwID8gX2NvbG9yJGFscGhhIDogY29sb3IuYWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMTAuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjEwLmYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ291bGQgbm90IHBhcnNlICcuY29uY2F0KHN0ciwgJyBhcyBhIGNvbG9yLiBNaXNzaW5nIGEgcGx1Z2luPycpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q29sb3IoY29sb3IpIHtcbiAgICAgIGlmICghY29sb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRW1wdHkgY29sb3IgcmVmZXJlbmNlJyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNTdHJpbmcoY29sb3IpKSB7XG4gICAgICAgIGNvbG9yID0gcGFyc2UyKGNvbG9yKTtcbiAgICAgIH1cbiAgICAgIHZhciBzcGFjZSA9IGNvbG9yLnNwYWNlIHx8IGNvbG9yLnNwYWNlSWQ7XG4gICAgICBpZiAoIShzcGFjZSBpbnN0YW5jZW9mIENvbG9yU3BhY2UpKSB7XG4gICAgICAgIGNvbG9yLnNwYWNlID0gQ29sb3JTcGFjZS5nZXQoc3BhY2UpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbG9yLmFscGhhID09PSB2b2lkIDApIHtcbiAgICAgICAgY29sb3IuYWxwaGEgPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRBbGwoY29sb3IsIHNwYWNlKSB7XG4gICAgICBzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KHNwYWNlKTtcbiAgICAgIHJldHVybiBzcGFjZS5mcm9tKGNvbG9yKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0KGNvbG9yLCBwcm9wKSB7XG4gICAgICB2YXIgX0NvbG9yU3BhY2UkcmVzb2x2ZUNvID0gQ29sb3JTcGFjZS5yZXNvbHZlQ29vcmQocHJvcCwgY29sb3Iuc3BhY2UpLCBzcGFjZSA9IF9Db2xvclNwYWNlJHJlc29sdmVDby5zcGFjZSwgaW5kZXggPSBfQ29sb3JTcGFjZSRyZXNvbHZlQ28uaW5kZXg7XG4gICAgICB2YXIgY29vcmRzID0gZ2V0QWxsKGNvbG9yLCBzcGFjZSk7XG4gICAgICByZXR1cm4gY29vcmRzW2luZGV4XTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0QWxsKGNvbG9yLCBzcGFjZSwgY29vcmRzKSB7XG4gICAgICBzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KHNwYWNlKTtcbiAgICAgIGNvbG9yLmNvb3JkcyA9IHNwYWNlLnRvKGNvbG9yLnNwYWNlLCBjb29yZHMpO1xuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXQoY29sb3IsIHByb3AsIHZhbHVlKSB7XG4gICAgICBjb2xvciA9IGdldENvbG9yKGNvbG9yKTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGUoYXJndW1lbnRzWzFdKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIG9iamVjdCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgZm9yICh2YXIgcDIgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgc2V0KGNvbG9yLCBwMiwgb2JqZWN0W3AyXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlKGdldChjb2xvciwgcHJvcCkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfQ29sb3JTcGFjZSRyZXNvbHZlQ28yID0gQ29sb3JTcGFjZS5yZXNvbHZlQ29vcmQocHJvcCwgY29sb3Iuc3BhY2UpLCBzcGFjZSA9IF9Db2xvclNwYWNlJHJlc29sdmVDbzIuc3BhY2UsIGluZGV4ID0gX0NvbG9yU3BhY2UkcmVzb2x2ZUNvMi5pbmRleDtcbiAgICAgICAgdmFyIGNvb3JkcyA9IGdldEFsbChjb2xvciwgc3BhY2UpO1xuICAgICAgICBjb29yZHNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIHNldEFsbChjb2xvciwgc3BhY2UsIGNvb3Jkcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIHZhciBYWVpfRDUwID0gbmV3IENvbG9yU3BhY2Uoe1xuICAgICAgaWQ6ICd4eXotZDUwJyxcbiAgICAgIG5hbWU6ICdYWVogRDUwJyxcbiAgICAgIHdoaXRlOiAnRDUwJyxcbiAgICAgIGJhc2U6IFhZWl9ENjUsXG4gICAgICBmcm9tQmFzZTogZnVuY3Rpb24gZnJvbUJhc2UoY29vcmRzKSB7XG4gICAgICAgIHJldHVybiBhZGFwdCQxKFhZWl9ENjUud2hpdGUsICdENTAnLCBjb29yZHMpO1xuICAgICAgfSxcbiAgICAgIHRvQmFzZTogZnVuY3Rpb24gdG9CYXNlKGNvb3Jkcykge1xuICAgICAgICByZXR1cm4gYWRhcHQkMSgnRDUwJywgWFlaX0Q2NS53aGl0ZSwgY29vcmRzKTtcbiAgICAgIH0sXG4gICAgICBmb3JtYXRzOiB7XG4gICAgICAgIGNvbG9yOiB7fVxuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBcXHUwM2I1JDMgPSAyMTYgLyAyNDM4OTtcbiAgICB2YXIgXFx1MDNiNTMkMSA9IDI0IC8gMTE2O1xuICAgIHZhciBcXHUwM2JhJDEgPSAyNDM4OSAvIDI3O1xuICAgIHZhciB3aGl0ZSQxID0gV0hJVEVTLkQ1MDtcbiAgICB2YXIgbGFiID0gbmV3IENvbG9yU3BhY2Uoe1xuICAgICAgaWQ6ICdsYWInLFxuICAgICAgbmFtZTogJ0xhYicsXG4gICAgICBjb29yZHM6IHtcbiAgICAgICAgbDoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIDAsIDEwMCBdLFxuICAgICAgICAgIG5hbWU6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBhOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgLTEyNSwgMTI1IF1cbiAgICAgICAgfSxcbiAgICAgICAgYjoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIC0xMjUsIDEyNSBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3aGl0ZTogd2hpdGUkMSxcbiAgICAgIGJhc2U6IFhZWl9ENTAsXG4gICAgICBmcm9tQmFzZTogZnVuY3Rpb24gZnJvbUJhc2UoWFlaKSB7XG4gICAgICAgIHZhciB4eXogPSBYWVoubWFwKGZ1bmN0aW9uKHZhbHVlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlIC8gd2hpdGUkMVtpXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBmID0geHl6Lm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA+IFxcdTAzYjUkMyA/IE1hdGguY2JydCh2YWx1ZSkgOiAoXFx1MDNiYSQxICogdmFsdWUgKyAxNikgLyAxMTY7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gWyAxMTYgKiBmWzFdIC0gMTYsIDUwMCAqIChmWzBdIC0gZlsxXSksIDIwMCAqIChmWzFdIC0gZlsyXSkgXTtcbiAgICAgIH0sXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShMYWIpIHtcbiAgICAgICAgdmFyIGYgPSBbXTtcbiAgICAgICAgZlsxXSA9IChMYWJbMF0gKyAxNikgLyAxMTY7XG4gICAgICAgIGZbMF0gPSBMYWJbMV0gLyA1MDAgKyBmWzFdO1xuICAgICAgICBmWzJdID0gZlsxXSAtIExhYlsyXSAvIDIwMDtcbiAgICAgICAgdmFyIHh5eiA9IFsgZlswXSA+IFxcdTAzYjUzJDEgPyBNYXRoLnBvdyhmWzBdLCAzKSA6ICgxMTYgKiBmWzBdIC0gMTYpIC8gXFx1MDNiYSQxLCBMYWJbMF0gPiA4ID8gTWF0aC5wb3coKExhYlswXSArIDE2KSAvIDExNiwgMykgOiBMYWJbMF0gLyBcXHUwM2JhJDEsIGZbMl0gPiBcXHUwM2I1MyQxID8gTWF0aC5wb3coZlsyXSwgMykgOiAoMTE2ICogZlsyXSAtIDE2KSAvIFxcdTAzYmEkMSBdO1xuICAgICAgICByZXR1cm4geHl6Lm1hcChmdW5jdGlvbih2YWx1ZSwgaSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZSAqIHdoaXRlJDFbaV07XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgbGFiOiB7XG4gICAgICAgICAgY29vcmRzOiBbICc8bnVtYmVyPiB8IDxwZXJjZW50YWdlPicsICc8bnVtYmVyPicsICc8bnVtYmVyPicgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY29uc3RyYWluKGFuZ2xlKSB7XG4gICAgICByZXR1cm4gKGFuZ2xlICUgMzYwICsgMzYwKSAlIDM2MDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRqdXN0KGFyYywgYW5nbGVzKSB7XG4gICAgICBpZiAoYXJjID09PSAncmF3Jykge1xuICAgICAgICByZXR1cm4gYW5nbGVzO1xuICAgICAgfVxuICAgICAgdmFyIF9hbmdsZXMkbWFwID0gYW5nbGVzLm1hcChjb25zdHJhaW4pLCBfYW5nbGVzJG1hcDIgPSBfc2xpY2VkVG9BcnJheShfYW5nbGVzJG1hcCwgMiksIGExID0gX2FuZ2xlcyRtYXAyWzBdLCBhMiA9IF9hbmdsZXMkbWFwMlsxXTtcbiAgICAgIHZhciBhbmdsZURpZmYgPSBhMiAtIGExO1xuICAgICAgaWYgKGFyYyA9PT0gJ2luY3JlYXNpbmcnKSB7XG4gICAgICAgIGlmIChhbmdsZURpZmYgPCAwKSB7XG4gICAgICAgICAgYTIgKz0gMzYwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyYyA9PT0gJ2RlY3JlYXNpbmcnKSB7XG4gICAgICAgIGlmIChhbmdsZURpZmYgPiAwKSB7XG4gICAgICAgICAgYTEgKz0gMzYwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyYyA9PT0gJ2xvbmdlcicpIHtcbiAgICAgICAgaWYgKC0xODAgPCBhbmdsZURpZmYgJiYgYW5nbGVEaWZmIDwgMTgwKSB7XG4gICAgICAgICAgaWYgKGFuZ2xlRGlmZiA+IDApIHtcbiAgICAgICAgICAgIGEyICs9IDM2MDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYTEgKz0gMzYwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcmMgPT09ICdzaG9ydGVyJykge1xuICAgICAgICBpZiAoYW5nbGVEaWZmID4gMTgwKSB7XG4gICAgICAgICAgYTEgKz0gMzYwO1xuICAgICAgICB9IGVsc2UgaWYgKGFuZ2xlRGlmZiA8IC0xODApIHtcbiAgICAgICAgICBhMiArPSAzNjA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBbIGExLCBhMiBdO1xuICAgIH1cbiAgICB2YXIgbGNoID0gbmV3IENvbG9yU3BhY2Uoe1xuICAgICAgaWQ6ICdsY2gnLFxuICAgICAgbmFtZTogJ0xDSCcsXG4gICAgICBjb29yZHM6IHtcbiAgICAgICAgbDoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIDAsIDEwMCBdLFxuICAgICAgICAgIG5hbWU6ICdMaWdodG5lc3MnXG4gICAgICAgIH0sXG4gICAgICAgIGM6IHtcbiAgICAgICAgICByZWZSYW5nZTogWyAwLCAxNTAgXSxcbiAgICAgICAgICBuYW1lOiAnQ2hyb21hJ1xuICAgICAgICB9LFxuICAgICAgICBoOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMzYwIF0sXG4gICAgICAgICAgdHlwZTogJ2FuZ2xlJyxcbiAgICAgICAgICBuYW1lOiAnSHVlJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmFzZTogbGFiLFxuICAgICAgZnJvbUJhc2U6IGZ1bmN0aW9uIGZyb21CYXNlKExhYikge1xuICAgICAgICB2YXIgX0xhYiA9IF9zbGljZWRUb0FycmF5KExhYiwgMyksIEwgPSBfTGFiWzBdLCBhMiA9IF9MYWJbMV0sIGIyID0gX0xhYlsyXTtcbiAgICAgICAgdmFyIGh1ZTtcbiAgICAgICAgdmFyIFxcdTAzYjUyID0gLjAyO1xuICAgICAgICBpZiAoTWF0aC5hYnMoYTIpIDwgXFx1MDNiNTIgJiYgTWF0aC5hYnMoYjIpIDwgXFx1MDNiNTIpIHtcbiAgICAgICAgICBodWUgPSBOYU47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaHVlID0gTWF0aC5hdGFuMihiMiwgYTIpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWyBMLCBNYXRoLnNxcnQoTWF0aC5wb3coYTIsIDIpICsgTWF0aC5wb3coYjIsIDIpKSwgY29uc3RyYWluKGh1ZSkgXTtcbiAgICAgIH0sXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShMQ0gpIHtcbiAgICAgICAgdmFyIF9MQ0ggPSBfc2xpY2VkVG9BcnJheShMQ0gsIDMpLCBMaWdodG5lc3MgPSBfTENIWzBdLCBDaHJvbWEgPSBfTENIWzFdLCBIdWUgPSBfTENIWzJdO1xuICAgICAgICBpZiAoQ2hyb21hIDwgMCkge1xuICAgICAgICAgIENocm9tYSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmFOKEh1ZSkpIHtcbiAgICAgICAgICBIdWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbIExpZ2h0bmVzcywgQ2hyb21hICogTWF0aC5jb3MoSHVlICogTWF0aC5QSSAvIDE4MCksIENocm9tYSAqIE1hdGguc2luKEh1ZSAqIE1hdGguUEkgLyAxODApIF07XG4gICAgICB9LFxuICAgICAgZm9ybWF0czoge1xuICAgICAgICBsY2g6IHtcbiAgICAgICAgICBjb29yZHM6IFsgJzxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+JywgJzxudW1iZXI+JywgJzxudW1iZXI+IHwgPGFuZ2xlPicgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIEdmYWN0b3IgPSBNYXRoLnBvdygyNSwgNyk7XG4gICAgdmFyIFxcdTAzYzAkMSA9IE1hdGguUEk7XG4gICAgdmFyIHIyZCA9IDE4MCAvIFxcdTAzYzAkMTtcbiAgICB2YXIgZDJyJDEgPSBcXHUwM2MwJDEgLyAxODA7XG4gICAgZnVuY3Rpb24gZGVsdGFFMjAwMChjb2xvciwgc2FtcGxlKSB7XG4gICAgICB2YXIgX3JlZjQ1ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSwgX3JlZjQ1JGtMID0gX3JlZjQ1LmtMLCBrTCA9IF9yZWY0NSRrTCA9PT0gdm9pZCAwID8gMSA6IF9yZWY0NSRrTCwgX3JlZjQ1JGtDID0gX3JlZjQ1LmtDLCBrQyA9IF9yZWY0NSRrQyA9PT0gdm9pZCAwID8gMSA6IF9yZWY0NSRrQywgX3JlZjQ1JGtIID0gX3JlZjQ1LmtILCBrSCA9IF9yZWY0NSRrSCA9PT0gdm9pZCAwID8gMSA6IF9yZWY0NSRrSDtcbiAgICAgIHZhciBfbGFiJGZyb20gPSBsYWIuZnJvbShjb2xvciksIF9sYWIkZnJvbTIgPSBfc2xpY2VkVG9BcnJheShfbGFiJGZyb20sIDMpLCBMMSA9IF9sYWIkZnJvbTJbMF0sIGExID0gX2xhYiRmcm9tMlsxXSwgYjEgPSBfbGFiJGZyb20yWzJdO1xuICAgICAgdmFyIEMxID0gbGNoLmZyb20obGFiLCBbIEwxLCBhMSwgYjEgXSlbMV07XG4gICAgICB2YXIgX2xhYiRmcm9tMyA9IGxhYi5mcm9tKHNhbXBsZSksIF9sYWIkZnJvbTQgPSBfc2xpY2VkVG9BcnJheShfbGFiJGZyb20zLCAzKSwgTDIgPSBfbGFiJGZyb200WzBdLCBhMiA9IF9sYWIkZnJvbTRbMV0sIGIyID0gX2xhYiRmcm9tNFsyXTtcbiAgICAgIHZhciBDMiA9IGxjaC5mcm9tKGxhYiwgWyBMMiwgYTIsIGIyIF0pWzFdO1xuICAgICAgaWYgKEMxIDwgMCkge1xuICAgICAgICBDMSA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoQzIgPCAwKSB7XG4gICAgICAgIEMyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBDYmFyID0gKEMxICsgQzIpIC8gMjtcbiAgICAgIHZhciBDNyA9IE1hdGgucG93KENiYXIsIDcpO1xuICAgICAgdmFyIEcgPSAuNSAqICgxIC0gTWF0aC5zcXJ0KEM3IC8gKEM3ICsgR2ZhY3RvcikpKTtcbiAgICAgIHZhciBhZGFzaDEgPSAoMSArIEcpICogYTE7XG4gICAgICB2YXIgYWRhc2gyID0gKDEgKyBHKSAqIGEyO1xuICAgICAgdmFyIENkYXNoMSA9IE1hdGguc3FydChNYXRoLnBvdyhhZGFzaDEsIDIpICsgTWF0aC5wb3coYjEsIDIpKTtcbiAgICAgIHZhciBDZGFzaDIgPSBNYXRoLnNxcnQoTWF0aC5wb3coYWRhc2gyLCAyKSArIE1hdGgucG93KGIyLCAyKSk7XG4gICAgICB2YXIgaDEgPSBhZGFzaDEgPT09IDAgJiYgYjEgPT09IDAgPyAwIDogTWF0aC5hdGFuMihiMSwgYWRhc2gxKTtcbiAgICAgIHZhciBoMiA9IGFkYXNoMiA9PT0gMCAmJiBiMiA9PT0gMCA/IDAgOiBNYXRoLmF0YW4yKGIyLCBhZGFzaDIpO1xuICAgICAgaWYgKGgxIDwgMCkge1xuICAgICAgICBoMSArPSAyICogXFx1MDNjMCQxO1xuICAgICAgfVxuICAgICAgaWYgKGgyIDwgMCkge1xuICAgICAgICBoMiArPSAyICogXFx1MDNjMCQxO1xuICAgICAgfVxuICAgICAgaDEgKj0gcjJkO1xuICAgICAgaDIgKj0gcjJkO1xuICAgICAgdmFyIFxcdTAzOTRMID0gTDIgLSBMMTtcbiAgICAgIHZhciBcXHUwMzk0QyA9IENkYXNoMiAtIENkYXNoMTtcbiAgICAgIHZhciBoZGlmZiA9IGgyIC0gaDE7XG4gICAgICB2YXIgaHN1bSA9IGgxICsgaDI7XG4gICAgICB2YXIgaGFicyA9IE1hdGguYWJzKGhkaWZmKTtcbiAgICAgIHZhciBcXHUwMzk0aDtcbiAgICAgIGlmIChDZGFzaDEgKiBDZGFzaDIgPT09IDApIHtcbiAgICAgICAgXFx1MDM5NGggPSAwO1xuICAgICAgfSBlbHNlIGlmIChoYWJzIDw9IDE4MCkge1xuICAgICAgICBcXHUwMzk0aCA9IGhkaWZmO1xuICAgICAgfSBlbHNlIGlmIChoZGlmZiA+IDE4MCkge1xuICAgICAgICBcXHUwMzk0aCA9IGhkaWZmIC0gMzYwO1xuICAgICAgfSBlbHNlIGlmIChoZGlmZiA8IC0xODApIHtcbiAgICAgICAgXFx1MDM5NGggPSBoZGlmZiArIDM2MDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGUgdW50aGlua2FibGUgaGFzIGhhcHBlbmVkJyk7XG4gICAgICB9XG4gICAgICB2YXIgXFx1MDM5NEggPSAyICogTWF0aC5zcXJ0KENkYXNoMiAqIENkYXNoMSkgKiBNYXRoLnNpbihcXHUwMzk0aCAqIGQyciQxIC8gMik7XG4gICAgICB2YXIgTGRhc2ggPSAoTDEgKyBMMikgLyAyO1xuICAgICAgdmFyIENkYXNoID0gKENkYXNoMSArIENkYXNoMikgLyAyO1xuICAgICAgdmFyIENkYXNoNyA9IE1hdGgucG93KENkYXNoLCA3KTtcbiAgICAgIHZhciBoZGFzaDtcbiAgICAgIGlmIChDZGFzaDEgKiBDZGFzaDIgPT09IDApIHtcbiAgICAgICAgaGRhc2ggPSBoc3VtO1xuICAgICAgfSBlbHNlIGlmIChoYWJzIDw9IDE4MCkge1xuICAgICAgICBoZGFzaCA9IGhzdW0gLyAyO1xuICAgICAgfSBlbHNlIGlmIChoc3VtIDwgMzYwKSB7XG4gICAgICAgIGhkYXNoID0gKGhzdW0gKyAzNjApIC8gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhkYXNoID0gKGhzdW0gLSAzNjApIC8gMjtcbiAgICAgIH1cbiAgICAgIHZhciBsc3EgPSBNYXRoLnBvdyhMZGFzaCAtIDUwLCAyKTtcbiAgICAgIHZhciBTTCA9IDEgKyAuMDE1ICogbHNxIC8gTWF0aC5zcXJ0KDIwICsgbHNxKTtcbiAgICAgIHZhciBTQyA9IDEgKyAuMDQ1ICogQ2Rhc2g7XG4gICAgICB2YXIgVCA9IDE7XG4gICAgICBUIC09IC4xNyAqIE1hdGguY29zKChoZGFzaCAtIDMwKSAqIGQyciQxKTtcbiAgICAgIFQgKz0gLjI0ICogTWF0aC5jb3MoMiAqIGhkYXNoICogZDJyJDEpO1xuICAgICAgVCArPSAuMzIgKiBNYXRoLmNvcygoMyAqIGhkYXNoICsgNikgKiBkMnIkMSk7XG4gICAgICBUIC09IC4yICogTWF0aC5jb3MoKDQgKiBoZGFzaCAtIDYzKSAqIGQyciQxKTtcbiAgICAgIHZhciBTSCA9IDEgKyAuMDE1ICogQ2Rhc2ggKiBUO1xuICAgICAgdmFyIFxcdTAzOTRcXHUwM2I4ID0gMzAgKiBNYXRoLmV4cCgtMSAqIE1hdGgucG93KChoZGFzaCAtIDI3NSkgLyAyNSwgMikpO1xuICAgICAgdmFyIFJDID0gMiAqIE1hdGguc3FydChDZGFzaDcgLyAoQ2Rhc2g3ICsgR2ZhY3RvcikpO1xuICAgICAgdmFyIFJUID0gLTEgKiBNYXRoLnNpbigyICogXFx1MDM5NFxcdTAzYjggKiBkMnIkMSkgKiBSQztcbiAgICAgIHZhciBkRSA9IE1hdGgucG93KFxcdTAzOTRMIC8gKGtMICogU0wpLCAyKTtcbiAgICAgIGRFICs9IE1hdGgucG93KFxcdTAzOTRDIC8gKGtDICogU0MpLCAyKTtcbiAgICAgIGRFICs9IE1hdGgucG93KFxcdTAzOTRIIC8gKGtIICogU0gpLCAyKTtcbiAgICAgIGRFICs9IFJUICogKFxcdTAzOTRDIC8gKGtDICogU0MpKSAqIChcXHUwMzk0SCAvIChrSCAqIFNIKSk7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KGRFKTtcbiAgICB9XG4gICAgdmFyIFxcdTAzYjUkMiA9IDc1ZS02O1xuICAgIGZ1bmN0aW9uIGluR2FtdXQoY29sb3IpIHtcbiAgICAgIHZhciBzcGFjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY29sb3Iuc3BhY2U7XG4gICAgICB2YXIgX3JlZjQ2ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSwgX3JlZjQ2JGVwc2lsb24gPSBfcmVmNDYuZXBzaWxvbiwgZXBzaWxvbiA9IF9yZWY0NiRlcHNpbG9uID09PSB2b2lkIDAgPyBcXHUwM2I1JDIgOiBfcmVmNDYkZXBzaWxvbjtcbiAgICAgIGNvbG9yID0gZ2V0Q29sb3IoY29sb3IpO1xuICAgICAgc3BhY2UgPSBDb2xvclNwYWNlLmdldChzcGFjZSk7XG4gICAgICB2YXIgY29vcmRzID0gY29sb3IuY29vcmRzO1xuICAgICAgaWYgKHNwYWNlICE9PSBjb2xvci5zcGFjZSkge1xuICAgICAgICBjb29yZHMgPSBzcGFjZS5mcm9tKGNvbG9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzcGFjZS5pbkdhbXV0KGNvb3Jkcywge1xuICAgICAgICBlcHNpbG9uOiBlcHNpbG9uXG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvbmUyKGNvbG9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzcGFjZTogY29sb3Iuc3BhY2UsXG4gICAgICAgIGNvb3JkczogY29sb3IuY29vcmRzLnNsaWNlKCksXG4gICAgICAgIGFscGhhOiBjb2xvci5hbHBoYVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9HYW11dChjb2xvcikge1xuICAgICAgdmFyIF9yZWY0NyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sIF9yZWY0NyRtZXRob2QgPSBfcmVmNDcubWV0aG9kLCBtZXRob2QgPSBfcmVmNDckbWV0aG9kID09PSB2b2lkIDAgPyBkZWZhdWx0cy5nYW11dF9tYXBwaW5nIDogX3JlZjQ3JG1ldGhvZCwgX3JlZjQ3JHNwYWNlID0gX3JlZjQ3LnNwYWNlLCBzcGFjZSA9IF9yZWY0NyRzcGFjZSA9PT0gdm9pZCAwID8gY29sb3Iuc3BhY2UgOiBfcmVmNDckc3BhY2U7XG4gICAgICBpZiAoaXNTdHJpbmcoYXJndW1lbnRzWzFdKSkge1xuICAgICAgICBzcGFjZSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIH1cbiAgICAgIHNwYWNlID0gQ29sb3JTcGFjZS5nZXQoc3BhY2UpO1xuICAgICAgaWYgKGluR2FtdXQoY29sb3IsIHNwYWNlLCB7XG4gICAgICAgIGVwc2lsb246IDBcbiAgICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgIH1cbiAgICAgIHZhciBzcGFjZUNvbG9yID0gdG8oY29sb3IsIHNwYWNlKTtcbiAgICAgIGlmIChtZXRob2QgIT09ICdjbGlwJyAmJiAhaW5HYW11dChjb2xvciwgc3BhY2UpKSB7XG4gICAgICAgIHZhciBjbGlwcGVkID0gdG9HYW11dChjbG9uZTIoc3BhY2VDb2xvciksIHtcbiAgICAgICAgICBtZXRob2Q6ICdjbGlwJyxcbiAgICAgICAgICBzcGFjZTogc3BhY2VcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkZWx0YUUyMDAwKGNvbG9yLCBjbGlwcGVkKSA+IDIpIHtcbiAgICAgICAgICB2YXIgY29vcmRNZXRhID0gQ29sb3JTcGFjZS5yZXNvbHZlQ29vcmQobWV0aG9kKTtcbiAgICAgICAgICB2YXIgbWFwU3BhY2UgPSBjb29yZE1ldGEuc3BhY2U7XG4gICAgICAgICAgdmFyIGNvb3JkSWQgPSBjb29yZE1ldGEuaWQ7XG4gICAgICAgICAgdmFyIG1hcHBlZENvbG9yID0gdG8oc3BhY2VDb2xvciwgbWFwU3BhY2UpO1xuICAgICAgICAgIHZhciBib3VuZHMgPSBjb29yZE1ldGEucmFuZ2UgfHwgY29vcmRNZXRhLnJlZlJhbmdlO1xuICAgICAgICAgIHZhciBtaW4gPSBib3VuZHNbMF07XG4gICAgICAgICAgdmFyIFxcdTAzYjUyID0gLjAxO1xuICAgICAgICAgIHZhciBsb3cgPSBtaW47XG4gICAgICAgICAgdmFyIGhpZ2ggPSBnZXQobWFwcGVkQ29sb3IsIGNvb3JkSWQpO1xuICAgICAgICAgIHdoaWxlIChoaWdoIC0gbG93ID4gXFx1MDNiNTIpIHtcbiAgICAgICAgICAgIHZhciBjbGlwcGVkMiA9IGNsb25lMihtYXBwZWRDb2xvcik7XG4gICAgICAgICAgICBjbGlwcGVkMiA9IHRvR2FtdXQoY2xpcHBlZDIsIHtcbiAgICAgICAgICAgICAgc3BhY2U6IHNwYWNlLFxuICAgICAgICAgICAgICBtZXRob2Q6ICdjbGlwJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgZGVsdGFFMiA9IGRlbHRhRTIwMDAobWFwcGVkQ29sb3IsIGNsaXBwZWQyKTtcbiAgICAgICAgICAgIGlmIChkZWx0YUUyIC0gMiA8IFxcdTAzYjUyKSB7XG4gICAgICAgICAgICAgIGxvdyA9IGdldChtYXBwZWRDb2xvciwgY29vcmRJZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBoaWdoID0gZ2V0KG1hcHBlZENvbG9yLCBjb29yZElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldChtYXBwZWRDb2xvciwgY29vcmRJZCwgKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwYWNlQ29sb3IgPSB0byhtYXBwZWRDb2xvciwgc3BhY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNwYWNlQ29sb3IgPSBjbGlwcGVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWV0aG9kID09PSAnY2xpcCcgfHwgIWluR2FtdXQoc3BhY2VDb2xvciwgc3BhY2UsIHtcbiAgICAgICAgZXBzaWxvbjogMFxuICAgICAgfSkpIHtcbiAgICAgICAgdmFyIF9ib3VuZHMgPSBPYmplY3QudmFsdWVzKHNwYWNlLmNvb3JkcykubWFwKGZ1bmN0aW9uKGM0KSB7XG4gICAgICAgICAgcmV0dXJuIGM0LnJhbmdlIHx8IFtdO1xuICAgICAgICB9KTtcbiAgICAgICAgc3BhY2VDb2xvci5jb29yZHMgPSBzcGFjZUNvbG9yLmNvb3Jkcy5tYXAoZnVuY3Rpb24oYzQsIGkpIHtcbiAgICAgICAgICB2YXIgX2JvdW5kcyRpID0gX3NsaWNlZFRvQXJyYXkoX2JvdW5kc1tpXSwgMiksIG1pbiA9IF9ib3VuZHMkaVswXSwgbWF4MiA9IF9ib3VuZHMkaVsxXTtcbiAgICAgICAgICBpZiAobWluICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGM0ID0gTWF0aC5tYXgobWluLCBjNCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXgyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGM0ID0gTWF0aC5taW4oYzQsIG1heDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYzQ7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHNwYWNlICE9PSBjb2xvci5zcGFjZSkge1xuICAgICAgICBzcGFjZUNvbG9yID0gdG8oc3BhY2VDb2xvciwgY29sb3Iuc3BhY2UpO1xuICAgICAgfVxuICAgICAgY29sb3IuY29vcmRzID0gc3BhY2VDb2xvci5jb29yZHM7XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIHRvR2FtdXQucmV0dXJucyA9ICdjb2xvcic7XG4gICAgZnVuY3Rpb24gdG8oY29sb3IsIHNwYWNlKSB7XG4gICAgICB2YXIgX3JlZjQ4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSwgaW5HYW11dDIgPSBfcmVmNDguaW5HYW11dDtcbiAgICAgIGNvbG9yID0gZ2V0Q29sb3IoY29sb3IpO1xuICAgICAgc3BhY2UgPSBDb2xvclNwYWNlLmdldChzcGFjZSk7XG4gICAgICB2YXIgY29vcmRzID0gc3BhY2UuZnJvbShjb2xvcik7XG4gICAgICB2YXIgcmV0ID0ge1xuICAgICAgICBzcGFjZTogc3BhY2UsXG4gICAgICAgIGNvb3JkczogY29vcmRzLFxuICAgICAgICBhbHBoYTogY29sb3IuYWxwaGFcbiAgICAgIH07XG4gICAgICBpZiAoaW5HYW11dDIpIHtcbiAgICAgICAgcmV0ID0gdG9HYW11dChyZXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgdG8ucmV0dXJucyA9ICdjb2xvcic7XG4gICAgZnVuY3Rpb24gc2VyaWFsaXplKGNvbG9yKSB7XG4gICAgICB2YXIgX3JlZjUwLCBfY29sb3Ikc3BhY2UkZ2V0Rm9ybWE7XG4gICAgICB2YXIgX3JlZjQ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBfcmVmNDkkcHJlY2lzaW9uID0gX3JlZjQ5LnByZWNpc2lvbiwgcHJlY2lzaW9uID0gX3JlZjQ5JHByZWNpc2lvbiA9PT0gdm9pZCAwID8gZGVmYXVsdHMucHJlY2lzaW9uIDogX3JlZjQ5JHByZWNpc2lvbiwgX3JlZjQ5JGZvcm1hdCA9IF9yZWY0OS5mb3JtYXQsIGZvcm1hdCA9IF9yZWY0OSRmb3JtYXQgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9yZWY0OSRmb3JtYXQsIF9yZWY0OSRpbkdhbXV0ID0gX3JlZjQ5LmluR2FtdXQsIGluR2FtdXQkMSA9IF9yZWY0OSRpbkdhbXV0ID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjQ5JGluR2FtdXQsIGN1c3RvbU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjQ5LCBfZXhjbHVkZWQ5KTtcbiAgICAgIHZhciByZXQ7XG4gICAgICBjb2xvciA9IGdldENvbG9yKGNvbG9yKTtcbiAgICAgIHZhciBmb3JtYXRJZCA9IGZvcm1hdDtcbiAgICAgIGZvcm1hdCA9IChfcmVmNTAgPSAoX2NvbG9yJHNwYWNlJGdldEZvcm1hID0gY29sb3Iuc3BhY2UuZ2V0Rm9ybWF0KGZvcm1hdCkpICE9PSBudWxsICYmIF9jb2xvciRzcGFjZSRnZXRGb3JtYSAhPT0gdm9pZCAwID8gX2NvbG9yJHNwYWNlJGdldEZvcm1hIDogY29sb3Iuc3BhY2UuZ2V0Rm9ybWF0KCdkZWZhdWx0JykpICE9PSBudWxsICYmIF9yZWY1MCAhPT0gdm9pZCAwID8gX3JlZjUwIDogQ29sb3JTcGFjZS5ERUZBVUxUX0ZPUk1BVDtcbiAgICAgIGluR2FtdXQkMSB8fCAoaW5HYW11dCQxID0gZm9ybWF0LnRvR2FtdXQpO1xuICAgICAgdmFyIGNvb3JkcyA9IGNvbG9yLmNvb3JkcztcbiAgICAgIGNvb3JkcyA9IGNvb3Jkcy5tYXAoZnVuY3Rpb24oYzQpIHtcbiAgICAgICAgcmV0dXJuIGM0ID8gYzQgOiAwO1xuICAgICAgfSk7XG4gICAgICBpZiAoaW5HYW11dCQxICYmICFpbkdhbXV0KGNvbG9yKSkge1xuICAgICAgICBjb29yZHMgPSB0b0dhbXV0KGNsb25lMihjb2xvciksIGluR2FtdXQkMSA9PT0gdHJ1ZSA/IHZvaWQgMCA6IGluR2FtdXQkMSkuY29vcmRzO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm1hdC50eXBlID09PSAnY3VzdG9tJykge1xuICAgICAgICBjdXN0b21PcHRpb25zLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgICAgaWYgKGZvcm1hdC5zZXJpYWxpemUpIHtcbiAgICAgICAgICByZXQgPSBmb3JtYXQuc2VyaWFsaXplKGNvb3JkcywgY29sb3IuYWxwaGEsIGN1c3RvbU9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Zvcm1hdCAnLmNvbmNhdChmb3JtYXRJZCwgJyBjYW4gb25seSBiZSB1c2VkIHRvIHBhcnNlIGNvbG9ycywgbm90IGZvciBzZXJpYWxpemF0aW9uJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmFtZSA9IGZvcm1hdC5uYW1lIHx8ICdjb2xvcic7XG4gICAgICAgIGlmIChmb3JtYXQuc2VyaWFsaXplQ29vcmRzKSB7XG4gICAgICAgICAgY29vcmRzID0gZm9ybWF0LnNlcmlhbGl6ZUNvb3Jkcyhjb29yZHMsIHByZWNpc2lvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByZWNpc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29vcmRzID0gY29vcmRzLm1hcChmdW5jdGlvbihjNCkge1xuICAgICAgICAgICAgICByZXR1cm4gdG9QcmVjaXNpb24oYzQsIHByZWNpc2lvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSBfdG9Db25zdW1hYmxlQXJyYXkoY29vcmRzKTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICB2YXIgX2Zvcm1hdCRpZHM7XG4gICAgICAgICAgdmFyIGNzc0lkID0gZm9ybWF0LmlkIHx8ICgoX2Zvcm1hdCRpZHMgPSBmb3JtYXQuaWRzKSA9PT0gbnVsbCB8fCBfZm9ybWF0JGlkcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Zvcm1hdCRpZHNbMF0pIHx8IGNvbG9yLnNwYWNlLmlkO1xuICAgICAgICAgIGFyZ3MudW5zaGlmdChjc3NJZCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFscGhhID0gY29sb3IuYWxwaGE7XG4gICAgICAgIGlmIChwcmVjaXNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICBhbHBoYSA9IHRvUHJlY2lzaW9uKGFscGhhLCBwcmVjaXNpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJBbHBoYSA9IGNvbG9yLmFscGhhIDwgMSAmJiAhZm9ybWF0Lm5vQWxwaGEgPyAnJy5jb25jYXQoZm9ybWF0LmNvbW1hcyA/ICcsJyA6ICcgLycsICcgJykuY29uY2F0KGFscGhhKSA6ICcnO1xuICAgICAgICByZXQgPSAnJy5jb25jYXQobmFtZSwgJygnKS5jb25jYXQoYXJncy5qb2luKGZvcm1hdC5jb21tYXMgPyAnLCAnIDogJyAnKSkuY29uY2F0KHN0ckFscGhhLCAnKScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgdmFyIHRvWFlaX00kNSA9IFsgWyAuNjM2OTU4MDQ4MzAxMjkxNCwgLjE0NDYxNjkwMzU4NjIwODMyLCAuMTY4ODgwOTc1MTY0MTcyMSBdLCBbIC4yNjI3MDAyMTIwMTEyNjcxLCAuNjc3OTk4MDcxNTE4ODcwOCwgLjA1OTMwMTcxNjQ2OTg2MTk2IF0sIFsgMCwgLjAyODA3MjY5MzA0OTA4NzQyOCwgMS4wNjA5ODUwNTc3MTA3OTEgXSBdO1xuICAgIHZhciBmcm9tWFlaX00kNSA9IFsgWyAxLjcxNjY1MTE4Nzk3MTI2OCwgLS4zNTU2NzA3ODM3NzYzOTIsIC0uMjUzMzY2MjgxMzczNjYgXSwgWyAtLjY2NjY4NDM1MTgzMjQ4OSwgMS42MTY0ODEyMzY2MzQ5MzksIC4wMTU3Njg1NDU4MTM5MTExIF0sIFsgLjAxNzYzOTg1NzQ0NTMxMSwgLS4wNDI3NzA2MTMyNTc4MDksIC45NDIxMDMxMjEyMzU0NzQgXSBdO1xuICAgIHZhciBSRUMyMDIwTGluZWFyID0gbmV3IFJHQkNvbG9yU3BhY2Uoe1xuICAgICAgaWQ6ICdyZWMyMDIwLWxpbmVhcicsXG4gICAgICBuYW1lOiAnTGluZWFyIFJFQy4yMDIwJyxcbiAgICAgIHdoaXRlOiAnRDY1JyxcbiAgICAgIHRvWFlaX006IHRvWFlaX00kNSxcbiAgICAgIGZyb21YWVpfTTogZnJvbVhZWl9NJDUsXG4gICAgICBmb3JtYXRzOiB7XG4gICAgICAgIGNvbG9yOiB7fVxuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBcXHUwM2IxID0gMS4wOTkyOTY4MjY4MDk0NDtcbiAgICB2YXIgXFx1MDNiMiA9IC4wMTgwNTM5Njg1MTA4MDc7XG4gICAgdmFyIFJFQzIwMjAgPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ3JlYzIwMjAnLFxuICAgICAgbmFtZTogJ1JFQy4yMDIwJyxcbiAgICAgIGJhc2U6IFJFQzIwMjBMaW5lYXIsXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShSR0IpIHtcbiAgICAgICAgcmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgaWYgKHZhbCA8IFxcdTAzYjIgKiA0LjUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwgLyA0LjU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBNYXRoLnBvdygodmFsICsgXFx1MDNiMSAtIDEpIC8gXFx1MDNiMSwgMSAvIC40NSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZyb21CYXNlOiBmdW5jdGlvbiBmcm9tQmFzZShSR0IpIHtcbiAgICAgICAgcmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgaWYgKHZhbCA+PSBcXHUwM2IyKSB7XG4gICAgICAgICAgICByZXR1cm4gXFx1MDNiMSAqIE1hdGgucG93KHZhbCwgLjQ1KSAtIChcXHUwM2IxIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiA0LjUgKiB2YWw7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgY29sb3I6IHt9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHRvWFlaX00kNCA9IFsgWyAuNDg2NTcwOTQ4NjQ4MjE2MiwgLjI2NTY2NzY5MzE2OTA5MzA2LCAuMTk4MjE3Mjg1MjM0MzYyNSBdLCBbIC4yMjg5NzQ1NjQwNjk3NDg4LCAuNjkxNzM4NTIxODM2NTA2NCwgLjA3OTI4NjkxNDA5Mzc0NSBdLCBbIDAsIC4wNDUxMTMzODE4NTg5MDI2NCwgMS4wNDM5NDQzNjg5MDA5NzYgXSBdO1xuICAgIHZhciBmcm9tWFlaX00kNCA9IFsgWyAyLjQ5MzQ5NjkxMTk0MTQyNSwgLS45MzEzODM2MTc5MTkxMjM5LCAtLjQwMjcxMDc4NDQ1MDcxNjg0IF0sIFsgLS44Mjk0ODg5Njk1NjE1NzQ3LCAxLjc2MjY2NDA2MDMxODM0NjMsIC4wMjM2MjQ2ODU4NDE5NDM1NzcgXSwgWyAuMDM1ODQ1ODMwMjQzNzg0NDcsIC0uMDc2MTcyMzg5MjY4MDQxODIsIC45NTY4ODQ1MjQwMDc2ODcyIF0gXTtcbiAgICB2YXIgUDNMaW5lYXIgPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ3AzLWxpbmVhcicsXG4gICAgICBuYW1lOiAnTGluZWFyIFAzJyxcbiAgICAgIHdoaXRlOiAnRDY1JyxcbiAgICAgIHRvWFlaX006IHRvWFlaX00kNCxcbiAgICAgIGZyb21YWVpfTTogZnJvbVhZWl9NJDRcbiAgICB9KTtcbiAgICB2YXIgdG9YWVpfTSQzID0gWyBbIC40MTIzOTA3OTkyNjU5NTkzNCwgLjM1NzU4NDMzOTM4Mzg3OCwgLjE4MDQ4MDc4ODQwMTgzNDMgXSwgWyAuMjEyNjM5MDA1ODcxNTEwMjcsIC43MTUxNjg2Nzg3Njc3NTYsIC4wNzIxOTIzMTUzNjA3MzM3MSBdLCBbIC4wMTkzMzA4MTg3MTU1OTE4MiwgLjExOTE5NDc3OTc5NDYyNTk4LCAuOTUwNTMyMTUyMjQ5NjYwNyBdIF07XG4gICAgdmFyIGZyb21YWVpfTSQzID0gWyBbIDMuMjQwOTY5OTQxOTA0NTIyNiwgLTEuNTM3MzgzMTc3NTcwMDk0LCAtLjQ5ODYxMDc2MDI5MzAwMzQgXSwgWyAtLjk2OTI0MzYzNjI4MDg3OTYsIDEuODc1OTY3NTAxNTA3NzIwMiwgLjA0MTU1NTA1NzQwNzE3NTU5IF0sIFsgLjA1NTYzMDA3OTY5Njk5MzY2LCAtLjIwMzk3Njk1ODg4ODk3NjUyLCAxLjA1Njk3MTUxNDI0Mjg3ODYgXSBdO1xuICAgIHZhciBzUkdCTGluZWFyID0gbmV3IFJHQkNvbG9yU3BhY2Uoe1xuICAgICAgaWQ6ICdzcmdiLWxpbmVhcicsXG4gICAgICBuYW1lOiAnTGluZWFyIHNSR0InLFxuICAgICAgd2hpdGU6ICdENjUnLFxuICAgICAgdG9YWVpfTTogdG9YWVpfTSQzLFxuICAgICAgZnJvbVhZWl9NOiBmcm9tWFlaX00kMyxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgY29sb3I6IHt9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIEtFWVdPUkRTID0ge1xuICAgICAgYWxpY2VibHVlOiBbIDI0MCAvIDI1NSwgMjQ4IC8gMjU1LCAxIF0sXG4gICAgICBhbnRpcXVld2hpdGU6IFsgMjUwIC8gMjU1LCAyMzUgLyAyNTUsIDIxNSAvIDI1NSBdLFxuICAgICAgYXF1YTogWyAwLCAxLCAxIF0sXG4gICAgICBhcXVhbWFyaW5lOiBbIDEyNyAvIDI1NSwgMSwgMjEyIC8gMjU1IF0sXG4gICAgICBhenVyZTogWyAyNDAgLyAyNTUsIDEsIDEgXSxcbiAgICAgIGJlaWdlOiBbIDI0NSAvIDI1NSwgMjQ1IC8gMjU1LCAyMjAgLyAyNTUgXSxcbiAgICAgIGJpc3F1ZTogWyAxLCAyMjggLyAyNTUsIDE5NiAvIDI1NSBdLFxuICAgICAgYmxhY2s6IFsgMCwgMCwgMCBdLFxuICAgICAgYmxhbmNoZWRhbG1vbmQ6IFsgMSwgMjM1IC8gMjU1LCAyMDUgLyAyNTUgXSxcbiAgICAgIGJsdWU6IFsgMCwgMCwgMSBdLFxuICAgICAgYmx1ZXZpb2xldDogWyAxMzggLyAyNTUsIDQzIC8gMjU1LCAyMjYgLyAyNTUgXSxcbiAgICAgIGJyb3duOiBbIDE2NSAvIDI1NSwgNDIgLyAyNTUsIDQyIC8gMjU1IF0sXG4gICAgICBidXJseXdvb2Q6IFsgMjIyIC8gMjU1LCAxODQgLyAyNTUsIDEzNSAvIDI1NSBdLFxuICAgICAgY2FkZXRibHVlOiBbIDk1IC8gMjU1LCAxNTggLyAyNTUsIDE2MCAvIDI1NSBdLFxuICAgICAgY2hhcnRyZXVzZTogWyAxMjcgLyAyNTUsIDEsIDAgXSxcbiAgICAgIGNob2NvbGF0ZTogWyAyMTAgLyAyNTUsIDEwNSAvIDI1NSwgMzAgLyAyNTUgXSxcbiAgICAgIGNvcmFsOiBbIDEsIDEyNyAvIDI1NSwgODAgLyAyNTUgXSxcbiAgICAgIGNvcm5mbG93ZXJibHVlOiBbIDEwMCAvIDI1NSwgMTQ5IC8gMjU1LCAyMzcgLyAyNTUgXSxcbiAgICAgIGNvcm5zaWxrOiBbIDEsIDI0OCAvIDI1NSwgMjIwIC8gMjU1IF0sXG4gICAgICBjcmltc29uOiBbIDIyMCAvIDI1NSwgMjAgLyAyNTUsIDYwIC8gMjU1IF0sXG4gICAgICBjeWFuOiBbIDAsIDEsIDEgXSxcbiAgICAgIGRhcmtibHVlOiBbIDAsIDAsIDEzOSAvIDI1NSBdLFxuICAgICAgZGFya2N5YW46IFsgMCwgMTM5IC8gMjU1LCAxMzkgLyAyNTUgXSxcbiAgICAgIGRhcmtnb2xkZW5yb2Q6IFsgMTg0IC8gMjU1LCAxMzQgLyAyNTUsIDExIC8gMjU1IF0sXG4gICAgICBkYXJrZ3JheTogWyAxNjkgLyAyNTUsIDE2OSAvIDI1NSwgMTY5IC8gMjU1IF0sXG4gICAgICBkYXJrZ3JlZW46IFsgMCwgMTAwIC8gMjU1LCAwIF0sXG4gICAgICBkYXJrZ3JleTogWyAxNjkgLyAyNTUsIDE2OSAvIDI1NSwgMTY5IC8gMjU1IF0sXG4gICAgICBkYXJra2hha2k6IFsgMTg5IC8gMjU1LCAxODMgLyAyNTUsIDEwNyAvIDI1NSBdLFxuICAgICAgZGFya21hZ2VudGE6IFsgMTM5IC8gMjU1LCAwLCAxMzkgLyAyNTUgXSxcbiAgICAgIGRhcmtvbGl2ZWdyZWVuOiBbIDg1IC8gMjU1LCAxMDcgLyAyNTUsIDQ3IC8gMjU1IF0sXG4gICAgICBkYXJrb3JhbmdlOiBbIDEsIDE0MCAvIDI1NSwgMCBdLFxuICAgICAgZGFya29yY2hpZDogWyAxNTMgLyAyNTUsIDUwIC8gMjU1LCAyMDQgLyAyNTUgXSxcbiAgICAgIGRhcmtyZWQ6IFsgMTM5IC8gMjU1LCAwLCAwIF0sXG4gICAgICBkYXJrc2FsbW9uOiBbIDIzMyAvIDI1NSwgMTUwIC8gMjU1LCAxMjIgLyAyNTUgXSxcbiAgICAgIGRhcmtzZWFncmVlbjogWyAxNDMgLyAyNTUsIDE4OCAvIDI1NSwgMTQzIC8gMjU1IF0sXG4gICAgICBkYXJrc2xhdGVibHVlOiBbIDcyIC8gMjU1LCA2MSAvIDI1NSwgMTM5IC8gMjU1IF0sXG4gICAgICBkYXJrc2xhdGVncmF5OiBbIDQ3IC8gMjU1LCA3OSAvIDI1NSwgNzkgLyAyNTUgXSxcbiAgICAgIGRhcmtzbGF0ZWdyZXk6IFsgNDcgLyAyNTUsIDc5IC8gMjU1LCA3OSAvIDI1NSBdLFxuICAgICAgZGFya3R1cnF1b2lzZTogWyAwLCAyMDYgLyAyNTUsIDIwOSAvIDI1NSBdLFxuICAgICAgZGFya3Zpb2xldDogWyAxNDggLyAyNTUsIDAsIDIxMSAvIDI1NSBdLFxuICAgICAgZGVlcHBpbms6IFsgMSwgMjAgLyAyNTUsIDE0NyAvIDI1NSBdLFxuICAgICAgZGVlcHNreWJsdWU6IFsgMCwgMTkxIC8gMjU1LCAxIF0sXG4gICAgICBkaW1ncmF5OiBbIDEwNSAvIDI1NSwgMTA1IC8gMjU1LCAxMDUgLyAyNTUgXSxcbiAgICAgIGRpbWdyZXk6IFsgMTA1IC8gMjU1LCAxMDUgLyAyNTUsIDEwNSAvIDI1NSBdLFxuICAgICAgZG9kZ2VyYmx1ZTogWyAzMCAvIDI1NSwgMTQ0IC8gMjU1LCAxIF0sXG4gICAgICBmaXJlYnJpY2s6IFsgMTc4IC8gMjU1LCAzNCAvIDI1NSwgMzQgLyAyNTUgXSxcbiAgICAgIGZsb3JhbHdoaXRlOiBbIDEsIDI1MCAvIDI1NSwgMjQwIC8gMjU1IF0sXG4gICAgICBmb3Jlc3RncmVlbjogWyAzNCAvIDI1NSwgMTM5IC8gMjU1LCAzNCAvIDI1NSBdLFxuICAgICAgZnVjaHNpYTogWyAxLCAwLCAxIF0sXG4gICAgICBnYWluc2Jvcm86IFsgMjIwIC8gMjU1LCAyMjAgLyAyNTUsIDIyMCAvIDI1NSBdLFxuICAgICAgZ2hvc3R3aGl0ZTogWyAyNDggLyAyNTUsIDI0OCAvIDI1NSwgMSBdLFxuICAgICAgZ29sZDogWyAxLCAyMTUgLyAyNTUsIDAgXSxcbiAgICAgIGdvbGRlbnJvZDogWyAyMTggLyAyNTUsIDE2NSAvIDI1NSwgMzIgLyAyNTUgXSxcbiAgICAgIGdyYXk6IFsgMTI4IC8gMjU1LCAxMjggLyAyNTUsIDEyOCAvIDI1NSBdLFxuICAgICAgZ3JlZW46IFsgMCwgMTI4IC8gMjU1LCAwIF0sXG4gICAgICBncmVlbnllbGxvdzogWyAxNzMgLyAyNTUsIDEsIDQ3IC8gMjU1IF0sXG4gICAgICBncmV5OiBbIDEyOCAvIDI1NSwgMTI4IC8gMjU1LCAxMjggLyAyNTUgXSxcbiAgICAgIGhvbmV5ZGV3OiBbIDI0MCAvIDI1NSwgMSwgMjQwIC8gMjU1IF0sXG4gICAgICBob3RwaW5rOiBbIDEsIDEwNSAvIDI1NSwgMTgwIC8gMjU1IF0sXG4gICAgICBpbmRpYW5yZWQ6IFsgMjA1IC8gMjU1LCA5MiAvIDI1NSwgOTIgLyAyNTUgXSxcbiAgICAgIGluZGlnbzogWyA3NSAvIDI1NSwgMCwgMTMwIC8gMjU1IF0sXG4gICAgICBpdm9yeTogWyAxLCAxLCAyNDAgLyAyNTUgXSxcbiAgICAgIGtoYWtpOiBbIDI0MCAvIDI1NSwgMjMwIC8gMjU1LCAxNDAgLyAyNTUgXSxcbiAgICAgIGxhdmVuZGVyOiBbIDIzMCAvIDI1NSwgMjMwIC8gMjU1LCAyNTAgLyAyNTUgXSxcbiAgICAgIGxhdmVuZGVyYmx1c2g6IFsgMSwgMjQwIC8gMjU1LCAyNDUgLyAyNTUgXSxcbiAgICAgIGxhd25ncmVlbjogWyAxMjQgLyAyNTUsIDI1MiAvIDI1NSwgMCBdLFxuICAgICAgbGVtb25jaGlmZm9uOiBbIDEsIDI1MCAvIDI1NSwgMjA1IC8gMjU1IF0sXG4gICAgICBsaWdodGJsdWU6IFsgMTczIC8gMjU1LCAyMTYgLyAyNTUsIDIzMCAvIDI1NSBdLFxuICAgICAgbGlnaHRjb3JhbDogWyAyNDAgLyAyNTUsIDEyOCAvIDI1NSwgMTI4IC8gMjU1IF0sXG4gICAgICBsaWdodGN5YW46IFsgMjI0IC8gMjU1LCAxLCAxIF0sXG4gICAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogWyAyNTAgLyAyNTUsIDI1MCAvIDI1NSwgMjEwIC8gMjU1IF0sXG4gICAgICBsaWdodGdyYXk6IFsgMjExIC8gMjU1LCAyMTEgLyAyNTUsIDIxMSAvIDI1NSBdLFxuICAgICAgbGlnaHRncmVlbjogWyAxNDQgLyAyNTUsIDIzOCAvIDI1NSwgMTQ0IC8gMjU1IF0sXG4gICAgICBsaWdodGdyZXk6IFsgMjExIC8gMjU1LCAyMTEgLyAyNTUsIDIxMSAvIDI1NSBdLFxuICAgICAgbGlnaHRwaW5rOiBbIDEsIDE4MiAvIDI1NSwgMTkzIC8gMjU1IF0sXG4gICAgICBsaWdodHNhbG1vbjogWyAxLCAxNjAgLyAyNTUsIDEyMiAvIDI1NSBdLFxuICAgICAgbGlnaHRzZWFncmVlbjogWyAzMiAvIDI1NSwgMTc4IC8gMjU1LCAxNzAgLyAyNTUgXSxcbiAgICAgIGxpZ2h0c2t5Ymx1ZTogWyAxMzUgLyAyNTUsIDIwNiAvIDI1NSwgMjUwIC8gMjU1IF0sXG4gICAgICBsaWdodHNsYXRlZ3JheTogWyAxMTkgLyAyNTUsIDEzNiAvIDI1NSwgMTUzIC8gMjU1IF0sXG4gICAgICBsaWdodHNsYXRlZ3JleTogWyAxMTkgLyAyNTUsIDEzNiAvIDI1NSwgMTUzIC8gMjU1IF0sXG4gICAgICBsaWdodHN0ZWVsYmx1ZTogWyAxNzYgLyAyNTUsIDE5NiAvIDI1NSwgMjIyIC8gMjU1IF0sXG4gICAgICBsaWdodHllbGxvdzogWyAxLCAxLCAyMjQgLyAyNTUgXSxcbiAgICAgIGxpbWU6IFsgMCwgMSwgMCBdLFxuICAgICAgbGltZWdyZWVuOiBbIDUwIC8gMjU1LCAyMDUgLyAyNTUsIDUwIC8gMjU1IF0sXG4gICAgICBsaW5lbjogWyAyNTAgLyAyNTUsIDI0MCAvIDI1NSwgMjMwIC8gMjU1IF0sXG4gICAgICBtYWdlbnRhOiBbIDEsIDAsIDEgXSxcbiAgICAgIG1hcm9vbjogWyAxMjggLyAyNTUsIDAsIDAgXSxcbiAgICAgIG1lZGl1bWFxdWFtYXJpbmU6IFsgMTAyIC8gMjU1LCAyMDUgLyAyNTUsIDE3MCAvIDI1NSBdLFxuICAgICAgbWVkaXVtYmx1ZTogWyAwLCAwLCAyMDUgLyAyNTUgXSxcbiAgICAgIG1lZGl1bW9yY2hpZDogWyAxODYgLyAyNTUsIDg1IC8gMjU1LCAyMTEgLyAyNTUgXSxcbiAgICAgIG1lZGl1bXB1cnBsZTogWyAxNDcgLyAyNTUsIDExMiAvIDI1NSwgMjE5IC8gMjU1IF0sXG4gICAgICBtZWRpdW1zZWFncmVlbjogWyA2MCAvIDI1NSwgMTc5IC8gMjU1LCAxMTMgLyAyNTUgXSxcbiAgICAgIG1lZGl1bXNsYXRlYmx1ZTogWyAxMjMgLyAyNTUsIDEwNCAvIDI1NSwgMjM4IC8gMjU1IF0sXG4gICAgICBtZWRpdW1zcHJpbmdncmVlbjogWyAwLCAyNTAgLyAyNTUsIDE1NCAvIDI1NSBdLFxuICAgICAgbWVkaXVtdHVycXVvaXNlOiBbIDcyIC8gMjU1LCAyMDkgLyAyNTUsIDIwNCAvIDI1NSBdLFxuICAgICAgbWVkaXVtdmlvbGV0cmVkOiBbIDE5OSAvIDI1NSwgMjEgLyAyNTUsIDEzMyAvIDI1NSBdLFxuICAgICAgbWlkbmlnaHRibHVlOiBbIDI1IC8gMjU1LCAyNSAvIDI1NSwgMTEyIC8gMjU1IF0sXG4gICAgICBtaW50Y3JlYW06IFsgMjQ1IC8gMjU1LCAxLCAyNTAgLyAyNTUgXSxcbiAgICAgIG1pc3R5cm9zZTogWyAxLCAyMjggLyAyNTUsIDIyNSAvIDI1NSBdLFxuICAgICAgbW9jY2FzaW46IFsgMSwgMjI4IC8gMjU1LCAxODEgLyAyNTUgXSxcbiAgICAgIG5hdmFqb3doaXRlOiBbIDEsIDIyMiAvIDI1NSwgMTczIC8gMjU1IF0sXG4gICAgICBuYXZ5OiBbIDAsIDAsIDEyOCAvIDI1NSBdLFxuICAgICAgb2xkbGFjZTogWyAyNTMgLyAyNTUsIDI0NSAvIDI1NSwgMjMwIC8gMjU1IF0sXG4gICAgICBvbGl2ZTogWyAxMjggLyAyNTUsIDEyOCAvIDI1NSwgMCBdLFxuICAgICAgb2xpdmVkcmFiOiBbIDEwNyAvIDI1NSwgMTQyIC8gMjU1LCAzNSAvIDI1NSBdLFxuICAgICAgb3JhbmdlOiBbIDEsIDE2NSAvIDI1NSwgMCBdLFxuICAgICAgb3JhbmdlcmVkOiBbIDEsIDY5IC8gMjU1LCAwIF0sXG4gICAgICBvcmNoaWQ6IFsgMjE4IC8gMjU1LCAxMTIgLyAyNTUsIDIxNCAvIDI1NSBdLFxuICAgICAgcGFsZWdvbGRlbnJvZDogWyAyMzggLyAyNTUsIDIzMiAvIDI1NSwgMTcwIC8gMjU1IF0sXG4gICAgICBwYWxlZ3JlZW46IFsgMTUyIC8gMjU1LCAyNTEgLyAyNTUsIDE1MiAvIDI1NSBdLFxuICAgICAgcGFsZXR1cnF1b2lzZTogWyAxNzUgLyAyNTUsIDIzOCAvIDI1NSwgMjM4IC8gMjU1IF0sXG4gICAgICBwYWxldmlvbGV0cmVkOiBbIDIxOSAvIDI1NSwgMTEyIC8gMjU1LCAxNDcgLyAyNTUgXSxcbiAgICAgIHBhcGF5YXdoaXA6IFsgMSwgMjM5IC8gMjU1LCAyMTMgLyAyNTUgXSxcbiAgICAgIHBlYWNocHVmZjogWyAxLCAyMTggLyAyNTUsIDE4NSAvIDI1NSBdLFxuICAgICAgcGVydTogWyAyMDUgLyAyNTUsIDEzMyAvIDI1NSwgNjMgLyAyNTUgXSxcbiAgICAgIHBpbms6IFsgMSwgMTkyIC8gMjU1LCAyMDMgLyAyNTUgXSxcbiAgICAgIHBsdW06IFsgMjIxIC8gMjU1LCAxNjAgLyAyNTUsIDIyMSAvIDI1NSBdLFxuICAgICAgcG93ZGVyYmx1ZTogWyAxNzYgLyAyNTUsIDIyNCAvIDI1NSwgMjMwIC8gMjU1IF0sXG4gICAgICBwdXJwbGU6IFsgMTI4IC8gMjU1LCAwLCAxMjggLyAyNTUgXSxcbiAgICAgIHJlYmVjY2FwdXJwbGU6IFsgMTAyIC8gMjU1LCA1MSAvIDI1NSwgMTUzIC8gMjU1IF0sXG4gICAgICByZWQ6IFsgMSwgMCwgMCBdLFxuICAgICAgcm9zeWJyb3duOiBbIDE4OCAvIDI1NSwgMTQzIC8gMjU1LCAxNDMgLyAyNTUgXSxcbiAgICAgIHJveWFsYmx1ZTogWyA2NSAvIDI1NSwgMTA1IC8gMjU1LCAyMjUgLyAyNTUgXSxcbiAgICAgIHNhZGRsZWJyb3duOiBbIDEzOSAvIDI1NSwgNjkgLyAyNTUsIDE5IC8gMjU1IF0sXG4gICAgICBzYWxtb246IFsgMjUwIC8gMjU1LCAxMjggLyAyNTUsIDExNCAvIDI1NSBdLFxuICAgICAgc2FuZHlicm93bjogWyAyNDQgLyAyNTUsIDE2NCAvIDI1NSwgOTYgLyAyNTUgXSxcbiAgICAgIHNlYWdyZWVuOiBbIDQ2IC8gMjU1LCAxMzkgLyAyNTUsIDg3IC8gMjU1IF0sXG4gICAgICBzZWFzaGVsbDogWyAxLCAyNDUgLyAyNTUsIDIzOCAvIDI1NSBdLFxuICAgICAgc2llbm5hOiBbIDE2MCAvIDI1NSwgODIgLyAyNTUsIDQ1IC8gMjU1IF0sXG4gICAgICBzaWx2ZXI6IFsgMTkyIC8gMjU1LCAxOTIgLyAyNTUsIDE5MiAvIDI1NSBdLFxuICAgICAgc2t5Ymx1ZTogWyAxMzUgLyAyNTUsIDIwNiAvIDI1NSwgMjM1IC8gMjU1IF0sXG4gICAgICBzbGF0ZWJsdWU6IFsgMTA2IC8gMjU1LCA5MCAvIDI1NSwgMjA1IC8gMjU1IF0sXG4gICAgICBzbGF0ZWdyYXk6IFsgMTEyIC8gMjU1LCAxMjggLyAyNTUsIDE0NCAvIDI1NSBdLFxuICAgICAgc2xhdGVncmV5OiBbIDExMiAvIDI1NSwgMTI4IC8gMjU1LCAxNDQgLyAyNTUgXSxcbiAgICAgIHNub3c6IFsgMSwgMjUwIC8gMjU1LCAyNTAgLyAyNTUgXSxcbiAgICAgIHNwcmluZ2dyZWVuOiBbIDAsIDEsIDEyNyAvIDI1NSBdLFxuICAgICAgc3RlZWxibHVlOiBbIDcwIC8gMjU1LCAxMzAgLyAyNTUsIDE4MCAvIDI1NSBdLFxuICAgICAgdGFuOiBbIDIxMCAvIDI1NSwgMTgwIC8gMjU1LCAxNDAgLyAyNTUgXSxcbiAgICAgIHRlYWw6IFsgMCwgMTI4IC8gMjU1LCAxMjggLyAyNTUgXSxcbiAgICAgIHRoaXN0bGU6IFsgMjE2IC8gMjU1LCAxOTEgLyAyNTUsIDIxNiAvIDI1NSBdLFxuICAgICAgdG9tYXRvOiBbIDEsIDk5IC8gMjU1LCA3MSAvIDI1NSBdLFxuICAgICAgdHVycXVvaXNlOiBbIDY0IC8gMjU1LCAyMjQgLyAyNTUsIDIwOCAvIDI1NSBdLFxuICAgICAgdmlvbGV0OiBbIDIzOCAvIDI1NSwgMTMwIC8gMjU1LCAyMzggLyAyNTUgXSxcbiAgICAgIHdoZWF0OiBbIDI0NSAvIDI1NSwgMjIyIC8gMjU1LCAxNzkgLyAyNTUgXSxcbiAgICAgIHdoaXRlOiBbIDEsIDEsIDEgXSxcbiAgICAgIHdoaXRlc21va2U6IFsgMjQ1IC8gMjU1LCAyNDUgLyAyNTUsIDI0NSAvIDI1NSBdLFxuICAgICAgeWVsbG93OiBbIDEsIDEsIDAgXSxcbiAgICAgIHllbGxvd2dyZWVuOiBbIDE1NCAvIDI1NSwgMjA1IC8gMjU1LCA1MCAvIDI1NSBdXG4gICAgfTtcbiAgICB2YXIgY29vcmRHcmFtbWFyID0gQXJyYXkoMykuZmlsbCgnPHBlcmNlbnRhZ2U+IHwgPG51bWJlcj5bMCwgMjU1XScpO1xuICAgIHZhciBjb29yZEdyYW1tYXJOdW1iZXIgPSBBcnJheSgzKS5maWxsKCc8bnVtYmVyPlswLCAyNTVdJyk7XG4gICAgdmFyIHNSR0IgPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ3NyZ2InLFxuICAgICAgbmFtZTogJ3NSR0InLFxuICAgICAgYmFzZTogc1JHQkxpbmVhcixcbiAgICAgIGZyb21CYXNlOiBmdW5jdGlvbiBmcm9tQmFzZShyZ2IpIHtcbiAgICAgICAgcmV0dXJuIHJnYi5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdmFyIHNpZ24gPSB2YWwgPCAwID8gLTEgOiAxO1xuICAgICAgICAgIHZhciBhYnMgPSB2YWwgKiBzaWduO1xuICAgICAgICAgIGlmIChhYnMgPiAuMDAzMTMwOCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKiAoMS4wNTUgKiBNYXRoLnBvdyhhYnMsIDEgLyAyLjQpIC0gLjA1NSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAxMi45MiAqIHZhbDtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgdG9CYXNlOiBmdW5jdGlvbiB0b0Jhc2UocmdiKSB7XG4gICAgICAgIHJldHVybiByZ2IubWFwKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIHZhciBzaWduID0gdmFsIDwgMCA/IC0xIDogMTtcbiAgICAgICAgICB2YXIgYWJzID0gdmFsICogc2lnbjtcbiAgICAgICAgICBpZiAoYWJzIDwgLjA0MDQ1KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsIC8gMTIuOTI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzaWduICogTWF0aC5wb3coKGFicyArIC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgcmdiOiB7XG4gICAgICAgICAgY29vcmRzOiBjb29yZEdyYW1tYXJcbiAgICAgICAgfSxcbiAgICAgICAgcmdiX251bWJlcjoge1xuICAgICAgICAgIG5hbWU6ICdyZ2InLFxuICAgICAgICAgIGNvbW1hczogdHJ1ZSxcbiAgICAgICAgICBjb29yZHM6IGNvb3JkR3JhbW1hck51bWJlcixcbiAgICAgICAgICBub0FscGhhOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGNvbG9yOiB7fSxcbiAgICAgICAgcmdiYToge1xuICAgICAgICAgIGNvb3JkczogY29vcmRHcmFtbWFyLFxuICAgICAgICAgIGNvbW1hczogdHJ1ZSxcbiAgICAgICAgICBsYXN0QWxwaGE6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgcmdiYV9udW1iZXI6IHtcbiAgICAgICAgICBuYW1lOiAncmdiYScsXG4gICAgICAgICAgY29tbWFzOiB0cnVlLFxuICAgICAgICAgIGNvb3JkczogY29vcmRHcmFtbWFyTnVtYmVyXG4gICAgICAgIH0sXG4gICAgICAgIGhleDoge1xuICAgICAgICAgIHR5cGU6ICdjdXN0b20nLFxuICAgICAgICAgIHRvR2FtdXQ6IHRydWUsXG4gICAgICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdChzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiAvXiMoW2EtZjAtOV17Myw0fSl7MSwyfSQvaS50ZXN0KHN0cik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCA8PSA1KSB7XG4gICAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9bYS1mMC05XS9naSwgJyQmJCYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZ2JhID0gW107XG4gICAgICAgICAgICBzdHIucmVwbGFjZSgvW2EtZjAtOV17Mn0vZ2ksIGZ1bmN0aW9uKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICByZ2JhLnB1c2gocGFyc2VJbnQoY29tcG9uZW50LCAxNikgLyAyNTUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBzcGFjZUlkOiAnc3JnYicsXG4gICAgICAgICAgICAgIGNvb3JkczogcmdiYS5zbGljZSgwLCAzKSxcbiAgICAgICAgICAgICAgYWxwaGE6IHJnYmEuc2xpY2UoMylbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZShjb29yZHMsIGFscGhhKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjUxID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSwgX3JlZjUxJGNvbGxhcHNlID0gX3JlZjUxLmNvbGxhcHNlLCBjb2xsYXBzZSA9IF9yZWY1MSRjb2xsYXBzZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWY1MSRjb2xsYXBzZTtcbiAgICAgICAgICAgIGlmIChhbHBoYSA8IDEpIHtcbiAgICAgICAgICAgICAgY29vcmRzLnB1c2goYWxwaGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29vcmRzID0gY29vcmRzLm1hcChmdW5jdGlvbihjNCkge1xuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChjNCAqIDI1NSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBjb2xsYXBzaWJsZSA9IGNvbGxhcHNlICYmIGNvb3Jkcy5ldmVyeShmdW5jdGlvbihjNCkge1xuICAgICAgICAgICAgICByZXR1cm4gYzQgJSAxNyA9PT0gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGhleCA9IGNvb3Jkcy5tYXAoZnVuY3Rpb24oYzQpIHtcbiAgICAgICAgICAgICAgaWYgKGNvbGxhcHNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChjNCAvIDE3KS50b1N0cmluZygxNik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGM0LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgICAgICAgfSkuam9pbignJyk7XG4gICAgICAgICAgICByZXR1cm4gJyMnICsgaGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAga2V5d29yZDoge1xuICAgICAgICAgIHR5cGU6ICdjdXN0b20nLFxuICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3Qoc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gL15bYS16XSskL2kudGVzdChzdHIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICAgICAgICAgICAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgICAgICBzcGFjZUlkOiAnc3JnYicsXG4gICAgICAgICAgICAgIGNvb3JkczogbnVsbCxcbiAgICAgICAgICAgICAgYWxwaGE6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc3RyID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgICAgICAgIHJldC5jb29yZHMgPSBLRVlXT1JEUy5ibGFjaztcbiAgICAgICAgICAgICAgcmV0LmFscGhhID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldC5jb29yZHMgPSBLRVlXT1JEU1tzdHJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJldC5jb29yZHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgUDMgPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ3AzJyxcbiAgICAgIG5hbWU6ICdQMycsXG4gICAgICBiYXNlOiBQM0xpbmVhcixcbiAgICAgIGZyb21CYXNlOiBzUkdCLmZyb21CYXNlLFxuICAgICAgdG9CYXNlOiBzUkdCLnRvQmFzZSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICBpZDogJ2Rpc3BsYXktcDMnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kaXNwbGF5X3NwYWNlID0gc1JHQjtcbiAgICBpZiAodHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgKF9DU1MgPSBDU1MpICE9PSBudWxsICYmIF9DU1MgIT09IHZvaWQgMCAmJiBfQ1NTLnN1cHBvcnRzKSB7XG4gICAgICBmb3IgKHZhciBfaTE5ID0gMCwgX2FycjIgPSBbIGxhYiwgUkVDMjAyMCwgUDMgXTsgX2kxOSA8IF9hcnIyLmxlbmd0aDsgX2kxOSsrKSB7XG4gICAgICAgIHZhciBzcGFjZSA9IF9hcnIyW19pMTldO1xuICAgICAgICB2YXIgY29vcmRzID0gc3BhY2UuZ2V0TWluQ29vcmRzKCk7XG4gICAgICAgIHZhciBjb2xvciA9IHtcbiAgICAgICAgICBzcGFjZTogc3BhY2UsXG4gICAgICAgICAgY29vcmRzOiBjb29yZHMsXG4gICAgICAgICAgYWxwaGE6IDFcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0ciA9IHNlcmlhbGl6ZShjb2xvcik7XG4gICAgICAgIGlmIChDU1Muc3VwcG9ydHMoJ2NvbG9yJywgc3RyKSkge1xuICAgICAgICAgIGRlZmF1bHRzLmRpc3BsYXlfc3BhY2UgPSBzcGFjZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBfZGlzcGxheShjb2xvcikge1xuICAgICAgdmFyIF9DU1MyO1xuICAgICAgdmFyIF9yZWY1MiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgX3JlZjUyJHNwYWNlID0gX3JlZjUyLnNwYWNlLCBzcGFjZSA9IF9yZWY1MiRzcGFjZSA9PT0gdm9pZCAwID8gZGVmYXVsdHMuZGlzcGxheV9zcGFjZSA6IF9yZWY1MiRzcGFjZSwgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNTIsIF9leGNsdWRlZDEwKTtcbiAgICAgIHZhciByZXQgPSBzZXJpYWxpemUoY29sb3IsIG9wdGlvbnMpO1xuICAgICAgaWYgKHR5cGVvZiBDU1MgPT09ICd1bmRlZmluZWQnIHx8IChfQ1NTMiA9IENTUykgIT09IG51bGwgJiYgX0NTUzIgIT09IHZvaWQgMCAmJiBfQ1NTMi5zdXBwb3J0cygnY29sb3InLCByZXQpIHx8ICFkZWZhdWx0cy5kaXNwbGF5X3NwYWNlKSB7XG4gICAgICAgIHJldCA9IG5ldyBTdHJpbmcocmV0KTtcbiAgICAgICAgcmV0LmNvbG9yID0gY29sb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZmFsbGJhY2tDb2xvciA9IHRvKGNvbG9yLCBzcGFjZSk7XG4gICAgICAgIHJldCA9IG5ldyBTdHJpbmcoc2VyaWFsaXplKGZhbGxiYWNrQ29sb3IsIG9wdGlvbnMpKTtcbiAgICAgICAgcmV0LmNvbG9yID0gZmFsbGJhY2tDb2xvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpc3RhbmNlKGNvbG9yMSwgY29sb3IyKSB7XG4gICAgICB2YXIgc3BhY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdsYWInO1xuICAgICAgc3BhY2UgPSBDb2xvclNwYWNlLmdldChzcGFjZSk7XG4gICAgICB2YXIgY29vcmRzMSA9IHNwYWNlLmZyb20oY29sb3IxKTtcbiAgICAgIHZhciBjb29yZHMyID0gc3BhY2UuZnJvbShjb2xvcjIpO1xuICAgICAgcmV0dXJuIE1hdGguc3FydChjb29yZHMxLnJlZHVjZShmdW5jdGlvbihhY2MsIGMxMiwgaSkge1xuICAgICAgICB2YXIgYzIyID0gY29vcmRzMltpXTtcbiAgICAgICAgaWYgKGlzTmFOKGMxMikgfHwgaXNOYU4oYzIyKSkge1xuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYyArIE1hdGgucG93KGMyMiAtIGMxMiwgMik7XG4gICAgICB9LCAwKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVxdWFscyhjb2xvcjEsIGNvbG9yMikge1xuICAgICAgY29sb3IxID0gZ2V0Q29sb3IoY29sb3IxKTtcbiAgICAgIGNvbG9yMiA9IGdldENvbG9yKGNvbG9yMik7XG4gICAgICByZXR1cm4gY29sb3IxLnNwYWNlID09PSBjb2xvcjIuc3BhY2UgJiYgY29sb3IxLmFscGhhID09PSBjb2xvcjIuYWxwaGEgJiYgY29sb3IxLmNvb3Jkcy5ldmVyeShmdW5jdGlvbihjNCwgaSkge1xuICAgICAgICByZXR1cm4gYzQgPT09IGNvbG9yMi5jb29yZHNbaV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gICAgICByZXR1cm4gZ2V0KGNvbG9yLCBbIFhZWl9ENjUsICd5JyBdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0THVtaW5hbmNlKGNvbG9yLCB2YWx1ZSkge1xuICAgICAgc2V0KGNvbG9yLCBbIFhZWl9ENjUsICd5JyBdLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyJDIoQ29sb3IzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IzLnByb3RvdHlwZSwgJ2x1bWluYW5jZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldEx1bWluYW5jZSh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICBzZXRMdW1pbmFuY2UodGhpcywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGx1bWluYW5jZSA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgZ2V0THVtaW5hbmNlOiBnZXRMdW1pbmFuY2UsXG4gICAgICBzZXRMdW1pbmFuY2U6IHNldEx1bWluYW5jZSxcbiAgICAgIHJlZ2lzdGVyOiByZWdpc3RlciQyXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY29udHJhc3RXQ0FHMjEoY29sb3IxLCBjb2xvcjIpIHtcbiAgICAgIGNvbG9yMSA9IGdldENvbG9yKGNvbG9yMSk7XG4gICAgICBjb2xvcjIgPSBnZXRDb2xvcihjb2xvcjIpO1xuICAgICAgdmFyIFkxID0gTWF0aC5tYXgoZ2V0THVtaW5hbmNlKGNvbG9yMSksIDApO1xuICAgICAgdmFyIFkyID0gTWF0aC5tYXgoZ2V0THVtaW5hbmNlKGNvbG9yMiksIDApO1xuICAgICAgaWYgKFkyID4gWTEpIHtcbiAgICAgICAgdmFyIF9yZWY1MyA9IFsgWTIsIFkxIF07XG4gICAgICAgIFkxID0gX3JlZjUzWzBdO1xuICAgICAgICBZMiA9IF9yZWY1M1sxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoWTEgKyAuMDUpIC8gKFkyICsgLjA1KTtcbiAgICB9XG4gICAgdmFyIG5vcm1CRyA9IC41NjtcbiAgICB2YXIgbm9ybVRYVCA9IC41NztcbiAgICB2YXIgcmV2VFhUID0gLjYyO1xuICAgIHZhciByZXZCRyA9IC42NTtcbiAgICB2YXIgYmxrVGhycyA9IC4wMjI7XG4gICAgdmFyIGJsa0NsbXAgPSAxLjQxNDtcbiAgICB2YXIgbG9DbGlwID0gLjE7XG4gICAgdmFyIGRlbHRhWW1pbiA9IDVlLTQ7XG4gICAgdmFyIHNjYWxlQm9XID0gMS4xNDtcbiAgICB2YXIgbG9Cb1dvZmZzZXQgPSAuMDI3O1xuICAgIHZhciBzY2FsZVdvQiA9IDEuMTQ7XG4gICAgZnVuY3Rpb24gZmNsYW1wKFkpIHtcbiAgICAgIGlmIChZID49IGJsa1RocnMpIHtcbiAgICAgICAgcmV0dXJuIFk7XG4gICAgICB9XG4gICAgICByZXR1cm4gWSArIE1hdGgucG93KGJsa1RocnMgLSBZLCBibGtDbG1wKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZWFyaXplKHZhbCkge1xuICAgICAgdmFyIHNpZ24gPSB2YWwgPCAwID8gLTEgOiAxO1xuICAgICAgdmFyIGFicyA9IE1hdGguYWJzKHZhbCk7XG4gICAgICByZXR1cm4gc2lnbiAqIE1hdGgucG93KGFicywgMi40KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29udHJhc3RBUENBKGJhY2tncm91bmQsIGZvcmVncm91bmQpIHtcbiAgICAgIGZvcmVncm91bmQgPSBnZXRDb2xvcihmb3JlZ3JvdW5kKTtcbiAgICAgIGJhY2tncm91bmQgPSBnZXRDb2xvcihiYWNrZ3JvdW5kKTtcbiAgICAgIHZhciBTO1xuICAgICAgdmFyIEM7XG4gICAgICB2YXIgU2FwYztcbiAgICAgIHZhciBSLCBHLCBCO1xuICAgICAgZm9yZWdyb3VuZCA9IHRvKGZvcmVncm91bmQsICdzcmdiJyk7XG4gICAgICB2YXIgX2ZvcmVncm91bmQkY29vcmRzID0gX3NsaWNlZFRvQXJyYXkoZm9yZWdyb3VuZC5jb29yZHMsIDMpO1xuICAgICAgUiA9IF9mb3JlZ3JvdW5kJGNvb3Jkc1swXTtcbiAgICAgIEcgPSBfZm9yZWdyb3VuZCRjb29yZHNbMV07XG4gICAgICBCID0gX2ZvcmVncm91bmQkY29vcmRzWzJdO1xuICAgICAgdmFyIGx1bVR4dCA9IGxpbmVhcml6ZShSKSAqIC4yMTI2NzI5ICsgbGluZWFyaXplKEcpICogLjcxNTE1MjIgKyBsaW5lYXJpemUoQikgKiAuMDcyMTc1O1xuICAgICAgYmFja2dyb3VuZCA9IHRvKGJhY2tncm91bmQsICdzcmdiJyk7XG4gICAgICB2YXIgX2JhY2tncm91bmQkY29vcmRzID0gX3NsaWNlZFRvQXJyYXkoYmFja2dyb3VuZC5jb29yZHMsIDMpO1xuICAgICAgUiA9IF9iYWNrZ3JvdW5kJGNvb3Jkc1swXTtcbiAgICAgIEcgPSBfYmFja2dyb3VuZCRjb29yZHNbMV07XG4gICAgICBCID0gX2JhY2tncm91bmQkY29vcmRzWzJdO1xuICAgICAgdmFyIGx1bUJnID0gbGluZWFyaXplKFIpICogLjIxMjY3MjkgKyBsaW5lYXJpemUoRykgKiAuNzE1MTUyMiArIGxpbmVhcml6ZShCKSAqIC4wNzIxNzU7XG4gICAgICB2YXIgWXR4dCA9IGZjbGFtcChsdW1UeHQpO1xuICAgICAgdmFyIFliZyA9IGZjbGFtcChsdW1CZyk7XG4gICAgICB2YXIgQm9XID0gWWJnID4gWXR4dDtcbiAgICAgIGlmIChNYXRoLmFicyhZYmcgLSBZdHh0KSA8IGRlbHRhWW1pbikge1xuICAgICAgICBDID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChCb1cpIHtcbiAgICAgICAgICBTID0gTWF0aC5wb3coWWJnLCBub3JtQkcpIC0gTWF0aC5wb3coWXR4dCwgbm9ybVRYVCk7XG4gICAgICAgICAgQyA9IFMgKiBzY2FsZUJvVztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBTID0gTWF0aC5wb3coWWJnLCByZXZCRykgLSBNYXRoLnBvdyhZdHh0LCByZXZUWFQpO1xuICAgICAgICAgIEMgPSBTICogc2NhbGVXb0I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChNYXRoLmFicyhDKSA8IGxvQ2xpcCkge1xuICAgICAgICBTYXBjID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoQyA+IDApIHtcbiAgICAgICAgU2FwYyA9IEMgLSBsb0JvV29mZnNldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFNhcGMgPSBDICsgbG9Cb1dvZmZzZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gU2FwYyAqIDEwMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29udHJhc3RNaWNoZWxzb24oY29sb3IxLCBjb2xvcjIpIHtcbiAgICAgIGNvbG9yMSA9IGdldENvbG9yKGNvbG9yMSk7XG4gICAgICBjb2xvcjIgPSBnZXRDb2xvcihjb2xvcjIpO1xuICAgICAgdmFyIFkxID0gTWF0aC5tYXgoZ2V0THVtaW5hbmNlKGNvbG9yMSksIDApO1xuICAgICAgdmFyIFkyID0gTWF0aC5tYXgoZ2V0THVtaW5hbmNlKGNvbG9yMiksIDApO1xuICAgICAgaWYgKFkyID4gWTEpIHtcbiAgICAgICAgdmFyIF9yZWY1NCA9IFsgWTIsIFkxIF07XG4gICAgICAgIFkxID0gX3JlZjU0WzBdO1xuICAgICAgICBZMiA9IF9yZWY1NFsxXTtcbiAgICAgIH1cbiAgICAgIHZhciBkZW5vbSA9IFkxICsgWTI7XG4gICAgICByZXR1cm4gZGVub20gPT09IDAgPyAwIDogKFkxIC0gWTIpIC8gZGVub207XG4gICAgfVxuICAgIHZhciBtYXggPSA1ZTQ7XG4gICAgZnVuY3Rpb24gY29udHJhc3RXZWJlcihjb2xvcjEsIGNvbG9yMikge1xuICAgICAgY29sb3IxID0gZ2V0Q29sb3IoY29sb3IxKTtcbiAgICAgIGNvbG9yMiA9IGdldENvbG9yKGNvbG9yMik7XG4gICAgICB2YXIgWTEgPSBNYXRoLm1heChnZXRMdW1pbmFuY2UoY29sb3IxKSwgMCk7XG4gICAgICB2YXIgWTIgPSBNYXRoLm1heChnZXRMdW1pbmFuY2UoY29sb3IyKSwgMCk7XG4gICAgICBpZiAoWTIgPiBZMSkge1xuICAgICAgICB2YXIgX3JlZjU1ID0gWyBZMiwgWTEgXTtcbiAgICAgICAgWTEgPSBfcmVmNTVbMF07XG4gICAgICAgIFkyID0gX3JlZjU1WzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFkyID09PSAwID8gbWF4IDogKFkxIC0gWTIpIC8gWTI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbnRyYXN0THN0YXIoY29sb3IxLCBjb2xvcjIpIHtcbiAgICAgIGNvbG9yMSA9IGdldENvbG9yKGNvbG9yMSk7XG4gICAgICBjb2xvcjIgPSBnZXRDb2xvcihjb2xvcjIpO1xuICAgICAgdmFyIEwxID0gZ2V0KGNvbG9yMSwgWyBsYWIsICdsJyBdKTtcbiAgICAgIHZhciBMMiA9IGdldChjb2xvcjIsIFsgbGFiLCAnbCcgXSk7XG4gICAgICByZXR1cm4gTWF0aC5hYnMoTDEgLSBMMik7XG4gICAgfVxuICAgIHZhciBcXHUwM2I1JDEgPSAyMTYgLyAyNDM4OTtcbiAgICB2YXIgXFx1MDNiNTMgPSAyNCAvIDExNjtcbiAgICB2YXIgXFx1MDNiYSA9IDI0Mzg5IC8gMjc7XG4gICAgdmFyIHdoaXRlID0gV0hJVEVTLkQ2NTtcbiAgICB2YXIgbGFiX2Q2NSA9IG5ldyBDb2xvclNwYWNlKHtcbiAgICAgIGlkOiAnbGFiLWQ2NScsXG4gICAgICBuYW1lOiAnTGFiIEQ2NScsXG4gICAgICBjb29yZHM6IHtcbiAgICAgICAgbDoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIDAsIDEwMCBdLFxuICAgICAgICAgIG5hbWU6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBhOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgLTEyNSwgMTI1IF1cbiAgICAgICAgfSxcbiAgICAgICAgYjoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIC0xMjUsIDEyNSBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3aGl0ZTogd2hpdGUsXG4gICAgICBiYXNlOiBYWVpfRDY1LFxuICAgICAgZnJvbUJhc2U6IGZ1bmN0aW9uIGZyb21CYXNlKFhZWikge1xuICAgICAgICB2YXIgeHl6ID0gWFlaLm1hcChmdW5jdGlvbih2YWx1ZSwgaSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZSAvIHdoaXRlW2ldO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGYgPSB4eXoubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID4gXFx1MDNiNSQxID8gTWF0aC5jYnJ0KHZhbHVlKSA6IChcXHUwM2JhICogdmFsdWUgKyAxNikgLyAxMTY7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gWyAxMTYgKiBmWzFdIC0gMTYsIDUwMCAqIChmWzBdIC0gZlsxXSksIDIwMCAqIChmWzFdIC0gZlsyXSkgXTtcbiAgICAgIH0sXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShMYWIpIHtcbiAgICAgICAgdmFyIGYgPSBbXTtcbiAgICAgICAgZlsxXSA9IChMYWJbMF0gKyAxNikgLyAxMTY7XG4gICAgICAgIGZbMF0gPSBMYWJbMV0gLyA1MDAgKyBmWzFdO1xuICAgICAgICBmWzJdID0gZlsxXSAtIExhYlsyXSAvIDIwMDtcbiAgICAgICAgdmFyIHh5eiA9IFsgZlswXSA+IFxcdTAzYjUzID8gTWF0aC5wb3coZlswXSwgMykgOiAoMTE2ICogZlswXSAtIDE2KSAvIFxcdTAzYmEsIExhYlswXSA+IDggPyBNYXRoLnBvdygoTGFiWzBdICsgMTYpIC8gMTE2LCAzKSA6IExhYlswXSAvIFxcdTAzYmEsIGZbMl0gPiBcXHUwM2I1MyA/IE1hdGgucG93KGZbMl0sIDMpIDogKDExNiAqIGZbMl0gLSAxNikgLyBcXHUwM2JhIF07XG4gICAgICAgIHJldHVybiB4eXoubWFwKGZ1bmN0aW9uKHZhbHVlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlICogd2hpdGVbaV07XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgJ2xhYi1kNjUnOiB7XG4gICAgICAgICAgY29vcmRzOiBbICc8bnVtYmVyPiB8IDxwZXJjZW50YWdlPicsICc8bnVtYmVyPicsICc8bnVtYmVyPicgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHBoaSA9IE1hdGgucG93KDUsIC41KSAqIC41ICsgLjU7XG4gICAgZnVuY3Rpb24gY29udHJhc3REZWx0YVBoaShjb2xvcjEsIGNvbG9yMikge1xuICAgICAgY29sb3IxID0gZ2V0Q29sb3IoY29sb3IxKTtcbiAgICAgIGNvbG9yMiA9IGdldENvbG9yKGNvbG9yMik7XG4gICAgICB2YXIgTHN0cjEgPSBnZXQoY29sb3IxLCBbIGxhYl9kNjUsICdsJyBdKTtcbiAgICAgIHZhciBMc3RyMiA9IGdldChjb2xvcjIsIFsgbGFiX2Q2NSwgJ2wnIF0pO1xuICAgICAgdmFyIGRlbHRhUGhpU3RhciA9IE1hdGguYWJzKE1hdGgucG93KExzdHIxLCBwaGkpIC0gTWF0aC5wb3coTHN0cjIsIHBoaSkpO1xuICAgICAgdmFyIGNvbnRyYXN0MiA9IE1hdGgucG93KGRlbHRhUGhpU3RhciwgMSAvIHBoaSkgKiBNYXRoLlNRUlQyIC0gNDA7XG4gICAgICByZXR1cm4gY29udHJhc3QyIDwgNy41ID8gMCA6IGNvbnRyYXN0MjtcbiAgICB9XG4gICAgdmFyIGNvbnRyYXN0TWV0aG9kcyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgY29udHJhc3RXQ0FHMjE6IGNvbnRyYXN0V0NBRzIxLFxuICAgICAgY29udHJhc3RBUENBOiBjb250cmFzdEFQQ0EsXG4gICAgICBjb250cmFzdE1pY2hlbHNvbjogY29udHJhc3RNaWNoZWxzb24sXG4gICAgICBjb250cmFzdFdlYmVyOiBjb250cmFzdFdlYmVyLFxuICAgICAgY29udHJhc3RMc3RhcjogY29udHJhc3RMc3RhcixcbiAgICAgIGNvbnRyYXN0RGVsdGFQaGk6IGNvbnRyYXN0RGVsdGFQaGlcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBjb250cmFzdChiYWNrZ3JvdW5kLCBmb3JlZ3JvdW5kKSB7XG4gICAgICB2YXIgbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICBpZiAoaXNTdHJpbmcobykpIHtcbiAgICAgICAgbyA9IHtcbiAgICAgICAgICBhbGdvcml0aG06IG9cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBfbyA9IG8sIGFsZ29yaXRobSA9IF9vLmFsZ29yaXRobSwgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfbywgX2V4Y2x1ZGVkMTEpO1xuICAgICAgaWYgKCFhbGdvcml0aG0pIHtcbiAgICAgICAgdmFyIGFsZ29yaXRobXMgPSBPYmplY3Qua2V5cyhjb250cmFzdE1ldGhvZHMpLm1hcChmdW5jdGlvbihhMikge1xuICAgICAgICAgIHJldHVybiBhMi5yZXBsYWNlKC9eY29udHJhc3QvLCAnJyk7XG4gICAgICAgIH0pLmpvaW4oJywgJyk7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvbnRyYXN0KCkgZnVuY3Rpb24gbmVlZHMgYSBjb250cmFzdCBhbGdvcml0aG0uIFBsZWFzZSBzcGVjaWZ5IG9uZSBvZjogJy5jb25jYXQoYWxnb3JpdGhtcykpO1xuICAgICAgfVxuICAgICAgYmFja2dyb3VuZCA9IGdldENvbG9yKGJhY2tncm91bmQpO1xuICAgICAgZm9yZWdyb3VuZCA9IGdldENvbG9yKGZvcmVncm91bmQpO1xuICAgICAgZm9yICh2YXIgYTIgaW4gY29udHJhc3RNZXRob2RzKSB7XG4gICAgICAgIGlmICgnY29udHJhc3QnICsgYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCkgPT09IGEyLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICByZXR1cm4gY29udHJhc3RNZXRob2RzW2EyXShiYWNrZ3JvdW5kLCBmb3JlZ3JvdW5kLCByZXN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBjb250cmFzdCBhbGdvcml0aG06ICcuY29uY2F0KGFsZ29yaXRobSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1dihjb2xvcikge1xuICAgICAgdmFyIF9nZXRBbGwgPSBnZXRBbGwoY29sb3IsIFhZWl9ENjUpLCBfZ2V0QWxsMiA9IF9zbGljZWRUb0FycmF5KF9nZXRBbGwsIDMpLCBYID0gX2dldEFsbDJbMF0sIFkgPSBfZ2V0QWxsMlsxXSwgWiA9IF9nZXRBbGwyWzJdO1xuICAgICAgdmFyIGRlbm9tID0gWCArIDE1ICogWSArIDMgKiBaO1xuICAgICAgcmV0dXJuIFsgNCAqIFggLyBkZW5vbSwgOSAqIFkgLyBkZW5vbSBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiB4eShjb2xvcikge1xuICAgICAgdmFyIF9nZXRBbGwzID0gZ2V0QWxsKGNvbG9yLCBYWVpfRDY1KSwgX2dldEFsbDQgPSBfc2xpY2VkVG9BcnJheShfZ2V0QWxsMywgMyksIFggPSBfZ2V0QWxsNFswXSwgWSA9IF9nZXRBbGw0WzFdLCBaID0gX2dldEFsbDRbMl07XG4gICAgICB2YXIgc3VtID0gWCArIFkgKyBaO1xuICAgICAgcmV0dXJuIFsgWCAvIHN1bSwgWSAvIHN1bSBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWdpc3RlciQxKENvbG9yMykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yMy5wcm90b3R5cGUsICd1dicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHV2KHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvcjMucHJvdG90eXBlLCAneHknLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB4eSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBjaHJvbWF0aWNpdHkgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgIHV2OiB1dixcbiAgICAgIHh5OiB4eSxcbiAgICAgIHJlZ2lzdGVyOiByZWdpc3RlciQxXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZGVsdGFFNzYoY29sb3IsIHNhbXBsZSkge1xuICAgICAgcmV0dXJuIGRpc3RhbmNlKGNvbG9yLCBzYW1wbGUsICdsYWInKTtcbiAgICB9XG4gICAgdmFyIFxcdTAzYzAgPSBNYXRoLlBJO1xuICAgIHZhciBkMnIgPSBcXHUwM2MwIC8gMTgwO1xuICAgIGZ1bmN0aW9uIGRlbHRhRUNNQyhjb2xvciwgc2FtcGxlKSB7XG4gICAgICB2YXIgX3JlZjU2ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSwgX3JlZjU2JGwgPSBfcmVmNTYubCwgbCA9IF9yZWY1NiRsID09PSB2b2lkIDAgPyAyIDogX3JlZjU2JGwsIF9yZWY1NiRjID0gX3JlZjU2LmMsIGM0ID0gX3JlZjU2JGMgPT09IHZvaWQgMCA/IDEgOiBfcmVmNTYkYztcbiAgICAgIHZhciBfbGFiJGZyb201ID0gbGFiLmZyb20oY29sb3IpLCBfbGFiJGZyb202ID0gX3NsaWNlZFRvQXJyYXkoX2xhYiRmcm9tNSwgMyksIEwxID0gX2xhYiRmcm9tNlswXSwgYTEgPSBfbGFiJGZyb202WzFdLCBiMSA9IF9sYWIkZnJvbTZbMl07XG4gICAgICB2YXIgX2xjaCRmcm9tID0gbGNoLmZyb20obGFiLCBbIEwxLCBhMSwgYjEgXSksIF9sY2gkZnJvbTIgPSBfc2xpY2VkVG9BcnJheShfbGNoJGZyb20sIDMpLCBDMSA9IF9sY2gkZnJvbTJbMV0sIEgxID0gX2xjaCRmcm9tMlsyXTtcbiAgICAgIHZhciBfbGFiJGZyb203ID0gbGFiLmZyb20oc2FtcGxlKSwgX2xhYiRmcm9tOCA9IF9zbGljZWRUb0FycmF5KF9sYWIkZnJvbTcsIDMpLCBMMiA9IF9sYWIkZnJvbThbMF0sIGEyID0gX2xhYiRmcm9tOFsxXSwgYjIgPSBfbGFiJGZyb204WzJdO1xuICAgICAgdmFyIEMyID0gbGNoLmZyb20obGFiLCBbIEwyLCBhMiwgYjIgXSlbMV07XG4gICAgICBpZiAoQzEgPCAwKSB7XG4gICAgICAgIEMxID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChDMiA8IDApIHtcbiAgICAgICAgQzIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIFxcdTAzOTRMID0gTDEgLSBMMjtcbiAgICAgIHZhciBcXHUwMzk0QyA9IEMxIC0gQzI7XG4gICAgICB2YXIgXFx1MDM5NGEgPSBhMSAtIGEyO1xuICAgICAgdmFyIFxcdTAzOTRiID0gYjEgLSBiMjtcbiAgICAgIHZhciBIMiA9IE1hdGgucG93KFxcdTAzOTRhLCAyKSArIE1hdGgucG93KFxcdTAzOTRiLCAyKSAtIE1hdGgucG93KFxcdTAzOTRDLCAyKTtcbiAgICAgIHZhciBTTCA9IC41MTE7XG4gICAgICBpZiAoTDEgPj0gMTYpIHtcbiAgICAgICAgU0wgPSAuMDQwOTc1ICogTDEgLyAoMSArIC4wMTc2NSAqIEwxKTtcbiAgICAgIH1cbiAgICAgIHZhciBTQyA9IC4wNjM4ICogQzEgLyAoMSArIC4wMTMxICogQzEpICsgLjYzODtcbiAgICAgIHZhciBUO1xuICAgICAgaWYgKE51bWJlci5pc05hTihIMSkpIHtcbiAgICAgICAgSDEgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKEgxID49IDE2NCAmJiBIMSA8PSAzNDUpIHtcbiAgICAgICAgVCA9IC41NiArIE1hdGguYWJzKC4yICogTWF0aC5jb3MoKEgxICsgMTY4KSAqIGQycikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgVCA9IC4zNiArIE1hdGguYWJzKC40ICogTWF0aC5jb3MoKEgxICsgMzUpICogZDJyKSk7XG4gICAgICB9XG4gICAgICB2YXIgQzQgPSBNYXRoLnBvdyhDMSwgNCk7XG4gICAgICB2YXIgRiA9IE1hdGguc3FydChDNCAvIChDNCArIDE5MDApKTtcbiAgICAgIHZhciBTSCA9IFNDICogKEYgKiBUICsgMSAtIEYpO1xuICAgICAgdmFyIGRFID0gTWF0aC5wb3coXFx1MDM5NEwgLyAobCAqIFNMKSwgMik7XG4gICAgICBkRSArPSBNYXRoLnBvdyhcXHUwMzk0QyAvIChjNCAqIFNDKSwgMik7XG4gICAgICBkRSArPSBIMiAvIE1hdGgucG93KFNILCAyKTtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoZEUpO1xuICAgIH1cbiAgICB2YXIgWXckMSA9IDIwMztcbiAgICB2YXIgWFlaX0Fic19ENjUgPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ3h5ei1hYnMtZDY1JyxcbiAgICAgIG5hbWU6ICdBYnNvbHV0ZSBYWVogRDY1JyxcbiAgICAgIGNvb3Jkczoge1xuICAgICAgICB4OiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgOTUwNC43IF0sXG4gICAgICAgICAgbmFtZTogJ1hhJ1xuICAgICAgICB9LFxuICAgICAgICB5OiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMWU0IF0sXG4gICAgICAgICAgbmFtZTogJ1lhJ1xuICAgICAgICB9LFxuICAgICAgICB6OiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMTA4ODguMyBdLFxuICAgICAgICAgIG5hbWU6ICdaYSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGJhc2U6IFhZWl9ENjUsXG4gICAgICBmcm9tQmFzZTogZnVuY3Rpb24gZnJvbUJhc2UoWFlaKSB7XG4gICAgICAgIHJldHVybiBYWVoubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgodiAqIFl3JDEsIDApO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShBYnNYWVopIHtcbiAgICAgICAgcmV0dXJuIEFic1hZWi5tYXAoZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heCh2IC8gWXckMSwgMCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBiJDEgPSAxLjE1O1xuICAgIHZhciBnID0gLjY2O1xuICAgIHZhciBuJDEgPSAyNjEwIC8gTWF0aC5wb3coMiwgMTQpO1xuICAgIHZhciBuaW52JDEgPSBNYXRoLnBvdygyLCAxNCkgLyAyNjEwO1xuICAgIHZhciBjMSQyID0gMzQyNCAvIE1hdGgucG93KDIsIDEyKTtcbiAgICB2YXIgYzIkMiA9IDI0MTMgLyBNYXRoLnBvdygyLCA3KTtcbiAgICB2YXIgYzMkMiA9IDIzOTIgLyBNYXRoLnBvdygyLCA3KTtcbiAgICB2YXIgcCA9IDEuNyAqIDI1MjMgLyBNYXRoLnBvdygyLCA1KTtcbiAgICB2YXIgcGludiA9IE1hdGgucG93KDIsIDUpIC8gKDEuNyAqIDI1MjMpO1xuICAgIHZhciBkID0gLS41NjtcbiAgICB2YXIgZDAgPSAxNjI5NTQ5OTUzMjgyMTU2NWUtMjc7XG4gICAgdmFyIFhZWnRvQ29uZV9NID0gWyBbIC40MTQ3ODk3MiwgLjU3OTk5OSwgLjAxNDY0OCBdLCBbIC0uMjAxNTEsIDEuMTIwNjQ5LCAuMDUzMTAwOCBdLCBbIC0uMDE2NjAwOCwgLjI2NDgsIC42Njg0Nzk5IF0gXTtcbiAgICB2YXIgQ29uZXRvWFlaX00gPSBbIFsgMS45MjQyMjY0MzU3ODc2MDY3LCAtMS4wMDQ3OTIzMTI1OTUzNjU3LCAuMDM3NjUxNDA0MDMwNjE4IF0sIFsgLjM1MDMxNjc2MjA5NDk5OTA3LCAuNzI2NDgxMTkzOTMxNjU1MiwgLS4wNjUzODQ0MjI5NDgwODUwMSBdLCBbIC0uMDkwOTgyODEwOTgyODQ3NTIsIC0uMzEyNzI4MjkwNTIzMDczOSwgMS41MjI3NjY1NjEzMDUyNjAzIF0gXTtcbiAgICB2YXIgQ29uZXRvSWFiX00gPSBbIFsgLjUsIC41LCAwIF0sIFsgMy41MjQsIC00LjA2NjcwOCwgLjU0MjcwOCBdLCBbIC4xOTkwNzYsIDEuMDk2Nzk5LCAtMS4yOTU4NzUgXSBdO1xuICAgIHZhciBJYWJ0b0NvbmVfTSA9IFsgWyAxLCAuMTM4NjA1MDQzMjcxNTM5MywgLjA1ODA0NzMxNjE1NjExODg2IF0sIFsgLjk5OTk5OTk5OTk5OTk5OTksIC0uMTM4NjA1MDQzMjcxNTM5MywgLS4wNTgwNDczMTYxNTYxMTg4NiBdLCBbIC45OTk5OTk5OTk5OTk5OTk4LCAtLjA5NjAxOTI0MjAyNjMxODk1LCAtLjgxMTg5MTg5NjA1NjAzODggXSBdO1xuICAgIHZhciBKemF6YnogPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ2p6YXpieicsXG4gICAgICBuYW1lOiAnSnphemJ6JyxcbiAgICAgIGNvb3Jkczoge1xuICAgICAgICBqejoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIDAsIDEgXSxcbiAgICAgICAgICBuYW1lOiAnSnonXG4gICAgICAgIH0sXG4gICAgICAgIGF6OiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgLS41LCAuNSBdXG4gICAgICAgIH0sXG4gICAgICAgIGJ6OiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgLS41LCAuNSBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBiYXNlOiBYWVpfQWJzX0Q2NSxcbiAgICAgIGZyb21CYXNlOiBmdW5jdGlvbiBmcm9tQmFzZShYWVopIHtcbiAgICAgICAgdmFyIF9YWVogPSBfc2xpY2VkVG9BcnJheShYWVosIDMpLCBYYSA9IF9YWVpbMF0sIFlhID0gX1hZWlsxXSwgWmEgPSBfWFlaWzJdO1xuICAgICAgICB2YXIgWG0gPSBiJDEgKiBYYSAtIChiJDEgLSAxKSAqIFphO1xuICAgICAgICB2YXIgWW0gPSBnICogWWEgLSAoZyAtIDEpICogWGE7XG4gICAgICAgIHZhciBMTVMgPSBtdWx0aXBseU1hdHJpY2VzKFhZWnRvQ29uZV9NLCBbIFhtLCBZbSwgWmEgXSk7XG4gICAgICAgIHZhciBQUUxNUyA9IExNUy5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdmFyIG51bSA9IGMxJDIgKyBjMiQyICogTWF0aC5wb3codmFsIC8gMWU0LCBuJDEpO1xuICAgICAgICAgIHZhciBkZW5vbSA9IDEgKyBjMyQyICogTWF0aC5wb3codmFsIC8gMWU0LCBuJDEpO1xuICAgICAgICAgIHJldHVybiBNYXRoLnBvdyhudW0gLyBkZW5vbSwgcCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX211bHRpcGx5TWF0cmljZXMgPSBtdWx0aXBseU1hdHJpY2VzKENvbmV0b0lhYl9NLCBQUUxNUyksIF9tdWx0aXBseU1hdHJpY2VzMiA9IF9zbGljZWRUb0FycmF5KF9tdWx0aXBseU1hdHJpY2VzLCAzKSwgSXogPSBfbXVsdGlwbHlNYXRyaWNlczJbMF0sIGF6ID0gX211bHRpcGx5TWF0cmljZXMyWzFdLCBieiA9IF9tdWx0aXBseU1hdHJpY2VzMlsyXTtcbiAgICAgICAgdmFyIEp6ID0gKDEgKyBkKSAqIEl6IC8gKDEgKyBkICogSXopIC0gZDA7XG4gICAgICAgIHJldHVybiBbIEp6LCBheiwgYnogXTtcbiAgICAgIH0sXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShKemF6YnoyKSB7XG4gICAgICAgIHZhciBfSnphemJ6ID0gX3NsaWNlZFRvQXJyYXkoSnphemJ6MiwgMyksIEp6ID0gX0p6YXpielswXSwgYXogPSBfSnphemJ6WzFdLCBieiA9IF9KemF6YnpbMl07XG4gICAgICAgIHZhciBJeiA9IChKeiArIGQwKSAvICgxICsgZCAtIGQgKiAoSnogKyBkMCkpO1xuICAgICAgICB2YXIgUFFMTVMgPSBtdWx0aXBseU1hdHJpY2VzKElhYnRvQ29uZV9NLCBbIEl6LCBheiwgYnogXSk7XG4gICAgICAgIHZhciBMTVMgPSBQUUxNUy5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdmFyIG51bSA9IGMxJDIgLSBNYXRoLnBvdyh2YWwsIHBpbnYpO1xuICAgICAgICAgIHZhciBkZW5vbSA9IGMzJDIgKiBNYXRoLnBvdyh2YWwsIHBpbnYpIC0gYzIkMjtcbiAgICAgICAgICB2YXIgeCA9IDFlNCAqIE1hdGgucG93KG51bSAvIGRlbm9tLCBuaW52JDEpO1xuICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9tdWx0aXBseU1hdHJpY2VzMyA9IG11bHRpcGx5TWF0cmljZXMoQ29uZXRvWFlaX00sIExNUyksIF9tdWx0aXBseU1hdHJpY2VzNCA9IF9zbGljZWRUb0FycmF5KF9tdWx0aXBseU1hdHJpY2VzMywgMyksIFhtID0gX211bHRpcGx5TWF0cmljZXM0WzBdLCBZbSA9IF9tdWx0aXBseU1hdHJpY2VzNFsxXSwgWmEgPSBfbXVsdGlwbHlNYXRyaWNlczRbMl07XG4gICAgICAgIHZhciBYYSA9IChYbSArIChiJDEgLSAxKSAqIFphKSAvIGIkMTtcbiAgICAgICAgdmFyIFlhID0gKFltICsgKGcgLSAxKSAqIFhhKSAvIGc7XG4gICAgICAgIHJldHVybiBbIFhhLCBZYSwgWmEgXTtcbiAgICAgIH0sXG4gICAgICBmb3JtYXRzOiB7XG4gICAgICAgIGNvbG9yOiB7fVxuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBqemN6aHogPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ2p6Y3poeicsXG4gICAgICBuYW1lOiAnSnpDekh6JyxcbiAgICAgIGNvb3Jkczoge1xuICAgICAgICBqejoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIDAsIDEgXSxcbiAgICAgICAgICBuYW1lOiAnSnonXG4gICAgICAgIH0sXG4gICAgICAgIGN6OiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMSBdLFxuICAgICAgICAgIG5hbWU6ICdDaHJvbWEnXG4gICAgICAgIH0sXG4gICAgICAgIGh6OiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMzYwIF0sXG4gICAgICAgICAgdHlwZTogJ2FuZ2xlJyxcbiAgICAgICAgICBuYW1lOiAnSHVlJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmFzZTogSnphemJ6LFxuICAgICAgZnJvbUJhc2U6IGZ1bmN0aW9uIGZyb21CYXNlKGp6YXpieikge1xuICAgICAgICB2YXIgX2p6YXpieiA9IF9zbGljZWRUb0FycmF5KGp6YXpieiwgMyksIEp6ID0gX2p6YXpielswXSwgYXogPSBfanphemJ6WzFdLCBieiA9IF9qemF6YnpbMl07XG4gICAgICAgIHZhciBodWU7XG4gICAgICAgIHZhciBcXHUwM2I1MiA9IDJlLTQ7XG4gICAgICAgIGlmIChNYXRoLmFicyhheikgPCBcXHUwM2I1MiAmJiBNYXRoLmFicyhieikgPCBcXHUwM2I1Mikge1xuICAgICAgICAgIGh1ZSA9IE5hTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBodWUgPSBNYXRoLmF0YW4yKGJ6LCBheikgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbIEp6LCBNYXRoLnNxcnQoTWF0aC5wb3coYXosIDIpICsgTWF0aC5wb3coYnosIDIpKSwgY29uc3RyYWluKGh1ZSkgXTtcbiAgICAgIH0sXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShqemN6aHoyKSB7XG4gICAgICAgIHJldHVybiBbIGp6Y3poejJbMF0sIGp6Y3poejJbMV0gKiBNYXRoLmNvcyhqemN6aHoyWzJdICogTWF0aC5QSSAvIDE4MCksIGp6Y3poejJbMV0gKiBNYXRoLnNpbihqemN6aHoyWzJdICogTWF0aC5QSSAvIDE4MCkgXTtcbiAgICAgIH0sXG4gICAgICBmb3JtYXRzOiB7XG4gICAgICAgIGNvbG9yOiB7fVxuICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGRlbHRhRUp6KGNvbG9yLCBzYW1wbGUpIHtcbiAgICAgIHZhciBfanpjemh6JGZyb20gPSBqemN6aHouZnJvbShjb2xvciksIF9qemN6aHokZnJvbTIgPSBfc2xpY2VkVG9BcnJheShfanpjemh6JGZyb20sIDMpLCBKejEgPSBfanpjemh6JGZyb20yWzBdLCBDejEgPSBfanpjemh6JGZyb20yWzFdLCBIejEgPSBfanpjemh6JGZyb20yWzJdO1xuICAgICAgdmFyIF9qemN6aHokZnJvbTMgPSBqemN6aHouZnJvbShzYW1wbGUpLCBfanpjemh6JGZyb200ID0gX3NsaWNlZFRvQXJyYXkoX2p6Y3poeiRmcm9tMywgMyksIEp6MiA9IF9qemN6aHokZnJvbTRbMF0sIEN6MiA9IF9qemN6aHokZnJvbTRbMV0sIEh6MiA9IF9qemN6aHokZnJvbTRbMl07XG4gICAgICB2YXIgXFx1MDM5NEogPSBKejEgLSBKejI7XG4gICAgICB2YXIgXFx1MDM5NEMgPSBDejEgLSBDejI7XG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKEh6MSkgJiYgTnVtYmVyLmlzTmFOKEh6MikpIHtcbiAgICAgICAgSHoxID0gMDtcbiAgICAgICAgSHoyID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoTnVtYmVyLmlzTmFOKEh6MSkpIHtcbiAgICAgICAgSHoxID0gSHoyO1xuICAgICAgfSBlbHNlIGlmIChOdW1iZXIuaXNOYU4oSHoyKSkge1xuICAgICAgICBIejIgPSBIejE7XG4gICAgICB9XG4gICAgICB2YXIgXFx1MDM5NGggPSBIejEgLSBIejI7XG4gICAgICB2YXIgXFx1MDM5NEggPSAyICogTWF0aC5zcXJ0KEN6MSAqIEN6MikgKiBNYXRoLnNpbihcXHUwMzk0aCAvIDIgKiAoTWF0aC5QSSAvIDE4MCkpO1xuICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhcXHUwMzk0SiwgMikgKyBNYXRoLnBvdyhcXHUwMzk0QywgMikgKyBNYXRoLnBvdyhcXHUwMzk0SCwgMikpO1xuICAgIH1cbiAgICB2YXIgYzEkMSA9IDM0MjQgLyA0MDk2O1xuICAgIHZhciBjMiQxID0gMjQxMyAvIDEyODtcbiAgICB2YXIgYzMkMSA9IDIzOTIgLyAxMjg7XG4gICAgdmFyIG0xID0gMjYxMCAvIDE2Mzg0O1xuICAgIHZhciBtMiA9IDI1MjMgLyAzMjtcbiAgICB2YXIgaW0xID0gMTYzODQgLyAyNjEwO1xuICAgIHZhciBpbTIgPSAzMiAvIDI1MjM7XG4gICAgdmFyIFhZWnRvTE1TX00kMSA9IFsgWyAuMzU5MiwgLjY5NzYsIC0uMDM1OCBdLCBbIC0uMTkyMiwgMS4xMDA0LCAuMDc1NSBdLCBbIC4wMDcsIC4wNzQ5LCAuODQzNCBdIF07XG4gICAgdmFyIExNU3RvSVBUX00gPSBbIFsgMjA0OCAvIDQwOTYsIDIwNDggLyA0MDk2LCAwIF0sIFsgNjYxMCAvIDQwOTYsIC0xMzYxMyAvIDQwOTYsIDcwMDMgLyA0MDk2IF0sIFsgMTc5MzMgLyA0MDk2LCAtMTczOTAgLyA0MDk2LCAtNTQzIC8gNDA5NiBdIF07XG4gICAgdmFyIElQVHRvTE1TX00gPSBbIFsgLjk5OTk4ODg5NjU2Mjg0MDIsIC4wMDg2MDUwNTAxNDcyODcwNTksIC4xMTEwMzQzNzE1OTg2MTY0OCBdLCBbIDEuMDAwMDExMTAzNDM3MTYsIC0uMDA4NjA1MDUwMTQ3Mjg3MDU5LCAtLjExMTAzNDM3MTU5ODYxNjQ4IF0sIFsgMS4wMDAwMzIwNjMzOTEwMDU0LCAuNTYwMDQ5MTM1NDcyNzksIC0uMzIwNjMzOTEwMDU0MTIwMyBdIF07XG4gICAgdmFyIExNU3RvWFlaX00kMSA9IFsgWyAyLjA3MDE4MDA1NjY5NTYxMzcsIC0xLjMyNjQ1Njg3NjEwMzAyMSwgLjIwNjYxNjAwNjg0Nzg1NTE3IF0sIFsgLjM2NDk4ODI1MDAzMjY1NzUsIC42ODA0NjczNjI4NTIyMzUyLCAtLjA0NTQyMTc1MzA3NTg1MzIzIF0sIFsgLS4wNDk1OTU1NDIyMzg5MzIxMSwgLS4wNDk0MjExNjExODY3NTc0OSwgMS4xODc5OTU5NDE3MzI4MDM0IF0gXTtcbiAgICB2YXIgaWN0Y3AgPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ2ljdGNwJyxcbiAgICAgIG5hbWU6ICdJQ1RDUCcsXG4gICAgICBjb29yZHM6IHtcbiAgICAgICAgaToge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIDAsIDEgXSxcbiAgICAgICAgICBuYW1lOiAnSSdcbiAgICAgICAgfSxcbiAgICAgICAgY3Q6IHtcbiAgICAgICAgICByZWZSYW5nZTogWyAtLjUsIC41IF0sXG4gICAgICAgICAgbmFtZTogJ0NUJ1xuICAgICAgICB9LFxuICAgICAgICBjcDoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIC0uNSwgLjUgXSxcbiAgICAgICAgICBuYW1lOiAnQ1AnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBiYXNlOiBYWVpfQWJzX0Q2NSxcbiAgICAgIGZyb21CYXNlOiBmdW5jdGlvbiBmcm9tQmFzZShYWVopIHtcbiAgICAgICAgdmFyIExNUyA9IG11bHRpcGx5TWF0cmljZXMoWFladG9MTVNfTSQxLCBYWVopO1xuICAgICAgICByZXR1cm4gTE1TdG9JQ3RDcChMTVMpO1xuICAgICAgfSxcbiAgICAgIHRvQmFzZTogZnVuY3Rpb24gdG9CYXNlKElDdENwKSB7XG4gICAgICAgIHZhciBMTVMgPSBJQ3RDcHRvTE1TKElDdENwKTtcbiAgICAgICAgcmV0dXJuIG11bHRpcGx5TWF0cmljZXMoTE1TdG9YWVpfTSQxLCBMTVMpO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgY29sb3I6IHt9XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gTE1TdG9JQ3RDcChMTVMpIHtcbiAgICAgIHZhciBQUUxNUyA9IExNUy5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHZhciBudW0gPSBjMSQxICsgYzIkMSAqIE1hdGgucG93KHZhbCAvIDFlNCwgbTEpO1xuICAgICAgICB2YXIgZGVub20gPSAxICsgYzMkMSAqIE1hdGgucG93KHZhbCAvIDFlNCwgbTEpO1xuICAgICAgICByZXR1cm4gTWF0aC5wb3cobnVtIC8gZGVub20sIG0yKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG11bHRpcGx5TWF0cmljZXMoTE1TdG9JUFRfTSwgUFFMTVMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBJQ3RDcHRvTE1TKElDdENwKSB7XG4gICAgICB2YXIgUFFMTVMgPSBtdWx0aXBseU1hdHJpY2VzKElQVHRvTE1TX00sIElDdENwKTtcbiAgICAgIHZhciBMTVMgPSBQUUxNUy5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHZhciBudW0gPSBNYXRoLm1heChNYXRoLnBvdyh2YWwsIGltMikgLSBjMSQxLCAwKTtcbiAgICAgICAgdmFyIGRlbm9tID0gYzIkMSAtIGMzJDEgKiBNYXRoLnBvdyh2YWwsIGltMik7XG4gICAgICAgIHJldHVybiAxZTQgKiBNYXRoLnBvdyhudW0gLyBkZW5vbSwgaW0xKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIExNUztcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVsdGFFSVRQKGNvbG9yLCBzYW1wbGUpIHtcbiAgICAgIHZhciBfaWN0Y3AkZnJvbSA9IGljdGNwLmZyb20oY29sb3IpLCBfaWN0Y3AkZnJvbTIgPSBfc2xpY2VkVG9BcnJheShfaWN0Y3AkZnJvbSwgMyksIEkxID0gX2ljdGNwJGZyb20yWzBdLCBUMSA9IF9pY3RjcCRmcm9tMlsxXSwgUDEgPSBfaWN0Y3AkZnJvbTJbMl07XG4gICAgICB2YXIgX2ljdGNwJGZyb20zID0gaWN0Y3AuZnJvbShzYW1wbGUpLCBfaWN0Y3AkZnJvbTQgPSBfc2xpY2VkVG9BcnJheShfaWN0Y3AkZnJvbTMsIDMpLCBJMiA9IF9pY3RjcCRmcm9tNFswXSwgVDIgPSBfaWN0Y3AkZnJvbTRbMV0sIFAyID0gX2ljdGNwJGZyb200WzJdO1xuICAgICAgcmV0dXJuIDcyMCAqIE1hdGguc3FydChNYXRoLnBvdyhJMSAtIEkyLCAyKSArIC4yNSAqIE1hdGgucG93KFQxIC0gVDIsIDIpICsgTWF0aC5wb3coUDEgLSBQMiwgMikpO1xuICAgIH1cbiAgICB2YXIgWFladG9MTVNfTSA9IFsgWyAuODE5MDIyNDQzMjE2NDMxOSwgLjM2MTkwNjI1NjI4MDEyMjEsIC0uMTI4ODczNzgyNjEyMTY0MTQgXSwgWyAuMDMyOTgzNjY3MTk4MDI3MSwgLjkyOTI4Njg0Njg5NjU1NDYsIC4wMzYxNDQ2NjgxNjk5OTg0NCBdLCBbIC4wNDgxNzcxOTk1NjYwNDYyNTUsIC4yNjQyMzk1MjQ5NDQyMjc2NCwgLjYzMzU0NzgyNTgxMzY5MzcgXSBdO1xuICAgIHZhciBMTVN0b1hZWl9NID0gWyBbIDEuMjI2ODc5ODczMzc0MTU1NywgLS41NTc4MTQ5OTY1NTU0ODEzLCAuMjgxMzkxMDUwMTc3MjE1ODMgXSwgWyAtLjA0MDU3NTc2MjYyNDMxMzcyLCAxLjExMjI4NjgyOTM5NzA1OTQsIC0uMDcxNzExMDY2NjYxNTE3MDEgXSwgWyAtLjA3NjM3Mjk0OTc0NjcyMTQyLCAtLjQyMTQ5MzMyMzk2Mjc5MTQsIDEuNTg2OTI0MDI0NDI3MjQxOCBdIF07XG4gICAgdmFyIExNU3RvTGFiX00gPSBbIFsgLjIxMDQ1NDI1NTMsIC43OTM2MTc3ODUsIC0uMDA0MDcyMDQ2OCBdLCBbIDEuOTc3OTk4NDk1MSwgLTIuNDI4NTkyMjA1LCAuNDUwNTkzNzA5OSBdLCBbIC4wMjU5MDQwMzcxLCAuNzgyNzcxNzY2MiwgLS44MDg2NzU3NjYgXSBdO1xuICAgIHZhciBMYWJ0b0xNU19NID0gWyBbIC45OTk5OTk5OTg0NTA1MTk4LCAuMzk2MzM3NzkyMTczNzY3ODYsIC4yMTU4MDM3NTgwNjA3NTg4IF0sIFsgMS4wMDAwMDAwMDg4ODE3NjA5LCAtLjEwNTU2MTM0MjMyMzY1NjM1LCAtLjA2Mzg1NDE3NDc3MTcwNTkxIF0sIFsgMS4wMDAwMDAwNTQ2NzI0MTA4LCAtLjA4OTQ4NDE4MjA5NDk2NTc1LCAtMS4yOTE0ODU1Mzc4NjQwOTE3IF0gXTtcbiAgICB2YXIgT0tMYWIgPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ29rbGFiJyxcbiAgICAgIG5hbWU6ICdPS0xhYicsXG4gICAgICBjb29yZHM6IHtcbiAgICAgICAgbDoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIDAsIDEgXSxcbiAgICAgICAgICBuYW1lOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgYToge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIC0uNCwgLjQgXVxuICAgICAgICB9LFxuICAgICAgICBiOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgLS40LCAuNCBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3aGl0ZTogJ0Q2NScsXG4gICAgICBiYXNlOiBYWVpfRDY1LFxuICAgICAgZnJvbUJhc2U6IGZ1bmN0aW9uIGZyb21CYXNlKFhZWikge1xuICAgICAgICB2YXIgTE1TID0gbXVsdGlwbHlNYXRyaWNlcyhYWVp0b0xNU19NLCBYWVopO1xuICAgICAgICB2YXIgTE1TZyA9IExNUy5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGguY2JydCh2YWwpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG11bHRpcGx5TWF0cmljZXMoTE1TdG9MYWJfTSwgTE1TZyk7XG4gICAgICB9LFxuICAgICAgdG9CYXNlOiBmdW5jdGlvbiB0b0Jhc2UoT0tMYWIyKSB7XG4gICAgICAgIHZhciBMTVNnID0gbXVsdGlwbHlNYXRyaWNlcyhMYWJ0b0xNU19NLCBPS0xhYjIpO1xuICAgICAgICB2YXIgTE1TID0gTE1TZy5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgucG93KHZhbCwgMyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbXVsdGlwbHlNYXRyaWNlcyhMTVN0b1hZWl9NLCBMTVMpO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgb2tsYWI6IHtcbiAgICAgICAgICBjb29yZHM6IFsgJzxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+JywgJzxudW1iZXI+JywgJzxudW1iZXI+JyBdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBkZWx0YUVPSyhjb2xvciwgc2FtcGxlKSB7XG4gICAgICB2YXIgX09LTGFiJGZyb20gPSBPS0xhYi5mcm9tKGNvbG9yKSwgX09LTGFiJGZyb20yID0gX3NsaWNlZFRvQXJyYXkoX09LTGFiJGZyb20sIDMpLCBMMSA9IF9PS0xhYiRmcm9tMlswXSwgYTEgPSBfT0tMYWIkZnJvbTJbMV0sIGIxID0gX09LTGFiJGZyb20yWzJdO1xuICAgICAgdmFyIF9PS0xhYiRmcm9tMyA9IE9LTGFiLmZyb20oc2FtcGxlKSwgX09LTGFiJGZyb200ID0gX3NsaWNlZFRvQXJyYXkoX09LTGFiJGZyb20zLCAzKSwgTDIgPSBfT0tMYWIkZnJvbTRbMF0sIGEyID0gX09LTGFiJGZyb200WzFdLCBiMiA9IF9PS0xhYiRmcm9tNFsyXTtcbiAgICAgIHZhciBcXHUwMzk0TCA9IEwxIC0gTDI7XG4gICAgICB2YXIgXFx1MDM5NGEgPSBhMSAtIGEyO1xuICAgICAgdmFyIFxcdTAzOTRiID0gYjEgLSBiMjtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coXFx1MDM5NEwsIDIpICsgTWF0aC5wb3coXFx1MDM5NGEsIDIpICsgTWF0aC5wb3coXFx1MDM5NGIsIDIpKTtcbiAgICB9XG4gICAgdmFyIGRlbHRhRU1ldGhvZHMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgIGRlbHRhRTc2OiBkZWx0YUU3NixcbiAgICAgIGRlbHRhRUNNQzogZGVsdGFFQ01DLFxuICAgICAgZGVsdGFFMjAwMDogZGVsdGFFMjAwMCxcbiAgICAgIGRlbHRhRUp6OiBkZWx0YUVKeixcbiAgICAgIGRlbHRhRUlUUDogZGVsdGFFSVRQLFxuICAgICAgZGVsdGFFT0s6IGRlbHRhRU9LXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZGVsdGFFKGMxMiwgYzIyKSB7XG4gICAgICB2YXIgbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICBpZiAoaXNTdHJpbmcobykpIHtcbiAgICAgICAgbyA9IHtcbiAgICAgICAgICBtZXRob2Q6IG9cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBfbzIgPSBvLCBfbzIkbWV0aG9kID0gX28yLm1ldGhvZCwgbWV0aG9kID0gX28yJG1ldGhvZCA9PT0gdm9pZCAwID8gZGVmYXVsdHMuZGVsdGFFIDogX28yJG1ldGhvZCwgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfbzIsIF9leGNsdWRlZDEyKTtcbiAgICAgIGMxMiA9IGdldENvbG9yKGMxMik7XG4gICAgICBjMjIgPSBnZXRDb2xvcihjMjIpO1xuICAgICAgZm9yICh2YXIgbTMgaW4gZGVsdGFFTWV0aG9kcykge1xuICAgICAgICBpZiAoJ2RlbHRhZScgKyBtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gbTMudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIHJldHVybiBkZWx0YUVNZXRob2RzW20zXShjMTIsIGMyMiwgcmVzdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZGVsdGFFIG1ldGhvZDogJy5jb25jYXQobWV0aG9kKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IpIHtcbiAgICAgIHZhciBhbW91bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IC4yNTtcbiAgICAgIHZhciBzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KCdva2xjaCcsICdsY2gnKTtcbiAgICAgIHZhciBsaWdodG5lc3MgPSBbIHNwYWNlLCAnbCcgXTtcbiAgICAgIHJldHVybiBzZXQoY29sb3IsIGxpZ2h0bmVzcywgZnVuY3Rpb24obCkge1xuICAgICAgICByZXR1cm4gbCAqICgxICsgYW1vdW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkYXJrZW4oY29sb3IpIHtcbiAgICAgIHZhciBhbW91bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IC4yNTtcbiAgICAgIHZhciBzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KCdva2xjaCcsICdsY2gnKTtcbiAgICAgIHZhciBsaWdodG5lc3MgPSBbIHNwYWNlLCAnbCcgXTtcbiAgICAgIHJldHVybiBzZXQoY29sb3IsIGxpZ2h0bmVzcywgZnVuY3Rpb24obCkge1xuICAgICAgICByZXR1cm4gbCAqICgxIC0gYW1vdW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgdmFyaWF0aW9ucyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgbGlnaHRlbjogbGlnaHRlbixcbiAgICAgIGRhcmtlbjogZGFya2VuXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gbWl4KGMxMiwgYzIyKSB7XG4gICAgICB2YXIgcDIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IC41O1xuICAgICAgdmFyIG8gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgICAgdmFyIF9yZWY1NyA9IFsgZ2V0Q29sb3IoYzEyKSwgZ2V0Q29sb3IoYzIyKSBdO1xuICAgICAgYzEyID0gX3JlZjU3WzBdO1xuICAgICAgYzIyID0gX3JlZjU3WzFdO1xuICAgICAgaWYgKHR5cGUocDIpID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgX3JlZjU4ID0gWyAuNSwgcDIgXTtcbiAgICAgICAgcDIgPSBfcmVmNThbMF07XG4gICAgICAgIG8gPSBfcmVmNThbMV07XG4gICAgICB9XG4gICAgICB2YXIgX28zID0gbywgc3BhY2UgPSBfbzMuc3BhY2UsIG91dHB1dFNwYWNlID0gX28zLm91dHB1dFNwYWNlLCBwcmVtdWx0aXBsaWVkID0gX28zLnByZW11bHRpcGxpZWQ7XG4gICAgICB2YXIgciA9IHJhbmdlKGMxMiwgYzIyLCB7XG4gICAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgICAgb3V0cHV0U3BhY2U6IG91dHB1dFNwYWNlLFxuICAgICAgICBwcmVtdWx0aXBsaWVkOiBwcmVtdWx0aXBsaWVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByKHAyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RlcHMoYzEyLCBjMjIpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHZhciBjb2xvclJhbmdlO1xuICAgICAgaWYgKGlzUmFuZ2UoYzEyKSkge1xuICAgICAgICBjb2xvclJhbmdlID0gYzEyO1xuICAgICAgICBvcHRpb25zID0gYzIyO1xuICAgICAgICB2YXIgX2NvbG9yUmFuZ2UkcmFuZ2VBcmdzID0gX3NsaWNlZFRvQXJyYXkoY29sb3JSYW5nZS5yYW5nZUFyZ3MuY29sb3JzLCAyKTtcbiAgICAgICAgYzEyID0gX2NvbG9yUmFuZ2UkcmFuZ2VBcmdzWzBdO1xuICAgICAgICBjMjIgPSBfY29sb3JSYW5nZSRyYW5nZUFyZ3NbMV07XG4gICAgICB9XG4gICAgICB2YXIgX29wdGlvbnMyID0gb3B0aW9ucywgbWF4RGVsdGFFID0gX29wdGlvbnMyLm1heERlbHRhRSwgZGVsdGFFTWV0aG9kID0gX29wdGlvbnMyLmRlbHRhRU1ldGhvZCwgX29wdGlvbnMyJHN0ZXBzID0gX29wdGlvbnMyLnN0ZXBzLCBzdGVwczIgPSBfb3B0aW9uczIkc3RlcHMgPT09IHZvaWQgMCA/IDIgOiBfb3B0aW9uczIkc3RlcHMsIF9vcHRpb25zMiRtYXhTdGVwcyA9IF9vcHRpb25zMi5tYXhTdGVwcywgbWF4U3RlcHMgPSBfb3B0aW9uczIkbWF4U3RlcHMgPT09IHZvaWQgMCA/IDFlMyA6IF9vcHRpb25zMiRtYXhTdGVwcywgcmFuZ2VPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9vcHRpb25zMiwgX2V4Y2x1ZGVkMTMpO1xuICAgICAgaWYgKCFjb2xvclJhbmdlKSB7XG4gICAgICAgIHZhciBfcmVmNTkgPSBbIGdldENvbG9yKGMxMiksIGdldENvbG9yKGMyMikgXTtcbiAgICAgICAgYzEyID0gX3JlZjU5WzBdO1xuICAgICAgICBjMjIgPSBfcmVmNTlbMV07XG4gICAgICAgIGNvbG9yUmFuZ2UgPSByYW5nZShjMTIsIGMyMiwgcmFuZ2VPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHZhciB0b3RhbERlbHRhID0gZGVsdGFFKGMxMiwgYzIyKTtcbiAgICAgIHZhciBhY3R1YWxTdGVwcyA9IG1heERlbHRhRSA+IDAgPyBNYXRoLm1heChzdGVwczIsIE1hdGguY2VpbCh0b3RhbERlbHRhIC8gbWF4RGVsdGFFKSArIDEpIDogc3RlcHMyO1xuICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgaWYgKG1heFN0ZXBzICE9PSB2b2lkIDApIHtcbiAgICAgICAgYWN0dWFsU3RlcHMgPSBNYXRoLm1pbihhY3R1YWxTdGVwcywgbWF4U3RlcHMpO1xuICAgICAgfVxuICAgICAgaWYgKGFjdHVhbFN0ZXBzID09PSAxKSB7XG4gICAgICAgIHJldCA9IFsge1xuICAgICAgICAgIHA6IC41LFxuICAgICAgICAgIGNvbG9yOiBjb2xvclJhbmdlKC41KVxuICAgICAgICB9IF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc3RlcCA9IDEgLyAoYWN0dWFsU3RlcHMgLSAxKTtcbiAgICAgICAgcmV0ID0gQXJyYXkuZnJvbSh7XG4gICAgICAgICAgbGVuZ3RoOiBhY3R1YWxTdGVwc1xuICAgICAgICB9LCBmdW5jdGlvbihfLCBpKSB7XG4gICAgICAgICAgdmFyIHAyID0gaSAqIHN0ZXA7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHA6IHAyLFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yUmFuZ2UocDIpXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4RGVsdGFFID4gMCkge1xuICAgICAgICB2YXIgbWF4RGVsdGEgPSByZXQucmVkdWNlKGZ1bmN0aW9uKGFjYywgY3VyLCBpKSB7XG4gICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgXFx1MDM5NFxcdTAzOTUgPSBkZWx0YUUoY3VyLmNvbG9yLCByZXRbaSAtIDFdLmNvbG9yLCBkZWx0YUVNZXRob2QpO1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heChhY2MsIFxcdTAzOTRcXHUwMzk1KTtcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIHdoaWxlIChtYXhEZWx0YSA+IG1heERlbHRhRSkge1xuICAgICAgICAgIG1heERlbHRhID0gMDtcbiAgICAgICAgICBmb3IgKHZhciBfaTIwID0gMTsgX2kyMCA8IHJldC5sZW5ndGggJiYgcmV0Lmxlbmd0aCA8IG1heFN0ZXBzOyBfaTIwKyspIHtcbiAgICAgICAgICAgIHZhciBwcmV2ID0gcmV0W19pMjAgLSAxXTtcbiAgICAgICAgICAgIHZhciBjdXIgPSByZXRbX2kyMF07XG4gICAgICAgICAgICB2YXIgcDIgPSAoY3VyLnAgKyBwcmV2LnApIC8gMjtcbiAgICAgICAgICAgIHZhciBfY29sb3IgPSBjb2xvclJhbmdlKHAyKTtcbiAgICAgICAgICAgIG1heERlbHRhID0gTWF0aC5tYXgobWF4RGVsdGEsIGRlbHRhRShfY29sb3IsIHByZXYuY29sb3IpLCBkZWx0YUUoX2NvbG9yLCBjdXIuY29sb3IpKTtcbiAgICAgICAgICAgIHJldC5zcGxpY2UoX2kyMCwgMCwge1xuICAgICAgICAgICAgICBwOiBwMixcbiAgICAgICAgICAgICAgY29sb3I6IGNvbG9yUmFuZ2UocDIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF9pMjArKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldCA9IHJldC5tYXAoZnVuY3Rpb24oYTIpIHtcbiAgICAgICAgcmV0dXJuIGEyLmNvbG9yO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBmdW5jdGlvbiByYW5nZShjb2xvcjEsIGNvbG9yMikge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgaWYgKGlzUmFuZ2UoY29sb3IxKSkge1xuICAgICAgICB2YXIgciA9IGNvbG9yMSwgb3B0aW9uczIgPSBjb2xvcjI7XG4gICAgICAgIHJldHVybiByYW5nZS5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShyLnJhbmdlQXJncy5jb2xvcnMpLmNvbmNhdChbIF9leHRlbmRzKHt9LCByLnJhbmdlQXJncy5vcHRpb25zLCBvcHRpb25zMikgXSkpO1xuICAgICAgfVxuICAgICAgdmFyIHNwYWNlID0gb3B0aW9ucy5zcGFjZSwgb3V0cHV0U3BhY2UgPSBvcHRpb25zLm91dHB1dFNwYWNlLCBwcm9ncmVzc2lvbiA9IG9wdGlvbnMucHJvZ3Jlc3Npb24sIHByZW11bHRpcGxpZWQgPSBvcHRpb25zLnByZW11bHRpcGxpZWQ7XG4gICAgICBjb2xvcjEgPSBnZXRDb2xvcihjb2xvcjEpO1xuICAgICAgY29sb3IyID0gZ2V0Q29sb3IoY29sb3IyKTtcbiAgICAgIGNvbG9yMSA9IGNsb25lMihjb2xvcjEpO1xuICAgICAgY29sb3IyID0gY2xvbmUyKGNvbG9yMik7XG4gICAgICB2YXIgcmFuZ2VBcmdzID0ge1xuICAgICAgICBjb2xvcnM6IFsgY29sb3IxLCBjb2xvcjIgXSxcbiAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgfTtcbiAgICAgIGlmIChzcGFjZSkge1xuICAgICAgICBzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KHNwYWNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwYWNlID0gQ29sb3JTcGFjZS5yZWdpc3RyeVtkZWZhdWx0cy5pbnRlcnBvbGF0aW9uU3BhY2VdIHx8IGNvbG9yMS5zcGFjZTtcbiAgICAgIH1cbiAgICAgIG91dHB1dFNwYWNlID0gb3V0cHV0U3BhY2UgPyBDb2xvclNwYWNlLmdldChvdXRwdXRTcGFjZSkgOiBzcGFjZTtcbiAgICAgIGNvbG9yMSA9IHRvKGNvbG9yMSwgc3BhY2UpO1xuICAgICAgY29sb3IyID0gdG8oY29sb3IyLCBzcGFjZSk7XG4gICAgICBjb2xvcjEgPSB0b0dhbXV0KGNvbG9yMSk7XG4gICAgICBjb2xvcjIgPSB0b0dhbXV0KGNvbG9yMik7XG4gICAgICBpZiAoc3BhY2UuY29vcmRzLmggJiYgc3BhY2UuY29vcmRzLmgudHlwZSA9PT0gJ2FuZ2xlJykge1xuICAgICAgICB2YXIgYXJjID0gb3B0aW9ucy5odWUgPSBvcHRpb25zLmh1ZSB8fCAnc2hvcnRlcic7XG4gICAgICAgIHZhciBodWUgPSBbIHNwYWNlLCAnaCcgXTtcbiAgICAgICAgdmFyIF9yZWY2MCA9IFsgZ2V0KGNvbG9yMSwgaHVlKSwgZ2V0KGNvbG9yMiwgaHVlKSBdLCBcXHUwM2I4MSA9IF9yZWY2MFswXSwgXFx1MDNiODIgPSBfcmVmNjBbMV07XG4gICAgICAgIHZhciBfYWRqdXN0ID0gYWRqdXN0KGFyYywgWyBcXHUwM2I4MSwgXFx1MDNiODIgXSk7XG4gICAgICAgIHZhciBfYWRqdXN0MiA9IF9zbGljZWRUb0FycmF5KF9hZGp1c3QsIDIpO1xuICAgICAgICBcXHUwM2I4MSA9IF9hZGp1c3QyWzBdO1xuICAgICAgICBcXHUwM2I4MiA9IF9hZGp1c3QyWzFdO1xuICAgICAgICBzZXQoY29sb3IxLCBodWUsIFxcdTAzYjgxKTtcbiAgICAgICAgc2V0KGNvbG9yMiwgaHVlLCBcXHUwM2I4Mik7XG4gICAgICB9XG4gICAgICBpZiAocHJlbXVsdGlwbGllZCkge1xuICAgICAgICBjb2xvcjEuY29vcmRzID0gY29sb3IxLmNvb3Jkcy5tYXAoZnVuY3Rpb24oYzQpIHtcbiAgICAgICAgICByZXR1cm4gYzQgKiBjb2xvcjEuYWxwaGE7XG4gICAgICAgIH0pO1xuICAgICAgICBjb2xvcjIuY29vcmRzID0gY29sb3IyLmNvb3Jkcy5tYXAoZnVuY3Rpb24oYzQpIHtcbiAgICAgICAgICByZXR1cm4gYzQgKiBjb2xvcjIuYWxwaGE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZnVuY3Rpb24ocDIpIHtcbiAgICAgICAgcDIgPSBwcm9ncmVzc2lvbiA/IHByb2dyZXNzaW9uKHAyKSA6IHAyO1xuICAgICAgICB2YXIgY29vcmRzID0gY29sb3IxLmNvb3Jkcy5tYXAoZnVuY3Rpb24oc3RhcnQsIGkpIHtcbiAgICAgICAgICB2YXIgZW5kID0gY29sb3IyLmNvb3Jkc1tpXTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcDIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGFscGhhID0gaW50ZXJwb2xhdGUoY29sb3IxLmFscGhhLCBjb2xvcjIuYWxwaGEsIHAyKTtcbiAgICAgICAgdmFyIHJldCA9IHtcbiAgICAgICAgICBzcGFjZTogc3BhY2UsXG4gICAgICAgICAgY29vcmRzOiBjb29yZHMsXG4gICAgICAgICAgYWxwaGE6IGFscGhhXG4gICAgICAgIH07XG4gICAgICAgIGlmIChwcmVtdWx0aXBsaWVkKSB7XG4gICAgICAgICAgcmV0LmNvb3JkcyA9IHJldC5jb29yZHMubWFwKGZ1bmN0aW9uKGM0KSB7XG4gICAgICAgICAgICByZXR1cm4gYzQgLyBhbHBoYTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3V0cHV0U3BhY2UgIT09IHNwYWNlKSB7XG4gICAgICAgICAgcmV0ID0gdG8ocmV0LCBvdXRwdXRTcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0sIHtcbiAgICAgICAgcmFuZ2VBcmdzOiByYW5nZUFyZ3NcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1JhbmdlKHZhbCkge1xuICAgICAgcmV0dXJuIHR5cGUodmFsKSA9PT0gJ2Z1bmN0aW9uJyAmJiAhIXZhbC5yYW5nZUFyZ3M7XG4gICAgfVxuICAgIGRlZmF1bHRzLmludGVycG9sYXRpb25TcGFjZSA9ICdsYWInO1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKENvbG9yMykge1xuICAgICAgQ29sb3IzLmRlZmluZUZ1bmN0aW9uKCdtaXgnLCBtaXgsIHtcbiAgICAgICAgcmV0dXJuczogJ2NvbG9yJ1xuICAgICAgfSk7XG4gICAgICBDb2xvcjMuZGVmaW5lRnVuY3Rpb24oJ3JhbmdlJywgcmFuZ2UsIHtcbiAgICAgICAgcmV0dXJuczogJ2Z1bmN0aW9uPGNvbG9yPidcbiAgICAgIH0pO1xuICAgICAgQ29sb3IzLmRlZmluZUZ1bmN0aW9uKCdzdGVwcycsIHN0ZXBzLCB7XG4gICAgICAgIHJldHVybnM6ICdhcnJheTxjb2xvcj4nXG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGludGVycG9sYXRpb24gPSBPYmplY3QuZnJlZXplKHtcbiAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgIG1peDogbWl4LFxuICAgICAgc3RlcHM6IHN0ZXBzLFxuICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgaXNSYW5nZTogaXNSYW5nZSxcbiAgICAgIHJlZ2lzdGVyOiByZWdpc3RlclxuICAgIH0pO1xuICAgIHZhciBIU0wgPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ2hzbCcsXG4gICAgICBuYW1lOiAnSFNMJyxcbiAgICAgIGNvb3Jkczoge1xuICAgICAgICBoOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMzYwIF0sXG4gICAgICAgICAgdHlwZTogJ2FuZ2xlJyxcbiAgICAgICAgICBuYW1lOiAnSHVlJ1xuICAgICAgICB9LFxuICAgICAgICBzOiB7XG4gICAgICAgICAgcmFuZ2U6IFsgMCwgMTAwIF0sXG4gICAgICAgICAgbmFtZTogJ1NhdHVyYXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgIGw6IHtcbiAgICAgICAgICByYW5nZTogWyAwLCAxMDAgXSxcbiAgICAgICAgICBuYW1lOiAnTGlnaHRuZXNzJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmFzZTogc1JHQixcbiAgICAgIGZyb21CYXNlOiBmdW5jdGlvbiBmcm9tQmFzZShyZ2IpIHtcbiAgICAgICAgdmFyIG1heDIgPSBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkocmdiKSk7XG4gICAgICAgIHZhciBtaW4gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkocmdiKSk7XG4gICAgICAgIHZhciBfcmdiID0gX3NsaWNlZFRvQXJyYXkocmdiLCAzKSwgciA9IF9yZ2JbMF0sIGcyID0gX3JnYlsxXSwgYjIgPSBfcmdiWzJdO1xuICAgICAgICB2YXIgaCA9IE5hTiwgcyA9IDAsIGwgPSAobWluICsgbWF4MikgLyAyO1xuICAgICAgICB2YXIgZDIgPSBtYXgyIC0gbWluO1xuICAgICAgICBpZiAoZDIgIT09IDApIHtcbiAgICAgICAgICBzID0gbCA9PT0gMCB8fCBsID09PSAxID8gMCA6IChtYXgyIC0gbCkgLyBNYXRoLm1pbihsLCAxIC0gbCk7XG4gICAgICAgICAgc3dpdGNoIChtYXgyKSB7XG4gICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgIGggPSAoZzIgLSBiMikgLyBkMiArIChnMiA8IGIyID8gNiA6IDApO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgY2FzZSBnMjpcbiAgICAgICAgICAgIGggPSAoYjIgLSByKSAvIGQyICsgMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgIGNhc2UgYjI6XG4gICAgICAgICAgICBoID0gKHIgLSBnMikgLyBkMiArIDQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGggPSBoICogNjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFsgaCwgcyAqIDEwMCwgbCAqIDEwMCBdO1xuICAgICAgfSxcbiAgICAgIHRvQmFzZTogZnVuY3Rpb24gdG9CYXNlKGhzbCkge1xuICAgICAgICB2YXIgX2hzbCA9IF9zbGljZWRUb0FycmF5KGhzbCwgMyksIGggPSBfaHNsWzBdLCBzID0gX2hzbFsxXSwgbCA9IF9oc2xbMl07XG4gICAgICAgIGggPSBoICUgMzYwO1xuICAgICAgICBpZiAoaCA8IDApIHtcbiAgICAgICAgICBoICs9IDM2MDtcbiAgICAgICAgfVxuICAgICAgICBzIC89IDEwMDtcbiAgICAgICAgbCAvPSAxMDA7XG4gICAgICAgIGZ1bmN0aW9uIGYobjIpIHtcbiAgICAgICAgICB2YXIgayA9IChuMiArIGggLyAzMCkgJSAxMjtcbiAgICAgICAgICB2YXIgYTIgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICAgICAgICAgIHJldHVybiBsIC0gYTIgKiBNYXRoLm1heCgtMSwgTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFsgZigwKSwgZig4KSwgZig0KSBdO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgaHNsOiB7XG4gICAgICAgICAgdG9HYW11dDogdHJ1ZSxcbiAgICAgICAgICBjb29yZHM6IFsgJzxudW1iZXI+IHwgPGFuZ2xlPicsICc8cGVyY2VudGFnZT4nLCAnPHBlcmNlbnRhZ2U+JyBdXG4gICAgICAgIH0sXG4gICAgICAgIGhzbGE6IHtcbiAgICAgICAgICBjb29yZHM6IFsgJzxudW1iZXI+IHwgPGFuZ2xlPicsICc8cGVyY2VudGFnZT4nLCAnPHBlcmNlbnRhZ2U+JyBdLFxuICAgICAgICAgIGNvbW1hczogdHJ1ZSxcbiAgICAgICAgICBsYXN0QWxwaGE6IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBIU1YgPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ2hzdicsXG4gICAgICBuYW1lOiAnSFNWJyxcbiAgICAgIGNvb3Jkczoge1xuICAgICAgICBoOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMzYwIF0sXG4gICAgICAgICAgdHlwZTogJ2FuZ2xlJyxcbiAgICAgICAgICBuYW1lOiAnSHVlJ1xuICAgICAgICB9LFxuICAgICAgICBzOiB7XG4gICAgICAgICAgcmFuZ2U6IFsgMCwgMTAwIF0sXG4gICAgICAgICAgbmFtZTogJ1NhdHVyYXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHY6IHtcbiAgICAgICAgICByYW5nZTogWyAwLCAxMDAgXSxcbiAgICAgICAgICBuYW1lOiAnVmFsdWUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBiYXNlOiBIU0wsXG4gICAgICBmcm9tQmFzZTogZnVuY3Rpb24gZnJvbUJhc2UoaHNsKSB7XG4gICAgICAgIHZhciBfaHNsMiA9IF9zbGljZWRUb0FycmF5KGhzbCwgMyksIGggPSBfaHNsMlswXSwgcyA9IF9oc2wyWzFdLCBsID0gX2hzbDJbMl07XG4gICAgICAgIHMgLz0gMTAwO1xuICAgICAgICBsIC89IDEwMDtcbiAgICAgICAgdmFyIHYgPSBsICsgcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcbiAgICAgICAgcmV0dXJuIFsgaCwgdiA9PT0gMCA/IDAgOiAyMDAgKiAoMSAtIGwgLyB2KSwgMTAwICogdiBdO1xuICAgICAgfSxcbiAgICAgIHRvQmFzZTogZnVuY3Rpb24gdG9CYXNlKGhzdikge1xuICAgICAgICB2YXIgX2hzdiA9IF9zbGljZWRUb0FycmF5KGhzdiwgMyksIGggPSBfaHN2WzBdLCBzID0gX2hzdlsxXSwgdiA9IF9oc3ZbMl07XG4gICAgICAgIHMgLz0gMTAwO1xuICAgICAgICB2IC89IDEwMDtcbiAgICAgICAgdmFyIGwgPSB2ICogKDEgLSBzIC8gMik7XG4gICAgICAgIHJldHVybiBbIGgsIGwgPT09IDAgfHwgbCA9PT0gMSA/IDAgOiAodiAtIGwpIC8gTWF0aC5taW4obCwgMSAtIGwpICogMTAwLCBsICogMTAwIF07XG4gICAgICB9LFxuICAgICAgZm9ybWF0czoge1xuICAgICAgICBjb2xvcjoge1xuICAgICAgICAgIHRvR2FtdXQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBod2IgPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ2h3YicsXG4gICAgICBuYW1lOiAnSFdCJyxcbiAgICAgIGNvb3Jkczoge1xuICAgICAgICBoOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMzYwIF0sXG4gICAgICAgICAgdHlwZTogJ2FuZ2xlJyxcbiAgICAgICAgICBuYW1lOiAnSHVlJ1xuICAgICAgICB9LFxuICAgICAgICB3OiB7XG4gICAgICAgICAgcmFuZ2U6IFsgMCwgMTAwIF0sXG4gICAgICAgICAgbmFtZTogJ1doaXRlbmVzcydcbiAgICAgICAgfSxcbiAgICAgICAgYjoge1xuICAgICAgICAgIHJhbmdlOiBbIDAsIDEwMCBdLFxuICAgICAgICAgIG5hbWU6ICdCbGFja25lc3MnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBiYXNlOiBIU1YsXG4gICAgICBmcm9tQmFzZTogZnVuY3Rpb24gZnJvbUJhc2UoaHN2KSB7XG4gICAgICAgIHZhciBfaHN2MiA9IF9zbGljZWRUb0FycmF5KGhzdiwgMyksIGggPSBfaHN2MlswXSwgcyA9IF9oc3YyWzFdLCB2ID0gX2hzdjJbMl07XG4gICAgICAgIHJldHVybiBbIGgsIHYgKiAoMTAwIC0gcykgLyAxMDAsIDEwMCAtIHYgXTtcbiAgICAgIH0sXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShod2IyKSB7XG4gICAgICAgIHZhciBfaHdiID0gX3NsaWNlZFRvQXJyYXkoaHdiMiwgMyksIGggPSBfaHdiWzBdLCB3ID0gX2h3YlsxXSwgYjIgPSBfaHdiWzJdO1xuICAgICAgICB3IC89IDEwMDtcbiAgICAgICAgYjIgLz0gMTAwO1xuICAgICAgICB2YXIgc3VtID0gdyArIGIyO1xuICAgICAgICBpZiAoc3VtID49IDEpIHtcbiAgICAgICAgICB2YXIgZ3JheSA9IHcgLyBzdW07XG4gICAgICAgICAgcmV0dXJuIFsgaCwgMCwgZ3JheSAqIDEwMCBdO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2ID0gMSAtIGIyO1xuICAgICAgICB2YXIgcyA9IHYgPT09IDAgPyAwIDogMSAtIHcgLyB2O1xuICAgICAgICByZXR1cm4gWyBoLCBzICogMTAwLCB2ICogMTAwIF07XG4gICAgICB9LFxuICAgICAgZm9ybWF0czoge1xuICAgICAgICBod2I6IHtcbiAgICAgICAgICB0b0dhbXV0OiB0cnVlLFxuICAgICAgICAgIGNvb3JkczogWyAnPG51bWJlcj4gfCA8YW5nbGU+JywgJzxwZXJjZW50YWdlPicsICc8cGVyY2VudGFnZT4nIF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciB0b1hZWl9NJDIgPSBbIFsgLjU3NjY2OTA0MjkxMDEzMDUsIC4xODU1NTgyMzc5MDY1NDYzLCAuMTg4MjI4NjQ2MjM0OTk0NyBdLCBbIC4yOTczNDQ5NzUyNTA1MzYwNSwgLjYyNzM2MzU2NjI1NTQ2NjEsIC4wNzUyOTE0NTg0OTM5OTc4OCBdLCBbIC4wMjcwMzEzNjEzODY0MTIzNCwgLjA3MDY4ODg1MjUzNTgyNzIzLCAuOTkxMzM3NTM2ODM3NjM4OCBdIF07XG4gICAgdmFyIGZyb21YWVpfTSQyID0gWyBbIDIuMDQxNTg3OTAzODEwNzQ2NSwgLS41NjUwMDY5NzQyNzg4NTk2LCAtLjM0NDczMTM1MDc3ODMyOTU2IF0sIFsgLS45NjkyNDM2MzYyODA4Nzk1LCAxLjg3NTk2NzUwMTUwNzcyMDIsIC4wNDE1NTUwNTc0MDcxNzU1NyBdLCBbIC4wMTM0NDQyODA2MzIwMzExNDIsIC0uMTE4MzYyMzkyMjMxMDE4MzgsIDEuMDE1MTc0OTk0MzkxMjA1NCBdIF07XG4gICAgdmFyIEE5OExpbmVhciA9IG5ldyBSR0JDb2xvclNwYWNlKHtcbiAgICAgIGlkOiAnYTk4cmdiLWxpbmVhcicsXG4gICAgICBuYW1lOiAnTGluZWFyIEFkb2JlXFx4YWUgOTggUkdCIGNvbXBhdGlibGUnLFxuICAgICAgd2hpdGU6ICdENjUnLFxuICAgICAgdG9YWVpfTTogdG9YWVpfTSQyLFxuICAgICAgZnJvbVhZWl9NOiBmcm9tWFlaX00kMlxuICAgIH0pO1xuICAgIHZhciBhOThyZ2IgPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ2E5OHJnYicsXG4gICAgICBuYW1lOiAnQWRvYmVcXHhhZSA5OCBSR0IgY29tcGF0aWJsZScsXG4gICAgICBiYXNlOiBBOThMaW5lYXIsXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShSR0IpIHtcbiAgICAgICAgcmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgucG93KE1hdGguYWJzKHZhbCksIDU2MyAvIDI1NikgKiBNYXRoLnNpZ24odmFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZnJvbUJhc2U6IGZ1bmN0aW9uIGZyb21CYXNlKFJHQikge1xuICAgICAgICByZXR1cm4gUkdCLm1hcChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5wb3coTWF0aC5hYnModmFsKSwgMjU2IC8gNTYzKSAqIE1hdGguc2lnbih2YWwpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmb3JtYXRzOiB7XG4gICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgaWQ6ICdhOTgtcmdiJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHRvWFlaX00kMSA9IFsgWyAuNzk3NzYwNDg5NjcyMzAyNywgLjEzNTE4NTgzNzE3NTc0MDMxLCAuMDMxMzQ5MzQ5NTgxNTI0OCBdLCBbIC4yODgwNzExMjgyMjkyOTM0LCAuNzExODQzMjE3ODEwMTAxNCwgODU2NTM5NjA2MDUyNTkwMmUtMjAgXSwgWyAwLCAwLCAuODI1MTA0NjAyNTEwNDYwMSBdIF07XG4gICAgdmFyIGZyb21YWVpfTSQxID0gWyBbIDEuMzQ1Nzk4OTczMTAyODI4MSwgLS4yNTU1ODAxMDAwNzk5NzUzNCwgLS4wNTExMDYyODUwNjc1MzQwMSBdLCBbIC0uNTQ0NjIyNDkzOTAyODM0NywgMS41MDgyMzI3NDEzMTMyNzgxLCAuMDIwNTM2MDMyMzkxNDc5NzMgXSwgWyAwLCAwLCAxLjIxMTk2NzU0NTYzODk0NTQgXSBdO1xuICAgIHZhciBQcm9QaG90b0xpbmVhciA9IG5ldyBSR0JDb2xvclNwYWNlKHtcbiAgICAgIGlkOiAncHJvcGhvdG8tbGluZWFyJyxcbiAgICAgIG5hbWU6ICdMaW5lYXIgUHJvUGhvdG8nLFxuICAgICAgd2hpdGU6ICdENTAnLFxuICAgICAgYmFzZTogWFlaX0Q1MCxcbiAgICAgIHRvWFlaX006IHRvWFlaX00kMSxcbiAgICAgIGZyb21YWVpfTTogZnJvbVhZWl9NJDFcbiAgICB9KTtcbiAgICB2YXIgRXQgPSAxIC8gNTEyO1xuICAgIHZhciBFdDIgPSAxNiAvIDUxMjtcbiAgICB2YXIgcHJvcGhvdG8gPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ3Byb3Bob3RvJyxcbiAgICAgIG5hbWU6ICdQcm9QaG90bycsXG4gICAgICBiYXNlOiBQcm9QaG90b0xpbmVhcixcbiAgICAgIHRvQmFzZTogZnVuY3Rpb24gdG9CYXNlKFJHQikge1xuICAgICAgICByZXR1cm4gUkdCLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIHYgPCBFdDIgPyB2IC8gMTYgOiBNYXRoLnBvdyh2LCAxLjgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmcm9tQmFzZTogZnVuY3Rpb24gZnJvbUJhc2UoUkdCKSB7XG4gICAgICAgIHJldHVybiBSR0IubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4gdiA+PSBFdCA/IE1hdGgucG93KHYsIDEgLyAxLjgpIDogMTYgKiB2O1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmb3JtYXRzOiB7XG4gICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgaWQ6ICdwcm9waG90by1yZ2InXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgb2tsY2ggPSBuZXcgQ29sb3JTcGFjZSh7XG4gICAgICBpZDogJ29rbGNoJyxcbiAgICAgIG5hbWU6ICdPS0xDaCcsXG4gICAgICBjb29yZHM6IHtcbiAgICAgICAgbDoge1xuICAgICAgICAgIHJlZlJhbmdlOiBbIDAsIDEgXSxcbiAgICAgICAgICBuYW1lOiAnTGlnaHRuZXNzJ1xuICAgICAgICB9LFxuICAgICAgICBjOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgLjQgXSxcbiAgICAgICAgICBuYW1lOiAnQ2hyb21hJ1xuICAgICAgICB9LFxuICAgICAgICBoOiB7XG4gICAgICAgICAgcmVmUmFuZ2U6IFsgMCwgMzYwIF0sXG4gICAgICAgICAgdHlwZTogJ2FuZ2xlJyxcbiAgICAgICAgICBuYW1lOiAnSHVlJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2hpdGU6ICdENjUnLFxuICAgICAgYmFzZTogT0tMYWIsXG4gICAgICBmcm9tQmFzZTogZnVuY3Rpb24gZnJvbUJhc2Uob2tsYWIpIHtcbiAgICAgICAgdmFyIF9va2xhYiA9IF9zbGljZWRUb0FycmF5KG9rbGFiLCAzKSwgTCA9IF9va2xhYlswXSwgYTIgPSBfb2tsYWJbMV0sIGIyID0gX29rbGFiWzJdO1xuICAgICAgICB2YXIgaDtcbiAgICAgICAgdmFyIFxcdTAzYjUyID0gMmUtNDtcbiAgICAgICAgaWYgKE1hdGguYWJzKGEyKSA8IFxcdTAzYjUyICYmIE1hdGguYWJzKGIyKSA8IFxcdTAzYjUyKSB7XG4gICAgICAgICAgaCA9IE5hTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoID0gTWF0aC5hdGFuMihiMiwgYTIpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWyBMLCBNYXRoLnNxcnQoTWF0aC5wb3coYTIsIDIpICsgTWF0aC5wb3coYjIsIDIpKSwgY29uc3RyYWluKGgpIF07XG4gICAgICB9LFxuICAgICAgdG9CYXNlOiBmdW5jdGlvbiB0b0Jhc2Uob2tsY2gyKSB7XG4gICAgICAgIHZhciBfb2tsY2ggPSBfc2xpY2VkVG9BcnJheShva2xjaDIsIDMpLCBMID0gX29rbGNoWzBdLCBDID0gX29rbGNoWzFdLCBoID0gX29rbGNoWzJdO1xuICAgICAgICB2YXIgYTIsIGIyO1xuICAgICAgICBpZiAoaXNOYU4oaCkpIHtcbiAgICAgICAgICBhMiA9IDA7XG4gICAgICAgICAgYjIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGEyID0gQyAqIE1hdGguY29zKGggKiBNYXRoLlBJIC8gMTgwKTtcbiAgICAgICAgICBiMiA9IEMgKiBNYXRoLnNpbihoICogTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFsgTCwgYTIsIGIyIF07XG4gICAgICB9LFxuICAgICAgZm9ybWF0czoge1xuICAgICAgICBva2xjaDoge1xuICAgICAgICAgIGNvb3JkczogWyAnPG51bWJlcj4gfCA8cGVyY2VudGFnZT4nLCAnPG51bWJlcj4nLCAnPG51bWJlcj4gfCA8YW5nbGU+JyBdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgWXcgPSAyMDM7XG4gICAgdmFyIG4gPSAyNjEwIC8gTWF0aC5wb3coMiwgMTQpO1xuICAgIHZhciBuaW52ID0gTWF0aC5wb3coMiwgMTQpIC8gMjYxMDtcbiAgICB2YXIgbSA9IDI1MjMgLyBNYXRoLnBvdygyLCA1KTtcbiAgICB2YXIgbWludiA9IE1hdGgucG93KDIsIDUpIC8gMjUyMztcbiAgICB2YXIgYzEgPSAzNDI0IC8gTWF0aC5wb3coMiwgMTIpO1xuICAgIHZhciBjMiA9IDI0MTMgLyBNYXRoLnBvdygyLCA3KTtcbiAgICB2YXIgYzMgPSAyMzkyIC8gTWF0aC5wb3coMiwgNyk7XG4gICAgdmFyIHJlYzIxMDBQcSA9IG5ldyBSR0JDb2xvclNwYWNlKHtcbiAgICAgIGlkOiAncmVjMjEwMHBxJyxcbiAgICAgIG5hbWU6ICdSRUMuMjEwMC1QUScsXG4gICAgICBiYXNlOiBSRUMyMDIwTGluZWFyLFxuICAgICAgdG9CYXNlOiBmdW5jdGlvbiB0b0Jhc2UoUkdCKSB7XG4gICAgICAgIHJldHVybiBSR0IubWFwKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIHZhciB4ID0gTWF0aC5wb3coTWF0aC5tYXgoTWF0aC5wb3codmFsLCBtaW52KSAtIGMxLCAwKSAvIChjMiAtIGMzICogTWF0aC5wb3codmFsLCBtaW52KSksIG5pbnYpO1xuICAgICAgICAgIHJldHVybiB4ICogMWU0IC8gWXc7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZyb21CYXNlOiBmdW5jdGlvbiBmcm9tQmFzZShSR0IpIHtcbiAgICAgICAgcmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdmFyIHggPSBNYXRoLm1heCh2YWwgKiBZdyAvIDFlNCwgMCk7XG4gICAgICAgICAgdmFyIG51bSA9IGMxICsgYzIgKiBNYXRoLnBvdyh4LCBuKTtcbiAgICAgICAgICB2YXIgZGVub20gPSAxICsgYzMgKiBNYXRoLnBvdyh4LCBuKTtcbiAgICAgICAgICByZXR1cm4gTWF0aC5wb3cobnVtIC8gZGVub20sIG0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmb3JtYXRzOiB7XG4gICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgaWQ6ICdyZWMyMTAwLXBxJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGEgPSAuMTc4ODMyNzc7XG4gICAgdmFyIGIgPSAuMjg0NjY4OTI7XG4gICAgdmFyIGMgPSAuNTU5OTEwNzM7XG4gICAgdmFyIHNjYWxlID0gMy43NzQzO1xuICAgIHZhciByZWMyMTAwSGxnID0gbmV3IFJHQkNvbG9yU3BhY2Uoe1xuICAgICAgaWQ6ICdyZWMyMTAwaGxnJyxcbiAgICAgIGNzc2lkOiAncmVjMjEwMC1obGcnLFxuICAgICAgbmFtZTogJ1JFQy4yMTAwLUhMRycsXG4gICAgICByZWZlcnJlZDogJ3NjZW5lJyxcbiAgICAgIGJhc2U6IFJFQzIwMjBMaW5lYXIsXG4gICAgICB0b0Jhc2U6IGZ1bmN0aW9uIHRvQmFzZShSR0IpIHtcbiAgICAgICAgcmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgaWYgKHZhbCA8PSAuNSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KHZhbCwgMikgLyAzICogc2NhbGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBNYXRoLmV4cCgodmFsIC0gYykgLyBhICsgYikgLyAxMiAqIHNjYWxlO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmcm9tQmFzZTogZnVuY3Rpb24gZnJvbUJhc2UoUkdCKSB7XG4gICAgICAgIHJldHVybiBSR0IubWFwKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIHZhbCAvPSBzY2FsZTtcbiAgICAgICAgICBpZiAodmFsIDw9IDEgLyAxMikge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCgzICogdmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGEgKiBNYXRoLmxvZygxMiAqIHZhbCAtIGIpICsgYztcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZm9ybWF0czoge1xuICAgICAgICBjb2xvcjoge1xuICAgICAgICAgIGlkOiAncmVjMjEwMC1obGcnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgQ0FUcyA9IHt9O1xuICAgIGhvb2tzLmFkZCgnY2hyb21hdGljLWFkYXB0YXRpb24tc3RhcnQnLCBmdW5jdGlvbihlbnYpIHtcbiAgICAgIGlmIChlbnYub3B0aW9ucy5tZXRob2QpIHtcbiAgICAgICAgZW52Lk0gPSBhZGFwdChlbnYuVzEsIGVudi5XMiwgZW52Lm9wdGlvbnMubWV0aG9kKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBob29rcy5hZGQoJ2Nocm9tYXRpYy1hZGFwdGF0aW9uLWVuZCcsIGZ1bmN0aW9uKGVudikge1xuICAgICAgaWYgKCFlbnYuTSkge1xuICAgICAgICBlbnYuTSA9IGFkYXB0KGVudi5XMSwgZW52LlcyLCBlbnYub3B0aW9ucy5tZXRob2QpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGRlZmluZUNBVChfcmVmNjEpIHtcbiAgICAgIHZhciBpZCA9IF9yZWY2MS5pZCwgdG9Db25lX00gPSBfcmVmNjEudG9Db25lX00sIGZyb21Db25lX00gPSBfcmVmNjEuZnJvbUNvbmVfTTtcbiAgICAgIENBVHNbaWRdID0gYXJndW1lbnRzWzBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGFwdChXMSwgVzIpIHtcbiAgICAgIHZhciBpZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ0JyYWRmb3JkJztcbiAgICAgIHZhciBtZXRob2QgPSBDQVRzW2lkXTtcbiAgICAgIHZhciBfbXVsdGlwbHlNYXRyaWNlczUgPSBtdWx0aXBseU1hdHJpY2VzKG1ldGhvZC50b0NvbmVfTSwgVzEpLCBfbXVsdGlwbHlNYXRyaWNlczYgPSBfc2xpY2VkVG9BcnJheShfbXVsdGlwbHlNYXRyaWNlczUsIDMpLCBcXHUwM2MxcyA9IF9tdWx0aXBseU1hdHJpY2VzNlswXSwgXFx1MDNiM3MgPSBfbXVsdGlwbHlNYXRyaWNlczZbMV0sIFxcdTAzYjJzID0gX211bHRpcGx5TWF0cmljZXM2WzJdO1xuICAgICAgdmFyIF9tdWx0aXBseU1hdHJpY2VzNyA9IG11bHRpcGx5TWF0cmljZXMobWV0aG9kLnRvQ29uZV9NLCBXMiksIF9tdWx0aXBseU1hdHJpY2VzOCA9IF9zbGljZWRUb0FycmF5KF9tdWx0aXBseU1hdHJpY2VzNywgMyksIFxcdTAzYzFkID0gX211bHRpcGx5TWF0cmljZXM4WzBdLCBcXHUwM2IzZCA9IF9tdWx0aXBseU1hdHJpY2VzOFsxXSwgXFx1MDNiMmQgPSBfbXVsdGlwbHlNYXRyaWNlczhbMl07XG4gICAgICB2YXIgc2NhbGUyID0gWyBbIFxcdTAzYzFkIC8gXFx1MDNjMXMsIDAsIDAgXSwgWyAwLCBcXHUwM2IzZCAvIFxcdTAzYjNzLCAwIF0sIFsgMCwgMCwgXFx1MDNiMmQgLyBcXHUwM2IycyBdIF07XG4gICAgICB2YXIgc2NhbGVkX2NvbmVfTSA9IG11bHRpcGx5TWF0cmljZXMoc2NhbGUyLCBtZXRob2QudG9Db25lX00pO1xuICAgICAgdmFyIGFkYXB0X00gPSBtdWx0aXBseU1hdHJpY2VzKG1ldGhvZC5mcm9tQ29uZV9NLCBzY2FsZWRfY29uZV9NKTtcbiAgICAgIHJldHVybiBhZGFwdF9NO1xuICAgIH1cbiAgICBkZWZpbmVDQVQoe1xuICAgICAgaWQ6ICd2b24gS3JpZXMnLFxuICAgICAgdG9Db25lX006IFsgWyAuNDAwMjQsIC43MDc2LCAtLjA4MDgxIF0sIFsgLS4yMjYzLCAxLjE2NTMyLCAuMDQ1NyBdLCBbIDAsIDAsIC45MTgyMiBdIF0sXG4gICAgICBmcm9tQ29uZV9NOiBbIFsgMS44NTk5MzY0LCAtMS4xMjkzODE2LCAuMjE5ODk3NCBdLCBbIC4zNjExOTE0LCAuNjM4ODEyNSwgLTY0ZS03IF0sIFsgMCwgMCwgMS4wODkwNjM2IF0gXVxuICAgIH0pO1xuICAgIGRlZmluZUNBVCh7XG4gICAgICBpZDogJ0JyYWRmb3JkJyxcbiAgICAgIHRvQ29uZV9NOiBbIFsgLjg5NTEsIC4yNjY0LCAtLjE2MTQgXSwgWyAtLjc1MDIsIDEuNzEzNSwgLjAzNjcgXSwgWyAuMDM4OSwgLS4wNjg1LCAxLjAyOTYgXSBdLFxuICAgICAgZnJvbUNvbmVfTTogWyBbIC45ODY5OTI5LCAtLjE0NzA1NDMsIC4xNTk5NjI3IF0sIFsgLjQzMjMwNTMsIC41MTgzNjAzLCAuMDQ5MjkxMiBdLCBbIC0uMDA4NTI4NywgLjA0MDA0MjgsIC45Njg0ODY3IF0gXVxuICAgIH0pO1xuICAgIGRlZmluZUNBVCh7XG4gICAgICBpZDogJ0NBVDAyJyxcbiAgICAgIHRvQ29uZV9NOiBbIFsgLjczMjgsIC40Mjk2LCAtLjE2MjQgXSwgWyAtLjcwMzYsIDEuNjk3NSwgLjAwNjEgXSwgWyAuMDAzLCAuMDEzNiwgLjk4MzQgXSBdLFxuICAgICAgZnJvbUNvbmVfTTogWyBbIDEuMDk2MTIzOCwgLS4yNzg4NjksIC4xODI3NDUyIF0sIFsgLjQ1NDM2OSwgLjQ3MzUzMzIsIC4wNzIwOTc4IF0sIFsgLS4wMDk2Mjc2LCAtLjAwNTY5OCwgMS4wMTUzMjU2IF0gXVxuICAgIH0pO1xuICAgIGRlZmluZUNBVCh7XG4gICAgICBpZDogJ0NBVDE2JyxcbiAgICAgIHRvQ29uZV9NOiBbIFsgLjQwMTI4OCwgLjY1MDE3MywgLS4wNTE0NjEgXSwgWyAtLjI1MDI2OCwgMS4yMDQ0MTQsIC4wNDU4NTQgXSwgWyAtLjAwMjA3OSwgLjA0ODk1MiwgLjk1MzEyNyBdIF0sXG4gICAgICBmcm9tQ29uZV9NOiBbIFsgMS44NjIwNjc4NTUwODcyMzMsIC0xLjAxMTI1NDYzMDUzMTY4NSwgLjE0OTE4Njc3NTQ0NDQ1MTggXSwgWyAuMzg3NTI2NTQzMjM2MTM3MiwgLjYyMTQ0NzQ0MTkzMTQ3NTMsIC0uMDA4OTczOTg1MTY3NjEyNTE4IF0sIFsgLS4wMTU4NDE0OTg4NDkzMzM4NiwgLS4wMzQxMjI5MzgwMjg1MTU1NywgMS4wNDk5NjQ0MzY4Nzc4NSBdIF1cbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKFdISVRFUywge1xuICAgICAgQTogWyAxLjA5ODUsIDEsIC4zNTU4NSBdLFxuICAgICAgQzogWyAuOTgwNzQsIDEsIDEuMTgyMzIgXSxcbiAgICAgIEQ1NTogWyAuOTU2ODIsIDEsIC45MjE0OSBdLFxuICAgICAgRDc1OiBbIC45NDk3MiwgMSwgMS4yMjYzOCBdLFxuICAgICAgRTogWyAxLCAxLCAxIF0sXG4gICAgICBGMjogWyAuOTkxODYsIDEsIC42NzM5MyBdLFxuICAgICAgRjc6IFsgLjk1MDQxLCAxLCAxLjA4NzQ3IF0sXG4gICAgICBGMTE6IFsgMS4wMDk2MiwgMSwgLjY0MzUgXVxuICAgIH0pO1xuICAgIFdISVRFUy5BQ0VTID0gWyAuMzIxNjggLyAuMzM3NjcsIDEsICgxIC0gLjMyMTY4IC0gLjMzNzY3KSAvIC4zMzc2NyBdO1xuICAgIHZhciB0b1hZWl9NID0gWyBbIC42NjI0NTQxODExMDg1MDUzLCAuMTM0MDA0MjA2NDU2NDMzMTMsIC4xNTYxODc2ODcwMDQ5MDc4IF0sIFsgLjI3MjIyODcxNjc4MDkxNDU0LCAuNjc0MDgxNzY1ODExMTQ4NCwgLjA1MzY4OTUxNzQwNzkzNzA1IF0sIFsgLS4wMDU1NzQ2NDk0OTAzOTQxMDgsIC4wMDQwNjA3MzM1Mjg5ODI4MjYsIDEuMDEwMzM5MTAwMzEyOTk3MSBdIF07XG4gICAgdmFyIGZyb21YWVpfTSA9IFsgWyAxLjY0MTAyMzM3OTY5NDMyNTcsIC0uMzI0ODAzMjk0MTg0NzksIC0uMjM2NDI0Njk1MjM3NjEyMjUgXSwgWyAtLjY2MzY2Mjg1ODcyMjk4MjksIDEuNjE1MzMxNTkxNjU3MzM3OSwgLjAxNjc1NjM0NzY4NTUzMDEzNyBdLCBbIC4wMTE3MjE4OTQzMjgzNzUzNzYsIC0uMDA4Mjg0NDQxOTk2MjM3NDA5LCAuOTg4Mzk0ODU4NTM5MDIxNSBdIF07XG4gICAgdmFyIEFDRVNjZyA9IG5ldyBSR0JDb2xvclNwYWNlKHtcbiAgICAgIGlkOiAnYWNlc2NnJyxcbiAgICAgIG5hbWU6ICdBQ0VTY2cnLFxuICAgICAgY29vcmRzOiB7XG4gICAgICAgIHI6IHtcbiAgICAgICAgICByYW5nZTogWyAwLCA2NTUwNCBdLFxuICAgICAgICAgIG5hbWU6ICdSZWQnXG4gICAgICAgIH0sXG4gICAgICAgIGc6IHtcbiAgICAgICAgICByYW5nZTogWyAwLCA2NTUwNCBdLFxuICAgICAgICAgIG5hbWU6ICdHcmVlbidcbiAgICAgICAgfSxcbiAgICAgICAgYjoge1xuICAgICAgICAgIHJhbmdlOiBbIDAsIDY1NTA0IF0sXG4gICAgICAgICAgbmFtZTogJ0JsdWUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWZlcnJlZDogJ3NjZW5lJyxcbiAgICAgIHdoaXRlOiBXSElURVMuQUNFUyxcbiAgICAgIHRvWFlaX006IHRvWFlaX00sXG4gICAgICBmcm9tWFlaX006IGZyb21YWVpfTSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgY29sb3I6IHt9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIFxcdTAzYjUgPSBNYXRoLnBvdygyLCAtMTYpO1xuICAgIHZhciBBQ0VTX21pbl9ub256ZXJvID0gLS4zNTgyODY4MztcbiAgICB2YXIgQUNFU19jY19tYXggPSAoTWF0aC5sb2cyKDY1NTA0KSArIDkuNzIpIC8gMTcuNTI7XG4gICAgdmFyIGFjZXNjYyA9IG5ldyBSR0JDb2xvclNwYWNlKHtcbiAgICAgIGlkOiAnYWNlc2NjJyxcbiAgICAgIG5hbWU6ICdBQ0VTY2MnLFxuICAgICAgY29vcmRzOiB7XG4gICAgICAgIHI6IHtcbiAgICAgICAgICByYW5nZTogWyBBQ0VTX21pbl9ub256ZXJvLCBBQ0VTX2NjX21heCBdLFxuICAgICAgICAgIG5hbWU6ICdSZWQnXG4gICAgICAgIH0sXG4gICAgICAgIGc6IHtcbiAgICAgICAgICByYW5nZTogWyBBQ0VTX21pbl9ub256ZXJvLCBBQ0VTX2NjX21heCBdLFxuICAgICAgICAgIG5hbWU6ICdHcmVlbidcbiAgICAgICAgfSxcbiAgICAgICAgYjoge1xuICAgICAgICAgIHJhbmdlOiBbIEFDRVNfbWluX25vbnplcm8sIEFDRVNfY2NfbWF4IF0sXG4gICAgICAgICAgbmFtZTogJ0JsdWUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWZlcnJlZDogJ3NjZW5lJyxcbiAgICAgIGJhc2U6IEFDRVNjZyxcbiAgICAgIHRvQmFzZTogZnVuY3Rpb24gdG9CYXNlKFJHQikge1xuICAgICAgICB2YXIgbG93ID0gKDkuNzIgLSAxNSkgLyAxNy41MjtcbiAgICAgICAgcmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgaWYgKHZhbCA8PSBsb3cpIHtcbiAgICAgICAgICAgIHJldHVybiAoTWF0aC5wb3coMiwgdmFsICogMTcuNTIgLSA5LjcyKSAtIFxcdTAzYjUpICogMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA8IEFDRVNfY2NfbWF4KSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5wb3coMiwgdmFsICogMTcuNTIgLSA5LjcyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDY1NTA0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZnJvbUJhc2U6IGZ1bmN0aW9uIGZyb21CYXNlKFJHQikge1xuICAgICAgICByZXR1cm4gUkdCLm1hcChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICBpZiAodmFsIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiAoTWF0aC5sb2cyKFxcdTAzYjUpICsgOS43MikgLyAxNy41MjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA8IFxcdTAzYjUpIHtcbiAgICAgICAgICAgIHJldHVybiAoTWF0aC5sb2cyKFxcdTAzYjUgKyB2YWwgKiAuNSkgKyA5LjcyKSAvIDE3LjUyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKE1hdGgubG9nMih2YWwpICsgOS43MikgLyAxNy41MjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgY29sb3I6IHt9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHNwYWNlcyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgWFlaX0Q2NTogWFlaX0Q2NSxcbiAgICAgIFhZWl9ENTA6IFhZWl9ENTAsXG4gICAgICBYWVpfQUJTX0Q2NTogWFlaX0Fic19ENjUsXG4gICAgICBMYWJfRDY1OiBsYWJfZDY1LFxuICAgICAgTGFiOiBsYWIsXG4gICAgICBMQ0g6IGxjaCxcbiAgICAgIHNSR0JfTGluZWFyOiBzUkdCTGluZWFyLFxuICAgICAgc1JHQjogc1JHQixcbiAgICAgIEhTTDogSFNMLFxuICAgICAgSFdCOiBod2IsXG4gICAgICBIU1Y6IEhTVixcbiAgICAgIFAzX0xpbmVhcjogUDNMaW5lYXIsXG4gICAgICBQMzogUDMsXG4gICAgICBBOThSR0JfTGluZWFyOiBBOThMaW5lYXIsXG4gICAgICBBOThSR0I6IGE5OHJnYixcbiAgICAgIFByb1Bob3RvX0xpbmVhcjogUHJvUGhvdG9MaW5lYXIsXG4gICAgICBQcm9QaG90bzogcHJvcGhvdG8sXG4gICAgICBSRUNfMjAyMF9MaW5lYXI6IFJFQzIwMjBMaW5lYXIsXG4gICAgICBSRUNfMjAyMDogUkVDMjAyMCxcbiAgICAgIE9LTGFiOiBPS0xhYixcbiAgICAgIE9LTENIOiBva2xjaCxcbiAgICAgIEp6YXpiejogSnphemJ6LFxuICAgICAgSnpDekh6OiBqemN6aHosXG4gICAgICBJQ1RDUDogaWN0Y3AsXG4gICAgICBSRUNfMjEwMF9QUTogcmVjMjEwMFBxLFxuICAgICAgUkVDXzIxMDBfSExHOiByZWMyMTAwSGxnLFxuICAgICAgQUNFU2NnOiBBQ0VTY2csXG4gICAgICBBQ0VTY2M6IGFjZXNjY1xuICAgIH0pO1xuICAgIHZhciBfQ29sb3IgPSAoX3NwYWNlID0gbmV3IFdlYWtNYXAoKSwgZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBDb2xvcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvcik7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjKHRoaXMsIF9zcGFjZSwgdm9pZCAwKTtcbiAgICAgICAgdmFyIGNvbG9yO1xuICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgY29sb3IgPSBnZXRDb2xvcihhcmdzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3BhY2UsIGNvb3JkcywgYWxwaGE7XG4gICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgIHNwYWNlID0gY29sb3Iuc3BhY2UgfHwgY29sb3Iuc3BhY2VJZDtcbiAgICAgICAgICBjb29yZHMgPSBjb2xvci5jb29yZHM7XG4gICAgICAgICAgYWxwaGEgPSBjb2xvci5hbHBoYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcGFjZSA9IGFyZ3NbMF07XG4gICAgICAgICAgY29vcmRzID0gYXJnc1sxXTtcbiAgICAgICAgICBhbHBoYSA9IGFyZ3NbMl07XG4gICAgICAgIH1cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KF9zcGFjZSwgdGhpcywgQ29sb3JTcGFjZS5nZXQoc3BhY2UpKTtcbiAgICAgICAgdGhpcy5jb29yZHMgPSBjb29yZHMgPyBjb29yZHMuc2xpY2UoKSA6IFsgMCwgMCwgMCBdO1xuICAgICAgICB0aGlzLmFscGhhID0gYWxwaGEgPCAxID8gYWxwaGEgOiAxO1xuICAgICAgICBmb3IgKHZhciBfaTIxID0gMDsgX2kyMSA8IHRoaXMuY29vcmRzLmxlbmd0aDsgX2kyMSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29vcmRzW19pMjFdID09PSAnTmFOJykge1xuICAgICAgICAgICAgdGhpcy5jb29yZHNbX2kyMV0gPSBOYU47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfbG9vcDcgPSBmdW5jdGlvbiBfbG9vcDcoaWQpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXMyLCBpZCwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZ2V0KGlkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnNldChpZCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpZCBpbiBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3NwYWNlLCB0aGlzKS5jb29yZHMpIHtcbiAgICAgICAgICBfbG9vcDcoaWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKENvbG9yLCBbIHtcbiAgICAgICAga2V5OiAnc3BhY2UnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF9zcGFjZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnc3BhY2VJZCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3NwYWNlLCB0aGlzKS5pZDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdjbG9uZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IF9Db2xvcih0aGlzLnNwYWNlLCB0aGlzLmNvb3JkcywgdGhpcy5hbHBoYSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAndG9KU09OJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3BhY2VJZDogdGhpcy5zcGFjZUlkLFxuICAgICAgICAgICAgY29vcmRzOiB0aGlzLmNvb3JkcyxcbiAgICAgICAgICAgIGFscGhhOiB0aGlzLmFscGhhXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdkaXNwbGF5JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BsYXkoKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXQgPSBfZGlzcGxheS5hcHBseSh2b2lkIDAsIFsgdGhpcyBdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgICAgcmV0LmNvbG9yID0gbmV3IF9Db2xvcihyZXQuY29sb3IpO1xuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgIH0gXSwgWyB7XG4gICAgICAgIGtleTogJ2dldCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoY29sb3IpIHtcbiAgICAgICAgICBpZiAoY29sb3IgaW5zdGFuY2VvZiBfQ29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41ID4gMSA/IF9sZW41IC0gMSA6IDApLCBfa2V5NSA9IDE7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTUgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfY29uc3RydWN0KF9Db2xvciwgWyBjb2xvciBdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVmaW5lRnVuY3Rpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmaW5lRnVuY3Rpb24obmFtZSwgY29kZSkge1xuICAgICAgICAgIHZhciBvID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBjb2RlO1xuICAgICAgICAgIHZhciBfbyRpbnN0YW5jZSA9IG8uaW5zdGFuY2UsIGluc3RhbmNlID0gX28kaW5zdGFuY2UgPT09IHZvaWQgMCA/IHRydWUgOiBfbyRpbnN0YW5jZSwgcmV0dXJucyA9IG8ucmV0dXJucztcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMoKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gY29kZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAocmV0dXJucyA9PT0gJ2NvbG9yJykge1xuICAgICAgICAgICAgICByZXQgPSBfQ29sb3IuZ2V0KHJldCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJldHVybnMgPT09ICdmdW5jdGlvbjxjb2xvcj4nKSB7XG4gICAgICAgICAgICAgIHZhciBmID0gcmV0O1xuICAgICAgICAgICAgICByZXQgPSBmdW5jdGlvbiByZXQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJldDIgPSBmLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX0NvbG9yLmdldChyZXQyKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXQsIGYpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXR1cm5zID09PSAnYXJyYXk8Y29sb3I+Jykge1xuICAgICAgICAgICAgICByZXQgPSByZXQubWFwKGZ1bmN0aW9uKGM0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9Db2xvci5nZXQoYzQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoIShuYW1lIGluIF9Db2xvcikpIHtcbiAgICAgICAgICAgIF9Db2xvcltuYW1lXSA9IGZ1bmM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgX0NvbG9yLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodm9pZCAwLCBbIHRoaXMgXS5jb25jYXQoYXJncykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVmaW5lRnVuY3Rpb25zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlZmluZUZ1bmN0aW9ucyhvKSB7XG4gICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBvKSB7XG4gICAgICAgICAgICBfQ29sb3IuZGVmaW5lRnVuY3Rpb24obmFtZSwgb1tuYW1lXSwgb1tuYW1lXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2V4dGVuZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmQoZXhwb3J0cykge1xuICAgICAgICAgIGlmIChleHBvcnRzLnJlZ2lzdGVyKSB7XG4gICAgICAgICAgICBleHBvcnRzLnJlZ2lzdGVyKF9Db2xvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZXhwb3J0cykge1xuICAgICAgICAgICAgICBfQ29sb3IuZGVmaW5lRnVuY3Rpb24obmFtZSwgZXhwb3J0c1tuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IF0pO1xuICAgIH0oKSk7XG4gICAgX0NvbG9yLmRlZmluZUZ1bmN0aW9ucyh7XG4gICAgICBnZXQ6IGdldCxcbiAgICAgIGdldEFsbDogZ2V0QWxsLFxuICAgICAgc2V0OiBzZXQsXG4gICAgICBzZXRBbGw6IHNldEFsbCxcbiAgICAgIHRvOiB0byxcbiAgICAgIGVxdWFsczogZXF1YWxzLFxuICAgICAgaW5HYW11dDogaW5HYW11dCxcbiAgICAgIHRvR2FtdXQ6IHRvR2FtdXQsXG4gICAgICBkaXN0YW5jZTogZGlzdGFuY2UsXG4gICAgICB0b1N0cmluZzogc2VyaWFsaXplXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihfQ29sb3IsIHtcbiAgICAgIHV0aWw6IHV0aWwsXG4gICAgICBob29rczogaG9va3MsXG4gICAgICBXSElURVM6IFdISVRFUyxcbiAgICAgIFNwYWNlOiBDb2xvclNwYWNlLFxuICAgICAgc3BhY2VzOiBDb2xvclNwYWNlLnJlZ2lzdHJ5LFxuICAgICAgcGFyc2U6IHBhcnNlMixcbiAgICAgIGRlZmF1bHRzOiBkZWZhdWx0c1xuICAgIH0pO1xuICAgIGZvciAodmFyIF9pMjIgPSAwLCBfT2JqZWN0JGtleXMyID0gT2JqZWN0LmtleXMoc3BhY2VzKTsgX2kyMiA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTIyKyspIHtcbiAgICAgIHZhciBrZXkgPSBfT2JqZWN0JGtleXMyW19pMjJdO1xuICAgICAgQ29sb3JTcGFjZS5yZWdpc3RlcihzcGFjZXNba2V5XSk7XG4gICAgfVxuICAgIGZvciAodmFyIGlkIGluIENvbG9yU3BhY2UucmVnaXN0cnkpIHtcbiAgICAgIGFkZFNwYWNlQWNjZXNzb3JzKGlkLCBDb2xvclNwYWNlLnJlZ2lzdHJ5W2lkXSk7XG4gICAgfVxuICAgIGhvb2tzLmFkZCgnY29sb3JzcGFjZS1pbml0LWVuZCcsIGZ1bmN0aW9uKHNwYWNlKSB7XG4gICAgICB2YXIgX3NwYWNlJGFsaWFzZXM7XG4gICAgICBhZGRTcGFjZUFjY2Vzc29ycyhzcGFjZS5pZCwgc3BhY2UpO1xuICAgICAgKF9zcGFjZSRhbGlhc2VzID0gc3BhY2UuYWxpYXNlcykgPT09IG51bGwgfHwgX3NwYWNlJGFsaWFzZXMgPT09IHZvaWQgMCB8fCBfc3BhY2UkYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uKGFsaWFzKSB7XG4gICAgICAgIGFkZFNwYWNlQWNjZXNzb3JzKGFsaWFzLCBzcGFjZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBhZGRTcGFjZUFjY2Vzc29ycyhpZCwgc3BhY2UpIHtcbiAgICAgIE9iamVjdC5rZXlzKHNwYWNlLmNvb3Jkcyk7XG4gICAgICBPYmplY3QudmFsdWVzKHNwYWNlLmNvb3JkcykubWFwKGZ1bmN0aW9uKGM0KSB7XG4gICAgICAgIHJldHVybiBjNC5uYW1lO1xuICAgICAgfSk7XG4gICAgICB2YXIgcHJvcElkID0gaWQucmVwbGFjZSgvLS9nLCAnXycpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9Db2xvci5wcm90b3R5cGUsIHByb3BJZCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgICAgICB2YXIgcmV0ID0gdGhpcy5nZXRBbGwoaWQpO1xuICAgICAgICAgIGlmICh0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb3h5KHJldCwge1xuICAgICAgICAgICAgaGFzOiBmdW5jdGlvbiBoYXMob2JqLCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIENvbG9yU3BhY2UucmVzb2x2ZUNvb3JkKFsgc3BhY2UsIHByb3BlcnR5IF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5oYXMob2JqLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQob2JqLCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgICAgaWYgKHByb3BlcnR5ICYmIF90eXBlb2YocHJvcGVydHkpICE9PSAnc3ltYm9sJyAmJiAhKHByb3BlcnR5IGluIG9iaikpIHtcbiAgICAgICAgICAgICAgICB2YXIgX0NvbG9yU3BhY2UkcmVzb2x2ZUNvMyA9IENvbG9yU3BhY2UucmVzb2x2ZUNvb3JkKFsgc3BhY2UsIHByb3BlcnR5IF0pLCBpbmRleCA9IF9Db2xvclNwYWNlJHJlc29sdmVDbzMuaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvYmpbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQob2JqLCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KG9iaiwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcikge1xuICAgICAgICAgICAgICBpZiAocHJvcGVydHkgJiYgX3R5cGVvZihwcm9wZXJ0eSkgIT09ICdzeW1ib2wnICYmICEocHJvcGVydHkgaW4gb2JqKSB8fCBwcm9wZXJ0eSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9Db2xvclNwYWNlJHJlc29sdmVDbzQgPSBDb2xvclNwYWNlLnJlc29sdmVDb29yZChbIHNwYWNlLCBwcm9wZXJ0eSBdKSwgaW5kZXggPSBfQ29sb3JTcGFjZSRyZXNvbHZlQ280LmluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICBvYmpbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICBfdGhpczMuc2V0QWxsKGlkLCBvYmopO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldChvYmosIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChjb29yZHMpIHtcbiAgICAgICAgICB0aGlzLnNldEFsbChpZCwgY29vcmRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgX0NvbG9yLmV4dGVuZChkZWx0YUVNZXRob2RzKTtcbiAgICBfQ29sb3IuZXh0ZW5kKHtcbiAgICAgIGRlbHRhRTogZGVsdGFFXG4gICAgfSk7XG4gICAgX0NvbG9yLmV4dGVuZCh2YXJpYXRpb25zKTtcbiAgICBfQ29sb3IuZXh0ZW5kKHtcbiAgICAgIGNvbnRyYXN0OiBjb250cmFzdFxuICAgIH0pO1xuICAgIF9Db2xvci5leHRlbmQoY2hyb21hdGljaXR5KTtcbiAgICBfQ29sb3IuZXh0ZW5kKGx1bWluYW5jZSk7XG4gICAgX0NvbG9yLmV4dGVuZChpbnRlcnBvbGF0aW9uKTtcbiAgICBfQ29sb3IuZXh0ZW5kKGNvbnRyYXN0TWV0aG9kcyk7XG4gICAgdmFyIGltcG9ydF9mcm9tMiA9IF9fdG9Nb2R1bGUocmVxdWlyZV9mcm9tNCgpKTtcbiAgICBpbXBvcnRfZG90WydkZWZhdWx0J10udGVtcGxhdGVTZXR0aW5ncy5zdHJpcCA9IGZhbHNlO1xuICAgIHZhciBoZXhSZWdleCA9IC9eI1swLTlhLWZdezMsOH0kL2k7XG4gICAgdmFyIGhzbFJlZ2V4ID0gL2hzbFxcKFxccyooWy1cXGQuXSspKHJhZHx0dXJuKS87XG4gICAgdmFyIF9Db2xvcjIgPSAoX3IgPSBuZXcgV2Vha01hcCgpLCBfZyA9IG5ldyBXZWFrTWFwKCksIF9iID0gbmV3IFdlYWtNYXAoKSwgX3JlZCA9IG5ldyBXZWFrTWFwKCksIFxuICAgIF9ncmVlbiA9IG5ldyBXZWFrTWFwKCksIF9ibHVlID0gbmV3IFdlYWtNYXAoKSwgX0NsYXNzM19icmFuZCA9IG5ldyBXZWFrU2V0KCksIFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gQ29sb3IyKHJlZCwgZ3JlZW4sIGJsdWUpIHtcbiAgICAgICAgdmFyIGFscGhhID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAxO1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sb3IyKTtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZU1ldGhvZEluaXRTcGVjKHRoaXMsIF9DbGFzczNfYnJhbmQpO1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyh0aGlzLCBfciwgdm9pZCAwKTtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWModGhpcywgX2csIHZvaWQgMCk7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjKHRoaXMsIF9iLCB2b2lkIDApO1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyh0aGlzLCBfcmVkLCB2b2lkIDApO1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyh0aGlzLCBfZ3JlZW4sIHZvaWQgMCk7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjKHRoaXMsIF9ibHVlLCB2b2lkIDApO1xuICAgICAgICBpZiAocmVkIGluc3RhbmNlb2YgX0NvbG9yMikge1xuICAgICAgICAgIHZhciByID0gcmVkLnIsIGcyID0gcmVkLmcsIGIyID0gcmVkLmI7XG4gICAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgICB0aGlzLmcgPSBnMjtcbiAgICAgICAgICB0aGlzLmIgPSBiMjtcbiAgICAgICAgICB0aGlzLmFscGhhID0gcmVkLmFscGhhO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZCA9IHJlZDtcbiAgICAgICAgdGhpcy5ncmVlbiA9IGdyZWVuO1xuICAgICAgICB0aGlzLmJsdWUgPSBibHVlO1xuICAgICAgICB0aGlzLmFscGhhID0gYWxwaGE7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKENvbG9yMiwgWyB7XG4gICAgICAgIGtleTogJ3InLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF9yLCB0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQoX3IsIHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQoX3JlZCwgdGhpcywgTWF0aC5yb3VuZChjbGFtcCh2YWx1ZSwgMCwgMSkgKiAyNTUpKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdnJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZEdldChfZywgdGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KF9nLCB0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KF9ncmVlbiwgdGhpcywgTWF0aC5yb3VuZChjbGFtcCh2YWx1ZSwgMCwgMSkgKiAyNTUpKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdiJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZEdldChfYiwgdGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KF9iLCB0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KF9ibHVlLCB0aGlzLCBNYXRoLnJvdW5kKGNsYW1wKHZhbHVlLCAwLCAxKSAqIDI1NSkpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlZCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3JlZCwgdGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KF9yLCB0aGlzLCB2YWx1ZSAvIDI1NSk7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KF9yZWQsIHRoaXMsIGNsYW1wKHZhbHVlLCAwLCAyNTUpKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdncmVlbicsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRHZXQoX2dyZWVuLCB0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQoX2csIHRoaXMsIHZhbHVlIC8gMjU1KTtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQoX2dyZWVuLCB0aGlzLCBjbGFtcCh2YWx1ZSwgMCwgMjU1KSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnYmx1ZScsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRHZXQoX2JsdWUsIHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldChfYiwgdGhpcywgdmFsdWUgLyAyNTUpO1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldChfYmx1ZSwgdGhpcywgY2xhbXAodmFsdWUsIDAsIDI1NSkpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3RvSGV4U3RyaW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvSGV4U3RyaW5nKCkge1xuICAgICAgICAgIHZhciByZWRTdHJpbmcgPSBNYXRoLnJvdW5kKHRoaXMucmVkKS50b1N0cmluZygxNik7XG4gICAgICAgICAgdmFyIGdyZWVuU3RyaW5nID0gTWF0aC5yb3VuZCh0aGlzLmdyZWVuKS50b1N0cmluZygxNik7XG4gICAgICAgICAgdmFyIGJsdWVTdHJpbmcgPSBNYXRoLnJvdW5kKHRoaXMuYmx1ZSkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgIHJldHVybiAnIycgKyAodGhpcy5yZWQgPiAxNS41ID8gcmVkU3RyaW5nIDogJzAnICsgcmVkU3RyaW5nKSArICh0aGlzLmdyZWVuID4gMTUuNSA/IGdyZWVuU3RyaW5nIDogJzAnICsgZ3JlZW5TdHJpbmcpICsgKHRoaXMuYmx1ZSA+IDE1LjUgPyBibHVlU3RyaW5nIDogJzAnICsgYmx1ZVN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAndG9KU09OJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICB2YXIgcmVkID0gdGhpcy5yZWQsIGdyZWVuID0gdGhpcy5ncmVlbiwgYmx1ZSA9IHRoaXMuYmx1ZSwgYWxwaGEgPSB0aGlzLmFscGhhO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZWQ6IHJlZCxcbiAgICAgICAgICAgIGdyZWVuOiBncmVlbixcbiAgICAgICAgICAgIGJsdWU6IGJsdWUsXG4gICAgICAgICAgICBhbHBoYTogYWxwaGFcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3BhcnNlU3RyaW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlU3RyaW5nKGNvbG9yU3RyaW5nKSB7XG4gICAgICAgICAgY29sb3JTdHJpbmcgPSBjb2xvclN0cmluZy5yZXBsYWNlKGhzbFJlZ2V4LCBmdW5jdGlvbihtYXRjaCwgYW5nbGUsIHVuaXQpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGFuZ2xlICsgdW5pdDtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgIGNhc2UgJ3JhZCc6XG4gICAgICAgICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKHZhbHVlLCByYWRUb0RlZyhhbmdsZSkpO1xuXG4gICAgICAgICAgICAgY2FzZSAndHVybic6XG4gICAgICAgICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKHZhbHVlLCB0dXJuVG9EZWcoYW5nbGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHByb3RvdHlwZUFycmF5RnJvbTtcbiAgICAgICAgICAgIGlmICgnUHJvdG90eXBlJyBpbiB3aW5kb3cgJiYgJ1ZlcnNpb24nIGluIHdpbmRvdy5Qcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgcHJvdG90eXBlQXJyYXlGcm9tID0gQXJyYXkuZnJvbTtcbiAgICAgICAgICAgICAgQXJyYXkuZnJvbSA9IGltcG9ydF9mcm9tMlsnZGVmYXVsdCddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9jb2xvcjIgPSBuZXcgX0NvbG9yKGNvbG9yU3RyaW5nKS50bygnc3JnYicpO1xuICAgICAgICAgICAgaWYgKHByb3RvdHlwZUFycmF5RnJvbSkge1xuICAgICAgICAgICAgICBBcnJheS5mcm9tID0gcHJvdG90eXBlQXJyYXlGcm9tO1xuICAgICAgICAgICAgICBwcm90b3R5cGVBcnJheUZyb20gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yID0gX2NvbG9yMi5yO1xuICAgICAgICAgICAgdGhpcy5nID0gX2NvbG9yMi5nO1xuICAgICAgICAgICAgdGhpcy5iID0gX2NvbG9yMi5iO1xuICAgICAgICAgICAgdGhpcy5hbHBoYSA9ICtfY29sb3IyLmFscGhhO1xuICAgICAgICAgIH0gY2F0Y2ggKF91bnVzZWQ0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBjb2xvciBcIicuY29uY2F0KGNvbG9yU3RyaW5nLCAnXCInKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3BhcnNlUmdiU3RyaW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlUmdiU3RyaW5nKGNvbG9yU3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy5wYXJzZVN0cmluZyhjb2xvclN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAncGFyc2VIZXhTdHJpbmcnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VIZXhTdHJpbmcoY29sb3JTdHJpbmcpIHtcbiAgICAgICAgICBpZiAoIWNvbG9yU3RyaW5nLm1hdGNoKGhleFJlZ2V4KSB8fCBbIDYsIDggXS5pbmNsdWRlcyhjb2xvclN0cmluZy5sZW5ndGgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucGFyc2VTdHJpbmcoY29sb3JTdHJpbmcpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3BhcnNlQ29sb3JGblN0cmluZycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNvbG9yRm5TdHJpbmcoY29sb3JTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnBhcnNlU3RyaW5nKGNvbG9yU3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRSZWxhdGl2ZUx1bWluYW5jZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWxhdGl2ZUx1bWluYW5jZSgpIHtcbiAgICAgICAgICB2YXIgclNSR0IgPSB0aGlzLnIsIGdTUkdCID0gdGhpcy5nLCBiU1JHQiA9IHRoaXMuYjtcbiAgICAgICAgICB2YXIgciA9IHJTUkdCIDw9IC4wMzkyOCA/IHJTUkdCIC8gMTIuOTIgOiBNYXRoLnBvdygoclNSR0IgKyAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgICAgICAgIHZhciBnMiA9IGdTUkdCIDw9IC4wMzkyOCA/IGdTUkdCIC8gMTIuOTIgOiBNYXRoLnBvdygoZ1NSR0IgKyAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgICAgICAgIHZhciBiMiA9IGJTUkdCIDw9IC4wMzkyOCA/IGJTUkdCIC8gMTIuOTIgOiBNYXRoLnBvdygoYlNSR0IgKyAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgICAgICAgIHJldHVybiAuMjEyNiAqIHIgKyAuNzE1MiAqIGcyICsgLjA3MjIgKiBiMjtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRMdW1pbm9zaXR5JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEx1bWlub3NpdHkoKSB7XG4gICAgICAgICAgcmV0dXJuIC4zICogdGhpcy5yICsgLjU5ICogdGhpcy5nICsgLjExICogdGhpcy5iO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldEx1bWlub3NpdHknLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0THVtaW5vc2l0eShMKSB7XG4gICAgICAgICAgdmFyIGQyID0gTCAtIHRoaXMuZ2V0THVtaW5vc2l0eSgpO1xuICAgICAgICAgIHJldHVybiBfYXNzZXJ0Q2xhc3NCcmFuZChfQ2xhc3MzX2JyYW5kLCB0aGlzLCBfYWRkKS5jYWxsKHRoaXMsIGQyKS5jbGlwKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0U2F0dXJhdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTYXR1cmF0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iKSAtIE1hdGgubWluKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldFNhdHVyYXRpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2F0dXJhdGlvbihzKSB7XG4gICAgICAgICAgdmFyIEMgPSBuZXcgX0NvbG9yMih0aGlzKTtcbiAgICAgICAgICB2YXIgY29sb3JFbnRpcmVzID0gWyB7XG4gICAgICAgICAgICBuYW1lOiAncicsXG4gICAgICAgICAgICB2YWx1ZTogQy5yXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogJ2cnLFxuICAgICAgICAgICAgdmFsdWU6IEMuZ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6ICdiJyxcbiAgICAgICAgICAgIHZhbHVlOiBDLmJcbiAgICAgICAgICB9IF07XG4gICAgICAgICAgdmFyIF9jb2xvckVudGlyZXMkc29ydCA9IGNvbG9yRW50aXJlcy5zb3J0KGZ1bmN0aW9uKGEyLCBiMikge1xuICAgICAgICAgICAgcmV0dXJuIGEyLnZhbHVlIC0gYjIudmFsdWU7XG4gICAgICAgICAgfSksIF9jb2xvckVudGlyZXMkc29ydDIgPSBfc2xpY2VkVG9BcnJheShfY29sb3JFbnRpcmVzJHNvcnQsIDMpLCBDbWluID0gX2NvbG9yRW50aXJlcyRzb3J0MlswXSwgQ21pZCA9IF9jb2xvckVudGlyZXMkc29ydDJbMV0sIENtYXggPSBfY29sb3JFbnRpcmVzJHNvcnQyWzJdO1xuICAgICAgICAgIGlmIChDbWF4LnZhbHVlID4gQ21pbi52YWx1ZSkge1xuICAgICAgICAgICAgQ21pZC52YWx1ZSA9IChDbWlkLnZhbHVlIC0gQ21pbi52YWx1ZSkgKiBzIC8gKENtYXgudmFsdWUgLSBDbWluLnZhbHVlKTtcbiAgICAgICAgICAgIENtYXgudmFsdWUgPSBzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBDbWlkLnZhbHVlID0gQ21heC52YWx1ZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIENtaW4udmFsdWUgPSAwO1xuICAgICAgICAgIENbQ21heC5uYW1lXSA9IENtYXgudmFsdWU7XG4gICAgICAgICAgQ1tDbWluLm5hbWVdID0gQ21pbi52YWx1ZTtcbiAgICAgICAgICBDW0NtaWQubmFtZV0gPSBDbWlkLnZhbHVlO1xuICAgICAgICAgIHJldHVybiBDO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2NsaXAnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xpcCgpIHtcbiAgICAgICAgICB2YXIgQyA9IG5ldyBfQ29sb3IyKHRoaXMpO1xuICAgICAgICAgIHZhciBMID0gQy5nZXRMdW1pbm9zaXR5KCk7XG4gICAgICAgICAgdmFyIG4yID0gTWF0aC5taW4oQy5yLCBDLmcsIEMuYik7XG4gICAgICAgICAgdmFyIHggPSBNYXRoLm1heChDLnIsIEMuZywgQy5iKTtcbiAgICAgICAgICBpZiAobjIgPCAwKSB7XG4gICAgICAgICAgICBDLnIgPSBMICsgKEMuciAtIEwpICogTCAvIChMIC0gbjIpO1xuICAgICAgICAgICAgQy5nID0gTCArIChDLmcgLSBMKSAqIEwgLyAoTCAtIG4yKTtcbiAgICAgICAgICAgIEMuYiA9IEwgKyAoQy5iIC0gTCkgKiBMIC8gKEwgLSBuMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh4ID4gMSkge1xuICAgICAgICAgICAgQy5yID0gTCArIChDLnIgLSBMKSAqICgxIC0gTCkgLyAoeCAtIEwpO1xuICAgICAgICAgICAgQy5nID0gTCArIChDLmcgLSBMKSAqICgxIC0gTCkgLyAoeCAtIEwpO1xuICAgICAgICAgICAgQy5iID0gTCArIChDLmIgLSBMKSAqICgxIC0gTCkgLyAoeCAtIEwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gQztcbiAgICAgICAgfVxuICAgICAgfSBdKTtcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIF9hZGQodmFsdWUpIHtcbiAgICAgIHZhciBDID0gbmV3IF9Db2xvcjIodGhpcyk7XG4gICAgICBDLnIgKz0gdmFsdWU7XG4gICAgICBDLmcgKz0gdmFsdWU7XG4gICAgICBDLmIgKz0gdmFsdWU7XG4gICAgICByZXR1cm4gQztcbiAgICB9XG4gICAgdmFyIGNvbG9yX2RlZmF1bHQgPSBfQ29sb3IyO1xuICAgIGZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4sIG1heDIpIHtcbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4Mik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhZFRvRGVnKHJhZCkge1xuICAgICAgcmV0dXJuIHJhZCAqIDE4MCAvIE1hdGguUEk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHR1cm5Ub0RlZyh0dXJuKSB7XG4gICAgICByZXR1cm4gdHVybiAqIDM2MDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0T3duQmFja2dyb3VuZENvbG9yKGVsbVN0eWxlKSB7XG4gICAgICB2YXIgYmdDb2xvciA9IG5ldyBjb2xvcl9kZWZhdWx0KCk7XG4gICAgICBiZ0NvbG9yLnBhcnNlU3RyaW5nKGVsbVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQtY29sb3InKSk7XG4gICAgICBpZiAoYmdDb2xvci5hbHBoYSAhPT0gMCkge1xuICAgICAgICB2YXIgb3BhY2l0eSA9IGVsbVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ29wYWNpdHknKTtcbiAgICAgICAgYmdDb2xvci5hbHBoYSA9IGJnQ29sb3IuYWxwaGEgKiBvcGFjaXR5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJnQ29sb3I7XG4gICAgfVxuICAgIHZhciBnZXRfb3duX2JhY2tncm91bmRfY29sb3JfZGVmYXVsdCA9IGdldE93bkJhY2tncm91bmRDb2xvcjtcbiAgICBmdW5jdGlvbiBpc09wYXF1ZShub2RlKSB7XG4gICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgIHJldHVybiBlbGVtZW50X2hhc19pbWFnZV9kZWZhdWx0KG5vZGUsIHN0eWxlKSB8fCBnZXRfb3duX2JhY2tncm91bmRfY29sb3JfZGVmYXVsdChzdHlsZSkuYWxwaGEgPT09IDE7XG4gICAgfVxuICAgIHZhciBpc19vcGFxdWVfZGVmYXVsdCA9IGlzT3BhcXVlO1xuICAgIGZ1bmN0aW9uIF9pc1NraXBMaW5rKGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudC5ocmVmKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBmaXJzdFBhZ2VMaW5rID0gY2FjaGVfZGVmYXVsdC5nZXQoJ2ZpcnN0UGFnZUxpbmsnLCBnZW5lcmF0ZUZpcnN0UGFnZUxpbmspO1xuICAgICAgaWYgKCFmaXJzdFBhZ2VMaW5rKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZmlyc3RQYWdlTGluay5hY3R1YWxOb2RlKSA9PT0gZWxlbWVudC5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlRmlyc3RQYWdlTGluaygpIHtcbiAgICAgIHZhciBmaXJzdFBhZ2VMaW5rO1xuICAgICAgaWYgKCF3aW5kb3cubG9jYXRpb24ub3JpZ2luKSB7XG4gICAgICAgIGZpcnN0UGFnZUxpbmsgPSBxdWVyeV9zZWxlY3Rvcl9hbGxfZGVmYXVsdChheGUuX3RyZWUsICdhOm5vdChbaHJlZl49XCIjXCJdKTpub3QoW2hyZWZePVwiLyNcIl0pOm5vdChbaHJlZl49XCJqYXZhc2NyaXB0OlwiXSknKVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0UGFnZUxpbmsgPSBxdWVyeV9zZWxlY3Rvcl9hbGxfZGVmYXVsdChheGUuX3RyZWUsICdhW2hyZWZdOm5vdChbaHJlZl49XCJqYXZhc2NyaXB0OlwiXSknKS5maW5kKGZ1bmN0aW9uKGxpbmspIHtcbiAgICAgICAgICByZXR1cm4gIV9pc0N1cnJlbnRQYWdlTGluayhsaW5rLmFjdHVhbE5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmaXJzdFBhZ2VMaW5rIHx8IG51bGw7XG4gICAgfVxuICAgIHZhciBjbGlwUmVnZXgyID0gL3JlY3RcXHMqXFwoKFswLTldKylweCw/XFxzKihbMC05XSspcHgsP1xccyooWzAtOV0rKXB4LD9cXHMqKFswLTldKylweFxccypcXCkvO1xuICAgIHZhciBjbGlwUGF0aFJlZ2V4MiA9IC8oXFx3KylcXCgoXFxkKykvO1xuICAgIGZ1bmN0aW9uIGlzQ2xpcHBlZChzdHlsZSkge1xuICAgICAgdmFyIG1hdGNoZXNDbGlwID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY2xpcCcpLm1hdGNoKGNsaXBSZWdleDIpO1xuICAgICAgdmFyIG1hdGNoZXNDbGlwUGF0aCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2NsaXAtcGF0aCcpLm1hdGNoKGNsaXBQYXRoUmVnZXgyKTtcbiAgICAgIGlmIChtYXRjaGVzQ2xpcCAmJiBtYXRjaGVzQ2xpcC5sZW5ndGggPT09IDUpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncG9zaXRpb24nKTtcbiAgICAgICAgaWYgKFsgJ2ZpeGVkJywgJ2Fic29sdXRlJyBdLmluY2x1ZGVzKHBvc2l0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBtYXRjaGVzQ2xpcFszXSAtIG1hdGNoZXNDbGlwWzFdIDw9IDAgJiYgbWF0Y2hlc0NsaXBbMl0gLSBtYXRjaGVzQ2xpcFs0XSA8PSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2hlc0NsaXBQYXRoKSB7XG4gICAgICAgIHZhciB0eXBlMiA9IG1hdGNoZXNDbGlwUGF0aFsxXTtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VJbnQobWF0Y2hlc0NsaXBQYXRoWzJdLCAxMCk7XG4gICAgICAgIHN3aXRjaCAodHlwZTIpIHtcbiAgICAgICAgIGNhc2UgJ2luc2V0JzpcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPj0gNTA7XG5cbiAgICAgICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwO1xuXG4gICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQXJlYVZpc2libGUoZWwsIHNjcmVlblJlYWRlciwgcmVjdXJzZWQpIHtcbiAgICAgIHZhciBtYXBFbCA9IGZpbmRfdXBfZGVmYXVsdChlbCwgJ21hcCcpO1xuICAgICAgaWYgKCFtYXBFbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbWFwRWxOYW1lID0gbWFwRWwuZ2V0QXR0cmlidXRlKCduYW1lJyk7XG4gICAgICBpZiAoIW1hcEVsTmFtZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbWFwRWxSb290Tm9kZSA9IGdldF9yb290X25vZGVfZGVmYXVsdDIoZWwpO1xuICAgICAgaWYgKCFtYXBFbFJvb3ROb2RlIHx8IG1hcEVsUm9vdE5vZGUubm9kZVR5cGUgIT09IDkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJlZnMgPSBxdWVyeV9zZWxlY3Rvcl9hbGxfZGVmYXVsdChheGUuX3RyZWUsICdpbWdbdXNlbWFwPVwiIycuY29uY2F0KGVzY2FwZV9zZWxlY3Rvcl9kZWZhdWx0KG1hcEVsTmFtZSksICdcIl0nKSk7XG4gICAgICBpZiAoIXJlZnMgfHwgIXJlZnMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWZzLnNvbWUoZnVuY3Rpb24oX3JlZjYyKSB7XG4gICAgICAgIHZhciBhY3R1YWxOb2RlID0gX3JlZjYyLmFjdHVhbE5vZGU7XG4gICAgICAgIHJldHVybiBpc1Zpc2libGUoYWN0dWFsTm9kZSwgc2NyZWVuUmVhZGVyLCByZWN1cnNlZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNWaXNpYmxlKGVsLCBzY3JlZW5SZWFkZXIsIHJlY3Vyc2VkKSB7XG4gICAgICB2YXIgX3dpbmRvdyROb2RlMjtcbiAgICAgIGlmICghZWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGRldGVybWluZSBpZiBlbGVtZW50IGlzIHZpc2libGUgZm9yIG5vbi1ET00gbm9kZXMnKTtcbiAgICAgIH1cbiAgICAgIHZhciB2Tm9kZSA9IGVsIGluc3RhbmNlb2YgYWJzdHJhY3RfdmlydHVhbF9ub2RlX2RlZmF1bHQgPyBlbCA6IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KGVsKTtcbiAgICAgIGVsID0gdk5vZGUgPyB2Tm9kZS5hY3R1YWxOb2RlIDogZWw7XG4gICAgICB2YXIgY2FjaGVOYW1lID0gJ19pc1Zpc2libGUnICsgKHNjcmVlblJlYWRlciA/ICdTY3JlZW5SZWFkZXInIDogJycpO1xuICAgICAgdmFyIF9yZWY2MyA9IChfd2luZG93JE5vZGUyID0gd2luZG93Lk5vZGUpICE9PSBudWxsICYmIF93aW5kb3ckTm9kZTIgIT09IHZvaWQgMCA/IF93aW5kb3ckTm9kZTIgOiB7fSwgRE9DVU1FTlRfTk9ERSA9IF9yZWY2My5ET0NVTUVOVF9OT0RFLCBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gX3JlZjYzLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU7XG4gICAgICB2YXIgbm9kZVR5cGUgPSB2Tm9kZSA/IHZOb2RlLnByb3BzLm5vZGVUeXBlIDogZWwubm9kZVR5cGU7XG4gICAgICB2YXIgbm9kZU5hbWUyID0gdk5vZGUgPyB2Tm9kZS5wcm9wcy5ub2RlTmFtZSA6IGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodk5vZGUgJiYgdHlwZW9mIHZOb2RlW2NhY2hlTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2Tm9kZVtjYWNoZU5hbWVdO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKFsgJ3N0eWxlJywgJ3NjcmlwdCcsICdub3NjcmlwdCcsICd0ZW1wbGF0ZScgXS5pbmNsdWRlcyhub2RlTmFtZTIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChlbCAmJiBub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuICAgICAgICBlbCA9IGVsLmhvc3Q7XG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuUmVhZGVyKSB7XG4gICAgICAgIHZhciBhcmlhSGlkZGVuVmFsdWUgPSB2Tm9kZSA/IHZOb2RlLmF0dHIoJ2FyaWEtaGlkZGVuJykgOiBlbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICAgIGlmIChhcmlhSGlkZGVuVmFsdWUgPT09ICd0cnVlJykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFlbCkge1xuICAgICAgICB2YXIgcGFyZW50MiA9IHZOb2RlLnBhcmVudDtcbiAgICAgICAgdmFyIHZpc2libGUzID0gdHJ1ZTtcbiAgICAgICAgaWYgKHBhcmVudDIpIHtcbiAgICAgICAgICB2aXNpYmxlMyA9IGlzVmlzaWJsZShwYXJlbnQyLCBzY3JlZW5SZWFkZXIsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2Tm9kZSkge1xuICAgICAgICAgIHZOb2RlW2NhY2hlTmFtZV0gPSB2aXNpYmxlMztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlzaWJsZTM7XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG4gICAgICBpZiAoc3R5bGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGVOYW1lMiA9PT0gJ2FyZWEnKSB7XG4gICAgICAgIHJldHVybiBpc0FyZWFWaXNpYmxlKGVsLCBzY3JlZW5SZWFkZXIsIHJlY3Vyc2VkKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgZWxIZWlnaHQgPSBwYXJzZUludChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSk7XG4gICAgICB2YXIgZWxXaWR0aCA9IHBhcnNlSW50KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJykpO1xuICAgICAgdmFyIHNjcm9sbCA9IGdldF9zY3JvbGxfZGVmYXVsdChlbCk7XG4gICAgICB2YXIgc2Nyb2xsYWJsZVdpdGhaZXJvSGVpZ2h0ID0gc2Nyb2xsICYmIGVsSGVpZ2h0ID09PSAwO1xuICAgICAgdmFyIHNjcm9sbGFibGVXaXRoWmVyb1dpZHRoID0gc2Nyb2xsICYmIGVsV2lkdGggPT09IDA7XG4gICAgICB2YXIgcG9zQWJzb2x1dGVPdmVyZmxvd0hpZGRlbkFuZFNtYWxsID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncG9zaXRpb24nKSA9PT0gJ2Fic29sdXRlJyAmJiAoZWxIZWlnaHQgPCAyIHx8IGVsV2lkdGggPCAyKSAmJiBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdvdmVyZmxvdycpID09PSAnaGlkZGVuJztcbiAgICAgIGlmICghc2NyZWVuUmVhZGVyICYmIChpc0NsaXBwZWQoc3R5bGUpIHx8IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ29wYWNpdHknKSA9PT0gJzAnIHx8IHNjcm9sbGFibGVXaXRoWmVyb0hlaWdodCB8fCBzY3JvbGxhYmxlV2l0aFplcm9XaWR0aCB8fCBwb3NBYnNvbHV0ZU92ZXJmbG93SGlkZGVuQW5kU21hbGwpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghcmVjdXJzZWQgJiYgKHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3Zpc2liaWxpdHknKSA9PT0gJ2hpZGRlbicgfHwgIXNjcmVlblJlYWRlciAmJiBpc19vZmZzY3JlZW5fZGVmYXVsdChlbCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJlbnQgPSBlbC5hc3NpZ25lZFNsb3QgPyBlbC5hc3NpZ25lZFNsb3QgOiBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHZpc2libGUyID0gZmFsc2U7XG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHZpc2libGUyID0gaXNWaXNpYmxlKHBhcmVudCwgc2NyZWVuUmVhZGVyLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh2Tm9kZSkge1xuICAgICAgICB2Tm9kZVtjYWNoZU5hbWVdID0gdmlzaWJsZTI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmlzaWJsZTI7XG4gICAgfVxuICAgIHZhciBpc192aXNpYmxlX2RlZmF1bHQgPSBpc1Zpc2libGU7XG4gICAgZnVuY3Rpb24gcmVkdWNlVG9FbGVtZW50c0JlbG93RmxvYXRpbmcoZWxlbWVudHMsIHRhcmdldE5vZGUpIHtcbiAgICAgIHZhciBmbG9hdGluZ1Bvc2l0aW9ucyA9IFsgJ2ZpeGVkJywgJ3N0aWNreScgXTtcbiAgICAgIHZhciBmaW5hbEVsZW1lbnRzID0gW107XG4gICAgICB2YXIgdGFyZ2V0Rm91bmQgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBlbGVtZW50cy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gZWxlbWVudHNbaW5kZXhdO1xuICAgICAgICBpZiAoY3VycmVudE5vZGUgPT09IHRhcmdldE5vZGUpIHtcbiAgICAgICAgICB0YXJnZXRGb3VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpO1xuICAgICAgICBpZiAoIXRhcmdldEZvdW5kICYmIGZsb2F0aW5nUG9zaXRpb25zLmluZGV4T2Yoc3R5bGUucG9zaXRpb24pICE9PSAtMSkge1xuICAgICAgICAgIGZpbmFsRWxlbWVudHMgPSBbXTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbEVsZW1lbnRzLnB1c2goY3VycmVudE5vZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbmFsRWxlbWVudHM7XG4gICAgfVxuICAgIHZhciByZWR1Y2VfdG9fZWxlbWVudHNfYmVsb3dfZmxvYXRpbmdfZGVmYXVsdCA9IHJlZHVjZVRvRWxlbWVudHNCZWxvd0Zsb2F0aW5nO1xuICAgIGZ1bmN0aW9uIF92aXN1YWxseUNvbnRhaW5zKG5vZGUsIHBhcmVudCkge1xuICAgICAgdmFyIHBhcmVudFNjcm9sbEFuY2VzdG9yID0gZ2V0U2Nyb2xsQW5jZXN0b3IocGFyZW50KTtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIG5leHRTY3JvbGxBbmNlc3RvciA9IGdldFNjcm9sbEFuY2VzdG9yKG5vZGUpO1xuICAgICAgICBpZiAobmV4dFNjcm9sbEFuY2VzdG9yID09PSBwYXJlbnRTY3JvbGxBbmNlc3RvciB8fCBuZXh0U2Nyb2xsQW5jZXN0b3IgPT09IHBhcmVudCkge1xuICAgICAgICAgIHJldHVybiBjb250YWluczIobm9kZSwgcGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbmV4dFNjcm9sbEFuY2VzdG9yO1xuICAgICAgfSB3aGlsZSAobm9kZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNjcm9sbEFuY2VzdG9yKG5vZGUpIHtcbiAgICAgIHZhciB2Tm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgdmFyIGFuY2VzdG9yID0gdk5vZGUucGFyZW50O1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChnZXRfc2Nyb2xsX2RlZmF1bHQoYW5jZXN0b3IuYWN0dWFsTm9kZSkpIHtcbiAgICAgICAgICByZXR1cm4gYW5jZXN0b3IuYWN0dWFsTm9kZTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY29udGFpbnMyKG5vZGUsIHBhcmVudCkge1xuICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcbiAgICAgIHZhciBvdmVyZmxvdyA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ292ZXJmbG93Jyk7XG4gICAgICBpZiAoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnaW5saW5lJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBjbGllbnRSZWN0cyA9IEFycmF5LmZyb20obm9kZS5nZXRDbGllbnRSZWN0cygpKTtcbiAgICAgIHZhciBib3VuZGluZ1JlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgcmVjdCA9IHtcbiAgICAgICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQsXG4gICAgICAgIHRvcDogYm91bmRpbmdSZWN0LnRvcCxcbiAgICAgICAgd2lkdGg6IGJvdW5kaW5nUmVjdC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBib3VuZGluZ1JlY3QuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgaWYgKFsgJ3Njcm9sbCcsICdhdXRvJyBdLmluY2x1ZGVzKG92ZXJmbG93KSB8fCBwYXJlbnQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEh0bWxFbGVtZW50KSB7XG4gICAgICAgIHJlY3Qud2lkdGggPSBwYXJlbnQuc2Nyb2xsV2lkdGg7XG4gICAgICAgIHJlY3QuaGVpZ2h0ID0gcGFyZW50LnNjcm9sbEhlaWdodDtcbiAgICAgIH1cbiAgICAgIGlmIChjbGllbnRSZWN0cy5sZW5ndGggPT09IDEgJiYgb3ZlcmZsb3cgPT09ICdoaWRkZW4nICYmIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3doaXRlLXNwYWNlJykgPT09ICdub3dyYXAnKSB7XG4gICAgICAgIGNsaWVudFJlY3RzWzBdID0gcmVjdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbGllbnRSZWN0cy5zb21lKGZ1bmN0aW9uKGNsaWVudFJlY3QpIHtcbiAgICAgICAgcmV0dXJuICEoTWF0aC5jZWlsKGNsaWVudFJlY3QubGVmdCkgPCBNYXRoLmZsb29yKHJlY3QubGVmdCkgfHwgTWF0aC5jZWlsKGNsaWVudFJlY3QudG9wKSA8IE1hdGguZmxvb3IocmVjdC50b3ApIHx8IE1hdGguZmxvb3IoY2xpZW50UmVjdC5sZWZ0ICsgY2xpZW50UmVjdC53aWR0aCkgPiBNYXRoLmNlaWwocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCkgfHwgTWF0aC5mbG9vcihjbGllbnRSZWN0LnRvcCArIGNsaWVudFJlY3QuaGVpZ2h0KSA+IE1hdGguY2VpbChyZWN0LnRvcCArIHJlY3QuaGVpZ2h0KSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2hhZG93RWxlbWVudHNGcm9tUG9pbnQobm9kZVgsIG5vZGVZKSB7XG4gICAgICB2YXIgcm9vdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZG9jdW1lbnQ7XG4gICAgICB2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgICAgIGlmIChpID4gOTk5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBkZXRlY3RlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEFycmF5LmZyb20ocm9vdC5lbGVtZW50c0Zyb21Qb2ludChub2RlWCwgbm9kZVkpIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24obm9kZXMpIHtcbiAgICAgICAgcmV0dXJuIGdldF9yb290X25vZGVfZGVmYXVsdDIobm9kZXMpID09PSByb290O1xuICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uKHN0YWNrLCBlbG0pIHtcbiAgICAgICAgaWYgKGlzX3NoYWRvd19yb290X2RlZmF1bHQoZWxtKSkge1xuICAgICAgICAgIHZhciBzaGFkb3dTdGFjayA9IHNoYWRvd0VsZW1lbnRzRnJvbVBvaW50KG5vZGVYLCBub2RlWSwgZWxtLnNoYWRvd1Jvb3QsIGkgKyAxKTtcbiAgICAgICAgICBzdGFjayA9IHN0YWNrLmNvbmNhdChzaGFkb3dTdGFjayk7XG4gICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCAmJiBfdmlzdWFsbHlDb250YWlucyhzdGFja1swXSwgZWxtKSkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChlbG0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFjay5wdXNoKGVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YWNrO1xuICAgICAgfSwgW10pO1xuICAgIH1cbiAgICB2YXIgc2hhZG93X2VsZW1lbnRzX2Zyb21fcG9pbnRfZGVmYXVsdCA9IHNoYWRvd0VsZW1lbnRzRnJvbVBvaW50O1xuICAgIGZ1bmN0aW9uIHVybFByb3BzRnJvbUF0dHJpYnV0ZShub2RlLCBhdHRyaWJ1dGUpIHtcbiAgICAgIGlmICghbm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdmFyIG5vZGVOYW1lMiA9IG5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgIHZhciBwYXJzZXIyID0gbm9kZTtcbiAgICAgIGlmICghWyAnQScsICdBUkVBJyBdLmluY2x1ZGVzKG5vZGVOYW1lMikgfHwgbm9kZS5vd25lclNWR0VsZW1lbnQpIHtcbiAgICAgICAgcGFyc2VyMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgcGFyc2VyMi5ocmVmID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90b2NvbCA9IFsgJ2h0dHBzOicsICdmdHBzOicgXS5pbmNsdWRlcyhwYXJzZXIyLnByb3RvY29sKSA/IHBhcnNlcjIucHJvdG9jb2wucmVwbGFjZSgvczokLywgJzonKSA6IHBhcnNlcjIucHJvdG9jb2w7XG4gICAgICB2YXIgcGFyc2VyUGF0aG5hbWUgPSAvXlxcLy8udGVzdChwYXJzZXIyLnBhdGhuYW1lKSA/IHBhcnNlcjIucGF0aG5hbWUgOiAnLycuY29uY2F0KHBhcnNlcjIucGF0aG5hbWUpO1xuICAgICAgdmFyIF9nZXRQYXRobmFtZU9yRmlsZW5hbSA9IGdldFBhdGhuYW1lT3JGaWxlbmFtZShwYXJzZXJQYXRobmFtZSksIHBhdGhuYW1lID0gX2dldFBhdGhuYW1lT3JGaWxlbmFtLnBhdGhuYW1lLCBmaWxlbmFtZSA9IF9nZXRQYXRobmFtZU9yRmlsZW5hbS5maWxlbmFtZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByb3RvY29sOiBwcm90b2NvbCxcbiAgICAgICAgaG9zdG5hbWU6IHBhcnNlcjIuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IGdldFBvcnQocGFyc2VyMi5wb3J0KSxcbiAgICAgICAgcGF0aG5hbWU6IC9cXC8kLy50ZXN0KHBhdGhuYW1lKSA/IHBhdGhuYW1lIDogJycuY29uY2F0KHBhdGhuYW1lLCAnLycpLFxuICAgICAgICBzZWFyY2g6IGdldFNlYXJjaFBhaXJzKHBhcnNlcjIuc2VhcmNoKSxcbiAgICAgICAgaGFzaDogZ2V0SGFzaFJvdXRlKHBhcnNlcjIuaGFzaCksXG4gICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UG9ydChwb3J0KSB7XG4gICAgICB2YXIgZXhjbHVkZVBvcnRzID0gWyAnNDQzJywgJzgwJyBdO1xuICAgICAgcmV0dXJuICFleGNsdWRlUG9ydHMuaW5jbHVkZXMocG9ydCkgPyBwb3J0IDogJyc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFBhdGhuYW1lT3JGaWxlbmFtZShwYXRobmFtZSkge1xuICAgICAgdmFyIGZpbGVuYW1lID0gcGF0aG5hbWUuc3BsaXQoJy8nKS5wb3AoKTtcbiAgICAgIGlmICghZmlsZW5hbWUgfHwgZmlsZW5hbWUuaW5kZXhPZignLicpID09PSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgICAgICBmaWxlbmFtZTogJydcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRobmFtZS5yZXBsYWNlKGZpbGVuYW1lLCAnJyksXG4gICAgICAgIGZpbGVuYW1lOiAvaW5kZXguLy50ZXN0KGZpbGVuYW1lKSA/ICcnIDogZmlsZW5hbWVcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNlYXJjaFBhaXJzKHNlYXJjaFN0cikge1xuICAgICAgdmFyIHF1ZXJ5ID0ge307XG4gICAgICBpZiAoIXNlYXJjaFN0ciB8fCAhc2VhcmNoU3RyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgICB9XG4gICAgICB2YXIgcGFpcnMgPSBzZWFyY2hTdHIuc3Vic3RyaW5nKDEpLnNwbGl0KCcmJyk7XG4gICAgICBpZiAoIXBhaXJzIHx8ICFwYWlycy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHBhaXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgdmFyIF9wYWlyJHNwbGl0ID0gcGFpci5zcGxpdCgnPScpLCBfcGFpciRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfcGFpciRzcGxpdCwgMiksIF9rZXk3ID0gX3BhaXIkc3BsaXQyWzBdLCBfcGFpciRzcGxpdDIkID0gX3BhaXIkc3BsaXQyWzFdLCB2YWx1ZSA9IF9wYWlyJHNwbGl0MiQgPT09IHZvaWQgMCA/ICcnIDogX3BhaXIkc3BsaXQyJDtcbiAgICAgICAgcXVlcnlbZGVjb2RlVVJJQ29tcG9uZW50KF9rZXk3KV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRIYXNoUm91dGUoaGFzaCkge1xuICAgICAgaWYgKCFoYXNoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoUmVnZXggPSAvIyE/XFwvPy9nO1xuICAgICAgdmFyIGhhc01hdGNoID0gaGFzaC5tYXRjaChoYXNoUmVnZXgpO1xuICAgICAgaWYgKCFoYXNNYXRjaCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgX2hhc01hdGNoID0gX3NsaWNlZFRvQXJyYXkoaGFzTWF0Y2gsIDEpLCBtYXRjaGVkU3RyID0gX2hhc01hdGNoWzBdO1xuICAgICAgaWYgKG1hdGNoZWRTdHIgPT09ICcjJykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gICAgdmFyIHVybF9wcm9wc19mcm9tX2F0dHJpYnV0ZV9kZWZhdWx0ID0gdXJsUHJvcHNGcm9tQXR0cmlidXRlO1xuICAgIGZ1bmN0aW9uIHZpc3VhbGx5T3ZlcmxhcHMocmVjdCwgcGFyZW50KSB7XG4gICAgICB2YXIgcGFyZW50UmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBwYXJlbnRUb3AgPSBwYXJlbnRSZWN0LnRvcDtcbiAgICAgIHZhciBwYXJlbnRMZWZ0ID0gcGFyZW50UmVjdC5sZWZ0O1xuICAgICAgdmFyIHBhcmVudFNjcm9sbEFyZWEgPSB7XG4gICAgICAgIHRvcDogcGFyZW50VG9wIC0gcGFyZW50LnNjcm9sbFRvcCxcbiAgICAgICAgYm90dG9tOiBwYXJlbnRUb3AgLSBwYXJlbnQuc2Nyb2xsVG9wICsgcGFyZW50LnNjcm9sbEhlaWdodCxcbiAgICAgICAgbGVmdDogcGFyZW50TGVmdCAtIHBhcmVudC5zY3JvbGxMZWZ0LFxuICAgICAgICByaWdodDogcGFyZW50TGVmdCAtIHBhcmVudC5zY3JvbGxMZWZ0ICsgcGFyZW50LnNjcm9sbFdpZHRoXG4gICAgICB9O1xuICAgICAgaWYgKHJlY3QubGVmdCA+IHBhcmVudFNjcm9sbEFyZWEucmlnaHQgJiYgcmVjdC5sZWZ0ID4gcGFyZW50UmVjdC5yaWdodCB8fCByZWN0LnRvcCA+IHBhcmVudFNjcm9sbEFyZWEuYm90dG9tICYmIHJlY3QudG9wID4gcGFyZW50UmVjdC5ib3R0b20gfHwgcmVjdC5yaWdodCA8IHBhcmVudFNjcm9sbEFyZWEubGVmdCAmJiByZWN0LnJpZ2h0IDwgcGFyZW50UmVjdC5sZWZ0IHx8IHJlY3QuYm90dG9tIDwgcGFyZW50U2Nyb2xsQXJlYS50b3AgJiYgcmVjdC5ib3R0b20gPCBwYXJlbnRSZWN0LnRvcCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpO1xuICAgICAgaWYgKHJlY3QubGVmdCA+IHBhcmVudFJlY3QucmlnaHQgfHwgcmVjdC50b3AgPiBwYXJlbnRSZWN0LmJvdHRvbSkge1xuICAgICAgICByZXR1cm4gc3R5bGUub3ZlcmZsb3cgPT09ICdzY3JvbGwnIHx8IHN0eWxlLm92ZXJmbG93ID09PSAnYXV0bycgfHwgcGFyZW50IGluc3RhbmNlb2Ygd2luZG93LkhUTUxCb2R5RWxlbWVudCB8fCBwYXJlbnQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEh0bWxFbGVtZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciB2aXN1YWxseV9vdmVybGFwc19kZWZhdWx0ID0gdmlzdWFsbHlPdmVybGFwcztcbiAgICB2YXIgbm9kZUluZGV4MiA9IDA7XG4gICAgdmFyIFZpcnR1YWxOb2RlID0gZnVuY3Rpb24oX2Fic3RyYWN0X3ZpcnR1YWxfbm9kKSB7XG4gICAgICBmdW5jdGlvbiBWaXJ0dWFsTm9kZShub2RlLCBwYXJlbnQsIHNoYWRvd0lkKSB7XG4gICAgICAgIHZhciBfdGhpczQ7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaXJ0dWFsTm9kZSk7XG4gICAgICAgIF90aGlzNCA9IF9jYWxsU3VwZXIodGhpcywgVmlydHVhbE5vZGUpO1xuICAgICAgICBfdGhpczQuc2hhZG93SWQgPSBzaGFkb3dJZDtcbiAgICAgICAgX3RoaXM0LmNoaWxkcmVuID0gW107XG4gICAgICAgIF90aGlzNC5hY3R1YWxOb2RlID0gbm9kZTtcbiAgICAgICAgX3RoaXM0LnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICBub2RlSW5kZXgyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczQubm9kZUluZGV4ID0gbm9kZUluZGV4MisrO1xuICAgICAgICBfdGhpczQuX2lzSGlkZGVuID0gbnVsbDtcbiAgICAgICAgX3RoaXM0Ll9jYWNoZSA9IHt9O1xuICAgICAgICBfdGhpczQuX2lzWEhUTUwgPSBpc194aHRtbF9kZWZhdWx0KG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgICAgIGlmIChub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpIHtcbiAgICAgICAgICB2YXIgdHlwZTIgPSBub2RlLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuICAgICAgICAgIHR5cGUyID0gX3RoaXM0Ll9pc1hIVE1MID8gdHlwZTIgOiAodHlwZTIgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKCF2YWxpZF9pbnB1dF90eXBlX2RlZmF1bHQoKS5pbmNsdWRlcyh0eXBlMikpIHtcbiAgICAgICAgICAgIHR5cGUyID0gJ3RleHQnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczQuX3R5cGUgPSB0eXBlMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FjaGVfZGVmYXVsdC5nZXQoJ25vZGVNYXAnKSkge1xuICAgICAgICAgIGNhY2hlX2RlZmF1bHQuZ2V0KCdub2RlTWFwJykuc2V0KG5vZGUsIF90aGlzNCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzNDtcbiAgICAgIH1cbiAgICAgIF9pbmhlcml0cyhWaXJ0dWFsTm9kZSwgX2Fic3RyYWN0X3ZpcnR1YWxfbm9kKTtcbiAgICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoVmlydHVhbE5vZGUsIFsge1xuICAgICAgICBrZXk6ICdwcm9wcycsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICghdGhpcy5fY2FjaGUuaGFzT3duUHJvcGVydHkoJ3Byb3BzJykpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyRhY3R1YWxOb2RlID0gdGhpcy5hY3R1YWxOb2RlLCBub2RlVHlwZSA9IF90aGlzJGFjdHVhbE5vZGUubm9kZVR5cGUsIG5vZGVOYW1lMiA9IF90aGlzJGFjdHVhbE5vZGUubm9kZU5hbWUsIF9pZCA9IF90aGlzJGFjdHVhbE5vZGUuaWQsIG5vZGVWYWx1ZSA9IF90aGlzJGFjdHVhbE5vZGUubm9kZVZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUucHJvcHMgPSB7XG4gICAgICAgICAgICAgIG5vZGVUeXBlOiBub2RlVHlwZSxcbiAgICAgICAgICAgICAgbm9kZU5hbWU6IHRoaXMuX2lzWEhUTUwgPyBub2RlTmFtZTIgOiBub2RlTmFtZTIudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgaWQ6IF9pZCxcbiAgICAgICAgICAgICAgdHlwZTogdGhpcy5fdHlwZSxcbiAgICAgICAgICAgICAgbm9kZVZhbHVlOiBub2RlVmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAobm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGUucHJvcHMubXVsdGlwbGUgPSB0aGlzLmFjdHVhbE5vZGUubXVsdGlwbGU7XG4gICAgICAgICAgICAgIHRoaXMuX2NhY2hlLnByb3BzLnZhbHVlID0gdGhpcy5hY3R1YWxOb2RlLnZhbHVlO1xuICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5wcm9wcy5zZWxlY3RlZCA9IHRoaXMuYWN0dWFsTm9kZS5zZWxlY3RlZDtcbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGUucHJvcHMuY2hlY2tlZCA9IHRoaXMuYWN0dWFsTm9kZS5jaGVja2VkO1xuICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5wcm9wcy5pbmRldGVybWluYXRlID0gdGhpcy5hY3R1YWxOb2RlLmluZGV0ZXJtaW5hdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5wcm9wcztcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdhdHRyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0dHIoYXR0ck5hbWUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuYWN0dWFsTm9kZS5nZXRBdHRyaWJ1dGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5hY3R1YWxOb2RlLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFzQXR0cicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNBdHRyKGF0dHJOYW1lKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFjdHVhbE5vZGUuaGFzQXR0cmlidXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLmFjdHVhbE5vZGUuaGFzQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdhdHRyTmFtZXMnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX2NhY2hlLmhhc093blByb3BlcnR5KCdhdHRyTmFtZXMnKSkge1xuICAgICAgICAgICAgdmFyIGF0dHJzO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0dWFsTm9kZS5hdHRyaWJ1dGVzIGluc3RhbmNlb2Ygd2luZG93Lk5hbWVkTm9kZU1hcCkge1xuICAgICAgICAgICAgICBhdHRycyA9IHRoaXMuYWN0dWFsTm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXR0cnMgPSB0aGlzLmFjdHVhbE5vZGUuY2xvbmVOb2RlKGZhbHNlKS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2FjaGUuYXR0ck5hbWVzID0gQXJyYXkuZnJvbShhdHRycykubWFwKGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGF0dHIubmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUuYXR0ck5hbWVzO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KSB7XG4gICAgICAgICAgdmFyIGtleSA9ICdjb21wdXRlZFN0eWxlXycgKyBwcm9wZXJ0eTtcbiAgICAgICAgICBpZiAoIXRoaXMuX2NhY2hlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2FjaGUuaGFzT3duUHJvcGVydHkoJ2NvbXB1dGVkU3R5bGUnKSkge1xuICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5jb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5hY3R1YWxOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NhY2hlW2tleV0gPSB0aGlzLl9jYWNoZS5jb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdpc0ZvY3VzYWJsZScsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICghdGhpcy5fY2FjaGUuaGFzT3duUHJvcGVydHkoJ2lzRm9jdXNhYmxlJykpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlLmlzRm9jdXNhYmxlID0gX2lzRm9jdXNhYmxlKHRoaXMuYWN0dWFsTm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5pc0ZvY3VzYWJsZTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICd0YWJiYWJsZUVsZW1lbnRzJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9jYWNoZS5oYXNPd25Qcm9wZXJ0eSgndGFiYmFibGVFbGVtZW50cycpKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZS50YWJiYWJsZUVsZW1lbnRzID0gZ2V0X3RhYmJhYmxlX2VsZW1lbnRzX2RlZmF1bHQodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS50YWJiYWJsZUVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2NsaWVudFJlY3RzJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9jYWNoZS5oYXNPd25Qcm9wZXJ0eSgnY2xpZW50UmVjdHMnKSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUuY2xpZW50UmVjdHMgPSBBcnJheS5mcm9tKHRoaXMuYWN0dWFsTm9kZS5nZXRDbGllbnRSZWN0cygpKS5maWx0ZXIoZnVuY3Rpb24ocmVjdCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVjdC53aWR0aCA+IDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmNsaWVudFJlY3RzO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2JvdW5kaW5nQ2xpZW50UmVjdCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICghdGhpcy5fY2FjaGUuaGFzT3duUHJvcGVydHkoJ2JvdW5kaW5nQ2xpZW50UmVjdCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZS5ib3VuZGluZ0NsaWVudFJlY3QgPSB0aGlzLmFjdHVhbE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gICAgICAgIH1cbiAgICAgIH0gXSk7XG4gICAgfShhYnN0cmFjdF92aXJ0dWFsX25vZGVfZGVmYXVsdCk7XG4gICAgdmFyIHZpcnR1YWxfbm9kZV9kZWZhdWx0ID0gVmlydHVhbE5vZGU7XG4gICAgZnVuY3Rpb24gdG9rZW5MaXN0KHN0cikge1xuICAgICAgcmV0dXJuIChzdHIgfHwgJycpLnRyaW0oKS5yZXBsYWNlKC9cXHN7Mix9L2csICcgJykuc3BsaXQoJyAnKTtcbiAgICB9XG4gICAgdmFyIHRva2VuX2xpc3RfZGVmYXVsdCA9IHRva2VuTGlzdDtcbiAgICB2YXIgaWRzS2V5ID0gJyBbaWRzTWFwXSc7XG4gICAgZnVuY3Rpb24gZ2V0Tm9kZXNNYXRjaGluZ0V4cHJlc3Npb24oZG9tVHJlZSwgZXhwcmVzc2lvbnMsIGZpbHRlcikge1xuICAgICAgdmFyIHNlbGVjdG9yTWFwID0gZG9tVHJlZVswXS5fc2VsZWN0b3JNYXA7XG4gICAgICBpZiAoIXNlbGVjdG9yTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBzaGFkb3dJZCA9IGRvbVRyZWVbMF0uc2hhZG93SWQ7XG4gICAgICBmb3IgKHZhciBfaTIzID0gMDsgX2kyMyA8IGV4cHJlc3Npb25zLmxlbmd0aDsgX2kyMysrKSB7XG4gICAgICAgIGlmIChleHByZXNzaW9uc1tfaTIzXS5sZW5ndGggPiAxICYmIGV4cHJlc3Npb25zW19pMjNdLnNvbWUoZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgICAgICAgIHJldHVybiBpc0dsb2JhbFNlbGVjdG9yKGV4cHJlc3Npb24pO1xuICAgICAgICB9KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG5vZGVTZXQgPSBuZXcgU2V0KCk7XG4gICAgICBleHByZXNzaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgICAgdmFyIF9tYXRjaGluZ05vZGVzJG5vZGVzO1xuICAgICAgICB2YXIgbWF0Y2hpbmdOb2RlcyA9IGZpbmRNYXRjaGluZ05vZGVzKGV4cHJlc3Npb24sIHNlbGVjdG9yTWFwLCBzaGFkb3dJZCk7XG4gICAgICAgIG1hdGNoaW5nTm9kZXMgPT09IG51bGwgfHwgbWF0Y2hpbmdOb2RlcyA9PT0gdm9pZCAwIHx8IChfbWF0Y2hpbmdOb2RlcyRub2RlcyA9IG1hdGNoaW5nTm9kZXMubm9kZXMpID09PSBudWxsIHx8IF9tYXRjaGluZ05vZGVzJG5vZGVzID09PSB2b2lkIDAgfHwgX21hdGNoaW5nTm9kZXMkbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgaWYgKG1hdGNoaW5nTm9kZXMuaXNDb21wbGV4U2VsZWN0b3IgJiYgIV9tYXRjaGVzRXhwcmVzc2lvbihub2RlLCBleHByZXNzaW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlU2V0LmFkZChub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBtYXRjaGVkTm9kZXMgPSBbXTtcbiAgICAgIG5vZGVTZXQuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVkTm9kZXMucHVzaChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICBtYXRjaGVkTm9kZXMgPSBtYXRjaGVkTm9kZXMuZmlsdGVyKGZpbHRlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hlZE5vZGVzLnNvcnQoZnVuY3Rpb24oYTIsIGIyKSB7XG4gICAgICAgIHJldHVybiBhMi5ub2RlSW5kZXggLSBiMi5ub2RlSW5kZXg7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZE1hdGNoaW5nTm9kZXMoZXhwcmVzc2lvbiwgc2VsZWN0b3JNYXAsIHNoYWRvd0lkKSB7XG4gICAgICB2YXIgZXhwID0gZXhwcmVzc2lvbltleHByZXNzaW9uLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIG5vZGVzID0gbnVsbDtcbiAgICAgIHZhciBpc0NvbXBsZXhTZWxlY3RvciA9IGV4cHJlc3Npb24ubGVuZ3RoID4gMSB8fCAhIWV4cC5wc2V1ZG9zIHx8ICEhZXhwLmNsYXNzZXM7XG4gICAgICBpZiAoaXNHbG9iYWxTZWxlY3RvcihleHApKSB7XG4gICAgICAgIG5vZGVzID0gc2VsZWN0b3JNYXBbJyonXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChleHAuaWQpIHtcbiAgICAgICAgICB2YXIgX3NlbGVjdG9yTWFwJGlkc0tleSRlO1xuICAgICAgICAgIGlmICghc2VsZWN0b3JNYXBbaWRzS2V5XSB8fCAhT2JqZWN0Lmhhc093bihzZWxlY3Rvck1hcFtpZHNLZXldLCBleHAuaWQpIHx8ICEoKF9zZWxlY3Rvck1hcCRpZHNLZXkkZSA9IHNlbGVjdG9yTWFwW2lkc0tleV1bZXhwLmlkXSkgIT09IG51bGwgJiYgX3NlbGVjdG9yTWFwJGlkc0tleSRlICE9PSB2b2lkIDAgJiYgX3NlbGVjdG9yTWFwJGlkc0tleSRlLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZXMgPSBzZWxlY3Rvck1hcFtpZHNLZXldW2V4cC5pZF0uZmlsdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnNoYWRvd0lkID09PSBzaGFkb3dJZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwLnRhZyAmJiBleHAudGFnICE9PSAnKicpIHtcbiAgICAgICAgICB2YXIgX3NlbGVjdG9yTWFwJGV4cCR0YWc7XG4gICAgICAgICAgaWYgKCEoKF9zZWxlY3Rvck1hcCRleHAkdGFnID0gc2VsZWN0b3JNYXBbZXhwLnRhZ10pICE9PSBudWxsICYmIF9zZWxlY3Rvck1hcCRleHAkdGFnICE9PSB2b2lkIDAgJiYgX3NlbGVjdG9yTWFwJGV4cCR0YWcubGVuZ3RoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2FjaGVkTm9kZXMgPSBzZWxlY3Rvck1hcFtleHAudGFnXTtcbiAgICAgICAgICBub2RlcyA9IG5vZGVzID8gZ2V0U2hhcmVkVmFsdWVzKGNhY2hlZE5vZGVzLCBub2RlcykgOiBjYWNoZWROb2RlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwLmNsYXNzZXMpIHtcbiAgICAgICAgICB2YXIgX3NlbGVjdG9yTWFwJENsYXNzO1xuICAgICAgICAgIGlmICghKChfc2VsZWN0b3JNYXAkQ2xhc3MgPSBzZWxlY3Rvck1hcFsnW2NsYXNzXSddKSAhPT0gbnVsbCAmJiBfc2VsZWN0b3JNYXAkQ2xhc3MgIT09IHZvaWQgMCAmJiBfc2VsZWN0b3JNYXAkQ2xhc3MubGVuZ3RoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgX2NhY2hlZE5vZGVzID0gc2VsZWN0b3JNYXBbJ1tjbGFzc10nXTtcbiAgICAgICAgICBub2RlcyA9IG5vZGVzID8gZ2V0U2hhcmVkVmFsdWVzKF9jYWNoZWROb2Rlcywgbm9kZXMpIDogX2NhY2hlZE5vZGVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHAuYXR0cmlidXRlcykge1xuICAgICAgICAgIGZvciAodmFyIF9pMjQgPSAwOyBfaTI0IDwgZXhwLmF0dHJpYnV0ZXMubGVuZ3RoOyBfaTI0KyspIHtcbiAgICAgICAgICAgIHZhciBfc2VsZWN0b3JNYXA7XG4gICAgICAgICAgICB2YXIgYXR0ciA9IGV4cC5hdHRyaWJ1dGVzW19pMjRdO1xuICAgICAgICAgICAgaWYgKGF0dHIudHlwZSA9PT0gJ2F0dHJWYWx1ZScpIHtcbiAgICAgICAgICAgICAgaXNDb21wbGV4U2VsZWN0b3IgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoKF9zZWxlY3Rvck1hcCA9IHNlbGVjdG9yTWFwWydbJy5jb25jYXQoYXR0ci5rZXksICddJyldKSAhPT0gbnVsbCAmJiBfc2VsZWN0b3JNYXAgIT09IHZvaWQgMCAmJiBfc2VsZWN0b3JNYXAubGVuZ3RoKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2NhY2hlZE5vZGVzMiA9IHNlbGVjdG9yTWFwWydbJy5jb25jYXQoYXR0ci5rZXksICddJyldO1xuICAgICAgICAgICAgbm9kZXMgPSBub2RlcyA/IGdldFNoYXJlZFZhbHVlcyhfY2FjaGVkTm9kZXMyLCBub2RlcykgOiBfY2FjaGVkTm9kZXMyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZXM6IG5vZGVzLFxuICAgICAgICBpc0NvbXBsZXhTZWxlY3RvcjogaXNDb21wbGV4U2VsZWN0b3JcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzR2xvYmFsU2VsZWN0b3IoZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGV4cHJlc3Npb24udGFnID09PSAnKicgJiYgIWV4cHJlc3Npb24uYXR0cmlidXRlcyAmJiAhZXhwcmVzc2lvbi5pZCAmJiAhZXhwcmVzc2lvbi5jbGFzc2VzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTaGFyZWRWYWx1ZXMoYTIsIGIyKSB7XG4gICAgICByZXR1cm4gYTIuZmlsdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGIyLmluY2x1ZGVzKG5vZGUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNhY2hlU2VsZWN0b3Ioa2V5LCB2Tm9kZSwgbWFwKSB7XG4gICAgICBpZiAoIU9iamVjdC5oYXNPd24obWFwLCBrZXkpKSB7XG4gICAgICAgIG1hcFtrZXldID0gW107XG4gICAgICB9XG4gICAgICBtYXBba2V5XS5wdXNoKHZOb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2FjaGVOb2RlU2VsZWN0b3JzKHZOb2RlLCBzZWxlY3Rvck1hcCkge1xuICAgICAgaWYgKHZOb2RlLnByb3BzLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhY2hlU2VsZWN0b3Iodk5vZGUucHJvcHMubm9kZU5hbWUsIHZOb2RlLCBzZWxlY3Rvck1hcCk7XG4gICAgICBjYWNoZVNlbGVjdG9yKCcqJywgdk5vZGUsIHNlbGVjdG9yTWFwKTtcbiAgICAgIHZOb2RlLmF0dHJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGF0dHJOYW1lKSB7XG4gICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2lkJykge1xuICAgICAgICAgIHNlbGVjdG9yTWFwW2lkc0tleV0gPSBzZWxlY3Rvck1hcFtpZHNLZXldIHx8IHt9O1xuICAgICAgICAgIHRva2VuX2xpc3RfZGVmYXVsdCh2Tm9kZS5hdHRyKGF0dHJOYW1lKSkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgY2FjaGVTZWxlY3Rvcih2YWx1ZSwgdk5vZGUsIHNlbGVjdG9yTWFwW2lkc0tleV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhY2hlU2VsZWN0b3IoJ1snLmNvbmNhdChhdHRyTmFtZSwgJ10nKSwgdk5vZGUsIHNlbGVjdG9yTWFwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgaGFzU2hhZG93Um9vdDtcbiAgICBmdW5jdGlvbiBfZ2V0RmxhdHRlbmVkVHJlZSgpIHtcbiAgICAgIHZhciBub2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB2YXIgc2hhZG93SWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICAgIGhhc1NoYWRvd1Jvb3QgPSBmYWxzZTtcbiAgICAgIHZhciBzZWxlY3Rvck1hcCA9IHt9O1xuICAgICAgY2FjaGVfZGVmYXVsdC5zZXQoJ25vZGVNYXAnLCBuZXcgV2Vha01hcCgpKTtcbiAgICAgIGNhY2hlX2RlZmF1bHQuc2V0KCdzZWxlY3Rvck1hcCcsIHNlbGVjdG9yTWFwKTtcbiAgICAgIHZhciB0cmVlID0gZmxhdHRlblRyZWUobm9kZSwgc2hhZG93SWQsIG51bGwpO1xuICAgICAgdHJlZVswXS5fc2VsZWN0b3JNYXAgPSBzZWxlY3Rvck1hcDtcbiAgICAgIHRyZWVbMF0uX2hhc1NoYWRvd1Jvb3QgPSBoYXNTaGFkb3dSb290O1xuICAgICAgcmV0dXJuIHRyZWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNsb3RDaGlsZHJlbihub2RlKSB7XG4gICAgICB2YXIgcmV0VmFsID0gW107XG4gICAgICBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgcmV0VmFsLnB1c2gobm9kZSk7XG4gICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldFZhbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlTm9kZShub2RlLCBwYXJlbnQsIHNoYWRvd0lkKSB7XG4gICAgICB2YXIgdk5vZGUgPSBuZXcgdmlydHVhbF9ub2RlX2RlZmF1bHQobm9kZSwgcGFyZW50LCBzaGFkb3dJZCk7XG4gICAgICBjYWNoZU5vZGVTZWxlY3RvcnModk5vZGUsIGNhY2hlX2RlZmF1bHQuZ2V0KCdzZWxlY3Rvck1hcCcpKTtcbiAgICAgIHJldHVybiB2Tm9kZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmxhdHRlblRyZWUobm9kZSwgc2hhZG93SWQsIHBhcmVudCkge1xuICAgICAgdmFyIHJldFZhbCwgcmVhbEFycmF5O1xuICAgICAgZnVuY3Rpb24gcmVkdWNlU2hhZG93RE9NKHJlcywgY2hpbGQsIHBhcmVudFZOb2RlKSB7XG4gICAgICAgIHZhciByZXBsYWNlbWVudHMgPSBmbGF0dGVuVHJlZShjaGlsZCwgc2hhZG93SWQsIHBhcmVudFZOb2RlKTtcbiAgICAgICAgaWYgKHJlcGxhY2VtZW50cykge1xuICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQocmVwbGFjZW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgIG5vZGUgPSBub2RlLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHZhciBub2RlTmFtZTIgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoaXNfc2hhZG93X3Jvb3RfZGVmYXVsdChub2RlKSkge1xuICAgICAgICBoYXNTaGFkb3dSb290ID0gdHJ1ZTtcbiAgICAgICAgcmV0VmFsID0gY3JlYXRlTm9kZShub2RlLCBwYXJlbnQsIHNoYWRvd0lkKTtcbiAgICAgICAgc2hhZG93SWQgPSAnYScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpO1xuICAgICAgICByZWFsQXJyYXkgPSBBcnJheS5mcm9tKG5vZGUuc2hhZG93Um9vdC5jaGlsZE5vZGVzKTtcbiAgICAgICAgcmV0VmFsLmNoaWxkcmVuID0gcmVhbEFycmF5LnJlZHVjZShmdW5jdGlvbihyZXMsIGNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlZHVjZVNoYWRvd0RPTShyZXMsIGNoaWxkLCByZXRWYWwpO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiBbIHJldFZhbCBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5vZGVOYW1lMiA9PT0gJ2NvbnRlbnQnICYmIHR5cGVvZiBub2RlLmdldERpc3RyaWJ1dGVkTm9kZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZWFsQXJyYXkgPSBBcnJheS5mcm9tKG5vZGUuZ2V0RGlzdHJpYnV0ZWROb2RlcygpKTtcbiAgICAgICAgICByZXR1cm4gcmVhbEFycmF5LnJlZHVjZShmdW5jdGlvbihyZXMsIGNoaWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVkdWNlU2hhZG93RE9NKHJlcywgY2hpbGQsIHBhcmVudCk7XG4gICAgICAgICAgfSwgW10pO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGVOYW1lMiA9PT0gJ3Nsb3QnICYmIHR5cGVvZiBub2RlLmFzc2lnbmVkTm9kZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZWFsQXJyYXkgPSBBcnJheS5mcm9tKG5vZGUuYXNzaWduZWROb2RlcygpKTtcbiAgICAgICAgICBpZiAoIXJlYWxBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlYWxBcnJheSA9IGdldFNsb3RDaGlsZHJlbihub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHN0eWwgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgICAgIHJldFZhbCA9IGNyZWF0ZU5vZGUobm9kZSwgcGFyZW50LCBzaGFkb3dJZCk7XG4gICAgICAgICAgICByZXRWYWwuY2hpbGRyZW4gPSByZWFsQXJyYXkucmVkdWNlKGZ1bmN0aW9uKHJlcywgY2hpbGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlZHVjZVNoYWRvd0RPTShyZXMsIGNoaWxkLCByZXRWYWwpO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgICAgcmV0dXJuIFsgcmV0VmFsIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZWFsQXJyYXkucmVkdWNlKGZ1bmN0aW9uKHJlcywgY2hpbGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlZHVjZVNoYWRvd0RPTShyZXMsIGNoaWxkLCBwYXJlbnQpO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgcmV0VmFsID0gY3JlYXRlTm9kZShub2RlLCBwYXJlbnQsIHNoYWRvd0lkKTtcbiAgICAgICAgICAgIHJlYWxBcnJheSA9IEFycmF5LmZyb20obm9kZS5jaGlsZE5vZGVzKTtcbiAgICAgICAgICAgIHJldFZhbC5jaGlsZHJlbiA9IHJlYWxBcnJheS5yZWR1Y2UoZnVuY3Rpb24ocmVzLCBjaGlsZCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVkdWNlU2hhZG93RE9NKHJlcywgY2hpbGQsIHJldFZhbCk7XG4gICAgICAgICAgICB9LCBbXSk7XG4gICAgICAgICAgICByZXR1cm4gWyByZXRWYWwgXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgIHJldHVybiBbIGNyZWF0ZU5vZGUobm9kZSwgcGFyZW50KSBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEJhc2VMYW5nKGxhbmcpIHtcbiAgICAgIGlmICghbGFuZykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFuZy50cmltKCkuc3BsaXQoJy0nKVswXS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICB2YXIgZ2V0X2Jhc2VfbGFuZ19kZWZhdWx0ID0gZ2V0QmFzZUxhbmc7XG4gICAgZnVuY3Rpb24gZmFpbHVyZVN1bW1hcnkobm9kZURhdGEpIHtcbiAgICAgIHZhciBmYWlsaW5nQ2hlY2tzID0ge307XG4gICAgICBmYWlsaW5nQ2hlY2tzLm5vbmUgPSBub2RlRGF0YS5ub25lLmNvbmNhdChub2RlRGF0YS5hbGwpO1xuICAgICAgZmFpbGluZ0NoZWNrcy5hbnkgPSBub2RlRGF0YS5hbnk7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoZmFpbGluZ0NoZWNrcykubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoIWZhaWxpbmdDaGVja3Nba2V5XS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1bSA9IGF4ZS5fYXVkaXQuZGF0YS5mYWlsdXJlU3VtbWFyaWVzW2tleV07XG4gICAgICAgIGlmIChzdW0gJiYgdHlwZW9mIHN1bS5mYWlsdXJlTWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBzdW0uZmFpbHVyZU1lc3NhZ2UoZmFpbGluZ0NoZWNrc1trZXldLm1hcChmdW5jdGlvbihjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrLm1lc3NhZ2UgfHwgJyc7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24oaSkge1xuICAgICAgICByZXR1cm4gaSAhPT0gdm9pZCAwO1xuICAgICAgfSkuam9pbignXFxuXFxuJyk7XG4gICAgfVxuICAgIHZhciBmYWlsdXJlX3N1bW1hcnlfZGVmYXVsdCA9IGZhaWx1cmVTdW1tYXJ5O1xuICAgIGZ1bmN0aW9uIGluY29tcGxldGVGYWxsYmFja01lc3NhZ2UoKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9IGF4ZS5fYXVkaXQuZGF0YS5pbmNvbXBsZXRlRmFsbGJhY2tNZXNzYWdlO1xuICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlKCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0S2V5cyA9IGNvbnN0YW50c19kZWZhdWx0LnJlc3VsdEdyb3VwcztcbiAgICBmdW5jdGlvbiBwcm9jZXNzQWdncmVnYXRlKHJlc3VsdHMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHRPYmplY3QgPSBheGUudXRpbHMuYWdncmVnYXRlUmVzdWx0KHJlc3VsdHMpO1xuICAgICAgcmVzdWx0S2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAob3B0aW9ucy5yZXN1bHRUeXBlcyAmJiAhb3B0aW9ucy5yZXN1bHRUeXBlcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgKHJlc3VsdE9iamVjdFtrZXldIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJ1bGVSZXN1bHQubm9kZXMpICYmIHJ1bGVSZXN1bHQubm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBydWxlUmVzdWx0Lm5vZGVzID0gWyBydWxlUmVzdWx0Lm5vZGVzWzBdIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0T2JqZWN0W2tleV0gPSAocmVzdWx0T2JqZWN0W2tleV0gfHwgW10pLm1hcChmdW5jdGlvbihydWxlUmVzdWx0KSB7XG4gICAgICAgICAgcnVsZVJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIHJ1bGVSZXN1bHQpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJ1bGVSZXN1bHQubm9kZXMpICYmIHJ1bGVSZXN1bHQubm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcnVsZVJlc3VsdC5ub2RlcyA9IHJ1bGVSZXN1bHQubm9kZXMubWFwKGZ1bmN0aW9uKHN1YlJlc3VsdCkge1xuICAgICAgICAgICAgICBpZiAoX3R5cGVvZihzdWJSZXN1bHQubm9kZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcmlhbEVsbSA9IHRyaW1FbGVtZW50U3BlYyhzdWJSZXN1bHQubm9kZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdWJSZXN1bHQsIHNlcmlhbEVsbSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGVsZXRlIHN1YlJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgIGRlbGV0ZSBzdWJSZXN1bHQubm9kZTtcbiAgICAgICAgICAgICAgbm9ybWFsaXplUmVsYXRlZE5vZGVzKHN1YlJlc3VsdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgIHJldHVybiBzdWJSZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0S2V5cy5mb3JFYWNoKGZ1bmN0aW9uKHJlc3VsdEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZSBydWxlUmVzdWx0W3Jlc3VsdEtleV07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVsZXRlIHJ1bGVSZXN1bHQucGFnZUxldmVsO1xuICAgICAgICAgIGRlbGV0ZSBydWxlUmVzdWx0LnJlc3VsdDtcbiAgICAgICAgICByZXR1cm4gcnVsZVJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHRPYmplY3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVJlbGF0ZWROb2Rlcyhub2RlLCBvcHRpb25zKSB7XG4gICAgICBbICdhbnknLCAnYWxsJywgJ25vbmUnIF0uZm9yRWFjaChmdW5jdGlvbih0eXBlMikge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobm9kZVt0eXBlMl0pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGVbdHlwZTJdLmZpbHRlcihmdW5jdGlvbihjaGVja1Jlcykge1xuICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGNoZWNrUmVzLnJlbGF0ZWROb2Rlcyk7XG4gICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24oY2hlY2tSZXMpIHtcbiAgICAgICAgICBjaGVja1Jlcy5yZWxhdGVkTm9kZXMgPSBjaGVja1Jlcy5yZWxhdGVkTm9kZXMubWFwKGZ1bmN0aW9uKHJlbGF0ZWROb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJpbUVsZW1lbnRTcGVjKHJlbGF0ZWROb2RlLCBvcHRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJpbUVsZW1lbnRTcGVjKCkge1xuICAgICAgdmFyIGVsbVNwZWMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIHJ1bk9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICAgIGVsbVNwZWMgPSBub2RlX3NlcmlhbGl6ZXJfZGVmYXVsdC5kcUVsbVRvU3BlYyhlbG1TcGVjLCBydW5PcHRpb25zKTtcbiAgICAgIHZhciBzZXJpYWxFbG0gPSB7fTtcbiAgICAgIGlmIChheGUuX2F1ZGl0Lm5vSHRtbCkge1xuICAgICAgICBzZXJpYWxFbG0uaHRtbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX2VsbVNwZWMkc291cmNlO1xuICAgICAgICBzZXJpYWxFbG0uaHRtbCA9IChfZWxtU3BlYyRzb3VyY2UgPSBlbG1TcGVjLnNvdXJjZSkgIT09IG51bGwgJiYgX2VsbVNwZWMkc291cmNlICE9PSB2b2lkIDAgPyBfZWxtU3BlYyRzb3VyY2UgOiAnVW5kZWZpbmVkJztcbiAgICAgIH1cbiAgICAgIGlmIChydW5PcHRpb25zLmVsZW1lbnRSZWYgJiYgIWVsbVNwZWMuZnJvbUZyYW1lKSB7XG4gICAgICAgIHZhciBfZWxtU3BlYyRlbGVtZW50O1xuICAgICAgICBzZXJpYWxFbG0uZWxlbWVudCA9IChfZWxtU3BlYyRlbGVtZW50ID0gZWxtU3BlYy5lbGVtZW50KSAhPT0gbnVsbCAmJiBfZWxtU3BlYyRlbGVtZW50ICE9PSB2b2lkIDAgPyBfZWxtU3BlYyRlbGVtZW50IDogbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChydW5PcHRpb25zLnNlbGVjdG9ycyAhPT0gZmFsc2UgfHwgZWxtU3BlYy5mcm9tRnJhbWUpIHtcbiAgICAgICAgdmFyIF9lbG1TcGVjJHNlbGVjdG9yO1xuICAgICAgICBzZXJpYWxFbG0udGFyZ2V0ID0gKF9lbG1TcGVjJHNlbGVjdG9yID0gZWxtU3BlYy5zZWxlY3RvcikgIT09IG51bGwgJiYgX2VsbVNwZWMkc2VsZWN0b3IgIT09IHZvaWQgMCA/IF9lbG1TcGVjJHNlbGVjdG9yIDogWyAnOnJvb3QnIF07XG4gICAgICB9XG4gICAgICBpZiAocnVuT3B0aW9ucy5hbmNlc3RyeSkge1xuICAgICAgICB2YXIgX2VsbVNwZWMkYW5jZXN0cnk7XG4gICAgICAgIHNlcmlhbEVsbS5hbmNlc3RyeSA9IChfZWxtU3BlYyRhbmNlc3RyeSA9IGVsbVNwZWMuYW5jZXN0cnkpICE9PSBudWxsICYmIF9lbG1TcGVjJGFuY2VzdHJ5ICE9PSB2b2lkIDAgPyBfZWxtU3BlYyRhbmNlc3RyeSA6IFsgJzpyb290JyBdO1xuICAgICAgfVxuICAgICAgaWYgKHJ1bk9wdGlvbnMueHBhdGgpIHtcbiAgICAgICAgdmFyIF9lbG1TcGVjJHhwYXRoO1xuICAgICAgICBzZXJpYWxFbG0ueHBhdGggPSAoX2VsbVNwZWMkeHBhdGggPSBlbG1TcGVjLnhwYXRoKSAhPT0gbnVsbCAmJiBfZWxtU3BlYyR4cGF0aCAhPT0gdm9pZCAwID8gX2VsbVNwZWMkeHBhdGggOiBbICcvJyBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlcmlhbEVsbTtcbiAgICB9XG4gICAgdmFyIGRhdGFSZWdleCA9IC9cXCRcXHtcXHM/ZGF0YVxccz9cXH0vZztcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlKHN0ciwgZGF0YSkge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoZGF0YVJlZ2V4LCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIHByb3AgaW4gZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ1xcXFwke1xcXFxzP2RhdGFcXFxcLicgKyBwcm9wICsgJ1xcXFxzP30nLCAnZycpO1xuICAgICAgICAgIHZhciByZXBsYWNlID0gdHlwZW9mIGRhdGFbcHJvcF0gPT09ICd1bmRlZmluZWQnID8gJycgOiBTdHJpbmcoZGF0YVtwcm9wXSk7XG4gICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UocmVnZXgsIHJlcGxhY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzTWVzc2FnZShtZXNzYWdlLCBkYXRhKSB7XG4gICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZGF0YS52YWx1ZXMgPSBkYXRhLmpvaW4oJywgJyk7XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5zaW5ndWxhciA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIG1lc3NhZ2UucGx1cmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHZhciBzdHIyID0gZGF0YS5sZW5ndGggPT09IDEgPyBtZXNzYWdlLnNpbmd1bGFyIDogbWVzc2FnZS5wbHVyYWw7XG4gICAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGUoc3RyMiwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGUobWVzc2FnZSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlKG1lc3NhZ2UsIGRhdGEpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgX3N0ciA9IG1lc3NhZ2VbZGF0YV07XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlKF9zdHIsIGRhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHN0ciA9IG1lc3NhZ2VbJ2RlZmF1bHQnXSB8fCBpbmNvbXBsZXRlRmFsbGJhY2tNZXNzYWdlKCk7XG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLm1lc3NhZ2VLZXkgJiYgbWVzc2FnZVtkYXRhLm1lc3NhZ2VLZXldKSB7XG4gICAgICAgIHN0ciA9IG1lc3NhZ2VbZGF0YS5tZXNzYWdlS2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9jZXNzTWVzc2FnZShzdHIsIGRhdGEpO1xuICAgIH1cbiAgICB2YXIgcHJvY2Vzc19tZXNzYWdlX2RlZmF1bHQgPSBwcm9jZXNzTWVzc2FnZTtcbiAgICBmdW5jdGlvbiBnZXRDaGVja01lc3NhZ2UoY2hlY2tJZCwgdHlwZTIsIGRhdGEpIHtcbiAgICAgIHZhciBjaGVjayA9IGF4ZS5fYXVkaXQuZGF0YS5jaGVja3NbY2hlY2tJZF07XG4gICAgICBpZiAoIWNoZWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGdldCBtZXNzYWdlIGZvciB1bmtub3duIGNoZWNrOiAnLmNvbmNhdChjaGVja0lkLCAnLicpKTtcbiAgICAgIH1cbiAgICAgIGlmICghY2hlY2subWVzc2FnZXNbdHlwZTJdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hlY2sgXCInLmNvbmNhdChjaGVja0lkLCAnXCJcIiBkb2VzIG5vdCBoYXZlIGEgXCInKS5jb25jYXQodHlwZTIsICdcIiBtZXNzYWdlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9jZXNzX21lc3NhZ2VfZGVmYXVsdChjaGVjay5tZXNzYWdlc1t0eXBlMl0sIGRhdGEpO1xuICAgIH1cbiAgICB2YXIgZ2V0X2NoZWNrX21lc3NhZ2VfZGVmYXVsdCA9IGdldENoZWNrTWVzc2FnZTtcbiAgICBmdW5jdGlvbiBnZXRDaGVja09wdGlvbihjaGVjaywgcnVsZUlELCBvcHRpb25zKSB7XG4gICAgICB2YXIgcnVsZUNoZWNrT3B0aW9uID0gKChvcHRpb25zLnJ1bGVzICYmIG9wdGlvbnMucnVsZXNbcnVsZUlEXSB8fCB7fSkuY2hlY2tzIHx8IHt9KVtjaGVjay5pZF07XG4gICAgICB2YXIgY2hlY2tPcHRpb24gPSAob3B0aW9ucy5jaGVja3MgfHwge30pW2NoZWNrLmlkXTtcbiAgICAgIHZhciBlbmFibGVkID0gY2hlY2suZW5hYmxlZDtcbiAgICAgIHZhciBvcHRzID0gY2hlY2sub3B0aW9ucztcbiAgICAgIGlmIChjaGVja09wdGlvbikge1xuICAgICAgICBpZiAoY2hlY2tPcHRpb24uaGFzT3duUHJvcGVydHkoJ2VuYWJsZWQnKSkge1xuICAgICAgICAgIGVuYWJsZWQgPSBjaGVja09wdGlvbi5lbmFibGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGVja09wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnb3B0aW9ucycpKSB7XG4gICAgICAgICAgb3B0cyA9IGNoZWNrT3B0aW9uLm9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChydWxlQ2hlY2tPcHRpb24pIHtcbiAgICAgICAgaWYgKHJ1bGVDaGVja09wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnZW5hYmxlZCcpKSB7XG4gICAgICAgICAgZW5hYmxlZCA9IHJ1bGVDaGVja09wdGlvbi5lbmFibGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydWxlQ2hlY2tPcHRpb24uaGFzT3duUHJvcGVydHkoJ29wdGlvbnMnKSkge1xuICAgICAgICAgIG9wdHMgPSBydWxlQ2hlY2tPcHRpb24ub3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZW5hYmxlZDogZW5hYmxlZCxcbiAgICAgICAgb3B0aW9uczogb3B0cyxcbiAgICAgICAgYWJzb2x1dGVQYXRoczogb3B0aW9ucy5hYnNvbHV0ZVBhdGhzXG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgZ2V0X2NoZWNrX29wdGlvbl9kZWZhdWx0ID0gZ2V0Q2hlY2tPcHRpb247XG4gICAgZnVuY3Rpb24gX2dldEVudmlyb25tZW50RGF0YSgpIHtcbiAgICAgIHZhciBfd2luJGxvY2F0aW9uO1xuICAgICAgdmFyIG1ldGFkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuICAgICAgdmFyIHdpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogd2luZG93O1xuICAgICAgaWYgKG1ldGFkYXRhICYmIF90eXBlb2YobWV0YWRhdGEpID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgICB9IGVsc2UgaWYgKF90eXBlb2Yod2luKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGVzdEVuZ2luZToge1xuICAgICAgICAgIG5hbWU6ICdheGUtY29yZScsXG4gICAgICAgICAgdmVyc2lvbjogYXhlLnZlcnNpb25cbiAgICAgICAgfSxcbiAgICAgICAgdGVzdFJ1bm5lcjoge1xuICAgICAgICAgIG5hbWU6IGF4ZS5fYXVkaXQuYnJhbmRcbiAgICAgICAgfSxcbiAgICAgICAgdGVzdEVudmlyb25tZW50OiBnZXRUZXN0RW52aXJvbm1lbnQod2luKSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHVybDogKF93aW4kbG9jYXRpb24gPSB3aW4ubG9jYXRpb24pID09PSBudWxsIHx8IF93aW4kbG9jYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF93aW4kbG9jYXRpb24uaHJlZlxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VGVzdEVudmlyb25tZW50KHdpbikge1xuICAgICAgaWYgKCF3aW4ubmF2aWdhdG9yIHx8IF90eXBlb2Yod2luLm5hdmlnYXRvcikgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBuYXZpZ2F0b3IyID0gd2luLm5hdmlnYXRvciwgaW5uZXJIZWlnaHQgPSB3aW4uaW5uZXJIZWlnaHQsIGlubmVyV2lkdGggPSB3aW4uaW5uZXJXaWR0aDtcbiAgICAgIHZhciBfcmVmNjQgPSBnZXRPcmllbnRhdGlvbih3aW4pIHx8IHt9LCBhbmdsZSA9IF9yZWY2NC5hbmdsZSwgdHlwZTIgPSBfcmVmNjQudHlwZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVzZXJBZ2VudDogbmF2aWdhdG9yMi51c2VyQWdlbnQsXG4gICAgICAgIHdpbmRvd1dpZHRoOiBpbm5lcldpZHRoLFxuICAgICAgICB3aW5kb3dIZWlnaHQ6IGlubmVySGVpZ2h0LFxuICAgICAgICBvcmllbnRhdGlvbkFuZ2xlOiBhbmdsZSxcbiAgICAgICAgb3JpZW50YXRpb25UeXBlOiB0eXBlMlxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0T3JpZW50YXRpb24oX3JlZjY1KSB7XG4gICAgICB2YXIgc2NyZWVuID0gX3JlZjY1LnNjcmVlbjtcbiAgICAgIHJldHVybiBzY3JlZW4ub3JpZW50YXRpb24gfHwgc2NyZWVuLm1zT3JpZW50YXRpb24gfHwgc2NyZWVuLm1vek9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVGcmFtZUNvbnRleHQoZnJhbWUsIF9yZWY2Nikge1xuICAgICAgdmFyIGZvY3VzYWJsZSA9IF9yZWY2Ni5mb2N1c2FibGUsIHBhZ2UgPSBfcmVmNjYucGFnZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5vZGU6IGZyYW1lLFxuICAgICAgICBpbmNsdWRlOiBbXSxcbiAgICAgICAgZXhjbHVkZTogW10sXG4gICAgICAgIGluaXRpYXRvcjogZmFsc2UsXG4gICAgICAgIGZvY3VzYWJsZTogZm9jdXNhYmxlICYmIGZyYW1lRm9jdXNhYmxlKGZyYW1lKSxcbiAgICAgICAgc2l6ZTogZ2V0Qm91bmRpbmdTaXplKGZyYW1lKSxcbiAgICAgICAgcGFnZTogcGFnZVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJhbWVGb2N1c2FibGUoZnJhbWUpIHtcbiAgICAgIHZhciB0YWJJbmRleCA9IHBhcnNlX3RhYmluZGV4X2RlZmF1bHQoZnJhbWUuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpKTtcbiAgICAgIHJldHVybiB0YWJJbmRleCA9PT0gbnVsbCB8fCB0YWJJbmRleCA+PSAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRCb3VuZGluZ1NpemUoZG9tTm9kZSkge1xuICAgICAgdmFyIHdpZHRoID0gcGFyc2VJbnQoZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyksIDEwKTtcbiAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChkb21Ob2RlLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JyksIDEwKTtcbiAgICAgIGlmIChpc05hTih3aWR0aCkgfHwgaXNOYU4oaGVpZ2h0KSkge1xuICAgICAgICB2YXIgcmVjdCA9IGRvbU5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHdpZHRoID0gaXNOYU4od2lkdGgpID8gcmVjdC53aWR0aCA6IHdpZHRoO1xuICAgICAgICBoZWlnaHQgPSBpc05hTihoZWlnaHQpID8gcmVjdC5oZWlnaHQgOiBoZWlnaHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBub3JtYWxpemVDb250ZXh0KGNvbnRleHRTcGVjKSB7XG4gICAgICBpZiAoX2lzQ29udGV4dE9iamVjdChjb250ZXh0U3BlYykpIHtcbiAgICAgICAgdmFyIG1zZyA9ICcgbXVzdCBiZSB1c2VkIGluc2lkZSBpbmNsdWRlIG9yIGV4Y2x1ZGUuIEl0IHNob3VsZCBub3QgYmUgb24gdGhlIHNhbWUgb2JqZWN0Lic7XG4gICAgICAgIGFzc2VydDIoIV9vYmplY3RIYXNPd24oY29udGV4dFNwZWMsICdmcm9tRnJhbWVzJyksICdmcm9tRnJhbWVzJyArIG1zZyk7XG4gICAgICAgIGFzc2VydDIoIV9vYmplY3RIYXNPd24oY29udGV4dFNwZWMsICdmcm9tU2hhZG93RG9tJyksICdmcm9tU2hhZG93RG9tJyArIG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKF9pc0NvbnRleHRQcm9wKGNvbnRleHRTcGVjKSkge1xuICAgICAgICBjb250ZXh0U3BlYyA9IHtcbiAgICAgICAgICBpbmNsdWRlOiBjb250ZXh0U3BlYyxcbiAgICAgICAgICBleGNsdWRlOiBbXVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbmNsdWRlOiBbIGRvY3VtZW50IF0sXG4gICAgICAgICAgZXhjbHVkZTogW11cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmNsdWRlID0gbm9ybWFsaXplQ29udGV4dExpc3QoY29udGV4dFNwZWMuaW5jbHVkZSk7XG4gICAgICBpZiAoaW5jbHVkZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaW5jbHVkZS5wdXNoKGRvY3VtZW50KTtcbiAgICAgIH1cbiAgICAgIHZhciBleGNsdWRlID0gbm9ybWFsaXplQ29udGV4dExpc3QoY29udGV4dFNwZWMuZXhjbHVkZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbmNsdWRlOiBpbmNsdWRlLFxuICAgICAgICBleGNsdWRlOiBleGNsdWRlXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBub3JtYWxpemVDb250ZXh0TGlzdCgpIHtcbiAgICAgIHZhciBzZWxlY3Rvckxpc3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAgICAgdmFyIG5vcm1hbGl6ZWRMaXN0ID0gW107XG4gICAgICBpZiAoIV9pc0FycmF5TGlrZShzZWxlY3Rvckxpc3QpKSB7XG4gICAgICAgIHNlbGVjdG9yTGlzdCA9IFsgc2VsZWN0b3JMaXN0IF07XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfaTI1ID0gMDsgX2kyNSA8IHNlbGVjdG9yTGlzdC5sZW5ndGg7IF9pMjUrKykge1xuICAgICAgICB2YXIgbm9ybWFsaXplZFNlbGVjdG9yID0gbm9ybWFsaXplQ29udGV4dFNlbGVjdG9yKHNlbGVjdG9yTGlzdFtfaTI1XSk7XG4gICAgICAgIGlmIChub3JtYWxpemVkU2VsZWN0b3IpIHtcbiAgICAgICAgICBub3JtYWxpemVkTGlzdC5wdXNoKG5vcm1hbGl6ZWRTZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub3JtYWxpemVkTGlzdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplQ29udGV4dFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZSkge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gWyBzZWxlY3RvciBdO1xuICAgICAgfVxuICAgICAgaWYgKF9pc0xhYmVsbGVkRnJhbWVzU2VsZWN0b3Ioc2VsZWN0b3IpKSB7XG4gICAgICAgIGFzc2VydExhYmVsbGVkRnJhbWVTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IuZnJvbUZyYW1lcztcbiAgICAgIH0gZWxzZSBpZiAoX2lzTGFiZWxsZWRTaGFkb3dEb21TZWxlY3RvcihzZWxlY3RvcikpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBbIHNlbGVjdG9yIF07XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9ybWFsaXplRnJhbWVTZWxlY3RvcnMoc2VsZWN0b3IpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBub3JtYWxpemVGcmFtZVNlbGVjdG9ycyhmcmFtZVNlbGVjdG9ycykge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZyYW1lU2VsZWN0b3JzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbm9ybWFsaXplZFNlbGVjdG9ycyA9IFtdO1xuICAgICAgdmFyIF9pdGVyYXRvcjExID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZnJhbWVTZWxlY3RvcnMpLCBfc3RlcDExO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IxMS5zKCk7ICEoX3N0ZXAxMSA9IF9pdGVyYXRvcjExLm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gX3N0ZXAxMS52YWx1ZTtcbiAgICAgICAgICBpZiAoX2lzTGFiZWxsZWRTaGFkb3dEb21TZWxlY3RvcihzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIGFzc2VydExhYmVsbGVkU2hhZG93RG9tU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5mcm9tU2hhZG93RG9tO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJyAmJiAhaXNTaGFkb3dTZWxlY3RvcihzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9ybWFsaXplZFNlbGVjdG9ycy5wdXNoKHNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjExLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjExLmYoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub3JtYWxpemVkU2VsZWN0b3JzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc3NlcnRMYWJlbGxlZEZyYW1lU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgIGFzc2VydDIoQXJyYXkuaXNBcnJheShzZWxlY3Rvci5mcm9tRnJhbWVzKSwgJ2Zyb21GcmFtZXMgcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgYXNzZXJ0MihzZWxlY3Rvci5mcm9tRnJhbWVzLmV2ZXJ5KGZ1bmN0aW9uKGZyb21GcmFtZVNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiAhX29iamVjdEhhc093bihmcm9tRnJhbWVTZWxlY3RvciwgJ2Zyb21GcmFtZXMnKTtcbiAgICAgIH0pLCAnSW52YWxpZCBjb250ZXh0OyBmcm9tRnJhbWVzIHNlbGVjdG9yIG11c3QgYmUgYXBwZW5kZWQsIHJhdGhlciB0aGFuIG5lc3RlZCcpO1xuICAgICAgYXNzZXJ0MighX29iamVjdEhhc093bihzZWxlY3RvciwgJ2Zyb21TaGFkb3dEb20nKSwgJ2Zyb21GcmFtZXMgYW5kIGZyb21TaGFkb3dEb20gY2Fubm90IGJlIHVzZWQgb24gdGhlIHNhbWUgb2JqZWN0Jyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzc2VydExhYmVsbGVkU2hhZG93RG9tU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgIGFzc2VydDIoQXJyYXkuaXNBcnJheShzZWxlY3Rvci5mcm9tU2hhZG93RG9tKSwgJ2Zyb21TaGFkb3dEb20gcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgYXNzZXJ0MihzZWxlY3Rvci5mcm9tU2hhZG93RG9tLmV2ZXJ5KGZ1bmN0aW9uKGZyb21TaGFkb3dEb21TZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gIV9vYmplY3RIYXNPd24oZnJvbVNoYWRvd0RvbVNlbGVjdG9yLCAnZnJvbUZyYW1lcycpO1xuICAgICAgfSksICdzaGFkb3cgc2VsZWN0b3IgbXVzdCBiZSBpbnNpZGUgZnJvbUZyYW1lIGluc3RlYWQnKTtcbiAgICAgIGFzc2VydDIoc2VsZWN0b3IuZnJvbVNoYWRvd0RvbS5ldmVyeShmdW5jdGlvbihmcm9tU2hhZG93RG9tU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuICFfb2JqZWN0SGFzT3duKGZyb21TaGFkb3dEb21TZWxlY3RvciwgJ2Zyb21TaGFkb3dEb20nKTtcbiAgICAgIH0pLCAnZnJvbVNoYWRvd0RvbSBzZWxlY3RvciBtdXN0IGJlIGFwcGVuZGVkLCByYXRoZXIgdGhhbiBuZXN0ZWQnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNTaGFkb3dTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc2VsZWN0b3IpICYmIHNlbGVjdG9yLmV2ZXJ5KGZ1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZyc7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNzZXJ0Mihib29sLCBzdHIpIHtcbiAgICAgIGFzc2VydF9kZWZhdWx0KGJvb2wsICdJbnZhbGlkIGNvbnRleHQ7ICcuY29uY2F0KHN0ciwgJ1xcblNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RlcXVlbGFicy9heGUtY29yZS9ibG9iL21hc3Rlci9kb2MvY29udGV4dC5tZCcpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VTZWxlY3RvckFycmF5KGNvbnRleHQsIHR5cGUyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBfaTI2ID0gMCwgbCA9IGNvbnRleHRbdHlwZTJdLmxlbmd0aDsgX2kyNiA8IGw7IF9pMjYrKykge1xuICAgICAgICB2YXIgaXRlbSA9IGNvbnRleHRbdHlwZTJdW19pMjZdO1xuICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uZG9jdW1lbnRFbGVtZW50IGluc3RhbmNlb2Ygd2luZG93Lk5vZGUpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbnRleHQuZmxhdFRyZWVbMF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChpdGVtKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBwdXNoVW5pcXVlRnJhbWVTZWxlY3Rvcihjb250ZXh0LCB0eXBlMiwgaXRlbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBub2RlTGlzdCA9IF9zaGFkb3dTZWxlY3RBbGwoaXRlbVswXSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIF90b0NvbnN1bWFibGVBcnJheShub2RlTGlzdC5tYXAoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQobm9kZSk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdC5maWx0ZXIoZnVuY3Rpb24ocikge1xuICAgICAgICByZXR1cm4gcjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwdXNoVW5pcXVlRnJhbWVTZWxlY3Rvcihjb250ZXh0LCB0eXBlMiwgc2VsZWN0b3JBcnJheSkge1xuICAgICAgY29udGV4dC5mcmFtZXMgPSBjb250ZXh0LmZyYW1lcyB8fCBbXTtcbiAgICAgIHZhciBmcmFtZVNlbGVjdG9yID0gc2VsZWN0b3JBcnJheS5zaGlmdCgpO1xuICAgICAgdmFyIGZyYW1lcyA9IF9zaGFkb3dTZWxlY3RBbGwoZnJhbWVTZWxlY3Rvcik7XG4gICAgICBmcmFtZXMuZm9yRWFjaChmdW5jdGlvbihmcmFtZSkge1xuICAgICAgICB2YXIgZnJhbWVDb250ZXh0ID0gY29udGV4dC5mcmFtZXMuZmluZChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0Lm5vZGUgPT09IGZyYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFmcmFtZUNvbnRleHQpIHtcbiAgICAgICAgICBmcmFtZUNvbnRleHQgPSBjcmVhdGVGcmFtZUNvbnRleHQoZnJhbWUsIGNvbnRleHQpO1xuICAgICAgICAgIGNvbnRleHQuZnJhbWVzLnB1c2goZnJhbWVDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBmcmFtZUNvbnRleHRbdHlwZTJdLnB1c2goc2VsZWN0b3JBcnJheSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gQ29udGV4dChzcGVjLCBmbGF0VHJlZSkge1xuICAgICAgdmFyIF9zcGVjMiwgX3NwZWMzLCBfc3BlYzQsIF9zcGVjNSwgX3RoaXM1ID0gdGhpcztcbiAgICAgIHNwZWMgPSBfY2xvbmUoc3BlYyk7XG4gICAgICB0aGlzLmZyYW1lcyA9IFtdO1xuICAgICAgdGhpcy5wYWdlID0gdHlwZW9mICgoX3NwZWMyID0gc3BlYykgPT09IG51bGwgfHwgX3NwZWMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3BlYzIucGFnZSkgPT09ICdib29sZWFuJyA/IHNwZWMucGFnZSA6IHZvaWQgMDtcbiAgICAgIHRoaXMuaW5pdGlhdG9yID0gdHlwZW9mICgoX3NwZWMzID0gc3BlYykgPT09IG51bGwgfHwgX3NwZWMzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3BlYzMuaW5pdGlhdG9yKSA9PT0gJ2Jvb2xlYW4nID8gc3BlYy5pbml0aWF0b3IgOiB0cnVlO1xuICAgICAgdGhpcy5mb2N1c2FibGUgPSB0eXBlb2YgKChfc3BlYzQgPSBzcGVjKSA9PT0gbnVsbCB8fCBfc3BlYzQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zcGVjNC5mb2N1c2FibGUpID09PSAnYm9vbGVhbicgPyBzcGVjLmZvY3VzYWJsZSA6IHRydWU7XG4gICAgICB0aGlzLnNpemUgPSBfdHlwZW9mKChfc3BlYzUgPSBzcGVjKSA9PT0gbnVsbCB8fCBfc3BlYzUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zcGVjNS5zaXplKSA9PT0gJ29iamVjdCcgPyBzcGVjLnNpemUgOiB7fTtcbiAgICAgIHNwZWMgPSBub3JtYWxpemVDb250ZXh0KHNwZWMpO1xuICAgICAgdGhpcy5mbGF0VHJlZSA9IGZsYXRUcmVlICE9PSBudWxsICYmIGZsYXRUcmVlICE9PSB2b2lkIDAgPyBmbGF0VHJlZSA6IF9nZXRGbGF0dGVuZWRUcmVlKGdldFJvb3ROb2RlMihzcGVjKSk7XG4gICAgICB0aGlzLmV4Y2x1ZGUgPSBzcGVjLmV4Y2x1ZGU7XG4gICAgICB0aGlzLmluY2x1ZGUgPSBzcGVjLmluY2x1ZGU7XG4gICAgICB0aGlzLmluY2x1ZGUgPSBwYXJzZVNlbGVjdG9yQXJyYXkodGhpcywgJ2luY2x1ZGUnKTtcbiAgICAgIHRoaXMuZXhjbHVkZSA9IHBhcnNlU2VsZWN0b3JBcnJheSh0aGlzLCAnZXhjbHVkZScpO1xuICAgICAgX3NlbGVjdCgnZnJhbWUsIGlmcmFtZScsIHRoaXMpLmZvckVhY2goZnVuY3Rpb24oZnJhbWUpIHtcbiAgICAgICAgaWYgKF9pc05vZGVJbkNvbnRleHQoZnJhbWUsIF90aGlzNSkpIHtcbiAgICAgICAgICBwdXNoVW5pcXVlRnJhbWUoX3RoaXM1LCBmcmFtZS5hY3R1YWxOb2RlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIHRoaXMucGFnZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5wYWdlID0gaXNQYWdlQ29udGV4dCh0aGlzKTtcbiAgICAgICAgdGhpcy5mcmFtZXMuZm9yRWFjaChmdW5jdGlvbihmcmFtZSkge1xuICAgICAgICAgIGZyYW1lLnBhZ2UgPSBfdGhpczUucGFnZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZUNvbnRleHQodGhpcyk7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5pbmNsdWRlKSkge1xuICAgICAgICB0aGlzLmluY2x1ZGUgPSBBcnJheS5mcm9tKHRoaXMuaW5jbHVkZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmluY2x1ZGUuc29ydChub2RlX3NvcnRlcl9kZWZhdWx0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHVzaFVuaXF1ZUZyYW1lKGNvbnRleHQsIGZyYW1lKSB7XG4gICAgICBpZiAoIV9pc1Zpc2libGVUb1NjcmVlblJlYWRlcnMoZnJhbWUpIHx8IGZpbmRfYnlfZGVmYXVsdChjb250ZXh0LmZyYW1lcywgJ25vZGUnLCBmcmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29udGV4dC5mcmFtZXMucHVzaChjcmVhdGVGcmFtZUNvbnRleHQoZnJhbWUsIGNvbnRleHQpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNQYWdlQ29udGV4dChfcmVmNjcpIHtcbiAgICAgIHZhciBpbmNsdWRlID0gX3JlZjY3LmluY2x1ZGU7XG4gICAgICByZXR1cm4gaW5jbHVkZS5sZW5ndGggPT09IDEgJiYgaW5jbHVkZVswXS5hY3R1YWxOb2RlID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlQ29udGV4dChjb250ZXh0KSB7XG4gICAgICBpZiAoY29udGV4dC5pbmNsdWRlLmxlbmd0aCA9PT0gMCAmJiBjb250ZXh0LmZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGVudiA9IF9yZXNwb25kYWJsZS5pc0luRnJhbWUoKSA/ICdmcmFtZScgOiAncGFnZSc7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZWxlbWVudHMgZm91bmQgZm9yIGluY2x1ZGUgaW4gJyArIGVudiArICcgQ29udGV4dCcpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRSb290Tm9kZTIoX3JlZjY4KSB7XG4gICAgICB2YXIgaW5jbHVkZSA9IF9yZWY2OC5pbmNsdWRlLCBleGNsdWRlID0gX3JlZjY4LmV4Y2x1ZGU7XG4gICAgICB2YXIgc2VsZWN0b3JzID0gQXJyYXkuZnJvbShpbmNsdWRlKS5jb25jYXQoQXJyYXkuZnJvbShleGNsdWRlKSk7XG4gICAgICBmb3IgKHZhciBfaTI3ID0gMDsgX2kyNyA8IHNlbGVjdG9ycy5sZW5ndGg7IF9pMjcrKykge1xuICAgICAgICB2YXIgaXRlbSA9IHNlbGVjdG9yc1tfaTI3XTtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiB3aW5kb3cuRWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBpdGVtLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0uZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZ2V0RnJhbWVDb250ZXh0cyhjb250ZXh0KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICBpZiAob3B0aW9ucy5pZnJhbWVzID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgX0NvbnRleHQgPSBuZXcgQ29udGV4dChjb250ZXh0KSwgZnJhbWVzID0gX0NvbnRleHQuZnJhbWVzO1xuICAgICAgcmV0dXJuIGZyYW1lcy5tYXAoZnVuY3Rpb24oX3JlZjY5KSB7XG4gICAgICAgIHZhciBub2RlID0gX3JlZjY5Lm5vZGUsIGZyYW1lQ29udGV4dCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNjksIF9leGNsdWRlZDE0KTtcbiAgICAgICAgZnJhbWVDb250ZXh0LmluaXRpYXRvciA9IGZhbHNlO1xuICAgICAgICB2YXIgZnJhbWVTZWxlY3RvciA9IF9nZXRBbmNlc3RyeShub2RlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmcmFtZVNlbGVjdG9yOiBmcmFtZVNlbGVjdG9yLFxuICAgICAgICAgIGZyYW1lQ29udGV4dDogZnJhbWVDb250ZXh0XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2dldFJ1bGUocnVsZUlkKSB7XG4gICAgICB2YXIgcnVsZSA9IGF4ZS5fYXVkaXQucnVsZXMuZmluZChmdW5jdGlvbihfcmVmNzApIHtcbiAgICAgICAgdmFyIGlkID0gX3JlZjcwLmlkO1xuICAgICAgICByZXR1cm4gaWQgPT09IHJ1bGVJZDtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFydWxlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgcnVsZSBieSBpZDogJy5jb25jYXQocnVsZUlkKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsbSkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICAgIHZhciBvdmVyZmxvd1ggPSBlbG0uc2Nyb2xsV2lkdGggPiBlbG0uY2xpZW50V2lkdGggKyBidWZmZXI7XG4gICAgICB2YXIgb3ZlcmZsb3dZID0gZWxtLnNjcm9sbEhlaWdodCA+IGVsbS5jbGllbnRIZWlnaHQgKyBidWZmZXI7XG4gICAgICBpZiAoIShvdmVyZmxvd1ggfHwgb3ZlcmZsb3dZKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbG0pO1xuICAgICAgdmFyIHNjcm9sbGFibGVYID0gaXNTY3JvbGxhYmxlKHN0eWxlLCAnb3ZlcmZsb3cteCcpO1xuICAgICAgdmFyIHNjcm9sbGFibGVZID0gaXNTY3JvbGxhYmxlKHN0eWxlLCAnb3ZlcmZsb3cteScpO1xuICAgICAgaWYgKG92ZXJmbG93WCAmJiBzY3JvbGxhYmxlWCB8fCBvdmVyZmxvd1kgJiYgc2Nyb2xsYWJsZVkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbG06IGVsbSxcbiAgICAgICAgICB0b3A6IGVsbS5zY3JvbGxUb3AsXG4gICAgICAgICAgbGVmdDogZWxtLnNjcm9sbExlZnRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaXNTY3JvbGxhYmxlKHN0eWxlLCBwcm9wKSB7XG4gICAgICB2YXIgb3ZlcmZsb3dQcm9wID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgICAgIHJldHVybiBbICdzY3JvbGwnLCAnYXV0bycgXS5pbmNsdWRlcyhvdmVyZmxvd1Byb3ApO1xuICAgIH1cbiAgICB2YXIgZ2V0X3Njcm9sbF9kZWZhdWx0ID0gbWVtb2l6ZV9kZWZhdWx0KGdldFNjcm9sbCk7XG4gICAgZnVuY3Rpb24gZ2V0RWxtU2Nyb2xsUmVjdXJzaXZlKHJvb3QpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHJvb3QuY2hpbGRyZW4gfHwgcm9vdC5jaGlsZE5vZGVzIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24oc2Nyb2xscywgZWxtKSB7XG4gICAgICAgIHZhciBzY3JvbGwgPSBnZXRfc2Nyb2xsX2RlZmF1bHQoZWxtKTtcbiAgICAgICAgaWYgKHNjcm9sbCkge1xuICAgICAgICAgIHNjcm9sbHMucHVzaChzY3JvbGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY3JvbGxzLmNvbmNhdChnZXRFbG1TY3JvbGxSZWN1cnNpdmUoZWxtKSk7XG4gICAgICB9LCBbXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNjcm9sbFN0YXRlKCkge1xuICAgICAgdmFyIHdpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogd2luZG93O1xuICAgICAgdmFyIHJvb3QgPSB3aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgdmFyIHdpbmRvd1Njcm9sbCA9IFsgd2luLnBhZ2VYT2Zmc2V0ICE9PSB2b2lkIDAgPyB7XG4gICAgICAgIGVsbTogd2luLFxuICAgICAgICB0b3A6IHdpbi5wYWdlWU9mZnNldCxcbiAgICAgICAgbGVmdDogd2luLnBhZ2VYT2Zmc2V0XG4gICAgICB9IDoge1xuICAgICAgICBlbG06IHJvb3QsXG4gICAgICAgIHRvcDogcm9vdC5zY3JvbGxUb3AsXG4gICAgICAgIGxlZnQ6IHJvb3Quc2Nyb2xsTGVmdFxuICAgICAgfSBdO1xuICAgICAgcmV0dXJuIHdpbmRvd1Njcm9sbC5jb25jYXQoZ2V0RWxtU2Nyb2xsUmVjdXJzaXZlKGRvY3VtZW50LmJvZHkpKTtcbiAgICB9XG4gICAgdmFyIGdldF9zY3JvbGxfc3RhdGVfZGVmYXVsdCA9IGdldFNjcm9sbFN0YXRlO1xuICAgIGZ1bmN0aW9uIF9nZXRTdGFuZGFyZHMoKSB7XG4gICAgICByZXR1cm4gX2Nsb25lKHN0YW5kYXJkc19kZWZhdWx0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3R5bGVTaGVldEZhY3RvcnkoZHluYW1pY0RvYykge1xuICAgICAgaWYgKCFkeW5hbWljRG9jKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXhlLnV0aWxzLmdldFN0eWxlU2hlZXRGYWN0b3J5IHNob3VsZCBiZSBpbnZva2VkIHdpdGggYW4gYXJndW1lbnQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBkYXRhID0gb3B0aW9ucy5kYXRhLCBfb3B0aW9ucyRpc0Nyb3NzT3JpZ2kgPSBvcHRpb25zLmlzQ3Jvc3NPcmlnaW4sIGlzQ3Jvc3NPcmlnaW4gPSBfb3B0aW9ucyRpc0Nyb3NzT3JpZ2kgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkaXNDcm9zc09yaWdpLCBzaGFkb3dJZCA9IG9wdGlvbnMuc2hhZG93SWQsIHJvb3QgPSBvcHRpb25zLnJvb3QsIHByaW9yaXR5ID0gb3B0aW9ucy5wcmlvcml0eSwgX29wdGlvbnMkaXNMaW5rID0gb3B0aW9ucy5pc0xpbmssIGlzTGluayA9IF9vcHRpb25zJGlzTGluayA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRpc0xpbms7XG4gICAgICAgIHZhciBzdHlsZSA9IGR5bmFtaWNEb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgaWYgKGlzTGluaykge1xuICAgICAgICAgIHZhciB0ZXh0ID0gZHluYW1pY0RvYy5jcmVhdGVUZXh0Tm9kZSgnQGltcG9ydCBcIicuY29uY2F0KGRhdGEuaHJlZiwgJ1wiJykpO1xuICAgICAgICAgIHN0eWxlLmFwcGVuZENoaWxkKHRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGR5bmFtaWNEb2MuY3JlYXRlVGV4dE5vZGUoZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGR5bmFtaWNEb2MuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hlZXQ6IHN0eWxlLnNoZWV0LFxuICAgICAgICAgIGlzQ3Jvc3NPcmlnaW46IGlzQ3Jvc3NPcmlnaW4sXG4gICAgICAgICAgc2hhZG93SWQ6IHNoYWRvd0lkLFxuICAgICAgICAgIHJvb3Q6IHJvb3QsXG4gICAgICAgICAgcHJpb3JpdHk6IHByaW9yaXR5XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgZ2V0X3N0eWxlc2hlZXRfZmFjdG9yeV9kZWZhdWx0ID0gZ2V0U3R5bGVTaGVldEZhY3Rvcnk7XG4gICAgdmFyIHN0eWxlU2hlZXQ7XG4gICAgZnVuY3Rpb24gaW5qZWN0U3R5bGUoc3R5bGUpIHtcbiAgICAgIGlmIChzdHlsZVNoZWV0ICYmIHN0eWxlU2hlZXQucGFyZW50Tm9kZSkge1xuICAgICAgICBpZiAoc3R5bGVTaGVldC5zdHlsZVNoZWV0ID09PSB2b2lkIDApIHtcbiAgICAgICAgICBzdHlsZVNoZWV0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0eWxlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVTaGVldC5zdHlsZVNoZWV0LmNzc1RleHQgKz0gc3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0eWxlU2hlZXQ7XG4gICAgICB9XG4gICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgc3R5bGVTaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZVNoZWV0LnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgaWYgKHN0eWxlU2hlZXQuc3R5bGVTaGVldCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHN0eWxlU2hlZXQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3R5bGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlU2hlZXQuc3R5bGVTaGVldC5jc3NUZXh0ID0gc3R5bGU7XG4gICAgICB9XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlU2hlZXQpO1xuICAgICAgcmV0dXJuIHN0eWxlU2hlZXQ7XG4gICAgfVxuICAgIHZhciBpbmplY3Rfc3R5bGVfZGVmYXVsdCA9IGluamVjdFN0eWxlO1xuICAgIGZ1bmN0aW9uIF9pc0FycmF5TGlrZShhcnIpIHtcbiAgICAgIHJldHVybiAhIWFyciAmJiBfdHlwZW9mKGFycikgPT09ICdvYmplY3QnICYmIHR5cGVvZiBhcnIubGVuZ3RoID09PSAnbnVtYmVyJyAmJiBhcnIgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZSA9PT0gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9vYmplY3RIYXNPd24ob2JqLCBwcm9wKSB7XG4gICAgICBpZiAoIW9iaiB8fCBfdHlwZW9mKG9iaikgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2lzQ29udGV4dFNwZWMoY29udGV4dFNwZWMpIHtcbiAgICAgIHJldHVybiBfaXNDb250ZXh0T2JqZWN0KGNvbnRleHRTcGVjKSB8fCBfaXNDb250ZXh0UHJvcChjb250ZXh0U3BlYyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9pc0NvbnRleHRPYmplY3QoY29udGV4dFNwZWMpIHtcbiAgICAgIHJldHVybiBbICdpbmNsdWRlJywgJ2V4Y2x1ZGUnIF0uc29tZShmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBfb2JqZWN0SGFzT3duKGNvbnRleHRTcGVjLCBwcm9wKSAmJiBfaXNDb250ZXh0UHJvcChjb250ZXh0U3BlY1twcm9wXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2lzQ29udGV4dFByb3AoY29udGV4dExpc3QpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgY29udGV4dExpc3QgPT09ICdzdHJpbmcnIHx8IGNvbnRleHRMaXN0IGluc3RhbmNlb2Ygd2luZG93Lk5vZGUgfHwgX2lzTGFiZWxsZWRGcmFtZXNTZWxlY3Rvcihjb250ZXh0TGlzdCkgfHwgX2lzTGFiZWxsZWRTaGFkb3dEb21TZWxlY3Rvcihjb250ZXh0TGlzdCkgfHwgX2lzQXJyYXlMaWtlKGNvbnRleHRMaXN0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2lzTGFiZWxsZWRGcmFtZXNTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIF9vYmplY3RIYXNPd24oc2VsZWN0b3IsICdmcm9tRnJhbWVzJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9pc0xhYmVsbGVkU2hhZG93RG9tU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBfb2JqZWN0SGFzT3duKHNlbGVjdG9yLCAnZnJvbVNoYWRvd0RvbScpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0hpZGRlbihlbCwgcmVjdXJzZWQpIHtcbiAgICAgIHZhciBub2RlID0gZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQoZWwpO1xuICAgICAgaWYgKGVsLm5vZGVUeXBlID09PSA5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMTEpIHtcbiAgICAgICAgZWwgPSBlbC5ob3N0O1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgJiYgbm9kZS5faXNIaWRkZW4gIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuX2lzSGlkZGVuO1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICAgICAgaWYgKCFzdHlsZSB8fCAhZWwucGFyZW50Tm9kZSB8fCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykgPT09ICdub25lJyB8fCAhcmVjdXJzZWQgJiYgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndmlzaWJpbGl0eScpID09PSAnaGlkZGVuJyB8fCBlbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJlbnQgPSBlbC5hc3NpZ25lZFNsb3QgPyBlbC5hc3NpZ25lZFNsb3QgOiBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIGhpZGRlbiA9IGlzSGlkZGVuKHBhcmVudCwgdHJ1ZSk7XG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBub2RlLl9pc0hpZGRlbiA9IGhpZGRlbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoaWRkZW47XG4gICAgfVxuICAgIHZhciBpc19oaWRkZW5fZGVmYXVsdCA9IGlzSGlkZGVuO1xuICAgIGZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQobm9kZSkge1xuICAgICAgdmFyIF9ub2RlJHByb3BzJG5vZGVOYW1lLCBfbm9kZSRwcm9wcztcbiAgICAgIHZhciBub2RlTmFtZTIgPSAoX25vZGUkcHJvcHMkbm9kZU5hbWUgPSAoX25vZGUkcHJvcHMgPSBub2RlLnByb3BzKSA9PT0gbnVsbCB8fCBfbm9kZSRwcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkcHJvcHMubm9kZU5hbWUpICE9PSBudWxsICYmIF9ub2RlJHByb3BzJG5vZGVOYW1lICE9PSB2b2lkIDAgPyBfbm9kZSRwcm9wcyRub2RlTmFtZSA6IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChub2RlLm5hbWVzcGFjZVVSSSA9PT0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gISFzdGFuZGFyZHNfZGVmYXVsdC5odG1sRWxtc1tub2RlTmFtZTJdO1xuICAgIH1cbiAgICB2YXIgaXNfaHRtbF9lbGVtZW50X2RlZmF1bHQgPSBpc0h0bWxFbGVtZW50O1xuICAgIGZ1bmN0aW9uIF9pc05vZGVJbkNvbnRleHQobm9kZSwgX3JlZjcxKSB7XG4gICAgICB2YXIgX3JlZjcxJGluY2x1ZGUgPSBfcmVmNzEuaW5jbHVkZSwgaW5jbHVkZSA9IF9yZWY3MSRpbmNsdWRlID09PSB2b2lkIDAgPyBbXSA6IF9yZWY3MSRpbmNsdWRlLCBfcmVmNzEkZXhjbHVkZSA9IF9yZWY3MS5leGNsdWRlLCBleGNsdWRlID0gX3JlZjcxJGV4Y2x1ZGUgPT09IHZvaWQgMCA/IFtdIDogX3JlZjcxJGV4Y2x1ZGU7XG4gICAgICB2YXIgZmlsdGVySW5jbHVkZSA9IGluY2x1ZGUuZmlsdGVyKGZ1bmN0aW9uKGNhbmRpZGF0ZSkge1xuICAgICAgICByZXR1cm4gX2NvbnRhaW5zKGNhbmRpZGF0ZSwgbm9kZSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChmaWx0ZXJJbmNsdWRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgZmlsdGVyRXhjbHVkZWQgPSBleGNsdWRlLmZpbHRlcihmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgICAgICAgcmV0dXJuIF9jb250YWlucyhjYW5kaWRhdGUsIG5vZGUpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZmlsdGVyRXhjbHVkZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRlZXBlc3RJbmNsdWRlID0gZ2V0RGVlcGVzdChmaWx0ZXJJbmNsdWRlKTtcbiAgICAgIHZhciBkZWVwZXN0RXhjbHVkZSA9IGdldERlZXBlc3QoZmlsdGVyRXhjbHVkZWQpO1xuICAgICAgcmV0dXJuIF9jb250YWlucyhkZWVwZXN0RXhjbHVkZSwgZGVlcGVzdEluY2x1ZGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXREZWVwZXN0KGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBkZWVwZXN0O1xuICAgICAgdmFyIF9pdGVyYXRvcjEyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY29sbGVjdGlvbiksIF9zdGVwMTI7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjEyLnMoKTsgIShfc3RlcDEyID0gX2l0ZXJhdG9yMTIubigpKS5kb25lOyApIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IF9zdGVwMTIudmFsdWU7XG4gICAgICAgICAgaWYgKCFkZWVwZXN0IHx8ICFfY29udGFpbnMobm9kZSwgZGVlcGVzdCkpIHtcbiAgICAgICAgICAgIGRlZXBlc3QgPSBub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjEyLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjEyLmYoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWVwZXN0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBfbWF0Y2hBbmNlc3RyeShhbmNlc3RyeUEsIGFuY2VzdHJ5Qikge1xuICAgICAgaWYgKGFuY2VzdHJ5QS5sZW5ndGggIT09IGFuY2VzdHJ5Qi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFuY2VzdHJ5QS5ldmVyeShmdW5jdGlvbihzZWxlY3RvckEsIGFuY2VzdG9ySW5kZXgpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yQiA9IGFuY2VzdHJ5QlthbmNlc3RvckluZGV4XTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNlbGVjdG9yQSkpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZWN0b3JBID09PSBzZWxlY3RvckI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdG9yQS5sZW5ndGggIT09IHNlbGVjdG9yQi5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yQS5ldmVyeShmdW5jdGlvbihzdHIsIHNlbGVjdG9ySW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZWN0b3JCW3NlbGVjdG9ySW5kZXhdID09PSBzdHI7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vZGVTb3J0ZXIobm9kZUEsIG5vZGVCKSB7XG4gICAgICBub2RlQSA9IG5vZGVBLmFjdHVhbE5vZGUgfHwgbm9kZUE7XG4gICAgICBub2RlQiA9IG5vZGVCLmFjdHVhbE5vZGUgfHwgbm9kZUI7XG4gICAgICBpZiAobm9kZUEgPT09IG5vZGVCKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGVBLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGVCKSAmIDQpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBub2RlX3NvcnRlcl9kZWZhdWx0ID0gbm9kZVNvcnRlcjtcbiAgICBmdW5jdGlvbiBfbm9kZUxvb2t1cChub2RlKSB7XG4gICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIGFic3RyYWN0X3ZpcnR1YWxfbm9kZV9kZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdk5vZGU6IG5vZGUsXG4gICAgICAgICAgZG9tTm9kZTogbm9kZS5hY3R1YWxOb2RlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2Tm9kZTogZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQobm9kZSksXG4gICAgICAgIGRvbU5vZGU6IG5vZGVcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlU2FtZU9yaWdpblN0eWxlc2hlZXQoc2hlZXQsIG9wdGlvbnMsIHByaW9yaXR5LCBpbXBvcnRlZFVybHMpIHtcbiAgICAgIHZhciBpc0Nyb3NzT3JpZ2luID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcbiAgICAgIHZhciBydWxlcyA9IEFycmF5LmZyb20oc2hlZXQuY3NzUnVsZXMpO1xuICAgICAgaWYgKCFydWxlcykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICB2YXIgY3NzSW1wb3J0UnVsZXMgPSBydWxlcy5maWx0ZXIoZnVuY3Rpb24ocikge1xuICAgICAgICByZXR1cm4gci50eXBlID09PSAzO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWNzc0ltcG9ydFJ1bGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBpc0Nyb3NzT3JpZ2luOiBpc0Nyb3NzT3JpZ2luLFxuICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eSxcbiAgICAgICAgICByb290OiBvcHRpb25zLnJvb3ROb2RlLFxuICAgICAgICAgIHNoYWRvd0lkOiBvcHRpb25zLnNoYWRvd0lkLFxuICAgICAgICAgIHNoZWV0OiBzaGVldFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHZhciBjc3NJbXBvcnRVcmxzTm90QWxyZWFkeUltcG9ydGVkID0gY3NzSW1wb3J0UnVsZXMuZmlsdGVyKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUuaHJlZjtcbiAgICAgIH0pLm1hcChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHJldHVybiBydWxlLmhyZWY7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIHJldHVybiAhaW1wb3J0ZWRVcmxzLmluY2x1ZGVzKHVybCk7XG4gICAgICB9KTtcbiAgICAgIHZhciBwcm9taXNlcyA9IGNzc0ltcG9ydFVybHNOb3RBbHJlYWR5SW1wb3J0ZWQubWFwKGZ1bmN0aW9uKGltcG9ydFVybCwgY3NzUnVsZUluZGV4KSB7XG4gICAgICAgIHZhciBuZXdQcmlvcml0eSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocHJpb3JpdHkpLCBbIGNzc1J1bGVJbmRleCBdKTtcbiAgICAgICAgdmFyIGlzQ3Jvc3NPcmlnaW5SZXF1ZXN0ID0gL15odHRwcz86XFwvXFwvfF5cXC9cXC8vaS50ZXN0KGltcG9ydFVybCk7XG4gICAgICAgIHJldHVybiBwYXJzZV9jcm9zc29yaWdpbl9zdHlsZXNoZWV0X2RlZmF1bHQoaW1wb3J0VXJsLCBvcHRpb25zLCBuZXdQcmlvcml0eSwgaW1wb3J0ZWRVcmxzLCBpc0Nyb3NzT3JpZ2luUmVxdWVzdCk7XG4gICAgICB9KTtcbiAgICAgIHZhciBub25JbXBvcnRDU1NSdWxlcyA9IHJ1bGVzLmZpbHRlcihmdW5jdGlvbihyKSB7XG4gICAgICAgIHJldHVybiByLnR5cGUgIT09IDM7XG4gICAgICB9KTtcbiAgICAgIGlmICghbm9uSW1wb3J0Q1NTUnVsZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICB9XG4gICAgICBwcm9taXNlcy5wdXNoKFByb21pc2UucmVzb2x2ZShvcHRpb25zLmNvbnZlcnREYXRhVG9TdHlsZXNoZWV0KHtcbiAgICAgICAgZGF0YTogbm9uSW1wb3J0Q1NTUnVsZXMubWFwKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICByZXR1cm4gcnVsZS5jc3NUZXh0O1xuICAgICAgICB9KS5qb2luKCksXG4gICAgICAgIGlzQ3Jvc3NPcmlnaW46IGlzQ3Jvc3NPcmlnaW4sXG4gICAgICAgIHByaW9yaXR5OiBwcmlvcml0eSxcbiAgICAgICAgcm9vdDogb3B0aW9ucy5yb290Tm9kZSxcbiAgICAgICAgc2hhZG93SWQ6IG9wdGlvbnMuc2hhZG93SWRcbiAgICAgIH0pKSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIH1cbiAgICB2YXIgcGFyc2Vfc2FtZW9yaWdpbl9zdHlsZXNoZWV0X2RlZmF1bHQgPSBwYXJzZVNhbWVPcmlnaW5TdHlsZXNoZWV0O1xuICAgIGZ1bmN0aW9uIHBhcnNlU3R5bGVzaGVldChzaGVldCwgb3B0aW9ucywgcHJpb3JpdHksIGltcG9ydGVkVXJscykge1xuICAgICAgdmFyIGlzQ3Jvc3NPcmlnaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuICAgICAgdmFyIGlzU2FtZU9yaWdpbiA9IGlzU2FtZU9yaWdpblN0eWxlc2hlZXQoc2hlZXQpO1xuICAgICAgaWYgKGlzU2FtZU9yaWdpbikge1xuICAgICAgICByZXR1cm4gcGFyc2Vfc2FtZW9yaWdpbl9zdHlsZXNoZWV0X2RlZmF1bHQoc2hlZXQsIG9wdGlvbnMsIHByaW9yaXR5LCBpbXBvcnRlZFVybHMsIGlzQ3Jvc3NPcmlnaW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnNlX2Nyb3Nzb3JpZ2luX3N0eWxlc2hlZXRfZGVmYXVsdChzaGVldC5ocmVmLCBvcHRpb25zLCBwcmlvcml0eSwgaW1wb3J0ZWRVcmxzLCB0cnVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNTYW1lT3JpZ2luU3R5bGVzaGVldChzaGVldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJ1bGVzID0gc2hlZXQuY3NzUnVsZXM7XG4gICAgICAgIGlmICghcnVsZXMgJiYgc2hlZXQuaHJlZikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgcGFyc2Vfc3R5bGVzaGVldF9kZWZhdWx0ID0gcGFyc2VTdHlsZXNoZWV0O1xuICAgIGZ1bmN0aW9uIHBhcnNlQ3Jvc3NPcmlnaW5TdHlsZXNoZWV0KHVybCwgb3B0aW9ucywgcHJpb3JpdHksIGltcG9ydGVkVXJscywgaXNDcm9zc09yaWdpbikge1xuICAgICAgaW1wb3J0ZWRVcmxzLnB1c2godXJsKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgdXJsKTtcbiAgICAgICAgcmVxdWVzdC50aW1lb3V0ID0gY29uc3RhbnRzX2RlZmF1bHQucHJlbG9hZC50aW1lb3V0O1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd0aW1lb3V0JywgcmVqZWN0KTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkZW5kJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQubG9hZGVkICYmIHJlcXVlc3QucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlamVjdChyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXF1ZXN0LnNlbmQoKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gb3B0aW9ucy5jb252ZXJ0RGF0YVRvU3R5bGVzaGVldCh7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBpc0Nyb3NzT3JpZ2luOiBpc0Nyb3NzT3JpZ2luLFxuICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eSxcbiAgICAgICAgICByb290OiBvcHRpb25zLnJvb3ROb2RlLFxuICAgICAgICAgIHNoYWRvd0lkOiBvcHRpb25zLnNoYWRvd0lkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyc2Vfc3R5bGVzaGVldF9kZWZhdWx0KHJlc3VsdC5zaGVldCwgb3B0aW9ucywgcHJpb3JpdHksIGltcG9ydGVkVXJscywgcmVzdWx0LmlzQ3Jvc3NPcmlnaW4pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBwYXJzZV9jcm9zc29yaWdpbl9zdHlsZXNoZWV0X2RlZmF1bHQgPSBwYXJzZUNyb3NzT3JpZ2luU3R5bGVzaGVldDtcbiAgICBmdW5jdGlvbiBwYXJzZVRhYmluZGV4KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCA9IHZhbHVlLnRyaW0oKS5tYXRjaCgvXihbLStdP1xcZCspLyk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihtYXRjaFsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHBhcnNlX3RhYmluZGV4X2RlZmF1bHQgPSBwYXJzZVRhYmluZGV4O1xuICAgIHZhciBwZXJmb3JtYW5jZVRpbWVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBub3coKSB7XG4gICAgICAgIGlmICh3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgICAgICAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG9yaWdpbmFsVGltZSA9IG51bGw7XG4gICAgICB2YXIgbGFzdFJlY29yZGVkVGltZSA9IG5vdygpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICAgIHRoaXMubWFyaygnbWFya19heGVfc3RhcnQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiBmdW5jdGlvbiBlbmQoKSB7XG4gICAgICAgICAgdGhpcy5tYXJrKCdtYXJrX2F4ZV9lbmQnKTtcbiAgICAgICAgICB0aGlzLm1lYXN1cmUoJ2F4ZScsICdtYXJrX2F4ZV9zdGFydCcsICdtYXJrX2F4ZV9lbmQnKTtcbiAgICAgICAgICB0aGlzLmxvZ01lYXN1cmVzKCdheGUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXVkaXRTdGFydDogZnVuY3Rpb24gYXVkaXRTdGFydCgpIHtcbiAgICAgICAgICB0aGlzLm1hcmsoJ21hcmtfYXVkaXRfc3RhcnQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXVkaXRFbmQ6IGZ1bmN0aW9uIGF1ZGl0RW5kKCkge1xuICAgICAgICAgIHRoaXMubWFyaygnbWFya19hdWRpdF9lbmQnKTtcbiAgICAgICAgICB0aGlzLm1lYXN1cmUoJ2F1ZGl0X3N0YXJ0X3RvX2VuZCcsICdtYXJrX2F1ZGl0X3N0YXJ0JywgJ21hcmtfYXVkaXRfZW5kJyk7XG4gICAgICAgICAgdGhpcy5sb2dNZWFzdXJlcygpO1xuICAgICAgICB9LFxuICAgICAgICBtYXJrOiBmdW5jdGlvbiBtYXJrKG1hcmtOYW1lKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2UubWFyayAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2UubWFyayhtYXJrTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZWFzdXJlOiBmdW5jdGlvbiBtZWFzdXJlKG1lYXN1cmVOYW1lLCBzdGFydE1hcmssIGVuZE1hcmspIHtcbiAgICAgICAgICBpZiAod2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5tZWFzdXJlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5tZWFzdXJlKG1lYXN1cmVOYW1lLCBzdGFydE1hcmssIGVuZE1hcmspO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9nTWVhc3VyZXM6IGZ1bmN0aW9uIGxvZ01lYXN1cmVzKG1lYXN1cmVOYW1lKSB7XG4gICAgICAgICAgZnVuY3Rpb24gbG9nTWVhc3VyZShyZXEpIHtcbiAgICAgICAgICAgIGxvZ19kZWZhdWx0KCdNZWFzdXJlICcgKyByZXEubmFtZSArICcgdG9vayAnICsgcmVxLmR1cmF0aW9uICsgJ21zJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdmFyIGF4ZVN0YXJ0ID0gd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoJ21hcmtfYXhlX3N0YXJ0JylbMF07XG4gICAgICAgICAgICB2YXIgbWVhc3VyZXMgPSB3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZSgnbWVhc3VyZScpLmZpbHRlcihmdW5jdGlvbihtZWFzdXJlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtZWFzdXJlLnN0YXJ0VGltZSA+PSBheGVTdGFydC5zdGFydFRpbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pMjggPSAwOyBfaTI4IDwgbWVhc3VyZXMubGVuZ3RoOyArK19pMjgpIHtcbiAgICAgICAgICAgICAgdmFyIHJlcSA9IG1lYXN1cmVzW19pMjhdO1xuICAgICAgICAgICAgICBpZiAocmVxLm5hbWUgPT09IG1lYXN1cmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgbG9nTWVhc3VyZShyZXEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsb2dNZWFzdXJlKHJlcSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aW1lRWxhcHNlZDogZnVuY3Rpb24gdGltZUVsYXBzZWQoKSB7XG4gICAgICAgICAgcmV0dXJuIG5vdygpIC0gbGFzdFJlY29yZGVkVGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICAgIGlmICghb3JpZ2luYWxUaW1lKSB7XG4gICAgICAgICAgICBvcmlnaW5hbFRpbWUgPSBub3coKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdFJlY29yZGVkVGltZSA9IG5vdygpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0oKTtcbiAgICB2YXIgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdCA9IHBlcmZvcm1hbmNlVGltZXI7XG4gICAgZnVuY3Rpb24gX3BvbGx5ZmlsbEVsZW1lbnRzRnJvbVBvaW50KCkge1xuICAgICAgaWYgKGRvY3VtZW50LmVsZW1lbnRzRnJvbVBvaW50KSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludDtcbiAgICAgIH1cbiAgICAgIGlmIChkb2N1bWVudC5tc0VsZW1lbnRzRnJvbVBvaW50KSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5tc0VsZW1lbnRzRnJvbVBvaW50O1xuICAgICAgfVxuICAgICAgdmFyIHVzZVBvaW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd4Jyk7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9ICdwb2ludGVyLWV2ZW50czphdXRvJztcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9PT0gJ2F1dG8nO1xuICAgICAgfSgpO1xuICAgICAgdmFyIGNzc1Byb3AgPSB1c2VQb2ludGVyID8gJ3BvaW50ZXItZXZlbnRzJyA6ICd2aXNpYmlsaXR5JztcbiAgICAgIHZhciBjc3NEaXNhYmxlVmFsID0gdXNlUG9pbnRlciA/ICdub25lJyA6ICdoaWRkZW4nO1xuICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIHN0eWxlLmlubmVySFRNTCA9IHVzZVBvaW50ZXIgPyAnKiB7IHBvaW50ZXItZXZlbnRzOiBhbGwgfScgOiAnKiB7IHZpc2liaWxpdHk6IHZpc2libGUgfSc7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICB2YXIgY3VycmVudCwgaSwgZDI7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgICAgICB2YXIgcHJldmlvdXNQb2ludGVyRXZlbnRzID0gW107XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpKSAmJiBlbGVtZW50cy5pbmRleE9mKGN1cnJlbnQpID09PSAtMSkge1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2goY3VycmVudCk7XG4gICAgICAgICAgcHJldmlvdXNQb2ludGVyRXZlbnRzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnQuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShjc3NQcm9wKSxcbiAgICAgICAgICAgIHByaW9yaXR5OiBjdXJyZW50LnN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoY3NzUHJvcClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjdXJyZW50LnN0eWxlLnNldFByb3BlcnR5KGNzc1Byb3AsIGNzc0Rpc2FibGVWYWwsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudHMuaW5kZXhPZihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIDwgZWxlbWVudHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGVsZW1lbnRzLnNwbGljZShlbGVtZW50cy5pbmRleE9mKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCksIDEpO1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2goZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSBwcmV2aW91c1BvaW50ZXJFdmVudHMubGVuZ3RoOyAhIShkMiA9IHByZXZpb3VzUG9pbnRlckV2ZW50c1stLWldKTsgKSB7XG4gICAgICAgICAgZWxlbWVudHNbaV0uc3R5bGUuc2V0UHJvcGVydHkoY3NzUHJvcCwgZDIudmFsdWUgPyBkMi52YWx1ZSA6ICcnLCBkMi5wcmlvcml0eSk7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRvY3VtZW50LmVsZW1lbnRzRnJvbVBvaW50ID0gX3BvbGx5ZmlsbEVsZW1lbnRzRnJvbVBvaW50KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVuaXF1ZUFycmF5KGFycjEsIGFycjIpIHtcbiAgICAgIHJldHVybiBhcnIxLmNvbmNhdChhcnIyKS5maWx0ZXIoZnVuY3Rpb24oZWxlbSwgcG9zLCBhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFyci5pbmRleE9mKGVsZW0pID09PSBwb3M7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIHVuaXF1ZV9hcnJheV9kZWZhdWx0ID0gdW5pcXVlQXJyYXk7XG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxWYXJpYWJsZXModk5vZGVzLCBhbnlMZXZlbCwgdGhpc0xldmVsLCBwYXJlbnRTaGFkb3dJZCwgcmVjeWNsZWRMb2NhbFZhcmlhYmxlKSB7XG4gICAgICB2YXIgcmV0VmFsID0gcmVjeWNsZWRMb2NhbFZhcmlhYmxlIHx8IHt9O1xuICAgICAgcmV0VmFsLnZOb2RlcyA9IHZOb2RlcztcbiAgICAgIHJldFZhbC52Tm9kZXNJbmRleCA9IDA7XG4gICAgICByZXRWYWwuYW55TGV2ZWwgPSBhbnlMZXZlbDtcbiAgICAgIHJldFZhbC50aGlzTGV2ZWwgPSB0aGlzTGV2ZWw7XG4gICAgICByZXRWYWwucGFyZW50U2hhZG93SWQgPSBwYXJlbnRTaGFkb3dJZDtcbiAgICAgIHJldHVybiByZXRWYWw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hdGNoRXhwcmVzc2lvbnMoZG9tVHJlZSwgZXhwcmVzc2lvbnMsIGZpbHRlcikge1xuICAgICAgdmFyIHJlY3ljbGVkTG9jYWxWYXJpYWJsZXMgPSBjYWNoZV9kZWZhdWx0LmdldCgncXNhLnJlY3ljbGVkTG9jYWxWYXJpYWJsZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfSk7XG4gICAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICAgIHZhciB2Tm9kZXMgPSBBcnJheS5pc0FycmF5KGRvbVRyZWUpID8gZG9tVHJlZSA6IFsgZG9tVHJlZSBdO1xuICAgICAgdmFyIGN1cnJlbnRMZXZlbCA9IGNyZWF0ZUxvY2FsVmFyaWFibGVzKHZOb2RlcywgZXhwcmVzc2lvbnMsIG51bGwsIGRvbVRyZWVbMF0uc2hhZG93SWQsIHJlY3ljbGVkTG9jYWxWYXJpYWJsZXMucG9wKCkpO1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKGN1cnJlbnRMZXZlbC52Tm9kZXNJbmRleCA8IGN1cnJlbnRMZXZlbC52Tm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBfY3VycmVudExldmVsJGFueUxldmUsIF9jdXJyZW50TGV2ZWwkdGhpc0xldjtcbiAgICAgICAgdmFyIHZOb2RlID0gY3VycmVudExldmVsLnZOb2Rlc1tjdXJyZW50TGV2ZWwudk5vZGVzSW5kZXgrK107XG4gICAgICAgIHZhciBjaGlsZE9ubHkgPSBudWxsO1xuICAgICAgICB2YXIgY2hpbGRBbnkgPSBudWxsO1xuICAgICAgICB2YXIgY29tYmluZWRMZW5ndGggPSAoKChfY3VycmVudExldmVsJGFueUxldmUgPSBjdXJyZW50TGV2ZWwuYW55TGV2ZWwpID09PSBudWxsIHx8IF9jdXJyZW50TGV2ZWwkYW55TGV2ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2N1cnJlbnRMZXZlbCRhbnlMZXZlLmxlbmd0aCkgfHwgMCkgKyAoKChfY3VycmVudExldmVsJHRoaXNMZXYgPSBjdXJyZW50TGV2ZWwudGhpc0xldmVsKSA9PT0gbnVsbCB8fCBfY3VycmVudExldmVsJHRoaXNMZXYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jdXJyZW50TGV2ZWwkdGhpc0xldi5sZW5ndGgpIHx8IDApO1xuICAgICAgICB2YXIgYWRkZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgX2kyOSA9IDA7IF9pMjkgPCBjb21iaW5lZExlbmd0aDsgX2kyOSsrKSB7XG4gICAgICAgICAgdmFyIF9jdXJyZW50TGV2ZWwkYW55TGV2ZTIsIF9jdXJyZW50TGV2ZWwkYW55TGV2ZTMsIF9jdXJyZW50TGV2ZWwkYW55TGV2ZTQ7XG4gICAgICAgICAgdmFyIGV4cCA9IF9pMjkgPCAoKChfY3VycmVudExldmVsJGFueUxldmUyID0gY3VycmVudExldmVsLmFueUxldmVsKSA9PT0gbnVsbCB8fCBfY3VycmVudExldmVsJGFueUxldmUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY3VycmVudExldmVsJGFueUxldmUyLmxlbmd0aCkgfHwgMCkgPyBjdXJyZW50TGV2ZWwuYW55TGV2ZWxbX2kyOV0gOiBjdXJyZW50TGV2ZWwudGhpc0xldmVsW19pMjkgLSAoKChfY3VycmVudExldmVsJGFueUxldmUzID0gY3VycmVudExldmVsLmFueUxldmVsKSA9PT0gbnVsbCB8fCBfY3VycmVudExldmVsJGFueUxldmUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY3VycmVudExldmVsJGFueUxldmUzLmxlbmd0aCkgfHwgMCldO1xuICAgICAgICAgIGlmICgoIWV4cFswXS5pZCB8fCB2Tm9kZS5zaGFkb3dJZCA9PT0gY3VycmVudExldmVsLnBhcmVudFNoYWRvd0lkKSAmJiBfbWF0Y2hlc0V4cHJlc3Npb24odk5vZGUsIGV4cFswXSkpIHtcbiAgICAgICAgICAgIGlmIChleHAubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIGlmICghYWRkZWQgJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHZOb2RlKSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2Tm9kZSk7XG4gICAgICAgICAgICAgICAgYWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgcmVzdCA9IGV4cC5zbGljZSgxKTtcbiAgICAgICAgICAgICAgaWYgKFsgJyAnLCAnPicgXS5pbmNsdWRlcyhyZXN0WzBdLmNvbWJpbmF0b3IpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXhlLnV0aWxzLnF1ZXJ5U2VsZWN0b3JBbGwgZG9lcyBub3Qgc3VwcG9ydCB0aGUgY29tYmluYXRvcjogJyArIGV4cFsxXS5jb21iaW5hdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocmVzdFswXS5jb21iaW5hdG9yID09PSAnPicpIHtcbiAgICAgICAgICAgICAgICAoY2hpbGRPbmx5ID0gY2hpbGRPbmx5IHx8IFtdKS5wdXNoKHJlc3QpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIChjaGlsZEFueSA9IGNoaWxkQW55IHx8IFtdKS5wdXNoKHJlc3QpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoIWV4cFswXS5pZCB8fCB2Tm9kZS5zaGFkb3dJZCA9PT0gY3VycmVudExldmVsLnBhcmVudFNoYWRvd0lkKSAmJiAoX2N1cnJlbnRMZXZlbCRhbnlMZXZlNCA9IGN1cnJlbnRMZXZlbC5hbnlMZXZlbCkgIT09IG51bGwgJiYgX2N1cnJlbnRMZXZlbCRhbnlMZXZlNCAhPT0gdm9pZCAwICYmIF9jdXJyZW50TGV2ZWwkYW55TGV2ZTQuaW5jbHVkZXMoZXhwKSkge1xuICAgICAgICAgICAgKGNoaWxkQW55ID0gY2hpbGRBbnkgfHwgW10pLnB1c2goZXhwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZOb2RlLmNoaWxkcmVuICYmIHZOb2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHN0YWNrLnB1c2goY3VycmVudExldmVsKTtcbiAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBjcmVhdGVMb2NhbFZhcmlhYmxlcyh2Tm9kZS5jaGlsZHJlbiwgY2hpbGRBbnksIGNoaWxkT25seSwgdk5vZGUuc2hhZG93SWQsIHJlY3ljbGVkTG9jYWxWYXJpYWJsZXMucG9wKCkpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChjdXJyZW50TGV2ZWwudk5vZGVzSW5kZXggPT09IGN1cnJlbnRMZXZlbC52Tm9kZXMubGVuZ3RoICYmIHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgIHJlY3ljbGVkTG9jYWxWYXJpYWJsZXMucHVzaChjdXJyZW50TGV2ZWwpO1xuICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yQWxsRmlsdGVyKGRvbVRyZWUsIHNlbGVjdG9yLCBmaWx0ZXIpIHtcbiAgICAgIGRvbVRyZWUgPSBBcnJheS5pc0FycmF5KGRvbVRyZWUpID8gZG9tVHJlZSA6IFsgZG9tVHJlZSBdO1xuICAgICAgdmFyIGV4cHJlc3Npb25zID0gX2NvbnZlcnRTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB2YXIgbm9kZXMgPSBnZXROb2Rlc01hdGNoaW5nRXhwcmVzc2lvbihkb21UcmVlLCBleHByZXNzaW9ucywgZmlsdGVyKTtcbiAgICAgIGlmIChub2Rlcykge1xuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hFeHByZXNzaW9ucyhkb21UcmVlLCBleHByZXNzaW9ucywgZmlsdGVyKTtcbiAgICB9XG4gICAgdmFyIHF1ZXJ5X3NlbGVjdG9yX2FsbF9maWx0ZXJfZGVmYXVsdCA9IHF1ZXJ5U2VsZWN0b3JBbGxGaWx0ZXI7XG4gICAgZnVuY3Rpb24gcHJlbG9hZENzc29tKF9yZWY3Mikge1xuICAgICAgdmFyIF9yZWY3MiR0cmVlUm9vdCA9IF9yZWY3Mi50cmVlUm9vdCwgdHJlZVJvb3QgPSBfcmVmNzIkdHJlZVJvb3QgPT09IHZvaWQgMCA/IGF4ZS5fdHJlZVswXSA6IF9yZWY3MiR0cmVlUm9vdDtcbiAgICAgIHZhciByb290Tm9kZXMgPSBnZXRBbGxSb290Tm9kZXNJblRyZWUodHJlZVJvb3QpO1xuICAgICAgaWYgKCFyb290Tm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciBkeW5hbWljRG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCdEeW5hbWljIGRvY3VtZW50IGZvciBsb2FkaW5nIGNzc29tJyk7XG4gICAgICB2YXIgY29udmVydERhdGFUb1N0eWxlc2hlZXQgPSBnZXRfc3R5bGVzaGVldF9mYWN0b3J5X2RlZmF1bHQoZHluYW1pY0RvYyk7XG4gICAgICByZXR1cm4gZ2V0Q3Nzb21Gb3JBbGxSb290Tm9kZXMocm9vdE5vZGVzLCBjb252ZXJ0RGF0YVRvU3R5bGVzaGVldCkudGhlbihmdW5jdGlvbihhc3NldHMpIHtcbiAgICAgICAgcmV0dXJuIGZsYXR0ZW5Bc3NldHMoYXNzZXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgcHJlbG9hZF9jc3NvbV9kZWZhdWx0ID0gcHJlbG9hZENzc29tO1xuICAgIGZ1bmN0aW9uIGdldEFsbFJvb3ROb2Rlc0luVHJlZSh0cmVlKSB7XG4gICAgICB2YXIgaWRzID0gW107XG4gICAgICB2YXIgcm9vdE5vZGVzID0gcXVlcnlfc2VsZWN0b3JfYWxsX2ZpbHRlcl9kZWZhdWx0KHRyZWUsICcqJywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBpZiAoaWRzLmluY2x1ZGVzKG5vZGUuc2hhZG93SWQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlkcy5wdXNoKG5vZGUuc2hhZG93SWQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pLm1hcChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hhZG93SWQ6IG5vZGUuc2hhZG93SWQsXG4gICAgICAgICAgcm9vdE5vZGU6IGdldF9yb290X25vZGVfZGVmYXVsdChub2RlLmFjdHVhbE5vZGUpXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB1bmlxdWVfYXJyYXlfZGVmYXVsdChyb290Tm9kZXMsIFtdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q3Nzb21Gb3JBbGxSb290Tm9kZXMocm9vdE5vZGVzLCBjb252ZXJ0RGF0YVRvU3R5bGVzaGVldCkge1xuICAgICAgdmFyIHByb21pc2VzID0gW107XG4gICAgICByb290Tm9kZXMuZm9yRWFjaChmdW5jdGlvbihfcmVmNzMsIGluZGV4KSB7XG4gICAgICAgIHZhciByb290Tm9kZSA9IF9yZWY3My5yb290Tm9kZSwgc2hhZG93SWQgPSBfcmVmNzMuc2hhZG93SWQ7XG4gICAgICAgIHZhciBzaGVldHMgPSBnZXRTdHlsZXNoZWV0c09mUm9vdE5vZGUocm9vdE5vZGUsIHNoYWRvd0lkLCBjb252ZXJ0RGF0YVRvU3R5bGVzaGVldCk7XG4gICAgICAgIGlmICghc2hlZXRzKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcm9vdEluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICB2YXIgcGFyc2VPcHRpb25zID0ge1xuICAgICAgICAgIHJvb3ROb2RlOiByb290Tm9kZSxcbiAgICAgICAgICBzaGFkb3dJZDogc2hhZG93SWQsXG4gICAgICAgICAgY29udmVydERhdGFUb1N0eWxlc2hlZXQ6IGNvbnZlcnREYXRhVG9TdHlsZXNoZWV0LFxuICAgICAgICAgIHJvb3RJbmRleDogcm9vdEluZGV4XG4gICAgICAgIH07XG4gICAgICAgIHZhciBpbXBvcnRlZFVybHMgPSBbXTtcbiAgICAgICAgdmFyIHAyID0gUHJvbWlzZS5hbGwoc2hlZXRzLm1hcChmdW5jdGlvbihzaGVldCwgc2hlZXRJbmRleCkge1xuICAgICAgICAgIHZhciBwcmlvcml0eSA9IFsgcm9vdEluZGV4LCBzaGVldEluZGV4IF07XG4gICAgICAgICAgcmV0dXJuIHBhcnNlX3N0eWxlc2hlZXRfZGVmYXVsdChzaGVldCwgcGFyc2VPcHRpb25zLCBwcmlvcml0eSwgaW1wb3J0ZWRVcmxzKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBwcm9taXNlcy5wdXNoKHAyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmxhdHRlbkFzc2V0cyhhc3NldHMpIHtcbiAgICAgIHJldHVybiBhc3NldHMucmVkdWNlKGZ1bmN0aW9uKGFjYywgdmFsKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBhY2MuY29uY2F0KGZsYXR0ZW5Bc3NldHModmFsKSkgOiBhY2MuY29uY2F0KHZhbCk7XG4gICAgICB9LCBbXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFN0eWxlc2hlZXRzT2ZSb290Tm9kZShyb290Tm9kZSwgc2hhZG93SWQsIGNvbnZlcnREYXRhVG9TdHlsZXNoZWV0KSB7XG4gICAgICB2YXIgc2hlZXRzO1xuICAgICAgaWYgKHJvb3ROb2RlLm5vZGVUeXBlID09PSAxMSAmJiBzaGFkb3dJZCkge1xuICAgICAgICBzaGVldHMgPSBnZXRTdHlsZXNoZWV0c0Zyb21Eb2N1bWVudEZyYWdtZW50KHJvb3ROb2RlLCBjb252ZXJ0RGF0YVRvU3R5bGVzaGVldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaGVldHMgPSBnZXRTdHlsZXNoZWV0c0Zyb21Eb2N1bWVudChyb290Tm9kZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyU3R5bGVzaGVldHNXaXRoU2FtZUhyZWYoc2hlZXRzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3R5bGVzaGVldHNGcm9tRG9jdW1lbnRGcmFnbWVudChyb290Tm9kZSwgY29udmVydERhdGFUb1N0eWxlc2hlZXQpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHJvb3ROb2RlLmNoaWxkcmVuKS5maWx0ZXIoZmlsZXJTdHlsZUFuZExpbmtBdHRyaWJ1dGVzSW5Eb2N1bWVudEZyYWdtZW50KS5yZWR1Y2UoZnVuY3Rpb24ob3V0LCBub2RlKSB7XG4gICAgICAgIHZhciBub2RlTmFtZTIgPSBub2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHZhciBkYXRhID0gbm9kZU5hbWUyID09PSAnU1RZTEUnID8gbm9kZS50ZXh0Q29udGVudCA6IG5vZGU7XG4gICAgICAgIHZhciBpc0xpbmsgPSBub2RlTmFtZTIgPT09ICdMSU5LJztcbiAgICAgICAgdmFyIHN0eWxlc2hlZXQgPSBjb252ZXJ0RGF0YVRvU3R5bGVzaGVldCh7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBpc0xpbms6IGlzTGluayxcbiAgICAgICAgICByb290OiByb290Tm9kZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHN0eWxlc2hlZXQuc2hlZXQpIHtcbiAgICAgICAgICBvdXQucHVzaChzdHlsZXNoZWV0LnNoZWV0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfSwgW10pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTdHlsZXNoZWV0c0Zyb21Eb2N1bWVudChyb290Tm9kZSkge1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20ocm9vdE5vZGUuc3R5bGVTaGVldHMpLmZpbHRlcihmdW5jdGlvbihzaGVldCkge1xuICAgICAgICBpZiAoIXNoZWV0Lm1lZGlhKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJNZWRpYUlzUHJpbnQoc2hlZXQubWVkaWEubWVkaWFUZXh0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaWxlclN0eWxlQW5kTGlua0F0dHJpYnV0ZXNJbkRvY3VtZW50RnJhZ21lbnQobm9kZSkge1xuICAgICAgdmFyIG5vZGVOYW1lMiA9IG5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgIHZhciBsaW5rSHJlZiA9IG5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICB2YXIgbGlua1JlbCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdyZWwnKTtcbiAgICAgIHZhciBpc0xpbmsgPSBub2RlTmFtZTIgPT09ICdMSU5LJyAmJiBsaW5rSHJlZiAmJiBsaW5rUmVsICYmIG5vZGUucmVsLnRvVXBwZXJDYXNlKCkuaW5jbHVkZXMoJ1NUWUxFU0hFRVQnKTtcbiAgICAgIHZhciBpc1N0eWxlID0gbm9kZU5hbWUyID09PSAnU1RZTEUnO1xuICAgICAgcmV0dXJuIGlzU3R5bGUgfHwgaXNMaW5rICYmIGZpbHRlck1lZGlhSXNQcmludChub2RlLm1lZGlhKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlsdGVyTWVkaWFJc1ByaW50KG1lZGlhKSB7XG4gICAgICBpZiAoIW1lZGlhKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICFtZWRpYS50b1VwcGVyQ2FzZSgpLmluY2x1ZGVzKCdQUklOVCcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaWx0ZXJTdHlsZXNoZWV0c1dpdGhTYW1lSHJlZihzaGVldHMpIHtcbiAgICAgIHZhciBocmVmcyA9IFtdO1xuICAgICAgcmV0dXJuIHNoZWV0cy5maWx0ZXIoZnVuY3Rpb24oc2hlZXQpIHtcbiAgICAgICAgaWYgKCFzaGVldC5ocmVmKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhyZWZzLmluY2x1ZGVzKHNoZWV0LmhyZWYpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGhyZWZzLnB1c2goc2hlZXQuaHJlZik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZWxvYWRNZWRpYShfcmVmNzQpIHtcbiAgICAgIHZhciBfcmVmNzQkdHJlZVJvb3QgPSBfcmVmNzQudHJlZVJvb3QsIHRyZWVSb290ID0gX3JlZjc0JHRyZWVSb290ID09PSB2b2lkIDAgPyBheGUuX3RyZWVbMF0gOiBfcmVmNzQkdHJlZVJvb3Q7XG4gICAgICB2YXIgbWVkaWFWaXJ0dWFsTm9kZXMgPSBxdWVyeV9zZWxlY3Rvcl9hbGxfZmlsdGVyX2RlZmF1bHQodHJlZVJvb3QsICd2aWRlb1thdXRvcGxheV0sIGF1ZGlvW2F1dG9wbGF5XScsIGZ1bmN0aW9uKF9yZWY3NSkge1xuICAgICAgICB2YXIgYWN0dWFsTm9kZSA9IF9yZWY3NS5hY3R1YWxOb2RlO1xuICAgICAgICBpZiAoYWN0dWFsTm9kZS5wcmVsb2FkID09PSAnbm9uZScgJiYgYWN0dWFsTm9kZS5yZWFkeVN0YXRlID09PSAwICYmIGFjdHVhbE5vZGUubmV0d29ya1N0YXRlICE9PSBhY3R1YWxOb2RlLk5FVFdPUktfTE9BRElORykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0dWFsTm9kZS5oYXNBdHRyaWJ1dGUoJ3BhdXNlZCcpIHx8IGFjdHVhbE5vZGUuaGFzQXR0cmlidXRlKCdtdXRlZCcpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3R1YWxOb2RlLmhhc0F0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICAgICAgICByZXR1cm4gISFhY3R1YWxOb2RlLmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNvdXJjZVdpdGhTcmMgPSBBcnJheS5mcm9tKGFjdHVhbE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpKS5maWx0ZXIoZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuICEhc291cmNlLmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc291cmNlV2l0aFNyYy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKG1lZGlhVmlydHVhbE5vZGVzLm1hcChmdW5jdGlvbihfcmVmNzYpIHtcbiAgICAgICAgdmFyIGFjdHVhbE5vZGUgPSBfcmVmNzYuYWN0dWFsTm9kZTtcbiAgICAgICAgcmV0dXJuIGlzTWVkaWFFbGVtZW50UmVhZHkoYWN0dWFsTm9kZSk7XG4gICAgICB9KSk7XG4gICAgfVxuICAgIHZhciBwcmVsb2FkX21lZGlhX2RlZmF1bHQgPSBwcmVsb2FkTWVkaWE7XG4gICAgZnVuY3Rpb24gaXNNZWRpYUVsZW1lbnRSZWFkeShlbG0pIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgIGlmIChlbG0ucmVhZHlTdGF0ZSA+IDApIHtcbiAgICAgICAgICByZXNvbHZlKGVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25NZWRpYVJlYWR5KCkge1xuICAgICAgICAgIGVsbS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsIG9uTWVkaWFSZWFkeSk7XG4gICAgICAgICAgcmVzb2x2ZShlbG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsIG9uTWVkaWFSZWFkeSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX3ByZWxvYWQob3B0aW9ucykge1xuICAgICAgdmFyIHByZWxvYWRGdW5jdGlvbnNNYXAgPSB7XG4gICAgICAgIGNzc29tOiBwcmVsb2FkX2Nzc29tX2RlZmF1bHQsXG4gICAgICAgIG1lZGlhOiBwcmVsb2FkX21lZGlhX2RlZmF1bHRcbiAgICAgIH07XG4gICAgICBpZiAoIV9zaG91bGRQcmVsb2FkKG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIF9nZXRQcmVsb2FkQ29uZmlnMiA9IF9nZXRQcmVsb2FkQ29uZmlnKG9wdGlvbnMpLCBhc3NldHMgPSBfZ2V0UHJlbG9hZENvbmZpZzIuYXNzZXRzLCB0aW1lb3V0ID0gX2dldFByZWxvYWRDb25maWcyLnRpbWVvdXQ7XG4gICAgICAgIHZhciBwcmVsb2FkVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ1ByZWxvYWQgYXNzZXRzIHRpbWVkIG91dC4nKSk7XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICBQcm9taXNlLmFsbChhc3NldHMubWFwKGZ1bmN0aW9uKGFzc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHByZWxvYWRGdW5jdGlvbnNNYXBbYXNzZXRdKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYXNzZXQsIHJlc3VsdHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSkudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgICAgICAgdmFyIHByZWxvYWRBc3NldHMgPSByZXN1bHRzLnJlZHVjZShmdW5jdGlvbihvdXQsIHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXQsIHJlc3VsdCk7XG4gICAgICAgICAgfSwge30pO1xuICAgICAgICAgIGNsZWFyVGltZW91dChwcmVsb2FkVGltZW91dCk7XG4gICAgICAgICAgcmVzb2x2ZShwcmVsb2FkQXNzZXRzKTtcbiAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24oZXJyMikge1xuICAgICAgICAgIGNsZWFyVGltZW91dChwcmVsb2FkVGltZW91dCk7XG4gICAgICAgICAgcmVqZWN0KGVycjIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ZhbGlkUHJlbG9hZE9iamVjdChwcmVsb2FkT2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZihwcmVsb2FkT2JqKSA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShwcmVsb2FkT2JqLmFzc2V0cyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9zaG91bGRQcmVsb2FkKG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnByZWxvYWQgPT09IHZvaWQgMCB8fCBvcHRpb25zLnByZWxvYWQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJlbG9hZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnByZWxvYWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNWYWxpZFByZWxvYWRPYmplY3Qob3B0aW9ucy5wcmVsb2FkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2dldFByZWxvYWRDb25maWcob3B0aW9ucykge1xuICAgICAgdmFyIF9jb25zdGFudHNfZGVmYXVsdCRwciA9IGNvbnN0YW50c19kZWZhdWx0LnByZWxvYWQsIGFzc2V0cyA9IF9jb25zdGFudHNfZGVmYXVsdCRwci5hc3NldHMsIHRpbWVvdXQgPSBfY29uc3RhbnRzX2RlZmF1bHQkcHIudGltZW91dDtcbiAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIGFzc2V0czogYXNzZXRzLFxuICAgICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgICB9O1xuICAgICAgaWYgKCFvcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcmVsb2FkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH1cbiAgICAgIHZhciBhcmVSZXF1ZXN0ZWRBc3NldHNWYWxpZCA9IG9wdGlvbnMucHJlbG9hZC5hc3NldHMuZXZlcnkoZnVuY3Rpb24oYTIpIHtcbiAgICAgICAgcmV0dXJuIGFzc2V0cy5pbmNsdWRlcyhhMi50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFhcmVSZXF1ZXN0ZWRBc3NldHNWYWxpZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVlc3RlZCBhc3NldHMsIG5vdCBzdXBwb3J0ZWQuIFN1cHBvcnRlZCBhc3NldHMgYXJlOiAnLmNvbmNhdChhc3NldHMuam9pbignLCAnKSwgJy4nKSk7XG4gICAgICB9XG4gICAgICBjb25maWcuYXNzZXRzID0gdW5pcXVlX2FycmF5X2RlZmF1bHQob3B0aW9ucy5wcmVsb2FkLmFzc2V0cy5tYXAoZnVuY3Rpb24oYTIpIHtcbiAgICAgICAgcmV0dXJuIGEyLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9KSwgW10pO1xuICAgICAgaWYgKG9wdGlvbnMucHJlbG9hZC50aW1lb3V0ICYmIHR5cGVvZiBvcHRpb25zLnByZWxvYWQudGltZW91dCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKG9wdGlvbnMucHJlbG9hZC50aW1lb3V0KSkge1xuICAgICAgICBjb25maWcudGltZW91dCA9IG9wdGlvbnMucHJlbG9hZC50aW1lb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG4gICAgZnVuY3Rpb24gX3B1Ymxpc2hNZXRhRGF0YShydWxlUmVzdWx0KSB7XG4gICAgICB2YXIgY2hlY2tzRGF0YSA9IGF4ZS5fYXVkaXQuZGF0YS5jaGVja3MgfHwge307XG4gICAgICB2YXIgcnVsZXNEYXRhID0gYXhlLl9hdWRpdC5kYXRhLnJ1bGVzIHx8IHt9O1xuICAgICAgdmFyIHJ1bGUgPSBmaW5kX2J5X2RlZmF1bHQoYXhlLl9hdWRpdC5ydWxlcywgJ2lkJywgcnVsZVJlc3VsdC5pZCkgfHwge307XG4gICAgICBydWxlUmVzdWx0LnRhZ3MgPSBfY2xvbmUocnVsZS50YWdzIHx8IFtdKTtcbiAgICAgIHZhciBzaG91bGRCZVRydWUgPSBleHRlbmRlcihjaGVja3NEYXRhLCB0cnVlLCBydWxlKTtcbiAgICAgIHZhciBzaG91bGRCZUZhbHNlID0gZXh0ZW5kZXIoY2hlY2tzRGF0YSwgZmFsc2UsIHJ1bGUpO1xuICAgICAgcnVsZVJlc3VsdC5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGRldGFpbCkge1xuICAgICAgICBkZXRhaWwuYW55LmZvckVhY2goc2hvdWxkQmVUcnVlKTtcbiAgICAgICAgZGV0YWlsLmFsbC5mb3JFYWNoKHNob3VsZEJlVHJ1ZSk7XG4gICAgICAgIGRldGFpbC5ub25lLmZvckVhY2goc2hvdWxkQmVGYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIGV4dGVuZF9tZXRhX2RhdGFfZGVmYXVsdChydWxlUmVzdWx0LCBfY2xvbmUocnVsZXNEYXRhW3J1bGVSZXN1bHQuaWRdIHx8IHt9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEluY29tcGxldGVSZWFzb24oY2hlY2tEYXRhLCBtZXNzYWdlcykge1xuICAgICAgZnVuY3Rpb24gZ2V0RGVmYXVsdE1zZyhtZXNzYWdlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmluY29tcGxldGUgJiYgbWVzc2FnZS5pbmNvbXBsZXRlWydkZWZhdWx0J10pIHtcbiAgICAgICAgICByZXR1cm4gbWVzc2FnZS5pbmNvbXBsZXRlWydkZWZhdWx0J107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGluY29tcGxldGVGYWxsYmFja01lc3NhZ2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNoZWNrRGF0YSAmJiBjaGVja0RhdGEubWlzc2luZ0RhdGEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgbXNnID0gbWVzc2FnZXMuaW5jb21wbGV0ZVtjaGVja0RhdGEubWlzc2luZ0RhdGFbMF0ucmVhc29uXTtcbiAgICAgICAgICBpZiAoIW1zZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtc2c7XG4gICAgICAgIH0gY2F0Y2ggKF91bnVzZWQ1KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjaGVja0RhdGEubWlzc2luZ0RhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZXMuaW5jb21wbGV0ZVtjaGVja0RhdGEubWlzc2luZ0RhdGFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdE1zZyhtZXNzYWdlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrRGF0YSAmJiBjaGVja0RhdGEubWVzc2FnZUtleSkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZXMuaW5jb21wbGV0ZVtjaGVja0RhdGEubWVzc2FnZUtleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdE1zZyhtZXNzYWdlcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4dGVuZGVyKGNoZWNrc0RhdGEsIHNob3VsZEJlVHJ1ZSwgcnVsZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNoZWNrKSB7XG4gICAgICAgIHZhciBzb3VyY2VEYXRhID0gY2hlY2tzRGF0YVtjaGVjay5pZF0gfHwge307XG4gICAgICAgIHZhciBtZXNzYWdlcyA9IHNvdXJjZURhdGEubWVzc2FnZXMgfHwge307XG4gICAgICAgIHZhciBkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgc291cmNlRGF0YSk7XG4gICAgICAgIGRlbGV0ZSBkYXRhLm1lc3NhZ2VzO1xuICAgICAgICBpZiAoIXJ1bGUucmV2aWV3T25GYWlsICYmIGNoZWNrLnJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgaWYgKF90eXBlb2YobWVzc2FnZXMuaW5jb21wbGV0ZSkgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGNoZWNrLmRhdGEpKSB7XG4gICAgICAgICAgICBkYXRhLm1lc3NhZ2UgPSBnZXRJbmNvbXBsZXRlUmVhc29uKGNoZWNrLmRhdGEsIG1lc3NhZ2VzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFkYXRhLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGRhdGEubWVzc2FnZSA9IG1lc3NhZ2VzLmluY29tcGxldGU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEubWVzc2FnZSA9IGNoZWNrLnJlc3VsdCA9PT0gc2hvdWxkQmVUcnVlID8gbWVzc2FnZXMucGFzcyA6IG1lc3NhZ2VzLmZhaWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLm1lc3NhZ2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkYXRhLm1lc3NhZ2UgPSBwcm9jZXNzX21lc3NhZ2VfZGVmYXVsdChkYXRhLm1lc3NhZ2UsIGNoZWNrLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGV4dGVuZF9tZXRhX2RhdGFfZGVmYXVsdChjaGVjaywgZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yQWxsKGRvbVRyZWUsIHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gcXVlcnlfc2VsZWN0b3JfYWxsX2ZpbHRlcl9kZWZhdWx0KGRvbVRyZWUsIHNlbGVjdG9yKTtcbiAgICB9XG4gICAgdmFyIHF1ZXJ5X3NlbGVjdG9yX2FsbF9kZWZhdWx0ID0gcXVlcnlTZWxlY3RvckFsbDtcbiAgICBmdW5jdGlvbiBtYXRjaFRhZ3MocnVsZSwgcnVuT25seSkge1xuICAgICAgdmFyIGluY2x1ZGUsIGV4Y2x1ZGU7XG4gICAgICB2YXIgZGVmYXVsdEV4Y2x1ZGUgPSBheGUuX2F1ZGl0ICYmIGF4ZS5fYXVkaXQudGFnRXhjbHVkZSA/IGF4ZS5fYXVkaXQudGFnRXhjbHVkZSA6IFtdO1xuICAgICAgaWYgKHJ1bk9ubHkuaGFzT3duUHJvcGVydHkoJ2luY2x1ZGUnKSB8fCBydW5Pbmx5Lmhhc093blByb3BlcnR5KCdleGNsdWRlJykpIHtcbiAgICAgICAgaW5jbHVkZSA9IHJ1bk9ubHkuaW5jbHVkZSB8fCBbXTtcbiAgICAgICAgaW5jbHVkZSA9IEFycmF5LmlzQXJyYXkoaW5jbHVkZSkgPyBpbmNsdWRlIDogWyBpbmNsdWRlIF07XG4gICAgICAgIGV4Y2x1ZGUgPSBydW5Pbmx5LmV4Y2x1ZGUgfHwgW107XG4gICAgICAgIGV4Y2x1ZGUgPSBBcnJheS5pc0FycmF5KGV4Y2x1ZGUpID8gZXhjbHVkZSA6IFsgZXhjbHVkZSBdO1xuICAgICAgICBleGNsdWRlID0gZXhjbHVkZS5jb25jYXQoZGVmYXVsdEV4Y2x1ZGUuZmlsdGVyKGZ1bmN0aW9uKHRhZykge1xuICAgICAgICAgIHJldHVybiBpbmNsdWRlLmluZGV4T2YodGFnKSA9PT0gLTE7XG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluY2x1ZGUgPSBBcnJheS5pc0FycmF5KHJ1bk9ubHkpID8gcnVuT25seSA6IFsgcnVuT25seSBdO1xuICAgICAgICBleGNsdWRlID0gZGVmYXVsdEV4Y2x1ZGUuZmlsdGVyKGZ1bmN0aW9uKHRhZykge1xuICAgICAgICAgIHJldHVybiBpbmNsdWRlLmluZGV4T2YodGFnKSA9PT0gLTE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoaW5nID0gaW5jbHVkZS5zb21lKGZ1bmN0aW9uKHRhZykge1xuICAgICAgICByZXR1cm4gcnVsZS50YWdzLmluZGV4T2YodGFnKSAhPT0gLTE7XG4gICAgICB9KTtcbiAgICAgIGlmIChtYXRjaGluZyB8fCBpbmNsdWRlLmxlbmd0aCA9PT0gMCAmJiBydWxlLmVuYWJsZWQgIT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBleGNsdWRlLmV2ZXJ5KGZ1bmN0aW9uKHRhZykge1xuICAgICAgICAgIHJldHVybiBydWxlLnRhZ3MuaW5kZXhPZih0YWcpID09PSAtMTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJ1bGVTaG91bGRSdW4ocnVsZSwgY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgdmFyIHJ1bk9ubHkgPSBvcHRpb25zLnJ1bk9ubHkgfHwge307XG4gICAgICB2YXIgcnVsZU9wdGlvbnMgPSAob3B0aW9ucy5ydWxlcyB8fCB7fSlbcnVsZS5pZF07XG4gICAgICBpZiAocnVsZS5wYWdlTGV2ZWwgJiYgIWNvbnRleHQucGFnZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHJ1bk9ubHkudHlwZSA9PT0gJ3J1bGUnKSB7XG4gICAgICAgIHJldHVybiBydW5Pbmx5LnZhbHVlcy5pbmRleE9mKHJ1bGUuaWQpICE9PSAtMTtcbiAgICAgIH0gZWxzZSBpZiAocnVsZU9wdGlvbnMgJiYgdHlwZW9mIHJ1bGVPcHRpb25zLmVuYWJsZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gcnVsZU9wdGlvbnMuZW5hYmxlZDtcbiAgICAgIH0gZWxzZSBpZiAocnVuT25seS50eXBlID09PSAndGFnJyAmJiBydW5Pbmx5LnZhbHVlcykge1xuICAgICAgICByZXR1cm4gbWF0Y2hUYWdzKHJ1bGUsIHJ1bk9ubHkudmFsdWVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXRjaFRhZ3MocnVsZSwgW10pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgcnVsZV9zaG91bGRfcnVuX2RlZmF1bHQgPSBydWxlU2hvdWxkUnVuO1xuICAgIGZ1bmN0aW9uIF9maWx0ZXJIdG1sQXR0cnMoZWxlbWVudCwgZmlsdGVyQXR0cnMpIHtcbiAgICAgIGlmICghZmlsdGVyQXR0cnMpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG4gICAgICB2YXIgbm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzMiA9IGdldF9ub2RlX2F0dHJpYnV0ZXNfZGVmYXVsdChub2RlKTtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHZhciBvdXRlckhUTUwgPSBub2RlLm91dGVySFRNTDtcbiAgICAgICAgbm9kZSA9IGNhY2hlX2RlZmF1bHQuZ2V0KG91dGVySFRNTCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHNldE5vZGVBdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMyLCBlbGVtZW50LCBmaWx0ZXJBdHRycyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZSA9IHNldE5vZGVBdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMyLCBlbGVtZW50LCBmaWx0ZXJBdHRycyk7XG4gICAgICB9XG4gICAgICBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKF9maWx0ZXJIdG1sQXR0cnMoY2hpbGQsIGZpbHRlckF0dHJzKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXROb2RlQXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzMiwgZWxlbWVudCwgZmlsdGVyQXR0cnMpIHtcbiAgICAgIGlmICghYXR0cmlidXRlczIpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlLm5vZGVOYW1lKTtcbiAgICAgIEFycmF5LmZyb20oYXR0cmlidXRlczIpLmZvckVhY2goZnVuY3Rpb24oYXR0cikge1xuICAgICAgICBpZiAoIWF0dHJpYnV0ZU1hdGNoZXMoZWxlbWVudCwgYXR0ci5uYW1lLCBmaWx0ZXJBdHRycykpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyLm5hbWUsIGF0dHIudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyaWJ1dGVNYXRjaGVzKG5vZGUsIGF0dHJOYW1lLCBmaWx0ZXJBdHRycykge1xuICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJBdHRyc1thdHRyTmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWx0ZXJBdHRyc1thdHRyTmFtZV0gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudF9tYXRjaGVzX2RlZmF1bHQobm9kZSwgZmlsdGVyQXR0cnNbYXR0ck5hbWVdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX3NlbGVjdChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIGNhbmRpZGF0ZTtcbiAgICAgIGlmIChheGUuX3NlbGVjdENhY2hlKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBsID0gYXhlLl9zZWxlY3RDYWNoZS5sZW5ndGg7IGogPCBsOyBqKyspIHtcbiAgICAgICAgICB2YXIgaXRlbSA9IGF4ZS5fc2VsZWN0Q2FjaGVbal07XG4gICAgICAgICAgaWYgKGl0ZW0uc2VsZWN0b3IgPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5yZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgb3V0ZXJJbmNsdWRlcyA9IGdldE91dGVySW5jbHVkZXMoY29udGV4dC5pbmNsdWRlKTtcbiAgICAgIHZhciBpc0luQ29udGV4dCA9IGdldENvbnRleHRGaWx0ZXIoY29udGV4dCk7XG4gICAgICBmb3IgKHZhciBfaTMwID0gMDsgX2kzMCA8IG91dGVySW5jbHVkZXMubGVuZ3RoOyBfaTMwKyspIHtcbiAgICAgICAgY2FuZGlkYXRlID0gb3V0ZXJJbmNsdWRlc1tfaTMwXTtcbiAgICAgICAgdmFyIG5vZGVzID0gcXVlcnlfc2VsZWN0b3JfYWxsX2ZpbHRlcl9kZWZhdWx0KGNhbmRpZGF0ZSwgc2VsZWN0b3IsIGlzSW5Db250ZXh0KTtcbiAgICAgICAgcmVzdWx0ID0gbWVyZ2VBcnJheVVuaXF1ZXMocmVzdWx0LCBub2Rlcyk7XG4gICAgICB9XG4gICAgICBpZiAoYXhlLl9zZWxlY3RDYWNoZSkge1xuICAgICAgICBheGUuX3NlbGVjdENhY2hlLnB1c2goe1xuICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldE91dGVySW5jbHVkZXMoaW5jbHVkZXMpIHtcbiAgICAgIHJldHVybiBpbmNsdWRlcy5yZWR1Y2UoZnVuY3Rpb24ocmVzLCBlbCkge1xuICAgICAgICBpZiAoIXJlcy5sZW5ndGggfHwgIV9jb250YWlucyhyZXNbcmVzLmxlbmd0aCAtIDFdLCBlbCkpIHtcbiAgICAgICAgICByZXMucHVzaChlbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0sIFtdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q29udGV4dEZpbHRlcihjb250ZXh0KSB7XG4gICAgICBpZiAoIWNvbnRleHQuZXhjbHVkZSB8fCBjb250ZXh0LmV4Y2x1ZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIF9pc05vZGVJbkNvbnRleHQobm9kZSwgY29udGV4dCk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtZXJnZUFycmF5VW5pcXVlcyhhcnIxLCBhcnIyKSB7XG4gICAgICBpZiAoYXJyMS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGFycjI7XG4gICAgICB9XG4gICAgICBpZiAoYXJyMS5sZW5ndGggPCBhcnIyLmxlbmd0aCkge1xuICAgICAgICB2YXIgdGVtcCA9IGFycjE7XG4gICAgICAgIGFycjEgPSBhcnIyO1xuICAgICAgICBhcnIyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIF9pMzEgPSAwLCBsID0gYXJyMi5sZW5ndGg7IF9pMzEgPCBsOyBfaTMxKyspIHtcbiAgICAgICAgaWYgKCFhcnIxLmluY2x1ZGVzKGFycjJbX2kzMV0pKSB7XG4gICAgICAgICAgYXJyMS5wdXNoKGFycjJbX2kzMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0U2Nyb2xsKGVsbSwgdG9wLCBsZWZ0KSB7XG4gICAgICBpZiAoZWxtID09PSB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIGVsbS5zY3JvbGwobGVmdCwgdG9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsbS5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICAgIGVsbS5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0U2Nyb2xsU3RhdGUoc2Nyb2xsU3RhdGUpIHtcbiAgICAgIHNjcm9sbFN0YXRlLmZvckVhY2goZnVuY3Rpb24oX3JlZjc4KSB7XG4gICAgICAgIHZhciBlbG0gPSBfcmVmNzguZWxtLCB0b3AgPSBfcmVmNzgudG9wLCBsZWZ0ID0gX3JlZjc4LmxlZnQ7XG4gICAgICAgIHJldHVybiBzZXRTY3JvbGwoZWxtLCB0b3AsIGxlZnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBzZXRfc2Nyb2xsX3N0YXRlX2RlZmF1bHQgPSBzZXRTY3JvbGxTdGF0ZTtcbiAgICBmdW5jdGlvbiBfc2hhZG93U2VsZWN0KHNlbGVjdG9ycykge1xuICAgICAgdmFyIHNlbGVjdG9yQXJyID0gQXJyYXkuaXNBcnJheShzZWxlY3RvcnMpID8gX3RvQ29uc3VtYWJsZUFycmF5KHNlbGVjdG9ycykgOiBbIHNlbGVjdG9ycyBdO1xuICAgICAgcmV0dXJuIHNlbGVjdFJlY3Vyc2l2ZShzZWxlY3RvckFyciwgZG9jdW1lbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZWxlY3RSZWN1cnNpdmUoc2VsZWN0b3JzLCBkb2MpIHtcbiAgICAgIHZhciBzZWxlY3RvclN0ciA9IHNlbGVjdG9ycy5zaGlmdCgpO1xuICAgICAgdmFyIGVsbSA9IHNlbGVjdG9yU3RyID8gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JTdHIpIDogbnVsbDtcbiAgICAgIGlmIChzZWxlY3RvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbG07XG4gICAgICB9XG4gICAgICBpZiAoIShlbG0gIT09IG51bGwgJiYgZWxtICE9PSB2b2lkIDAgJiYgZWxtLnNoYWRvd1Jvb3QpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGVjdFJlY3Vyc2l2ZShzZWxlY3RvcnMsIGVsbS5zaGFkb3dSb290KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX3NoYWRvd1NlbGVjdEFsbChzZWxlY3RvcnMpIHtcbiAgICAgIHZhciBkb2MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRvY3VtZW50O1xuICAgICAgdmFyIHNlbGVjdG9yQXJyID0gQXJyYXkuaXNBcnJheShzZWxlY3RvcnMpID8gX3RvQ29uc3VtYWJsZUFycmF5KHNlbGVjdG9ycykgOiBbIHNlbGVjdG9ycyBdO1xuICAgICAgaWYgKHNlbGVjdG9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGVjdEFsbFJlY3Vyc2l2ZShzZWxlY3RvckFyciwgZG9jKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2VsZWN0QWxsUmVjdXJzaXZlKF9yZWY3OSwgZG9jKSB7XG4gICAgICB2YXIgX3JlZjgwID0gX3RvQXJyYXkoX3JlZjc5KSwgc2VsZWN0b3JTdHIgPSBfcmVmODBbMF0sIHJlc3RTZWxlY3RvciA9IF9yZWY4MC5zbGljZSgxKTtcbiAgICAgIHZhciBlbG1zID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JTdHIpO1xuICAgICAgaWYgKHJlc3RTZWxlY3Rvci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oZWxtcyk7XG4gICAgICB9XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBbXTtcbiAgICAgIHZhciBfaXRlcmF0b3IxMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGVsbXMpLCBfc3RlcDEzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IxMy5zKCk7ICEoX3N0ZXAxMyA9IF9pdGVyYXRvcjEzLm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgdmFyIGVsbSA9IF9zdGVwMTMudmFsdWU7XG4gICAgICAgICAgaWYgKGVsbSAhPT0gbnVsbCAmJiBlbG0gIT09IHZvaWQgMCAmJiBlbG0uc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgc2VsZWN0ZWQucHVzaC5hcHBseShzZWxlY3RlZCwgX3RvQ29uc3VtYWJsZUFycmF5KHNlbGVjdEFsbFJlY3Vyc2l2ZShyZXN0U2VsZWN0b3IsIGVsbS5zaGFkb3dSb290KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjEzLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjEzLmYoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRJbnB1dFR5cGVzKCkge1xuICAgICAgcmV0dXJuIFsgJ2hpZGRlbicsICd0ZXh0JywgJ3NlYXJjaCcsICd0ZWwnLCAndXJsJywgJ2VtYWlsJywgJ3Bhc3N3b3JkJywgJ2RhdGUnLCAnbW9udGgnLCAnd2VlaycsICd0aW1lJywgJ2RhdGV0aW1lLWxvY2FsJywgJ251bWJlcicsICdyYW5nZScsICdjb2xvcicsICdjaGVja2JveCcsICdyYWRpbycsICdmaWxlJywgJ3N1Ym1pdCcsICdpbWFnZScsICdyZXNldCcsICdidXR0b24nIF07XG4gICAgfVxuICAgIHZhciB2YWxpZF9pbnB1dF90eXBlX2RlZmF1bHQgPSB2YWxpZElucHV0VHlwZXM7XG4gICAgdmFyIGxhbmdzID0gWyAsIFsgLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgLCAsICwgLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAsIDEsICwgMSwgLCAxLCAxIF0sIFsgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgLCAsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAsICwgLCAsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsICwgLCAsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgMSwgLCAxLCAsICwgLCAsIDEsICwgMSwgLCAsICwgMSwgMSwgLCAxLCAsICwgMSBdLCBbIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsICwgMSwgMSwgLCAsIDEsICwgLCAsICwgMSwgMSwgMSwgLCAxLCAsIDEsICwgMSwgLCAsICwgLCAsIDEgXSwgWyAxLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgMSwgLCAxLCAsIDEsICwgLCAsICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsICwgLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgLCAxLCAsICwgMSwgLCAxLCAsICwgLCAxLCAxLCAxLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAsICwgMSwgLCAsIDEsIDEsIDEsICwgLCAsICwgMSwgLCAsICwgLCAsIDEgXSBdLCBbICwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsICwgMSwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0gXSwgWyAsIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEgXSwgWyAsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgLCAsIDEsIDEsICwgLCAsICwgLCAxLCAxIF0sIFsgMSwgMSwgMSwgLCAsICwgLCAxLCAsICwgLCAxLCAxLCAsIDEsICwgLCAsICwgLCAxLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAxLCAsICwgMSwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgMSwgLCAsICwgMSwgLCAsICwgMSBdLCBbIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgLCAsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAsICwgMSwgLCAxLCAxLCAsIDEsICwgMSwgLCAsICwgLCAxLCAsIDEgXSwgWyAsIDEsICwgLCAsIDEsICwgLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsICwgMSwgLCAsIDEgXSwgWyAsIDEsIDEsICwgLCAsICwgLCAxLCAsICwgLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSBdLCBbICwgMSwgLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsICwgLCAsIDEsIDEsICwgMSwgLCAxIF0sIFsgLCAxLCAsIDEsICwgMSwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsICwgLCAsIDEsIDEsIDEsICwgMSwgMSwgLCAsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsICwgLCAsICwgMSwgMSwgMSwgLCAsIDEsICwgMSwgLCAsIDEsIDEgXSwgWyAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxIF0sIFsgLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsIDEsIDEsICwgLCAsICwgMSBdLCBbIDEsIDEsIDEsIDEsICwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsIDEsICwgMSwgMSwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sICwgWyAxLCAxLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsIDEsICwgLCAxLCAsICwgMSwgMSwgLCAsICwgLCAxIF0gXSwgWyAsIFsgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsIDEgXSwgWyAsICwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgLCAsIDEsIDEsICwgMSwgLCAxLCAxLCAsICwgLCAxLCAxLCAsICwgMSwgMSwgLCAsICwgMSBdLCBbIDEsICwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAsIDEsICwgLCAsIDEgXSwgLCBbICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgLCAsIDEsIDEsIDEsIDEsICwgMSwgMSwgLCAxIF0sIFsgLCAxLCAsICwgMSwgLCAsIDEsICwgMSwgLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsICwgLCAxLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsICwgLCAsIDEsIDEsICwgLCAsICwgLCAxLCAxLCAsICwgLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsIDEsICwgLCAsIDEsICwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAsICwgMSwgMSwgLCAsIDEsICwgMSwgMSwgMSwgMSwgLCAxIF0sIFsgLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCAsIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgLCAxLCAsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEgXSwgWyAsICwgMSwgLCAsIDEsICwgLCAxLCAxLCAsICwgMSwgLCAxLCAxLCAsIDEgXSwgWyAsIDEsIDEsICwgMSwgLCAsICwgMSwgMSwgLCAxLCAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAsICwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAsICwgMSwgMSwgLCAsICwgLCAsIDEsIDEsICwgMSwgLCAxLCAsIDEsIDEgXSwgLCBbICwgMSwgMSwgLCAxLCAsICwgMSwgLCAxLCAsICwgLCAxLCAxLCAxLCAsICwgLCAsICwgMSwgLCAsICwgMSBdLCBbIDEsIDEsICwgLCAxLCAxLCAsIDEsICwgLCAsICwgMSwgLCAxIF0gXSwgWyAsIFsgLCAxIF0sIFsgLCAsICwgMSwgLCAsICwgMSwgLCAsICwgMSwgLCAsICwgMSwgLCAsIDEsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgMSwgLCAsICwgLCAsIDEgXSwgLCBbIDEsICwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgMSwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgMSwgLCAsICwgLCAsICwgLCAsIDEsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAxLCAsIDEgXSwgWyAsIDEgXSwgWyAsIDEsICwgMSwgLCAxLCAsIDEsICwgMSwgLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgLCAsICwgLCAsICwgMSBdLCBbIDEsICwgLCAsICwgMSwgLCAsIDEsIDEsICwgMSwgLCAxLCAsIDEsIDEsICwgLCAsICwgMSwgLCAsIDEgXSwgWyAsIDEsIDEsICwgLCAxLCAsIDEsICwgMSwgLCAxLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAsIDEsICwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsICwgMSwgLCAxLCAsICwgLCAxLCAxLCAxLCAxLCAsIDEsIDEsICwgLCAxLCAxLCAxLCAxIF0sIFsgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgMSBdLCAsIFsgLCAxLCAsICwgLCAsICwgMSwgMSwgMSwgLCAxLCAsICwgLCAxLCAsICwgMSwgMSwgMSwgLCAsIDEgXSwgWyAxLCAsICwgLCAsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgLCAxLCAsICwgMSwgMSBdLCBbIDEsICwgMSwgMSwgLCAsICwgLCAxLCAsICwgLCAsICwgMSwgMSwgLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAsIDEgXSwgWyAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsICwgLCAsICwgMSwgLCAsIDEsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsIDEgXSBdLCBbICwgWyAxLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEsICwgMSwgMSwgLCAsIDEsIDEsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sICwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgMSwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sICwgWyAxLCAxLCAsICwgLCAxLCAxLCAsICwgLCAsICwgMSwgLCAsICwgMSwgLCAxLCAsIDEsIDEsICwgMSBdLCBbIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgLCAxLCAxLCAsICwgMSwgLCAxLCAsICwgLCAxLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsIDEgXSwgWyAsICwgMSwgLCAsICwgLCAxLCAsIDEgXSwgWyAxLCAsICwgLCAxLCAsICwgLCAsIDEsICwgLCAsIDEsIDEsICwgLCAsIDEsIDEsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgMSwgLCAsIDEsIDEsICwgLCAsICwgLCAsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsIDEgXSwgLCBbICwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgLCAxLCAxLCAsICwgMSwgMSwgLCAxLCAxLCAxLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsIDEgXSwgLCBbIDEgXSBdLCBbICwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsICwgLCAxLCAxLCAxLCAxLCAsICwgLCAsICwgMSwgLCAxLCAsICwgLCAxLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAsIDEsICwgMSwgLCAsIDEsIDEsIDEsIDEsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsIDEgXSwgWyAsIDEsIDEsICwgMSwgMSwgLCAxLCAsICwgLCAxLCAxLCAsIDEsIDEsICwgLCAxLCAsIDEsIDEsICwgMSBdLCBbICwgMSwgLCAxLCAsIDEsICwgLCAxLCAsICwgMSwgMSwgLCAxLCAxLCAsICwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsICwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAxLCAsIDEsICwgMSwgMSwgLCAsICwgMSwgLCAsIDEgXSwgWyAsIDEsICwgLCAxLCAxLCAsICwgLCAsICwgLCAsICwgMSwgMSwgMSwgLCAsICwgLCAxIF0sIFsgMSwgLCAsIDEsIDEsICwgLCAsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAsICwgMSwgLCAsIDEsICwgMSwgLCAxIF0sIFsgLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgLCAsICwgMSwgMSwgMSwgLCAsIDEsIDEsICwgLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgLCAxLCAsICwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAsICwgLCAxLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsIDEsICwgLCAsIDEsICwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgLCAsICwgLCAxLCAsIDEsICwgLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSBdLCBbIDEsIDEsICwgMSwgLCAxLCAxLCAsICwgLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgLCAsICwgLCAsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgLCAsIDEsIDEsICwgLCAsIDEsICwgMSwgMSwgLCAxLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsIDEsICwgLCAxLCAxLCAxLCAxLCAsICwgMSwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsIDEgXSBdLCBbICwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEsIDEsICwgLCAsICwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgMSwgLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAsICwgMSwgLCAsIDEsIDEsIDEsICwgLCAsIDEgXSwgLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsICwgLCAxIF0sIFsgMSwgMSwgMSwgLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgLCAsIDEsICwgMSwgLCAsIDEsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAxLCAsICwgLCAxLCAsICwgLCAsICwgMSwgLCAsIDEsICwgLCAsICwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAsICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsICwgLCAxLCAxLCAsICwgLCAxLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgLCAxLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgMSBdLCAsIFsgMSwgMSwgLCAxLCAsIDEsICwgLCAsICwgLCAxLCAsIDEsICwgMSwgMSwgLCAxLCAsIDEsIDEsICwgMSwgMSwgLCAxIF0sIFsgLCAsIDEsICwgLCAsICwgLCAxLCAsICwgLCAxLCAsIDEsICwgLCAsICwgMSBdLCBbIDEsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgMSwgLCAxLCAsICwgMSBdLCBbIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAsICwgMSwgLCAxLCAsICwgLCAsICwgMSwgLCAsIDEsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCAsIFsgMSwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgMSBdLCBbIDEgXSBdLCBbICwgWyAxLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAxLCAsIDEsICwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAsICwgLCAxLCAsICwgMSwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgMSwgLCAsICwgMSwgLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAsICwgLCAxLCAsICwgLCAsICwgLCAsICwgMSwgMSwgMSwgMSBdLCBbIDEgXSwgWyAsIDEsIDEsICwgLCAxLCAxLCAsICwgLCAsIDEsICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAxIF0sIFsgMSwgLCAxLCAsICwgMSwgLCAxLCAsICwgLCAsIDEsIDEsIDEsIDEsICwgLCAsIDEsICwgLCAsIDEgXSwgWyAsICwgMSwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgMSBdLCBbIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgMSBdLCBbICwgLCAsIDEsICwgMSwgLCAsICwgLCAxLCAsICwgLCAxLCAxLCAsICwgLCAxIF0sIFsgMSwgLCAsICwgLCAxLCAsICwgLCAxLCAsIDEsIDEsICwgLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgLCAxIF0sIFsgLCAxLCAxLCAsICwgLCAsIDEsICwgMSwgLCAxLCAxLCAxLCAsIDEsIDEsICwgLCAxLCAsIDEsIDEsIDEgXSwgWyAsIDEsICwgLCAsIDEsICwgLCAsIDEsICwgLCAxLCAsIDEsIDEsICwgLCAxLCAxLCAsICwgLCAsICwgMSBdLCBbIDEsICwgMSwgMSwgLCAxLCAsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgLCAsICwgLCAsIDEgXSwgWyAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsIDEsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAxIF0sIFsgLCAxLCAsICwgLCAxLCAsICwgMSwgMSwgLCAxLCAsICwgMSwgMSwgLCAsIDEsICwgLCAxLCAsICwgMSwgMSBdLCBbIDEsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgLCAsIDEsICwgMSwgMSBdLCBbIDEsICwgMSwgMSwgMSwgMSwgLCAsICwgMSwgLCAxLCAxLCAxLCAsIDEsICwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbIDEsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAxLCAsIDEsICwgLCAsIDEgXSwgWyAsICwgLCAxLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAxLCAxLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAxIF0gXSwgWyAsIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsIDEsIDEgXSwgWyAsICwgLCAsICwgMSwgLCAsICwgMSwgMSwgMSwgLCAsIDEsIDEsICwgLCAxLCAsIDEsIDEsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgMSBdLCBbICwgMSwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsICwgMSwgLCAsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsICwgLCAsIDEsICwgMSwgMSBdLCAsIFsgLCAsIDEsICwgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgLCAxLCAxLCAsIDEsICwgMSwgLCAsIDEsIDEsIDEsICwgLCAxIF0sIFsgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsIDEsIDEsICwgMSwgLCAsIDEgXSwgWyAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAsICwgLCAsIDEsICwgLCAxLCAsIDEsICwgLCAsIDEsIDEsICwgLCAsIDEsIDEgXSwgWyAsIDEsICwgLCAxLCAsICwgMSwgLCAxLCAxLCAsIDEsICwgLCAsICwgLCAsIDEgXSwgWyAsICwgMSwgLCAxLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAxLCAsICwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAxLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCAsIFsgLCAxLCAxLCAxLCAxLCAsICwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxLCAsIDEgXSwgWyAxLCAsICwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgMSwgLCAsICwgLCAsICwgLCAsIDEgXSwgLCBbICwgMSwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0gXSwgWyAsIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEsIDEsIDEsIDEsICwgLCAsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSBdLCBbICwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgLCAsIDEsIDEsIDEsIDEsICwgMSwgLCAsICwgMSwgMSwgLCAsIDEsIDEsICwgMSBdLCBbICwgMSwgMSwgLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbIDEsIDEsIDEsICwgLCAsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgLCAxLCAxLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsIDEsIDEsICwgLCAxLCAxLCAxLCAsIDEsICwgLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAsICwgMSwgLCAsICwgMSwgLCAsIDEsICwgLCAsIDEsICwgLCAsICwgLCAsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAxLCAsICwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgLCAsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgLCAxLCAsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsICwgLCAxLCAsIDEsICwgMSwgLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAxLCAxLCAsICwgLCAsICwgLCAsICwgMSBdLCAsIFsgLCAxLCAsIDEsICwgMSwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsICwgMSwgLCAxLCAsICwgLCAxIF0sIFsgLCAxLCAsICwgMSwgMSwgLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsICwgLCAxIF0sIFsgMSwgLCAsIDEsICwgLCAsIDEsIDEsIDEsICwgLCAsICwgMSwgMSwgLCAsICwgMSwgLCAxIF0sIFsgMSwgMSwgLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxIF0sIFsgMSwgMSwgLCAsICwgLCAsICwgLCAxLCAsIDEsICwgLCAsICwgLCAsICwgMSwgLCAxIF0sIFsgLCAxLCAsICwgLCAxLCAsIDEsIDEsICwgLCAsIDEsIDEsICwgMSwgLCAsICwgMSwgMSwgMSwgLCAxIF0sICwgWyAsIDEsICwgLCAsICwgLCAxLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsIDEsICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSBdLCBbICwgWyAsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdIF0sIFsgLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAsIDEsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsIDEsICwgLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAsIDEsICwgLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSBdLCBbIDEsIDEsICwgMSwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEgXSwgWyAsIDEsIDEsICwgLCAsICwgMSwgMSwgMSwgLCAsIDEsICwgMSwgMSwgLCAsICwgMSwgLCAxLCAsICwgMSwgMSBdLCBbICwgLCAsICwgLCAsICwgMSwgLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsICwgLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgLCAxLCAxLCAsICwgMSwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsICwgLCAsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAsIDEsICwgMSwgMSwgLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAxLCAsIDEgXSwgWyAsIDEsIDEsIDEsICwgMSwgLCAxLCAsIDEsICwgLCAsIDEsICwgMSwgLCAsIDEsICwgLCAsICwgLCAxLCAxIF0sIFsgLCAxLCAsICwgMSwgMSwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsICwgMSwgLCAsIDEgXSwgWyAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsICwgMSwgLCAsICwgLCAxLCAsIDEsICwgMSwgLCAsICwgLCAsIDEsICwgMSwgLCAsICwgMSwgMSBdIF0sIFsgLCBbICwgMSwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsIDEsICwgMSwgMSwgMSwgLCAxLCAsICwgMSwgLCAxLCAxIF0sIFsgMSwgMSwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAxLCAxIF0sICwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAxLCAsIDEgXSwgWyAsICwgMSwgMSwgLCAxLCAsIDEsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbIDEsICwgMSwgMSwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAxLCAsICwgMSwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAsIDEsIDEsICwgMSBdLCBbICwgMSwgLCAsIDEsIDEsICwgLCAsICwgLCAxLCAsIDEsICwgMSwgLCAsIDEsICwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsICwgMSwgLCAxLCAsIDEsICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsICwgLCAxLCAsIDEsICwgMSwgMSwgMSwgLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxLCAxIF0sIFsgLCAsICwgLCAxLCAsICwgMSwgLCAsICwgLCAsICwgMSwgLCAsICwgMSwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAxLCAsIDEsICwgLCAsICwgMSwgLCAsICwgLCAxIF0sICwgWyAxLCAxLCAsIDEsICwgMSwgLCAxLCAxLCAsICwgLCAsICwgMSwgMSwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAsIDEsICwgLCAsICwgLCAxLCAsICwgLCAsICwgMSwgMSwgLCAsICwgMSwgMSwgLCAsIDEgXSwgWyAsIDEsIDEsICwgMSwgMSwgLCAsICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgLCAsIDEsICwgLCAsIDEsICwgLCAsIDEsIDEgXSwgWyAsICwgLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgMSBdLCAsIFsgLCAsIDEsICwgMSwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0gXSwgWyAsIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEsICwgLCAsICwgMSBdLCBbICwgMSwgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgLCAxLCAxLCAsICwgLCAsIDEsIDEgXSwgWyAsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsIDEsICwgLCAxLCAsIDEsIDEsIDEgXSwgWyAsIDEsICwgLCAsIDEsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAxLCAsICwgMSwgLCAxLCAsIDEsIDEsICwgMSwgLCAsICwgLCAxLCAsIDEsICwgLCAsIDEsIDEgXSwgWyAsIDEsICwgLCAxLCAsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsIDEsIDEsICwgLCAsIDEsIDEsICwgLCAsICwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsICwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsICwgLCAsIDEsICwgLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEgXSwgWyAxLCAxLCAsICwgLCAsICwgLCAxLCAxLCAsICwgLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgMSwgMSBdLCAsIFsgLCAxLCAxLCAsICwgLCAsIDEsICwgMSwgLCAsICwgMSwgMSwgMSwgLCAsIDEsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAxLCAsICwgLCAsICwgLCAsIDEsIDEsICwgLCAsICwgMSwgLCAxLCAsICwgMSwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0gXSwgWyAsIFsgLCAxIF0sICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgWyAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAxLCAsIDEsICwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAsICwgLCAxLCAsIDEsIDEgXSwgWyAsIDEsICwgMSwgLCAxLCAsICwgMSwgLCAsICwgLCAxLCAsICwgLCAsICwgMSwgMSBdLCBbICwgMSwgLCAxLCAsICwgLCAsIDEsICwgLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdIF0sIFsgLCBbICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAsIDEsICwgLCAsICwgLCAsICwgLCAxLCAxLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgMSBdLCBbICwgLCAxIF0sIFsgLCAxLCAxLCAsICwgMSwgLCAxLCAsIDEsIDEsICwgMSwgMSwgMSwgLCAsICwgMSwgMSwgMSwgLCAsICwgLCAxIF0sICwgWyAsIDEsICwgLCAsIDEsICwgLCAsICwgLCAxLCAsICwgMSwgLCAsICwgMSwgMSwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgMSwgMSwgLCAsICwgLCAsIDEsIDEsIDEsICwgLCAsIDEsICwgMSwgMSBdLCBbICwgLCAsICwgLCAsICwgMSwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAxLCAxLCAsICwgLCAsICwgMSwgMSwgLCAsICwgMSwgLCAsICwgLCAsICwgMSwgLCAsIDEgXSwgLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsICwgLCAxLCAsICwgMSwgLCAsICwgLCAxLCAsIDEsICwgMSwgLCAxLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgLCAsIDEsIDEsICwgMSwgMSwgLCAxLCAsICwgMSwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAxIF0sICwgWyAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgLCAxIF0sIFsgLCAsIDEsICwgLCAsICwgLCAsIDEsICwgLCAxLCAxIF0sIFsgLCAsICwgMSwgLCAsICwgLCAxLCAsICwgLCAsIDEsICwgLCAsICwgLCAxLCAsICwgLCAxIF0sIFsgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgLCAsICwgMSwgMSwgMSwgLCAsIDEsIDEsICwgLCAsIDEsIDEgXSwgLCBbIDEsIDEsICwgLCAsICwgLCAsICwgLCAsIDEsICwgMSwgLCAxLCAsICwgMSBdLCBbICwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsIDEsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAxIF0gXSwgWyAsIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSBdLCBbICwgLCAxLCAsICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAsIDEsICwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEgXSwgWyAxLCAxLCAsICwgLCAsICwgLCAxLCAsIDEsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxIF0sIFsgMSwgMSwgMSwgMSwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgLCAxLCAsICwgLCAsICwgMSwgLCAxLCAsICwgLCAsIDEsIDEsICwgLCAsICwgMSBdLCBbIDEsICwgMSwgMSwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsICwgMSwgMSwgLCAxLCAsIDEsICwgLCAsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAsIDEsICwgMSBdLCBbICwgMSwgMSwgMSwgMSwgLCAsICwgLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAsICwgLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgLCAsICwgMSwgLCAxLCAsIDEsICwgLCAxLCAsICwgMSwgMSwgLCAxIF0gXSwgWyAsIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgMSwgMSwgLCAsIDEsICwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAxLCAsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAsIDEsICwgMSBdLCBbIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgLCAsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAsIDEsICwgLCAsICwgLCAsICwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAsIDEsIDEsICwgLCAsICwgLCAxLCAxLCAxLCAxLCAxLCAsICwgLCAxLCAxLCAxLCAsIDEsIDEsIDEgXSwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsICwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgLCAxLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxIF0sIFsgMSwgMSwgLCAsICwgMSwgLCAsIDEsIDEsIDEsICwgMSwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAsICwgLCAsICwgLCAsICwgMSBdIF0sIFsgLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgMSwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgMSwgLCAsICwgLCAsIDEsICwgLCAxLCAsICwgLCAxIF0sICwgWyAsIDEsICwgLCAsIDEsICwgMSwgLCAxLCAxLCAsIDEsIDEsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAxLCAsICwgMSwgLCAsICwgLCAsICwgLCAsIDEsIDEsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbIDEsIDEsICwgLCAsICwgLCAxLCAxLCAxLCAsIDEsIDEsICwgLCAsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAsIDEgXSwgWyAsIDEsIDEsIDEsICwgMSwgMSwgLCAsIDEsICwgMSwgMSwgMSwgMSwgLCAsICwgLCAsICwgMSwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAsICwgMSwgLCAxLCAsICwgLCAxLCAxLCAxLCAxLCAsIDEsIDEsICwgMSBdLCBbICwgMSwgLCAsIDEsIDEsICwgMSwgLCAsICwgMSwgLCAxLCAxLCAsIDEsICwgMSwgLCAsIDEsICwgLCAxLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgLCBbIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsIDEsIDEsICwgMSwgLCAsICwgLCAxLCAsICwgMSwgLCAxIF0sIFsgLCAxLCAsICwgLCAxLCAsICwgMSwgLCAsICwgLCAsICwgLCAxLCAsIDEsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAxLCAsICwgLCAxLCAsICwgMSBdLCBbICwgLCAsICwgLCAxLCAsICwgMSwgLCAsICwgMSBdLCBbICwgMSBdLCAsIFsgLCAxIF0sIFsgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsIDEgXSBdLCBbICwgWyAsIDEsICwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsICwgLCAxIF0sIFsgLCAsIDEsICwgLCAsICwgLCAsICwgLCAxIF0sICwgLCBbIDEsICwgLCAxLCAxLCAsICwgLCAsICwgLCAsIDEsIDEsICwgMSwgMSwgLCAxIF0sICwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsIDEgXSwgLCBbIDEsICwgLCAxLCAxLCAsIDEsIDEsICwgLCAsICwgMSwgLCAxLCAsICwgLCAsIDEsIDEsICwgMSBdLCAsIFsgLCAxLCAsICwgLCAsICwgLCAsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgLCAsICwgMSwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAxLCAsICwgMSBdLCBbIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsIDEgXSwgLCAsIFsgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsIDEsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEsIDEsICwgLCAsICwgLCAxIF0sICwgWyAsIDEgXSBdLCBbICwgWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAsICwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsICwgLCAsIDEsICwgLCAxLCAsICwgMSwgMSwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgMSBdLCBbICwgMSwgLCAxLCAxLCAsICwgMSwgMSwgMSwgLCAsICwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsIDEsICwgLCAsICwgMSwgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgLCAsIDEsICwgMSwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAsIDEsICwgMSwgMSwgMSwgMSwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsIDEsICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgLCAsICwgMSwgLCAsIDEsICwgMSwgLCAxIF0sIFsgLCAxLCAsIDEsICwgMSwgLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgLCAsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsIDEsICwgLCAsIDEsIDEsIDEsICwgLCAsIDEsIDEsICwgLCAxLCAxIF0sIFsgLCAsIDEsIDEsIDEsIDEsICwgMSwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgLCAsICwgLCAxLCAsIDEsICwgMSBdLCBbIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgLCAxLCAsIDEsIDEsIDEsICwgLCAxLCAxLCAsICwgLCAxLCAsIDEgXSwgWyAsICwgLCAxIF0sICwgWyAsIDEsIDEsICwgMSwgLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAxLCAsIDEsICwgMSwgLCAsICwgLCAsICwgMSwgMSwgLCAxLCAxIF0sIFsgLCAsICwgLCAsICwgMSwgLCAxLCAxLCAsIDEsICwgMSwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgMSwgLCAxLCAsICwgLCAxLCAsICwgLCAxLCAxLCAxLCAsICwgLCAxLCAsIDEsIDEsIDEsICwgMSwgMSBdLCAsIFsgLCAxLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgMSwgLCAsICwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAxLCAxLCAsICwgLCAsICwgLCAxLCAsICwgLCAxLCAsICwgLCAsIDEsICwgLCAsICwgLCAsIDEgXSBdLCBbICwgWyAsIDEsIDEsIDEsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsICwgMSwgLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgLCAxLCAsICwgLCAsIDEsIDEsIDEgXSwgWyAsICwgMSwgMSwgLCAxLCAsIDEsIDEsICwgLCAsIDEsIDEsIDEsIDEsICwgLCAxLCAsIDEsIDEsIDEsIDEsICwgMSBdLCBbICwgMSwgLCAxLCAsICwgLCAsICwgLCAsIDEsICwgMSwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsIDEsICwgMSwgLCAsIDEsICwgLCAsICwgMSwgMSwgLCAsIDEsICwgMSwgMSwgMSwgMSBdLCBbICwgMSBdLCBbICwgMSwgMSwgLCAxLCAsIDEsIDEsICwgMSwgLCAsIDEsIDEsIDEsICwgLCAsIDEsICwgLCAxLCAsIDEgXSwgWyAxLCAxLCAsIDEsIDEsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEsICwgMSwgMSwgMSBdLCBbICwgMSwgMSwgLCAsICwgLCAsICwgMSwgLCAsIDEsICwgMSwgLCAxLCAsIDEsIDEsICwgLCAxLCAsICwgMSBdLCBbICwgLCAxLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgLCAsICwgLCAxLCAxLCAxLCAsICwgMSwgLCAxLCAsICwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsICwgMSwgLCAsIDEsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgMSwgLCAsICwgMSwgMSBdLCBbICwgLCAsIDEsIDEsICwgLCAxLCAsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAsIDEsICwgLCAsICwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgMSwgLCAxLCAxLCAsIDEsICwgMSwgLCAsICwgMSwgMSwgLCAsIDEsIDEsICwgMSwgMSwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsICwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsICwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxIF0sIFsgLCAxLCAxLCAsIDEsICwgLCAxLCAsICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsIDEsICwgMSwgMSBdLCBbICwgLCAsICwgLCAxLCAsICwgLCAxLCAsICwgLCAsIDEsIDEsICwgLCAsIDEgXSwgWyAsIDEsICwgMSwgMSwgMSwgLCAxLCAsICwgMSwgMSwgMSwgLCAsIDEsICwgLCAxLCAsIDEsICwgLCAxIF0sIFsgLCAsIDEsICwgLCAsICwgLCAsICwgLCAxLCAsIDEsICwgLCAsICwgMSwgLCAxIF0sIFsgLCAxLCAxLCAsICwgLCAsICwgLCAsIDEsIDEsIDEsICwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgMSwgLCAsIDEgXSBdLCBbICwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsIDEsICwgMSwgMSwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgLCAsICwgLCAsICwgLCAxLCAxIF0sIFsgLCAsICwgLCAsICwgLCAsIDEsICwgLCAsIDEsICwgMSwgLCAxIF0sIFsgLCAxLCAsICwgMSwgMSwgLCAxLCAsICwgLCAxLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgMSwgLCAxLCAsICwgLCAxLCAxLCAsIDEsICwgMSwgLCAsICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEgXSwgLCBbICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgMSwgMSwgLCAsIDEsICwgMSwgMSwgLCAxLCAsIDEgXSwgWyAsIDEsICwgLCAxLCAsICwgLCAsICwgLCAsIDEsICwgLCAsICwgLCAsIDEgXSwgWyAxLCAxLCAsICwgLCAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxIF0sICwgWyAsIDEsICwgLCAsICwgLCAxLCAsIDEsICwgMSwgMSwgMSwgMSwgMSwgLCAsIDEsICwgMSwgMSwgLCAsICwgMSBdLCBbICwgMSwgMSwgLCAsIDEsICwgMSwgLCAxLCAsICwgMSwgMSwgMSwgMSwgLCAsIDEsICwgLCAxLCAsICwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAsICwgMSwgLCAxIF0sIFsgLCAxLCAsICwgMSwgMSwgLCAxLCAxLCAsICwgMSwgMSwgLCAxLCAxLCAsIDEsICwgMSwgLCAxIF0sIFsgMSwgLCAxLCAsICwgLCAsIDEsICwgMSwgLCAxLCAxLCAxLCAxLCAsICwgLCAsIDEsIDEsICwgLCAsIDEsIDEgXSwgWyAsIDEsIDEsICwgLCAsICwgMSwgMSwgLCAsIDEsICwgMSwgMSwgMSwgMSwgLCAsICwgLCAsICwgLCAsICwgMSBdLCAsIFsgLCAxLCAxLCAsICwgMSwgLCAsICwgMSwgLCAxLCAxLCAxLCAxLCAxLCAsICwgLCAxLCAsICwgLCAxLCAsIDEgXSwgWyAsICwgLCAxLCAxLCAsICwgMSwgLCAsICwgLCAxLCAsIDEsIDEsIDEsICwgMSwgMSwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgMSwgLCAsICwgMSwgLCAsICwgLCAsICwgMSwgLCAxIF0sIFsgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAsIDEsIDEsIDEsIDEsIDEsIDEsICwgMSwgMSwgMSwgLCAxLCAxLCAsIDEsIDEsIDEsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAxLCAsICwgLCAsIDEsICwgMSwgLCAsIDEsIDEsICwgMSwgMSwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgLCAxLCAxLCAsICwgLCAsICwgLCAsIDEsICwgLCAsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxLCAsICwgMSwgLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsICwgLCAxLCAsICwgLCAxIF0gXSwgWyAsIFsgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxIF0sIFsgLCAxLCAsIDEsICwgMSwgLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgLCAxLCAsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsICwgLCAsICwgLCAsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsIDEsIDEsICwgLCAsICwgLCAxIF0sICwgWyAsIDEsIDEsICwgLCAsICwgLCAxLCAsICwgLCAsIDEsIDEsICwgLCAsIDEgXSwgWyAxLCAsIDEsICwgMSwgLCAsICwgLCAxLCAsICwgLCAsIDEsICwgLCAsICwgLCAsICwgLCAxLCAxIF0sIFsgLCAxLCAxLCAsICwgLCAsICwgLCAsICwgMSwgMSwgMSwgMSwgLCAsICwgMSwgLCAsICwgLCAxLCAsICwgMSBdLCAsIFsgLCAxLCAxLCAsIDEsICwgLCAxLCAxLCAsICwgMSwgLCAsIDEsIDEsIDEsICwgMSwgLCAxLCAxLCAxLCAsICwgLCAxIF0sIFsgLCAsICwgLCAsIDEsICwgLCAsICwgMSwgLCAsIDEsIDEsICwgLCAxLCAsIDEsICwgLCAsIDEgXSwgWyAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgXSwgWyAsIDEsICwgLCAxLCAxLCAsIDEsICwgLCAsIDEsICwgLCAsICwgLCAsICwgMSBdLCBbICwgLCAsIDEsICwgLCAsICwgMSwgLCAsICwgLCAxLCAsIDEsICwgMSwgMSwgMSBdLCBbICwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSBdLCBbICwgLCAsICwgLCAxIF0sIFsgLCAxLCAsICwgLCAsICwgMSwgLCAsICwgLCAsICwgMSwgMSwgMSwgLCAsIDEgXSwgWyAsIDEsICwgLCAsICwgLCAsICwgLCAsIDEsIDEsIDEsICwgLCAsICwgMSwgLCAsIDEgXSwgWyAsICwgLCAsICwgMSwgLCAxLCAsICwgLCAsIDEsIDEsIDEsICwgMSwgMSwgLCAxLCAxLCAxLCAsICwgMSwgMSBdLCBbIDEsIDEsICwgLCAsICwgLCAsIDEsICwgLCAsICwgMSwgMSwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sICwgWyAsIDEgXSwgWyAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAsICwgLCAxIF0sIFsgLCAsIDEsICwgLCAsICwgMSwgLCAsIDEsICwgLCAsIDEsICwgMSBdLCBbICwgMSwgLCAsICwgLCAsICwgLCAsIDEgXSBdIF07XG4gICAgZnVuY3Rpb24gaXNWYWxpZExhbmcobGFuZykge1xuICAgICAgdmFyIGFycmF5ID0gbGFuZ3M7XG4gICAgICB3aGlsZSAobGFuZy5sZW5ndGggPCAzKSB7XG4gICAgICAgIGxhbmcgKz0gJ2AnO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2kzMiA9IDA7IF9pMzIgPD0gbGFuZy5sZW5ndGggLSAxOyBfaTMyKyspIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbGFuZy5jaGFyQ29kZUF0KF9pMzIpIC0gOTY7XG4gICAgICAgIGFycmF5ID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoIWFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX3ZhbGlkTGFuZ3MobGFuZ0FycmF5KSB7XG4gICAgICBsYW5nQXJyYXkgPSBBcnJheS5pc0FycmF5KGxhbmdBcnJheSkgPyBsYW5nQXJyYXkgOiBsYW5ncztcbiAgICAgIHZhciBjb2RlcyA9IFtdO1xuICAgICAgbGFuZ0FycmF5LmZvckVhY2goZnVuY3Rpb24obGFuZywgaW5kZXgpIHtcbiAgICAgICAgdmFyIF9jaGFyMyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaW5kZXggKyA5NikucmVwbGFjZSgnYCcsICcnKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobGFuZykpIHtcbiAgICAgICAgICBjb2RlcyA9IGNvZGVzLmNvbmNhdChfdmFsaWRMYW5ncyhsYW5nKS5tYXAoZnVuY3Rpb24obmV3TGFuZykge1xuICAgICAgICAgICAgcmV0dXJuIF9jaGFyMyArIG5ld0xhbmc7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvZGVzLnB1c2goX2NoYXIzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29kZXM7XG4gICAgfVxuICAgIHZhciB2YWxpZF9sYW5nc19kZWZhdWx0ID0gaXNWYWxpZExhbmc7XG4gICAgdmFyIFNlcmlhbFZpcnR1YWxOb2RlID0gZnVuY3Rpb24oX2Fic3RyYWN0X3ZpcnR1YWxfbm9kMikge1xuICAgICAgZnVuY3Rpb24gU2VyaWFsVmlydHVhbE5vZGUoc2VyaWFsTm9kZSkge1xuICAgICAgICB2YXIgX3RoaXM2O1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VyaWFsVmlydHVhbE5vZGUpO1xuICAgICAgICBfdGhpczYgPSBfY2FsbFN1cGVyKHRoaXMsIFNlcmlhbFZpcnR1YWxOb2RlKTtcbiAgICAgICAgX3RoaXM2Ll9wcm9wcyA9IG5vcm1hbGlzZVByb3BzKHNlcmlhbE5vZGUpO1xuICAgICAgICBfdGhpczYuX2F0dHJzID0gbm9ybWFsaXNlQXR0cnMoc2VyaWFsTm9kZSk7XG4gICAgICAgIHJldHVybiBfdGhpczY7XG4gICAgICB9XG4gICAgICBfaW5oZXJpdHMoU2VyaWFsVmlydHVhbE5vZGUsIF9hYnN0cmFjdF92aXJ0dWFsX25vZDIpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTZXJpYWxWaXJ0dWFsTm9kZSwgWyB7XG4gICAgICAgIGtleTogJ3Byb3BzJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BzO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2F0dHInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXR0cihhdHRyTmFtZSkge1xuICAgICAgICAgIHZhciBfdGhpcyRfYXR0cnMkYXR0ck5hbWU7XG4gICAgICAgICAgcmV0dXJuIChfdGhpcyRfYXR0cnMkYXR0ck5hbWUgPSB0aGlzLl9hdHRyc1thdHRyTmFtZV0pICE9PSBudWxsICYmIF90aGlzJF9hdHRycyRhdHRyTmFtZSAhPT0gdm9pZCAwID8gX3RoaXMkX2F0dHJzJGF0dHJOYW1lIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNBdHRyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0F0dHIoYXR0ck5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYXR0cnNbYXR0ck5hbWVdICE9PSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnYXR0ck5hbWVzJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2F0dHJzKTtcbiAgICAgICAgfVxuICAgICAgfSBdKTtcbiAgICB9KGFic3RyYWN0X3ZpcnR1YWxfbm9kZV9kZWZhdWx0KTtcbiAgICB2YXIgbm9kZU5hbWVzVG9UeXBlcyA9IHtcbiAgICAgICcjY2RhdGEtc2VjdGlvbic6IDIsXG4gICAgICAnI3RleHQnOiAzLFxuICAgICAgJyNjb21tZW50JzogOCxcbiAgICAgICcjZG9jdW1lbnQnOiA5LFxuICAgICAgJyNkb2N1bWVudC1mcmFnbWVudCc6IDExXG4gICAgfTtcbiAgICB2YXIgbm9kZVR5cGVUb05hbWUgPSB7fTtcbiAgICB2YXIgbm9kZU5hbWVzID0gT2JqZWN0LmtleXMobm9kZU5hbWVzVG9UeXBlcyk7XG4gICAgbm9kZU5hbWVzLmZvckVhY2goZnVuY3Rpb24obm9kZU5hbWUyKSB7XG4gICAgICBub2RlVHlwZVRvTmFtZVtub2RlTmFtZXNUb1R5cGVzW25vZGVOYW1lMl1dID0gbm9kZU5hbWUyO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIG5vcm1hbGlzZVByb3BzKHNlcmlhbE5vZGUpIHtcbiAgICAgIHZhciBfc2VyaWFsTm9kZSRub2RlTmFtZSwgX3JlZjgxLCBfc2VyaWFsTm9kZSRub2RlVHlwZTtcbiAgICAgIHZhciBub2RlTmFtZTIgPSAoX3NlcmlhbE5vZGUkbm9kZU5hbWUgPSBzZXJpYWxOb2RlLm5vZGVOYW1lKSAhPT0gbnVsbCAmJiBfc2VyaWFsTm9kZSRub2RlTmFtZSAhPT0gdm9pZCAwID8gX3NlcmlhbE5vZGUkbm9kZU5hbWUgOiBub2RlVHlwZVRvTmFtZVtzZXJpYWxOb2RlLm5vZGVUeXBlXTtcbiAgICAgIHZhciBub2RlVHlwZSA9IChfcmVmODEgPSAoX3NlcmlhbE5vZGUkbm9kZVR5cGUgPSBzZXJpYWxOb2RlLm5vZGVUeXBlKSAhPT0gbnVsbCAmJiBfc2VyaWFsTm9kZSRub2RlVHlwZSAhPT0gdm9pZCAwID8gX3NlcmlhbE5vZGUkbm9kZVR5cGUgOiBub2RlTmFtZXNUb1R5cGVzW3NlcmlhbE5vZGUubm9kZU5hbWVdKSAhPT0gbnVsbCAmJiBfcmVmODEgIT09IHZvaWQgMCA/IF9yZWY4MSA6IDE7XG4gICAgICBhc3NlcnRfZGVmYXVsdCh0eXBlb2Ygbm9kZVR5cGUgPT09ICdudW1iZXInLCAnbm9kZVR5cGUgaGFzIHRvIGJlIGEgbnVtYmVyLCBnb3QgXFwnJy5jb25jYXQobm9kZVR5cGUsICdcXCcnKSk7XG4gICAgICBhc3NlcnRfZGVmYXVsdCh0eXBlb2Ygbm9kZU5hbWUyID09PSAnc3RyaW5nJywgJ25vZGVOYW1lIGhhcyB0byBiZSBhIHN0cmluZywgZ290IFxcJycuY29uY2F0KG5vZGVOYW1lMiwgJ1xcJycpKTtcbiAgICAgIG5vZGVOYW1lMiA9IG5vZGVOYW1lMi50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHR5cGUyID0gbnVsbDtcbiAgICAgIGlmIChub2RlTmFtZTIgPT09ICdpbnB1dCcpIHtcbiAgICAgICAgdHlwZTIgPSAoc2VyaWFsTm9kZS50eXBlIHx8IHNlcmlhbE5vZGUuYXR0cmlidXRlcyAmJiBzZXJpYWxOb2RlLmF0dHJpYnV0ZXMudHlwZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF2YWxpZF9pbnB1dF90eXBlX2RlZmF1bHQoKS5pbmNsdWRlcyh0eXBlMikpIHtcbiAgICAgICAgICB0eXBlMiA9ICd0ZXh0JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHNlcmlhbE5vZGUsIHtcbiAgICAgICAgbm9kZVR5cGU6IG5vZGVUeXBlLFxuICAgICAgICBub2RlTmFtZTogbm9kZU5hbWUyXG4gICAgICB9KTtcbiAgICAgIGlmICh0eXBlMikge1xuICAgICAgICBwcm9wcy50eXBlID0gdHlwZTI7XG4gICAgICB9XG4gICAgICBkZWxldGUgcHJvcHMuYXR0cmlidXRlcztcbiAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHByb3BzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbm9ybWFsaXNlQXR0cnMoX3JlZjgyKSB7XG4gICAgICB2YXIgX3JlZjgyJGF0dHJpYnV0ZXMgPSBfcmVmODIuYXR0cmlidXRlcywgYXR0cmlidXRlczIgPSBfcmVmODIkYXR0cmlidXRlcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmODIkYXR0cmlidXRlcztcbiAgICAgIHZhciBhdHRyTWFwID0ge1xuICAgICAgICBodG1sRm9yOiAnZm9yJyxcbiAgICAgICAgY2xhc3NOYW1lOiAnY2xhc3MnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMyKS5yZWR1Y2UoZnVuY3Rpb24oYXR0cnMsIGF0dHJOYW1lKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXMyW2F0dHJOYW1lXTtcbiAgICAgICAgYXNzZXJ0X2RlZmF1bHQoX3R5cGVvZih2YWx1ZSkgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsLCAnZXhwZWN0cyBhdHRyaWJ1dGVzIG5vdCB0byBiZSBhbiBvYmplY3QsIFxcJycuY29uY2F0KGF0dHJOYW1lLCAnXFwnIHdhcycpKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICB2YXIgbWFwcGVkTmFtZSA9IGF0dHJNYXBbYXR0ck5hbWVdIHx8IGF0dHJOYW1lO1xuICAgICAgICAgIGF0dHJzW21hcHBlZE5hbWVdID0gdmFsdWUgIT09IG51bGwgPyBTdHJpbmcodmFsdWUpIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXR0cnM7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICAgIHZhciBzZXJpYWxfdmlydHVhbF9ub2RlX2RlZmF1bHQgPSBTZXJpYWxWaXJ0dWFsTm9kZTtcbiAgICBmdW5jdGlvbiBjbGVhbnVwKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVzb2x2ZSA9IHJlc29sdmUgfHwgZnVuY3Rpb24gcmVzKCkge307XG4gICAgICByZWplY3QgPSByZWplY3QgfHwgYXhlLmxvZztcbiAgICAgIGlmICghYXhlLl9hdWRpdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGF1ZGl0IGNvbmZpZ3VyZWQnKTtcbiAgICAgIH1cbiAgICAgIHZhciBxID0gYXhlLnV0aWxzLnF1ZXVlKCk7XG4gICAgICB2YXIgY2xlYW51cEVycm9ycyA9IFtdO1xuICAgICAgT2JqZWN0LmtleXMoYXhlLnBsdWdpbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHEuZGVmZXIoZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgdmFyIHJlaiA9IGZ1bmN0aW9uIHJlajIoZXJyMikge1xuICAgICAgICAgICAgY2xlYW51cEVycm9ycy5wdXNoKGVycjIpO1xuICAgICAgICAgICAgcmVzKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXhlLnBsdWdpbnNba2V5XS5jbGVhbnVwKHJlcywgcmVqKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIyKSB7XG4gICAgICAgICAgICByZWooZXJyMik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGZsYXR0ZW5lZFRyZWUgPSBheGUudXRpbHMuZ2V0RmxhdHRlbmVkVHJlZShkb2N1bWVudC5ib2R5KTtcbiAgICAgIGF4ZS51dGlscy5xdWVyeVNlbGVjdG9yQWxsKGZsYXR0ZW5lZFRyZWUsICdpZnJhbWUsIGZyYW1lJykuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHEuZGVmZXIoZnVuY3Rpb24ocmVzLCByZWopIHtcbiAgICAgICAgICByZXR1cm4gYXhlLnV0aWxzLnNlbmRDb21tYW5kVG9GcmFtZShub2RlLmFjdHVhbE5vZGUsIHtcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdjbGVhbnVwLXBsdWdpbidcbiAgICAgICAgICB9LCByZXMsIHJlaik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBxLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICBpZiAoY2xlYW51cEVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChjbGVhbnVwRXJyb3JzKTtcbiAgICAgICAgfVxuICAgICAgfSlbJ2NhdGNoJ10ocmVqZWN0KTtcbiAgICB9XG4gICAgdmFyIGNsZWFudXBfZGVmYXVsdCA9IGNsZWFudXA7XG4gICAgdmFyIHJlcG9ydGVycyA9IHt9O1xuICAgIHZhciBkZWZhdWx0UmVwb3J0ZXI7XG4gICAgZnVuY3Rpb24gaGFzUmVwb3J0ZXIocmVwb3J0ZXJOYW1lKSB7XG4gICAgICByZXR1cm4gcmVwb3J0ZXJzLmhhc093blByb3BlcnR5KHJlcG9ydGVyTmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFJlcG9ydGVyKHJlcG9ydGVyKSB7XG4gICAgICBpZiAodHlwZW9mIHJlcG9ydGVyID09PSAnc3RyaW5nJyAmJiByZXBvcnRlcnNbcmVwb3J0ZXJdKSB7XG4gICAgICAgIHJldHVybiByZXBvcnRlcnNbcmVwb3J0ZXJdO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiByZXBvcnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gcmVwb3J0ZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmYXVsdFJlcG9ydGVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRSZXBvcnRlcihuYW1lLCBjYiwgaXNEZWZhdWx0KSB7XG4gICAgICByZXBvcnRlcnNbbmFtZV0gPSBjYjtcbiAgICAgIGlmIChpc0RlZmF1bHQpIHtcbiAgICAgICAgZGVmYXVsdFJlcG9ydGVyID0gY2I7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZShzcGVjKSB7XG4gICAgICB2YXIgYXVkaXQgPSBheGUuX2F1ZGl0O1xuICAgICAgaWYgKCFhdWRpdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGF1ZGl0IGNvbmZpZ3VyZWQnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmF4ZVZlcnNpb24gfHwgc3BlYy52ZXIpIHtcbiAgICAgICAgdmFyIHNwZWNWZXJzaW9uID0gc3BlYy5heGVWZXJzaW9uIHx8IHNwZWMudmVyO1xuICAgICAgICBpZiAoIS9eXFxkK1xcLlxcZCtcXC5cXGQrKC1jYW5hcnkpPy8udGVzdChzcGVjVmVyc2lvbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29uZmlndXJlZCB2ZXJzaW9uICcuY29uY2F0KHNwZWNWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9zcGVjVmVyc2lvbiRzcGxpdCA9IHNwZWNWZXJzaW9uLnNwbGl0KCctJyksIF9zcGVjVmVyc2lvbiRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfc3BlY1ZlcnNpb24kc3BsaXQsIDIpLCB2ZXJzaW9uID0gX3NwZWNWZXJzaW9uJHNwbGl0MlswXSwgY2FuYXJ5ID0gX3NwZWNWZXJzaW9uJHNwbGl0MlsxXTtcbiAgICAgICAgdmFyIF92ZXJzaW9uJHNwbGl0JG1hcCA9IHZlcnNpb24uc3BsaXQoJy4nKS5tYXAoTnVtYmVyKSwgX3ZlcnNpb24kc3BsaXQkbWFwMiA9IF9zbGljZWRUb0FycmF5KF92ZXJzaW9uJHNwbGl0JG1hcCwgMyksIG1ham9yID0gX3ZlcnNpb24kc3BsaXQkbWFwMlswXSwgbWlub3IgPSBfdmVyc2lvbiRzcGxpdCRtYXAyWzFdLCBwYXRjaCA9IF92ZXJzaW9uJHNwbGl0JG1hcDJbMl07XG4gICAgICAgIHZhciBfYXhlJHZlcnNpb24kc3BsaXQgPSBheGUudmVyc2lvbi5zcGxpdCgnLScpLCBfYXhlJHZlcnNpb24kc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX2F4ZSR2ZXJzaW9uJHNwbGl0LCAyKSwgYXhlVmVyc2lvbiA9IF9heGUkdmVyc2lvbiRzcGxpdDJbMF0sIGF4ZUNhbmFyeSA9IF9heGUkdmVyc2lvbiRzcGxpdDJbMV07XG4gICAgICAgIHZhciBfYXhlVmVyc2lvbiRzcGxpdCRtYXAgPSBheGVWZXJzaW9uLnNwbGl0KCcuJykubWFwKE51bWJlciksIF9heGVWZXJzaW9uJHNwbGl0JG1hcDIgPSBfc2xpY2VkVG9BcnJheShfYXhlVmVyc2lvbiRzcGxpdCRtYXAsIDMpLCBheGVNYWpvciA9IF9heGVWZXJzaW9uJHNwbGl0JG1hcDJbMF0sIGF4ZU1pbm9yID0gX2F4ZVZlcnNpb24kc3BsaXQkbWFwMlsxXSwgYXhlUGF0Y2ggPSBfYXhlVmVyc2lvbiRzcGxpdCRtYXAyWzJdO1xuICAgICAgICBpZiAobWFqb3IgIT09IGF4ZU1ham9yIHx8IGF4ZU1pbm9yIDwgbWlub3IgfHwgYXhlTWlub3IgPT09IG1pbm9yICYmIGF4ZVBhdGNoIDwgcGF0Y2ggfHwgbWFqb3IgPT09IGF4ZU1ham9yICYmIG1pbm9yID09PSBheGVNaW5vciAmJiBwYXRjaCA9PT0gYXhlUGF0Y2ggJiYgY2FuYXJ5ICYmIGNhbmFyeSAhPT0gYXhlQ2FuYXJ5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25maWd1cmVkIHZlcnNpb24gJy5jb25jYXQoc3BlY1ZlcnNpb24sICcgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBjdXJyZW50IGF4ZSB2ZXJzaW9uICcpLmNvbmNhdChheGUudmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3BlYy5yZXBvcnRlciAmJiAodHlwZW9mIHNwZWMucmVwb3J0ZXIgPT09ICdmdW5jdGlvbicgfHwgaGFzUmVwb3J0ZXIoc3BlYy5yZXBvcnRlcikpKSB7XG4gICAgICAgIGF1ZGl0LnJlcG9ydGVyID0gc3BlYy5yZXBvcnRlcjtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmNoZWNrcykge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3BlYy5jaGVja3MpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2hlY2tzIHByb3BlcnR5IG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBzcGVjLmNoZWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNoZWNrKSB7XG4gICAgICAgICAgaWYgKCFjaGVjay5pZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uZmlndXJlZCBjaGVjayAnLmNvbmNhdChKU09OLnN0cmluZ2lmeShjaGVjayksICcgaXMgaW52YWxpZC4gQ2hlY2tzIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYXQgbGVhc3QgYW4gaWQgcHJvcGVydHknKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF1ZGl0LmFkZENoZWNrKGNoZWNrKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB2YXIgbW9kaWZpZWRSdWxlcyA9IFtdO1xuICAgICAgaWYgKHNwZWMucnVsZXMpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNwZWMucnVsZXMpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUnVsZXMgcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHNwZWMucnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgaWYgKCFydWxlLmlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25maWd1cmVkIHJ1bGUgJy5jb25jYXQoSlNPTi5zdHJpbmdpZnkocnVsZSksICcgaXMgaW52YWxpZC4gUnVsZXMgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhdCBsZWFzdCBhbiBpZCBwcm9wZXJ0eScpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbW9kaWZpZWRSdWxlcy5wdXNoKHJ1bGUuaWQpO1xuICAgICAgICAgIGF1ZGl0LmFkZFJ1bGUocnVsZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHNwZWMuZGlzYWJsZU90aGVyUnVsZXMpIHtcbiAgICAgICAgYXVkaXQucnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgaWYgKG1vZGlmaWVkUnVsZXMuaW5jbHVkZXMocnVsZS5pZCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBydWxlLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzcGVjLmJyYW5kaW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhdWRpdC5zZXRCcmFuZGluZyhzcGVjLmJyYW5kaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF1ZGl0Ll9jb25zdHJ1Y3RIZWxwVXJscygpO1xuICAgICAgfVxuICAgICAgaWYgKHNwZWMudGFnRXhjbHVkZSkge1xuICAgICAgICBhdWRpdC50YWdFeGNsdWRlID0gc3BlYy50YWdFeGNsdWRlO1xuICAgICAgfVxuICAgICAgaWYgKHNwZWMubG9jYWxlKSB7XG4gICAgICAgIGF1ZGl0LmFwcGx5TG9jYWxlKHNwZWMubG9jYWxlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLnN0YW5kYXJkcykge1xuICAgICAgICBjb25maWd1cmVTdGFuZGFyZHMoc3BlYy5zdGFuZGFyZHMpO1xuICAgICAgfVxuICAgICAgaWYgKHNwZWMubm9IdG1sKSB7XG4gICAgICAgIGF1ZGl0Lm5vSHRtbCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoc3BlYy5hbGxvd2VkT3JpZ2lucykge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3BlYy5hbGxvd2VkT3JpZ2lucykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbGxvd2VkIG9yaWdpbnMgcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGVjLmFsbG93ZWRPcmlnaW5zLmluY2x1ZGVzKCcqJykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiKlwiIGlzIG5vdCBhbGxvd2VkLiBVc2UgXCInLmNvbmNhdChjb25zdGFudHNfZGVmYXVsdC5hbGxPcmlnaW5zLCAnXCIgaW5zdGVhZCcpKTtcbiAgICAgICAgfVxuICAgICAgICBhdWRpdC5zZXRBbGxvd2VkT3JpZ2lucyhzcGVjLmFsbG93ZWRPcmlnaW5zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNvbmZpZ3VyZV9kZWZhdWx0ID0gY29uZmlndXJlO1xuICAgIGZ1bmN0aW9uIGZyYW1lTWVzc2VuZ2VyMihmcmFtZUhhbmRsZXIpIHtcbiAgICAgIF9yZXNwb25kYWJsZS51cGRhdGVNZXNzZW5nZXIoZnJhbWVIYW5kbGVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UnVsZXModGFncykge1xuICAgICAgdGFncyA9IHRhZ3MgfHwgW107XG4gICAgICB2YXIgbWF0Y2hpbmdSdWxlcyA9ICF0YWdzLmxlbmd0aCA/IGF4ZS5fYXVkaXQucnVsZXMgOiBheGUuX2F1ZGl0LnJ1bGVzLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiAhIXRhZ3MuZmlsdGVyKGZ1bmN0aW9uKHRhZykge1xuICAgICAgICAgIHJldHVybiBpdGVtLnRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMTtcbiAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgfSk7XG4gICAgICB2YXIgcnVsZURhdGEgPSBheGUuX2F1ZGl0LmRhdGEucnVsZXMgfHwge307XG4gICAgICByZXR1cm4gbWF0Y2hpbmdSdWxlcy5tYXAoZnVuY3Rpb24obWF0Y2hpbmdSdWxlKSB7XG4gICAgICAgIHZhciByZCA9IHJ1bGVEYXRhW21hdGNoaW5nUnVsZS5pZF0gfHwge307XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcnVsZUlkOiBtYXRjaGluZ1J1bGUuaWQsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHJkLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGhlbHA6IHJkLmhlbHAsXG4gICAgICAgICAgaGVscFVybDogcmQuaGVscFVybCxcbiAgICAgICAgICB0YWdzOiBtYXRjaGluZ1J1bGUudGFncyxcbiAgICAgICAgICBhY3RJZHM6IG1hdGNoaW5nUnVsZS5hY3RJZHNcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgZ2V0X3J1bGVzX2RlZmF1bHQgPSBnZXRSdWxlcztcbiAgICBmdW5jdGlvbiBoaWRkZW5Db250ZW50RXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBhbGxvd2xpc3QgPSBbICdTQ1JJUFQnLCAnSEVBRCcsICdUSVRMRScsICdOT1NDUklQVCcsICdTVFlMRScsICdURU1QTEFURScgXTtcbiAgICAgIGlmICghYWxsb3dsaXN0LmluY2x1ZGVzKG5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKSkgJiYgaGFzX2NvbnRlbnRfdmlydHVhbF9kZWZhdWx0KHZpcnR1YWxOb2RlKSkge1xuICAgICAgICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGlmIChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCd2aXNpYmlsaXR5JykgPT09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgdmFyIHBhcmVudCA9IGdldF9jb21wb3NlZF9wYXJlbnRfZGVmYXVsdChub2RlKTtcbiAgICAgICAgICB2YXIgcGFyZW50U3R5bGUgPSBwYXJlbnQgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcbiAgICAgICAgICBpZiAoIXBhcmVudFN0eWxlIHx8IHBhcmVudFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGhpZGRlbl9jb250ZW50X2V2YWx1YXRlX2RlZmF1bHQgPSBoaWRkZW5Db250ZW50RXZhbHVhdGU7XG4gICAgdmFyIHRhYmxlX2V4cG9ydHMgPSB7fTtcbiAgICBfX2V4cG9ydCh0YWJsZV9leHBvcnRzLCB7XG4gICAgICBnZXRBbGxDZWxsczogZnVuY3Rpb24gZ2V0QWxsQ2VsbHMoKSB7XG4gICAgICAgIHJldHVybiBnZXRfYWxsX2NlbGxzX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0Q2VsbFBvc2l0aW9uOiBmdW5jdGlvbiBnZXRDZWxsUG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRfY2VsbF9wb3NpdGlvbl9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldEhlYWRlcnM6IGZ1bmN0aW9uIGdldEhlYWRlcnMoKSB7XG4gICAgICAgIHJldHVybiBnZXRfaGVhZGVyc19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFNjb3BlOiBmdW5jdGlvbiBnZXRTY29wZSgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRTY29wZTtcbiAgICAgIH0sXG4gICAgICBpc0NvbHVtbkhlYWRlcjogZnVuY3Rpb24gaXNDb2x1bW5IZWFkZXIoKSB7XG4gICAgICAgIHJldHVybiBpc19jb2x1bW5faGVhZGVyX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNEYXRhQ2VsbDogZnVuY3Rpb24gaXNEYXRhQ2VsbCgpIHtcbiAgICAgICAgcmV0dXJuIGlzX2RhdGFfY2VsbF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGlzRGF0YVRhYmxlOiBmdW5jdGlvbiBpc0RhdGFUYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIGlzX2RhdGFfdGFibGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc0hlYWRlcjogZnVuY3Rpb24gaXNIZWFkZXIoKSB7XG4gICAgICAgIHJldHVybiBpc19oZWFkZXJfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc1Jvd0hlYWRlcjogZnVuY3Rpb24gaXNSb3dIZWFkZXIoKSB7XG4gICAgICAgIHJldHVybiBpc19yb3dfaGVhZGVyX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRvX2dyaWRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB0b0dyaWQ6IGZ1bmN0aW9uIHRvR3JpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRvX2dyaWRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB0cmF2ZXJzZTogZnVuY3Rpb24gdHJhdmVyc2UoKSB7XG4gICAgICAgIHJldHVybiB0cmF2ZXJzZV9kZWZhdWx0O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGdldEFsbENlbGxzKHRhYmxlRWxtKSB7XG4gICAgICB2YXIgcm93SW5kZXgsIGNlbGxJbmRleCwgcm93TGVuZ3RoLCBjZWxsTGVuZ3RoO1xuICAgICAgdmFyIGNlbGxzID0gW107XG4gICAgICBmb3IgKHJvd0luZGV4ID0gMCwgcm93TGVuZ3RoID0gdGFibGVFbG0ucm93cy5sZW5ndGg7IHJvd0luZGV4IDwgcm93TGVuZ3RoOyByb3dJbmRleCsrKSB7XG4gICAgICAgIGZvciAoY2VsbEluZGV4ID0gMCwgY2VsbExlbmd0aCA9IHRhYmxlRWxtLnJvd3Nbcm93SW5kZXhdLmNlbGxzLmxlbmd0aDsgY2VsbEluZGV4IDwgY2VsbExlbmd0aDsgY2VsbEluZGV4KyspIHtcbiAgICAgICAgICBjZWxscy5wdXNoKHRhYmxlRWxtLnJvd3Nbcm93SW5kZXhdLmNlbGxzW2NlbGxJbmRleF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY2VsbHM7XG4gICAgfVxuICAgIHZhciBnZXRfYWxsX2NlbGxzX2RlZmF1bHQgPSBnZXRBbGxDZWxscztcbiAgICBmdW5jdGlvbiB0cmF2ZXJzZUZvckhlYWRlcnMoaGVhZGVyVHlwZSwgcG9zaXRpb24sIHRhYmxlR3JpZCkge1xuICAgICAgdmFyIHByb3BlcnR5ID0gaGVhZGVyVHlwZSA9PT0gJ3JvdycgPyAnX3Jvd0hlYWRlcnMnIDogJ19jb2xIZWFkZXJzJztcbiAgICAgIHZhciBwcmVkaWNhdGUgPSBoZWFkZXJUeXBlID09PSAncm93JyA/IGlzX3Jvd19oZWFkZXJfZGVmYXVsdCA6IGlzX2NvbHVtbl9oZWFkZXJfZGVmYXVsdDtcbiAgICAgIHZhciBzdGFydENlbGwgPSB0YWJsZUdyaWRbcG9zaXRpb24ueV1bcG9zaXRpb24ueF07XG4gICAgICB2YXIgY29sc3BhbiA9IHN0YXJ0Q2VsbC5jb2xTcGFuIC0gMTtcbiAgICAgIHZhciByb3dzcGFuQXR0ciA9IHN0YXJ0Q2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvd3NwYW4nKTtcbiAgICAgIHZhciByb3dzcGFuVmFsdWUgPSBwYXJzZUludChyb3dzcGFuQXR0cikgPT09IDAgfHwgc3RhcnRDZWxsLnJvd3NwYW4gPT09IDAgPyB0YWJsZUdyaWQubGVuZ3RoIDogc3RhcnRDZWxsLnJvd1NwYW47XG4gICAgICB2YXIgcm93c3BhbiA9IHJvd3NwYW5WYWx1ZSAtIDE7XG4gICAgICB2YXIgcm93U3RhcnQgPSBwb3NpdGlvbi55ICsgcm93c3BhbjtcbiAgICAgIHZhciBjb2xTdGFydCA9IHBvc2l0aW9uLnggKyBjb2xzcGFuO1xuICAgICAgdmFyIHJvd0VuZCA9IGhlYWRlclR5cGUgPT09ICdyb3cnID8gcG9zaXRpb24ueSA6IDA7XG4gICAgICB2YXIgY29sRW5kID0gaGVhZGVyVHlwZSA9PT0gJ3JvdycgPyAwIDogcG9zaXRpb24ueDtcbiAgICAgIHZhciBoZWFkZXJzO1xuICAgICAgdmFyIGNlbGxzID0gW107XG4gICAgICBmb3IgKHZhciByb3cgPSByb3dTdGFydDsgcm93ID49IHJvd0VuZCAmJiAhaGVhZGVyczsgcm93LS0pIHtcbiAgICAgICAgZm9yICh2YXIgY29sID0gY29sU3RhcnQ7IGNvbCA+PSBjb2xFbmQ7IGNvbC0tKSB7XG4gICAgICAgICAgdmFyIGNlbGwgPSB0YWJsZUdyaWRbcm93XSA/IHRhYmxlR3JpZFtyb3ddW2NvbF0gOiB2b2lkIDA7XG4gICAgICAgICAgaWYgKCFjZWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHZOb2RlID0gYXhlLnV0aWxzLmdldE5vZGVGcm9tVHJlZShjZWxsKTtcbiAgICAgICAgICBpZiAodk5vZGVbcHJvcGVydHldKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gdk5vZGVbcHJvcGVydHldO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNlbGxzLnB1c2goY2VsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGhlYWRlcnMgPSAoaGVhZGVycyB8fCBbXSkuY29uY2F0KGNlbGxzLmZpbHRlcihwcmVkaWNhdGUpKTtcbiAgICAgIGNlbGxzLmZvckVhY2goZnVuY3Rpb24odGFibGVDZWxsKSB7XG4gICAgICAgIHZhciB2Tm9kZSA9IGF4ZS51dGlscy5nZXROb2RlRnJvbVRyZWUodGFibGVDZWxsKTtcbiAgICAgICAgdk5vZGVbcHJvcGVydHldID0gaGVhZGVycztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEhlYWRlcnMoY2VsbCwgdGFibGVHcmlkKSB7XG4gICAgICBpZiAoY2VsbC5nZXRBdHRyaWJ1dGUoJ2hlYWRlcnMnKSkge1xuICAgICAgICB2YXIgaGVhZGVycyA9IGlkcmVmc19kZWZhdWx0KGNlbGwsICdoZWFkZXJzJyk7XG4gICAgICAgIGlmIChoZWFkZXJzLmZpbHRlcihmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgICByZXR1cm4gaGVhZGVyO1xuICAgICAgICB9KS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gaGVhZGVycztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF0YWJsZUdyaWQpIHtcbiAgICAgICAgdGFibGVHcmlkID0gdG9fZ3JpZF9kZWZhdWx0KGZpbmRfdXBfZGVmYXVsdChjZWxsLCAndGFibGUnKSk7XG4gICAgICB9XG4gICAgICB2YXIgcG9zaXRpb24gPSBnZXRfY2VsbF9wb3NpdGlvbl9kZWZhdWx0KGNlbGwsIHRhYmxlR3JpZCk7XG4gICAgICB2YXIgcm93SGVhZGVycyA9IHRyYXZlcnNlRm9ySGVhZGVycygncm93JywgcG9zaXRpb24sIHRhYmxlR3JpZCk7XG4gICAgICB2YXIgY29sSGVhZGVycyA9IHRyYXZlcnNlRm9ySGVhZGVycygnY29sJywgcG9zaXRpb24sIHRhYmxlR3JpZCk7XG4gICAgICByZXR1cm4gW10uY29uY2F0KHJvd0hlYWRlcnMsIGNvbEhlYWRlcnMpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgdmFyIGdldF9oZWFkZXJzX2RlZmF1bHQgPSBnZXRIZWFkZXJzO1xuICAgIGZ1bmN0aW9uIGlzRGF0YUNlbGwoY2VsbCkge1xuICAgICAgaWYgKCFjZWxsLmNoaWxkcmVuLmxlbmd0aCAmJiAhY2VsbC50ZXh0Q29udGVudC50cmltKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJvbGUgPSBjZWxsLmdldEF0dHJpYnV0ZSgncm9sZScpO1xuICAgICAgaWYgKGlzX3ZhbGlkX3JvbGVfZGVmYXVsdChyb2xlKSkge1xuICAgICAgICByZXR1cm4gWyAnY2VsbCcsICdncmlkY2VsbCcgXS5pbmNsdWRlcyhyb2xlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjZWxsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdURCc7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBpc19kYXRhX2NlbGxfZGVmYXVsdCA9IGlzRGF0YUNlbGw7XG4gICAgZnVuY3Rpb24gaXNEYXRhVGFibGUobm9kZSkge1xuICAgICAgdmFyIHJvbGUgPSAobm9kZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICgocm9sZSA9PT0gJ3ByZXNlbnRhdGlvbicgfHwgcm9sZSA9PT0gJ25vbmUnKSAmJiAhX2lzRm9jdXNhYmxlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJykgPT09ICd0cnVlJyB8fCBmaW5kX3VwX2RlZmF1bHQobm9kZSwgJ1tjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdJykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAocm9sZSA9PT0gJ2dyaWQnIHx8IHJvbGUgPT09ICd0cmVlZ3JpZCcgfHwgcm9sZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChnZXRfcm9sZV90eXBlX2RlZmF1bHQocm9sZSkgPT09ICdsYW5kbWFyaycpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGF0YWJsZScpID09PSAnMCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKCdzdW1tYXJ5JykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS50SGVhZCB8fCBub2RlLnRGb290IHx8IG5vZGUuY2FwdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGNoaWxkSW5kZXggPSAwLCBjaGlsZExlbmd0aCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBjaGlsZEluZGV4IDwgY2hpbGRMZW5ndGg7IGNoaWxkSW5kZXgrKykge1xuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbltjaGlsZEluZGV4XS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnQ09MR1JPVVAnKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjZWxscyA9IDA7XG4gICAgICB2YXIgcm93TGVuZ3RoID0gbm9kZS5yb3dzLmxlbmd0aDtcbiAgICAgIHZhciByb3csIGNlbGw7XG4gICAgICB2YXIgaGFzQm9yZGVyID0gZmFsc2U7XG4gICAgICBmb3IgKHZhciByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgcm93TGVuZ3RoOyByb3dJbmRleCsrKSB7XG4gICAgICAgIHJvdyA9IG5vZGUucm93c1tyb3dJbmRleF07XG4gICAgICAgIGZvciAodmFyIGNlbGxJbmRleCA9IDAsIGNlbGxMZW5ndGggPSByb3cuY2VsbHMubGVuZ3RoOyBjZWxsSW5kZXggPCBjZWxsTGVuZ3RoOyBjZWxsSW5kZXgrKykge1xuICAgICAgICAgIGNlbGwgPSByb3cuY2VsbHNbY2VsbEluZGV4XTtcbiAgICAgICAgICBpZiAoY2VsbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnVEgnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFoYXNCb3JkZXIgJiYgKGNlbGwub2Zmc2V0V2lkdGggIT09IGNlbGwuY2xpZW50V2lkdGggfHwgY2VsbC5vZmZzZXRIZWlnaHQgIT09IGNlbGwuY2xpZW50SGVpZ2h0KSkge1xuICAgICAgICAgICAgaGFzQm9yZGVyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNlbGwuZ2V0QXR0cmlidXRlKCdzY29wZScpIHx8IGNlbGwuZ2V0QXR0cmlidXRlKCdoZWFkZXJzJykgfHwgY2VsbC5nZXRBdHRyaWJ1dGUoJ2FiYnInKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChbICdjb2x1bW5oZWFkZXInLCAncm93aGVhZGVyJyBdLmluY2x1ZGVzKChjZWxsLmdldEF0dHJpYnV0ZSgncm9sZScpIHx8ICcnKS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjZWxsLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBjZWxsLmNoaWxkcmVuWzBdLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdBQkJSJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNlbGxzKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0YWJsZScpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAocm93TGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgc2FtcGxlUm93ID0gbm9kZS5yb3dzW01hdGguY2VpbChyb3dMZW5ndGggLyAyKV07XG4gICAgICBpZiAoc2FtcGxlUm93LmNlbGxzLmxlbmd0aCA9PT0gMSAmJiBzYW1wbGVSb3cuY2VsbHNbMF0uY29sU3BhbiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc2FtcGxlUm93LmNlbGxzLmxlbmd0aCA+PSA1KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGhhc0JvcmRlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBiZ0NvbG9yLCBiZ0ltYWdlO1xuICAgICAgZm9yICh2YXIgX3Jvd0luZGV4ID0gMDsgX3Jvd0luZGV4IDwgcm93TGVuZ3RoOyBfcm93SW5kZXgrKykge1xuICAgICAgICByb3cgPSBub2RlLnJvd3NbX3Jvd0luZGV4XTtcbiAgICAgICAgaWYgKGJnQ29sb3IgJiYgYmdDb2xvciAhPT0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocm93KS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLWNvbG9yJykpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZ0NvbG9yID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocm93KS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJnSW1hZ2UgJiYgYmdJbWFnZSAhPT0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocm93KS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLWltYWdlJykpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZ0ltYWdlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocm93KS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLWltYWdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyb3dMZW5ndGggPj0gMjApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZ2V0X2VsZW1lbnRfY29vcmRpbmF0ZXNfZGVmYXVsdChub2RlKS53aWR0aCA+IGdldF92aWV3cG9ydF9zaXplX2RlZmF1bHQod2luZG93KS53aWR0aCAqIC45NSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoY2VsbHMgPCAxMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5xdWVyeVNlbGVjdG9yKCdvYmplY3QsIGVtYmVkLCBpZnJhbWUsIGFwcGxldCcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgaXNfZGF0YV90YWJsZV9kZWZhdWx0ID0gaXNEYXRhVGFibGU7XG4gICAgZnVuY3Rpb24gaXNIZWFkZXIoY2VsbCkge1xuICAgICAgaWYgKGlzX2NvbHVtbl9oZWFkZXJfZGVmYXVsdChjZWxsKSB8fCBpc19yb3dfaGVhZGVyX2RlZmF1bHQoY2VsbCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY2VsbC5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcbiAgICAgICAgdmFyIF9pZDIgPSBlc2NhcGVfc2VsZWN0b3JfZGVmYXVsdChjZWxsLmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgICAgIHJldHVybiAhIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1toZWFkZXJzfj1cIicuY29uY2F0KF9pZDIsICdcIl0nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpc19oZWFkZXJfZGVmYXVsdCA9IGlzSGVhZGVyO1xuICAgIGZ1bmN0aW9uIHRyYXZlcnNlVGFibGUoZGlyLCBwb3NpdGlvbiwgdGFibGVHcmlkLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHZhciBjZWxsID0gdGFibGVHcmlkW3Bvc2l0aW9uLnldID8gdGFibGVHcmlkW3Bvc2l0aW9uLnldW3Bvc2l0aW9uLnhdIDogdm9pZCAwO1xuICAgICAgaWYgKCFjZWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soY2VsbCwgcG9zaXRpb24sIHRhYmxlR3JpZCk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gWyBjZWxsIF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHRyYXZlcnNlVGFibGUoZGlyLCB7XG4gICAgICAgIHg6IHBvc2l0aW9uLnggKyBkaXIueCxcbiAgICAgICAgeTogcG9zaXRpb24ueSArIGRpci55XG4gICAgICB9LCB0YWJsZUdyaWQsIGNhbGxiYWNrKTtcbiAgICAgIHJlc3VsdC51bnNoaWZ0KGNlbGwpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhdmVyc2UoZGlyLCBzdGFydFBvcywgdGFibGVHcmlkLCBjYWxsYmFjaykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3RhcnRQb3MpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gdGFibGVHcmlkO1xuICAgICAgICB0YWJsZUdyaWQgPSBzdGFydFBvcztcbiAgICAgICAgc3RhcnRQb3MgPSB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRpciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3dpdGNoIChkaXIpIHtcbiAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIGRpciA9IHtcbiAgICAgICAgICAgIHg6IC0xLFxuICAgICAgICAgICAgeTogMFxuICAgICAgICAgIH07XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICBkaXIgPSB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogLTFcbiAgICAgICAgICB9O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgZGlyID0ge1xuICAgICAgICAgICAgeDogMSxcbiAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICB9O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICBkaXIgPSB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMVxuICAgICAgICAgIH07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cmF2ZXJzZVRhYmxlKGRpciwge1xuICAgICAgICB4OiBzdGFydFBvcy54ICsgZGlyLngsXG4gICAgICAgIHk6IHN0YXJ0UG9zLnkgKyBkaXIueVxuICAgICAgfSwgdGFibGVHcmlkLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIHZhciB0cmF2ZXJzZV9kZWZhdWx0ID0gdHJhdmVyc2U7XG4gICAgZnVuY3Rpb24gdGhIYXNEYXRhQ2VsbHNFdmFsdWF0ZShub2RlKSB7XG4gICAgICB2YXIgY2VsbHMgPSBnZXRfYWxsX2NlbGxzX2RlZmF1bHQobm9kZSk7XG4gICAgICB2YXIgY2hlY2tSZXN1bHQgPSB0aGlzO1xuICAgICAgdmFyIHJlZmZlZEhlYWRlcnMgPSBbXTtcbiAgICAgIGNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICB2YXIgaGVhZGVyczIgPSBjZWxsLmdldEF0dHJpYnV0ZSgnaGVhZGVycycpO1xuICAgICAgICBpZiAoaGVhZGVyczIpIHtcbiAgICAgICAgICByZWZmZWRIZWFkZXJzID0gcmVmZmVkSGVhZGVycy5jb25jYXQoaGVhZGVyczIuc3BsaXQoL1xccysvKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyaWFMYWJlbCA9IGNlbGwuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgICAgaWYgKGFyaWFMYWJlbCkge1xuICAgICAgICAgIHJlZmZlZEhlYWRlcnMgPSByZWZmZWRIZWFkZXJzLmNvbmNhdChhcmlhTGFiZWwuc3BsaXQoL1xccysvKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGhlYWRlcnMgPSBjZWxscy5maWx0ZXIoZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICBpZiAoc2FuaXRpemVfZGVmYXVsdChjZWxsLnRleHRDb250ZW50KSA9PT0gJycpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlbGwubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1RIJyB8fCBbICdyb3doZWFkZXInLCAnY29sdW1uaGVhZGVyJyBdLmluZGV4T2YoY2VsbC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSkgIT09IC0xO1xuICAgICAgfSk7XG4gICAgICB2YXIgdGFibGVHcmlkID0gdG9fZ3JpZF9kZWZhdWx0KG5vZGUpO1xuICAgICAgdmFyIG91dCA9IHRydWU7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIGlmIChoZWFkZXIuZ2V0QXR0cmlidXRlKCdpZCcpICYmIHJlZmZlZEhlYWRlcnMuaW5jbHVkZXMoaGVhZGVyLmdldEF0dHJpYnV0ZSgnaWQnKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBvcyA9IGdldF9jZWxsX3Bvc2l0aW9uX2RlZmF1bHQoaGVhZGVyLCB0YWJsZUdyaWQpO1xuICAgICAgICB2YXIgaGFzQ2VsbCA9IGZhbHNlO1xuICAgICAgICBpZiAoaXNfY29sdW1uX2hlYWRlcl9kZWZhdWx0KGhlYWRlcikpIHtcbiAgICAgICAgICBoYXNDZWxsID0gdHJhdmVyc2VfZGVmYXVsdCgnZG93bicsIHBvcywgdGFibGVHcmlkKS5maW5kKGZ1bmN0aW9uKGNlbGwpIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNfY29sdW1uX2hlYWRlcl9kZWZhdWx0KGNlbGwpICYmIGdldF9oZWFkZXJzX2RlZmF1bHQoY2VsbCwgdGFibGVHcmlkKS5pbmNsdWRlcyhoZWFkZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaGFzQ2VsbCAmJiBpc19yb3dfaGVhZGVyX2RlZmF1bHQoaGVhZGVyKSkge1xuICAgICAgICAgIGhhc0NlbGwgPSB0cmF2ZXJzZV9kZWZhdWx0KCdyaWdodCcsIHBvcywgdGFibGVHcmlkKS5maW5kKGZ1bmN0aW9uKGNlbGwpIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNfcm93X2hlYWRlcl9kZWZhdWx0KGNlbGwpICYmIGdldF9oZWFkZXJzX2RlZmF1bHQoY2VsbCwgdGFibGVHcmlkKS5pbmNsdWRlcyhoZWFkZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaGFzQ2VsbCkge1xuICAgICAgICAgIGNoZWNrUmVzdWx0LnJlbGF0ZWROb2RlcyhoZWFkZXIpO1xuICAgICAgICB9XG4gICAgICAgIG91dCA9IG91dCAmJiBoYXNDZWxsO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb3V0ID8gdHJ1ZSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdmFyIHRoX2hhc19kYXRhX2NlbGxzX2V2YWx1YXRlX2RlZmF1bHQgPSB0aEhhc0RhdGFDZWxsc0V2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIHRkSGVhZGVyc0F0dHJFdmFsdWF0ZShub2RlKSB7XG4gICAgICB2YXIgY2VsbHMgPSBbXTtcbiAgICAgIHZhciByZXZpZXdDZWxscyA9IFtdO1xuICAgICAgdmFyIGJhZENlbGxzID0gW107XG4gICAgICBmb3IgKHZhciByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgbm9kZS5yb3dzLmxlbmd0aDsgcm93SW5kZXgrKykge1xuICAgICAgICB2YXIgcm93ID0gbm9kZS5yb3dzW3Jvd0luZGV4XTtcbiAgICAgICAgZm9yICh2YXIgY2VsbEluZGV4ID0gMDsgY2VsbEluZGV4IDwgcm93LmNlbGxzLmxlbmd0aDsgY2VsbEluZGV4KyspIHtcbiAgICAgICAgICBjZWxscy5wdXNoKHJvdy5jZWxsc1tjZWxsSW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGlkcyA9IGNlbGxzLmZpbHRlcihmdW5jdGlvbihjZWxsKSB7XG4gICAgICAgIHJldHVybiBjZWxsLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgIH0pLm1hcChmdW5jdGlvbihjZWxsKSB7XG4gICAgICAgIHJldHVybiBjZWxsLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgIH0pO1xuICAgICAgY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKSB7XG4gICAgICAgIHZhciBpc1NlbGYgPSBmYWxzZTtcbiAgICAgICAgdmFyIG5vdE9mVGFibGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFjZWxsLmhhc0F0dHJpYnV0ZSgnaGVhZGVycycpIHx8ICFfaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzKGNlbGwpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoZWFkZXJzQXR0ciA9IGNlbGwuZ2V0QXR0cmlidXRlKCdoZWFkZXJzJykudHJpbSgpO1xuICAgICAgICBpZiAoIWhlYWRlcnNBdHRyKSB7XG4gICAgICAgICAgcmV0dXJuIHJldmlld0NlbGxzLnB1c2goY2VsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhlYWRlcnMgPSB0b2tlbl9saXN0X2RlZmF1bHQoaGVhZGVyc0F0dHIpO1xuICAgICAgICBpZiAoaGVhZGVycy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBpZiAoY2VsbC5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcbiAgICAgICAgICAgIGlzU2VsZiA9IGhlYWRlcnMuaW5kZXhPZihjZWxsLmdldEF0dHJpYnV0ZSgnaWQnKS50cmltKCkpICE9PSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm90T2ZUYWJsZSA9IGhlYWRlcnMuc29tZShmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAhaWRzLmluY2x1ZGVzKGhlYWRlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGlzU2VsZiB8fCBub3RPZlRhYmxlKSB7XG4gICAgICAgICAgICBiYWRDZWxscy5wdXNoKGNlbGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoYmFkQ2VsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhiYWRDZWxscyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXZpZXdDZWxscy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5yZWxhdGVkTm9kZXMocmV2aWV3Q2VsbHMpO1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhcmlhX2V4cG9ydHMgPSB7fTtcbiAgICBfX2V4cG9ydChhcmlhX2V4cG9ydHMsIHtcbiAgICAgIGFsbG93ZWRBdHRyOiBmdW5jdGlvbiBhbGxvd2VkQXR0cigpIHtcbiAgICAgICAgcmV0dXJuIGFsbG93ZWRfYXR0cl9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGFyaWFsYWJlbFRleHQ6IGZ1bmN0aW9uIGFyaWFsYWJlbFRleHQoKSB7XG4gICAgICAgIHJldHVybiBfYXJpYWxhYmVsVGV4dDtcbiAgICAgIH0sXG4gICAgICBhcmlhbGFiZWxsZWRieVRleHQ6IGZ1bmN0aW9uIGFyaWFsYWJlbGxlZGJ5VGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIGFyaWFsYWJlbGxlZGJ5X3RleHRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRBY2Nlc3NpYmxlUmVmczogZnVuY3Rpb24gZ2V0QWNjZXNzaWJsZVJlZnMoKSB7XG4gICAgICAgIHJldHVybiBnZXRfYWNjZXNzaWJsZV9yZWZzX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0RWxlbWVudFVuYWxsb3dlZFJvbGVzOiBmdW5jdGlvbiBnZXRFbGVtZW50VW5hbGxvd2VkUm9sZXMoKSB7XG4gICAgICAgIHJldHVybiBnZXRfZWxlbWVudF91bmFsbG93ZWRfcm9sZXNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRFeHBsaWNpdFJvbGU6IGZ1bmN0aW9uIGdldEV4cGxpY2l0Um9sZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0SW1wbGljaXRSb2xlOiBmdW5jdGlvbiBnZXRJbXBsaWNpdFJvbGUoKSB7XG4gICAgICAgIHJldHVybiBpbXBsaWNpdF9yb2xlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0T3duZWRWaXJ0dWFsOiBmdW5jdGlvbiBnZXRPd25lZFZpcnR1YWwoKSB7XG4gICAgICAgIHJldHVybiBnZXRfb3duZWRfdmlydHVhbF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFJvbGU6IGZ1bmN0aW9uIGdldFJvbGUoKSB7XG4gICAgICAgIHJldHVybiBnZXRfcm9sZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFJvbGVUeXBlOiBmdW5jdGlvbiBnZXRSb2xlVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldF9yb2xlX3R5cGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRSb2xlc0J5VHlwZTogZnVuY3Rpb24gZ2V0Um9sZXNCeVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBnZXRfcm9sZXNfYnlfdHlwZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFJvbGVzV2l0aE5hbWVGcm9tQ29udGVudHM6IGZ1bmN0aW9uIGdldFJvbGVzV2l0aE5hbWVGcm9tQ29udGVudHMoKSB7XG4gICAgICAgIHJldHVybiBnZXRfcm9sZXNfd2l0aF9uYW1lX2Zyb21fY29udGVudHNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpbXBsaWNpdE5vZGVzOiBmdW5jdGlvbiBpbXBsaWNpdE5vZGVzKCkge1xuICAgICAgICByZXR1cm4gaW1wbGljaXRfbm9kZXNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpbXBsaWNpdFJvbGU6IGZ1bmN0aW9uIGltcGxpY2l0Um9sZSgpIHtcbiAgICAgICAgcmV0dXJuIGltcGxpY2l0X3JvbGVfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc0FjY2Vzc2libGVSZWY6IGZ1bmN0aW9uIGlzQWNjZXNzaWJsZVJlZigpIHtcbiAgICAgICAgcmV0dXJuIGlzX2FjY2Vzc2libGVfcmVmX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNBcmlhUm9sZUFsbG93ZWRPbkVsZW1lbnQ6IGZ1bmN0aW9uIGlzQXJpYVJvbGVBbGxvd2VkT25FbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gaXNfYXJpYV9yb2xlX2FsbG93ZWRfb25fZWxlbWVudF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGlzQ29tYm9ib3hQb3B1cDogZnVuY3Rpb24gaXNDb21ib2JveFBvcHVwKCkge1xuICAgICAgICByZXR1cm4gX2lzQ29tYm9ib3hQb3B1cDtcbiAgICAgIH0sXG4gICAgICBpc1Vuc3VwcG9ydGVkUm9sZTogZnVuY3Rpb24gaXNVbnN1cHBvcnRlZFJvbGUoKSB7XG4gICAgICAgIHJldHVybiBpc191bnN1cHBvcnRlZF9yb2xlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNWYWxpZFJvbGU6IGZ1bmN0aW9uIGlzVmFsaWRSb2xlKCkge1xuICAgICAgICByZXR1cm4gaXNfdmFsaWRfcm9sZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGxhYmVsOiBmdW5jdGlvbiBsYWJlbCgpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsX2RlZmF1bHQyO1xuICAgICAgfSxcbiAgICAgIGxhYmVsVmlydHVhbDogZnVuY3Rpb24gbGFiZWxWaXJ0dWFsKCkge1xuICAgICAgICByZXR1cm4gbGFiZWxfdmlydHVhbF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGxvb2t1cFRhYmxlOiBmdW5jdGlvbiBsb29rdXBUYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIGxvb2t1cF90YWJsZV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIG5hbWVkRnJvbUNvbnRlbnRzOiBmdW5jdGlvbiBuYW1lZEZyb21Db250ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIG5hbWVkX2Zyb21fY29udGVudHNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZEF0dHI6IGZ1bmN0aW9uIHJlcXVpcmVkQXR0cigpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmVkX2F0dHJfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZENvbnRleHQ6IGZ1bmN0aW9uIHJlcXVpcmVkQ29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmVkX2NvbnRleHRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZE93bmVkOiBmdW5jdGlvbiByZXF1aXJlZE93bmVkKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZWRfb3duZWRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB2YWxpZGF0ZUF0dHI6IGZ1bmN0aW9uIHZhbGlkYXRlQXR0cigpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlX2F0dHJfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICB2YWxpZGF0ZUF0dHJWYWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVBdHRyVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZV9hdHRyX3ZhbHVlX2RlZmF1bHQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gYWxsb3dlZEF0dHIocm9sZSkge1xuICAgICAgdmFyIHJvbGVEZWYgPSBzdGFuZGFyZHNfZGVmYXVsdC5hcmlhUm9sZXNbcm9sZV07XG4gICAgICB2YXIgYXR0cnMgPSBfdG9Db25zdW1hYmxlQXJyYXkoZ2V0X2dsb2JhbF9hcmlhX2F0dHJzX2RlZmF1bHQoKSk7XG4gICAgICBpZiAoIXJvbGVEZWYpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJzO1xuICAgICAgfVxuICAgICAgaWYgKHJvbGVEZWYuYWxsb3dlZEF0dHJzKSB7XG4gICAgICAgIGF0dHJzLnB1c2guYXBwbHkoYXR0cnMsIF90b0NvbnN1bWFibGVBcnJheShyb2xlRGVmLmFsbG93ZWRBdHRycykpO1xuICAgICAgfVxuICAgICAgaWYgKHJvbGVEZWYucmVxdWlyZWRBdHRycykge1xuICAgICAgICBhdHRycy5wdXNoLmFwcGx5KGF0dHJzLCBfdG9Db25zdW1hYmxlQXJyYXkocm9sZURlZi5yZXF1aXJlZEF0dHJzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cnM7XG4gICAgfVxuICAgIHZhciBhbGxvd2VkX2F0dHJfZGVmYXVsdCA9IGFsbG93ZWRBdHRyO1xuICAgIHZhciBpZFJlZnNSZWdleCA9IC9eaWRyZWZzPyQvO1xuICAgIGZ1bmN0aW9uIGNhY2hlSWRSZWZzKG5vZGUsIGlkUmVmcywgcmVmQXR0cnMpIHtcbiAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZSkge1xuICAgICAgICBpZiAobm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnTEFCRUwnICYmIG5vZGUuaGFzQXR0cmlidXRlKCdmb3InKSkge1xuICAgICAgICAgIHZhciBfaWQzID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2ZvcicpO1xuICAgICAgICAgIGlmICghaWRSZWZzLmhhcyhfaWQzKSkge1xuICAgICAgICAgICAgaWRSZWZzLnNldChfaWQzLCBbIG5vZGUgXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlkUmVmcy5nZXQoX2lkMykucHVzaChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kzMyA9IDA7IF9pMzMgPCByZWZBdHRycy5sZW5ndGg7ICsrX2kzMykge1xuICAgICAgICAgIHZhciBhdHRyID0gcmVmQXR0cnNbX2kzM107XG4gICAgICAgICAgdmFyIGF0dHJWYWx1ZSA9IHNhbml0aXplX2RlZmF1bHQobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cikgfHwgJycpO1xuICAgICAgICAgIGlmICghYXR0clZhbHVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIF9pdGVyYXRvcjE0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodG9rZW5fbGlzdF9kZWZhdWx0KGF0dHJWYWx1ZSkpLCBfc3RlcDE0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjE0LnMoKTsgIShfc3RlcDE0ID0gX2l0ZXJhdG9yMTQubigpKS5kb25lOyApIHtcbiAgICAgICAgICAgICAgdmFyIHRva2VuID0gX3N0ZXAxNC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKCFpZFJlZnMuaGFzKHRva2VuKSkge1xuICAgICAgICAgICAgICAgIGlkUmVmcy5zZXQodG9rZW4sIFsgbm9kZSBdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZFJlZnMuZ2V0KHRva2VuKS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IxNC5lKGVycik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjE0LmYoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIF9pMzQgPSAwOyBfaTM0IDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgX2kzNCsrKSB7XG4gICAgICAgIGlmIChub2RlLmNoaWxkTm9kZXNbX2kzNF0ubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICBjYWNoZUlkUmVmcyhub2RlLmNoaWxkTm9kZXNbX2kzNF0sIGlkUmVmcywgcmVmQXR0cnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEFjY2Vzc2libGVSZWZzKG5vZGUpIHtcbiAgICAgIHZhciBfaWRSZWZzJGdldDtcbiAgICAgIG5vZGUgPSBub2RlLmFjdHVhbE5vZGUgfHwgbm9kZTtcbiAgICAgIHZhciByb290ID0gZ2V0X3Jvb3Rfbm9kZV9kZWZhdWx0Mihub2RlKTtcbiAgICAgIHJvb3QgPSByb290LmRvY3VtZW50RWxlbWVudCB8fCByb290O1xuICAgICAgdmFyIGlkUmVmc0J5Um9vdCA9IGNhY2hlX2RlZmF1bHQuZ2V0KCdpZFJlZnNCeVJvb3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGlkUmVmcyA9IGlkUmVmc0J5Um9vdC5nZXQocm9vdCk7XG4gICAgICBpZiAoIWlkUmVmcykge1xuICAgICAgICBpZFJlZnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlkUmVmc0J5Um9vdC5zZXQocm9vdCwgaWRSZWZzKTtcbiAgICAgICAgdmFyIHJlZkF0dHJzID0gT2JqZWN0LmtleXMoc3RhbmRhcmRzX2RlZmF1bHQuYXJpYUF0dHJzKS5maWx0ZXIoZnVuY3Rpb24oYXR0cikge1xuICAgICAgICAgIHZhciB0eXBlMiA9IHN0YW5kYXJkc19kZWZhdWx0LmFyaWFBdHRyc1thdHRyXS50eXBlO1xuICAgICAgICAgIHJldHVybiBpZFJlZnNSZWdleC50ZXN0KHR5cGUyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNhY2hlSWRSZWZzKHJvb3QsIGlkUmVmcywgcmVmQXR0cnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChfaWRSZWZzJGdldCA9IGlkUmVmcy5nZXQobm9kZS5pZCkpICE9PSBudWxsICYmIF9pZFJlZnMkZ2V0ICE9PSB2b2lkIDAgPyBfaWRSZWZzJGdldCA6IFtdO1xuICAgIH1cbiAgICB2YXIgZ2V0X2FjY2Vzc2libGVfcmVmc19kZWZhdWx0ID0gZ2V0QWNjZXNzaWJsZVJlZnM7XG4gICAgZnVuY3Rpb24gaXNBcmlhUm9sZUFsbG93ZWRPbkVsZW1lbnQobm9kZSwgcm9sZSkge1xuICAgICAgdmFyIHZOb2RlID0gbm9kZSBpbnN0YW5jZW9mIGFic3RyYWN0X3ZpcnR1YWxfbm9kZV9kZWZhdWx0ID8gbm9kZSA6IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgdmFyIGltcGxpY2l0Um9sZTMgPSBpbXBsaWNpdF9yb2xlX2RlZmF1bHQodk5vZGUpO1xuICAgICAgdmFyIHNwZWMgPSBnZXRfZWxlbWVudF9zcGVjX2RlZmF1bHQodk5vZGUpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3BlYy5hbGxvd2VkUm9sZXMpKSB7XG4gICAgICAgIHJldHVybiBzcGVjLmFsbG93ZWRSb2xlcy5pbmNsdWRlcyhyb2xlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyb2xlID09PSBpbXBsaWNpdFJvbGUzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhIXNwZWMuYWxsb3dlZFJvbGVzO1xuICAgIH1cbiAgICB2YXIgaXNfYXJpYV9yb2xlX2FsbG93ZWRfb25fZWxlbWVudF9kZWZhdWx0ID0gaXNBcmlhUm9sZUFsbG93ZWRPbkVsZW1lbnQ7XG4gICAgdmFyIGRwdWJSb2xlczIgPSBbICdkb2MtYmFja2xpbmsnLCAnZG9jLWJpYmxpb2VudHJ5JywgJ2RvYy1iaWJsaW9yZWYnLCAnZG9jLWNvdmVyJywgJ2RvYy1lbmRub3RlJywgJ2RvYy1nbG9zc3JlZicsICdkb2Mtbm90ZXJlZicgXTtcbiAgICB2YXIgbGFuZG1hcmtSb2xlcyA9IHtcbiAgICAgIGhlYWRlcjogJ2Jhbm5lcicsXG4gICAgICBmb290ZXI6ICdjb250ZW50aW5mbydcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGdldFJvbGVTZWdtZW50cyh2Tm9kZSkge1xuICAgICAgdmFyIHJvbGVzID0gW107XG4gICAgICBpZiAoIXZOb2RlKSB7XG4gICAgICAgIHJldHVybiByb2xlcztcbiAgICAgIH1cbiAgICAgIGlmICh2Tm9kZS5oYXNBdHRyKCdyb2xlJykpIHtcbiAgICAgICAgdmFyIG5vZGVSb2xlcyA9IHRva2VuX2xpc3RfZGVmYXVsdCh2Tm9kZS5hdHRyKCdyb2xlJykudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIHJvbGVzID0gcm9sZXMuY29uY2F0KG5vZGVSb2xlcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm9sZXMuZmlsdGVyKGZ1bmN0aW9uKHJvbGUpIHtcbiAgICAgICAgcmV0dXJuIGlzX3ZhbGlkX3JvbGVfZGVmYXVsdChyb2xlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRFbGVtZW50VW5hbGxvd2VkUm9sZXMobm9kZSkge1xuICAgICAgdmFyIGFsbG93SW1wbGljaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICB2YXIgX25vZGVMb29rdXAyMSA9IF9ub2RlTG9va3VwKG5vZGUpLCB2Tm9kZSA9IF9ub2RlTG9va3VwMjEudk5vZGU7XG4gICAgICBpZiAoIWlzX2h0bWxfZWxlbWVudF9kZWZhdWx0KHZOb2RlKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbm9kZU5hbWUyID0gdk5vZGUucHJvcHMubm9kZU5hbWU7XG4gICAgICB2YXIgaW1wbGljaXRSb2xlMyA9IGltcGxpY2l0X3JvbGVfZGVmYXVsdCh2Tm9kZSkgfHwgbGFuZG1hcmtSb2xlc1tub2RlTmFtZTJdO1xuICAgICAgdmFyIHJvbGVTZWdtZW50cyA9IGdldFJvbGVTZWdtZW50cyh2Tm9kZSk7XG4gICAgICByZXR1cm4gcm9sZVNlZ21lbnRzLmZpbHRlcihmdW5jdGlvbihyb2xlKSB7XG4gICAgICAgIHJldHVybiAhcm9sZUlzQWxsb3dlZChyb2xlLCB2Tm9kZSwgYWxsb3dJbXBsaWNpdCwgaW1wbGljaXRSb2xlMyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcm9sZUlzQWxsb3dlZChyb2xlLCB2Tm9kZSwgYWxsb3dJbXBsaWNpdCwgaW1wbGljaXRSb2xlMykge1xuICAgICAgaWYgKGFsbG93SW1wbGljaXQgJiYgcm9sZSA9PT0gaW1wbGljaXRSb2xlMykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChkcHViUm9sZXMyLmluY2x1ZGVzKHJvbGUpICYmIGdldF9yb2xlX3R5cGVfZGVmYXVsdChyb2xlKSAhPT0gaW1wbGljaXRSb2xlMykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNfYXJpYV9yb2xlX2FsbG93ZWRfb25fZWxlbWVudF9kZWZhdWx0KHZOb2RlLCByb2xlKTtcbiAgICB9XG4gICAgdmFyIGdldF9lbGVtZW50X3VuYWxsb3dlZF9yb2xlc19kZWZhdWx0ID0gZ2V0RWxlbWVudFVuYWxsb3dlZFJvbGVzO1xuICAgIGZ1bmN0aW9uIGdldEFyaWFSb2xlc0J5VHlwZSh0eXBlMikge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0YW5kYXJkc19kZWZhdWx0LmFyaWFSb2xlcykuZmlsdGVyKGZ1bmN0aW9uKHJvbGVOYW1lKSB7XG4gICAgICAgIHJldHVybiBzdGFuZGFyZHNfZGVmYXVsdC5hcmlhUm9sZXNbcm9sZU5hbWVdLnR5cGUgPT09IHR5cGUyO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBnZXRfYXJpYV9yb2xlc19ieV90eXBlX2RlZmF1bHQgPSBnZXRBcmlhUm9sZXNCeVR5cGU7XG4gICAgZnVuY3Rpb24gZ2V0Um9sZXNCeVR5cGUocm9sZVR5cGUpIHtcbiAgICAgIHJldHVybiBnZXRfYXJpYV9yb2xlc19ieV90eXBlX2RlZmF1bHQocm9sZVR5cGUpO1xuICAgIH1cbiAgICB2YXIgZ2V0X3JvbGVzX2J5X3R5cGVfZGVmYXVsdCA9IGdldFJvbGVzQnlUeXBlO1xuICAgIGZ1bmN0aW9uIGdldEFyaWFSb2xlc1N1cHBvcnRpbmdOYW1lRnJvbUNvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gY2FjaGVfZGVmYXVsdC5nZXQoJ2FyaWFSb2xlc05hbWVGcm9tQ29udGVudCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RhbmRhcmRzX2RlZmF1bHQuYXJpYVJvbGVzKS5maWx0ZXIoZnVuY3Rpb24ocm9sZU5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYVJvbGVzW3JvbGVOYW1lXS5uYW1lRnJvbUNvbnRlbnQ7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBnZXRfYXJpYV9yb2xlc19zdXBwb3J0aW5nX25hbWVfZnJvbV9jb250ZW50X2RlZmF1bHQgPSBnZXRBcmlhUm9sZXNTdXBwb3J0aW5nTmFtZUZyb21Db250ZW50O1xuICAgIGZ1bmN0aW9uIGdldFJvbGVzV2l0aE5hbWVGcm9tQ29udGVudHMoKSB7XG4gICAgICByZXR1cm4gZ2V0X2FyaWFfcm9sZXNfc3VwcG9ydGluZ19uYW1lX2Zyb21fY29udGVudF9kZWZhdWx0KCk7XG4gICAgfVxuICAgIHZhciBnZXRfcm9sZXNfd2l0aF9uYW1lX2Zyb21fY29udGVudHNfZGVmYXVsdCA9IGdldFJvbGVzV2l0aE5hbWVGcm9tQ29udGVudHM7XG4gICAgdmFyIGlzTnVsbCA9IGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH07XG4gICAgdmFyIGlzTm90TnVsbCA9IGZ1bmN0aW9uIGlzTm90TnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsO1xuICAgIH07XG4gICAgdmFyIGxvb2t1cFRhYmxlID0ge307XG4gICAgbG9va3VwVGFibGUuYXR0cmlidXRlcyA9IHtcbiAgICAgICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnOiB7XG4gICAgICAgIHR5cGU6ICdpZHJlZicsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWF0b21pYyc6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ3RydWUnLCAnZmFsc2UnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ2lubGluZScsICdsaXN0JywgJ2JvdGgnLCAnbm9uZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtYnVzeSc6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ3RydWUnLCAnZmFsc2UnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWNoZWNrZWQnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgdmFsdWVzOiBbICd0cnVlJywgJ2ZhbHNlJywgJ21peGVkJywgJ3VuZGVmaW5lZCcgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtY29sY291bnQnOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1jb2xpbmRleCc6IHtcbiAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWNvbHNwYW4nOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1jb250cm9scyc6IHtcbiAgICAgICAgdHlwZTogJ2lkcmVmcycsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWN1cnJlbnQnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgdmFsdWVzOiBbICdwYWdlJywgJ3N0ZXAnLCAnbG9jYXRpb24nLCAnZGF0ZScsICd0aW1lJywgJ3RydWUnLCAnZmFsc2UnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5Jzoge1xuICAgICAgICB0eXBlOiAnaWRyZWZzJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtZGVzY3JpYmVkYXQnOiB7XG4gICAgICAgIHVuc3VwcG9ydGVkOiB0cnVlLFxuICAgICAgICB1bnN0YW5kYXJkaXplZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWRldGFpbHMnOiB7XG4gICAgICAgIHR5cGU6ICdpZHJlZicsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWRpc2FibGVkJzoge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHZhbHVlczogWyAndHJ1ZScsICdmYWxzZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtZHJvcGVmZmVjdCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW5zJyxcbiAgICAgICAgdmFsdWVzOiBbICdjb3B5JywgJ21vdmUnLCAncmVmZXJlbmNlJywgJ2V4ZWN1dGUnLCAncG9wdXAnLCAnbm9uZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtZXJyb3JtZXNzYWdlJzoge1xuICAgICAgICB0eXBlOiAnaWRyZWYnLFxuICAgICAgICBhbGxvd0VtcHR5OiB0cnVlLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1leHBhbmRlZCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ3RydWUnLCAnZmFsc2UnLCAndW5kZWZpbmVkJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1mbG93dG8nOiB7XG4gICAgICAgIHR5cGU6ICdpZHJlZnMnLFxuICAgICAgICBhbGxvd0VtcHR5OiB0cnVlLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1ncmFiYmVkJzoge1xuICAgICAgICB0eXBlOiAnbm10b2tlbicsXG4gICAgICAgIHZhbHVlczogWyAndHJ1ZScsICdmYWxzZScsICd1bmRlZmluZWQnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzoge1xuICAgICAgICB0eXBlOiAnbm10b2tlbicsXG4gICAgICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgICAgIHZhbHVlczogWyAndHJ1ZScsICdmYWxzZScsICdtZW51JywgJ2xpc3Rib3gnLCAndHJlZScsICdncmlkJywgJ2RpYWxvZycgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtaGlkZGVuJzoge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHZhbHVlczogWyAndHJ1ZScsICdmYWxzZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtaW52YWxpZCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW4nLFxuICAgICAgICBhbGxvd0VtcHR5OiB0cnVlLFxuICAgICAgICB2YWx1ZXM6IFsgJ3RydWUnLCAnZmFsc2UnLCAnc3BlbGxpbmcnLCAnZ3JhbW1hcicgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEta2V5c2hvcnRjdXRzJzoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtbGFiZWwnOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhbGxvd0VtcHR5OiB0cnVlLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5Jzoge1xuICAgICAgICB0eXBlOiAnaWRyZWZzJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtbGV2ZWwnOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1saXZlJzoge1xuICAgICAgICB0eXBlOiAnbm10b2tlbicsXG4gICAgICAgIHZhbHVlczogWyAnb2ZmJywgJ3BvbGl0ZScsICdhc3NlcnRpdmUnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLW1vZGFsJzoge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHZhbHVlczogWyAndHJ1ZScsICdmYWxzZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtbXVsdGlsaW5lJzoge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHZhbHVlczogWyAndHJ1ZScsICdmYWxzZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzoge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHZhbHVlczogWyAndHJ1ZScsICdmYWxzZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtb3JpZW50YXRpb24nOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgdmFsdWVzOiBbICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1vd25zJzoge1xuICAgICAgICB0eXBlOiAnaWRyZWZzJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtcGxhY2Vob2xkZXInOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhbGxvd0VtcHR5OiB0cnVlLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1wb3NpbnNldCc6IHtcbiAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXByZXNzZWQnOiB7XG4gICAgICAgIHR5cGU6ICdubXRva2VuJyxcbiAgICAgICAgdmFsdWVzOiBbICd0cnVlJywgJ2ZhbHNlJywgJ21peGVkJywgJ3VuZGVmaW5lZCcgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtcmVhZG9ubHknOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgdmFsdWVzOiBbICd0cnVlJywgJ2ZhbHNlJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1yZWxldmFudCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW5zJyxcbiAgICAgICAgdmFsdWVzOiBbICdhZGRpdGlvbnMnLCAncmVtb3ZhbHMnLCAndGV4dCcsICdhbGwnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXJlcXVpcmVkJzoge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHZhbHVlczogWyAndHJ1ZScsICdmYWxzZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYWxsb3dFbXB0eTogdHJ1ZSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtcm93Y291bnQnOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1yb3dpbmRleCc6IHtcbiAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXJvd3NwYW4nOiB7XG4gICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1zZWxlY3RlZCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ3RydWUnLCAnZmFsc2UnLCAndW5kZWZpbmVkJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnYXJpYS1zZXRzaXplJzoge1xuICAgICAgICB0eXBlOiAnaW50JyxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgJ2FyaWEtc29ydCc6IHtcbiAgICAgICAgdHlwZTogJ25tdG9rZW4nLFxuICAgICAgICB2YWx1ZXM6IFsgJ2FzY2VuZGluZycsICdkZXNjZW5kaW5nJywgJ290aGVyJywgJ25vbmUnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXZhbHVlbWF4Jzoge1xuICAgICAgICB0eXBlOiAnZGVjaW1hbCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXZhbHVlbWluJzoge1xuICAgICAgICB0eXBlOiAnZGVjaW1hbCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXZhbHVlbm93Jzoge1xuICAgICAgICB0eXBlOiAnZGVjaW1hbCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdhcmlhLXZhbHVldGV4dCc6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfVxuICAgIH07XG4gICAgbG9va3VwVGFibGUuZ2xvYmFsQXR0cmlidXRlcyA9IFsgJ2FyaWEtYXRvbWljJywgJ2FyaWEtYnVzeScsICdhcmlhLWNvbnRyb2xzJywgJ2FyaWEtY3VycmVudCcsICdhcmlhLWRlc2NyaWJlZGJ5JywgJ2FyaWEtZGV0YWlscycsICdhcmlhLWRpc2FibGVkJywgJ2FyaWEtZHJvcGVmZmVjdCcsICdhcmlhLWZsb3d0bycsICdhcmlhLWdyYWJiZWQnLCAnYXJpYS1oYXNwb3B1cCcsICdhcmlhLWhpZGRlbicsICdhcmlhLWludmFsaWQnLCAnYXJpYS1rZXlzaG9ydGN1dHMnLCAnYXJpYS1sYWJlbCcsICdhcmlhLWxhYmVsbGVkYnknLCAnYXJpYS1saXZlJywgJ2FyaWEtb3ducycsICdhcmlhLXJlbGV2YW50JywgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJyBdO1xuICAgIGxvb2t1cFRhYmxlLnJvbGUgPSB7XG4gICAgICBhbGVydDoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgYWxlcnRkaWFsb2c6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtbW9kYWwnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdkaWFsb2cnLCAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgIGFwcGxpY2F0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJywgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ2FydGljbGUnLCAnYXVkaW8nLCAnZW1iZWQnLCAnaWZyYW1lJywgJ29iamVjdCcsICdzZWN0aW9uJywgJ3N2ZycsICd2aWRlbycgXVxuICAgICAgfSxcbiAgICAgIGFydGljbGU6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtcG9zaW5zZXQnLCAnYXJpYS1zZXRzaXplJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnYXJ0aWNsZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgYmFubmVyOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnaGVhZGVyJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgIGJ1dHRvbjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1wcmVzc2VkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnYnV0dG9uJywgJ2lucHV0W3R5cGU9XCJidXR0b25cIl0nLCAnaW5wdXRbdHlwZT1cImltYWdlXCJdJywgJ2lucHV0W3R5cGU9XCJyZXNldFwiXScsICdpbnB1dFt0eXBlPVwic3VibWl0XCJdJywgJ3N1bW1hcnknIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbIHtcbiAgICAgICAgICBub2RlTmFtZTogJ2EnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIGhyZWY6IGlzTm90TnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfSBdXG4gICAgICB9LFxuICAgICAgY2VsbDoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtY29saW5kZXgnLCAnYXJpYS1jb2xzcGFuJywgJ2FyaWEtcm93aW5kZXgnLCAnYXJpYS1yb3dzcGFuJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBbICdyb3cnIF0sXG4gICAgICAgIGltcGxpY2l0OiBbICd0ZCcsICd0aCcgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY2hlY2tib3g6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWNoZWNrZWQnLCAnYXJpYS1yZXF1aXJlZCcsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnYnV0dG9uJyBdXG4gICAgICB9LFxuICAgICAgY29sdW1uaGVhZGVyOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1jb2xpbmRleCcsICdhcmlhLWNvbHNwYW4nLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXJvd2luZGV4JywgJ2FyaWEtcm93c3BhbicsICdhcmlhLXJlcXVpcmVkJywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1zZWxlY3RlZCcsICdhcmlhLXNvcnQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InLCAnY29udGVudHMnIF0sXG4gICAgICAgIGNvbnRleHQ6IFsgJ3JvdycgXSxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ3RoJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBjb21ib2JveDoge1xuICAgICAgICB0eXBlOiAnY29tcG9zaXRlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtYXV0b2NvbXBsZXRlJywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtb3JpZW50YXRpb24nLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF0sXG4gICAgICAgICAgcmVxdWlyZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IHtcbiAgICAgICAgICBhbGw6IFsgJ2xpc3Rib3gnLCAndHJlZScsICdncmlkJywgJ2RpYWxvZycsICd0ZXh0Ym94JyBdXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbIHtcbiAgICAgICAgICBub2RlTmFtZTogJ2lucHV0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB0eXBlOiBbICd0ZXh0JywgJ3NlYXJjaCcsICd0ZWwnLCAndXJsJywgJ2VtYWlsJyBdXG4gICAgICAgICAgfVxuICAgICAgICB9IF1cbiAgICAgIH0sXG4gICAgICBjb21tYW5kOiB7XG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGNvbXBsZW1lbnRhcnk6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdhc2lkZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICBjb21wb3NpdGU6IHtcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY29udGVudGluZm86IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdmb290ZXInIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgZGVmaW5pdGlvbjoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdkZCcsICdkZm4nIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGRpYWxvZzoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1tb2RhbCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ2RpYWxvZycgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICBkaXJlY3Rvcnk6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnb2wnLCAndWwnIF1cbiAgICAgIH0sXG4gICAgICBkb2N1bWVudDoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdib2R5JyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnYXJ0aWNsZScsICdlbWJlZCcsICdpZnJhbWUnLCAnb2JqZWN0JywgJ3NlY3Rpb24nLCAnc3ZnJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1hYnN0cmFjdCc6IHtcbiAgICAgICAgdHlwZTogJ3NlY3Rpb24nLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWFja25vd2xlZGdtZW50cyc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1hZnRlcndvcmQnOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtYXBwZW5kaXgnOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtYmFja2xpbmsnOiB7XG4gICAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InLCAnY29udGVudHMnIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbIHtcbiAgICAgICAgICBub2RlTmFtZTogJ2EnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIGhyZWY6IGlzTm90TnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfSBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1iaWJsaW9lbnRyeSc6IHtcbiAgICAgICAgdHlwZTogJ2xpc3RpdGVtJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogWyAnZG9jLWJpYmxpb2dyYXBoeScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ2xpJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1iaWJsaW9ncmFwaHknOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiB7XG4gICAgICAgICAgb25lOiBbICdkb2MtYmlibGlvZW50cnknIF1cbiAgICAgICAgfSxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWJpYmxpb3JlZic6IHtcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsge1xuICAgICAgICAgIG5vZGVOYW1lOiAnYScsXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgaHJlZjogaXNOb3ROdWxsXG4gICAgICAgICAgfVxuICAgICAgICB9IF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWNoYXB0ZXInOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtY29sb3Bob24nOiB7XG4gICAgICAgIHR5cGU6ICdzZWN0aW9uJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1jb25jbHVzaW9uJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWNvdmVyJzoge1xuICAgICAgICB0eXBlOiAnaW1nJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgICdkb2MtY3JlZGl0Jzoge1xuICAgICAgICB0eXBlOiAnc2VjdGlvbicsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtY3JlZGl0cyc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1kZWRpY2F0aW9uJzoge1xuICAgICAgICB0eXBlOiAnc2VjdGlvbicsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtZW5kbm90ZSc6IHtcbiAgICAgICAgdHlwZTogJ2xpc3RpdGVtJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogWyAnZG9jLWVuZG5vdGVzJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnbGknIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWVuZG5vdGVzJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDoge1xuICAgICAgICAgIG9uZTogWyAnZG9jLWVuZG5vdGUnIF1cbiAgICAgICAgfSxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWVwaWdyYXBoJzoge1xuICAgICAgICB0eXBlOiAnc2VjdGlvbicsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICAnZG9jLWVwaWxvZ3VlJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWVycmF0YSc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1leGFtcGxlJzoge1xuICAgICAgICB0eXBlOiAnc2VjdGlvbicsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnYXNpZGUnLCAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtZm9vdG5vdGUnOiB7XG4gICAgICAgIHR5cGU6ICdzZWN0aW9uJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdhc2lkZScsICdmb290ZXInLCAnaGVhZGVyJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1mb3Jld29yZCc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1nbG9zc2FyeSc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IFsgJ3Rlcm0nLCAnZGVmaW5pdGlvbicgXSxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ2RsJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1nbG9zc3JlZic6IHtcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsge1xuICAgICAgICAgIG5vZGVOYW1lOiAnYScsXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgaHJlZjogaXNOb3ROdWxsXG4gICAgICAgICAgfVxuICAgICAgICB9IF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWluZGV4Jzoge1xuICAgICAgICB0eXBlOiAnbmF2aWdhdGlvbicsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnbmF2JywgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLWludHJvZHVjdGlvbic6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1ub3RlcmVmJzoge1xuICAgICAgICB0eXBlOiAnbGluaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdhJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBocmVmOiBpc05vdE51bGxcbiAgICAgICAgICB9XG4gICAgICAgIH0gXVxuICAgICAgfSxcbiAgICAgICdkb2Mtbm90aWNlJzoge1xuICAgICAgICB0eXBlOiAnbm90ZScsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtcGFnZWJyZWFrJzoge1xuICAgICAgICB0eXBlOiAnc2VwYXJhdG9yJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdocicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtcGFnZWxpc3QnOiB7XG4gICAgICAgIHR5cGU6ICduYXZpZ2F0aW9uJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICduYXYnLCAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgICdkb2MtcGFydCc6IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVmcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgJ2RvYy1wcmVmYWNlJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLXByb2xvZ3VlJzoge1xuICAgICAgICB0eXBlOiAnbGFuZG1hcmsnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLXB1bGxxdW90ZSc6IHtcbiAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ2FzaWRlJywgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLXFuYSc6IHtcbiAgICAgICAgdHlwZTogJ3NlY3Rpb24nLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ3NlY3Rpb24nIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLXN1YnRpdGxlJzoge1xuICAgICAgICB0eXBlOiAnc2VjdGlvbmhlYWQnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IHtcbiAgICAgICAgICBub2RlTmFtZTogWyAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnIF1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdkb2MtdGlwJzoge1xuICAgICAgICB0eXBlOiAnbm90ZScsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lZnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnYXNpZGUnIF1cbiAgICAgIH0sXG4gICAgICAnZG9jLXRvYyc6IHtcbiAgICAgICAgdHlwZTogJ25hdmlnYXRpb24nLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZWZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ25hdicsICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgZmVlZDoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IHtcbiAgICAgICAgICBvbmU6IFsgJ2FydGljbGUnIF1cbiAgICAgICAgfSxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ2FydGljbGUnLCAnYXNpZGUnLCAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgIGZpZ3VyZToge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InLCAnY29udGVudHMnIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdmaWd1cmUnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGZvcm06IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdmb3JtJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBncmlkOiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1jb2xjb3VudCcsICdhcmlhLWxldmVsJywgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1yb3djb3VudCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDoge1xuICAgICAgICAgIG9uZTogWyAncm93Z3JvdXAnLCAncm93JyBdXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICd0YWJsZScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZ3JpZGNlbGw6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWNvbGluZGV4JywgJ2FyaWEtY29sc3BhbicsICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtcm93aW5kZXgnLCAnYXJpYS1yb3dzcGFuJywgJ2FyaWEtc2VsZWN0ZWQnLCAnYXJpYS1yZWFkb25seScsICdhcmlhLXJlcXVpcmVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBbICdyb3cnIF0sXG4gICAgICAgIGltcGxpY2l0OiBbICd0ZCcsICd0aCcgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZ3JvdXA6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ2RldGFpbHMnLCAnb3B0Z3JvdXAnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdkbCcsICdmaWdjYXB0aW9uJywgJ2ZpZWxkc2V0JywgJ2ZpZ3VyZScsICdmb290ZXInLCAnaGVhZGVyJywgJ29sJywgJ3VsJyBdXG4gICAgICB9LFxuICAgICAgaGVhZGluZzoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIHJlcXVpcmVkOiBbICdhcmlhLWxldmVsJyBdLFxuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InLCAnY29udGVudHMnIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgaW1nOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ2ltZycgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ2VtYmVkJywgJ2lmcmFtZScsICdvYmplY3QnLCAnc3ZnJyBdXG4gICAgICB9LFxuICAgICAgaW5wdXQ6IHtcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbGFuZG1hcms6IHtcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbGluazoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InLCAnY29udGVudHMnIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdhW2hyZWZdJywgJ2FyZWFbaHJlZl0nIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdidXR0b24nLCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdpbnB1dCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgdHlwZTogWyAnaW1hZ2UnLCAnYnV0dG9uJyBdXG4gICAgICAgICAgfVxuICAgICAgICB9IF1cbiAgICAgIH0sXG4gICAgICBsaXN0OiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDoge1xuICAgICAgICAgIGFsbDogWyAnbGlzdGl0ZW0nIF1cbiAgICAgICAgfSxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ29sJywgJ3VsJywgJ2RsJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBsaXN0Ym94OiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1yZXF1aXJlZCcsICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtb3JpZW50YXRpb24nLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IHtcbiAgICAgICAgICBhbGw6IFsgJ29wdGlvbicgXVxuICAgICAgICB9LFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnc2VsZWN0JyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnb2wnLCAndWwnIF1cbiAgICAgIH0sXG4gICAgICBsaXN0aXRlbToge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtbGV2ZWwnLCAnYXJpYS1wb3NpbnNldCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogWyAnbGlzdCcgXSxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ2xpJywgJ2R0JyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBsb2c6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgIG1haW46IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdtYWluJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnYXJ0aWNsZScsICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgbWFycXVlZToge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgbWF0aDoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdtYXRoJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBtZW51OiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1vcmllbnRhdGlvbicsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDoge1xuICAgICAgICAgIG9uZTogWyAnbWVudWl0ZW0nLCAnbWVudWl0ZW1yYWRpbycsICdtZW51aXRlbWNoZWNrYm94JyBdXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdtZW51W3R5cGU9XCJjb250ZXh0XCJdJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnb2wnLCAndWwnIF1cbiAgICAgIH0sXG4gICAgICBtZW51YmFyOiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1vcmllbnRhdGlvbicsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDoge1xuICAgICAgICAgIG9uZTogWyAnbWVudWl0ZW0nLCAnbWVudWl0ZW1yYWRpbycsICdtZW51aXRlbWNoZWNrYm94JyBdXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdvbCcsICd1bCcgXVxuICAgICAgfSxcbiAgICAgIG1lbnVpdGVtOiB7XG4gICAgICAgIHR5cGU6ICd3aWRnZXQnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1wb3NpbnNldCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogWyAnbWVudScsICdtZW51YmFyJyBdLFxuICAgICAgICBpbXBsaWNpdDogWyAnbWVudWl0ZW1bdHlwZT1cImNvbW1hbmRcIl0nIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdidXR0b24nLCAnbGknLCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdpcHV0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB0eXBlOiBbICdpbWFnZScsICdidXR0b24nIF1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBub2RlTmFtZTogJ2EnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIGhyZWY6IGlzTm90TnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfSBdXG4gICAgICB9LFxuICAgICAgbWVudWl0ZW1jaGVja2JveDoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtY2hlY2tlZCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogWyAnbWVudScsICdtZW51YmFyJyBdLFxuICAgICAgICBpbXBsaWNpdDogWyAnbWVudWl0ZW1bdHlwZT1cImNoZWNrYm94XCJdJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyB7XG4gICAgICAgICAgbm9kZU5hbWU6IFsgJ2J1dHRvbicsICdsaScgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdpbnB1dCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgdHlwZTogWyAnY2hlY2tib3gnLCAnaW1hZ2UnLCAnYnV0dG9uJyBdXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdhJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBocmVmOiBpc05vdE51bGxcbiAgICAgICAgICB9XG4gICAgICAgIH0gXVxuICAgICAgfSxcbiAgICAgIG1lbnVpdGVtcmFkaW86IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWNoZWNrZWQnLCAnYXJpYS1zZWxlY3RlZCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogWyAnbWVudScsICdtZW51YmFyJyBdLFxuICAgICAgICBpbXBsaWNpdDogWyAnbWVudWl0ZW1bdHlwZT1cInJhZGlvXCJdJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyB7XG4gICAgICAgICAgbm9kZU5hbWU6IFsgJ2J1dHRvbicsICdsaScgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdpbnB1dCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgdHlwZTogWyAnaW1hZ2UnLCAnYnV0dG9uJywgJ3JhZGlvJyBdXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdhJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBocmVmOiBpc05vdE51bGxcbiAgICAgICAgICB9XG4gICAgICAgIH0gXVxuICAgICAgfSxcbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgdHlwZTogJ2xhbmRtYXJrJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICduYXYnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgbm9uZToge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczogbnVsbCxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbIHtcbiAgICAgICAgICBub2RlTmFtZTogWyAnYXJ0aWNsZScsICdhc2lkZScsICdkbCcsICdlbWJlZCcsICdmaWdjYXB0aW9uJywgJ2ZpZWxkc2V0JywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkZXInLCAnaHInLCAnaWZyYW1lJywgJ2xpJywgJ29sJywgJ3NlY3Rpb24nLCAndWwnIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG5vZGVOYW1lOiAnaW1nJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBhbHQ6IGlzTm90TnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfSBdXG4gICAgICB9LFxuICAgICAgbm90ZToge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdhc2lkZScgXVxuICAgICAgfSxcbiAgICAgIG9wdGlvbjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtc2VsZWN0ZWQnLCAnYXJpYS1wb3NpbnNldCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1jaGVja2VkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBbICdsaXN0Ym94JyBdLFxuICAgICAgICBpbXBsaWNpdDogWyAnb3B0aW9uJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyB7XG4gICAgICAgICAgbm9kZU5hbWU6IFsgJ2J1dHRvbicsICdsaScgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdpbnB1dCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgdHlwZTogWyAnY2hlY2tib3gnLCAnYnV0dG9uJyBdXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdhJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBocmVmOiBpc05vdE51bGxcbiAgICAgICAgICB9XG4gICAgICAgIH0gXVxuICAgICAgfSxcbiAgICAgIHByZXNlbnRhdGlvbjoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczogbnVsbCxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbIHtcbiAgICAgICAgICBub2RlTmFtZTogWyAnYXJ0aWNsZScsICdhc2lkZScsICdkbCcsICdlbWJlZCcsICdmaWdjYXB0aW9uJywgJ2ZpZWxkc2V0JywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkZXInLCAnaHInLCAnaWZyYW1lJywgJ2xpJywgJ29sJywgJ3NlY3Rpb24nLCAndWwnIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG5vZGVOYW1lOiAnaW1nJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBhbHQ6IGlzTm90TnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfSBdXG4gICAgICB9LFxuICAgICAgcHJvZ3Jlc3NiYXI6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLXZhbHVldGV4dCcsICdhcmlhLXZhbHVlbm93JywgJ2FyaWEtdmFsdWVtYXgnLCAnYXJpYS12YWx1ZW1pbicsICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAncHJvZ3Jlc3MnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJhZGlvOiB7XG4gICAgICAgIHR5cGU6ICd3aWRnZXQnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1zZWxlY3RlZCcsICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScsICdhcmlhLXJlcXVpcmVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJywgJ2FyaWEtY2hlY2tlZCcgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsge1xuICAgICAgICAgIG5vZGVOYW1lOiBbICdidXR0b24nLCAnbGknIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG5vZGVOYW1lOiAnaW5wdXQnLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHR5cGU6IFsgJ2ltYWdlJywgJ2J1dHRvbicgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSBdXG4gICAgICB9LFxuICAgICAgcmFkaW9ncm91cDoge1xuICAgICAgICB0eXBlOiAnY29tcG9zaXRlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLXJlcXVpcmVkJywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1yZWFkb25seScsICdhcmlhLWVycm9ybWVzc2FnZScsICdhcmlhLW9yaWVudGF0aW9uJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiB7XG4gICAgICAgICAgYWxsOiBbICdyYWRpbycgXVxuICAgICAgICB9LFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czoge1xuICAgICAgICAgIG5vZGVOYW1lOiBbICdvbCcsICd1bCcsICdmaWVsZHNldCcgXVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmFuZ2U6IHtcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgcmVnaW9uOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnc2VjdGlvblthcmlhLWxhYmVsXScsICdzZWN0aW9uW2FyaWEtbGFiZWxsZWRieV0nLCAnc2VjdGlvblt0aXRsZV0nIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiB7XG4gICAgICAgICAgbm9kZU5hbWU6IFsgJ2FydGljbGUnLCAnYXNpZGUnIF1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJvbGV0eXBlOiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJvdzoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLWNvbGluZGV4JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcsICdhcmlhLXNlbGVjdGVkJywgJ2FyaWEtcm93aW5kZXgnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IHtcbiAgICAgICAgICBvbmU6IFsgJ2NlbGwnLCAnY29sdW1uaGVhZGVyJywgJ3Jvd2hlYWRlcicsICdncmlkY2VsbCcgXVxuICAgICAgICB9LFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBbICdyb3dncm91cCcsICdncmlkJywgJ3RyZWVncmlkJywgJ3RhYmxlJyBdLFxuICAgICAgICBpbXBsaWNpdDogWyAndHInIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJvd2dyb3VwOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IHtcbiAgICAgICAgICBhbGw6IFsgJ3JvdycgXVxuICAgICAgICB9LFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBbICdncmlkJywgJ3RhYmxlJywgJ3RyZWVncmlkJyBdLFxuICAgICAgICBpbXBsaWNpdDogWyAndGJvZHknLCAndGhlYWQnLCAndGZvb3QnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJvd2hlYWRlcjoge1xuICAgICAgICB0eXBlOiAnc3RydWN0dXJlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtY29saW5kZXgnLCAnYXJpYS1jb2xzcGFuJywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1yb3dpbmRleCcsICdhcmlhLXJvd3NwYW4nLCAnYXJpYS1yZXF1aXJlZCcsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtc2VsZWN0ZWQnLCAnYXJpYS1zb3J0JywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBbICdyb3cnIF0sXG4gICAgICAgIGltcGxpY2l0OiBbICd0aCcgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc2Nyb2xsYmFyOiB7XG4gICAgICAgIHR5cGU6ICd3aWRnZXQnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgcmVxdWlyZWQ6IFsgJ2FyaWEtY29udHJvbHMnLCAnYXJpYS12YWx1ZW5vdycgXSxcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLXZhbHVldGV4dCcsICdhcmlhLW9yaWVudGF0aW9uJywgJ2FyaWEtZXJyb3JtZXNzYWdlJywgJ2FyaWEtdmFsdWVtYXgnLCAnYXJpYS12YWx1ZW1pbicgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc2VhcmNoOiB7XG4gICAgICAgIHR5cGU6ICdsYW5kbWFyaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czoge1xuICAgICAgICAgIG5vZGVOYW1lOiBbICdhc2lkZScsICdmb3JtJywgJ3NlY3Rpb24nIF1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNlYXJjaGJveDoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLWF1dG9jb21wbGV0ZScsICdhcmlhLW11bHRpbGluZScsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1wbGFjZWhvbGRlcicsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ2lucHV0W3R5cGU9XCJzZWFyY2hcIl0nIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdpbnB1dCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2VjdGlvbjoge1xuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICB0eXBlOiAnYWJzdHJhY3QnLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBzZWN0aW9uaGVhZDoge1xuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICB0eXBlOiAnYWJzdHJhY3QnLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBzZWxlY3Q6IHtcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgdHlwZTogJ2Fic3RyYWN0JyxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc2VwYXJhdG9yOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1leHBhbmRlZCcsICdhcmlhLW9yaWVudGF0aW9uJywgJ2FyaWEtdmFsdWVub3cnLCAnYXJpYS12YWx1ZW1heCcsICdhcmlhLXZhbHVlbWluJywgJ2FyaWEtdmFsdWV0ZXh0JywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnaHInIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdsaScgXVxuICAgICAgfSxcbiAgICAgIHNsaWRlcjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtdmFsdWV0ZXh0JywgJ2FyaWEtb3JpZW50YXRpb24nLCAnYXJpYS1yZWFkb25seScsICdhcmlhLWVycm9ybWVzc2FnZScsICdhcmlhLXZhbHVlbWF4JywgJ2FyaWEtdmFsdWVtaW4nIF0sXG4gICAgICAgICAgcmVxdWlyZWQ6IFsgJ2FyaWEtdmFsdWVub3cnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdpbnB1dFt0eXBlPVwicmFuZ2VcIl0nIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHNwaW5idXR0b246IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLXZhbHVldGV4dCcsICdhcmlhLXJlcXVpcmVkJywgJ2FyaWEtcmVhZG9ubHknLCAnYXJpYS1lcnJvcm1lc3NhZ2UnLCAnYXJpYS12YWx1ZW1heCcsICdhcmlhLXZhbHVlbWluJyBdLFxuICAgICAgICAgIHJlcXVpcmVkOiBbICdhcmlhLXZhbHVlbm93JyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnaW5wdXRbdHlwZT1cIm51bWJlclwiXScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IHtcbiAgICAgICAgICBub2RlTmFtZTogJ2lucHV0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB0eXBlOiBbICd0ZXh0JywgJ3RlbCcgXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHN0YXR1czoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdvdXRwdXQnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdzZWN0aW9uJyBdXG4gICAgICB9LFxuICAgICAgc3RydWN0dXJlOiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHN3aXRjaDoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdLFxuICAgICAgICAgIHJlcXVpcmVkOiBbICdhcmlhLWNoZWNrZWQnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InLCAnY29udGVudHMnIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdidXR0b24nLCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdpbnB1dCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgdHlwZTogWyAnY2hlY2tib3gnLCAnaW1hZ2UnLCAnYnV0dG9uJyBdXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdhJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBocmVmOiBpc05vdE51bGxcbiAgICAgICAgICB9XG4gICAgICAgIH0gXVxuICAgICAgfSxcbiAgICAgIHRhYjoge1xuICAgICAgICB0eXBlOiAnd2lkZ2V0JyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtc2VsZWN0ZWQnLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1wb3NpbnNldCcsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogWyAndGFibGlzdCcgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsge1xuICAgICAgICAgIG5vZGVOYW1lOiBbICdidXR0b24nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnbGknIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG5vZGVOYW1lOiAnaW5wdXQnLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbm9kZU5hbWU6ICdhJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBocmVmOiBpc05vdE51bGxcbiAgICAgICAgICB9XG4gICAgICAgIH0gXVxuICAgICAgfSxcbiAgICAgIHRhYmxlOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1jb2xjb3VudCcsICdhcmlhLXJvd2NvdW50JywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiB7XG4gICAgICAgICAgb25lOiBbICdyb3dncm91cCcsICdyb3cnIF1cbiAgICAgICAgfSxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicsICdjb250ZW50cycgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ3RhYmxlJyBdLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICB0YWJsaXN0OiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcsICdhcmlhLW11bHRpc2VsZWN0YWJsZScsICdhcmlhLW9yaWVudGF0aW9uJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiB7XG4gICAgICAgICAgYWxsOiBbICd0YWInIF1cbiAgICAgICAgfSxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd2VkRWxlbWVudHM6IFsgJ29sJywgJ3VsJyBdXG4gICAgICB9LFxuICAgICAgdGFicGFuZWw6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnc2VjdGlvbicgXVxuICAgICAgfSxcbiAgICAgIHRlcm06IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBpbXBsaWNpdDogWyAnZHQnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHRleHRib3g6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCAnYXJpYS1hdXRvY29tcGxldGUnLCAnYXJpYS1tdWx0aWxpbmUnLCAnYXJpYS1yZWFkb25seScsICdhcmlhLXJlcXVpcmVkJywgJ2FyaWEtcGxhY2Vob2xkZXInLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InIF0sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGltcGxpY2l0OiBbICdpbnB1dFt0eXBlPVwidGV4dFwiXScsICdpbnB1dFt0eXBlPVwiZW1haWxcIl0nLCAnaW5wdXRbdHlwZT1cInBhc3N3b3JkXCJdJywgJ2lucHV0W3R5cGU9XCJ0ZWxcIl0nLCAnaW5wdXRbdHlwZT1cInVybFwiXScsICdpbnB1dDpub3QoW3R5cGVdKScsICd0ZXh0YXJlYScgXSxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgdGltZXI6IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICB0b29sYmFyOiB7XG4gICAgICAgIHR5cGU6ICdzdHJ1Y3R1cmUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1vcmllbnRhdGlvbicsICdhcmlhLWVycm9ybWVzc2FnZScgXVxuICAgICAgICB9LFxuICAgICAgICBvd25lZDogbnVsbCxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgaW1wbGljaXQ6IFsgJ21lbnVbdHlwZT1cInRvb2xiYXJcIl0nIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdvbCcsICd1bCcgXVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdHlwZTogJ3N0cnVjdHVyZScsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJywgJ2NvbnRlbnRzJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICB0cmVlOiB7XG4gICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYWxsb3dlZDogWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLW9yaWVudGF0aW9uJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiB7XG4gICAgICAgICAgYWxsOiBbICd0cmVlaXRlbScgXVxuICAgICAgICB9LFxuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRFbGVtZW50czogWyAnb2wnLCAndWwnIF1cbiAgICAgIH0sXG4gICAgICB0cmVlZ3JpZDoge1xuICAgICAgICB0eXBlOiAnY29tcG9zaXRlJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGFsbG93ZWQ6IFsgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsICdhcmlhLWNvbGNvdW50JywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcsICdhcmlhLW11bHRpc2VsZWN0YWJsZScsICdhcmlhLXJlYWRvbmx5JywgJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYS1yb3djb3VudCcsICdhcmlhLW9yaWVudGF0aW9uJywgJ2FyaWEtZXJyb3JtZXNzYWdlJyBdXG4gICAgICAgIH0sXG4gICAgICAgIG93bmVkOiB7XG4gICAgICAgICAgb25lOiBbICdyb3dncm91cCcsICdyb3cnIF1cbiAgICAgICAgfSxcbiAgICAgICAgbmFtZUZyb206IFsgJ2F1dGhvcicgXSxcbiAgICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgICAgdW5zdXBwb3J0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgdHJlZWl0ZW06IHtcbiAgICAgICAgdHlwZTogJ3dpZGdldCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBhbGxvd2VkOiBbICdhcmlhLWNoZWNrZWQnLCAnYXJpYS1zZWxlY3RlZCcsICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtbGV2ZWwnLCAnYXJpYS1wb3NpbnNldCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1lcnJvcm1lc3NhZ2UnIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3duZWQ6IG51bGwsXG4gICAgICAgIG5hbWVGcm9tOiBbICdhdXRob3InLCAnY29udGVudHMnIF0sXG4gICAgICAgIGNvbnRleHQ6IFsgJ2dyb3VwJywgJ3RyZWUnIF0sXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWxsb3dlZEVsZW1lbnRzOiBbICdsaScsIHtcbiAgICAgICAgICBub2RlTmFtZTogJ2EnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIGhyZWY6IGlzTm90TnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfSBdXG4gICAgICB9LFxuICAgICAgd2lkZ2V0OiB7XG4gICAgICAgIHR5cGU6ICdhYnN0cmFjdCcsXG4gICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHdpbmRvdzoge1xuICAgICAgICBuYW1lRnJvbTogWyAnYXV0aG9yJyBdLFxuICAgICAgICB0eXBlOiAnYWJzdHJhY3QnLFxuICAgICAgICB1bnN1cHBvcnRlZDogZmFsc2VcbiAgICAgIH1cbiAgICB9O1xuICAgIGxvb2t1cFRhYmxlLmltcGxpY2l0SHRtbFJvbGUgPSBpbXBsaWNpdF9odG1sX3JvbGVzX2RlZmF1bHQ7XG4gICAgbG9va3VwVGFibGUuZWxlbWVudHNBbGxvd2VkTm9Sb2xlID0gWyB7XG4gICAgICBub2RlTmFtZTogWyAnYmFzZScsICdib2R5JywgJ2NhcHRpb24nLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGFsaXN0JywgJ2RkJywgJ2RldGFpbHMnLCAnZHQnLCAnaGVhZCcsICdodG1sJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLCAnbWFpbicsICdtYXAnLCAnbWF0aCcsICdtZXRhJywgJ21ldGVyJywgJ25vc2NyaXB0JywgJ29wdGdyb3VwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJvZ3Jlc3MnLCAnc2NyaXB0JywgJ3NvdXJjZScsICdzdHlsZScsICd0ZW1wbGF0ZScsICd0ZXh0YXJlYScsICd0aXRsZScsICd0cmFjaycgXVxuICAgIH0sIHtcbiAgICAgIG5vZGVOYW1lOiAnYXJlYScsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGhyZWY6IGlzTm90TnVsbFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5vZGVOYW1lOiAnaW5wdXQnLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB0eXBlOiBbICdjb2xvcicsICdkYXRhJywgJ2RhdGF0aW1lJywgJ2ZpbGUnLCAnaGlkZGVuJywgJ21vbnRoJywgJ251bWJlcicsICdwYXNzd29yZCcsICdyYW5nZScsICdyZXNldCcsICdzdWJtaXQnLCAndGltZScsICd3ZWVrJyBdXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbm9kZU5hbWU6ICdsaW5rJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgaHJlZjogaXNOb3ROdWxsXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbm9kZU5hbWU6ICdtZW51JyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgdHlwZTogJ2NvbnRleHQnXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbm9kZU5hbWU6ICdtZW51aXRlbScsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIHR5cGU6IFsgJ2NvbW1hbmQnLCAnY2hlY2tib3gnLCAncmFkaW8nIF1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBub2RlTmFtZTogJ3NlbGVjdCcsXG4gICAgICBjb25kaXRpb246IGZ1bmN0aW9uIGNvbmRpdGlvbih2Tm9kZSkge1xuICAgICAgICBpZiAoISh2Tm9kZSBpbnN0YW5jZW9mIGF4ZS5BYnN0cmFjdFZpcnR1YWxOb2RlKSkge1xuICAgICAgICAgIHZOb2RlID0gYXhlLnV0aWxzLmdldE5vZGVGcm9tVHJlZSh2Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE51bWJlcih2Tm9kZS5hdHRyKCdzaXplJykpID4gMTtcbiAgICAgIH0sXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIG11bHRpcGxlOiB0cnVlXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbm9kZU5hbWU6IFsgJ2NsaXBwYXRoJywgJ2N1cnNvcicsICdkZWZzJywgJ2Rlc2MnLCAnZmVibGVuZCcsICdmZWNvbG9ybWF0cml4JywgJ2ZlY29tcG9uZW50dHJhbnNmZXInLCAnZmVjb21wb3NpdGUnLCAnZmVjb252b2x2ZW1hdHJpeCcsICdmZWRpZmZ1c2VsaWdodGluZycsICdmZWRpc3BsYWNlbWVudG1hcCcsICdmZWRpc3RhbnRsaWdodCcsICdmZWRyb3BzaGFkb3cnLCAnZmVmbG9vZCcsICdmZWZ1bmNhJywgJ2ZlZnVuY2InLCAnZmVmdW5jZycsICdmZWZ1bmNyJywgJ2ZlZ2F1c3NpYW5ibHVyJywgJ2ZlaW1hZ2UnLCAnZmVtZXJnZScsICdmZW1lcmdlbm9kZScsICdmZW1vcnBob2xvZ3knLCAnZmVvZmZzZXQnLCAnZmVwb2ludGxpZ2h0JywgJ2Zlc3BlY3VsYXJsaWdodGluZycsICdmZXNwb3RsaWdodCcsICdmZXRpbGUnLCAnZmV0dXJidWxlbmNlJywgJ2ZpbHRlcicsICdoYXRjaCcsICdoYXRjaHBhdGgnLCAnbGluZWFyZ3JhZGllbnQnLCAnbWFya2VyJywgJ21hc2snLCAnbWVzaGdyYWRpZW50JywgJ21lc2hwYXRjaCcsICdtZXNocm93JywgJ21ldGFkYXRhJywgJ21wYXRoJywgJ3BhdHRlcm4nLCAncmFkaWFsZ3JhZGllbnQnLCAnc29saWRjb2xvcicsICdzdG9wJywgJ3N3aXRjaCcsICd2aWV3JyBdXG4gICAgfSBdO1xuICAgIGxvb2t1cFRhYmxlLmVsZW1lbnRzQWxsb3dlZEFueVJvbGUgPSBbIHtcbiAgICAgIG5vZGVOYW1lOiAnYScsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGhyZWY6IGlzTnVsbFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5vZGVOYW1lOiAnaW1nJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgYWx0OiBpc051bGxcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBub2RlTmFtZTogWyAnYWJicicsICdhZGRyZXNzJywgJ2NhbnZhcycsICdkaXYnLCAncCcsICdwcmUnLCAnYmxvY2txdW90ZScsICdpbnMnLCAnZGVsJywgJ291dHB1dCcsICdzcGFuJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RoZWFkJywgJ3Rmb290JywgJ3RkJywgJ2VtJywgJ3N0cm9uZycsICdzbWFsbCcsICdzJywgJ2NpdGUnLCAncScsICdkZm4nLCAnYWJicicsICd0aW1lJywgJ2NvZGUnLCAndmFyJywgJ3NhbXAnLCAna2JkJywgJ3N1YicsICdzdXAnLCAnaScsICdiJywgJ3UnLCAnbWFyaycsICdydWJ5JywgJ3J0JywgJ3JwJywgJ2JkaScsICdiZG8nLCAnYnInLCAnd2JyJywgJ3RoJywgJ3RyJyBdXG4gICAgfSBdO1xuICAgIGxvb2t1cFRhYmxlLmV2YWx1YXRlUm9sZUZvckVsZW1lbnQgPSB7XG4gICAgICBBOiBmdW5jdGlvbiBBKF9yZWY4Mykge1xuICAgICAgICB2YXIgbm9kZSA9IF9yZWY4My5ub2RlLCBvdXQgPSBfcmVmODMub3V0O1xuICAgICAgICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgPT09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5ocmVmLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgQVJFQTogZnVuY3Rpb24gQVJFQShfcmVmODQpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfcmVmODQubm9kZTtcbiAgICAgICAgcmV0dXJuICFub2RlLmhyZWY7XG4gICAgICB9LFxuICAgICAgQlVUVE9OOiBmdW5jdGlvbiBCVVRUT04oX3JlZjg1KSB7XG4gICAgICAgIHZhciBub2RlID0gX3JlZjg1Lm5vZGUsIHJvbGUgPSBfcmVmODUucm9sZSwgb3V0ID0gX3JlZjg1Lm91dDtcbiAgICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdtZW51Jykge1xuICAgICAgICAgIHJldHVybiByb2xlID09PSAnbWVudWl0ZW0nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgICB9LFxuICAgICAgSU1HOiBmdW5jdGlvbiBJTUcoX3JlZjg2KSB7XG4gICAgICAgIHZhciBub2RlID0gX3JlZjg2Lm5vZGUsIHJvbGUgPSBfcmVmODYucm9sZSwgb3V0ID0gX3JlZjg2Lm91dDtcbiAgICAgICAgc3dpdGNoIChub2RlLmFsdCkge1xuICAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgIHJldHVybiBvdXQ7XG5cbiAgICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgcmV0dXJuIHJvbGUgPT09ICdwcmVzZW50YXRpb24nIHx8IHJvbGUgPT09ICdub25lJztcblxuICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcm9sZSAhPT0gJ3ByZXNlbnRhdGlvbicgJiYgcm9sZSAhPT0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgSU5QVVQ6IGZ1bmN0aW9uIElOUFVUKF9yZWY4Nykge1xuICAgICAgICB2YXIgbm9kZSA9IF9yZWY4Ny5ub2RlLCByb2xlID0gX3JlZjg3LnJvbGUsIG91dCA9IF9yZWY4Ny5vdXQ7XG4gICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgICAgIHJldHVybiBvdXQ7XG5cbiAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICBpZiAocm9sZSA9PT0gJ2J1dHRvbicgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG91dDtcblxuICAgICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICAgIHJldHVybiByb2xlID09PSAnbWVudWl0ZW1yYWRpbyc7XG5cbiAgICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICAgIHJldHVybiByb2xlID09PSAnY29tYm9ib3gnIHx8IHJvbGUgPT09ICdzZWFyY2hib3gnIHx8IHJvbGUgPT09ICdzcGluYnV0dG9uJztcblxuICAgICAgICAgY2FzZSAndGVsJzpcbiAgICAgICAgICByZXR1cm4gcm9sZSA9PT0gJ2NvbWJvYm94JyB8fCByb2xlID09PSAnc3BpbmJ1dHRvbic7XG5cbiAgICAgICAgIGNhc2UgJ3VybCc6XG4gICAgICAgICBjYXNlICdzZWFyY2gnOlxuICAgICAgICAgY2FzZSAnZW1haWwnOlxuICAgICAgICAgIHJldHVybiByb2xlID09PSAnY29tYm9ib3gnO1xuXG4gICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIExJOiBmdW5jdGlvbiBMSShfcmVmODgpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfcmVmODgubm9kZSwgb3V0ID0gX3JlZjg4Lm91dDtcbiAgICAgICAgdmFyIGhhc0ltcGxpY2l0TGlzdGl0ZW1Sb2xlID0gYXhlLnV0aWxzLm1hdGNoZXNTZWxlY3Rvcihub2RlLCAnb2wgbGksIHVsIGxpJyk7XG4gICAgICAgIGlmIChoYXNJbXBsaWNpdExpc3RpdGVtUm9sZSkge1xuICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgTUVOVTogZnVuY3Rpb24gTUVOVShfcmVmODkpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfcmVmODkubm9kZTtcbiAgICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdjb250ZXh0Jykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBPUFRJT046IGZ1bmN0aW9uIE9QVElPTihfcmVmOTApIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfcmVmOTAubm9kZTtcbiAgICAgICAgdmFyIHdpdGhpbk9wdGlvbkxpc3QgPSBheGUudXRpbHMubWF0Y2hlc1NlbGVjdG9yKG5vZGUsICdzZWxlY3QgPiBvcHRpb24sIGRhdGFsaXN0ID4gb3B0aW9uLCBvcHRncm91cCA+IG9wdGlvbicpO1xuICAgICAgICByZXR1cm4gIXdpdGhpbk9wdGlvbkxpc3Q7XG4gICAgICB9LFxuICAgICAgU0VMRUNUOiBmdW5jdGlvbiBTRUxFQ1QoX3JlZjkxKSB7XG4gICAgICAgIHZhciBub2RlID0gX3JlZjkxLm5vZGUsIHJvbGUgPSBfcmVmOTEucm9sZTtcbiAgICAgICAgcmV0dXJuICFub2RlLm11bHRpcGxlICYmIG5vZGUuc2l6ZSA8PSAxICYmIHJvbGUgPT09ICdtZW51JztcbiAgICAgIH0sXG4gICAgICBTVkc6IGZ1bmN0aW9uIFNWRyhfcmVmOTIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfcmVmOTIubm9kZSwgb3V0ID0gX3JlZjkyLm91dDtcbiAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLnBhcmVudE5vZGUubmFtZXNwYWNlVVJJID09PSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxvb2t1cFRhYmxlLnJvbGVzT2ZUeXBlID0ge1xuICAgICAgd2lkZ2V0OiBbICdidXR0b24nLCAnY2hlY2tib3gnLCAnZGlhbG9nJywgJ2dyaWRjZWxsJywgJ2xpbmsnLCAnbG9nJywgJ21hcnF1ZWUnLCAnbWVudWl0ZW0nLCAnbWVudWl0ZW1jaGVja2JveCcsICdtZW51aXRlbXJhZGlvJywgJ29wdGlvbicsICdwcm9ncmVzc2JhcicsICdyYWRpbycsICdzY3JvbGxiYXInLCAnc2VhcmNoYm94JywgJ3NsaWRlcicsICdzcGluYnV0dG9uJywgJ3N0YXR1cycsICdzd2l0Y2gnLCAndGFiJywgJ3RhYnBhbmVsJywgJ3RleHRib3gnLCAndGltZXInLCAndG9vbHRpcCcsICd0cmVlJywgJ3RyZWVpdGVtJyBdXG4gICAgfTtcbiAgICB2YXIgbG9va3VwX3RhYmxlX2RlZmF1bHQgPSBsb29rdXBUYWJsZTtcbiAgICBmdW5jdGlvbiBpbXBsaWNpdE5vZGVzKHJvbGUpIHtcbiAgICAgIHZhciBpbXBsaWNpdCA9IG51bGw7XG4gICAgICB2YXIgcm9sZXMgPSBsb29rdXBfdGFibGVfZGVmYXVsdC5yb2xlW3JvbGVdO1xuICAgICAgaWYgKHJvbGVzICYmIHJvbGVzLmltcGxpY2l0KSB7XG4gICAgICAgIGltcGxpY2l0ID0gX2Nsb25lKHJvbGVzLmltcGxpY2l0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbXBsaWNpdDtcbiAgICB9XG4gICAgdmFyIGltcGxpY2l0X25vZGVzX2RlZmF1bHQgPSBpbXBsaWNpdE5vZGVzO1xuICAgIGZ1bmN0aW9uIGlzQWNjZXNzaWJsZVJlZihub2RlKSB7XG4gICAgICByZXR1cm4gISFnZXRfYWNjZXNzaWJsZV9yZWZzX2RlZmF1bHQobm9kZSkubGVuZ3RoO1xuICAgIH1cbiAgICB2YXIgaXNfYWNjZXNzaWJsZV9yZWZfZGVmYXVsdCA9IGlzQWNjZXNzaWJsZVJlZjtcbiAgICBmdW5jdGlvbiBfaXNDb21ib2JveFBvcHVwKHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgX3BvcHVwUm9sZXM7XG4gICAgICB2YXIgX3JlZjkzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwgcG9wdXBSb2xlcyA9IF9yZWY5My5wb3B1cFJvbGVzO1xuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlKTtcbiAgICAgIChfcG9wdXBSb2xlcyA9IHBvcHVwUm9sZXMpICE9PSBudWxsICYmIF9wb3B1cFJvbGVzICE9PSB2b2lkIDAgPyBfcG9wdXBSb2xlcyA6IHBvcHVwUm9sZXMgPSBhcmlhX2F0dHJzX2RlZmF1bHRbJ2FyaWEtaGFzcG9wdXAnXS52YWx1ZXM7XG4gICAgICBpZiAoIXBvcHVwUm9sZXMuaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHZQYXJlbnQgPSBuZWFyZXN0UGFyZW50V2l0aFJvbGUodmlydHVhbE5vZGUpO1xuICAgICAgaWYgKGlzQ29tYm9ib3godlBhcmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgaWQgPSB2aXJ0dWFsTm9kZS5wcm9wcy5pZDtcbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF2aXJ0dWFsTm9kZS5hY3R1YWxOb2RlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGRldGVybWluZSBjb21ib2JveCBwb3B1cCB3aXRob3V0IGFuIGFjdHVhbE5vZGUnKTtcbiAgICAgIH1cbiAgICAgIHZhciByb290ID0gZ2V0X3Jvb3Rfbm9kZV9kZWZhdWx0KHZpcnR1YWxOb2RlLmFjdHVhbE5vZGUpO1xuICAgICAgdmFyIG93bmVkQ29tYm9ib3ggPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ1thcmlhLW93bnN+PVwiJy5jb25jYXQoaWQsICdcIl1bcm9sZX49XCJjb21ib2JveFwiXTpub3Qoc2VsZWN0KSxcXG4gICAgIFthcmlhLWNvbnRyb2xzfj1cIicpLmNvbmNhdChpZCwgJ1wiXVtyb2xlfj1cImNvbWJvYm94XCJdOm5vdChzZWxlY3QpJykpO1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20ob3duZWRDb21ib2JveCkuc29tZShpc0NvbWJvYm94KTtcbiAgICB9XG4gICAgdmFyIGlzQ29tYm9ib3ggPSBmdW5jdGlvbiBpc0NvbWJvYm94KG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlICYmIGdldF9yb2xlX2RlZmF1bHQobm9kZSkgPT09ICdjb21ib2JveCc7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZWFyZXN0UGFyZW50V2l0aFJvbGUodk5vZGUpIHtcbiAgICAgIHdoaWxlICh2Tm9kZSA9IHZOb2RlLnBhcmVudCkge1xuICAgICAgICBpZiAoZ2V0X3JvbGVfZGVmYXVsdCh2Tm9kZSwge1xuICAgICAgICAgIG5vUHJlc2VudGF0aW9uYWw6IHRydWVcbiAgICAgICAgfSkgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdk5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsYWJlbDIobm9kZSkge1xuICAgICAgbm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgcmV0dXJuIGxhYmVsX3ZpcnR1YWxfZGVmYXVsdChub2RlKTtcbiAgICB9XG4gICAgdmFyIGxhYmVsX2RlZmF1bHQyID0gbGFiZWwyO1xuICAgIGZ1bmN0aW9uIHJlcXVpcmVkQXR0cihyb2xlKSB7XG4gICAgICB2YXIgcm9sZURlZiA9IHN0YW5kYXJkc19kZWZhdWx0LmFyaWFSb2xlc1tyb2xlXTtcbiAgICAgIGlmICghcm9sZURlZiB8fCAhQXJyYXkuaXNBcnJheShyb2xlRGVmLnJlcXVpcmVkQXR0cnMpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfdG9Db25zdW1hYmxlQXJyYXkocm9sZURlZi5yZXF1aXJlZEF0dHJzKTtcbiAgICB9XG4gICAgdmFyIHJlcXVpcmVkX2F0dHJfZGVmYXVsdCA9IHJlcXVpcmVkQXR0cjtcbiAgICBmdW5jdGlvbiByZXF1aXJlZENvbnRleHQocm9sZSkge1xuICAgICAgdmFyIHJvbGVEZWYgPSBzdGFuZGFyZHNfZGVmYXVsdC5hcmlhUm9sZXNbcm9sZV07XG4gICAgICBpZiAoIXJvbGVEZWYgfHwgIUFycmF5LmlzQXJyYXkocm9sZURlZi5yZXF1aXJlZENvbnRleHQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShyb2xlRGVmLnJlcXVpcmVkQ29udGV4dCk7XG4gICAgfVxuICAgIHZhciByZXF1aXJlZF9jb250ZXh0X2RlZmF1bHQgPSByZXF1aXJlZENvbnRleHQ7XG4gICAgZnVuY3Rpb24gcmVxdWlyZWRPd25lZChyb2xlKSB7XG4gICAgICB2YXIgcm9sZURlZiA9IHN0YW5kYXJkc19kZWZhdWx0LmFyaWFSb2xlc1tyb2xlXTtcbiAgICAgIGlmICghcm9sZURlZiB8fCAhQXJyYXkuaXNBcnJheShyb2xlRGVmLnJlcXVpcmVkT3duZWQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShyb2xlRGVmLnJlcXVpcmVkT3duZWQpO1xuICAgIH1cbiAgICB2YXIgcmVxdWlyZWRfb3duZWRfZGVmYXVsdCA9IHJlcXVpcmVkT3duZWQ7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVBdHRyVmFsdWUodk5vZGUsIGF0dHIpIHtcbiAgICAgIHZOb2RlID0gdk5vZGUgaW5zdGFuY2VvZiBhYnN0cmFjdF92aXJ0dWFsX25vZGVfZGVmYXVsdCA/IHZOb2RlIDogZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQodk5vZGUpO1xuICAgICAgdmFyIG1hdGNoZXM0O1xuICAgICAgdmFyIGxpc3Q7XG4gICAgICB2YXIgdmFsdWUgPSB2Tm9kZS5hdHRyKGF0dHIpO1xuICAgICAgdmFyIGF0dHJJbmZvID0gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYUF0dHJzW2F0dHJdO1xuICAgICAgaWYgKCFhdHRySW5mbykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChhdHRySW5mby5hbGxvd0VtcHR5ICYmICghdmFsdWUgfHwgdmFsdWUudHJpbSgpID09PSAnJykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGF0dHJJbmZvLnR5cGUpIHtcbiAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgcmV0dXJuIFsgJ3RydWUnLCAnZmFsc2UnIF0uaW5jbHVkZXModmFsdWUudG9Mb3dlckNhc2UoKSk7XG5cbiAgICAgICBjYXNlICdubXRva2VuJzpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgYXR0ckluZm8udmFsdWVzLmluY2x1ZGVzKHZhbHVlLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgY2FzZSAnbm10b2tlbnMnOlxuICAgICAgICBsaXN0ID0gdG9rZW5fbGlzdF9kZWZhdWx0KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGxpc3QucmVkdWNlKGZ1bmN0aW9uKHJlc3VsdCwgdG9rZW4pIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICYmIGF0dHJJbmZvLnZhbHVlcy5pbmNsdWRlcyh0b2tlbik7XG4gICAgICAgIH0sIGxpc3QubGVuZ3RoICE9PSAwKTtcblxuICAgICAgIGNhc2UgJ2lkcmVmJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgZG9jID0gZ2V0X3Jvb3Rfbm9kZV9kZWZhdWx0Mih2Tm9kZS5hY3R1YWxOb2RlKTtcbiAgICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgZG9jLmdldEVsZW1lbnRCeUlkKHZhbHVlKSk7XG4gICAgICAgIH0gY2F0Y2ggKF91bnVzZWQ2KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHJlc29sdmUgaWQgcmVmZXJlbmNlcyBmb3IgcGFydGlhbCBET00nKTtcbiAgICAgICAgfVxuXG4gICAgICAgY2FzZSAnaWRyZWZzJzpcbiAgICAgICAgcmV0dXJuIGlkcmVmc19kZWZhdWx0KHZOb2RlLCBhdHRyKS5zb21lKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gISFub2RlO1xuICAgICAgICB9KTtcblxuICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09ICcnO1xuXG4gICAgICAgY2FzZSAnZGVjaW1hbCc6XG4gICAgICAgIG1hdGNoZXM0ID0gdmFsdWUubWF0Y2goL15bLStdPyhbMC05XSopXFwuPyhbMC05XSopJC8pO1xuICAgICAgICByZXR1cm4gISEobWF0Y2hlczQgJiYgKG1hdGNoZXM0WzFdIHx8IG1hdGNoZXM0WzJdKSk7XG5cbiAgICAgICBjYXNlICdpbnQnOlxuICAgICAgICB2YXIgbWluVmFsdWUgPSB0eXBlb2YgYXR0ckluZm8ubWluVmFsdWUgIT09ICd1bmRlZmluZWQnID8gYXR0ckluZm8ubWluVmFsdWUgOiAtSW5maW5pdHk7XG4gICAgICAgIHJldHVybiAvXlstK10/WzAtOV0rJC8udGVzdCh2YWx1ZSkgJiYgcGFyc2VJbnQodmFsdWUpID49IG1pblZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdmFsaWRhdGVfYXR0cl92YWx1ZV9kZWZhdWx0ID0gdmFsaWRhdGVBdHRyVmFsdWU7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVBdHRyKGF0dCkge1xuICAgICAgdmFyIGF0dHJEZWZpbml0aW9uID0gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYUF0dHJzW2F0dF07XG4gICAgICByZXR1cm4gISFhdHRyRGVmaW5pdGlvbjtcbiAgICB9XG4gICAgdmFyIHZhbGlkYXRlX2F0dHJfZGVmYXVsdCA9IHZhbGlkYXRlQXR0cjtcbiAgICBmdW5jdGlvbiB0ZEhhc0hlYWRlckV2YWx1YXRlKG5vZGUpIHtcbiAgICAgIHZhciBiYWRDZWxscyA9IFtdO1xuICAgICAgdmFyIGNlbGxzID0gZ2V0X2FsbF9jZWxsc19kZWZhdWx0KG5vZGUpO1xuICAgICAgdmFyIHRhYmxlR3JpZCA9IHRvX2dyaWRfZGVmYXVsdChub2RlKTtcbiAgICAgIGNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICBpZiAoaGFzX2NvbnRlbnRfZGVmYXVsdChjZWxsKSAmJiBpc19kYXRhX2NlbGxfZGVmYXVsdChjZWxsKSAmJiAhbGFiZWxfZGVmYXVsdDIoY2VsbCkpIHtcbiAgICAgICAgICB2YXIgaGFzSGVhZGVycyA9IGdldF9oZWFkZXJzX2RlZmF1bHQoY2VsbCwgdGFibGVHcmlkKS5zb21lKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhlYWRlciAhPT0gbnVsbCAmJiAhIWhhc19jb250ZW50X2RlZmF1bHQoaGVhZGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIWhhc0hlYWRlcnMpIHtcbiAgICAgICAgICAgIGJhZENlbGxzLnB1c2goY2VsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChiYWRDZWxscy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5yZWxhdGVkTm9kZXMoYmFkQ2VsbHMpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIHRkX2hhc19oZWFkZXJfZXZhbHVhdGVfZGVmYXVsdCA9IHRkSGFzSGVhZGVyRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gc2NvcGVWYWx1ZUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdzY29wZScpLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gb3B0aW9ucy52YWx1ZXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuICAgIH1cbiAgICB2YXIgc2NvcGVfdmFsdWVfZXZhbHVhdGVfZGVmYXVsdCA9IHNjb3BlVmFsdWVFdmFsdWF0ZTtcbiAgICB2YXIgc2FtZV9jYXB0aW9uX3N1bW1hcnlfZXZhbHVhdGVfZGVmYXVsdCA9IHNhbWVDYXB0aW9uU3VtbWFyeUV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIHNhbWVDYXB0aW9uU3VtbWFyeUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICBpZiAodmlydHVhbE5vZGUuY2hpbGRyZW4gPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdmFyIHN1bW1hcnkgPSB2aXJ0dWFsTm9kZS5hdHRyKCdzdW1tYXJ5Jyk7XG4gICAgICB2YXIgY2FwdGlvbk5vZGUgPSB2aXJ0dWFsTm9kZS5jaGlsZHJlbi5maW5kKGlzQ2FwdGlvbk5vZGUpO1xuICAgICAgdmFyIGNhcHRpb24gPSBjYXB0aW9uTm9kZSA/IHNhbml0aXplX2RlZmF1bHQoc3VidHJlZV90ZXh0X2RlZmF1bHQoY2FwdGlvbk5vZGUpKSA6IGZhbHNlO1xuICAgICAgaWYgKCFjYXB0aW9uIHx8ICFzdW1tYXJ5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzYW5pdGl6ZV9kZWZhdWx0KHN1bW1hcnkpLnRvTG93ZXJDYXNlKCkgPT09IHNhbml0aXplX2RlZmF1bHQoY2FwdGlvbikudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNDYXB0aW9uTm9kZSh2aXJ0dWFsTm9kZSkge1xuICAgICAgcmV0dXJuIHZpcnR1YWxOb2RlLnByb3BzLm5vZGVOYW1lID09PSAnY2FwdGlvbic7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGh0bWw1U2NvcGVFdmFsdWF0ZShub2RlKSB7XG4gICAgICBpZiAoIWlzX2h0bWw1X2RlZmF1bHQoZG9jdW1lbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1RIJztcbiAgICB9XG4gICAgdmFyIGh0bWw1X3Njb3BlX2V2YWx1YXRlX2RlZmF1bHQgPSBodG1sNVNjb3BlRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gY2FwdGlvbkZha2VkRXZhbHVhdGUobm9kZSkge1xuICAgICAgdmFyIHRhYmxlID0gdG9fZ3JpZF9kZWZhdWx0KG5vZGUpO1xuICAgICAgdmFyIGZpcnN0Um93ID0gdGFibGVbMF07XG4gICAgICBpZiAodGFibGUubGVuZ3RoIDw9IDEgfHwgZmlyc3RSb3cubGVuZ3RoIDw9IDEgfHwgbm9kZS5yb3dzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpcnN0Um93LnJlZHVjZShmdW5jdGlvbihvdXQsIGN1cnIsIGkpIHtcbiAgICAgICAgcmV0dXJuIG91dCB8fCBjdXJyICE9PSBmaXJzdFJvd1tpICsgMV0gJiYgZmlyc3RSb3dbaSArIDFdICE9PSB2b2lkIDA7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICAgIHZhciBjYXB0aW9uX2Zha2VkX2V2YWx1YXRlX2RlZmF1bHQgPSBjYXB0aW9uRmFrZWRFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBzdmdOb25FbXB0eVRpdGxlRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIGlmICghdmlydHVhbE5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHZhciB0aXRsZU5vZGUgPSB2aXJ0dWFsTm9kZS5jaGlsZHJlbi5maW5kKGZ1bmN0aW9uKF9yZWY5NCkge1xuICAgICAgICB2YXIgcHJvcHMgPSBfcmVmOTQucHJvcHM7XG4gICAgICAgIHJldHVybiBwcm9wcy5ub2RlTmFtZSA9PT0gJ3RpdGxlJztcbiAgICAgIH0pO1xuICAgICAgaWYgKCF0aXRsZU5vZGUpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnbm9UaXRsZSdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciB0aXRsZVRleHQyID0gc3VidHJlZV90ZXh0X2RlZmF1bHQodGl0bGVOb2RlLCB7XG4gICAgICAgICAgaW5jbHVkZUhpZGRlbjogdHJ1ZVxuICAgICAgICB9KS50cmltKCk7XG4gICAgICAgIGlmICh0aXRsZVRleHQyID09PSAnJykge1xuICAgICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgICBtZXNzYWdlS2V5OiAnZW1wdHlUaXRsZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKF91bnVzZWQ3KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIHN2Z19ub25fZW1wdHlfdGl0bGVfZXZhbHVhdGVfZGVmYXVsdCA9IHN2Z05vbkVtcHR5VGl0bGVFdmFsdWF0ZTtcbiAgICB2YXIgc3RhbmRhcmRzX2V4cG9ydHMgPSB7fTtcbiAgICBfX2V4cG9ydChzdGFuZGFyZHNfZXhwb3J0cywge1xuICAgICAgZ2V0QXJpYVJvbGVzQnlUeXBlOiBmdW5jdGlvbiBnZXRBcmlhUm9sZXNCeVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBnZXRfYXJpYV9yb2xlc19ieV90eXBlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0QXJpYVJvbGVzU3VwcG9ydGluZ05hbWVGcm9tQ29udGVudDogZnVuY3Rpb24gZ2V0QXJpYVJvbGVzU3VwcG9ydGluZ05hbWVGcm9tQ29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIGdldF9hcmlhX3JvbGVzX3N1cHBvcnRpbmdfbmFtZV9mcm9tX2NvbnRlbnRfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRFbGVtZW50U3BlYzogZnVuY3Rpb24gZ2V0RWxlbWVudFNwZWMoKSB7XG4gICAgICAgIHJldHVybiBnZXRfZWxlbWVudF9zcGVjX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0RWxlbWVudHNCeUNvbnRlbnRUeXBlOiBmdW5jdGlvbiBnZXRFbGVtZW50c0J5Q29udGVudFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBnZXRfZWxlbWVudHNfYnlfY29udGVudF90eXBlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZ2V0R2xvYmFsQXJpYUF0dHJzOiBmdW5jdGlvbiBnZXRHbG9iYWxBcmlhQXR0cnMoKSB7XG4gICAgICAgIHJldHVybiBnZXRfZ2xvYmFsX2FyaWFfYXR0cnNfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpbXBsaWNpdEh0bWxSb2xlczogZnVuY3Rpb24gaW1wbGljaXRIdG1sUm9sZXMoKSB7XG4gICAgICAgIHJldHVybiBpbXBsaWNpdF9odG1sX3JvbGVzX2RlZmF1bHQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gcHJlc2VudGF0aW9uYWxSb2xlRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBleHBsaWNpdFJvbGUyID0gZ2V0X2V4cGxpY2l0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSk7XG4gICAgICBpZiAoWyAncHJlc2VudGF0aW9uJywgJ25vbmUnIF0uaW5jbHVkZXMoZXhwbGljaXRSb2xlMikgJiYgWyAnaWZyYW1lJywgJ2ZyYW1lJyBdLmluY2x1ZGVzKHZpcnR1YWxOb2RlLnByb3BzLm5vZGVOYW1lKSAmJiB2aXJ0dWFsTm9kZS5oYXNBdHRyKCd0aXRsZScpKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogJ2lmcmFtZScsXG4gICAgICAgICAgbm9kZU5hbWU6IHZpcnR1YWxOb2RlLnByb3BzLm5vZGVOYW1lXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgaWYgKFsgJ3ByZXNlbnRhdGlvbicsICdub25lJyBdLmluY2x1ZGVzKHJvbGUpKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgcm9sZTogcm9sZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIVsgJ3ByZXNlbnRhdGlvbicsICdub25lJyBdLmluY2x1ZGVzKGV4cGxpY2l0Um9sZTIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNHbG9iYWxBcmlhID0gZ2V0X2dsb2JhbF9hcmlhX2F0dHJzX2RlZmF1bHQoKS5zb21lKGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgcmV0dXJuIHZpcnR1YWxOb2RlLmhhc0F0dHIoYXR0cik7XG4gICAgICB9KTtcbiAgICAgIHZhciBmb2N1c2FibGUgPSBfaXNGb2N1c2FibGUodmlydHVhbE5vZGUpO1xuICAgICAgdmFyIG1lc3NhZ2VLZXk7XG4gICAgICBpZiAoaGFzR2xvYmFsQXJpYSAmJiAhZm9jdXNhYmxlKSB7XG4gICAgICAgIG1lc3NhZ2VLZXkgPSAnZ2xvYmFsQXJpYSc7XG4gICAgICB9IGVsc2UgaWYgKCFoYXNHbG9iYWxBcmlhICYmIGZvY3VzYWJsZSkge1xuICAgICAgICBtZXNzYWdlS2V5ID0gJ2ZvY3VzYWJsZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlS2V5ID0gJ2JvdGgnO1xuICAgICAgfVxuICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgbWVzc2FnZUtleTogbWVzc2FnZUtleSxcbiAgICAgICAgcm9sZTogcm9sZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vbkVtcHR5SWZQcmVzZW50RXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBub2RlTmFtZTIgPSB2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlTmFtZTtcbiAgICAgIHZhciB0eXBlMiA9ICh2aXJ0dWFsTm9kZS5hdHRyKCd0eXBlJykgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgbGFiZWwzID0gdmlydHVhbE5vZGUuYXR0cigndmFsdWUnKTtcbiAgICAgIGlmIChsYWJlbDMpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnaGFzLWxhYmVsJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlTmFtZTIgPT09ICdpbnB1dCcgJiYgWyAnc3VibWl0JywgJ3Jlc2V0JyBdLmluY2x1ZGVzKHR5cGUyKSkge1xuICAgICAgICByZXR1cm4gbGFiZWwzID09PSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgbm9uX2VtcHR5X2lmX3ByZXNlbnRfZXZhbHVhdGVfZGVmYXVsdCA9IG5vbkVtcHR5SWZQcmVzZW50RXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gaXNPblNjcmVlbkV2YWx1YXRlKG5vZGUpIHtcbiAgICAgIHJldHVybiBfaXNWaXNpYmxlT25TY3JlZW4obm9kZSk7XG4gICAgfVxuICAgIHZhciBpc19vbl9zY3JlZW5fZXZhbHVhdGVfZGVmYXVsdCA9IGlzT25TY3JlZW5FdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBpbmxpbmVTdHlsZVByb3BlcnR5KG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjc3NQcm9wZXJ0eSA9IG9wdGlvbnMuY3NzUHJvcGVydHksIGFic29sdXRlVmFsdWVzID0gb3B0aW9ucy5hYnNvbHV0ZVZhbHVlcywgbWluVmFsdWUgPSBvcHRpb25zLm1pblZhbHVlLCBtYXhWYWx1ZSA9IG9wdGlvbnMubWF4VmFsdWUsIF9vcHRpb25zJG5vcm1hbFZhbHVlID0gb3B0aW9ucy5ub3JtYWxWYWx1ZSwgbm9ybWFsVmFsdWUgPSBfb3B0aW9ucyRub3JtYWxWYWx1ZSA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJG5vcm1hbFZhbHVlLCBub0ltcG9ydGFudCA9IG9wdGlvbnMubm9JbXBvcnRhbnQsIG11bHRpTGluZU9ubHkgPSBvcHRpb25zLm11bHRpTGluZU9ubHk7XG4gICAgICBpZiAoIW5vSW1wb3J0YW50ICYmIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShjc3NQcm9wZXJ0eSkgIT09ICdpbXBvcnRhbnQnIHx8IG11bHRpTGluZU9ubHkgJiYgIV9pc011bHRpbGluZShub2RlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0ge307XG4gICAgICBpZiAodHlwZW9mIG1pblZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBkYXRhLm1pblZhbHVlID0gbWluVmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG1heFZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBkYXRhLm1heFZhbHVlID0gbWF4VmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgZGVjbGFyZWRQcm9wVmFsdWUgPSBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoY3NzUHJvcGVydHkpO1xuICAgICAgaWYgKFsgJ2luaGVyaXQnLCAndW5zZXQnLCAncmV2ZXJ0JywgJ3JldmVydC1sYXllcicgXS5pbmNsdWRlcyhkZWNsYXJlZFByb3BWYWx1ZSkpIHtcbiAgICAgICAgdGhpcy5kYXRhKF9leHRlbmRzKHtcbiAgICAgICAgICB2YWx1ZTogZGVjbGFyZWRQcm9wVmFsdWVcbiAgICAgICAgfSwgZGF0YSkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGdldE51bWJlclZhbHVlKG5vZGUsIHtcbiAgICAgICAgYWJzb2x1dGVWYWx1ZXM6IGFic29sdXRlVmFsdWVzLFxuICAgICAgICBjc3NQcm9wZXJ0eTogY3NzUHJvcGVydHksXG4gICAgICAgIG5vcm1hbFZhbHVlOiBub3JtYWxWYWx1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmRhdGEoX2V4dGVuZHMoe1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0sIGRhdGEpKTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAoKHR5cGVvZiBtaW5WYWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgPj0gbWluVmFsdWUpICYmICh0eXBlb2YgbWF4VmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlIDw9IG1heFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TnVtYmVyVmFsdWUoZG9tTm9kZSwgX3JlZjk1KSB7XG4gICAgICB2YXIgY3NzUHJvcGVydHkgPSBfcmVmOTUuY3NzUHJvcGVydHksIGFic29sdXRlVmFsdWVzID0gX3JlZjk1LmFic29sdXRlVmFsdWVzLCBub3JtYWxWYWx1ZSA9IF9yZWY5NS5ub3JtYWxWYWx1ZTtcbiAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9tTm9kZSk7XG4gICAgICB2YXIgY3NzUHJvcFZhbHVlID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGNzc1Byb3BlcnR5KTtcbiAgICAgIGlmIChjc3NQcm9wVmFsdWUgPT09ICdub3JtYWwnKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IHBhcnNlRmxvYXQoY3NzUHJvcFZhbHVlKTtcbiAgICAgIGlmIChhYnNvbHV0ZVZhbHVlcykge1xuICAgICAgICByZXR1cm4gcGFyc2VkVmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgZm9udFNpemUgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1zaXplJykpO1xuICAgICAgdmFyIHZhbHVlID0gTWF0aC5yb3VuZChwYXJzZWRWYWx1ZSAvIGZvbnRTaXplICogMTAwKSAvIDEwMDtcbiAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNzc1Byb3BWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzQWx0RXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBub2RlTmFtZTIgPSB2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlTmFtZTtcbiAgICAgIGlmICghWyAnaW1nJywgJ2lucHV0JywgJ2FyZWEnIF0uaW5jbHVkZXMobm9kZU5hbWUyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmlydHVhbE5vZGUuaGFzQXR0cignYWx0Jyk7XG4gICAgfVxuICAgIHZhciBoYXNfYWx0X2V2YWx1YXRlX2RlZmF1bHQgPSBoYXNBbHRFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBleGlzdHNFdmFsdWF0ZSgpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHZhciBleGlzdHNfZXZhbHVhdGVfZGVmYXVsdCA9IGV4aXN0c0V2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGRvY0hhc1RpdGxlRXZhbHVhdGUoKSB7XG4gICAgICB2YXIgdGl0bGUgPSBkb2N1bWVudC50aXRsZTtcbiAgICAgIHJldHVybiAhIXNhbml0aXplX2RlZmF1bHQodGl0bGUpO1xuICAgIH1cbiAgICB2YXIgZG9jX2hhc190aXRsZV9ldmFsdWF0ZV9kZWZhdWx0ID0gZG9jSGFzVGl0bGVFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBhdm9pZElubGluZVNwYWNpbmdFdmFsdWF0ZShub2RlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgb3ZlcnJpZGRlblByb3BlcnRpZXMgPSBvcHRpb25zLmNzc1Byb3BlcnRpZXMuZmlsdGVyKGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgIGlmIChub2RlLnN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkocHJvcGVydHkpID09PSAnaW1wb3J0YW50Jykge1xuICAgICAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAob3ZlcnJpZGRlblByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmRhdGEob3ZlcnJpZGRlblByb3BlcnRpZXMpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGF2b2lkX2lubGluZV9zcGFjaW5nX2V2YWx1YXRlX2RlZmF1bHQgPSBhdm9pZElubGluZVNwYWNpbmdFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBhcmlhTGFiZWxsZWRieUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gISFzYW5pdGl6ZV9kZWZhdWx0KGFyaWFsYWJlbGxlZGJ5X3RleHRfZGVmYXVsdCh2aXJ0dWFsTm9kZSkpO1xuICAgICAgfSBjYXRjaCAoX3VudXNlZDgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGFyaWFfbGFiZWxsZWRieV9ldmFsdWF0ZV9kZWZhdWx0ID0gYXJpYUxhYmVsbGVkYnlFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBhcmlhTGFiZWxFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgcmV0dXJuICEhc2FuaXRpemVfZGVmYXVsdChfYXJpYWxhYmVsVGV4dCh2aXJ0dWFsTm9kZSkpO1xuICAgIH1cbiAgICB2YXIgYXJpYV9sYWJlbF9ldmFsdWF0ZV9kZWZhdWx0ID0gYXJpYUxhYmVsRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gZHVwbGljYXRlSWRFdmFsdWF0ZShub2RlKSB7XG4gICAgICB2YXIgaWQgPSBub2RlLmdldEF0dHJpYnV0ZSgnaWQnKS50cmltKCk7XG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHJvb3QgPSBnZXRfcm9vdF9ub2RlX2RlZmF1bHQyKG5vZGUpO1xuICAgICAgdmFyIG1hdGNoaW5nTm9kZXMgPSBBcnJheS5mcm9tKHJvb3QucXVlcnlTZWxlY3RvckFsbCgnW2lkPVwiJy5jb25jYXQoZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQoaWQpLCAnXCJdJykpKS5maWx0ZXIoZnVuY3Rpb24oZm91bmROb2RlKSB7XG4gICAgICAgIHJldHVybiBmb3VuZE5vZGUgIT09IG5vZGU7XG4gICAgICB9KTtcbiAgICAgIGlmIChtYXRjaGluZ05vZGVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhtYXRjaGluZ05vZGVzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YShpZCk7XG4gICAgICByZXR1cm4gbWF0Y2hpbmdOb2Rlcy5sZW5ndGggPT09IDA7XG4gICAgfVxuICAgIHZhciBkdXBsaWNhdGVfaWRfZXZhbHVhdGVfZGVmYXVsdCA9IGR1cGxpY2F0ZUlkRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gZHVwbGljYXRlSWRBZnRlcihyZXN1bHRzKSB7XG4gICAgICB2YXIgdW5pcXVlSWRzID0gW107XG4gICAgICByZXR1cm4gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24ocikge1xuICAgICAgICBpZiAodW5pcXVlSWRzLmluZGV4T2Yoci5kYXRhKSA9PT0gLTEpIHtcbiAgICAgICAgICB1bmlxdWVJZHMucHVzaChyLmRhdGEpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgZHVwbGljYXRlX2lkX2FmdGVyX2RlZmF1bHQgPSBkdXBsaWNhdGVJZEFmdGVyO1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUZyYW1lVGl0bGVFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2Tm9kZSkge1xuICAgICAgdmFyIHRpdGxlID0gc2FuaXRpemVfZGVmYXVsdCh2Tm9kZS5hdHRyKCd0aXRsZScpKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdGhpcy5kYXRhKHRpdGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgdW5pcXVlX2ZyYW1lX3RpdGxlX2V2YWx1YXRlX2RlZmF1bHQgPSB1bmlxdWVGcmFtZVRpdGxlRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gdW5pcXVlRnJhbWVUaXRsZUFmdGVyKHJlc3VsdHMpIHtcbiAgICAgIHZhciB0aXRsZXMgPSB7fTtcbiAgICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihyKSB7XG4gICAgICAgIHRpdGxlc1tyLmRhdGFdID0gdGl0bGVzW3IuZGF0YV0gIT09IHZvaWQgMCA/ICsrdGl0bGVzW3IuZGF0YV0gOiAwO1xuICAgICAgfSk7XG4gICAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24ocikge1xuICAgICAgICByLnJlc3VsdCA9ICEhdGl0bGVzW3IuZGF0YV07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgICB2YXIgdW5pcXVlX2ZyYW1lX3RpdGxlX2FmdGVyX2RlZmF1bHQgPSB1bmlxdWVGcmFtZVRpdGxlQWZ0ZXI7XG4gICAgZnVuY3Rpb24gc2tpcExpbmtFdmFsdWF0ZShub2RlKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gZ2V0X2VsZW1lbnRfYnlfcmVmZXJlbmNlX2RlZmF1bHQobm9kZSwgJ2hyZWYnKTtcbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIF9pc1Zpc2libGVUb1NjcmVlblJlYWRlcnModGFyZ2V0KSB8fCB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBza2lwX2xpbmtfZXZhbHVhdGVfZGVmYXVsdCA9IHNraXBMaW5rRXZhbHVhdGU7XG4gICAgdmFyIGltcGxpY2l0QXJpYUxpdmVSb2xlcyA9IFsgJ2FsZXJ0JywgJ2xvZycsICdzdGF0dXMnIF07XG4gICAgZnVuY3Rpb24gcmVnaW9uRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgIGlzSWZyYW1lOiBbICdpZnJhbWUnLCAnZnJhbWUnIF0uaW5jbHVkZXModmlydHVhbE5vZGUucHJvcHMubm9kZU5hbWUpXG4gICAgICB9KTtcbiAgICAgIHZhciByZWdpb25sZXNzTm9kZXMgPSBjYWNoZV9kZWZhdWx0LmdldCgncmVnaW9ubGVzc05vZGVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRSZWdpb25sZXNzTm9kZXMob3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhcmVnaW9ubGVzc05vZGVzLmluY2x1ZGVzKHZpcnR1YWxOb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UmVnaW9ubGVzc05vZGVzKG9wdGlvbnMpIHtcbiAgICAgIHZhciByZWdpb25sZXNzTm9kZXMgPSBmaW5kUmVnaW9ubGVzc0VsbXMoYXhlLl90cmVlWzBdLCBvcHRpb25zKS5tYXAoZnVuY3Rpb24odk5vZGUpIHtcbiAgICAgICAgd2hpbGUgKHZOb2RlLnBhcmVudCAmJiAhdk5vZGUucGFyZW50Ll9oYXNSZWdpb25EZXNjZW5kYW50ICYmIHZOb2RlLnBhcmVudC5hY3R1YWxOb2RlICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgdk5vZGUgPSB2Tm9kZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZOb2RlO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uKHZOb2RlLCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2Yodk5vZGUpID09PSBpbmRleDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlZ2lvbmxlc3NOb2RlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZFJlZ2lvbmxlc3NFbG1zKHZpcnR1YWxOb2RlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbm9kZSA9IHZpcnR1YWxOb2RlLmFjdHVhbE5vZGU7XG4gICAgICBpZiAoZ2V0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSkgPT09ICdidXR0b24nIHx8IGlzUmVnaW9uKHZpcnR1YWxOb2RlLCBvcHRpb25zKSB8fCBbICdpZnJhbWUnLCAnZnJhbWUnIF0uaW5jbHVkZXModmlydHVhbE5vZGUucHJvcHMubm9kZU5hbWUpIHx8IF9pc1NraXBMaW5rKHZpcnR1YWxOb2RlLmFjdHVhbE5vZGUpICYmIGdldF9lbGVtZW50X2J5X3JlZmVyZW5jZV9kZWZhdWx0KHZpcnR1YWxOb2RlLmFjdHVhbE5vZGUsICdocmVmJykgfHwgIV9pc1Zpc2libGVUb1NjcmVlblJlYWRlcnMobm9kZSkpIHtcbiAgICAgICAgdmFyIHZOb2RlID0gdmlydHVhbE5vZGU7XG4gICAgICAgIHdoaWxlICh2Tm9kZSkge1xuICAgICAgICAgIHZOb2RlLl9oYXNSZWdpb25EZXNjZW5kYW50ID0gdHJ1ZTtcbiAgICAgICAgICB2Tm9kZSA9IHZOb2RlLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoWyAnaWZyYW1lJywgJ2ZyYW1lJyBdLmluY2x1ZGVzKHZpcnR1YWxOb2RlLnByb3BzLm5vZGVOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBbIHZpcnR1YWxOb2RlIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfSBlbHNlIGlmIChub2RlICE9PSBkb2N1bWVudC5ib2R5ICYmIGhhc19jb250ZW50X2RlZmF1bHQobm9kZSwgdHJ1ZSkgJiYgIWlzU2hhbGxvd2x5SGlkZGVuKHZpcnR1YWxOb2RlKSkge1xuICAgICAgICByZXR1cm4gWyB2aXJ0dWFsTm9kZSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZpcnR1YWxOb2RlLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbihfcmVmOTYpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsTm9kZSA9IF9yZWY5Ni5hY3R1YWxOb2RlO1xuICAgICAgICAgIHJldHVybiBhY3R1YWxOb2RlLm5vZGVUeXBlID09PSAxO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24odk5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gZmluZFJlZ2lvbmxlc3NFbG1zKHZOb2RlLCBvcHRpb25zKTtcbiAgICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uKGEyLCBiMikge1xuICAgICAgICAgIHJldHVybiBhMi5jb25jYXQoYjIpO1xuICAgICAgICB9LCBbXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU2hhbGxvd2x5SGlkZGVuKHZpcnR1YWxOb2RlKSB7XG4gICAgICByZXR1cm4gWyAnbm9uZScsICdwcmVzZW50YXRpb24nIF0uaW5jbHVkZXMoZ2V0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSkpICYmICFoYXNDaGlsZFRleHROb2Rlcyh2aXJ0dWFsTm9kZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzUmVnaW9uKHZpcnR1YWxOb2RlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbm9kZSA9IHZpcnR1YWxOb2RlLmFjdHVhbE5vZGU7XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgdmFyIGFyaWFMaXZlID0gKG5vZGUuZ2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnKSB8fCAnJykudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgICB2YXIgbGFuZG1hcmtSb2xlczIgPSBnZXRfYXJpYV9yb2xlc19ieV90eXBlX2RlZmF1bHQoJ2xhbmRtYXJrJyk7XG4gICAgICBpZiAoWyAnYXNzZXJ0aXZlJywgJ3BvbGl0ZScgXS5pbmNsdWRlcyhhcmlhTGl2ZSkgfHwgaW1wbGljaXRBcmlhTGl2ZVJvbGVzLmluY2x1ZGVzKHJvbGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGxhbmRtYXJrUm9sZXMyLmluY2x1ZGVzKHJvbGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMucmVnaW9uTWF0Y2hlciAmJiBtYXRjaGVzX2RlZmF1bHQyKHZpcnR1YWxOb2RlLCBvcHRpb25zLnJlZ2lvbk1hdGNoZXIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWdpb25BZnRlcihyZXN1bHRzKSB7XG4gICAgICB2YXIgaWZyYW1lUmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgcmV0dXJuIHIuZGF0YS5pc0lmcmFtZTtcbiAgICAgIH0pO1xuICAgICAgcmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgaWYgKHIucmVzdWx0IHx8IHIubm9kZS5hbmNlc3RyeS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZyYW1lQW5jZXN0cnkgPSByLm5vZGUuYW5jZXN0cnkuc2xpY2UoMCwgLTEpO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yMTUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpZnJhbWVSZXN1bHRzKSwgX3N0ZXAxNTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjE1LnMoKTsgIShfc3RlcDE1ID0gX2l0ZXJhdG9yMTUubigpKS5kb25lOyApIHtcbiAgICAgICAgICAgIHZhciBpZnJhbWVSZXN1bHQgPSBfc3RlcDE1LnZhbHVlO1xuICAgICAgICAgICAgaWYgKF9tYXRjaEFuY2VzdHJ5KGZyYW1lQW5jZXN0cnksIGlmcmFtZVJlc3VsdC5ub2RlLmFuY2VzdHJ5KSkge1xuICAgICAgICAgICAgICByLnJlc3VsdCA9IGlmcmFtZVJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMTUuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjE1LmYoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZnJhbWVSZXN1bHRzLmZvckVhY2goZnVuY3Rpb24ocikge1xuICAgICAgICBpZiAoIXIucmVzdWx0KSB7XG4gICAgICAgICAgci5yZXN1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgICB2YXIgcmVnaW9uX2FmdGVyX2RlZmF1bHQgPSByZWdpb25BZnRlcjtcbiAgICBmdW5jdGlvbiBub3JtYWxpemVGb250V2VpZ2h0KHdlaWdodCkge1xuICAgICAgc3dpdGNoICh3ZWlnaHQpIHtcbiAgICAgICBjYXNlICdsaWdodGVyJzpcbiAgICAgICAgcmV0dXJuIDEwMDtcblxuICAgICAgIGNhc2UgJ25vcm1hbCc6XG4gICAgICAgIHJldHVybiA0MDA7XG5cbiAgICAgICBjYXNlICdib2xkJzpcbiAgICAgICAgcmV0dXJuIDcwMDtcblxuICAgICAgIGNhc2UgJ2JvbGRlcic6XG4gICAgICAgIHJldHVybiA5MDA7XG4gICAgICB9XG4gICAgICB3ZWlnaHQgPSBwYXJzZUludCh3ZWlnaHQpO1xuICAgICAgcmV0dXJuICFpc05hTih3ZWlnaHQpID8gd2VpZ2h0IDogNDAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRUZXh0Q29udGFpbmVyKGVsbSkge1xuICAgICAgdmFyIG5leHROb2RlID0gZWxtO1xuICAgICAgdmFyIG91dGVyVGV4dCA9IGVsbS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICB2YXIgaW5uZXJUZXh0ID0gb3V0ZXJUZXh0O1xuICAgICAgd2hpbGUgKGlubmVyVGV4dCA9PT0gb3V0ZXJUZXh0ICYmIG5leHROb2RlICE9PSB2b2lkIDApIHtcbiAgICAgICAgdmFyIF9pMzUgPSAtMTtcbiAgICAgICAgZWxtID0gbmV4dE5vZGU7XG4gICAgICAgIGlmIChlbG0uY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGVsbTtcbiAgICAgICAgfVxuICAgICAgICBkbyB7XG4gICAgICAgICAgX2kzNSsrO1xuICAgICAgICAgIGlubmVyVGV4dCA9IGVsbS5jaGlsZHJlbltfaTM1XS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICAgIH0gd2hpbGUgKGlubmVyVGV4dCA9PT0gJycgJiYgX2kzNSArIDEgPCBlbG0uY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgICAgbmV4dE5vZGUgPSBlbG0uY2hpbGRyZW5bX2kzNV07XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxtO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTdHlsZVZhbHVlcyhub2RlKSB7XG4gICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShnZXRUZXh0Q29udGFpbmVyKG5vZGUpKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6IG5vcm1hbGl6ZUZvbnRXZWlnaHQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC13ZWlnaHQnKSksXG4gICAgICAgIGZvbnRTaXplOiBwYXJzZUludChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdmb250LXNpemUnKSksXG4gICAgICAgIGlzSXRhbGljOiBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdmb250LXN0eWxlJykgPT09ICdpdGFsaWMnXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0hlYWRlclN0eWxlKHN0eWxlQSwgc3R5bGVCLCBtYXJnaW5zKSB7XG4gICAgICByZXR1cm4gbWFyZ2lucy5yZWR1Y2UoZnVuY3Rpb24ob3V0LCBtYXJnaW4pIHtcbiAgICAgICAgcmV0dXJuIG91dCB8fCAoIW1hcmdpbi5zaXplIHx8IHN0eWxlQS5mb250U2l6ZSAvIG1hcmdpbi5zaXplID4gc3R5bGVCLmZvbnRTaXplKSAmJiAoIW1hcmdpbi53ZWlnaHQgfHwgc3R5bGVBLmZvbnRXZWlnaHQgLSBtYXJnaW4ud2VpZ2h0ID4gc3R5bGVCLmZvbnRXZWlnaHQpICYmICghbWFyZ2luLml0YWxpYyB8fCBzdHlsZUEuaXNJdGFsaWMgJiYgIXN0eWxlQi5pc0l0YWxpYyk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBBc0hlYWRpbmdFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHNpYmxpbmdzID0gQXJyYXkuZnJvbShub2RlLnBhcmVudE5vZGUuY2hpbGRyZW4pO1xuICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHNpYmxpbmdzLmluZGV4T2Yobm9kZSk7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHZhciBtYXJnaW5zID0gb3B0aW9ucy5tYXJnaW5zIHx8IFtdO1xuICAgICAgdmFyIG5leHRTaWJsaW5nID0gc2libGluZ3Muc2xpY2UoY3VycmVudEluZGV4ICsgMSkuZmluZChmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgcmV0dXJuIGVsbS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnUCc7XG4gICAgICB9KTtcbiAgICAgIHZhciBwcmV2U2libGluZyA9IHNpYmxpbmdzLnNsaWNlKDAsIGN1cnJlbnRJbmRleCkucmV2ZXJzZSgpLmZpbmQoZnVuY3Rpb24oZWxtKSB7XG4gICAgICAgIHJldHVybiBlbG0ubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1AnO1xuICAgICAgfSk7XG4gICAgICB2YXIgY3VyclN0eWxlID0gZ2V0U3R5bGVWYWx1ZXMobm9kZSk7XG4gICAgICB2YXIgbmV4dFN0eWxlID0gbmV4dFNpYmxpbmcgPyBnZXRTdHlsZVZhbHVlcyhuZXh0U2libGluZykgOiBudWxsO1xuICAgICAgdmFyIHByZXZTdHlsZSA9IHByZXZTaWJsaW5nID8gZ2V0U3R5bGVWYWx1ZXMocHJldlNpYmxpbmcpIDogbnVsbDtcbiAgICAgIHZhciBvcHRpb25zUGFzc0xlbmd0aCA9IG9wdGlvbnMucGFzc0xlbmd0aDtcbiAgICAgIHZhciBvcHRpb25zRmFpbExlbmd0aCA9IG9wdGlvbnMuZmFpbExlbmd0aDtcbiAgICAgIHZhciBoZWFkaW5nTGVuZ3RoID0gbm9kZS50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoO1xuICAgICAgdmFyIHBhcmFncmFwaExlbmd0aCA9IG5leHRTaWJsaW5nID09PSBudWxsIHx8IG5leHRTaWJsaW5nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuZXh0U2libGluZy50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoO1xuICAgICAgaWYgKGhlYWRpbmdMZW5ndGggPiBwYXJhZ3JhcGhMZW5ndGggKiBvcHRpb25zUGFzc0xlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghbmV4dFN0eWxlIHx8ICFpc0hlYWRlclN0eWxlKGN1cnJTdHlsZSwgbmV4dFN0eWxlLCBtYXJnaW5zKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBibG9ja3F1b3RlID0gZmluZF91cF92aXJ0dWFsX2RlZmF1bHQodmlydHVhbE5vZGUsICdibG9ja3F1b3RlJyk7XG4gICAgICBpZiAoYmxvY2txdW90ZSAmJiBibG9ja3F1b3RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdCTE9DS1FVT1RFJykge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZTdHlsZSAmJiAhaXNIZWFkZXJTdHlsZShjdXJyU3R5bGUsIHByZXZTdHlsZSwgbWFyZ2lucykpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmIChoZWFkaW5nTGVuZ3RoID4gcGFyYWdyYXBoTGVuZ3RoICogb3B0aW9uc0ZhaWxMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHBfYXNfaGVhZGluZ19ldmFsdWF0ZV9kZWZhdWx0ID0gcEFzSGVhZGluZ0V2YWx1YXRlO1xuICAgIHZhciBzZXBhcmF0b3JSZWdleCA9IC9bOyxcXHNdLztcbiAgICB2YXIgdmFsaWRSZWRpcmVjdE51bVJlZ2V4ID0gL15bMC05Ll0rJC87XG4gICAgZnVuY3Rpb24gbWV0YVJlZnJlc2hFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIF9yZWY5NyA9IG9wdGlvbnMgfHwge30sIG1pbkRlbGF5ID0gX3JlZjk3Lm1pbkRlbGF5LCBtYXhEZWxheSA9IF9yZWY5Ny5tYXhEZWxheTtcbiAgICAgIHZhciBjb250ZW50ID0gKHZpcnR1YWxOb2RlLmF0dHIoJ2NvbnRlbnQnKSB8fCAnJykudHJpbSgpO1xuICAgICAgdmFyIF9jb250ZW50JHNwbGl0ID0gY29udGVudC5zcGxpdChzZXBhcmF0b3JSZWdleCksIF9jb250ZW50JHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9jb250ZW50JHNwbGl0LCAxKSwgcmVkaXJlY3RTdHIgPSBfY29udGVudCRzcGxpdDJbMF07XG4gICAgICBpZiAoIXJlZGlyZWN0U3RyLm1hdGNoKHZhbGlkUmVkaXJlY3ROdW1SZWdleCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVkaXJlY3REZWxheSA9IHBhcnNlRmxvYXQocmVkaXJlY3RTdHIpO1xuICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgcmVkaXJlY3REZWxheTogcmVkaXJlY3REZWxheVxuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIG1pbkRlbGF5ID09PSAnbnVtYmVyJyAmJiByZWRpcmVjdERlbGF5IDw9IG9wdGlvbnMubWluRGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG1heERlbGF5ID09PSAnbnVtYmVyJyAmJiByZWRpcmVjdERlbGF5ID4gb3B0aW9ucy5tYXhEZWxheSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW50ZXJuYWxMaW5rUHJlc2VudEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgbGlua3MgPSBxdWVyeV9zZWxlY3Rvcl9hbGxfZGVmYXVsdCh2aXJ0dWFsTm9kZSwgJ2FbaHJlZl0nKTtcbiAgICAgIHJldHVybiBsaW5rcy5zb21lKGZ1bmN0aW9uKHZMaW5rKSB7XG4gICAgICAgIHJldHVybiAvXiNbXi8hXS8udGVzdCh2TGluay5hdHRyKCdocmVmJykpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBpbnRlcm5hbF9saW5rX3ByZXNlbnRfZXZhbHVhdGVfZGVmYXVsdCA9IGludGVybmFsTGlua1ByZXNlbnRFdmFsdWF0ZTtcbiAgICB2YXIgY29tbW9uc19leHBvcnRzID0ge307XG4gICAgX19leHBvcnQoY29tbW9uc19leHBvcnRzLCB7XG4gICAgICBhcmlhOiBmdW5jdGlvbiBhcmlhKCkge1xuICAgICAgICByZXR1cm4gYXJpYV9leHBvcnRzO1xuICAgICAgfSxcbiAgICAgIGNvbG9yOiBmdW5jdGlvbiBjb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yX2V4cG9ydHM7XG4gICAgICB9LFxuICAgICAgZG9tOiBmdW5jdGlvbiBkb20oKSB7XG4gICAgICAgIHJldHVybiBkb21fZXhwb3J0cztcbiAgICAgIH0sXG4gICAgICBmb3JtczogZnVuY3Rpb24gZm9ybXMoKSB7XG4gICAgICAgIHJldHVybiBmb3Jtc19leHBvcnRzO1xuICAgICAgfSxcbiAgICAgIG1hdGNoZXM6IGZ1bmN0aW9uIG1hdGNoZXMoKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzX2RlZmF1bHQyO1xuICAgICAgfSxcbiAgICAgIG1hdGg6IGZ1bmN0aW9uIG1hdGgoKSB7XG4gICAgICAgIHJldHVybiBtYXRoX2V4cG9ydHM7XG4gICAgICB9LFxuICAgICAgc3RhbmRhcmRzOiBmdW5jdGlvbiBzdGFuZGFyZHMoKSB7XG4gICAgICAgIHJldHVybiBzdGFuZGFyZHNfZXhwb3J0cztcbiAgICAgIH0sXG4gICAgICB0YWJsZTogZnVuY3Rpb24gdGFibGUoKSB7XG4gICAgICAgIHJldHVybiB0YWJsZV9leHBvcnRzO1xuICAgICAgfSxcbiAgICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgICAgIHJldHVybiB0ZXh0X2V4cG9ydHM7XG4gICAgICB9LFxuICAgICAgdXRpbHM6IGZ1bmN0aW9uIHV0aWxzKCkge1xuICAgICAgICByZXR1cm4gdXRpbHNfZXhwb3J0cztcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgY29sb3JfZXhwb3J0cyA9IHt9O1xuICAgIF9fZXhwb3J0KGNvbG9yX2V4cG9ydHMsIHtcbiAgICAgIENvbG9yOiBmdW5jdGlvbiBDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgY2VudGVyUG9pbnRPZlJlY3Q6IGZ1bmN0aW9uIGNlbnRlclBvaW50T2ZSZWN0KCkge1xuICAgICAgICByZXR1cm4gY2VudGVyX3BvaW50X29mX3JlY3RfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBlbGVtZW50SGFzSW1hZ2U6IGZ1bmN0aW9uIGVsZW1lbnRIYXNJbWFnZSgpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRfaGFzX2ltYWdlX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgZWxlbWVudElzRGlzdGluY3Q6IGZ1bmN0aW9uIGVsZW1lbnRJc0Rpc3RpbmN0KCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudF9pc19kaXN0aW5jdF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGZpbHRlcmVkUmVjdFN0YWNrOiBmdW5jdGlvbiBmaWx0ZXJlZFJlY3RTdGFjaygpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkX3JlY3Rfc3RhY2tfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBmbGF0dGVuQ29sb3JzOiBmdW5jdGlvbiBmbGF0dGVuQ29sb3JzKCkge1xuICAgICAgICByZXR1cm4gX2ZsYXR0ZW5Db2xvcnM7XG4gICAgICB9LFxuICAgICAgZmxhdHRlblNoYWRvd0NvbG9yczogZnVuY3Rpb24gZmxhdHRlblNoYWRvd0NvbG9ycygpIHtcbiAgICAgICAgcmV0dXJuIF9mbGF0dGVuU2hhZG93Q29sb3JzO1xuICAgICAgfSxcbiAgICAgIGdldEJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24gZ2V0QmFja2dyb3VuZENvbG9yKCkge1xuICAgICAgICByZXR1cm4gX2dldEJhY2tncm91bmRDb2xvcjI7XG4gICAgICB9LFxuICAgICAgZ2V0QmFja2dyb3VuZFN0YWNrOiBmdW5jdGlvbiBnZXRCYWNrZ3JvdW5kU3RhY2soKSB7XG4gICAgICAgIHJldHVybiBfZ2V0QmFja2dyb3VuZFN0YWNrO1xuICAgICAgfSxcbiAgICAgIGdldENvbnRyYXN0OiBmdW5jdGlvbiBnZXRDb250cmFzdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldF9jb250cmFzdF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldEZvcmVncm91bmRDb2xvcjogZnVuY3Rpb24gZ2V0Rm9yZWdyb3VuZENvbG9yKCkge1xuICAgICAgICByZXR1cm4gX2dldEZvcmVncm91bmRDb2xvcjtcbiAgICAgIH0sXG4gICAgICBnZXRPd25CYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uIGdldE93bkJhY2tncm91bmRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIGdldF9vd25fYmFja2dyb3VuZF9jb2xvcl9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGdldFJlY3RTdGFjazogZnVuY3Rpb24gZ2V0UmVjdFN0YWNrKCkge1xuICAgICAgICByZXR1cm4gZ2V0X3JlY3Rfc3RhY2tfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBnZXRTdGFja2luZ0NvbnRleHQ6IGZ1bmN0aW9uIGdldFN0YWNraW5nQ29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRTdGFja2luZ0NvbnRleHQ7XG4gICAgICB9LFxuICAgICAgZ2V0U3Ryb2tlQ29sb3JzRnJvbVNoYWRvd3M6IGZ1bmN0aW9uIGdldFN0cm9rZUNvbG9yc0Zyb21TaGFkb3dzKCkge1xuICAgICAgICByZXR1cm4gX2dldFN0cm9rZUNvbG9yc0Zyb21TaGFkb3dzO1xuICAgICAgfSxcbiAgICAgIGdldFRleHRTaGFkb3dDb2xvcnM6IGZ1bmN0aW9uIGdldFRleHRTaGFkb3dDb2xvcnMoKSB7XG4gICAgICAgIHJldHVybiBfZ2V0VGV4dFNoYWRvd0NvbG9ycztcbiAgICAgIH0sXG4gICAgICBoYXNWYWxpZENvbnRyYXN0UmF0aW86IGZ1bmN0aW9uIGhhc1ZhbGlkQ29udHJhc3RSYXRpbygpIHtcbiAgICAgICAgcmV0dXJuIGhhc192YWxpZF9jb250cmFzdF9yYXRpb19kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGluY29tcGxldGVEYXRhOiBmdW5jdGlvbiBpbmNvbXBsZXRlRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIGluY29tcGxldGVfZGF0YV9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIHBhcnNlVGV4dFNoYWRvd3M6IGZ1bmN0aW9uIHBhcnNlVGV4dFNoYWRvd3MoKSB7XG4gICAgICAgIHJldHVybiBfcGFyc2VUZXh0U2hhZG93cztcbiAgICAgIH0sXG4gICAgICBzdGFja2luZ0NvbnRleHRUb0NvbG9yOiBmdW5jdGlvbiBzdGFja2luZ0NvbnRleHRUb0NvbG9yKCkge1xuICAgICAgICByZXR1cm4gX3N0YWNraW5nQ29udGV4dFRvQ29sb3I7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY2VudGVyUG9pbnRPZlJlY3QocmVjdCkge1xuICAgICAgaWYgKHJlY3QubGVmdCA+IHdpbmRvdy5pbm5lcldpZHRoKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAocmVjdC50b3AgPiB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHZhciB4ID0gTWF0aC5taW4oTWF0aC5jZWlsKHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyKSwgd2luZG93LmlubmVyV2lkdGggLSAxKTtcbiAgICAgIHZhciB5ID0gTWF0aC5taW4oTWF0aC5jZWlsKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyKSwgd2luZG93LmlubmVySGVpZ2h0IC0gMSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgY2VudGVyX3BvaW50X29mX3JlY3RfZGVmYXVsdCA9IGNlbnRlclBvaW50T2ZSZWN0O1xuICAgIGZ1bmN0aW9uIF9nZXRGb250cyhzdHlsZSkge1xuICAgICAgcmV0dXJuIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtZmFtaWx5Jykuc3BsaXQoL1ssO10vZykubWFwKGZ1bmN0aW9uKGZvbnQpIHtcbiAgICAgICAgcmV0dXJuIGZvbnQudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZWxlbWVudElzRGlzdGluY3Qobm9kZSwgYW5jZXN0b3JOb2RlKSB7XG4gICAgICB2YXIgbm9kZVN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICBpZiAobm9kZVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQtaW1hZ2UnKSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGhhc0JvcmRlciA9IFsgJ2JvcmRlci1ib3R0b20nLCAnYm9yZGVyLXRvcCcsICdvdXRsaW5lJyBdLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsIGVkZ2UpIHtcbiAgICAgICAgdmFyIGJvcmRlckNsciA9IG5ldyBjb2xvcl9kZWZhdWx0KCk7XG4gICAgICAgIGJvcmRlckNsci5wYXJzZVN0cmluZyhub2RlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShlZGdlICsgJy1jb2xvcicpKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCB8fCBub2RlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShlZGdlICsgJy1zdHlsZScpICE9PSAnbm9uZScgJiYgcGFyc2VGbG9hdChub2RlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShlZGdlICsgJy13aWR0aCcpKSA+IDAgJiYgYm9yZGVyQ2xyLmFscGhhICE9PSAwO1xuICAgICAgfSwgZmFsc2UpO1xuICAgICAgaWYgKGhhc0JvcmRlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJlbnRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGFuY2VzdG9yTm9kZSk7XG4gICAgICBpZiAoX2dldEZvbnRzKG5vZGVTdHlsZSlbMF0gIT09IF9nZXRGb250cyhwYXJlbnRTdHlsZSlbMF0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgaGFzU3R5bGUgPSBbICd0ZXh0LWRlY29yYXRpb24tbGluZScsICd0ZXh0LWRlY29yYXRpb24tc3R5bGUnLCAnZm9udC13ZWlnaHQnLCAnZm9udC1zdHlsZScsICdmb250LXNpemUnIF0ucmVkdWNlKGZ1bmN0aW9uKHJlc3VsdCwgY3NzUHJvcCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0IHx8IG5vZGVTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGNzc1Byb3ApICE9PSBwYXJlbnRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGNzc1Byb3ApO1xuICAgICAgfSwgZmFsc2UpO1xuICAgICAgdmFyIHREZWMgPSBub2RlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndGV4dC1kZWNvcmF0aW9uJyk7XG4gICAgICBpZiAodERlYy5zcGxpdCgnICcpLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgaGFzU3R5bGUgPSBoYXNTdHlsZSB8fCB0RGVjICE9PSBwYXJlbnRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0ZXh0LWRlY29yYXRpb24nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNTdHlsZTtcbiAgICB9XG4gICAgdmFyIGVsZW1lbnRfaXNfZGlzdGluY3RfZGVmYXVsdCA9IGVsZW1lbnRJc0Rpc3RpbmN0O1xuICAgIGZ1bmN0aW9uIGdldFJlY3RTdGFjazIoZWxtKSB7XG4gICAgICB2YXIgYm91bmRpbmdTdGFjayA9IGdldF9lbGVtZW50X3N0YWNrX2RlZmF1bHQoZWxtKTtcbiAgICAgIHZhciBmaWx0ZXJlZEFyciA9IGdldF90ZXh0X2VsZW1lbnRfc3RhY2tfZGVmYXVsdChlbG0pO1xuICAgICAgaWYgKCFmaWx0ZXJlZEFyciB8fCBmaWx0ZXJlZEFyci5sZW5ndGggPD0gMSkge1xuICAgICAgICByZXR1cm4gWyBib3VuZGluZ1N0YWNrIF07XG4gICAgICB9XG4gICAgICBpZiAoZmlsdGVyZWRBcnIuc29tZShmdW5jdGlvbihzdGFjaykge1xuICAgICAgICByZXR1cm4gc3RhY2sgPT09IHZvaWQgMDtcbiAgICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgZmlsdGVyZWRBcnIuc3BsaWNlKDAsIDAsIGJvdW5kaW5nU3RhY2spO1xuICAgICAgcmV0dXJuIGZpbHRlcmVkQXJyO1xuICAgIH1cbiAgICB2YXIgZ2V0X3JlY3Rfc3RhY2tfZGVmYXVsdCA9IGdldFJlY3RTdGFjazI7XG4gICAgZnVuY3Rpb24gZmlsdGVyZWRSZWN0U3RhY2soZWxtKSB7XG4gICAgICB2YXIgcmVjdFN0YWNrID0gZ2V0X3JlY3Rfc3RhY2tfZGVmYXVsdChlbG0pO1xuICAgICAgaWYgKHJlY3RTdGFjayAmJiByZWN0U3RhY2subGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZWN0U3RhY2tbMF07XG4gICAgICB9XG4gICAgICBpZiAocmVjdFN0YWNrICYmIHJlY3RTdGFjay5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBib3VuZGluZ1N0YWNrID0gcmVjdFN0YWNrLnNoaWZ0KCk7XG4gICAgICAgIHZhciBpc1NhbWU7XG4gICAgICAgIHJlY3RTdGFjay5mb3JFYWNoKGZ1bmN0aW9uKHJlY3RMaXN0LCBpbmRleCkge1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVjdEEgPSByZWN0U3RhY2tbaW5kZXggLSAxXSwgcmVjdEIgPSByZWN0U3RhY2tbaW5kZXhdO1xuICAgICAgICAgIGlzU2FtZSA9IHJlY3RBLmV2ZXJ5KGZ1bmN0aW9uKGVsZW1lbnQsIGVsZW1lbnRJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgPT09IHJlY3RCW2VsZW1lbnRJbmRleF07XG4gICAgICAgICAgfSkgfHwgYm91bmRpbmdTdGFjay5pbmNsdWRlcyhlbG0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc1NhbWUpIHtcbiAgICAgICAgICBpbmNvbXBsZXRlX2RhdGFfZGVmYXVsdC5zZXQoJ2JnQ29sb3InLCAnZWxtUGFydGlhbGx5T2JzY3VyaW5nJyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY3RTdGFja1swXTtcbiAgICAgIH1cbiAgICAgIGluY29tcGxldGVfZGF0YV9kZWZhdWx0LnNldCgnYmdDb2xvcicsICdvdXRzaWRlVmlld3BvcnQnKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZmlsdGVyZWRfcmVjdF9zdGFja19kZWZhdWx0ID0gZmlsdGVyZWRSZWN0U3RhY2s7XG4gICAgdmFyIG5vblNlcGFyYWJsZUJsZW5kTW9kZXMgPSBbICdodWUnLCAnc2F0dXJhdGlvbicsICdjb2xvcicsICdsdW1pbm9zaXR5JyBdO1xuICAgIHZhciBibGVuZEZ1bmN0aW9ucyA9IHtcbiAgICAgIG5vcm1hbDogZnVuY3Rpb24gbm9ybWFsKENiLCBDcykge1xuICAgICAgICByZXR1cm4gQ3M7XG4gICAgICB9LFxuICAgICAgbXVsdGlwbHk6IGZ1bmN0aW9uIG11bHRpcGx5KENiLCBDcykge1xuICAgICAgICByZXR1cm4gQ3MgKiBDYjtcbiAgICAgIH0sXG4gICAgICBzY3JlZW46IGZ1bmN0aW9uIHNjcmVlbihDYiwgQ3MpIHtcbiAgICAgICAgcmV0dXJuIENiICsgQ3MgLSBDYiAqIENzO1xuICAgICAgfSxcbiAgICAgIG92ZXJsYXk6IGZ1bmN0aW9uIG92ZXJsYXkoQ2IsIENzKSB7XG4gICAgICAgIHJldHVybiB0aGlzWydoYXJkLWxpZ2h0J10oQ3MsIENiKTtcbiAgICAgIH0sXG4gICAgICBkYXJrZW46IGZ1bmN0aW9uIGRhcmtlbihDYiwgQ3MpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKENiLCBDcyk7XG4gICAgICB9LFxuICAgICAgbGlnaHRlbjogZnVuY3Rpb24gbGlnaHRlbihDYiwgQ3MpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KENiLCBDcyk7XG4gICAgICB9LFxuICAgICAgJ2NvbG9yLWRvZGdlJzogZnVuY3Rpb24gY29sb3JEb2RnZShDYiwgQ3MpIHtcbiAgICAgICAgcmV0dXJuIENiID09PSAwID8gMCA6IENzID09PSAxID8gMSA6IE1hdGgubWluKDEsIENiIC8gKDEgLSBDcykpO1xuICAgICAgfSxcbiAgICAgICdjb2xvci1idXJuJzogZnVuY3Rpb24gY29sb3JCdXJuKENiLCBDcykge1xuICAgICAgICByZXR1cm4gQ2IgPT09IDEgPyAxIDogQ3MgPT09IDAgPyAwIDogMSAtIE1hdGgubWluKDEsICgxIC0gQ2IpIC8gQ3MpO1xuICAgICAgfSxcbiAgICAgICdoYXJkLWxpZ2h0JzogZnVuY3Rpb24gaGFyZExpZ2h0KENiLCBDcykge1xuICAgICAgICByZXR1cm4gQ3MgPD0gLjUgPyB0aGlzLm11bHRpcGx5KENiLCAyICogQ3MpIDogdGhpcy5zY3JlZW4oQ2IsIDIgKiBDcyAtIDEpO1xuICAgICAgfSxcbiAgICAgICdzb2Z0LWxpZ2h0JzogZnVuY3Rpb24gc29mdExpZ2h0KENiLCBDcykge1xuICAgICAgICBpZiAoQ3MgPD0gLjUpIHtcbiAgICAgICAgICByZXR1cm4gQ2IgLSAoMSAtIDIgKiBDcykgKiBDYiAqICgxIC0gQ2IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBEID0gQ2IgPD0gLjI1ID8gKCgxNiAqIENiIC0gMTIpICogQ2IgKyA0KSAqIENiIDogTWF0aC5zcXJ0KENiKTtcbiAgICAgICAgICByZXR1cm4gQ2IgKyAoMiAqIENzIC0gMSkgKiAoRCAtIENiKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpZmZlcmVuY2U6IGZ1bmN0aW9uIGRpZmZlcmVuY2UoQ2IsIENzKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhDYiAtIENzKTtcbiAgICAgIH0sXG4gICAgICBleGNsdXNpb246IGZ1bmN0aW9uIGV4Y2x1c2lvbihDYiwgQ3MpIHtcbiAgICAgICAgcmV0dXJuIENiICsgQ3MgLSAyICogQ2IgKiBDcztcbiAgICAgIH0sXG4gICAgICBodWU6IGZ1bmN0aW9uIGh1ZShDYiwgQ3MpIHtcbiAgICAgICAgcmV0dXJuIENzLnNldFNhdHVyYXRpb24oQ2IuZ2V0U2F0dXJhdGlvbigpKS5zZXRMdW1pbm9zaXR5KENiLmdldEx1bWlub3NpdHkoKSk7XG4gICAgICB9LFxuICAgICAgc2F0dXJhdGlvbjogZnVuY3Rpb24gc2F0dXJhdGlvbihDYiwgQ3MpIHtcbiAgICAgICAgcmV0dXJuIENiLnNldFNhdHVyYXRpb24oQ3MuZ2V0U2F0dXJhdGlvbigpKS5zZXRMdW1pbm9zaXR5KENiLmdldEx1bWlub3NpdHkoKSk7XG4gICAgICB9LFxuICAgICAgY29sb3I6IGZ1bmN0aW9uIGNvbG9yKENiLCBDcykge1xuICAgICAgICByZXR1cm4gQ3Muc2V0THVtaW5vc2l0eShDYi5nZXRMdW1pbm9zaXR5KCkpO1xuICAgICAgfSxcbiAgICAgIGx1bWlub3NpdHk6IGZ1bmN0aW9uIGx1bWlub3NpdHkoQ2IsIENzKSB7XG4gICAgICAgIHJldHVybiBDYi5zZXRMdW1pbm9zaXR5KENzLmdldEx1bWlub3NpdHkoKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBfZmxhdHRlbkNvbG9ycyhzb3VyY2VDb2xvciwgYmFja2Ryb3ApIHtcbiAgICAgIHZhciBibGVuZE1vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdub3JtYWwnO1xuICAgICAgdmFyIGJsZW5kaW5nUmVzdWx0ID0gYmxlbmQoYmFja2Ryb3AsIHNvdXJjZUNvbG9yLCBibGVuZE1vZGUpO1xuICAgICAgdmFyIHIgPSBzaW1wbGVBbHBoYUNvbXBvc2l0aW5nKHNvdXJjZUNvbG9yLnJlZCwgc291cmNlQ29sb3IuYWxwaGEsIGJhY2tkcm9wLnJlZCwgYmFja2Ryb3AuYWxwaGEsIGJsZW5kaW5nUmVzdWx0LnIgKiAyNTUpO1xuICAgICAgdmFyIGcyID0gc2ltcGxlQWxwaGFDb21wb3NpdGluZyhzb3VyY2VDb2xvci5ncmVlbiwgc291cmNlQ29sb3IuYWxwaGEsIGJhY2tkcm9wLmdyZWVuLCBiYWNrZHJvcC5hbHBoYSwgYmxlbmRpbmdSZXN1bHQuZyAqIDI1NSk7XG4gICAgICB2YXIgYjIgPSBzaW1wbGVBbHBoYUNvbXBvc2l0aW5nKHNvdXJjZUNvbG9yLmJsdWUsIHNvdXJjZUNvbG9yLmFscGhhLCBiYWNrZHJvcC5ibHVlLCBiYWNrZHJvcC5hbHBoYSwgYmxlbmRpbmdSZXN1bHQuYiAqIDI1NSk7XG4gICAgICB2YXIgXFx1MDNiMW8gPSBjbGFtcDIoc291cmNlQ29sb3IuYWxwaGEgKyBiYWNrZHJvcC5hbHBoYSAqICgxIC0gc291cmNlQ29sb3IuYWxwaGEpLCAwLCAxKTtcbiAgICAgIGlmIChcXHUwM2IxbyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IGNvbG9yX2RlZmF1bHQociwgZzIsIGIyLCBcXHUwM2Ixbyk7XG4gICAgICB9XG4gICAgICB2YXIgQ3IgPSBNYXRoLnJvdW5kKHIgLyBcXHUwM2Ixbyk7XG4gICAgICB2YXIgQ2cgPSBNYXRoLnJvdW5kKGcyIC8gXFx1MDNiMW8pO1xuICAgICAgdmFyIENiID0gTWF0aC5yb3VuZChiMiAvIFxcdTAzYjFvKTtcbiAgICAgIHJldHVybiBuZXcgY29sb3JfZGVmYXVsdChDciwgQ2csIENiLCBcXHUwM2Ixbyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNpbXBsZUFscGhhQ29tcG9zaXRpbmcoQ3MsIFxcdTAzYjFzLCBDYiwgXFx1MDNiMWIsIGJsZW5kaW5nUmVzdWx0KSB7XG4gICAgICByZXR1cm4gXFx1MDNiMXMgKiAoMSAtIFxcdTAzYjFiKSAqIENzICsgXFx1MDNiMXMgKiBcXHUwM2IxYiAqIGJsZW5kaW5nUmVzdWx0ICsgKDEgLSBcXHUwM2IxcykgKiBcXHUwM2IxYiAqIENiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGFtcDIodmFsdWUsIG1pbiwgbWF4Mikge1xuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmxlbmQoQ2IsIENzLCBibGVuZE1vZGUpIHtcbiAgICAgIGlmIChub25TZXBhcmFibGVCbGVuZE1vZGVzLmluY2x1ZGVzKGJsZW5kTW9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGJsZW5kRnVuY3Rpb25zW2JsZW5kTW9kZV0oQ2IsIENzKTtcbiAgICAgIH1cbiAgICAgIHZhciBDID0gbmV3IGNvbG9yX2RlZmF1bHQoKTtcbiAgICAgIFsgJ3InLCAnZycsICdiJyBdLmZvckVhY2goZnVuY3Rpb24oY2hhbm5lbCkge1xuICAgICAgICBDW2NoYW5uZWxdID0gYmxlbmRGdW5jdGlvbnNbYmxlbmRNb2RlXShDYltjaGFubmVsXSwgQ3NbY2hhbm5lbF0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gQztcbiAgICB9XG4gICAgZnVuY3Rpb24gX2ZsYXR0ZW5TaGFkb3dDb2xvcnMoZmdDb2xvciwgYmdDb2xvcikge1xuICAgICAgdmFyIGFscGhhID0gZmdDb2xvci5hbHBoYTtcbiAgICAgIHZhciByID0gKDEgLSBhbHBoYSkgKiBiZ0NvbG9yLnJlZCArIGFscGhhICogZmdDb2xvci5yZWQ7XG4gICAgICB2YXIgZzIgPSAoMSAtIGFscGhhKSAqIGJnQ29sb3IuZ3JlZW4gKyBhbHBoYSAqIGZnQ29sb3IuZ3JlZW47XG4gICAgICB2YXIgYjIgPSAoMSAtIGFscGhhKSAqIGJnQ29sb3IuYmx1ZSArIGFscGhhICogZmdDb2xvci5ibHVlO1xuICAgICAgdmFyIGEyID0gZmdDb2xvci5hbHBoYSArIGJnQ29sb3IuYWxwaGEgKiAoMSAtIGZnQ29sb3IuYWxwaGEpO1xuICAgICAgcmV0dXJuIG5ldyBjb2xvcl9kZWZhdWx0KHIsIGcyLCBiMiwgYTIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZ2V0QmFja2dyb3VuZFN0YWNrKG5vZGUpIHtcbiAgICAgIHZhciBzdGFja3MgPSBnZXRfdGV4dF9lbGVtZW50X3N0YWNrX2RlZmF1bHQobm9kZSkubWFwKGZ1bmN0aW9uKHN0YWNrKSB7XG4gICAgICAgIHN0YWNrID0gcmVkdWNlX3RvX2VsZW1lbnRzX2JlbG93X2Zsb2F0aW5nX2RlZmF1bHQoc3RhY2ssIG5vZGUpO1xuICAgICAgICBzdGFjayA9IHNvcnRQYWdlQmFja2dyb3VuZChzdGFjayk7XG4gICAgICAgIHJldHVybiBzdGFjaztcbiAgICAgIH0pO1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHN0YWNrID0gc3RhY2tzW2luZGV4XTtcbiAgICAgICAgaWYgKHN0YWNrWzBdICE9PSBub2RlKSB7XG4gICAgICAgICAgaW5jb21wbGV0ZV9kYXRhX2RlZmF1bHQuc2V0KCdiZ0NvbG9yJywgJ2JnT3ZlcmxhcCcpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCAhPT0gMCAmJiAhc2hhbGxvd0FycmF5c0VxdWFsKHN0YWNrLCBzdGFja3NbMF0pKSB7XG4gICAgICAgICAgaW5jb21wbGV0ZV9kYXRhX2RlZmF1bHQuc2V0KCdiZ0NvbG9yJywgJ2VsbVBhcnRpYWxseU9ic2N1cmluZycpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhY2tzWzBdIHx8IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNvcnRQYWdlQmFja2dyb3VuZChlbG1TdGFjaykge1xuICAgICAgdmFyIGJvZHlJbmRleCA9IGVsbVN0YWNrLmluZGV4T2YoZG9jdW1lbnQuYm9keSk7XG4gICAgICB2YXIgYmdOb2RlcyA9IGVsbVN0YWNrO1xuICAgICAgdmFyIGh0bWxCZ0NvbG9yID0gZ2V0X293bl9iYWNrZ3JvdW5kX2NvbG9yX2RlZmF1bHQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSk7XG4gICAgICBpZiAoYm9keUluZGV4ID4gMSAmJiBodG1sQmdDb2xvci5hbHBoYSA9PT0gMCAmJiAhZWxlbWVudF9oYXNfaW1hZ2VfZGVmYXVsdChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICAgIGlmIChib2R5SW5kZXggPiAxKSB7XG4gICAgICAgICAgYmdOb2Rlcy5zcGxpY2UoYm9keUluZGV4LCAxKTtcbiAgICAgICAgICBiZ05vZGVzLnB1c2goZG9jdW1lbnQuYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGh0bWxJbmRleCA9IGJnTm9kZXMuaW5kZXhPZihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgICBpZiAoaHRtbEluZGV4ID4gMCkge1xuICAgICAgICAgIGJnTm9kZXMuc3BsaWNlKGh0bWxJbmRleCwgMSk7XG4gICAgICAgICAgYmdOb2Rlcy5wdXNoKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiZ05vZGVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaGFsbG93QXJyYXlzRXF1YWwoYTIsIGIyKSB7XG4gICAgICBpZiAoYTIgPT09IGIyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGEyID09PSBudWxsIHx8IGIyID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChhMi5sZW5ndGggIT09IGIyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfaTM2ID0gMDsgX2kzNiA8IGEyLmxlbmd0aDsgKytfaTM2KSB7XG4gICAgICAgIGlmIChhMltfaTM2XSAhPT0gYjJbX2kzNl0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgU0hBRE9XX1NUUk9LRV9BTFBIQSA9IC41NDtcbiAgICB2YXIgVklTSUJMRV9TSEFET1dfTUlOX1BYID0gLjU7XG4gICAgdmFyIE9QQVFVRV9TVFJPS0VfT0ZGU0VUX01JTl9QWCA9IDEuNTtcbiAgICB2YXIgZWRnZXMgPSBbICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnIF07XG4gICAgZnVuY3Rpb24gX2dldFN0cm9rZUNvbG9yc0Zyb21TaGFkb3dzKHBhcnNlZFNoYWRvd3MpIHtcbiAgICAgIHZhciBfcmVmOTggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LCBfcmVmOTgkaWdub3JlRWRnZUNvdW4gPSBfcmVmOTguaWdub3JlRWRnZUNvdW50LCBpZ25vcmVFZGdlQ291bnQgPSBfcmVmOTgkaWdub3JlRWRnZUNvdW4gPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjk4JGlnbm9yZUVkZ2VDb3VuO1xuICAgICAgdmFyIHNoYWRvd01hcCA9IGdldFNoYWRvd0NvbG9yc01hcChwYXJzZWRTaGFkb3dzKTtcbiAgICAgIHZhciBzaGFkb3dzQnlDb2xvciA9IE9iamVjdC5lbnRyaWVzKHNoYWRvd01hcCkubWFwKGZ1bmN0aW9uKF9yZWY5OSkge1xuICAgICAgICB2YXIgX3JlZjEwMCA9IF9zbGljZWRUb0FycmF5KF9yZWY5OSwgMiksIGNvbG9yU3RyID0gX3JlZjEwMFswXSwgc2lkZXMgPSBfcmVmMTAwWzFdO1xuICAgICAgICB2YXIgZWRnZUNvdW50ID0gZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKHNpZGUpIHtcbiAgICAgICAgICByZXR1cm4gc2lkZXNbc2lkZV0ubGVuZ3RoICE9PSAwO1xuICAgICAgICB9KS5sZW5ndGg7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29sb3JTdHI6IGNvbG9yU3RyLFxuICAgICAgICAgIHNpZGVzOiBzaWRlcyxcbiAgICAgICAgICBlZGdlQ291bnQ6IGVkZ2VDb3VudFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBpZiAoIWlnbm9yZUVkZ2VDb3VudCAmJiBzaGFkb3dzQnlDb2xvci5zb21lKGZ1bmN0aW9uKF9yZWYxMDEpIHtcbiAgICAgICAgdmFyIGVkZ2VDb3VudCA9IF9yZWYxMDEuZWRnZUNvdW50O1xuICAgICAgICByZXR1cm4gZWRnZUNvdW50ID4gMSAmJiBlZGdlQ291bnQgPCA0O1xuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2hhZG93c0J5Q29sb3IubWFwKHNoYWRvd0dyb3VwVG9Db2xvcikuZmlsdGVyKGZ1bmN0aW9uKHNoYWRvdykge1xuICAgICAgICByZXR1cm4gc2hhZG93ICE9PSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNoYWRvd0NvbG9yc01hcChwYXJzZWRTaGFkb3dzKSB7XG4gICAgICB2YXIgY29sb3JNYXAgPSB7fTtcbiAgICAgIHZhciBfaXRlcmF0b3IxNiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHBhcnNlZFNoYWRvd3MpLCBfc3RlcDE2O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IxNi5zKCk7ICEoX3N0ZXAxNiA9IF9pdGVyYXRvcjE2Lm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgdmFyIF9jb2xvck1hcCRjb2xvclN0cjtcbiAgICAgICAgICB2YXIgX3N0ZXAxNiR2YWx1ZSA9IF9zdGVwMTYudmFsdWUsIGNvbG9yU3RyID0gX3N0ZXAxNiR2YWx1ZS5jb2xvclN0ciwgcGl4ZWxzID0gX3N0ZXAxNiR2YWx1ZS5waXhlbHM7XG4gICAgICAgICAgKF9jb2xvck1hcCRjb2xvclN0ciA9IGNvbG9yTWFwW2NvbG9yU3RyXSkgIT09IG51bGwgJiYgX2NvbG9yTWFwJGNvbG9yU3RyICE9PSB2b2lkIDAgPyBfY29sb3JNYXAkY29sb3JTdHIgOiBjb2xvck1hcFtjb2xvclN0cl0gPSB7XG4gICAgICAgICAgICB0b3A6IFtdLFxuICAgICAgICAgICAgcmlnaHQ6IFtdLFxuICAgICAgICAgICAgYm90dG9tOiBbXSxcbiAgICAgICAgICAgIGxlZnQ6IFtdXG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgYm9yZGVycyA9IGNvbG9yTWFwW2NvbG9yU3RyXTtcbiAgICAgICAgICB2YXIgX3BpeGVscyA9IF9zbGljZWRUb0FycmF5KHBpeGVscywgMiksIG9mZnNldFggPSBfcGl4ZWxzWzBdLCBvZmZzZXRZID0gX3BpeGVsc1sxXTtcbiAgICAgICAgICBpZiAob2Zmc2V0WCA+IFZJU0lCTEVfU0hBRE9XX01JTl9QWCkge1xuICAgICAgICAgICAgYm9yZGVycy5yaWdodC5wdXNoKG9mZnNldFgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoLW9mZnNldFggPiBWSVNJQkxFX1NIQURPV19NSU5fUFgpIHtcbiAgICAgICAgICAgIGJvcmRlcnMubGVmdC5wdXNoKC1vZmZzZXRYKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9mZnNldFkgPiBWSVNJQkxFX1NIQURPV19NSU5fUFgpIHtcbiAgICAgICAgICAgIGJvcmRlcnMuYm90dG9tLnB1c2gob2Zmc2V0WSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgtb2Zmc2V0WSA+IFZJU0lCTEVfU0hBRE9XX01JTl9QWCkge1xuICAgICAgICAgICAgYm9yZGVycy50b3AucHVzaCgtb2Zmc2V0WSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMTYuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMTYuZigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbG9yTWFwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaGFkb3dHcm91cFRvQ29sb3IoX3JlZjEwMikge1xuICAgICAgdmFyIGNvbG9yU3RyID0gX3JlZjEwMi5jb2xvclN0ciwgc2lkZXMgPSBfcmVmMTAyLnNpZGVzLCBlZGdlQ291bnQgPSBfcmVmMTAyLmVkZ2VDb3VudDtcbiAgICAgIGlmIChlZGdlQ291bnQgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgc3Ryb2tlQ29sb3IgPSBuZXcgY29sb3JfZGVmYXVsdCgpO1xuICAgICAgc3Ryb2tlQ29sb3IucGFyc2VTdHJpbmcoY29sb3JTdHIpO1xuICAgICAgdmFyIGRlbnNpdHkgPSAwO1xuICAgICAgdmFyIGlzU29saWQgPSB0cnVlO1xuICAgICAgZWRnZXMuZm9yRWFjaChmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgIGRlbnNpdHkgKz0gc2lkZXNbZWRnZV0ubGVuZ3RoIC8gNDtcbiAgICAgICAgaXNTb2xpZCAmJiAoaXNTb2xpZCA9IHNpZGVzW2VkZ2VdLmV2ZXJ5KGZ1bmN0aW9uKG9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBvZmZzZXQgPiBPUEFRVUVfU1RST0tFX09GRlNFVF9NSU5fUFg7XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFpc1NvbGlkKSB7XG4gICAgICAgIHN0cm9rZUNvbG9yLmFscGhhID0gMSAtIE1hdGgucG93KFNIQURPV19TVFJPS0VfQUxQSEEsIGRlbnNpdHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cm9rZUNvbG9yO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfcGFyc2VUZXh0U2hhZG93cyh0ZXh0U2hhZG93KSB7XG4gICAgICB2YXIgY3VycmVudCA9IHtcbiAgICAgICAgcGl4ZWxzOiBbXVxuICAgICAgfTtcbiAgICAgIHZhciBzdHIgPSB0ZXh0U2hhZG93LnRyaW0oKTtcbiAgICAgIHZhciBzaGFkb3dzID0gWyBjdXJyZW50IF07XG4gICAgICBpZiAoIXN0cikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3RyKSB7XG4gICAgICAgIHZhciBjb2xvck1hdGNoID0gc3RyLm1hdGNoKC9eW2Etel0rKFxcKFteKV0rXFwpKT8vaSkgfHwgc3RyLm1hdGNoKC9eI1swLTlhLWZdKy9pKTtcbiAgICAgICAgdmFyIHBpeGVsTWF0Y2ggPSBzdHIubWF0Y2goL14oWzAtOS4tXSspcHgvaSkgfHwgc3RyLm1hdGNoKC9eKDApLyk7XG4gICAgICAgIGlmIChjb2xvck1hdGNoKSB7XG4gICAgICAgICAgYXNzZXJ0X2RlZmF1bHQoIWN1cnJlbnQuY29sb3JTdHIsICdNdWx0aXBsZSBjb2xvcnMgaWRlbnRpZmllZCBpbiB0ZXh0LXNoYWRvdzogJy5jb25jYXQodGV4dFNoYWRvdykpO1xuICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKGNvbG9yTWF0Y2hbMF0sICcnKS50cmltKCk7XG4gICAgICAgICAgY3VycmVudC5jb2xvclN0ciA9IGNvbG9yTWF0Y2hbMF07XG4gICAgICAgIH0gZWxzZSBpZiAocGl4ZWxNYXRjaCkge1xuICAgICAgICAgIGFzc2VydF9kZWZhdWx0KGN1cnJlbnQucGl4ZWxzLmxlbmd0aCA8IDMsICdUb28gbWFueSBwaXhlbCB1bml0cyBpbiB0ZXh0LXNoYWRvdzogJy5jb25jYXQodGV4dFNoYWRvdykpO1xuICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKHBpeGVsTWF0Y2hbMF0sICcnKS50cmltKCk7XG4gICAgICAgICAgdmFyIHBpeGVsVW5pdCA9IHBhcnNlRmxvYXQoKHBpeGVsTWF0Y2hbMV1bMF0gPT09ICcuJyA/ICcwJyA6ICcnKSArIHBpeGVsTWF0Y2hbMV0pO1xuICAgICAgICAgIGN1cnJlbnQucGl4ZWxzLnB1c2gocGl4ZWxVbml0KTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJbMF0gPT09ICcsJykge1xuICAgICAgICAgIGFzc2VydF9kZWZhdWx0KGN1cnJlbnQucGl4ZWxzLmxlbmd0aCA+PSAyLCAnTWlzc2luZyBwaXhlbCB2YWx1ZSBpbiB0ZXh0LXNoYWRvdzogJy5jb25jYXQodGV4dFNoYWRvdykpO1xuICAgICAgICAgIGN1cnJlbnQgPSB7XG4gICAgICAgICAgICBwaXhlbHM6IFtdXG4gICAgICAgICAgfTtcbiAgICAgICAgICBzaGFkb3dzLnB1c2goY3VycmVudCk7XG4gICAgICAgICAgc3RyID0gc3RyLnN1YnN0cigxKS50cmltKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcHJvY2VzcyB0ZXh0LXNoYWRvd3M6ICcuY29uY2F0KHN0cikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaGFkb3dzLmZvckVhY2goZnVuY3Rpb24oX3JlZjEwMykge1xuICAgICAgICB2YXIgcGl4ZWxzID0gX3JlZjEwMy5waXhlbHM7XG4gICAgICAgIGlmIChwaXhlbHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgcGl4ZWxzLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNoYWRvd3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9nZXRUZXh0U2hhZG93Q29sb3JzKG5vZGUpIHtcbiAgICAgIHZhciBfcmVmMTA0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwgbWluUmF0aW8gPSBfcmVmMTA0Lm1pblJhdGlvLCBtYXhSYXRpbyA9IF9yZWYxMDQubWF4UmF0aW8sIGlnbm9yZUVkZ2VDb3VudCA9IF9yZWYxMDQuaWdub3JlRWRnZUNvdW50O1xuICAgICAgdmFyIHNoYWRvd0NvbG9ycyA9IFtdO1xuICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICB2YXIgdGV4dFNoYWRvdyA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RleHQtc2hhZG93Jyk7XG4gICAgICBpZiAodGV4dFNoYWRvdyA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiBzaGFkb3dDb2xvcnM7XG4gICAgICB9XG4gICAgICB2YXIgZm9udFNpemVTdHIgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdmb250LXNpemUnKTtcbiAgICAgIHZhciBmb250U2l6ZSA9IHBhcnNlSW50KGZvbnRTaXplU3RyKTtcbiAgICAgIGFzc2VydF9kZWZhdWx0KGlzTmFOKGZvbnRTaXplKSA9PT0gZmFsc2UsICdVbmFibGUgdG8gZGV0ZXJtaW5lIGZvbnQtc2l6ZSB2YWx1ZSAnLmNvbmNhdChmb250U2l6ZVN0cikpO1xuICAgICAgdmFyIHRoaW5TaGFkb3dzID0gW107XG4gICAgICB2YXIgc2hhZG93cyA9IF9wYXJzZVRleHRTaGFkb3dzKHRleHRTaGFkb3cpO1xuICAgICAgdmFyIF9pdGVyYXRvcjE3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoc2hhZG93cyksIF9zdGVwMTc7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjE3LnMoKTsgIShfc3RlcDE3ID0gX2l0ZXJhdG9yMTcubigpKS5kb25lOyApIHtcbiAgICAgICAgICB2YXIgc2hhZG93ID0gX3N0ZXAxNy52YWx1ZTtcbiAgICAgICAgICB2YXIgY29sb3JTdHIgPSBzaGFkb3cuY29sb3JTdHIgfHwgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY29sb3InKTtcbiAgICAgICAgICB2YXIgX3NoYWRvdyRwaXhlbHMgPSBfc2xpY2VkVG9BcnJheShzaGFkb3cucGl4ZWxzLCAzKSwgb2Zmc2V0WCA9IF9zaGFkb3ckcGl4ZWxzWzBdLCBvZmZzZXRZID0gX3NoYWRvdyRwaXhlbHNbMV0sIF9zaGFkb3ckcGl4ZWxzJCA9IF9zaGFkb3ckcGl4ZWxzWzJdLCBibHVyUmFkaXVzID0gX3NoYWRvdyRwaXhlbHMkID09PSB2b2lkIDAgPyAwIDogX3NoYWRvdyRwaXhlbHMkO1xuICAgICAgICAgIGlmIChtYXhSYXRpbyAmJiBibHVyUmFkaXVzID49IGZvbnRTaXplICogbWF4UmF0aW8pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWluUmF0aW8gJiYgYmx1clJhZGl1cyA8IGZvbnRTaXplICogbWluUmF0aW8pIHtcbiAgICAgICAgICAgIHRoaW5TaGFkb3dzLnB1c2goe1xuICAgICAgICAgICAgICBjb2xvclN0cjogY29sb3JTdHIsXG4gICAgICAgICAgICAgIHBpeGVsczogc2hhZG93LnBpeGVsc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaW5TaGFkb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBfc3Ryb2tlQ29sb3JzID0gX2dldFN0cm9rZUNvbG9yc0Zyb21TaGFkb3dzKHRoaW5TaGFkb3dzLCB7XG4gICAgICAgICAgICAgIGlnbm9yZUVkZ2VDb3VudDogaWdub3JlRWRnZUNvdW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChfc3Ryb2tlQ29sb3JzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hhZG93Q29sb3JzLnB1c2guYXBwbHkoc2hhZG93Q29sb3JzLCBfdG9Db25zdW1hYmxlQXJyYXkoX3N0cm9rZUNvbG9ycykpO1xuICAgICAgICAgICAgdGhpblNoYWRvd3Muc3BsaWNlKDAsIHRoaW5TaGFkb3dzLmxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBfY29sb3IzID0gdGV4dFNoYWRvd0NvbG9yKHtcbiAgICAgICAgICAgIGNvbG9yU3RyOiBjb2xvclN0cixcbiAgICAgICAgICAgIG9mZnNldFg6IG9mZnNldFgsXG4gICAgICAgICAgICBvZmZzZXRZOiBvZmZzZXRZLFxuICAgICAgICAgICAgYmx1clJhZGl1czogYmx1clJhZGl1cyxcbiAgICAgICAgICAgIGZvbnRTaXplOiBmb250U2l6ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNoYWRvd0NvbG9ycy5wdXNoKF9jb2xvcjMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMTcuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMTcuZigpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaW5TaGFkb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHN0cm9rZUNvbG9ycyA9IF9nZXRTdHJva2VDb2xvcnNGcm9tU2hhZG93cyh0aGluU2hhZG93cywge1xuICAgICAgICAgIGlnbm9yZUVkZ2VDb3VudDogaWdub3JlRWRnZUNvdW50XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3Ryb2tlQ29sb3JzID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc2hhZG93Q29sb3JzLnB1c2guYXBwbHkoc2hhZG93Q29sb3JzLCBfdG9Db25zdW1hYmxlQXJyYXkoc3Ryb2tlQ29sb3JzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2hhZG93Q29sb3JzO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXh0U2hhZG93Q29sb3IoX3JlZjEwNSkge1xuICAgICAgdmFyIGNvbG9yU3RyID0gX3JlZjEwNS5jb2xvclN0ciwgb2Zmc2V0WCA9IF9yZWYxMDUub2Zmc2V0WCwgb2Zmc2V0WSA9IF9yZWYxMDUub2Zmc2V0WSwgYmx1clJhZGl1cyA9IF9yZWYxMDUuYmx1clJhZGl1cywgZm9udFNpemUgPSBfcmVmMTA1LmZvbnRTaXplO1xuICAgICAgaWYgKG9mZnNldFggPiBibHVyUmFkaXVzIHx8IG9mZnNldFkgPiBibHVyUmFkaXVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgY29sb3JfZGVmYXVsdCgwLCAwLCAwLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBzaGFkb3dDb2xvciA9IG5ldyBjb2xvcl9kZWZhdWx0KCk7XG4gICAgICBzaGFkb3dDb2xvci5wYXJzZVN0cmluZyhjb2xvclN0cik7XG4gICAgICBzaGFkb3dDb2xvci5hbHBoYSAqPSBibHVyUmFkaXVzVG9BbHBoYShibHVyUmFkaXVzLCBmb250U2l6ZSk7XG4gICAgICByZXR1cm4gc2hhZG93Q29sb3I7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJsdXJSYWRpdXNUb0FscGhhKGJsdXJSYWRpdXMsIGZvbnRTaXplKSB7XG4gICAgICBpZiAoYmx1clJhZGl1cyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHZhciByZWxhdGl2ZUJsdXIgPSBibHVyUmFkaXVzIC8gZm9udFNpemU7XG4gICAgICByZXR1cm4gLjE4NSAvIChyZWxhdGl2ZUJsdXIgKyAuNCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9nZXRTdGFja2luZ0NvbnRleHQoZWxtLCBlbG1TdGFjaykge1xuICAgICAgdmFyIF9lbG1TdGFjaztcbiAgICAgIHZhciB2aXJ0dWFsTm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KGVsbSk7XG4gICAgICBpZiAodmlydHVhbE5vZGUuX3N0YWNraW5nQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gdmlydHVhbE5vZGUuX3N0YWNraW5nQ29udGV4dDtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFja2luZ0NvbnRleHQgPSBbXTtcbiAgICAgIHZhciBjb250ZXh0TWFwID0gbmV3IE1hcCgpO1xuICAgICAgZWxtU3RhY2sgPSAoX2VsbVN0YWNrID0gZWxtU3RhY2spICE9PSBudWxsICYmIF9lbG1TdGFjayAhPT0gdm9pZCAwID8gX2VsbVN0YWNrIDogX2dldEJhY2tncm91bmRTdGFjayhlbG0pO1xuICAgICAgZWxtU3RhY2suZm9yRWFjaChmdW5jdGlvbihiZ0VsbSkge1xuICAgICAgICB2YXIgX3N0YWNraW5nT3JkZXIyO1xuICAgICAgICB2YXIgYmdWTm9kZSA9IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KGJnRWxtKTtcbiAgICAgICAgdmFyIGJnQ29sb3IgPSBnZXRPd25CYWNrZ3JvdW5kQ29sb3IyKGJnVk5vZGUpO1xuICAgICAgICB2YXIgc3RhY2tpbmdPcmRlciA9IGJnVk5vZGUuX3N0YWNraW5nT3JkZXIuZmlsdGVyKGZ1bmN0aW9uKF9yZWYxMDYpIHtcbiAgICAgICAgICB2YXIgdk5vZGUgPSBfcmVmMTA2LnZOb2RlO1xuICAgICAgICAgIHJldHVybiAhIXZOb2RlO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RhY2tpbmdPcmRlci5mb3JFYWNoKGZ1bmN0aW9uKF9yZWYxMDcsIGluZGV4KSB7XG4gICAgICAgICAgdmFyIF9zdGFja2luZ09yZGVyO1xuICAgICAgICAgIHZhciB2Tm9kZSA9IF9yZWYxMDcudk5vZGU7XG4gICAgICAgICAgdmFyIGFuY2VzdG9yVk5vZGUyID0gKF9zdGFja2luZ09yZGVyID0gc3RhY2tpbmdPcmRlcltpbmRleCAtIDFdKSA9PT0gbnVsbCB8fCBfc3RhY2tpbmdPcmRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0YWNraW5nT3JkZXIudk5vZGU7XG4gICAgICAgICAgdmFyIGNvbnRleHQyID0gYWRkVG9TdGFja2luZ0NvbnRleHQoY29udGV4dE1hcCwgdk5vZGUsIGFuY2VzdG9yVk5vZGUyKTtcbiAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgIWNvbnRleHRNYXAuZ2V0KHZOb2RlKSkge1xuICAgICAgICAgICAgc3RhY2tpbmdDb250ZXh0LnVuc2hpZnQoY29udGV4dDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250ZXh0TWFwLnNldCh2Tm9kZSwgY29udGV4dDIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGFuY2VzdG9yVk5vZGUgPSAoX3N0YWNraW5nT3JkZXIyID0gc3RhY2tpbmdPcmRlcltzdGFja2luZ09yZGVyLmxlbmd0aCAtIDFdKSA9PT0gbnVsbCB8fCBfc3RhY2tpbmdPcmRlcjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdGFja2luZ09yZGVyMi52Tm9kZTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBhZGRUb1N0YWNraW5nQ29udGV4dChjb250ZXh0TWFwLCBiZ1ZOb2RlLCBhbmNlc3RvclZOb2RlKTtcbiAgICAgICAgaWYgKCFzdGFja2luZ09yZGVyLmxlbmd0aCkge1xuICAgICAgICAgIHN0YWNraW5nQ29udGV4dC51bnNoaWZ0KGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuYmdDb2xvciA9IGJnQ29sb3I7XG4gICAgICB9KTtcbiAgICAgIHZpcnR1YWxOb2RlLl9zdGFja2luZ0NvbnRleHQgPSBzdGFja2luZ0NvbnRleHQ7XG4gICAgICByZXR1cm4gc3RhY2tpbmdDb250ZXh0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBfc3RhY2tpbmdDb250ZXh0VG9Db2xvcihjb250ZXh0KSB7XG4gICAgICB2YXIgX2NvbnRleHQkZGVzY2VuZGFudHM7XG4gICAgICBpZiAoISgoX2NvbnRleHQkZGVzY2VuZGFudHMgPSBjb250ZXh0LmRlc2NlbmRhbnRzKSAhPT0gbnVsbCAmJiBfY29udGV4dCRkZXNjZW5kYW50cyAhPT0gdm9pZCAwICYmIF9jb250ZXh0JGRlc2NlbmRhbnRzLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGNvbG9yMiA9IGNvbnRleHQuYmdDb2xvcjtcbiAgICAgICAgY29sb3IyLmFscGhhICo9IGNvbnRleHQub3BhY2l0eTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb2xvcjogY29sb3IyLFxuICAgICAgICAgIGJsZW5kTW9kZTogY29udGV4dC5ibGVuZE1vZGVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBzb3VyY2VDb2xvciA9IGNvbnRleHQuZGVzY2VuZGFudHMucmVkdWNlKHJlZHVjZVRvQ29sb3IsIGNyZWF0ZVN0YWNraW5nQ29udGV4dDIoKSk7XG4gICAgICB2YXIgY29sb3IgPSBfZmxhdHRlbkNvbG9ycyhzb3VyY2VDb2xvciwgY29udGV4dC5iZ0NvbG9yLCBjb250ZXh0LmRlc2NlbmRhbnRzWzBdLmJsZW5kTW9kZSk7XG4gICAgICBjb2xvci5hbHBoYSAqPSBjb250ZXh0Lm9wYWNpdHk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgIGJsZW5kTW9kZTogY29udGV4dC5ibGVuZE1vZGVcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHVjZVRvQ29sb3IoYmFja2Ryb3BDb250ZXh0LCBzb3VyY2VDb250ZXh0KSB7XG4gICAgICB2YXIgYmFja2Ryb3A7XG4gICAgICBpZiAoYmFja2Ryb3BDb250ZXh0IGluc3RhbmNlb2YgY29sb3JfZGVmYXVsdCkge1xuICAgICAgICBiYWNrZHJvcCA9IGJhY2tkcm9wQ29udGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhY2tkcm9wID0gX3N0YWNraW5nQ29udGV4dFRvQ29sb3IoYmFja2Ryb3BDb250ZXh0KS5jb2xvcjtcbiAgICAgIH1cbiAgICAgIHZhciBzb3VyY2VDb2xvciA9IF9zdGFja2luZ0NvbnRleHRUb0NvbG9yKHNvdXJjZUNvbnRleHQpLmNvbG9yO1xuICAgICAgcmV0dXJuIF9mbGF0dGVuQ29sb3JzKHNvdXJjZUNvbG9yLCBiYWNrZHJvcCwgc291cmNlQ29udGV4dC5ibGVuZE1vZGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVTdGFja2luZ0NvbnRleHQyKHZOb2RlLCBhbmNlc3RvckNvbnRleHQpIHtcbiAgICAgIHZhciBfdk5vZGUkZ2V0Q29tcHV0ZWRTdHk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2Tm9kZTogdk5vZGUsXG4gICAgICAgIGFuY2VzdG9yOiBhbmNlc3RvckNvbnRleHQsXG4gICAgICAgIG9wYWNpdHk6IHBhcnNlRmxvYXQoKF92Tm9kZSRnZXRDb21wdXRlZFN0eSA9IHZOb2RlID09PSBudWxsIHx8IHZOb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnb3BhY2l0eScpKSAhPT0gbnVsbCAmJiBfdk5vZGUkZ2V0Q29tcHV0ZWRTdHkgIT09IHZvaWQgMCA/IF92Tm9kZSRnZXRDb21wdXRlZFN0eSA6IDEpLFxuICAgICAgICBiZ0NvbG9yOiBuZXcgY29sb3JfZGVmYXVsdCgwLCAwLCAwLCAwKSxcbiAgICAgICAgYmxlbmRNb2RlOiBub3JtYWxpemVCbGVuZE1vZGUodk5vZGUgPT09IG51bGwgfHwgdk5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdtaXgtYmxlbmQtbW9kZScpKSxcbiAgICAgICAgZGVzY2VuZGFudHM6IFtdXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBub3JtYWxpemVCbGVuZE1vZGUoYmxlbmRtb2RlKSB7XG4gICAgICByZXR1cm4gISFibGVuZG1vZGUgPyBibGVuZG1vZGUgOiB2b2lkIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZFRvU3RhY2tpbmdDb250ZXh0KGNvbnRleHRNYXAsIHZOb2RlLCBhbmNlc3RvclZOb2RlKSB7XG4gICAgICB2YXIgX2NvbnRleHRNYXAkZ2V0O1xuICAgICAgdmFyIGFuY2VzdG9yQ29udGV4dCA9IGNvbnRleHRNYXAuZ2V0KGFuY2VzdG9yVk5vZGUpO1xuICAgICAgdmFyIGNvbnRleHQgPSAoX2NvbnRleHRNYXAkZ2V0ID0gY29udGV4dE1hcC5nZXQodk5vZGUpKSAhPT0gbnVsbCAmJiBfY29udGV4dE1hcCRnZXQgIT09IHZvaWQgMCA/IF9jb250ZXh0TWFwJGdldCA6IGNyZWF0ZVN0YWNraW5nQ29udGV4dDIodk5vZGUsIGFuY2VzdG9yQ29udGV4dCk7XG4gICAgICBpZiAoYW5jZXN0b3JDb250ZXh0ICYmIGFuY2VzdG9yVk5vZGUgIT09IHZOb2RlICYmICFhbmNlc3RvckNvbnRleHQuZGVzY2VuZGFudHMuaW5jbHVkZXMoY29udGV4dCkpIHtcbiAgICAgICAgYW5jZXN0b3JDb250ZXh0LmRlc2NlbmRhbnRzLnVuc2hpZnQoY29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0T3duQmFja2dyb3VuZENvbG9yMih2Tm9kZSkge1xuICAgICAgdmFyIGJnQ29sb3IgPSBuZXcgY29sb3JfZGVmYXVsdCgpO1xuICAgICAgYmdDb2xvci5wYXJzZVN0cmluZyh2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnYmFja2dyb3VuZC1jb2xvcicpKTtcbiAgICAgIHJldHVybiBiZ0NvbG9yO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZ2V0QmFja2dyb3VuZENvbG9yMihlbG0pIHtcbiAgICAgIHZhciBiZ0VsbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICAgICAgdmFyIHNoYWRvd091dGxpbmVFbU1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogLjE7XG4gICAgICB2YXIgdk5vZGUgPSBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChlbG0pO1xuICAgICAgdmFyIGJnQ29sb3JDYWNoZSA9IHZOb2RlLl9jYWNoZS5nZXRCYWNrZ3JvdW5kQ29sb3I7XG4gICAgICBpZiAoYmdDb2xvckNhY2hlKSB7XG4gICAgICAgIGJnRWxtcy5wdXNoLmFwcGx5KGJnRWxtcywgX3RvQ29uc3VtYWJsZUFycmF5KGJnQ29sb3JDYWNoZS5iZ0VsbXMpKTtcbiAgICAgICAgaW5jb21wbGV0ZV9kYXRhX2RlZmF1bHQuc2V0KCdiZ0NvbG9yJywgYmdDb2xvckNhY2hlLmluY29tcGxldGVEYXRhKTtcbiAgICAgICAgcmV0dXJuIGJnQ29sb3JDYWNoZS5iZ0NvbG9yO1xuICAgICAgfVxuICAgICAgdmFyIGJnQ29sb3IgPSBfZ2V0QmFja2dyb3VuZENvbG9yKGVsbSwgYmdFbG1zLCBzaGFkb3dPdXRsaW5lRW1NYXgpO1xuICAgICAgdk5vZGUuX2NhY2hlLmdldEJhY2tncm91bmRDb2xvciA9IHtcbiAgICAgICAgYmdDb2xvcjogYmdDb2xvcixcbiAgICAgICAgYmdFbG1zOiBiZ0VsbXMsXG4gICAgICAgIGluY29tcGxldGVEYXRhOiBpbmNvbXBsZXRlX2RhdGFfZGVmYXVsdC5nZXQoJ2JnQ29sb3InKVxuICAgICAgfTtcbiAgICAgIHJldHVybiBiZ0NvbG9yO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZ2V0QmFja2dyb3VuZENvbG9yKGVsbSwgYmdFbG1zLCBzaGFkb3dPdXRsaW5lRW1NYXgpIHtcbiAgICAgIHZhciBfZ2V0VGV4dFNoYWRvd0NvbG9yczIsIF9iZ0NvbG9ycztcbiAgICAgIHZhciBlbG1TdGFjayA9IF9nZXRCYWNrZ3JvdW5kU3RhY2soZWxtKTtcbiAgICAgIGlmICghZWxtU3RhY2spIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgdGV4dFJlY3RzID0gZ2V0X3Zpc2libGVfY2hpbGRfdGV4dF9yZWN0c19kZWZhdWx0KGVsbSk7XG4gICAgICB2YXIgYmdDb2xvcnMgPSAoX2dldFRleHRTaGFkb3dDb2xvcnMyID0gX2dldFRleHRTaGFkb3dDb2xvcnMoZWxtLCB7XG4gICAgICAgIG1pblJhdGlvOiBzaGFkb3dPdXRsaW5lRW1NYXgsXG4gICAgICAgIGlnbm9yZUVkZ2VDb3VudDogdHJ1ZVxuICAgICAgfSkpICE9PSBudWxsICYmIF9nZXRUZXh0U2hhZG93Q29sb3JzMiAhPT0gdm9pZCAwID8gX2dldFRleHRTaGFkb3dDb2xvcnMyIDogW107XG4gICAgICBpZiAoYmdDb2xvcnMubGVuZ3RoKSB7XG4gICAgICAgIGJnQ29sb3JzID0gWyB7XG4gICAgICAgICAgY29sb3I6IGJnQ29sb3JzLnJlZHVjZShfZmxhdHRlblNoYWRvd0NvbG9ycylcbiAgICAgICAgfSBdO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2kzNyA9IDA7IF9pMzcgPCBlbG1TdGFjay5sZW5ndGg7IF9pMzcrKykge1xuICAgICAgICB2YXIgYmdFbG0gPSBlbG1TdGFja1tfaTM3XTtcbiAgICAgICAgdmFyIGJnRWxtU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShiZ0VsbSk7XG4gICAgICAgIGlmIChlbGVtZW50X2hhc19pbWFnZV9kZWZhdWx0KGJnRWxtLCBiZ0VsbVN0eWxlKSkge1xuICAgICAgICAgIGJnRWxtcy5wdXNoKGJnRWxtKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmdDb2xvciA9IGdldF9vd25fYmFja2dyb3VuZF9jb2xvcl9kZWZhdWx0KGJnRWxtU3R5bGUpO1xuICAgICAgICBpZiAoYmdDb2xvci5hbHBoYSA9PT0gMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiZ0VsbVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2Rpc3BsYXknKSAhPT0gJ2lubGluZScgJiYgIWZ1bGx5RW5jb21wYXNzZXMoYmdFbG0sIHRleHRSZWN0cykpIHtcbiAgICAgICAgICBiZ0VsbXMucHVzaChiZ0VsbSk7XG4gICAgICAgICAgaW5jb21wbGV0ZV9kYXRhX2RlZmF1bHQuc2V0KCdiZ0NvbG9yJywgJ2VsbVBhcnRpYWxseU9ic2N1cmVkJyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYmdFbG1zLnB1c2goYmdFbG0pO1xuICAgICAgICBpZiAoYmdDb2xvci5hbHBoYSA9PT0gMSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgc3RhY2tpbmdDb250ZXh0ID0gX2dldFN0YWNraW5nQ29udGV4dChlbG0sIGVsbVN0YWNrKTtcbiAgICAgIGJnQ29sb3JzID0gc3RhY2tpbmdDb250ZXh0Lm1hcChfc3RhY2tpbmdDb250ZXh0VG9Db2xvcikuY29uY2F0KGJnQ29sb3JzKTtcbiAgICAgIHZhciBwYWdlQmdzID0gZ2V0UGFnZUJhY2tncm91bmRDb2xvcnMoZWxtLCBlbG1TdGFjay5pbmNsdWRlcyhkb2N1bWVudC5ib2R5KSk7XG4gICAgICAoX2JnQ29sb3JzID0gYmdDb2xvcnMpLnVuc2hpZnQuYXBwbHkoX2JnQ29sb3JzLCBfdG9Db25zdW1hYmxlQXJyYXkocGFnZUJncykpO1xuICAgICAgaWYgKGJnQ29sb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IGNvbG9yX2RlZmF1bHQoMjU1LCAyNTUsIDI1NSwgMSk7XG4gICAgICB9XG4gICAgICB2YXIgYmxlbmRlZENvbG9yID0gYmdDb2xvcnMucmVkdWNlKGZ1bmN0aW9uKGJnQ29sb3IsIGZnQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuIF9mbGF0dGVuQ29sb3JzKGZnQ29sb3IuY29sb3IsIGJnQ29sb3IuY29sb3IgaW5zdGFuY2VvZiBjb2xvcl9kZWZhdWx0ID8gYmdDb2xvci5jb2xvciA6IGJnQ29sb3IsIGZnQ29sb3IuYmxlbmRNb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF9mbGF0dGVuQ29sb3JzKGJsZW5kZWRDb2xvci5jb2xvciBpbnN0YW5jZW9mIGNvbG9yX2RlZmF1bHQgPyBibGVuZGVkQ29sb3IuY29sb3IgOiBibGVuZGVkQ29sb3IsIG5ldyBjb2xvcl9kZWZhdWx0KDI1NSwgMjU1LCAyNTUsIDEpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnVsbHlFbmNvbXBhc3Nlcyhub2RlLCByZWN0cykge1xuICAgICAgcmVjdHMgPSBBcnJheS5pc0FycmF5KHJlY3RzKSA/IHJlY3RzIDogWyByZWN0cyBdO1xuICAgICAgdmFyIG5vZGVSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciByaWdodCA9IG5vZGVSZWN0LnJpZ2h0LCBib3R0b20gPSBub2RlUmVjdC5ib3R0b207XG4gICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgIHZhciBvdmVyZmxvdyA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ292ZXJmbG93Jyk7XG4gICAgICBpZiAoWyAnc2Nyb2xsJywgJ2F1dG8nIF0uaW5jbHVkZXMob3ZlcmZsb3cpIHx8IG5vZGUgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEh0bWxFbGVtZW50KSB7XG4gICAgICAgIHJpZ2h0ID0gbm9kZVJlY3QubGVmdCArIG5vZGUuc2Nyb2xsV2lkdGg7XG4gICAgICAgIGJvdHRvbSA9IG5vZGVSZWN0LnRvcCArIG5vZGUuc2Nyb2xsSGVpZ2h0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlY3RzLmV2ZXJ5KGZ1bmN0aW9uKHJlY3QpIHtcbiAgICAgICAgcmV0dXJuIHJlY3QudG9wID49IG5vZGVSZWN0LnRvcCAmJiByZWN0LmJvdHRvbSA8PSBib3R0b20gJiYgcmVjdC5sZWZ0ID49IG5vZGVSZWN0LmxlZnQgJiYgcmVjdC5yaWdodCA8PSByaWdodDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBub3JtYWxpemVCbGVuZE1vZGUyKGJsZW5kbW9kZSkge1xuICAgICAgcmV0dXJuICEhYmxlbmRtb2RlID8gYmxlbmRtb2RlIDogdm9pZCAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRQYWdlQmFja2dyb3VuZENvbG9ycyhlbG0sIHN0YWNrQ29udGFpbnNCb2R5KSB7XG4gICAgICB2YXIgcGFnZUNvbG9ycyA9IFtdO1xuICAgICAgaWYgKCFzdGFja0NvbnRhaW5zQm9keSkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgaHRtbFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG4gICAgICAgIHZhciBib2R5U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShib2R5KTtcbiAgICAgICAgdmFyIGh0bWxCZ0NvbG9yID0gZ2V0X293bl9iYWNrZ3JvdW5kX2NvbG9yX2RlZmF1bHQoaHRtbFN0eWxlKTtcbiAgICAgICAgdmFyIGJvZHlCZ0NvbG9yID0gZ2V0X293bl9iYWNrZ3JvdW5kX2NvbG9yX2RlZmF1bHQoYm9keVN0eWxlKTtcbiAgICAgICAgdmFyIGJvZHlCZ0NvbG9yQXBwbGllcyA9IGJvZHlCZ0NvbG9yLmFscGhhICE9PSAwICYmIGZ1bGx5RW5jb21wYXNzZXMoYm9keSwgZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgICAgICAgaWYgKGJvZHlCZ0NvbG9yLmFscGhhICE9PSAwICYmIGh0bWxCZ0NvbG9yLmFscGhhID09PSAwIHx8IGJvZHlCZ0NvbG9yQXBwbGllcyAmJiBib2R5QmdDb2xvci5hbHBoYSAhPT0gMSkge1xuICAgICAgICAgIHBhZ2VDb2xvcnMudW5zaGlmdCh7XG4gICAgICAgICAgICBjb2xvcjogYm9keUJnQ29sb3IsXG4gICAgICAgICAgICBibGVuZE1vZGU6IG5vcm1hbGl6ZUJsZW5kTW9kZTIoYm9keVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ21peC1ibGVuZC1tb2RlJykpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0bWxCZ0NvbG9yLmFscGhhICE9PSAwICYmICghYm9keUJnQ29sb3JBcHBsaWVzIHx8IGJvZHlCZ0NvbG9yQXBwbGllcyAmJiBib2R5QmdDb2xvci5hbHBoYSAhPT0gMSkpIHtcbiAgICAgICAgICBwYWdlQ29sb3JzLnVuc2hpZnQoe1xuICAgICAgICAgICAgY29sb3I6IGh0bWxCZ0NvbG9yLFxuICAgICAgICAgICAgYmxlbmRNb2RlOiBub3JtYWxpemVCbGVuZE1vZGUyKGh0bWxTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdtaXgtYmxlbmQtbW9kZScpKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFnZUNvbG9ycztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q29udHJhc3QoYmdDb2xvciwgZmdDb2xvcikge1xuICAgICAgaWYgKCFmZ0NvbG9yIHx8ICFiZ0NvbG9yKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGZnQ29sb3IuYWxwaGEgPCAxKSB7XG4gICAgICAgIGZnQ29sb3IgPSBfZmxhdHRlbkNvbG9ycyhmZ0NvbG9yLCBiZ0NvbG9yKTtcbiAgICAgIH1cbiAgICAgIHZhciBiTCA9IGJnQ29sb3IuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcbiAgICAgIHZhciBmTCA9IGZnQ29sb3IuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcbiAgICAgIHJldHVybiAoTWF0aC5tYXgoZkwsIGJMKSArIC4wNSkgLyAoTWF0aC5taW4oZkwsIGJMKSArIC4wNSk7XG4gICAgfVxuICAgIHZhciBnZXRfY29udHJhc3RfZGVmYXVsdCA9IGdldENvbnRyYXN0O1xuICAgIGZ1bmN0aW9uIF9nZXRGb3JlZ3JvdW5kQ29sb3Iobm9kZSwgXywgYmdDb2xvcikge1xuICAgICAgdmFyIF9iZ0NvbG9yO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgICAgdmFyIG5vZGVTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgdmFyIGNvbG9yU3RhY2sgPSBbIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0U3Ryb2tlQ29sb3Iobm9kZVN0eWxlLCBvcHRpb25zKTtcbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0VGV4dENvbG9yKG5vZGVTdHlsZSk7XG4gICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRUZXh0U2hhZG93Q29sb3JzKG5vZGUsIHtcbiAgICAgICAgICBtaW5SYXRpbzogMFxuICAgICAgICB9KTtcbiAgICAgIH0gXTtcbiAgICAgIHZhciBmZ0NvbG9ycyA9IFtdO1xuICAgICAgZm9yICh2YXIgX2kzOCA9IDAsIF9jb2xvclN0YWNrID0gY29sb3JTdGFjazsgX2kzOCA8IF9jb2xvclN0YWNrLmxlbmd0aDsgX2kzOCsrKSB7XG4gICAgICAgIHZhciBjb2xvckZuID0gX2NvbG9yU3RhY2tbX2kzOF07XG4gICAgICAgIHZhciBfY29sb3I0ID0gY29sb3JGbigpO1xuICAgICAgICBpZiAoIV9jb2xvcjQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBmZ0NvbG9ycyA9IGZnQ29sb3JzLmNvbmNhdChfY29sb3I0KTtcbiAgICAgICAgaWYgKF9jb2xvcjQuYWxwaGEgPT09IDEpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGZnQ29sb3IgPSBmZ0NvbG9ycy5yZWR1Y2UoZnVuY3Rpb24oc291cmNlLCBiYWNrZHJvcCkge1xuICAgICAgICByZXR1cm4gX2ZsYXR0ZW5Db2xvcnMoc291cmNlLCBiYWNrZHJvcCk7XG4gICAgICB9KTtcbiAgICAgIChfYmdDb2xvciA9IGJnQ29sb3IpICE9PSBudWxsICYmIF9iZ0NvbG9yICE9PSB2b2lkIDAgPyBfYmdDb2xvciA6IGJnQ29sb3IgPSBfZ2V0QmFja2dyb3VuZENvbG9yMihub2RlLCBbXSk7XG4gICAgICBpZiAoYmdDb2xvciA9PT0gbnVsbCkge1xuICAgICAgICB2YXIgcmVhc29uID0gaW5jb21wbGV0ZV9kYXRhX2RlZmF1bHQuZ2V0KCdiZ0NvbG9yJyk7XG4gICAgICAgIGluY29tcGxldGVfZGF0YV9kZWZhdWx0LnNldCgnZmdDb2xvcicsIHJlYXNvbik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHN0YWNraW5nQ29udGV4dHMgPSBfZ2V0U3RhY2tpbmdDb250ZXh0KG5vZGUpO1xuICAgICAgdmFyIGNvbnRleHQgPSBmaW5kTm9kZUluQ29udGV4dHMoc3RhY2tpbmdDb250ZXh0cywgbm9kZSk7XG4gICAgICByZXR1cm4gX2ZsYXR0ZW5Db2xvcnMoY2FsY3VsYXRlQmxlbmRlZEZvcmVncm91bmRDb2xvcihmZ0NvbG9yLCBjb250ZXh0LCBzdGFja2luZ0NvbnRleHRzKSwgbmV3IGNvbG9yX2RlZmF1bHQoMjU1LCAyNTUsIDI1NSwgMSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRUZXh0Q29sb3Iobm9kZVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmV3IGNvbG9yX2RlZmF1bHQoKS5wYXJzZVN0cmluZyhub2RlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC10ZXh0LWZpbGwtY29sb3InKSB8fCBub2RlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY29sb3InKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFN0cm9rZUNvbG9yKG5vZGVTdHlsZSwgX3JlZjEwOCkge1xuICAgICAgdmFyIF9yZWYxMDgkdGV4dFN0cm9rZUVtTSA9IF9yZWYxMDgudGV4dFN0cm9rZUVtTWluLCB0ZXh0U3Ryb2tlRW1NaW4gPSBfcmVmMTA4JHRleHRTdHJva2VFbU0gPT09IHZvaWQgMCA/IDAgOiBfcmVmMTA4JHRleHRTdHJva2VFbU07XG4gICAgICB2YXIgc3Ryb2tlV2lkdGggPSBwYXJzZUZsb2F0KG5vZGVTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LXRleHQtc3Ryb2tlLXdpZHRoJykpO1xuICAgICAgaWYgKHN0cm9rZVdpZHRoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIGZvbnRTaXplID0gbm9kZVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpO1xuICAgICAgdmFyIHJlbGF0aXZlU3Ryb2tlV2lkdGggPSBzdHJva2VXaWR0aCAvIHBhcnNlRmxvYXQoZm9udFNpemUpO1xuICAgICAgaWYgKGlzTmFOKHJlbGF0aXZlU3Ryb2tlV2lkdGgpIHx8IHJlbGF0aXZlU3Ryb2tlV2lkdGggPCB0ZXh0U3Ryb2tlRW1NaW4pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgc3Ryb2tlQ29sb3IgPSBub2RlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC10ZXh0LXN0cm9rZS1jb2xvcicpO1xuICAgICAgcmV0dXJuIG5ldyBjb2xvcl9kZWZhdWx0KCkucGFyc2VTdHJpbmcoc3Ryb2tlQ29sb3IpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVCbGVuZGVkRm9yZWdyb3VuZENvbG9yKGZnQ29sb3IsIGNvbnRleHQsIHN0YWNraW5nQ29udGV4dHMpIHtcbiAgICAgIHdoaWxlIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBfY29udGV4dCRhbmNlc3RvcjtcbiAgICAgICAgaWYgKGNvbnRleHQub3BhY2l0eSA9PT0gMSAmJiBjb250ZXh0LmFuY2VzdG9yKSB7XG4gICAgICAgICAgY29udGV4dCA9IGNvbnRleHQuYW5jZXN0b3I7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZmdDb2xvci5hbHBoYSAqPSBjb250ZXh0Lm9wYWNpdHk7XG4gICAgICAgIHZhciBzdGFjayA9ICgoX2NvbnRleHQkYW5jZXN0b3IgPSBjb250ZXh0LmFuY2VzdG9yKSA9PT0gbnVsbCB8fCBfY29udGV4dCRhbmNlc3RvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NvbnRleHQkYW5jZXN0b3IuZGVzY2VuZGFudHMpIHx8IHN0YWNraW5nQ29udGV4dHM7XG4gICAgICAgIGlmIChjb250ZXh0Lm9wYWNpdHkgIT09IDEpIHtcbiAgICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YoY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiZ0NvbG9ycyA9IHN0YWNrLm1hcChfc3RhY2tpbmdDb250ZXh0VG9Db2xvcik7XG4gICAgICAgIGlmICghYmdDb2xvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY29udGV4dCA9IGNvbnRleHQuYW5jZXN0b3I7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJnQ29sb3IgPSBiZ0NvbG9ycy5yZWR1Y2UoZnVuY3Rpb24oYmFja2Ryb3AsIHNvdXJjZSkge1xuICAgICAgICAgIHJldHVybiBfZmxhdHRlbkNvbG9ycyhzb3VyY2UuY29sb3IsIGJhY2tkcm9wLmNvbG9yIGluc3RhbmNlb2YgY29sb3JfZGVmYXVsdCA/IGJhY2tkcm9wLmNvbG9yIDogYmFja2Ryb3ApO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgY29sb3I6IG5ldyBjb2xvcl9kZWZhdWx0KDAsIDAsIDAsIDApLFxuICAgICAgICAgIGJsZW5kTW9kZTogJ25vcm1hbCdcbiAgICAgICAgfSk7XG4gICAgICAgIGZnQ29sb3IgPSBfZmxhdHRlbkNvbG9ycyhmZ0NvbG9yLCBiZ0NvbG9yKTtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQuYW5jZXN0b3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmdDb2xvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZE5vZGVJbkNvbnRleHRzKGNvbnRleHRzLCBub2RlKSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yMTggPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihjb250ZXh0cyksIF9zdGVwMTg7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjE4LnMoKTsgIShfc3RlcDE4ID0gX2l0ZXJhdG9yMTgubigpKS5kb25lOyApIHtcbiAgICAgICAgICB2YXIgX2NvbnRleHQkdk5vZGU7XG4gICAgICAgICAgdmFyIGNvbnRleHQgPSBfc3RlcDE4LnZhbHVlO1xuICAgICAgICAgIGlmICgoKF9jb250ZXh0JHZOb2RlID0gY29udGV4dC52Tm9kZSkgPT09IG51bGwgfHwgX2NvbnRleHQkdk5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb250ZXh0JHZOb2RlLmFjdHVhbE5vZGUpID09PSBub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGZvdW5kID0gZmluZE5vZGVJbkNvbnRleHRzKGNvbnRleHQuZGVzY2VuZGFudHMsIG5vZGUpO1xuICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjE4LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjE4LmYoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzVmFsaWRDb250cmFzdFJhdGlvKGJnLCBmZywgZm9udFNpemUsIGlzQm9sZCkge1xuICAgICAgdmFyIGNvbnRyYXN0MiA9IGdldF9jb250cmFzdF9kZWZhdWx0KGJnLCBmZyk7XG4gICAgICB2YXIgaXNTbWFsbEZvbnQgPSBpc0JvbGQgJiYgTWF0aC5jZWlsKGZvbnRTaXplICogNzIpIC8gOTYgPCAxNCB8fCAhaXNCb2xkICYmIE1hdGguY2VpbChmb250U2l6ZSAqIDcyKSAvIDk2IDwgMTg7XG4gICAgICB2YXIgZXhwZWN0ZWRDb250cmFzdFJhdGlvID0gaXNTbWFsbEZvbnQgPyA0LjUgOiAzO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWYWxpZDogY29udHJhc3QyID4gZXhwZWN0ZWRDb250cmFzdFJhdGlvLFxuICAgICAgICBjb250cmFzdFJhdGlvOiBjb250cmFzdDIsXG4gICAgICAgIGV4cGVjdGVkQ29udHJhc3RSYXRpbzogZXhwZWN0ZWRDb250cmFzdFJhdGlvXG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgaGFzX3ZhbGlkX2NvbnRyYXN0X3JhdGlvX2RlZmF1bHQgPSBoYXNWYWxpZENvbnRyYXN0UmF0aW87XG4gICAgdmFyIGZvcm1zX2V4cG9ydHMgPSB7fTtcbiAgICBfX2V4cG9ydChmb3Jtc19leHBvcnRzLCB7XG4gICAgICBpc0FyaWFDb21ib2JveDogZnVuY3Rpb24gaXNBcmlhQ29tYm9ib3goKSB7XG4gICAgICAgIHJldHVybiBpc19hcmlhX2NvbWJvYm94X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNBcmlhTGlzdGJveDogZnVuY3Rpb24gaXNBcmlhTGlzdGJveCgpIHtcbiAgICAgICAgcmV0dXJuIGlzX2FyaWFfbGlzdGJveF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGlzQXJpYVJhbmdlOiBmdW5jdGlvbiBpc0FyaWFSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIGlzX2FyaWFfcmFuZ2VfZGVmYXVsdDtcbiAgICAgIH0sXG4gICAgICBpc0FyaWFUZXh0Ym94OiBmdW5jdGlvbiBpc0FyaWFUZXh0Ym94KCkge1xuICAgICAgICByZXR1cm4gaXNfYXJpYV90ZXh0Ym94X2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNEaXNhYmxlZDogZnVuY3Rpb24gaXNEaXNhYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIGlzX2Rpc2FibGVkX2RlZmF1bHQ7XG4gICAgICB9LFxuICAgICAgaXNOYXRpdmVTZWxlY3Q6IGZ1bmN0aW9uIGlzTmF0aXZlU2VsZWN0KCkge1xuICAgICAgICByZXR1cm4gaXNfbmF0aXZlX3NlbGVjdF9kZWZhdWx0O1xuICAgICAgfSxcbiAgICAgIGlzTmF0aXZlVGV4dGJveDogZnVuY3Rpb24gaXNOYXRpdmVUZXh0Ym94KCkge1xuICAgICAgICByZXR1cm4gaXNfbmF0aXZlX3RleHRib3hfZGVmYXVsdDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgZGlzYWJsZWROb2RlTmFtZXMgPSBbICdmaWVsZHNldCcsICdidXR0b24nLCAnc2VsZWN0JywgJ2lucHV0JywgJ3RleHRhcmVhJyBdO1xuICAgIGZ1bmN0aW9uIGlzRGlzYWJsZWQodmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBkaXNhYmxlZFN0YXRlID0gdmlydHVhbE5vZGUuX2lzRGlzYWJsZWQ7XG4gICAgICBpZiAodHlwZW9mIGRpc2FibGVkU3RhdGUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gZGlzYWJsZWRTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHZhciBub2RlTmFtZTIgPSB2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlTmFtZTtcbiAgICAgIHZhciBhcmlhRGlzYWJsZWQgPSB2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWRpc2FibGVkJyk7XG4gICAgICBpZiAoZGlzYWJsZWROb2RlTmFtZXMuaW5jbHVkZXMobm9kZU5hbWUyKSAmJiB2aXJ0dWFsTm9kZS5oYXNBdHRyKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIGRpc2FibGVkU3RhdGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChhcmlhRGlzYWJsZWQpIHtcbiAgICAgICAgZGlzYWJsZWRTdGF0ZSA9IGFyaWFEaXNhYmxlZC50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gICAgICB9IGVsc2UgaWYgKHZpcnR1YWxOb2RlLnBhcmVudCkge1xuICAgICAgICBkaXNhYmxlZFN0YXRlID0gaXNEaXNhYmxlZCh2aXJ0dWFsTm9kZS5wYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzYWJsZWRTdGF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmlydHVhbE5vZGUuX2lzRGlzYWJsZWQgPSBkaXNhYmxlZFN0YXRlO1xuICAgICAgcmV0dXJuIGRpc2FibGVkU3RhdGU7XG4gICAgfVxuICAgIHZhciBpc19kaXNhYmxlZF9kZWZhdWx0ID0gaXNEaXNhYmxlZDtcbiAgICBmdW5jdGlvbiBpZGVudGljYWxMaW5rc1NhbWVQdXJwb3NlRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBhY2NUZXh0ID0gdGV4dF9leHBvcnRzLmFjY2Vzc2libGVUZXh0VmlydHVhbCh2aXJ0dWFsTm9kZSk7XG4gICAgICB2YXIgbmFtZSA9IHRleHRfZXhwb3J0cy5zYW5pdGl6ZSh0ZXh0X2V4cG9ydHMucmVtb3ZlVW5pY29kZShhY2NUZXh0LCB7XG4gICAgICAgIGVtb2ppOiB0cnVlLFxuICAgICAgICBub25CbXA6IHRydWUsXG4gICAgICAgIHB1bmN0dWF0aW9uczogdHJ1ZVxuICAgICAgfSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHZhciBhZnRlckRhdGEgPSB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHVybFByb3BzOiBkb21fZXhwb3J0cy51cmxQcm9wc0Zyb21BdHRyaWJ1dGUobm9kZSwgJ2hyZWYnKVxuICAgICAgfTtcbiAgICAgIHRoaXMuZGF0YShhZnRlckRhdGEpO1xuICAgICAgdGhpcy5yZWxhdGVkTm9kZXMoWyBub2RlIF0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBpZGVudGljYWxfbGlua3Nfc2FtZV9wdXJwb3NlX2V2YWx1YXRlX2RlZmF1bHQgPSBpZGVudGljYWxMaW5rc1NhbWVQdXJwb3NlRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gaXNJZGVudGljYWxPYmplY3QoYTIsIGIyKSB7XG4gICAgICBpZiAoIWEyIHx8ICFiMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgYVByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYTIpO1xuICAgICAgdmFyIGJQcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGIyKTtcbiAgICAgIGlmIChhUHJvcHMubGVuZ3RoICE9PSBiUHJvcHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBhUHJvcHMuZXZlcnkoZnVuY3Rpb24ocHJvcE5hbWUpIHtcbiAgICAgICAgdmFyIGFWYWx1ZSA9IGEyW3Byb3BOYW1lXTtcbiAgICAgICAgdmFyIGJWYWx1ZSA9IGIyW3Byb3BOYW1lXTtcbiAgICAgICAgaWYgKF90eXBlb2YoYVZhbHVlKSAhPT0gX3R5cGVvZihiVmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdHlwZW9mKGFWYWx1ZSkgPT09ICdvYmplY3QnIHx8IF90eXBlb2YoYlZhbHVlKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXR1cm4gaXNJZGVudGljYWxPYmplY3QoYVZhbHVlLCBiVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhVmFsdWUgPT09IGJWYWx1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaWRlbnRpY2FsTGlua3NTYW1lUHVycG9zZUFmdGVyKHJlc3VsdHMpIHtcbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9XG4gICAgICB2YXIgaW5jb21wbGV0ZVJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbihfcmVmMTA5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBfcmVmMTA5LnJlc3VsdDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gdm9pZCAwO1xuICAgICAgfSk7XG4gICAgICB2YXIgdW5pcXVlUmVzdWx0cyA9IFtdO1xuICAgICAgdmFyIG5hbWVNYXAgPSB7fTtcbiAgICAgIHZhciBfbG9vcDggPSBmdW5jdGlvbiBfbG9vcDgoaW5kZXgpIHtcbiAgICAgICAgdmFyIF9jdXJyZW50UmVzdWx0JHJlbGF0ZTtcbiAgICAgICAgdmFyIGN1cnJlbnRSZXN1bHQgPSBpbmNvbXBsZXRlUmVzdWx0c1tpbmRleF07XG4gICAgICAgIHZhciBfY3VycmVudFJlc3VsdCRkYXRhID0gY3VycmVudFJlc3VsdC5kYXRhLCBuYW1lID0gX2N1cnJlbnRSZXN1bHQkZGF0YS5uYW1lLCB1cmxQcm9wcyA9IF9jdXJyZW50UmVzdWx0JGRhdGEudXJsUHJvcHM7XG4gICAgICAgIGlmIChuYW1lTWFwW25hbWVdKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNhbWVOYW1lUmVzdWx0cyA9IGluY29tcGxldGVSZXN1bHRzLmZpbHRlcihmdW5jdGlvbihfcmVmMTEwLCByZXN1bHROdW0pIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IF9yZWYxMTAuZGF0YTtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lID09PSBuYW1lICYmIHJlc3VsdE51bSAhPT0gaW5kZXg7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaXNTYW1lVXJsID0gc2FtZU5hbWVSZXN1bHRzLmV2ZXJ5KGZ1bmN0aW9uKF9yZWYxMTEpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IF9yZWYxMTEuZGF0YTtcbiAgICAgICAgICByZXR1cm4gaXNJZGVudGljYWxPYmplY3QoZGF0YS51cmxQcm9wcywgdXJsUHJvcHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNhbWVOYW1lUmVzdWx0cy5sZW5ndGggJiYgIWlzU2FtZVVybCkge1xuICAgICAgICAgIGN1cnJlbnRSZXN1bHQucmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRSZXN1bHQucmVsYXRlZE5vZGVzID0gW107XG4gICAgICAgIChfY3VycmVudFJlc3VsdCRyZWxhdGUgPSBjdXJyZW50UmVzdWx0LnJlbGF0ZWROb2RlcykucHVzaC5hcHBseShfY3VycmVudFJlc3VsdCRyZWxhdGUsIF90b0NvbnN1bWFibGVBcnJheShzYW1lTmFtZVJlc3VsdHMubWFwKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZS5yZWxhdGVkTm9kZXNbMF07XG4gICAgICAgIH0pKSk7XG4gICAgICAgIG5hbWVNYXBbbmFtZV0gPSBzYW1lTmFtZVJlc3VsdHM7XG4gICAgICAgIHVuaXF1ZVJlc3VsdHMucHVzaChjdXJyZW50UmVzdWx0KTtcbiAgICAgIH07XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5jb21wbGV0ZVJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGlmIChfbG9vcDgoaW5kZXgpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmlxdWVSZXN1bHRzO1xuICAgIH1cbiAgICB2YXIgaWRlbnRpY2FsX2xpbmtzX3NhbWVfcHVycG9zZV9hZnRlcl9kZWZhdWx0ID0gaWRlbnRpY2FsTGlua3NTYW1lUHVycG9zZUFmdGVyO1xuICAgIGZ1bmN0aW9uIGdldExldmVsKHZOb2RlKSB7XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodk5vZGUpO1xuICAgICAgdmFyIGhlYWRpbmdSb2xlID0gcm9sZSAmJiByb2xlLmluY2x1ZGVzKCdoZWFkaW5nJyk7XG4gICAgICB2YXIgYXJpYUhlYWRpbmdMZXZlbCA9IHZOb2RlLmF0dHIoJ2FyaWEtbGV2ZWwnKTtcbiAgICAgIHZhciBhcmlhTGV2ZWwgPSBwYXJzZUludChhcmlhSGVhZGluZ0xldmVsLCAxMCk7XG4gICAgICB2YXIgX3JlZjExMiA9IHZOb2RlLnByb3BzLm5vZGVOYW1lLm1hdGNoKC9oKFxcZCkvKSB8fCBbXSwgX3JlZjExMyA9IF9zbGljZWRUb0FycmF5KF9yZWYxMTIsIDIpLCBoZWFkaW5nTGV2ZWwgPSBfcmVmMTEzWzFdO1xuICAgICAgaWYgKCFoZWFkaW5nUm9sZSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAoaGVhZGluZ0xldmVsICYmICFhcmlhSGVhZGluZ0xldmVsKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChoZWFkaW5nTGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05hTihhcmlhTGV2ZWwpIHx8IGFyaWFMZXZlbCA8IDEpIHtcbiAgICAgICAgaWYgKGhlYWRpbmdMZXZlbCkge1xuICAgICAgICAgIHJldHVybiBwYXJzZUludChoZWFkaW5nTGV2ZWwsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIH1cbiAgICAgIGlmIChhcmlhTGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIGFyaWFMZXZlbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGVhZGluZ09yZGVyRXZhbHVhdGUoKSB7XG4gICAgICB2YXIgaGVhZGluZ09yZGVyID0gY2FjaGVfZGVmYXVsdC5nZXQoJ2hlYWRpbmdPcmRlcicpO1xuICAgICAgaWYgKGhlYWRpbmdPcmRlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBzZWxlY3RvciA9ICdoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBbcm9sZT1oZWFkaW5nXSwgaWZyYW1lLCBmcmFtZSc7XG4gICAgICB2YXIgdk5vZGVzID0gcXVlcnlfc2VsZWN0b3JfYWxsX2ZpbHRlcl9kZWZhdWx0KGF4ZS5fdHJlZVswXSwgc2VsZWN0b3IsIF9pc1Zpc2libGVUb1NjcmVlblJlYWRlcnMpO1xuICAgICAgaGVhZGluZ09yZGVyID0gdk5vZGVzLm1hcChmdW5jdGlvbih2Tm9kZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFuY2VzdHJ5OiBbIF9nZXRBbmNlc3RyeSh2Tm9kZS5hY3R1YWxOb2RlKSBdLFxuICAgICAgICAgIGxldmVsOiBnZXRMZXZlbCh2Tm9kZSlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgaGVhZGluZ09yZGVyOiBoZWFkaW5nT3JkZXJcbiAgICAgIH0pO1xuICAgICAgY2FjaGVfZGVmYXVsdC5zZXQoJ2hlYWRpbmdPcmRlcicsIHZOb2Rlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGhlYWRpbmdfb3JkZXJfZXZhbHVhdGVfZGVmYXVsdCA9IGhlYWRpbmdPcmRlckV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGhlYWRpbmdPcmRlckFmdGVyKHJlc3VsdHMpIHtcbiAgICAgIHZhciBoZWFkaW5nT3JkZXIgPSBnZXRIZWFkaW5nT3JkZXIocmVzdWx0cyk7XG4gICAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yZXN1bHQgPSBnZXRIZWFkaW5nT3JkZXJPdXRjb21lKHJlc3VsdCwgaGVhZGluZ09yZGVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEhlYWRpbmdPcmRlck91dGNvbWUocmVzdWx0LCBoZWFkaW5nT3JkZXIpIHtcbiAgICAgIHZhciBfaGVhZGluZ09yZGVyJGluZGV4JGwsIF9oZWFkaW5nT3JkZXIkaW5kZXgsIF9oZWFkaW5nT3JkZXIkbGV2ZWwsIF9oZWFkaW5nT3JkZXI7XG4gICAgICB2YXIgaW5kZXggPSBmaW5kSGVhZGluZ09yZGVySW5kZXgoaGVhZGluZ09yZGVyLCByZXN1bHQubm9kZS5hbmNlc3RyeSk7XG4gICAgICB2YXIgY3VyckxldmVsID0gKF9oZWFkaW5nT3JkZXIkaW5kZXgkbCA9IChfaGVhZGluZ09yZGVyJGluZGV4ID0gaGVhZGluZ09yZGVyW2luZGV4XSkgPT09IG51bGwgfHwgX2hlYWRpbmdPcmRlciRpbmRleCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2hlYWRpbmdPcmRlciRpbmRleC5sZXZlbCkgIT09IG51bGwgJiYgX2hlYWRpbmdPcmRlciRpbmRleCRsICE9PSB2b2lkIDAgPyBfaGVhZGluZ09yZGVyJGluZGV4JGwgOiAtMTtcbiAgICAgIHZhciBwcmV2TGV2ZWwgPSAoX2hlYWRpbmdPcmRlciRsZXZlbCA9IChfaGVhZGluZ09yZGVyID0gaGVhZGluZ09yZGVyW2luZGV4IC0gMV0pID09PSBudWxsIHx8IF9oZWFkaW5nT3JkZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oZWFkaW5nT3JkZXIubGV2ZWwpICE9PSBudWxsICYmIF9oZWFkaW5nT3JkZXIkbGV2ZWwgIT09IHZvaWQgMCA/IF9oZWFkaW5nT3JkZXIkbGV2ZWwgOiAtMTtcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyTGV2ZWwgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VyckxldmVsIC0gcHJldkxldmVsIDw9IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEhlYWRpbmdPcmRlcihyZXN1bHRzKSB7XG4gICAgICByZXN1bHRzID0gX3RvQ29uc3VtYWJsZUFycmF5KHJlc3VsdHMpO1xuICAgICAgcmVzdWx0cy5zb3J0KGZ1bmN0aW9uKF9yZWYxMTQsIF9yZWYxMTUpIHtcbiAgICAgICAgdmFyIG5vZGVBID0gX3JlZjExNC5ub2RlO1xuICAgICAgICB2YXIgbm9kZUIgPSBfcmVmMTE1Lm5vZGU7XG4gICAgICAgIHJldHVybiBub2RlQS5hbmNlc3RyeS5sZW5ndGggLSBub2RlQi5hbmNlc3RyeS5sZW5ndGg7XG4gICAgICB9KTtcbiAgICAgIHZhciBoZWFkaW5nT3JkZXIgPSByZXN1bHRzLnJlZHVjZShtZXJnZUhlYWRpbmdPcmRlciwgW10pO1xuICAgICAgcmV0dXJuIGhlYWRpbmdPcmRlci5maWx0ZXIoZnVuY3Rpb24oX3JlZjExNikge1xuICAgICAgICB2YXIgbGV2ZWwgPSBfcmVmMTE2LmxldmVsO1xuICAgICAgICByZXR1cm4gbGV2ZWwgIT09IC0xO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGluZ09yZGVyKG1lcmdlZEhlYWRpbmdPcmRlciwgcmVzdWx0KSB7XG4gICAgICB2YXIgX3Jlc3VsdCRkYXRhO1xuICAgICAgdmFyIGZyYW1lSGVhZGluZ09yZGVyID0gKF9yZXN1bHQkZGF0YSA9IHJlc3VsdC5kYXRhKSA9PT0gbnVsbCB8fCBfcmVzdWx0JGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXN1bHQkZGF0YS5oZWFkaW5nT3JkZXI7XG4gICAgICB2YXIgZnJhbWVBbmNlc3RyeSA9IHNob3J0ZW5BcnJheShyZXN1bHQubm9kZS5hbmNlc3RyeSwgMSk7XG4gICAgICBpZiAoIWZyYW1lSGVhZGluZ09yZGVyKSB7XG4gICAgICAgIHJldHVybiBtZXJnZWRIZWFkaW5nT3JkZXI7XG4gICAgICB9XG4gICAgICB2YXIgbm9ybWFsaXplZEhlYWRpbmdPcmRlciA9IGZyYW1lSGVhZGluZ09yZGVyLm1hcChmdW5jdGlvbihoZWFkaW5nKSB7XG4gICAgICAgIHJldHVybiBhZGRGcmFtZVRvSGVhZGluZ0FuY2VzdHJ5KGhlYWRpbmcsIGZyYW1lQW5jZXN0cnkpO1xuICAgICAgfSk7XG4gICAgICB2YXIgaW5kZXggPSBnZXRGcmFtZUluZGV4KG1lcmdlZEhlYWRpbmdPcmRlciwgZnJhbWVBbmNlc3RyeSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIG1lcmdlZEhlYWRpbmdPcmRlci5wdXNoLmFwcGx5KG1lcmdlZEhlYWRpbmdPcmRlciwgX3RvQ29uc3VtYWJsZUFycmF5KG5vcm1hbGl6ZWRIZWFkaW5nT3JkZXIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lcmdlZEhlYWRpbmdPcmRlci5zcGxpY2UuYXBwbHkobWVyZ2VkSGVhZGluZ09yZGVyLCBbIGluZGV4LCAwIF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShub3JtYWxpemVkSGVhZGluZ09yZGVyKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lcmdlZEhlYWRpbmdPcmRlcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RnJhbWVJbmRleChoZWFkaW5nT3JkZXIsIGZyYW1lQW5jZXN0cnkpIHtcbiAgICAgIHdoaWxlIChmcmFtZUFuY2VzdHJ5Lmxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSGVhZGluZ09yZGVySW5kZXgoaGVhZGluZ09yZGVyLCBmcmFtZUFuY2VzdHJ5KTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICBmcmFtZUFuY2VzdHJ5ID0gc2hvcnRlbkFycmF5KGZyYW1lQW5jZXN0cnksIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5kSGVhZGluZ09yZGVySW5kZXgoaGVhZGluZ09yZGVyLCBhbmNlc3RyeSkge1xuICAgICAgcmV0dXJuIGhlYWRpbmdPcmRlci5maW5kSW5kZXgoZnVuY3Rpb24oaGVhZGluZykge1xuICAgICAgICByZXR1cm4gX21hdGNoQW5jZXN0cnkoaGVhZGluZy5hbmNlc3RyeSwgYW5jZXN0cnkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZEZyYW1lVG9IZWFkaW5nQW5jZXN0cnkoaGVhZGluZywgZnJhbWVBbmNlc3RyeSkge1xuICAgICAgdmFyIGFuY2VzdHJ5ID0gZnJhbWVBbmNlc3RyeS5jb25jYXQoaGVhZGluZy5hbmNlc3RyeSk7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhlYWRpbmcsIHtcbiAgICAgICAgYW5jZXN0cnk6IGFuY2VzdHJ5XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2hvcnRlbkFycmF5KGFyciwgc3BsaWNlTGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYXJyLnNsaWNlKDAsIGFyci5sZW5ndGggLSBzcGxpY2VMZW5ndGgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0YXJnZXRTaXplRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdk5vZGUpIHtcbiAgICAgIHZhciBtaW5TaXplID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5taW5TaXplKSB8fCAyNDtcbiAgICAgIHZhciBub2RlUmVjdCA9IHZOb2RlLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICAgIGlmIChfcmVjdEhhc01pbmltdW1TaXplKG1pblNpemUgKiAxMCwgbm9kZVJlY3QpKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogJ2xhcmdlJyxcbiAgICAgICAgICBtaW5TaXplOiBtaW5TaXplXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNNaW5pbXVtU2l6ZSA9IF9yZWN0SGFzTWluaW11bVNpemUuYmluZChudWxsLCBtaW5TaXplKTtcbiAgICAgIHZhciBuZWFyYnlFbG1zID0gX2ZpbmROZWFyYnlFbG1zKHZOb2RlKTtcbiAgICAgIHZhciBvdmVyZmxvd2luZ0NvbnRlbnQgPSBmaWx0ZXJPdmVyZmxvd2luZ0NvbnRlbnQodk5vZGUsIG5lYXJieUVsbXMpO1xuICAgICAgdmFyIF9maWx0ZXJCeUVsbXNPdmVybGFwID0gZmlsdGVyQnlFbG1zT3ZlcmxhcCh2Tm9kZSwgbmVhcmJ5RWxtcyksIGZ1bGx5T2JzY3VyaW5nRWxtcyA9IF9maWx0ZXJCeUVsbXNPdmVybGFwLmZ1bGx5T2JzY3VyaW5nRWxtcywgcGFydGlhbE9ic2N1cmluZ0VsbXMgPSBfZmlsdGVyQnlFbG1zT3ZlcmxhcC5wYXJ0aWFsT2JzY3VyaW5nRWxtcztcbiAgICAgIGlmIChvdmVyZmxvd2luZ0NvbnRlbnQubGVuZ3RoICYmIChmdWxseU9ic2N1cmluZ0VsbXMubGVuZ3RoIHx8ICFoYXNNaW5pbXVtU2l6ZShub2RlUmVjdCkpKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWluU2l6ZTogbWluU2l6ZSxcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnY29udGVudE92ZXJmbG93J1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWxhdGVkTm9kZXMobWFwQWN0dWFsTm9kZXMob3ZlcmZsb3dpbmdDb250ZW50KSk7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAoZnVsbHlPYnNjdXJpbmdFbG1zLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhtYXBBY3R1YWxOb2RlcyhmdWxseU9ic2N1cmluZ0VsbXMpKTtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnb2JzY3VyZWQnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBuZWdhdGl2ZU91dGNvbWUgPSBfaXNJblRhYk9yZGVyKHZOb2RlKSA/IGZhbHNlIDogdm9pZCAwO1xuICAgICAgaWYgKCFoYXNNaW5pbXVtU2l6ZShub2RlUmVjdCkpIHtcbiAgICAgICAgdGhpcy5kYXRhKF9leHRlbmRzKHtcbiAgICAgICAgICBtaW5TaXplOiBtaW5TaXplXG4gICAgICAgIH0sIHRvRGVjaW1hbFNpemUobm9kZVJlY3QpKSk7XG4gICAgICAgIHJldHVybiBuZWdhdGl2ZU91dGNvbWU7XG4gICAgICB9XG4gICAgICB2YXIgb2JzY3VyZWRXaWRnZXRzID0gZmlsdGVyRm9jdXNhYmxlV2lkZ2V0cyhwYXJ0aWFsT2JzY3VyaW5nRWxtcyk7XG4gICAgICBpZiAoIW9ic2N1cmVkV2lkZ2V0cy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5kYXRhKF9leHRlbmRzKHtcbiAgICAgICAgICBtaW5TaXplOiBtaW5TaXplXG4gICAgICAgIH0sIHRvRGVjaW1hbFNpemUobm9kZVJlY3QpKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGxhcmdlc3RJbm5lclJlY3QgPSBnZXRMYXJnZXN0VW5vYnNjdXJlZEFyZWEodk5vZGUsIG9ic2N1cmVkV2lkZ2V0cyk7XG4gICAgICBpZiAoIWxhcmdlc3RJbm5lclJlY3QpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtaW5TaXplOiBtaW5TaXplLFxuICAgICAgICAgIG1lc3NhZ2VLZXk6ICd0b29NYW55UmVjdHMnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKCFoYXNNaW5pbXVtU2l6ZShsYXJnZXN0SW5uZXJSZWN0KSkge1xuICAgICAgICBpZiAob3ZlcmZsb3dpbmdDb250ZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgICBtaW5TaXplOiBtaW5TaXplLFxuICAgICAgICAgICAgbWVzc2FnZUtleTogJ2NvbnRlbnRPdmVyZmxvdydcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhtYXBBY3R1YWxOb2RlcyhvdmVyZmxvd2luZ0NvbnRlbnQpKTtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbGxUYWJiYWJsZSA9IG9ic2N1cmVkV2lkZ2V0cy5ldmVyeShfaXNJblRhYk9yZGVyKTtcbiAgICAgICAgdmFyIG1lc3NhZ2VLZXkgPSAncGFydGlhbGx5T2JzY3VyZWQnLmNvbmNhdChhbGxUYWJiYWJsZSA/ICcnIDogJ05vblRhYmJhYmxlJyk7XG4gICAgICAgIHRoaXMuZGF0YShfZXh0ZW5kcyh7XG4gICAgICAgICAgbWVzc2FnZUtleTogbWVzc2FnZUtleSxcbiAgICAgICAgICBtaW5TaXplOiBtaW5TaXplXG4gICAgICAgIH0sIHRvRGVjaW1hbFNpemUobGFyZ2VzdElubmVyUmVjdCkpKTtcbiAgICAgICAgdGhpcy5yZWxhdGVkTm9kZXMobWFwQWN0dWFsTm9kZXMob2JzY3VyZWRXaWRnZXRzKSk7XG4gICAgICAgIHJldHVybiBhbGxUYWJiYWJsZSA/IG5lZ2F0aXZlT3V0Y29tZSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YShfZXh0ZW5kcyh7XG4gICAgICAgIG1pblNpemU6IG1pblNpemVcbiAgICAgIH0sIHRvRGVjaW1hbFNpemUobGFyZ2VzdElubmVyUmVjdCB8fCBub2RlUmVjdCkpKTtcbiAgICAgIHRoaXMucmVsYXRlZE5vZGVzKG1hcEFjdHVhbE5vZGVzKG9ic2N1cmVkV2lkZ2V0cykpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbHRlck92ZXJmbG93aW5nQ29udGVudCh2Tm9kZSwgbmVhcmJ5RWxtcykge1xuICAgICAgcmV0dXJuIG5lYXJieUVsbXMuZmlsdGVyKGZ1bmN0aW9uKG5lYXJieUVsbSkge1xuICAgICAgICByZXR1cm4gIWlzRW5jbG9zZWRSZWN0MihuZWFyYnlFbG0sIHZOb2RlKSAmJiBpc0Rlc2NlbmRhbnROb3RJblRhYk9yZGVyMih2Tm9kZSwgbmVhcmJ5RWxtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaWx0ZXJCeUVsbXNPdmVybGFwKHZOb2RlLCBuZWFyYnlFbG1zKSB7XG4gICAgICB2YXIgZnVsbHlPYnNjdXJpbmdFbG1zID0gW107XG4gICAgICB2YXIgcGFydGlhbE9ic2N1cmluZ0VsbXMgPSBbXTtcbiAgICAgIHZhciBfaXRlcmF0b3IxOSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5lYXJieUVsbXMpLCBfc3RlcDE5O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IxOS5zKCk7ICEoX3N0ZXAxOSA9IF9pdGVyYXRvcjE5Lm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgdmFyIHZOZWlnaGJvciA9IF9zdGVwMTkudmFsdWU7XG4gICAgICAgICAgaWYgKCFpc0Rlc2NlbmRhbnROb3RJblRhYk9yZGVyMih2Tm9kZSwgdk5laWdoYm9yKSAmJiBfaGFzVmlzdWFsT3ZlcmxhcCh2Tm9kZSwgdk5laWdoYm9yKSAmJiBnZXRDc3NQb2ludGVyRXZlbnRzKHZOZWlnaGJvcikgIT09ICdub25lJykge1xuICAgICAgICAgICAgaWYgKGlzRW5jbG9zZWRSZWN0Mih2Tm9kZSwgdk5laWdoYm9yKSkge1xuICAgICAgICAgICAgICBmdWxseU9ic2N1cmluZ0VsbXMucHVzaCh2TmVpZ2hib3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFydGlhbE9ic2N1cmluZ0VsbXMucHVzaCh2TmVpZ2hib3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjE5LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjE5LmYoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZ1bGx5T2JzY3VyaW5nRWxtczogZnVsbHlPYnNjdXJpbmdFbG1zLFxuICAgICAgICBwYXJ0aWFsT2JzY3VyaW5nRWxtczogcGFydGlhbE9ic2N1cmluZ0VsbXNcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldExhcmdlc3RVbm9ic2N1cmVkQXJlYSh2Tm9kZSwgb2JzY3VyZWROb2Rlcykge1xuICAgICAgdmFyIG5vZGVSZWN0ID0gdk5vZGUuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgdmFyIG9ic2N1cmluZ1JlY3RzID0gb2JzY3VyZWROb2Rlcy5tYXAoZnVuY3Rpb24oX3JlZjExNykge1xuICAgICAgICB2YXIgcmVjdCA9IF9yZWYxMTcuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgICByZXR1cm4gcmVjdDtcbiAgICAgIH0pO1xuICAgICAgdmFyIHVub2JzY3VyZWRSZWN0cztcbiAgICAgIHRyeSB7XG4gICAgICAgIHVub2JzY3VyZWRSZWN0cyA9IF9zcGxpdFJlY3RzKG5vZGVSZWN0LCBvYnNjdXJpbmdSZWN0cyk7XG4gICAgICB9IGNhdGNoIChfdW51c2VkOSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXRMYXJnZXN0UmVjdDIodW5vYnNjdXJlZFJlY3RzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TGFyZ2VzdFJlY3QyKHJlY3RzLCBtaW5TaXplKSB7XG4gICAgICByZXR1cm4gcmVjdHMucmVkdWNlKGZ1bmN0aW9uKHJlY3RBLCByZWN0Qikge1xuICAgICAgICB2YXIgcmVjdEFpc01pbmltdW0gPSBfcmVjdEhhc01pbmltdW1TaXplKG1pblNpemUsIHJlY3RBKTtcbiAgICAgICAgdmFyIHJlY3RCaXNNaW5pbXVtID0gX3JlY3RIYXNNaW5pbXVtU2l6ZShtaW5TaXplLCByZWN0Qik7XG4gICAgICAgIGlmIChyZWN0QWlzTWluaW11bSAhPT0gcmVjdEJpc01pbmltdW0pIHtcbiAgICAgICAgICByZXR1cm4gcmVjdEFpc01pbmltdW0gPyByZWN0QSA6IHJlY3RCO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmVhQSA9IHJlY3RBLndpZHRoICogcmVjdEEuaGVpZ2h0O1xuICAgICAgICB2YXIgYXJlYUIgPSByZWN0Qi53aWR0aCAqIHJlY3RCLmhlaWdodDtcbiAgICAgICAgcmV0dXJuIGFyZWFBID4gYXJlYUIgPyByZWN0QSA6IHJlY3RCO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbHRlckZvY3VzYWJsZVdpZGdldHModk5vZGVzKSB7XG4gICAgICByZXR1cm4gdk5vZGVzLmZpbHRlcihmdW5jdGlvbih2Tm9kZSkge1xuICAgICAgICByZXR1cm4gZ2V0X3JvbGVfdHlwZV9kZWZhdWx0KHZOb2RlKSA9PT0gJ3dpZGdldCcgJiYgX2lzRm9jdXNhYmxlKHZOb2RlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0VuY2xvc2VkUmVjdDIodk5vZGVBLCB2Tm9kZUIpIHtcbiAgICAgIHZhciByZWN0QSA9IHZOb2RlQS5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gICAgICB2YXIgcmVjdEIgPSB2Tm9kZUIuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgcmV0dXJuIHJlY3RBLnRvcCA+PSByZWN0Qi50b3AgJiYgcmVjdEEubGVmdCA+PSByZWN0Qi5sZWZ0ICYmIHJlY3RBLmJvdHRvbSA8PSByZWN0Qi5ib3R0b20gJiYgcmVjdEEucmlnaHQgPD0gcmVjdEIucmlnaHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldENzc1BvaW50ZXJFdmVudHModk5vZGUpIHtcbiAgICAgIHJldHVybiB2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgncG9pbnRlci1ldmVudHMnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9EZWNpbWFsU2l6ZShyZWN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogTWF0aC5yb3VuZChyZWN0LndpZHRoICogMTApIC8gMTAsXG4gICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChyZWN0LmhlaWdodCAqIDEwKSAvIDEwXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0Rlc2NlbmRhbnROb3RJblRhYk9yZGVyMih2QW5jZXN0b3IsIHZOb2RlKSB7XG4gICAgICByZXR1cm4gX2NvbnRhaW5zKHZBbmNlc3Rvciwgdk5vZGUpICYmICFfaXNJblRhYk9yZGVyKHZOb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWFwQWN0dWFsTm9kZXModk5vZGVzKSB7XG4gICAgICByZXR1cm4gdk5vZGVzLm1hcChmdW5jdGlvbihfcmVmMTE4KSB7XG4gICAgICAgIHZhciBhY3R1YWxOb2RlID0gX3JlZjExOC5hY3R1YWxOb2RlO1xuICAgICAgICByZXR1cm4gYWN0dWFsTm9kZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgcm91bmRpbmdNYXJnaW4yID0gLjA1O1xuICAgIGZ1bmN0aW9uIHRhcmdldE9mZnNldEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZOb2RlKSB7XG4gICAgICB2YXIgbWluT2Zmc2V0ID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5taW5PZmZzZXQpIHx8IDI0O1xuICAgICAgaWYgKF9yZWN0SGFzTWluaW11bVNpemUobWluT2Zmc2V0ICogMTAsIHZOb2RlLmJvdW5kaW5nQ2xpZW50UmVjdCkpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnbGFyZ2UnLFxuICAgICAgICAgIG1pbk9mZnNldDogbWluT2Zmc2V0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBjbG9zZU5laWdoYm9ycyA9IFtdO1xuICAgICAgdmFyIGNsb3Nlc3RPZmZzZXQgPSBtaW5PZmZzZXQ7XG4gICAgICB2YXIgX2l0ZXJhdG9yMjAgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihfZmluZE5lYXJieUVsbXModk5vZGUsIG1pbk9mZnNldCkpLCBfc3RlcDIwO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyMC5zKCk7ICEoX3N0ZXAyMCA9IF9pdGVyYXRvcjIwLm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgdmFyIHZOZWlnaGJvciA9IF9zdGVwMjAudmFsdWU7XG4gICAgICAgICAgaWYgKGdldF9yb2xlX3R5cGVfZGVmYXVsdCh2TmVpZ2hib3IpICE9PSAnd2lkZ2V0JyB8fCAhX2lzRm9jdXNhYmxlKHZOZWlnaGJvcikpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gX2dldE9mZnNldCh2Tm9kZSwgdk5laWdoYm9yLCBtaW5PZmZzZXQgLyAyKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIyKSB7XG4gICAgICAgICAgICBpZiAoZXJyMi5tZXNzYWdlLnN0YXJ0c1dpdGgoJ3NwbGl0UmVjdHMnKSkge1xuICAgICAgICAgICAgICB0aGlzLmRhdGEoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VLZXk6ICd0b29NYW55UmVjdHMnLFxuICAgICAgICAgICAgICAgIGNsb3Nlc3RPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgbWluT2Zmc2V0OiBtaW5PZmZzZXRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnIyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob2Zmc2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2Zmc2V0ID0gcm91bmRUb1NpbmdsZURlY2ltYWwob2Zmc2V0KSAqIDI7XG4gICAgICAgICAgaWYgKG9mZnNldCArIHJvdW5kaW5nTWFyZ2luMiA+PSBtaW5PZmZzZXQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjbG9zZXN0T2Zmc2V0ID0gTWF0aC5taW4oY2xvc2VzdE9mZnNldCwgb2Zmc2V0KTtcbiAgICAgICAgICBjbG9zZU5laWdoYm9ycy5wdXNoKHZOZWlnaGJvcik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyMC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyMC5mKCk7XG4gICAgICB9XG4gICAgICBpZiAoY2xvc2VOZWlnaGJvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgY2xvc2VzdE9mZnNldDogY2xvc2VzdE9mZnNldCxcbiAgICAgICAgICBtaW5PZmZzZXQ6IG1pbk9mZnNldFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbGF0ZWROb2RlcyhjbG9zZU5laWdoYm9ycy5tYXAoZnVuY3Rpb24oX3JlZjExOSkge1xuICAgICAgICB2YXIgYWN0dWFsTm9kZSA9IF9yZWYxMTkuYWN0dWFsTm9kZTtcbiAgICAgICAgcmV0dXJuIGFjdHVhbE5vZGU7XG4gICAgICB9KSk7XG4gICAgICBpZiAoIWNsb3NlTmVpZ2hib3JzLnNvbWUoX2lzSW5UYWJPcmRlcikpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnbm9uVGFiYmFibGVOZWlnaGJvcicsXG4gICAgICAgICAgY2xvc2VzdE9mZnNldDogY2xvc2VzdE9mZnNldCxcbiAgICAgICAgICBtaW5PZmZzZXQ6IG1pbk9mZnNldFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgIGNsb3Nlc3RPZmZzZXQ6IGNsb3Nlc3RPZmZzZXQsXG4gICAgICAgIG1pbk9mZnNldDogbWluT2Zmc2V0XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfaXNJblRhYk9yZGVyKHZOb2RlKSA/IGZhbHNlIDogdm9pZCAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiByb3VuZFRvU2luZ2xlRGVjaW1hbChudW0pIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIDEwKSAvIDEwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtZXRhVmlld3BvcnRTY2FsZUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgX3JlZjEyMCA9IG9wdGlvbnMgfHwge30sIF9yZWYxMjAkc2NhbGVNaW5pbXVtID0gX3JlZjEyMC5zY2FsZU1pbmltdW0sIHNjYWxlTWluaW11bSA9IF9yZWYxMjAkc2NhbGVNaW5pbXVtID09PSB2b2lkIDAgPyAyIDogX3JlZjEyMCRzY2FsZU1pbmltdW0sIF9yZWYxMjAkbG93ZXJCb3VuZCA9IF9yZWYxMjAubG93ZXJCb3VuZCwgbG93ZXJCb3VuZCA9IF9yZWYxMjAkbG93ZXJCb3VuZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTIwJGxvd2VyQm91bmQ7XG4gICAgICB2YXIgY29udGVudCA9IHZpcnR1YWxOb2RlLmF0dHIoJ2NvbnRlbnQnKSB8fCAnJztcbiAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBjb250ZW50LnNwbGl0KC9bOyxdLykucmVkdWNlKGZ1bmN0aW9uKG91dCwgaXRlbSkge1xuICAgICAgICB2YXIgY29udGVudFZhbHVlID0gaXRlbS50cmltKCk7XG4gICAgICAgIGlmICghY29udGVudFZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2NvbnRlbnRWYWx1ZSRzcGxpdCA9IGNvbnRlbnRWYWx1ZS5zcGxpdCgnPScpLCBfY29udGVudFZhbHVlJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9jb250ZW50VmFsdWUkc3BsaXQsIDIpLCBrZXkgPSBfY29udGVudFZhbHVlJHNwbGl0MlswXSwgdmFsdWUgPSBfY29udGVudFZhbHVlJHNwbGl0MlsxXTtcbiAgICAgICAgaWYgKCFrZXkgfHwgIXZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VyYXRlZEtleSA9IGtleS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgdmFyIGN1cmF0ZWRWYWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgICAgICBpZiAoY3VyYXRlZEtleSA9PT0gJ21heGltdW0tc2NhbGUnICYmIGN1cmF0ZWRWYWx1ZSA9PT0gJ3llcycpIHtcbiAgICAgICAgICBjdXJhdGVkVmFsdWUgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJhdGVkS2V5ID09PSAnbWF4aW11bS1zY2FsZScgJiYgcGFyc2VGbG9hdChjdXJhdGVkVmFsdWUpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgb3V0W2N1cmF0ZWRLZXldID0gY3VyYXRlZFZhbHVlO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfSwge30pO1xuICAgICAgaWYgKGxvd2VyQm91bmQgJiYgcmVzdWx0WydtYXhpbXVtLXNjYWxlJ10gJiYgcGFyc2VGbG9hdChyZXN1bHRbJ21heGltdW0tc2NhbGUnXSkgPCBsb3dlckJvdW5kKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFsb3dlckJvdW5kICYmIHJlc3VsdFsndXNlci1zY2FsYWJsZSddID09PSAnbm8nKSB7XG4gICAgICAgIHRoaXMuZGF0YSgndXNlci1zY2FsYWJsZT1ubycpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdXNlclNjYWxhYmxlQXNGbG9hdCA9IHBhcnNlRmxvYXQocmVzdWx0Wyd1c2VyLXNjYWxhYmxlJ10pO1xuICAgICAgaWYgKCFsb3dlckJvdW5kICYmIHJlc3VsdFsndXNlci1zY2FsYWJsZSddICYmICh1c2VyU2NhbGFibGVBc0Zsb2F0IHx8IHVzZXJTY2FsYWJsZUFzRmxvYXQgPT09IDApICYmIHVzZXJTY2FsYWJsZUFzRmxvYXQgPiAtMSAmJiB1c2VyU2NhbGFibGVBc0Zsb2F0IDwgMSkge1xuICAgICAgICB0aGlzLmRhdGEoJ3VzZXItc2NhbGFibGUnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdFsnbWF4aW11bS1zY2FsZSddICYmIHBhcnNlRmxvYXQocmVzdWx0WydtYXhpbXVtLXNjYWxlJ10pIDwgc2NhbGVNaW5pbXVtKSB7XG4gICAgICAgIHRoaXMuZGF0YSgnbWF4aW11bS1zY2FsZScpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIG1ldGFfdmlld3BvcnRfc2NhbGVfZXZhbHVhdGVfZGVmYXVsdCA9IG1ldGFWaWV3cG9ydFNjYWxlRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gY3NzT3JpZW50YXRpb25Mb2NrRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBfcmVmMTIxID0gY29udGV4dCB8fCB7fSwgX3JlZjEyMSRjc3NvbSA9IF9yZWYxMjEuY3Nzb20sIGNzc29tID0gX3JlZjEyMSRjc3NvbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3JlZjEyMSRjc3NvbTtcbiAgICAgIHZhciBfcmVmMTIyID0gb3B0aW9ucyB8fCB7fSwgX3JlZjEyMiRkZWdyZWVUaHJlc2hvID0gX3JlZjEyMi5kZWdyZWVUaHJlc2hvbGQsIGRlZ3JlZVRocmVzaG9sZCA9IF9yZWYxMjIkZGVncmVlVGhyZXNobyA9PT0gdm9pZCAwID8gMCA6IF9yZWYxMjIkZGVncmVlVGhyZXNobztcbiAgICAgIGlmICghY3Nzb20gfHwgIWNzc29tLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdmFyIGlzTG9ja2VkID0gZmFsc2U7XG4gICAgICB2YXIgcmVsYXRlZEVsZW1lbnRzID0gW107XG4gICAgICB2YXIgcnVsZXNHcm91cEJ5RG9jdW1lbnRGcmFnbWVudCA9IGdyb3VwQ3Nzb21CeURvY3VtZW50KGNzc29tKTtcbiAgICAgIHZhciBfbG9vcDkgPSBmdW5jdGlvbiBfbG9vcDkoKSB7XG4gICAgICAgIHZhciBrZXkgPSBfT2JqZWN0JGtleXMzW19pMzldO1xuICAgICAgICB2YXIgX3J1bGVzR3JvdXBCeURvY3VtZW50ID0gcnVsZXNHcm91cEJ5RG9jdW1lbnRGcmFnbWVudFtrZXldLCByb290ID0gX3J1bGVzR3JvdXBCeURvY3VtZW50LnJvb3QsIHJ1bGVzID0gX3J1bGVzR3JvdXBCeURvY3VtZW50LnJ1bGVzO1xuICAgICAgICB2YXIgb3JpZW50YXRpb25SdWxlcyA9IHJ1bGVzLmZpbHRlcihpc01lZGlhUnVsZVdpdGhPcmllbnRhdGlvbik7XG4gICAgICAgIGlmICghb3JpZW50YXRpb25SdWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBvcmllbnRhdGlvblJ1bGVzLmZvckVhY2goZnVuY3Rpb24oX3JlZjEyMykge1xuICAgICAgICAgIHZhciBjc3NSdWxlcyA9IF9yZWYxMjMuY3NzUnVsZXM7XG4gICAgICAgICAgQXJyYXkuZnJvbShjc3NSdWxlcykuZm9yRWFjaChmdW5jdGlvbihjc3NSdWxlKSB7XG4gICAgICAgICAgICB2YXIgbG9ja2VkID0gZ2V0SXNPcmllbnRhdGlvbkxvY2tlZChjc3NSdWxlKTtcbiAgICAgICAgICAgIGlmIChsb2NrZWQgJiYgY3NzUnVsZS5zZWxlY3RvclRleHQudG9VcHBlckNhc2UoKSAhPT0gJ0hUTUwnKSB7XG4gICAgICAgICAgICAgIHZhciBlbG1zID0gQXJyYXkuZnJvbShyb290LnF1ZXJ5U2VsZWN0b3JBbGwoY3NzUnVsZS5zZWxlY3RvclRleHQpKSB8fCBbXTtcbiAgICAgICAgICAgICAgcmVsYXRlZEVsZW1lbnRzID0gcmVsYXRlZEVsZW1lbnRzLmNvbmNhdChlbG1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzTG9ja2VkID0gaXNMb2NrZWQgfHwgbG9ja2VkO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICBmb3IgKHZhciBfaTM5ID0gMCwgX09iamVjdCRrZXlzMyA9IE9iamVjdC5rZXlzKHJ1bGVzR3JvdXBCeURvY3VtZW50RnJhZ21lbnQpOyBfaTM5IDwgX09iamVjdCRrZXlzMy5sZW5ndGg7IF9pMzkrKykge1xuICAgICAgICBpZiAoX2xvb3A5KCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc0xvY2tlZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWxhdGVkRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucmVsYXRlZE5vZGVzKHJlbGF0ZWRFbGVtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBmdW5jdGlvbiBncm91cENzc29tQnlEb2N1bWVudChjc3NPYmplY3RNb2RlbCkge1xuICAgICAgICByZXR1cm4gY3NzT2JqZWN0TW9kZWwucmVkdWNlKGZ1bmN0aW9uKG91dCwgX3JlZjEyNCkge1xuICAgICAgICAgIHZhciBzaGVldCA9IF9yZWYxMjQuc2hlZXQsIHJvb3QgPSBfcmVmMTI0LnJvb3QsIHNoYWRvd0lkID0gX3JlZjEyNC5zaGFkb3dJZDtcbiAgICAgICAgICB2YXIga2V5ID0gc2hhZG93SWQgPyBzaGFkb3dJZCA6ICd0b3BEb2N1bWVudCc7XG4gICAgICAgICAgaWYgKCFvdXRba2V5XSkge1xuICAgICAgICAgICAgb3V0W2tleV0gPSB7XG4gICAgICAgICAgICAgIHJvb3Q6IHJvb3QsXG4gICAgICAgICAgICAgIHJ1bGVzOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFzaGVldCB8fCAhc2hlZXQuY3NzUnVsZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBydWxlcyA9IEFycmF5LmZyb20oc2hlZXQuY3NzUnVsZXMpO1xuICAgICAgICAgIG91dFtrZXldLnJ1bGVzID0gb3V0W2tleV0ucnVsZXMuY29uY2F0KHJ1bGVzKTtcbiAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9LCB7fSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBpc01lZGlhUnVsZVdpdGhPcmllbnRhdGlvbihfcmVmMTI1KSB7XG4gICAgICAgIHZhciB0eXBlMiA9IF9yZWYxMjUudHlwZSwgY3NzVGV4dCA9IF9yZWYxMjUuY3NzVGV4dDtcbiAgICAgICAgaWYgKHR5cGUyICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAvb3JpZW50YXRpb246XFxzKmxhbmRzY2FwZS9pLnRlc3QoY3NzVGV4dCkgfHwgL29yaWVudGF0aW9uOlxccypwb3J0cmFpdC9pLnRlc3QoY3NzVGV4dCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBnZXRJc09yaWVudGF0aW9uTG9ja2VkKF9yZWYxMjYpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yVGV4dCA9IF9yZWYxMjYuc2VsZWN0b3JUZXh0LCBzdHlsZSA9IF9yZWYxMjYuc3R5bGU7XG4gICAgICAgIGlmICghc2VsZWN0b3JUZXh0IHx8IHN0eWxlLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cmFuc2Zvcm1TdHlsZSA9IHN0eWxlLnRyYW5zZm9ybSB8fCBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gfHwgc3R5bGUubXNUcmFuc2Zvcm0gfHwgZmFsc2U7XG4gICAgICAgIGlmICghdHJhbnNmb3JtU3R5bGUgJiYgIXN0eWxlLnJvdGF0ZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJhbnNmb3JtRGVncmVlcyA9IGdldFRyYW5zZm9ybURlZ3JlZXModHJhbnNmb3JtU3R5bGUpO1xuICAgICAgICB2YXIgcm90YXRlRGVncmVlcyA9IGdldFJvdGF0aW9uSW5EZWdyZWVzKCdyb3RhdGUnLCBzdHlsZS5yb3RhdGUpO1xuICAgICAgICB2YXIgZGVncmVlcyA9IHRyYW5zZm9ybURlZ3JlZXMgKyByb3RhdGVEZWdyZWVzO1xuICAgICAgICBpZiAoIWRlZ3JlZXMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVncmVlcyA9IE1hdGguYWJzKGRlZ3JlZXMpO1xuICAgICAgICBpZiAoTWF0aC5hYnMoZGVncmVlcyAtIDE4MCkgJSAxODAgPD0gZGVncmVlVGhyZXNob2xkKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhkZWdyZWVzIC0gOTApICUgOTAgPD0gZGVncmVlVGhyZXNob2xkO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtRGVncmVlcyh0cmFuc2Zvcm1TdHlsZSkge1xuICAgICAgICBpZiAoIXRyYW5zZm9ybVN0eWxlKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hdGNoZXM0ID0gdHJhbnNmb3JtU3R5bGUubWF0Y2goLyhyb3RhdGV8cm90YXRlWnxyb3RhdGUzZHxtYXRyaXh8bWF0cml4M2QpXFwoKFteKV0rKVxcKSg/IS4qKHJvdGF0ZXxyb3RhdGVafHJvdGF0ZTNkfG1hdHJpeHxtYXRyaXgzZCkpLyk7XG4gICAgICAgIGlmICghbWF0Y2hlczQpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX21hdGNoZXMyID0gX3NsaWNlZFRvQXJyYXkobWF0Y2hlczQsIDMpLCB0cmFuc2Zvcm1GbiA9IF9tYXRjaGVzMlsxXSwgdHJhbnNmb3JtRm5WYWx1ZSA9IF9tYXRjaGVzMlsyXTtcbiAgICAgICAgcmV0dXJuIGdldFJvdGF0aW9uSW5EZWdyZWVzKHRyYW5zZm9ybUZuLCB0cmFuc2Zvcm1GblZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGdldFJvdGF0aW9uSW5EZWdyZWVzKHRyYW5zZm9ybUZ1bmN0aW9uLCB0cmFuc2Zvcm1GblZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAodHJhbnNmb3JtRnVuY3Rpb24pIHtcbiAgICAgICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgICAgICBjYXNlICdyb3RhdGVaJzpcbiAgICAgICAgICByZXR1cm4gZ2V0QW5nbGVJbkRlZ3JlZXModHJhbnNmb3JtRm5WYWx1ZSk7XG5cbiAgICAgICAgIGNhc2UgJ3JvdGF0ZTNkJzpcbiAgICAgICAgICB2YXIgX3RyYW5zZm9ybUZuVmFsdWUkc3BsID0gdHJhbnNmb3JtRm5WYWx1ZS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICB9KSwgX3RyYW5zZm9ybUZuVmFsdWUkc3BsMiA9IF9zbGljZWRUb0FycmF5KF90cmFuc2Zvcm1GblZhbHVlJHNwbCwgNCksIHogPSBfdHJhbnNmb3JtRm5WYWx1ZSRzcGwyWzJdLCBhbmdsZVdpdGhVbml0ID0gX3RyYW5zZm9ybUZuVmFsdWUkc3BsMlszXTtcbiAgICAgICAgICBpZiAocGFyc2VJbnQoeikgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGdldEFuZ2xlSW5EZWdyZWVzKGFuZ2xlV2l0aFVuaXQpO1xuXG4gICAgICAgICBjYXNlICdtYXRyaXgnOlxuICAgICAgICAgY2FzZSAnbWF0cml4M2QnOlxuICAgICAgICAgIHJldHVybiBnZXRBbmdsZUluRGVncmVlc0Zyb21NYXRyaXhUcmFuc2Zvcm0odHJhbnNmb3JtRm5WYWx1ZSk7XG5cbiAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGdldEFuZ2xlSW5EZWdyZWVzKGFuZ2xlV2l0aFVuaXQpIHtcbiAgICAgICAgdmFyIF9yZWYxMjcgPSBhbmdsZVdpdGhVbml0Lm1hdGNoKC8oZGVnfGdyYWR8cmFkfHR1cm4pLykgfHwgW10sIF9yZWYxMjggPSBfc2xpY2VkVG9BcnJheShfcmVmMTI3LCAxKSwgdW5pdCA9IF9yZWYxMjhbMF07XG4gICAgICAgIGlmICghdW5pdCkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbmdsZSA9IHBhcnNlRmxvYXQoYW5nbGVXaXRoVW5pdC5yZXBsYWNlKHVuaXQsICcnKSk7XG4gICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgY2FzZSAncmFkJzpcbiAgICAgICAgICByZXR1cm4gY29udmVydFJhZFRvRGVnKGFuZ2xlKTtcblxuICAgICAgICAgY2FzZSAnZ3JhZCc6XG4gICAgICAgICAgcmV0dXJuIGNvbnZlcnRHcmFkVG9EZWcoYW5nbGUpO1xuXG4gICAgICAgICBjYXNlICd0dXJuJzpcbiAgICAgICAgICByZXR1cm4gY29udmVydFR1cm5Ub0RlZyhhbmdsZSk7XG5cbiAgICAgICAgIGNhc2UgJ2RlZyc6XG4gICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZUludChhbmdsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGdldEFuZ2xlSW5EZWdyZWVzRnJvbU1hdHJpeFRyYW5zZm9ybSh0cmFuc2Zvcm1GblZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZXMyID0gdHJhbnNmb3JtRm5WYWx1ZS5zcGxpdCgnLCcpO1xuICAgICAgICBpZiAodmFsdWVzMi5sZW5ndGggPD0gNikge1xuICAgICAgICAgIHZhciBfdmFsdWVzID0gX3NsaWNlZFRvQXJyYXkodmFsdWVzMiwgMiksIGEyID0gX3ZhbHVlc1swXSwgYjMgPSBfdmFsdWVzWzFdO1xuICAgICAgICAgIHZhciByYWRpYW5zID0gTWF0aC5hdGFuMihwYXJzZUZsb2F0KGIzKSwgcGFyc2VGbG9hdChhMikpO1xuICAgICAgICAgIHJldHVybiBjb252ZXJ0UmFkVG9EZWcocmFkaWFucyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNpbkIgPSBwYXJzZUZsb2F0KHZhbHVlczJbOF0pO1xuICAgICAgICB2YXIgYjIgPSBNYXRoLmFzaW4oc2luQik7XG4gICAgICAgIHZhciBjb3NCID0gTWF0aC5jb3MoYjIpO1xuICAgICAgICB2YXIgcm90YXRlWlJhZGlhbnMgPSBNYXRoLmFjb3MocGFyc2VGbG9hdCh2YWx1ZXMyWzBdKSAvIGNvc0IpO1xuICAgICAgICByZXR1cm4gY29udmVydFJhZFRvRGVnKHJvdGF0ZVpSYWRpYW5zKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGNvbnZlcnRSYWRUb0RlZyhyYWRpYW5zKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHJhZGlhbnMgKiAoMTgwIC8gTWF0aC5QSSkpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gY29udmVydEdyYWRUb0RlZyhncmFkKSB7XG4gICAgICAgIGdyYWQgPSBncmFkICUgNDAwO1xuICAgICAgICBpZiAoZ3JhZCA8IDApIHtcbiAgICAgICAgICBncmFkICs9IDQwMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChncmFkIC8gNDAwICogMzYwKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUdXJuVG9EZWcodHVybikge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgzNjAgLyAoMSAvIHR1cm4pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNzc19vcmllbnRhdGlvbl9sb2NrX2V2YWx1YXRlX2RlZmF1bHQgPSBjc3NPcmllbnRhdGlvbkxvY2tFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBub0F1dG9wbGF5QXVkaW9FdmFsdWF0ZShub2RlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgaGFzQ29udHJvbHMgPSBub2RlLmhhc0F0dHJpYnV0ZSgnY29udHJvbHMnKTtcbiAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgnbG9vcCcpKSB7XG4gICAgICAgIHJldHVybiBoYXNDb250cm9scztcbiAgICAgIH1cbiAgICAgIGlmICghbm9kZS5kdXJhdGlvbikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2F4ZS51dGlscy5wcmVsb2FkTWVkaWEgZGlkIG5vdCBsb2FkIG1ldGFkYXRhJyk7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB2YXIgX29wdGlvbnMkYWxsb3dlZER1cmF0ID0gb3B0aW9ucy5hbGxvd2VkRHVyYXRpb24sIGFsbG93ZWREdXJhdGlvbiA9IF9vcHRpb25zJGFsbG93ZWREdXJhdCA9PT0gdm9pZCAwID8gMyA6IF9vcHRpb25zJGFsbG93ZWREdXJhdDtcbiAgICAgIHZhciBwbGF5YWJsZUR1cmF0aW9uID0gZ2V0UGxheWFibGVEdXJhdGlvbihub2RlKTtcbiAgICAgIGlmIChwbGF5YWJsZUR1cmF0aW9uIDw9IGFsbG93ZWREdXJhdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaGFzQ29udHJvbHMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBmdW5jdGlvbiBnZXRQbGF5YWJsZUR1cmF0aW9uKGVsbSkge1xuICAgICAgICBpZiAoIWVsbS5jdXJyZW50U3JjKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBsYXliYWNrUmFuZ2UgPSBnZXRQbGF5YmFja1JhbmdlKGVsbS5jdXJyZW50U3JjKTtcbiAgICAgICAgaWYgKCFwbGF5YmFja1JhbmdlKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGguYWJzKGVsbS5kdXJhdGlvbiAtIChlbG0uY3VycmVudFRpbWUgfHwgMCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwbGF5YmFja1JhbmdlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHJldHVybiBNYXRoLmFicyhlbG0uZHVyYXRpb24gLSBwbGF5YmFja1JhbmdlWzBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5hYnMocGxheWJhY2tSYW5nZVsxXSAtIHBsYXliYWNrUmFuZ2VbMF0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZ2V0UGxheWJhY2tSYW5nZShzcmMpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gc3JjLm1hdGNoKC8jdD0oLiopLyk7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9tYXRjaCA9IF9zbGljZWRUb0FycmF5KG1hdGNoLCAyKSwgdmFsdWUgPSBfbWF0Y2hbMV07XG4gICAgICAgIHZhciByYW5nZXMgPSB2YWx1ZS5zcGxpdCgnLCcpO1xuICAgICAgICByZXR1cm4gcmFuZ2VzLm1hcChmdW5jdGlvbihyYW5nZTIpIHtcbiAgICAgICAgICBpZiAoLzovLnRlc3QocmFuZ2UyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRIb3VyTWluU2VjVG9TZWNvbmRzKHJhbmdlMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHJhbmdlMik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gY29udmVydEhvdXJNaW5TZWNUb1NlY29uZHMoaGhNbVNzKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGhoTW1Tcy5zcGxpdCgnOicpO1xuICAgICAgICB2YXIgc2VjcyA9IDA7XG4gICAgICAgIHZhciBtaW5zID0gMTtcbiAgICAgICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzZWNzICs9IG1pbnMgKiBwYXJzZUludChwYXJ0cy5wb3AoKSwgMTApO1xuICAgICAgICAgIG1pbnMgKj0gNjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc2Vjcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBub19hdXRvcGxheV9hdWRpb19ldmFsdWF0ZV9kZWZhdWx0ID0gbm9BdXRvcGxheUF1ZGlvRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gZnJhbWVUZXN0ZWRFdmFsdWF0ZShub2RlLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pc1Zpb2xhdGlvbiA/IGZhbHNlIDogdm9pZCAwO1xuICAgIH1cbiAgICB2YXIgZnJhbWVfdGVzdGVkX2V2YWx1YXRlX2RlZmF1bHQgPSBmcmFtZVRlc3RlZEV2YWx1YXRlO1xuICAgIHZhciBqb2luU3RyID0gJyA+ICc7XG4gICAgZnVuY3Rpb24gZnJhbWVUZXN0ZWRBZnRlcihyZXN1bHRzKSB7XG4gICAgICB2YXIgaWZyYW1lcyA9IHt9O1xuICAgICAgcmV0dXJuIHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICB2YXIgZnJhbWVSZXN1bHQgPSByZXN1bHQubm9kZS5hbmNlc3RyeVtyZXN1bHQubm9kZS5hbmNlc3RyeS5sZW5ndGggLSAxXSAhPT0gJ2h0bWwnO1xuICAgICAgICBpZiAoZnJhbWVSZXN1bHQpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0cnkyID0gcmVzdWx0Lm5vZGUuYW5jZXN0cnkuZmxhdChJbmZpbml0eSkuam9pbihqb2luU3RyKTtcbiAgICAgICAgICBpZnJhbWVzW2FuY2VzdHJ5Ml0gPSByZXN1bHQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFuY2VzdHJ5ID0gcmVzdWx0Lm5vZGUuYW5jZXN0cnkuc2xpY2UoMCwgcmVzdWx0Lm5vZGUuYW5jZXN0cnkubGVuZ3RoIC0gMSkuZmxhdChJbmZpbml0eSkuam9pbihqb2luU3RyKTtcbiAgICAgICAgaWYgKGlmcmFtZXNbYW5jZXN0cnldKSB7XG4gICAgICAgICAgaWZyYW1lc1thbmNlc3RyeV0ucmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGZyYW1lX3Rlc3RlZF9hZnRlcl9kZWZhdWx0ID0gZnJhbWVUZXN0ZWRBZnRlcjtcbiAgICBmdW5jdGlvbiBjYXB0aW9uRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciB0cmFja3MgPSBxdWVyeV9zZWxlY3Rvcl9hbGxfZGVmYXVsdCh2aXJ0dWFsTm9kZSwgJ3RyYWNrJyk7XG4gICAgICB2YXIgaGFzQ2FwdGlvbnMgPSB0cmFja3Muc29tZShmdW5jdGlvbih2Tm9kZSkge1xuICAgICAgICByZXR1cm4gKHZOb2RlLmF0dHIoJ2tpbmQnKSB8fCAnJykudG9Mb3dlckNhc2UoKSA9PT0gJ2NhcHRpb25zJztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGhhc0NhcHRpb25zID8gZmFsc2UgOiB2b2lkIDA7XG4gICAgfVxuICAgIHZhciBjYXB0aW9uX2V2YWx1YXRlX2RlZmF1bHQgPSBjYXB0aW9uRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gc3RydWN0dXJlZERsaXRlbXNFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdmlydHVhbE5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGhhc0R0ID0gZmFsc2UsIGhhc0RkID0gZmFsc2UsIG5vZGVOYW1lMjtcbiAgICAgIGZvciAodmFyIF9pNDAgPSAwOyBfaTQwIDwgY2hpbGRyZW4ubGVuZ3RoOyBfaTQwKyspIHtcbiAgICAgICAgbm9kZU5hbWUyID0gY2hpbGRyZW5bX2k0MF0ucHJvcHMubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKG5vZGVOYW1lMiA9PT0gJ0RUJykge1xuICAgICAgICAgIGhhc0R0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzRHQgJiYgbm9kZU5hbWUyID09PSAnREQnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlTmFtZTIgPT09ICdERCcpIHtcbiAgICAgICAgICBoYXNEZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEdCB8fCBoYXNEZDtcbiAgICB9XG4gICAgdmFyIHN0cnVjdHVyZWRfZGxpdGVtc19ldmFsdWF0ZV9kZWZhdWx0ID0gc3RydWN0dXJlZERsaXRlbXNFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBvbmx5TGlzdGl0ZW1zRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBoYXNOb25FbXB0eVRleHROb2RlID0gZmFsc2U7XG4gICAgICB2YXIgYXRMZWFzdE9uZUxpc3RpdGVtID0gZmFsc2U7XG4gICAgICB2YXIgaXNFbXB0eTIgPSB0cnVlO1xuICAgICAgdmFyIGJhZE5vZGVzID0gW107XG4gICAgICB2YXIgYmFkUm9sZU5vZGVzID0gW107XG4gICAgICB2YXIgYmFkUm9sZXMgPSBbXTtcbiAgICAgIHZpcnR1YWxOb2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24odk5vZGUpIHtcbiAgICAgICAgdmFyIGFjdHVhbE5vZGUgPSB2Tm9kZS5hY3R1YWxOb2RlO1xuICAgICAgICBpZiAoYWN0dWFsTm9kZS5ub2RlVHlwZSA9PT0gMyAmJiBhY3R1YWxOb2RlLm5vZGVWYWx1ZS50cmltKCkgIT09ICcnKSB7XG4gICAgICAgICAgaGFzTm9uRW1wdHlUZXh0Tm9kZSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3R1YWxOb2RlLm5vZGVUeXBlICE9PSAxIHx8ICFfaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzKGFjdHVhbE5vZGUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlzRW1wdHkyID0gZmFsc2U7XG4gICAgICAgIHZhciBpc0xpID0gYWN0dWFsTm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnTEknO1xuICAgICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodk5vZGUpO1xuICAgICAgICB2YXIgaXNMaXN0SXRlbVJvbGUgPSByb2xlID09PSAnbGlzdGl0ZW0nO1xuICAgICAgICBpZiAoIWlzTGkgJiYgIWlzTGlzdEl0ZW1Sb2xlKSB7XG4gICAgICAgICAgYmFkTm9kZXMucHVzaChhY3R1YWxOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNMaSAmJiAhaXNMaXN0SXRlbVJvbGUpIHtcbiAgICAgICAgICBiYWRSb2xlTm9kZXMucHVzaChhY3R1YWxOb2RlKTtcbiAgICAgICAgICBpZiAoIWJhZFJvbGVzLmluY2x1ZGVzKHJvbGUpKSB7XG4gICAgICAgICAgICBiYWRSb2xlcy5wdXNoKHJvbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNMaXN0SXRlbVJvbGUpIHtcbiAgICAgICAgICBhdExlYXN0T25lTGlzdGl0ZW0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChoYXNOb25FbXB0eVRleHROb2RlIHx8IGJhZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhiYWROb2Rlcyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzRW1wdHkyIHx8IGF0TGVhc3RPbmVMaXN0aXRlbSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbGF0ZWROb2RlcyhiYWRSb2xlTm9kZXMpO1xuICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgbWVzc2FnZUtleTogJ3JvbGVOb3RWYWxpZCcsXG4gICAgICAgIHJvbGVzOiBiYWRSb2xlcy5qb2luKCcsICcpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgb25seV9saXN0aXRlbXNfZXZhbHVhdGVfZGVmYXVsdCA9IG9ubHlMaXN0aXRlbXNFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBvbmx5RGxpdGVtc0V2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgQUxMT1dFRF9ST0xFUyA9IFsgJ2RlZmluaXRpb24nLCAndGVybScsICdsaXN0JyBdO1xuICAgICAgdmFyIGJhc2UgPSB7XG4gICAgICAgIGJhZE5vZGVzOiBbXSxcbiAgICAgICAgaGFzTm9uRW1wdHlUZXh0Tm9kZTogZmFsc2VcbiAgICAgIH07XG4gICAgICB2YXIgY29udGVudCA9IHZpcnR1YWxOb2RlLmNoaWxkcmVuLnJlZHVjZShmdW5jdGlvbih2Tm9kZXMsIGNoaWxkKSB7XG4gICAgICAgIHZhciBhY3R1YWxOb2RlID0gY2hpbGQuYWN0dWFsTm9kZTtcbiAgICAgICAgaWYgKGFjdHVhbE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ0RJVicgJiYgZ2V0X3JvbGVfZGVmYXVsdChhY3R1YWxOb2RlKSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB2Tm9kZXMuY29uY2F0KGNoaWxkLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdk5vZGVzLmNvbmNhdChjaGlsZCk7XG4gICAgICB9LCBbXSk7XG4gICAgICB2YXIgcmVzdWx0ID0gY29udGVudC5yZWR1Y2UoZnVuY3Rpb24ob3V0LCBjaGlsZE5vZGUpIHtcbiAgICAgICAgdmFyIGFjdHVhbE5vZGUgPSBjaGlsZE5vZGUuYWN0dWFsTm9kZTtcbiAgICAgICAgdmFyIHRhZ05hbWUgPSBhY3R1YWxOb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmIChhY3R1YWxOb2RlLm5vZGVUeXBlID09PSAxICYmIF9pc1Zpc2libGVUb1NjcmVlblJlYWRlcnMoYWN0dWFsTm9kZSkpIHtcbiAgICAgICAgICB2YXIgZXhwbGljaXRSb2xlMiA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQoYWN0dWFsTm9kZSk7XG4gICAgICAgICAgaWYgKHRhZ05hbWUgIT09ICdEVCcgJiYgdGFnTmFtZSAhPT0gJ0REJyB8fCBleHBsaWNpdFJvbGUyKSB7XG4gICAgICAgICAgICBpZiAoIUFMTE9XRURfUk9MRVMuaW5jbHVkZXMoZXhwbGljaXRSb2xlMikpIHtcbiAgICAgICAgICAgICAgb3V0LmJhZE5vZGVzLnB1c2goYWN0dWFsTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGFjdHVhbE5vZGUubm9kZVR5cGUgPT09IDMgJiYgYWN0dWFsTm9kZS5ub2RlVmFsdWUudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgIG91dC5oYXNOb25FbXB0eVRleHROb2RlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfSwgYmFzZSk7XG4gICAgICBpZiAocmVzdWx0LmJhZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhyZXN1bHQuYmFkTm9kZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICEhcmVzdWx0LmJhZE5vZGVzLmxlbmd0aCB8fCByZXN1bHQuaGFzTm9uRW1wdHlUZXh0Tm9kZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGlzdGl0ZW1FdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHBhcmVudCA9IHZpcnR1YWxOb2RlLnBhcmVudDtcbiAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB2YXIgcGFyZW50Tm9kZU5hbWUgPSBwYXJlbnQucHJvcHMubm9kZU5hbWU7XG4gICAgICB2YXIgcGFyZW50Um9sZSA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQocGFyZW50KTtcbiAgICAgIGlmIChbICdwcmVzZW50YXRpb24nLCAnbm9uZScsICdsaXN0JyBdLmluY2x1ZGVzKHBhcmVudFJvbGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudFJvbGUgJiYgaXNfdmFsaWRfcm9sZV9kZWZhdWx0KHBhcmVudFJvbGUpKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogJ3JvbGVOb3RWYWxpZCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbICd1bCcsICdvbCcsICdtZW51JyBdLmluY2x1ZGVzKHBhcmVudE5vZGVOYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW52YWxpZENoaWxkcmVuRXZhbHVhdGUobm9kZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIHZpcnR1YWxOb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVsYXRlZE5vZGVzID0gW107XG4gICAgICB2YXIgaXNzdWVzID0gW107XG4gICAgICBpZiAoIXZpcnR1YWxOb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB2YXIgdkNoaWxkcmVuID0gbWFwV2l0aE5lc3RlZCh2aXJ0dWFsTm9kZS5jaGlsZHJlbik7XG4gICAgICB3aGlsZSAodkNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICB2YXIgX3ZDaGlsZCRhY3R1YWxOb2RlO1xuICAgICAgICB2YXIgX3ZDaGlsZHJlbiRzaGlmdCA9IHZDaGlsZHJlbi5zaGlmdCgpLCB2Q2hpbGQgPSBfdkNoaWxkcmVuJHNoaWZ0LnZDaGlsZCwgbmVzdGVkID0gX3ZDaGlsZHJlbiRzaGlmdC5uZXN0ZWQ7XG4gICAgICAgIGlmIChvcHRpb25zLmRpdkdyb3VwcyAmJiAhbmVzdGVkICYmIGlzRGl2R3JvdXAodkNoaWxkKSkge1xuICAgICAgICAgIGlmICghdkNoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdkdyYW5kQ2hpbGRyZW4gPSBtYXBXaXRoTmVzdGVkKHZDaGlsZC5jaGlsZHJlbiwgdHJ1ZSk7XG4gICAgICAgICAgdkNoaWxkcmVuLnB1c2guYXBwbHkodkNoaWxkcmVuLCBfdG9Db25zdW1hYmxlQXJyYXkodkdyYW5kQ2hpbGRyZW4pKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNzdWUgPSBnZXRJbnZhbGlkU2VsZWN0b3IodkNoaWxkLCBuZXN0ZWQsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoIWlzc3VlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc3N1ZXMuaW5jbHVkZXMoaXNzdWUpKSB7XG4gICAgICAgICAgaXNzdWVzLnB1c2goaXNzdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgodkNoaWxkID09PSBudWxsIHx8IHZDaGlsZCA9PT0gdm9pZCAwIHx8IChfdkNoaWxkJGFjdHVhbE5vZGUgPSB2Q2hpbGQuYWN0dWFsTm9kZSkgPT09IG51bGwgfHwgX3ZDaGlsZCRhY3R1YWxOb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdkNoaWxkJGFjdHVhbE5vZGUubm9kZVR5cGUpID09PSAxKSB7XG4gICAgICAgICAgcmVsYXRlZE5vZGVzLnB1c2godkNoaWxkLmFjdHVhbE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNzdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGEoe1xuICAgICAgICB2YWx1ZXM6IGlzc3Vlcy5qb2luKCcsICcpXG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVsYXRlZE5vZGVzKHJlbGF0ZWROb2Rlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0SW52YWxpZFNlbGVjdG9yKHZDaGlsZCwgbmVzdGVkLCBfcmVmMTI5KSB7XG4gICAgICB2YXIgX3JlZjEyOSR2YWxpZFJvbGVzID0gX3JlZjEyOS52YWxpZFJvbGVzLCB2YWxpZFJvbGVzID0gX3JlZjEyOSR2YWxpZFJvbGVzID09PSB2b2lkIDAgPyBbXSA6IF9yZWYxMjkkdmFsaWRSb2xlcywgX3JlZjEyOSR2YWxpZE5vZGVOYW1lID0gX3JlZjEyOS52YWxpZE5vZGVOYW1lcywgdmFsaWROb2RlTmFtZXMgPSBfcmVmMTI5JHZhbGlkTm9kZU5hbWUgPT09IHZvaWQgMCA/IFtdIDogX3JlZjEyOSR2YWxpZE5vZGVOYW1lO1xuICAgICAgdmFyIF92Q2hpbGQkcHJvcHMgPSB2Q2hpbGQucHJvcHMsIG5vZGVOYW1lMiA9IF92Q2hpbGQkcHJvcHMubm9kZU5hbWUsIG5vZGVUeXBlID0gX3ZDaGlsZCRwcm9wcy5ub2RlVHlwZSwgbm9kZVZhbHVlID0gX3ZDaGlsZCRwcm9wcy5ub2RlVmFsdWU7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBuZXN0ZWQgPyAnZGl2ID4gJyA6ICcnO1xuICAgICAgaWYgKG5vZGVUeXBlID09PSAzICYmIG5vZGVWYWx1ZS50cmltKCkgIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvciArICcjdGV4dCc7XG4gICAgICB9XG4gICAgICBpZiAobm9kZVR5cGUgIT09IDEgfHwgIV9pc1Zpc2libGVUb1NjcmVlblJlYWRlcnModkNoaWxkKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcm9sZSA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQodkNoaWxkKTtcbiAgICAgIGlmIChyb2xlKSB7XG4gICAgICAgIHJldHVybiB2YWxpZFJvbGVzLmluY2x1ZGVzKHJvbGUpID8gZmFsc2UgOiBzZWxlY3RvciArICdbcm9sZT0nLmNvbmNhdChyb2xlLCAnXScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkTm9kZU5hbWVzLmluY2x1ZGVzKG5vZGVOYW1lMikgPyBmYWxzZSA6IHNlbGVjdG9yICsgbm9kZU5hbWUyO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBpc0Rpdkdyb3VwKHZOb2RlKSB7XG4gICAgICByZXR1cm4gdk5vZGUucHJvcHMubm9kZU5hbWUgPT09ICdkaXYnICYmIGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQodk5vZGUpID09PSBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYXBXaXRoTmVzdGVkKHZOb2Rlcykge1xuICAgICAgdmFyIG5lc3RlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICByZXR1cm4gdk5vZGVzLm1hcChmdW5jdGlvbih2Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2Q2hpbGQ6IHZDaGlsZCxcbiAgICAgICAgICBuZXN0ZWQ6IG5lc3RlZFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRsaXRlbUV2YWx1YXRlKG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBnZXRfY29tcG9zZWRfcGFyZW50X2RlZmF1bHQobm9kZSk7XG4gICAgICB2YXIgcGFyZW50VGFnTmFtZSA9IHBhcmVudC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgdmFyIHBhcmVudFJvbGUgPSBnZXRfZXhwbGljaXRfcm9sZV9kZWZhdWx0KHBhcmVudCk7XG4gICAgICBpZiAocGFyZW50VGFnTmFtZSA9PT0gJ0RJVicgJiYgWyAncHJlc2VudGF0aW9uJywgJ25vbmUnLCBudWxsIF0uaW5jbHVkZXMocGFyZW50Um9sZSkpIHtcbiAgICAgICAgcGFyZW50ID0gZ2V0X2NvbXBvc2VkX3BhcmVudF9kZWZhdWx0KHBhcmVudCk7XG4gICAgICAgIHBhcmVudFRhZ05hbWUgPSBwYXJlbnQubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgcGFyZW50Um9sZSA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQocGFyZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnRUYWdOYW1lICE9PSAnREwnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghcGFyZW50Um9sZSB8fCBbICdwcmVzZW50YXRpb24nLCAnbm9uZScsICdsaXN0JyBdLmluY2x1ZGVzKHBhcmVudFJvbGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZGxpdGVtX2V2YWx1YXRlX2RlZmF1bHQgPSBkbGl0ZW1FdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiB4bWxMYW5nTWlzbWF0Y2hFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2Tm9kZSkge1xuICAgICAgdmFyIHByaW1hcnlMYW5nVmFsdWUgPSBnZXRfYmFzZV9sYW5nX2RlZmF1bHQodk5vZGUuYXR0cignbGFuZycpKTtcbiAgICAgIHZhciBwcmltYXJ5WG1sTGFuZ1ZhbHVlID0gZ2V0X2Jhc2VfbGFuZ19kZWZhdWx0KHZOb2RlLmF0dHIoJ3htbDpsYW5nJykpO1xuICAgICAgcmV0dXJuIHByaW1hcnlMYW5nVmFsdWUgPT09IHByaW1hcnlYbWxMYW5nVmFsdWU7XG4gICAgfVxuICAgIHZhciB4bWxfbGFuZ19taXNtYXRjaF9ldmFsdWF0ZV9kZWZhdWx0ID0geG1sTGFuZ01pc21hdGNoRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gdmFsaWRMYW5nRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBpbnZhbGlkID0gW107XG4gICAgICBvcHRpb25zLmF0dHJpYnV0ZXMuZm9yRWFjaChmdW5jdGlvbihsYW5nQXR0cikge1xuICAgICAgICB2YXIgbGFuZ1ZhbCA9IHZpcnR1YWxOb2RlLmF0dHIobGFuZ0F0dHIpO1xuICAgICAgICBpZiAodHlwZW9mIGxhbmdWYWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYXNlbGFuZ1ZhbCA9IGdldF9iYXNlX2xhbmdfZGVmYXVsdChsYW5nVmFsKTtcbiAgICAgICAgdmFyIGludmFsaWRMYW5nID0gb3B0aW9ucy52YWx1ZSA/ICFvcHRpb25zLnZhbHVlLm1hcChnZXRfYmFzZV9sYW5nX2RlZmF1bHQpLmluY2x1ZGVzKGJhc2VsYW5nVmFsKSA6ICF2YWxpZF9sYW5nc19kZWZhdWx0KGJhc2VsYW5nVmFsKTtcbiAgICAgICAgaWYgKGJhc2VsYW5nVmFsICE9PSAnJyAmJiBpbnZhbGlkTGFuZyB8fCBsYW5nVmFsICE9PSAnJyAmJiAhc2FuaXRpemVfZGVmYXVsdChsYW5nVmFsKSkge1xuICAgICAgICAgIGludmFsaWQucHVzaChsYW5nQXR0ciArICc9XCInICsgdmlydHVhbE5vZGUuYXR0cihsYW5nQXR0cikgKyAnXCInKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIWludmFsaWQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlTmFtZSAhPT0gJ2h0bWwnICYmICFfaGFzTGFuZ1RleHQodmlydHVhbE5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YShpbnZhbGlkKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgdmFsaWRfbGFuZ19ldmFsdWF0ZV9kZWZhdWx0ID0gdmFsaWRMYW5nRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgfHwgJycpLnRyaW0oKSAhPT0gJyc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc0xhbmdFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHhodG1sID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGlzX3hodG1sX2RlZmF1bHQoZG9jdW1lbnQpIDogZmFsc2U7XG4gICAgICBpZiAob3B0aW9ucy5hdHRyaWJ1dGVzLmluY2x1ZGVzKCd4bWw6bGFuZycpICYmIG9wdGlvbnMuYXR0cmlidXRlcy5pbmNsdWRlcygnbGFuZycpICYmIGhhc1ZhbHVlKHZpcnR1YWxOb2RlLmF0dHIoJ3htbDpsYW5nJykpICYmICFoYXNWYWx1ZSh2aXJ0dWFsTm9kZS5hdHRyKCdsYW5nJykpICYmICF4aHRtbCkge1xuICAgICAgICB0aGlzLmRhdGEoe1xuICAgICAgICAgIG1lc3NhZ2VLZXk6ICdub1hIVE1MJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGhhc0xhbmcgPSBvcHRpb25zLmF0dHJpYnV0ZXMuc29tZShmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBoYXNWYWx1ZSh2aXJ0dWFsTm9kZS5hdHRyKG5hbWUpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFoYXNMYW5nKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogJ25vTGFuZydcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgaGFzX2xhbmdfZXZhbHVhdGVfZGVmYXVsdCA9IGhhc0xhbmdFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBsYW5kbWFya0lzVW5pcXVlRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciByb2xlID0gZ2V0X3JvbGVfZGVmYXVsdChub2RlKTtcbiAgICAgIHZhciBhY2Nlc3NpYmxlVGV4dDIgPSBfYWNjZXNzaWJsZVRleHRWaXJ0dWFsKHZpcnR1YWxOb2RlKTtcbiAgICAgIGFjY2Vzc2libGVUZXh0MiA9IGFjY2Vzc2libGVUZXh0MiA/IGFjY2Vzc2libGVUZXh0Mi50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgIHJvbGU6IHJvbGUsXG4gICAgICAgIGFjY2Vzc2libGVUZXh0OiBhY2Nlc3NpYmxlVGV4dDJcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yZWxhdGVkTm9kZXMoWyBub2RlIF0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBsYW5kbWFya19pc191bmlxdWVfZXZhbHVhdGVfZGVmYXVsdCA9IGxhbmRtYXJrSXNVbmlxdWVFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBsYW5kbWFya0lzVW5pcXVlQWZ0ZXIocmVzdWx0cykge1xuICAgICAgdmFyIHVuaXF1ZUxhbmRtYXJrcyA9IFtdO1xuICAgICAgcmV0dXJuIHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uKGN1cnJlbnRSZXN1bHQpIHtcbiAgICAgICAgdmFyIGZpbmRNYXRjaCA9IGZ1bmN0aW9uIGZpbmRNYXRjaChzb21lUmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRSZXN1bHQuZGF0YS5yb2xlID09PSBzb21lUmVzdWx0LmRhdGEucm9sZSAmJiBjdXJyZW50UmVzdWx0LmRhdGEuYWNjZXNzaWJsZVRleHQgPT09IHNvbWVSZXN1bHQuZGF0YS5hY2Nlc3NpYmxlVGV4dDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG1hdGNoZWRSZXN1bHQgPSB1bmlxdWVMYW5kbWFya3MuZmluZChmaW5kTWF0Y2gpO1xuICAgICAgICBpZiAobWF0Y2hlZFJlc3VsdCkge1xuICAgICAgICAgIG1hdGNoZWRSZXN1bHQucmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgbWF0Y2hlZFJlc3VsdC5yZWxhdGVkTm9kZXMucHVzaChjdXJyZW50UmVzdWx0LnJlbGF0ZWROb2Rlc1swXSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXF1ZUxhbmRtYXJrcy5wdXNoKGN1cnJlbnRSZXN1bHQpO1xuICAgICAgICBjdXJyZW50UmVzdWx0LnJlbGF0ZWROb2RlcyA9IFtdO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgbGFuZG1hcmtfaXNfdW5pcXVlX2FmdGVyX2RlZmF1bHQgPSBsYW5kbWFya0lzVW5pcXVlQWZ0ZXI7XG4gICAgZnVuY3Rpb24gdGl0bGVPbmx5RXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBsYWJlbFRleHQyID0gbGFiZWxfdmlydHVhbF9kZWZhdWx0Mih2aXJ0dWFsTm9kZSk7XG4gICAgICB2YXIgdGl0bGUgPSB0aXRsZV90ZXh0X2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgdmFyIGFyaWFEZXNjcmliZWRCeSA9IHZpcnR1YWxOb2RlLmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKTtcbiAgICAgIHJldHVybiAhbGFiZWxUZXh0MiAmJiAhISh0aXRsZSB8fCBhcmlhRGVzY3JpYmVkQnkpO1xuICAgIH1cbiAgICB2YXIgdGl0bGVfb25seV9ldmFsdWF0ZV9kZWZhdWx0ID0gdGl0bGVPbmx5RXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gbXVsdGlwbGVMYWJlbEV2YWx1YXRlKG5vZGUpIHtcbiAgICAgIHZhciBpZCA9IGVzY2FwZV9zZWxlY3Rvcl9kZWZhdWx0KG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpKTtcbiAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcm9vdCA9IGdldF9yb290X25vZGVfZGVmYXVsdDIobm9kZSk7XG4gICAgICByb290ID0gcm9vdC5kb2N1bWVudEVsZW1lbnQgfHwgcm9vdDtcbiAgICAgIHZhciBsYWJlbHMgPSBBcnJheS5mcm9tKHJvb3QucXVlcnlTZWxlY3RvckFsbCgnbGFiZWxbZm9yPVwiJy5jb25jYXQoaWQsICdcIl0nKSkpO1xuICAgICAgaWYgKGxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgbGFiZWxzID0gbGFiZWxzLmZpbHRlcihmdW5jdGlvbihsYWJlbDMpIHtcbiAgICAgICAgICByZXR1cm4gIV9pc0hpZGRlbkZvckV2ZXJ5b25lKGxhYmVsMyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdMQUJFTCcgJiYgbGFiZWxzLmluZGV4T2YocGFyZW50KSA9PT0gLTEpIHtcbiAgICAgICAgICBsYWJlbHMucHVzaChwYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgdGhpcy5yZWxhdGVkTm9kZXMobGFiZWxzKTtcbiAgICAgIGlmIChsYWJlbHMubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgQVRWaXNpYmxlTGFiZWxzID0gbGFiZWxzLmZpbHRlcihmdW5jdGlvbihsYWJlbDMpIHtcbiAgICAgICAgICByZXR1cm4gX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVycyhsYWJlbDMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKEFUVmlzaWJsZUxhYmVscy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGFiZWxsZWRieSA9IGlkcmVmc19kZWZhdWx0KG5vZGUsICdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgICAgcmV0dXJuICFsYWJlbGxlZGJ5LmluY2x1ZGVzKEFUVmlzaWJsZUxhYmVsc1swXSkgPyB2b2lkIDAgOiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG11bHRpcGxlX2xhYmVsX2V2YWx1YXRlX2RlZmF1bHQgPSBtdWx0aXBsZUxhYmVsRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gaXNTdHJpbmdDb250YWluZWQoY29tcGFyZSwgY29tcGFyZVdpdGgpIHtcbiAgICAgIHZhciBjdXJhdGVkQ29tcGFyZVdpdGggPSBjdXJhdGVTdHJpbmcoY29tcGFyZVdpdGgpO1xuICAgICAgdmFyIGN1cmF0ZWRDb21wYXJlID0gY3VyYXRlU3RyaW5nKGNvbXBhcmUpO1xuICAgICAgaWYgKCFjdXJhdGVkQ29tcGFyZVdpdGggfHwgIWN1cmF0ZWRDb21wYXJlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJhdGVkQ29tcGFyZVdpdGguaW5jbHVkZXMoY3VyYXRlZENvbXBhcmUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjdXJhdGVTdHJpbmcoc3RyKSB7XG4gICAgICB2YXIgbm9Vbmljb2RlU3RyID0gcmVtb3ZlX3VuaWNvZGVfZGVmYXVsdChzdHIsIHtcbiAgICAgICAgZW1vamk6IHRydWUsXG4gICAgICAgIG5vbkJtcDogdHJ1ZSxcbiAgICAgICAgcHVuY3R1YXRpb25zOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzYW5pdGl6ZV9kZWZhdWx0KG5vVW5pY29kZVN0cik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxhYmVsQ29udGVudE5hbWVNaXNtYXRjaEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgX29wdGlvbnMkb2NjdXJyZW5jZVRoO1xuICAgICAgdmFyIHBpeGVsVGhyZXNob2xkID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBpeGVsVGhyZXNob2xkO1xuICAgICAgdmFyIG9jY3VycmVuY2VUaHJlc2hvbGQgPSAoX29wdGlvbnMkb2NjdXJyZW5jZVRoID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9jY3VycmVuY2VUaHJlc2hvbGQpICE9PSBudWxsICYmIF9vcHRpb25zJG9jY3VycmVuY2VUaCAhPT0gdm9pZCAwID8gX29wdGlvbnMkb2NjdXJyZW5jZVRoIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9jY3VyYW5jZVRocmVzaG9sZDtcbiAgICAgIHZhciBhY2NUZXh0ID0gYWNjZXNzaWJsZV90ZXh0X2RlZmF1bHQobm9kZSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciB2aXNpYmxlVGV4dCA9IHNhbml0aXplX2RlZmF1bHQoc3VidHJlZV90ZXh0X2RlZmF1bHQodmlydHVhbE5vZGUsIHtcbiAgICAgICAgc3VidHJlZURlc2NlbmRhbnQ6IHRydWUsXG4gICAgICAgIGlnbm9yZUljb25MaWdhdHVyZTogdHJ1ZSxcbiAgICAgICAgcGl4ZWxUaHJlc2hvbGQ6IHBpeGVsVGhyZXNob2xkLFxuICAgICAgICBvY2N1cnJlbmNlVGhyZXNob2xkOiBvY2N1cnJlbmNlVGhyZXNob2xkXG4gICAgICB9KSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICghdmlzaWJsZVRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNfaHVtYW5faW50ZXJwcmV0YWJsZV9kZWZhdWx0KGFjY1RleHQpIDwgMSB8fCBpc19odW1hbl9pbnRlcnByZXRhYmxlX2RlZmF1bHQodmlzaWJsZVRleHQpIDwgMSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nQ29udGFpbmVkKHZpc2libGVUZXh0LCBhY2NUZXh0KTtcbiAgICB9XG4gICAgdmFyIGxhYmVsX2NvbnRlbnRfbmFtZV9taXNtYXRjaF9ldmFsdWF0ZV9kZWZhdWx0ID0gbGFiZWxDb250ZW50TmFtZU1pc21hdGNoRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gaW1wbGljaXRFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGxhYmVsMyA9IGNsb3Nlc3RfZGVmYXVsdCh2aXJ0dWFsTm9kZSwgJ2xhYmVsJyk7XG4gICAgICAgIGlmIChsYWJlbDMpIHtcbiAgICAgICAgICB2YXIgaW1wbGljaXRMYWJlbCA9IHNhbml0aXplX2RlZmF1bHQoX2FjY2Vzc2libGVUZXh0VmlydHVhbChsYWJlbDMsIHtcbiAgICAgICAgICAgIGluQ29udHJvbENvbnRleHQ6IHRydWUsXG4gICAgICAgICAgICBzdGFydE5vZGU6IHZpcnR1YWxOb2RlXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGlmIChsYWJlbDMuYWN0dWFsTm9kZSkge1xuICAgICAgICAgICAgdGhpcy5yZWxhdGVkTm9kZXMoWyBsYWJlbDMuYWN0dWFsTm9kZSBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICAgIGltcGxpY2l0TGFiZWw6IGltcGxpY2l0TGFiZWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gISFpbXBsaWNpdExhYmVsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gY2F0Y2ggKF91bnVzZWQxMCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaW1wbGljaXRfZXZhbHVhdGVfZGVmYXVsdCA9IGltcGxpY2l0RXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gaGlkZGVuRXhwbGljaXRMYWJlbEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICBpZiAodmlydHVhbE5vZGUuaGFzQXR0cignaWQnKSkge1xuICAgICAgICBpZiAoIXZpcnR1YWxOb2RlLmFjdHVhbE5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciByb290ID0gZ2V0X3Jvb3Rfbm9kZV9kZWZhdWx0Mihub2RlKTtcbiAgICAgICAgdmFyIF9pZDQgPSBlc2NhcGVfc2VsZWN0b3JfZGVmYXVsdChub2RlLmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgICAgIHZhciBsYWJlbDMgPSByb290LnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsW2Zvcj1cIicuY29uY2F0KF9pZDQsICdcIl0nKSk7XG4gICAgICAgIGlmIChsYWJlbDMgJiYgIV9pc1Zpc2libGVUb1NjcmVlblJlYWRlcnMobGFiZWwzKSkge1xuICAgICAgICAgIHZhciBuYW1lO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuYW1lID0gX2FjY2Vzc2libGVUZXh0VmlydHVhbCh2aXJ0dWFsTm9kZSkudHJpbSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKF91bnVzZWQxMSkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGlzTmFtZUVtcHR5ID0gbmFtZSA9PT0gJyc7XG4gICAgICAgICAgcmV0dXJuIGlzTmFtZUVtcHR5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBoaWRkZW5fZXhwbGljaXRfbGFiZWxfZXZhbHVhdGVfZGVmYXVsdCA9IGhpZGRlbkV4cGxpY2l0TGFiZWxFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBoZWxwU2FtZUFzTGFiZWxFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGxhYmVsVGV4dDIgPSBsYWJlbF92aXJ0dWFsX2RlZmF1bHQyKHZpcnR1YWxOb2RlKTtcbiAgICAgIHZhciBjaGVjayA9IG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpO1xuICAgICAgaWYgKCFsYWJlbFRleHQyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghY2hlY2spIHtcbiAgICAgICAgY2hlY2sgPSAnJztcbiAgICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JykpIHtcbiAgICAgICAgICB2YXIgcmVmID0gaWRyZWZzX2RlZmF1bHQobm9kZSwgJ2FyaWEtZGVzY3JpYmVkYnknKTtcbiAgICAgICAgICBjaGVjayA9IHJlZi5tYXAoZnVuY3Rpb24odGhpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGluZyA/IGFjY2Vzc2libGVfdGV4dF9kZWZhdWx0KHRoaW5nKSA6ICcnO1xuICAgICAgICAgIH0pLmpvaW4oJycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2FuaXRpemVfZGVmYXVsdChjaGVjaykgPT09IHNhbml0aXplX2RlZmF1bHQobGFiZWxUZXh0Mik7XG4gICAgfVxuICAgIHZhciBoZWxwX3NhbWVfYXNfbGFiZWxfZXZhbHVhdGVfZGVmYXVsdCA9IGhlbHBTYW1lQXNMYWJlbEV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGV4cGxpY2l0RXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuICAgICAgaWYgKCF2aXJ0dWFsTm9kZS5hdHRyKCdpZCcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdmlydHVhbE5vZGUuYWN0dWFsTm9kZSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdmFyIHJvb3QgPSBnZXRfcm9vdF9ub2RlX2RlZmF1bHQyKHZpcnR1YWxOb2RlLmFjdHVhbE5vZGUpO1xuICAgICAgdmFyIGlkID0gZXNjYXBlX3NlbGVjdG9yX2RlZmF1bHQodmlydHVhbE5vZGUuYXR0cignaWQnKSk7XG4gICAgICB2YXIgbGFiZWxzID0gQXJyYXkuZnJvbShyb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xhYmVsW2Zvcj1cIicuY29uY2F0KGlkLCAnXCJdJykpKTtcbiAgICAgIHRoaXMucmVsYXRlZE5vZGVzKGxhYmVscyk7XG4gICAgICBpZiAoIWxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGxhYmVscy5zb21lKGZ1bmN0aW9uKGxhYmVsMykge1xuICAgICAgICAgIGlmICghX2lzVmlzaWJsZU9uU2NyZWVuKGxhYmVsMykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZXhwbGljaXRMYWJlbCA9IHNhbml0aXplX2RlZmF1bHQoYWNjZXNzaWJsZV90ZXh0X2RlZmF1bHQobGFiZWwzLCB7XG4gICAgICAgICAgICAgIGluQ29udHJvbENvbnRleHQ6IHRydWUsXG4gICAgICAgICAgICAgIHN0YXJ0Tm9kZTogdmlydHVhbE5vZGVcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIF90aGlzNy5kYXRhKHtcbiAgICAgICAgICAgICAgZXhwbGljaXRMYWJlbDogZXhwbGljaXRMYWJlbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gISFleHBsaWNpdExhYmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChfdW51c2VkMTIpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGV4cGxpY2l0X2V2YWx1YXRlX2RlZmF1bHQgPSBleHBsaWNpdEV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGR1cGxpY2F0ZUltZ0xhYmVsRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIGlmIChbICdub25lJywgJ3ByZXNlbnRhdGlvbicgXS5pbmNsdWRlcyhnZXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhcmVudFZOb2RlID0gY2xvc2VzdF9kZWZhdWx0KHZpcnR1YWxOb2RlLCBvcHRpb25zLnBhcmVudFNlbGVjdG9yKTtcbiAgICAgIGlmICghcGFyZW50Vk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHZpc2libGVUZXh0ID0gdmlzaWJsZV92aXJ0dWFsX2RlZmF1bHQocGFyZW50Vk5vZGUsIHRydWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodmlzaWJsZVRleHQgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2aXNpYmxlVGV4dCA9PT0gX2FjY2Vzc2libGVUZXh0VmlydHVhbCh2aXJ0dWFsTm9kZSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgdmFyIGR1cGxpY2F0ZV9pbWdfbGFiZWxfZXZhbHVhdGVfZGVmYXVsdCA9IGR1cGxpY2F0ZUltZ0xhYmVsRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gYWx0U3BhY2VWYWx1ZUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgYWx0ID0gdmlydHVhbE5vZGUuYXR0cignYWx0Jyk7XG4gICAgICB2YXIgaXNPbmx5U3BhY2UgPSAvXlxccyskLztcbiAgICAgIHJldHVybiB0eXBlb2YgYWx0ID09PSAnc3RyaW5nJyAmJiBpc09ubHlTcGFjZS50ZXN0KGFsdCk7XG4gICAgfVxuICAgIHZhciBhbHRfc3BhY2VfdmFsdWVfZXZhbHVhdGVfZGVmYXVsdCA9IGFsdFNwYWNlVmFsdWVFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiB0YWJpbmRleEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgdGFiSW5kZXggPSBwYXJzZV90YWJpbmRleF9kZWZhdWx0KHZpcnR1YWxOb2RlLmF0dHIoJ3RhYmluZGV4JykpO1xuICAgICAgcmV0dXJuIHRhYkluZGV4ID09PSBudWxsIHx8IHRhYkluZGV4IDw9IDA7XG4gICAgfVxuICAgIHZhciB0YWJpbmRleF9ldmFsdWF0ZV9kZWZhdWx0ID0gdGFiaW5kZXhFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBub0ZvY3VzYWJsZUNvbnRlbnRFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgaWYgKCF2aXJ0dWFsTm9kZS5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZvY3VzYWJsZURlc2NlbmRhbnRzMiA9IGdldEZvY3VzYWJsZURlc2NlbmRhbnRzKHZpcnR1YWxOb2RlKTtcbiAgICAgICAgaWYgKCFmb2N1c2FibGVEZXNjZW5kYW50czIubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vdEhpZGRlbkVsZW1lbnRzID0gZm9jdXNhYmxlRGVzY2VuZGFudHMyLmZpbHRlcih1c2VzVW5yZWxpYWJsZUhpZGluZ1N0cmF0ZWd5KTtcbiAgICAgICAgaWYgKG5vdEhpZGRlbkVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLmRhdGEoe1xuICAgICAgICAgICAgbWVzc2FnZUtleTogJ25vdEhpZGRlbidcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnJlbGF0ZWROb2Rlcyhub3RIaWRkZW5FbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZWxhdGVkTm9kZXMoZm9jdXNhYmxlRGVzY2VuZGFudHMyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGNhdGNoIChfdW51c2VkMTMpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Rm9jdXNhYmxlRGVzY2VuZGFudHModk5vZGUpIHtcbiAgICAgIGlmICghdk5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHZOb2RlLnByb3BzLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGV0ZXJtaW5lIGNoaWxkcmVuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJldFZhbCA9IFtdO1xuICAgICAgdk5vZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBpZiAoZ2V0X3JvbGVfdHlwZV9kZWZhdWx0KGNoaWxkKSA9PT0gJ3dpZGdldCcgJiYgX2lzRm9jdXNhYmxlKGNoaWxkKSkge1xuICAgICAgICAgIHJldFZhbC5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXRWYWwucHVzaC5hcHBseShyZXRWYWwsIF90b0NvbnN1bWFibGVBcnJheShnZXRGb2N1c2FibGVEZXNjZW5kYW50cyhjaGlsZCkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmV0VmFsO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1c2VzVW5yZWxpYWJsZUhpZGluZ1N0cmF0ZWd5KHZOb2RlKSB7XG4gICAgICB2YXIgdGFiSW5kZXggPSBwYXJzZV90YWJpbmRleF9kZWZhdWx0KHZOb2RlLmF0dHIoJ3RhYmluZGV4JykpO1xuICAgICAgcmV0dXJuIHRhYkluZGV4ICE9PSBudWxsICYmIHRhYkluZGV4IDwgMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGFuZG1hcmtJc1RvcExldmVsRXZhbHVhdGUobm9kZSkge1xuICAgICAgdmFyIGxhbmRtYXJrcyA9IGdldF9hcmlhX3JvbGVzX2J5X3R5cGVfZGVmYXVsdCgnbGFuZG1hcmsnKTtcbiAgICAgIHZhciBwYXJlbnQgPSBnZXRfY29tcG9zZWRfcGFyZW50X2RlZmF1bHQobm9kZSk7XG4gICAgICB2YXIgbm9kZVJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgcm9sZTogbm9kZVJvbGVcbiAgICAgIH0pO1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICB2YXIgcm9sZSA9IHBhcmVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgICAgICAgaWYgKCFyb2xlICYmIHBhcmVudC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnRk9STScpIHtcbiAgICAgICAgICByb2xlID0gaW1wbGljaXRfcm9sZV9kZWZhdWx0KHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvbGUgJiYgbGFuZG1hcmtzLmluY2x1ZGVzKHJvbGUpICYmICEocm9sZSA9PT0gJ21haW4nICYmIG5vZGVSb2xlID09PSAnY29tcGxlbWVudGFyeScpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IGdldF9jb21wb3NlZF9wYXJlbnRfZGVmYXVsdChwYXJlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBsYW5kbWFya19pc190b3BfbGV2ZWxfZXZhbHVhdGVfZGVmYXVsdCA9IGxhbmRtYXJrSXNUb3BMZXZlbEV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGZyYW1lRm9jdXNhYmxlQ29udGVudEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICBpZiAoIXZpcnR1YWxOb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gIXZpcnR1YWxOb2RlLmNoaWxkcmVuLnNvbWUoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gZm9jdXNhYmxlRGVzY2VuZGFudHMoY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKF91bnVzZWQxNCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmb2N1c2FibGVEZXNjZW5kYW50cyh2Tm9kZSkge1xuICAgICAgaWYgKF9pc0luVGFiT3JkZXIodk5vZGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF2Tm9kZS5jaGlsZHJlbikge1xuICAgICAgICBpZiAodk5vZGUucHJvcHMubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZXRlcm1pbmUgY2hpbGRyZW4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdk5vZGUuY2hpbGRyZW4uc29tZShmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICByZXR1cm4gZm9jdXNhYmxlRGVzY2VuZGFudHMoY2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvY3VzYWJsZU5vdFRhYmJhYmxlRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBlbGVtZW50c1RoYXRDYW5CZURpc2FibGVkID0gWyAnYnV0dG9uJywgJ2ZpZWxkc2V0JywgJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYScgXTtcbiAgICAgIHZhciB0YWJiYWJsZUVsZW1lbnRzID0gdmlydHVhbE5vZGUudGFiYmFibGVFbGVtZW50cztcbiAgICAgIGlmICghdGFiYmFibGVFbGVtZW50cyB8fCAhdGFiYmFibGVFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVsYXRlZE5vZGVzID0gdGFiYmFibGVFbGVtZW50cy5maWx0ZXIoZnVuY3Rpb24odk5vZGUpIHtcbiAgICAgICAgcmV0dXJuICFlbGVtZW50c1RoYXRDYW5CZURpc2FibGVkLmluY2x1ZGVzKHZOb2RlLnByb3BzLm5vZGVOYW1lKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yZWxhdGVkTm9kZXMocmVsYXRlZE5vZGVzLm1hcChmdW5jdGlvbih2Tm9kZSkge1xuICAgICAgICByZXR1cm4gdk5vZGUuYWN0dWFsTm9kZTtcbiAgICAgIH0pKTtcbiAgICAgIGlmIChyZWxhdGVkTm9kZXMubGVuZ3RoID09PSAwIHx8IGlzX21vZGFsX29wZW5fZGVmYXVsdCgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbGF0ZWROb2Rlcy5ldmVyeShmdW5jdGlvbih2Tm9kZSkge1xuICAgICAgICB2YXIgcG9pbnRlckV2ZW50cyA9IHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdwb2ludGVyLWV2ZW50cycpO1xuICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUludCh2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnd2lkdGgnKSk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludCh2Tm9kZS5nZXRDb21wdXRlZFN0eWxlUHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykpO1xuICAgICAgICByZXR1cm4gdk5vZGUuYWN0dWFsTm9kZS5vbmZvY3VzIHx8ICh3aWR0aCA9PT0gMCB8fCBoZWlnaHQgPT09IDApICYmIHBvaW50ZXJFdmVudHMgPT09ICdub25lJztcbiAgICAgIH0pID8gdm9pZCAwIDogZmFsc2U7XG4gICAgfVxuICAgIHZhciBmb2N1c2FibGVfbm90X3RhYmJhYmxlX2V2YWx1YXRlX2RlZmF1bHQgPSBmb2N1c2FibGVOb3RUYWJiYWJsZUV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGZvY3VzYWJsZU5vTmFtZUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICBpZiAoIV9pc0luVGFiT3JkZXIodmlydHVhbE5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAhX2FjY2Vzc2libGVUZXh0VmlydHVhbCh2aXJ0dWFsTm9kZSk7XG4gICAgICB9IGNhdGNoIChfdW51c2VkMTUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGZvY3VzYWJsZV9ub19uYW1lX2V2YWx1YXRlX2RlZmF1bHQgPSBmb2N1c2FibGVOb05hbWVFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBmb2N1c2FibGVNb2RhbE9wZW5FdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHRhYmJhYmxlRWxlbWVudHMgPSB2aXJ0dWFsTm9kZS50YWJiYWJsZUVsZW1lbnRzLm1hcChmdW5jdGlvbihfcmVmMTMwKSB7XG4gICAgICAgIHZhciBhY3R1YWxOb2RlID0gX3JlZjEzMC5hY3R1YWxOb2RlO1xuICAgICAgICByZXR1cm4gYWN0dWFsTm9kZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCF0YWJiYWJsZUVsZW1lbnRzIHx8ICF0YWJiYWJsZUVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc19tb2RhbF9vcGVuX2RlZmF1bHQoKSkge1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2Rlcyh0YWJiYWJsZUVsZW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgZm9jdXNhYmxlX21vZGFsX29wZW5fZXZhbHVhdGVfZGVmYXVsdCA9IGZvY3VzYWJsZU1vZGFsT3BlbkV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGZvY3VzYWJsZUVsZW1lbnRFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgaWYgKHZpcnR1YWxOb2RlLmhhc0F0dHIoJ2NvbnRlbnRlZGl0YWJsZScpICYmIGlzQ29udGVudGVkaXRhYmxlKHZpcnR1YWxOb2RlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfaXNJblRhYk9yZGVyKHZpcnR1YWxOb2RlKTtcbiAgICAgIGZ1bmN0aW9uIGlzQ29udGVudGVkaXRhYmxlKHZOb2RlKSB7XG4gICAgICAgIHZhciBjb250ZW50ZWRpdGFibGUgPSB2Tm9kZS5hdHRyKCdjb250ZW50ZWRpdGFibGUnKTtcbiAgICAgICAgaWYgKGNvbnRlbnRlZGl0YWJsZSA9PT0gJ3RydWUnIHx8IGNvbnRlbnRlZGl0YWJsZSA9PT0gJycpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGVudGVkaXRhYmxlID09PSAnZmFsc2UnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbmNlc3RvciA9IGNsb3Nlc3RfZGVmYXVsdCh2aXJ0dWFsTm9kZS5wYXJlbnQsICdbY29udGVudGVkaXRhYmxlXScpO1xuICAgICAgICBpZiAoIWFuY2VzdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0NvbnRlbnRlZGl0YWJsZShhbmNlc3Rvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBmb2N1c2FibGVfZWxlbWVudF9ldmFsdWF0ZV9kZWZhdWx0ID0gZm9jdXNhYmxlRWxlbWVudEV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGZvY3VzYWJsZURpc2FibGVkRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBlbGVtZW50c1RoYXRDYW5CZURpc2FibGVkID0gWyAnYnV0dG9uJywgJ2ZpZWxkc2V0JywgJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYScgXTtcbiAgICAgIHZhciB0YWJiYWJsZUVsZW1lbnRzID0gdmlydHVhbE5vZGUudGFiYmFibGVFbGVtZW50cztcbiAgICAgIGlmICghdGFiYmFibGVFbGVtZW50cyB8fCAhdGFiYmFibGVFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVsYXRlZE5vZGVzID0gdGFiYmFibGVFbGVtZW50cy5maWx0ZXIoZnVuY3Rpb24odk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzVGhhdENhbkJlRGlzYWJsZWQuaW5jbHVkZXModk5vZGUucHJvcHMubm9kZU5hbWUpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlbGF0ZWROb2RlcyhyZWxhdGVkTm9kZXMubWFwKGZ1bmN0aW9uKHZOb2RlKSB7XG4gICAgICAgIHJldHVybiB2Tm9kZS5hY3R1YWxOb2RlO1xuICAgICAgfSkpO1xuICAgICAgaWYgKHJlbGF0ZWROb2Rlcy5sZW5ndGggPT09IDAgfHwgaXNfbW9kYWxfb3Blbl9kZWZhdWx0KCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVsYXRlZE5vZGVzLmV2ZXJ5KGZ1bmN0aW9uKHZOb2RlKSB7XG4gICAgICAgIHZhciBwb2ludGVyRXZlbnRzID0gdk5vZGUuZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5VmFsdWUoJ3BvaW50ZXItZXZlbnRzJyk7XG4gICAgICAgIHZhciB3aWR0aCA9IHBhcnNlSW50KHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KHZOb2RlLmdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSk7XG4gICAgICAgIHJldHVybiB2Tm9kZS5hY3R1YWxOb2RlLm9uZm9jdXMgfHwgKHdpZHRoID09PSAwIHx8IGhlaWdodCA9PT0gMCkgJiYgcG9pbnRlckV2ZW50cyA9PT0gJ25vbmUnO1xuICAgICAgfSkgPyB2b2lkIDAgOiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGZvY3VzYWJsZV9kaXNhYmxlZF9ldmFsdWF0ZV9kZWZhdWx0ID0gZm9jdXNhYmxlRGlzYWJsZWRFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBmb2N1c2FibGVDb250ZW50RXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciB0YWJiYWJsZUVsZW1lbnRzID0gdmlydHVhbE5vZGUudGFiYmFibGVFbGVtZW50cztcbiAgICAgIGlmICghdGFiYmFibGVFbGVtZW50cykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFiYmFibGVDb250ZW50RWxlbWVudHMgPSB0YWJiYWJsZUVsZW1lbnRzLmZpbHRlcihmdW5jdGlvbihlbCkge1xuICAgICAgICByZXR1cm4gZWwgIT09IHZpcnR1YWxOb2RlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGFiYmFibGVDb250ZW50RWxlbWVudHMubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgdmFyIGZvY3VzYWJsZV9jb250ZW50X2V2YWx1YXRlX2RlZmF1bHQgPSBmb2N1c2FibGVDb250ZW50RXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gYWNjZXNza2V5c0V2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZOb2RlKSB7XG4gICAgICBpZiAoIV9pc0hpZGRlbkZvckV2ZXJ5b25lKHZOb2RlKSkge1xuICAgICAgICB0aGlzLmRhdGEodk5vZGUuYXR0cignYWNjZXNza2V5JykpO1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhbIG5vZGUgXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGFjY2Vzc2tleXNfZXZhbHVhdGVfZGVmYXVsdCA9IGFjY2Vzc2tleXNFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBhY2Nlc3NrZXlzQWZ0ZXIocmVzdWx0cykge1xuICAgICAgdmFyIHNlZW4gPSB7fTtcbiAgICAgIHJldHVybiByZXN1bHRzLmZpbHRlcihmdW5jdGlvbihyKSB7XG4gICAgICAgIGlmICghci5kYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSByLmRhdGEudG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKCFzZWVuW2tleV0pIHtcbiAgICAgICAgICBzZWVuW2tleV0gPSByO1xuICAgICAgICAgIHIucmVsYXRlZE5vZGVzID0gW107XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc2VlbltrZXldLnJlbGF0ZWROb2Rlcy5wdXNoKHIucmVsYXRlZE5vZGVzWzBdKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgci5yZXN1bHQgPSAhIXIucmVsYXRlZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGFjY2Vzc2tleXNfYWZ0ZXJfZGVmYXVsdCA9IGFjY2Vzc2tleXNBZnRlcjtcbiAgICBmdW5jdGlvbiBwYWdlTm9EdXBsaWNhdGVFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnNlbGVjdG9yIHx8IHR5cGVvZiBvcHRpb25zLnNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYWdlLW5vLWR1cGxpY2F0ZSByZXF1aXJlcyBvcHRpb25zLnNlbGVjdG9yIHRvIGJlIGEgc3RyaW5nJyk7XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gJ3BhZ2Utbm8tZHVwbGljYXRlOycgKyBvcHRpb25zLnNlbGVjdG9yO1xuICAgICAgaWYgKGNhY2hlX2RlZmF1bHQuZ2V0KGtleSkpIHtcbiAgICAgICAgdGhpcy5kYXRhKCdpZ25vcmVkJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhY2hlX2RlZmF1bHQuc2V0KGtleSwgdHJ1ZSk7XG4gICAgICB2YXIgZWxtcyA9IHF1ZXJ5X3NlbGVjdG9yX2FsbF9maWx0ZXJfZGVmYXVsdChheGUuX3RyZWVbMF0sIG9wdGlvbnMuc2VsZWN0b3IsIGZ1bmN0aW9uKGVsbSkge1xuICAgICAgICByZXR1cm4gX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVycyhlbG0pO1xuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMubmF0aXZlU2NvcGVGaWx0ZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsbXMgPSBlbG1zLmZpbHRlcihmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgICByZXR1cm4gZWxtLmFjdHVhbE5vZGUuaGFzQXR0cmlidXRlKCdyb2xlJykgfHwgIWZpbmRfdXBfdmlydHVhbF9kZWZhdWx0KGVsbSwgb3B0aW9ucy5uYXRpdmVTY29wZUZpbHRlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnJvbGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsbXMgPSBlbG1zLmZpbHRlcihmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgICByZXR1cm4gZ2V0X3JvbGVfZGVmYXVsdChlbG0pID09PSBvcHRpb25zLnJvbGU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5yZWxhdGVkTm9kZXMoZWxtcy5maWx0ZXIoZnVuY3Rpb24oZWxtKSB7XG4gICAgICAgIHJldHVybiBlbG0gIT09IHZpcnR1YWxOb2RlO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uKGVsbSkge1xuICAgICAgICByZXR1cm4gZWxtLmFjdHVhbE5vZGU7XG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gZWxtcy5sZW5ndGggPD0gMTtcbiAgICB9XG4gICAgdmFyIHBhZ2Vfbm9fZHVwbGljYXRlX2V2YWx1YXRlX2RlZmF1bHQgPSBwYWdlTm9EdXBsaWNhdGVFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBwYWdlTm9EdXBsaWNhdGVBZnRlcihyZXN1bHRzKSB7XG4gICAgICByZXR1cm4gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24oY2hlY2tSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrUmVzdWx0LmRhdGEgIT09ICdpZ25vcmVkJztcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgcGFnZV9ub19kdXBsaWNhdGVfYWZ0ZXJfZGVmYXVsdCA9IHBhZ2VOb0R1cGxpY2F0ZUFmdGVyO1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNEZWZpbml0aW9uRXZhbHVhdGUoXywgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzX2RlZmF1bHQyKHZpcnR1YWxOb2RlLCBvcHRpb25zLm1hdGNoZXIpO1xuICAgIH1cbiAgICB2YXIgbWF0Y2hlc19kZWZpbml0aW9uX2V2YWx1YXRlX2RlZmF1bHQgPSBtYXRjaGVzRGVmaW5pdGlvbkV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGhhc1RleHRDb250ZW50RXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZV9kZWZhdWx0KHN1YnRyZWVfdGV4dF9kZWZhdWx0KHZpcnR1YWxOb2RlKSkgIT09ICcnO1xuICAgICAgfSBjYXRjaCAoX3VudXNlZDE2KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc0Rlc2NlbmRhbnQobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5zZWxlY3RvciB8fCB0eXBlb2Ygb3B0aW9ucy5zZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaGFzLWRlc2NlbmRhbnQgcmVxdWlyZXMgb3B0aW9ucy5zZWxlY3RvciB0byBiZSBhIHN0cmluZycpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMucGFzc0Zvck1vZGFsICYmIGlzX21vZGFsX29wZW5fZGVmYXVsdCgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoaW5nRWxtcyA9IHF1ZXJ5X3NlbGVjdG9yX2FsbF9maWx0ZXJfZGVmYXVsdCh2aXJ0dWFsTm9kZSwgb3B0aW9ucy5zZWxlY3RvciwgZnVuY3Rpb24odk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIF9pc1Zpc2libGVUb1NjcmVlblJlYWRlcnModk5vZGUpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlbGF0ZWROb2RlcyhtYXRjaGluZ0VsbXMubWFwKGZ1bmN0aW9uKHZOb2RlKSB7XG4gICAgICAgIHJldHVybiB2Tm9kZS5hY3R1YWxOb2RlO1xuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG1hdGNoaW5nRWxtcy5sZW5ndGggPiAwO1xuICAgIH1cbiAgICB2YXIgaGFzX2Rlc2NlbmRhbnRfZXZhbHVhdGVfZGVmYXVsdCA9IGhhc0Rlc2NlbmRhbnQ7XG4gICAgZnVuY3Rpb24gcGFnZUhhc0VsbUFmdGVyKHJlc3VsdHMpIHtcbiAgICAgIHZhciBlbG1Vc2VkQW55d2hlcmUgPSByZXN1bHRzLnNvbWUoZnVuY3Rpb24oZnJhbWVSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIGZyYW1lUmVzdWx0LnJlc3VsdCA9PT0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGVsbVVzZWRBbnl3aGVyZSkge1xuICAgICAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0LnJlc3VsdCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIHZhciBoYXNfZGVzY2VuZGFudF9hZnRlcl9kZWZhdWx0ID0gcGFnZUhhc0VsbUFmdGVyO1xuICAgIGZ1bmN0aW9uIGF0dHJOb25TcGFjZUNvbnRlbnRFdmFsdWF0ZShub2RlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgdk5vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmICghb3B0aW9ucy5hdHRyaWJ1dGUgfHwgdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdHRyLW5vbi1zcGFjZS1jb250ZW50IHJlcXVpcmVzIG9wdGlvbnMuYXR0cmlidXRlIHRvIGJlIGEgc3RyaW5nJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXZOb2RlLmhhc0F0dHIob3B0aW9ucy5hdHRyaWJ1dGUpKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogJ25vQXR0cidcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBhdHRyaWJ1dGUgPSB2Tm9kZS5hdHRyKG9wdGlvbnMuYXR0cmlidXRlKTtcbiAgICAgIHZhciBhdHRyaWJ1dGVJc0VtcHR5ID0gIXNhbml0aXplX2RlZmF1bHQoYXR0cmlidXRlKTtcbiAgICAgIGlmIChhdHRyaWJ1dGVJc0VtcHR5KSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogJ2VtcHR5QXR0cidcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgYXR0cl9ub25fc3BhY2VfY29udGVudF9ldmFsdWF0ZV9kZWZhdWx0ID0gYXR0ck5vblNwYWNlQ29udGVudEV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGF1dG9jb21wbGV0ZVZhbGlkRXZhbHVhdGUoX25vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgYXV0b2NvbXBsZXRlMiA9IHZpcnR1YWxOb2RlLmF0dHIoJ2F1dG9jb21wbGV0ZScpIHx8ICcnO1xuICAgICAgcmV0dXJuIGlzX3ZhbGlkX2F1dG9jb21wbGV0ZV9kZWZhdWx0KGF1dG9jb21wbGV0ZTIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICB2YXIgYXV0b2NvbXBsZXRlX3ZhbGlkX2V2YWx1YXRlX2RlZmF1bHQgPSBhdXRvY29tcGxldGVWYWxpZEV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGF1dG9jb21wbGV0ZUFwcHJvcHJpYXRlRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIGlmICh2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlTmFtZSAhPT0gJ2lucHV0Jykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBudW1iZXIgPSBbICd0ZXh0JywgJ3NlYXJjaCcsICdudW1iZXInLCAndGVsJyBdO1xuICAgICAgdmFyIHVybCA9IFsgJ3RleHQnLCAnc2VhcmNoJywgJ3VybCcgXTtcbiAgICAgIHZhciBhbGxvd2VkVHlwZXNNYXAgPSB7XG4gICAgICAgIGJkYXk6IFsgJ3RleHQnLCAnc2VhcmNoJywgJ2RhdGUnIF0sXG4gICAgICAgIGVtYWlsOiBbICd0ZXh0JywgJ3NlYXJjaCcsICdlbWFpbCcgXSxcbiAgICAgICAgdXNlcm5hbWU6IFsgJ3RleHQnLCAnc2VhcmNoJywgJ2VtYWlsJyBdLFxuICAgICAgICAnc3RyZWV0LWFkZHJlc3MnOiBbICd0ZXh0JyBdLFxuICAgICAgICB0ZWw6IFsgJ3RleHQnLCAnc2VhcmNoJywgJ3RlbCcgXSxcbiAgICAgICAgJ3RlbC1jb3VudHJ5LWNvZGUnOiBbICd0ZXh0JywgJ3NlYXJjaCcsICd0ZWwnIF0sXG4gICAgICAgICd0ZWwtbmF0aW9uYWwnOiBbICd0ZXh0JywgJ3NlYXJjaCcsICd0ZWwnIF0sXG4gICAgICAgICd0ZWwtYXJlYS1jb2RlJzogWyAndGV4dCcsICdzZWFyY2gnLCAndGVsJyBdLFxuICAgICAgICAndGVsLWxvY2FsJzogWyAndGV4dCcsICdzZWFyY2gnLCAndGVsJyBdLFxuICAgICAgICAndGVsLWxvY2FsLXByZWZpeCc6IFsgJ3RleHQnLCAnc2VhcmNoJywgJ3RlbCcgXSxcbiAgICAgICAgJ3RlbC1sb2NhbC1zdWZmaXgnOiBbICd0ZXh0JywgJ3NlYXJjaCcsICd0ZWwnIF0sXG4gICAgICAgICd0ZWwtZXh0ZW5zaW9uJzogWyAndGV4dCcsICdzZWFyY2gnLCAndGVsJyBdLFxuICAgICAgICAnY2MtbnVtYmVyJzogbnVtYmVyLFxuICAgICAgICAnY2MtZXhwJzogWyAndGV4dCcsICdzZWFyY2gnLCAnbW9udGgnLCAndGVsJyBdLFxuICAgICAgICAnY2MtZXhwLW1vbnRoJzogbnVtYmVyLFxuICAgICAgICAnY2MtZXhwLXllYXInOiBudW1iZXIsXG4gICAgICAgICdjYy1jc2MnOiBudW1iZXIsXG4gICAgICAgICd0cmFuc2FjdGlvbi1hbW91bnQnOiBudW1iZXIsXG4gICAgICAgICdiZGF5LWRheSc6IG51bWJlcixcbiAgICAgICAgJ2JkYXktbW9udGgnOiBudW1iZXIsXG4gICAgICAgICdiZGF5LXllYXInOiBudW1iZXIsXG4gICAgICAgICduZXctcGFzc3dvcmQnOiBbICd0ZXh0JywgJ3NlYXJjaCcsICdwYXNzd29yZCcgXSxcbiAgICAgICAgJ2N1cnJlbnQtcGFzc3dvcmQnOiBbICd0ZXh0JywgJ3NlYXJjaCcsICdwYXNzd29yZCcgXSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHBob3RvOiB1cmwsXG4gICAgICAgIGltcHA6IHVybFxuICAgICAgfTtcbiAgICAgIGlmIChfdHlwZW9mKG9wdGlvbnMpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmICghYWxsb3dlZFR5cGVzTWFwW2tleV0pIHtcbiAgICAgICAgICAgIGFsbG93ZWRUeXBlc01hcFtrZXldID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIGFsbG93ZWRUeXBlc01hcFtrZXldID0gYWxsb3dlZFR5cGVzTWFwW2tleV0uY29uY2F0KG9wdGlvbnNba2V5XSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIGF1dG9jb21wbGV0ZUF0dHIgPSB2aXJ0dWFsTm9kZS5hdHRyKCdhdXRvY29tcGxldGUnKTtcbiAgICAgIHZhciBhdXRvY29tcGxldGVUZXJtcyA9IGF1dG9jb21wbGV0ZUF0dHIuc3BsaXQoL1xccysvZykubWFwKGZ1bmN0aW9uKHRlcm0pIHtcbiAgICAgICAgcmV0dXJuIHRlcm0udG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHB1cnBvc2VUZXJtID0gYXV0b2NvbXBsZXRlVGVybXNbYXV0b2NvbXBsZXRlVGVybXMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoX2F1dG9jb21wbGV0ZS5zdGF0ZVRlcm1zLmluY2x1ZGVzKHB1cnBvc2VUZXJtKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBhbGxvd2VkVHlwZXMgPSBhbGxvd2VkVHlwZXNNYXBbcHVycG9zZVRlcm1dO1xuICAgICAgdmFyIHR5cGUyID0gdmlydHVhbE5vZGUuaGFzQXR0cigndHlwZScpID8gc2FuaXRpemVfZGVmYXVsdCh2aXJ0dWFsTm9kZS5hdHRyKCd0eXBlJykpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG4gICAgICB0eXBlMiA9IHZhbGlkX2lucHV0X3R5cGVfZGVmYXVsdCgpLmluY2x1ZGVzKHR5cGUyKSA/IHR5cGUyIDogJ3RleHQnO1xuICAgICAgaWYgKHR5cGVvZiBhbGxvd2VkVHlwZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB0eXBlMiA9PT0gJ3RleHQnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFsbG93ZWRUeXBlcy5pbmNsdWRlcyh0eXBlMik7XG4gICAgfVxuICAgIHZhciBhdXRvY29tcGxldGVfYXBwcm9wcmlhdGVfZXZhbHVhdGVfZGVmYXVsdCA9IGF1dG9jb21wbGV0ZUFwcHJvcHJpYXRlRXZhbHVhdGU7XG4gICAgdmFyIGJsb2NrTGlrZTIgPSBbICdibG9jaycsICdsaXN0LWl0ZW0nLCAndGFibGUnLCAnZmxleCcsICdncmlkJywgJ2lubGluZS1ibG9jaycgXTtcbiAgICBmdW5jdGlvbiBsaW5rSW5UZXh0QmxvY2tTdHlsZUV2YWx1YXRlKG5vZGUpIHtcbiAgICAgIGlmIChpc0Jsb2NrMihub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGFyZW50QmxvY2sgPSBnZXRfY29tcG9zZWRfcGFyZW50X2RlZmF1bHQobm9kZSk7XG4gICAgICB3aGlsZSAocGFyZW50QmxvY2sgJiYgcGFyZW50QmxvY2subm9kZVR5cGUgPT09IDEgJiYgIWlzQmxvY2syKHBhcmVudEJsb2NrKSkge1xuICAgICAgICBwYXJlbnRCbG9jayA9IGdldF9jb21wb3NlZF9wYXJlbnRfZGVmYXVsdChwYXJlbnRCbG9jayk7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcmVudEJsb2NrKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbGF0ZWROb2RlcyhbIHBhcmVudEJsb2NrIF0pO1xuICAgICAgaWYgKGVsZW1lbnRfaXNfZGlzdGluY3RfZGVmYXVsdChub2RlLCBwYXJlbnRCbG9jaykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaGFzUHNldWRvQ29udGVudChub2RlKSkge1xuICAgICAgICB0aGlzLmRhdGEoe1xuICAgICAgICAgIG1lc3NhZ2VLZXk6ICdwc2V1ZG9Db250ZW50J1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNCbG9jazIoZWxtKSB7XG4gICAgICB2YXIgZGlzcGxheTIgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbG0pLmdldFByb3BlcnR5VmFsdWUoJ2Rpc3BsYXknKTtcbiAgICAgIHJldHVybiBibG9ja0xpa2UyLmluZGV4T2YoZGlzcGxheTIpICE9PSAtMSB8fCBkaXNwbGF5Mi5zdWJzdHIoMCwgNikgPT09ICd0YWJsZS0nO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNQc2V1ZG9Db250ZW50KG5vZGUpIHtcbiAgICAgIGZvciAodmFyIF9pNDEgPSAwLCBfYXJyMyA9IFsgJ2JlZm9yZScsICdhZnRlcicgXTsgX2k0MSA8IF9hcnIzLmxlbmd0aDsgX2k0MSsrKSB7XG4gICAgICAgIHZhciBwc2V1ZG8gPSBfYXJyM1tfaTQxXTtcbiAgICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgJzonLmNvbmNhdChwc2V1ZG8pKTtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50Jyk7XG4gICAgICAgIGlmIChjb250ZW50ICE9PSAnbm9uZScpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRDb250cmFzdDIoY29sb3IxLCBjb2xvcjIpIHtcbiAgICAgIHZhciBjMWx1bSA9IGNvbG9yMS5nZXRSZWxhdGl2ZUx1bWluYW5jZSgpO1xuICAgICAgdmFyIGMybHVtID0gY29sb3IyLmdldFJlbGF0aXZlTHVtaW5hbmNlKCk7XG4gICAgICByZXR1cm4gKE1hdGgubWF4KGMxbHVtLCBjMmx1bSkgKyAuMDUpIC8gKE1hdGgubWluKGMxbHVtLCBjMmx1bSkgKyAuMDUpO1xuICAgIH1cbiAgICB2YXIgYmxvY2tMaWtlMyA9IFsgJ2Jsb2NrJywgJ2xpc3QtaXRlbScsICd0YWJsZScsICdmbGV4JywgJ2dyaWQnLCAnaW5saW5lLWJsb2NrJyBdO1xuICAgIGZ1bmN0aW9uIGlzQmxvY2szKGVsbSkge1xuICAgICAgdmFyIGRpc3BsYXkyID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxtKS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5Jyk7XG4gICAgICByZXR1cm4gYmxvY2tMaWtlMy5pbmRleE9mKGRpc3BsYXkyKSAhPT0gLTEgfHwgZGlzcGxheTIuc3Vic3RyKDAsIDYpID09PSAndGFibGUtJztcbiAgICB9XG4gICAgZnVuY3Rpb24gbGlua0luVGV4dEJsb2NrRXZhbHVhdGUobm9kZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHJlcXVpcmVkQ29udHJhc3RSYXRpbyA9IG9wdGlvbnMucmVxdWlyZWRDb250cmFzdFJhdGlvLCBhbGxvd1NhbWVDb2xvciA9IG9wdGlvbnMuYWxsb3dTYW1lQ29sb3I7XG4gICAgICBpZiAoaXNCbG9jazMobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhcmVudEJsb2NrID0gZ2V0X2NvbXBvc2VkX3BhcmVudF9kZWZhdWx0KG5vZGUpO1xuICAgICAgd2hpbGUgKHBhcmVudEJsb2NrICYmIHBhcmVudEJsb2NrLm5vZGVUeXBlID09PSAxICYmICFpc0Jsb2NrMyhwYXJlbnRCbG9jaykpIHtcbiAgICAgICAgcGFyZW50QmxvY2sgPSBnZXRfY29tcG9zZWRfcGFyZW50X2RlZmF1bHQocGFyZW50QmxvY2spO1xuICAgICAgfVxuICAgICAgaWYgKCFwYXJlbnRCbG9jaykge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdGhpcy5yZWxhdGVkTm9kZXMoWyBwYXJlbnRCbG9jayBdKTtcbiAgICAgIHZhciBub2RlQ29sb3IgPSBfZ2V0Rm9yZWdyb3VuZENvbG9yKG5vZGUpO1xuICAgICAgdmFyIHBhcmVudENvbG9yID0gX2dldEZvcmVncm91bmRDb2xvcihwYXJlbnRCbG9jayk7XG4gICAgICB2YXIgbm9kZUJhY2tncm91bmRDb2xvciA9IF9nZXRCYWNrZ3JvdW5kQ29sb3IyKG5vZGUpO1xuICAgICAgdmFyIHBhcmVudEJhY2tncm91bmRDb2xvciA9IF9nZXRCYWNrZ3JvdW5kQ29sb3IyKHBhcmVudEJsb2NrKTtcbiAgICAgIHZhciB0ZXh0Q29udHJhc3QgPSBub2RlQ29sb3IgJiYgcGFyZW50Q29sb3IgPyBnZXRDb250cmFzdDIobm9kZUNvbG9yLCBwYXJlbnRDb2xvcikgOiB2b2lkIDA7XG4gICAgICBpZiAodGV4dENvbnRyYXN0KSB7XG4gICAgICAgIHRleHRDb250cmFzdCA9IE1hdGguZmxvb3IodGV4dENvbnRyYXN0ICogMTAwKSAvIDEwMDtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0Q29udHJhc3QgJiYgdGV4dENvbnRyYXN0ID49IHJlcXVpcmVkQ29udHJhc3RSYXRpbykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBiYWNrZ3JvdW5kQ29udHJhc3QgPSBub2RlQmFja2dyb3VuZENvbG9yICYmIHBhcmVudEJhY2tncm91bmRDb2xvciA/IGdldENvbnRyYXN0Mihub2RlQmFja2dyb3VuZENvbG9yLCBwYXJlbnRCYWNrZ3JvdW5kQ29sb3IpIDogdm9pZCAwO1xuICAgICAgaWYgKGJhY2tncm91bmRDb250cmFzdCkge1xuICAgICAgICBiYWNrZ3JvdW5kQ29udHJhc3QgPSBNYXRoLmZsb29yKGJhY2tncm91bmRDb250cmFzdCAqIDEwMCkgLyAxMDA7XG4gICAgICB9XG4gICAgICBpZiAoYmFja2dyb3VuZENvbnRyYXN0ICYmIGJhY2tncm91bmRDb250cmFzdCA+PSByZXF1aXJlZENvbnRyYXN0UmF0aW8pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWJhY2tncm91bmRDb250cmFzdCkge1xuICAgICAgICB2YXIgX2luY29tcGxldGVfZGF0YV9kZWZhO1xuICAgICAgICB2YXIgcmVhc29uID0gKF9pbmNvbXBsZXRlX2RhdGFfZGVmYSA9IGluY29tcGxldGVfZGF0YV9kZWZhdWx0LmdldCgnYmdDb2xvcicpKSAhPT0gbnVsbCAmJiBfaW5jb21wbGV0ZV9kYXRhX2RlZmEgIT09IHZvaWQgMCA/IF9pbmNvbXBsZXRlX2RhdGFfZGVmYSA6ICdiZ0NvbnRyYXN0JztcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiByZWFzb25cbiAgICAgICAgfSk7XG4gICAgICAgIGluY29tcGxldGVfZGF0YV9kZWZhdWx0LmNsZWFyKCk7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAoIXRleHRDb250cmFzdCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKGFsbG93U2FtZUNvbG9yICYmIHRleHRDb250cmFzdCA9PT0gMSAmJiBiYWNrZ3JvdW5kQ29udHJhc3QgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGV4dENvbnRyYXN0ID09PSAxICYmIGJhY2tncm91bmRDb250cmFzdCA+IDEpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnYmdDb250cmFzdCcsXG4gICAgICAgICAgY29udHJhc3RSYXRpbzogYmFja2dyb3VuZENvbnRyYXN0LFxuICAgICAgICAgIHJlcXVpcmVkQ29udHJhc3RSYXRpbzogcmVxdWlyZWRDb250cmFzdFJhdGlvLFxuICAgICAgICAgIG5vZGVCYWNrZ3JvdW5kQ29sb3I6IG5vZGVCYWNrZ3JvdW5kQ29sb3IgPyBub2RlQmFja2dyb3VuZENvbG9yLnRvSGV4U3RyaW5nKCkgOiB2b2lkIDAsXG4gICAgICAgICAgcGFyZW50QmFja2dyb3VuZENvbG9yOiBwYXJlbnRCYWNrZ3JvdW5kQ29sb3IgPyBwYXJlbnRCYWNrZ3JvdW5kQ29sb3IudG9IZXhTdHJpbmcoKSA6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgbWVzc2FnZUtleTogJ2ZnQ29udHJhc3QnLFxuICAgICAgICBjb250cmFzdFJhdGlvOiB0ZXh0Q29udHJhc3QsXG4gICAgICAgIHJlcXVpcmVkQ29udHJhc3RSYXRpbzogcmVxdWlyZWRDb250cmFzdFJhdGlvLFxuICAgICAgICBub2RlQ29sb3I6IG5vZGVDb2xvciA/IG5vZGVDb2xvci50b0hleFN0cmluZygpIDogdm9pZCAwLFxuICAgICAgICBwYXJlbnRDb2xvcjogcGFyZW50Q29sb3IgPyBwYXJlbnRDb2xvci50b0hleFN0cmluZygpIDogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGxpbmtfaW5fdGV4dF9ibG9ja19ldmFsdWF0ZV9kZWZhdWx0ID0gbGlua0luVGV4dEJsb2NrRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gY29sb3JDb250cmFzdEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgaWdub3JlVW5pY29kZSA9IG9wdGlvbnMuaWdub3JlVW5pY29kZSwgaWdub3JlTGVuZ3RoID0gb3B0aW9ucy5pZ25vcmVMZW5ndGgsIGlnbm9yZVBzZXVkbyA9IG9wdGlvbnMuaWdub3JlUHNldWRvLCBib2xkVmFsdWUgPSBvcHRpb25zLmJvbGRWYWx1ZSwgYm9sZFRleHRQdCA9IG9wdGlvbnMuYm9sZFRleHRQdCwgbGFyZ2VUZXh0UHQgPSBvcHRpb25zLmxhcmdlVGV4dFB0LCBjb250cmFzdFJhdGlvID0gb3B0aW9ucy5jb250cmFzdFJhdGlvLCBzaGFkb3dPdXRsaW5lRW1NYXggPSBvcHRpb25zLnNoYWRvd091dGxpbmVFbU1heCwgcHNldWRvU2l6ZVRocmVzaG9sZCA9IG9wdGlvbnMucHNldWRvU2l6ZVRocmVzaG9sZDtcbiAgICAgIGlmICghX2lzVmlzaWJsZU9uU2NyZWVuKG5vZGUpKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogJ2hpZGRlbidcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHZpc2libGVUZXh0ID0gdmlzaWJsZV92aXJ0dWFsX2RlZmF1bHQodmlydHVhbE5vZGUsIGZhbHNlLCB0cnVlKTtcbiAgICAgIGlmIChpZ25vcmVVbmljb2RlICYmIHRleHRJc0Vtb2ppcyh2aXNpYmxlVGV4dCkpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnbm9uQm1wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHZhciBub2RlU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgIHZhciBmb250U2l6ZSA9IHBhcnNlRmxvYXQobm9kZVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpKTtcbiAgICAgIHZhciBmb250V2VpZ2h0ID0gbm9kZVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtd2VpZ2h0Jyk7XG4gICAgICB2YXIgYm9sZCA9IHBhcnNlRmxvYXQoZm9udFdlaWdodCkgPj0gYm9sZFZhbHVlIHx8IGZvbnRXZWlnaHQgPT09ICdib2xkJztcbiAgICAgIHZhciBwdFNpemUgPSBNYXRoLmNlaWwoZm9udFNpemUgKiA3MikgLyA5NjtcbiAgICAgIHZhciBpc1NtYWxsRm9udCA9IGJvbGQgJiYgcHRTaXplIDwgYm9sZFRleHRQdCB8fCAhYm9sZCAmJiBwdFNpemUgPCBsYXJnZVRleHRQdDtcbiAgICAgIHZhciBfcmVmMTMxID0gaXNTbWFsbEZvbnQgPyBjb250cmFzdFJhdGlvLm5vcm1hbCA6IGNvbnRyYXN0UmF0aW8ubGFyZ2UsIGV4cGVjdGVkID0gX3JlZjEzMS5leHBlY3RlZCwgbWluVGhyZXNob2xkID0gX3JlZjEzMS5taW5UaHJlc2hvbGQsIG1heFRocmVzaG9sZCA9IF9yZWYxMzEubWF4VGhyZXNob2xkO1xuICAgICAgdmFyIHBzZXVkb0VsbSA9IGZpbmRQc2V1ZG9FbGVtZW50KHZpcnR1YWxOb2RlLCB7XG4gICAgICAgIGlnbm9yZVBzZXVkbzogaWdub3JlUHNldWRvLFxuICAgICAgICBwc2V1ZG9TaXplVGhyZXNob2xkOiBwc2V1ZG9TaXplVGhyZXNob2xkXG4gICAgICB9KTtcbiAgICAgIGlmIChwc2V1ZG9FbG0pIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBmb250U2l6ZTogJycuY29uY2F0KChmb250U2l6ZSAqIDcyIC8gOTYpLnRvRml4ZWQoMSksICdwdCAoJykuY29uY2F0KGZvbnRTaXplLCAncHgpJyksXG4gICAgICAgICAgZm9udFdlaWdodDogYm9sZCA/ICdib2xkJyA6ICdub3JtYWwnLFxuICAgICAgICAgIG1lc3NhZ2VLZXk6ICdwc2V1ZG9Db250ZW50JyxcbiAgICAgICAgICBleHBlY3RlZENvbnRyYXN0UmF0aW86IGV4cGVjdGVkICsgJzoxJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWxhdGVkTm9kZXMocHNldWRvRWxtLmFjdHVhbE5vZGUpO1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdmFyIHNoYWRvd0NvbG9ycyA9IF9nZXRUZXh0U2hhZG93Q29sb3JzKG5vZGUsIHtcbiAgICAgICAgbWluUmF0aW86IC4wMDEsXG4gICAgICAgIG1heFJhdGlvOiBzaGFkb3dPdXRsaW5lRW1NYXhcbiAgICAgIH0pO1xuICAgICAgaWYgKHNoYWRvd0NvbG9ycyA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmRhdGEoe1xuICAgICAgICAgIG1lc3NhZ2VLZXk6ICdjb21wbGV4VGV4dFNoYWRvd3MnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdmFyIGJnTm9kZXMgPSBbXTtcbiAgICAgIHZhciBiZ0NvbG9yID0gX2dldEJhY2tncm91bmRDb2xvcjIobm9kZSwgYmdOb2Rlcywgc2hhZG93T3V0bGluZUVtTWF4KTtcbiAgICAgIHZhciBmZ0NvbG9yID0gX2dldEZvcmVncm91bmRDb2xvcihub2RlLCBmYWxzZSwgYmdDb2xvciwgb3B0aW9ucyk7XG4gICAgICB2YXIgY29udHJhc3QyID0gbnVsbDtcbiAgICAgIHZhciBjb250cmFzdENvbnRyaWJ1dG9yID0gbnVsbDtcbiAgICAgIHZhciBzaGFkb3dDb2xvciA9IG51bGw7XG4gICAgICBpZiAoc2hhZG93Q29sb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb250cmFzdDIgPSBnZXRfY29udHJhc3RfZGVmYXVsdChiZ0NvbG9yLCBmZ0NvbG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZmdDb2xvciAmJiBiZ0NvbG9yKSB7XG4gICAgICAgIHNoYWRvd0NvbG9yID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzaGFkb3dDb2xvcnMpLCBbIGJnQ29sb3IgXSkucmVkdWNlKF9mbGF0dGVuU2hhZG93Q29sb3JzKTtcbiAgICAgICAgdmFyIGZnQmdDb250cmFzdCA9IGdldF9jb250cmFzdF9kZWZhdWx0KGJnQ29sb3IsIGZnQ29sb3IpO1xuICAgICAgICB2YXIgYmdTaENvbnRyYXN0ID0gZ2V0X2NvbnRyYXN0X2RlZmF1bHQoYmdDb2xvciwgc2hhZG93Q29sb3IpO1xuICAgICAgICB2YXIgZmdTaENvbnRyYXN0ID0gZ2V0X2NvbnRyYXN0X2RlZmF1bHQoc2hhZG93Q29sb3IsIGZnQ29sb3IpO1xuICAgICAgICBjb250cmFzdDIgPSBNYXRoLm1heChmZ0JnQ29udHJhc3QsIGJnU2hDb250cmFzdCwgZmdTaENvbnRyYXN0KTtcbiAgICAgICAgaWYgKGNvbnRyYXN0MiAhPT0gZmdCZ0NvbnRyYXN0KSB7XG4gICAgICAgICAgY29udHJhc3RDb250cmlidXRvciA9IGJnU2hDb250cmFzdCA+IGZnU2hDb250cmFzdCA/ICdzaGFkb3dPbkJnQ29sb3InIDogJ2ZnT25TaGFkb3dDb2xvcic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBpc1ZhbGlkID0gY29udHJhc3QyID4gZXhwZWN0ZWQ7XG4gICAgICBpZiAodHlwZW9mIG1pblRocmVzaG9sZCA9PT0gJ251bWJlcicgJiYgKHR5cGVvZiBjb250cmFzdDIgIT09ICdudW1iZXInIHx8IGNvbnRyYXN0MiA8IG1pblRocmVzaG9sZCkgfHwgdHlwZW9mIG1heFRocmVzaG9sZCA9PT0gJ251bWJlcicgJiYgKHR5cGVvZiBjb250cmFzdDIgIT09ICdudW1iZXInIHx8IGNvbnRyYXN0MiA+IG1heFRocmVzaG9sZCkpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBjb250cmFzdFJhdGlvOiBjb250cmFzdDJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHRydW5jYXRlZFJlc3VsdCA9IE1hdGguZmxvb3IoY29udHJhc3QyICogMTAwKSAvIDEwMDtcbiAgICAgIHZhciBtaXNzaW5nO1xuICAgICAgaWYgKGJnQ29sb3IgPT09IG51bGwpIHtcbiAgICAgICAgbWlzc2luZyA9IGluY29tcGxldGVfZGF0YV9kZWZhdWx0LmdldCgnYmdDb2xvcicpO1xuICAgICAgfSBlbHNlIGlmICghaXNWYWxpZCkge1xuICAgICAgICBtaXNzaW5nID0gY29udHJhc3RDb250cmlidXRvcjtcbiAgICAgIH1cbiAgICAgIHZhciBlcXVhbFJhdGlvID0gdHJ1bmNhdGVkUmVzdWx0ID09PSAxO1xuICAgICAgdmFyIHNob3J0VGV4dENvbnRlbnQgPSB2aXNpYmxlVGV4dC5sZW5ndGggPT09IDE7XG4gICAgICBpZiAoZXF1YWxSYXRpbykge1xuICAgICAgICBtaXNzaW5nID0gaW5jb21wbGV0ZV9kYXRhX2RlZmF1bHQuc2V0KCdiZ0NvbG9yJywgJ2VxdWFsUmF0aW8nKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzVmFsaWQgJiYgc2hvcnRUZXh0Q29udGVudCAmJiAhaWdub3JlTGVuZ3RoKSB7XG4gICAgICAgIG1pc3NpbmcgPSAnc2hvcnRUZXh0Q29udGVudCc7XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGEoe1xuICAgICAgICBmZ0NvbG9yOiBmZ0NvbG9yID8gZmdDb2xvci50b0hleFN0cmluZygpIDogdm9pZCAwLFxuICAgICAgICBiZ0NvbG9yOiBiZ0NvbG9yID8gYmdDb2xvci50b0hleFN0cmluZygpIDogdm9pZCAwLFxuICAgICAgICBjb250cmFzdFJhdGlvOiB0cnVuY2F0ZWRSZXN1bHQsXG4gICAgICAgIGZvbnRTaXplOiAnJy5jb25jYXQoKGZvbnRTaXplICogNzIgLyA5NikudG9GaXhlZCgxKSwgJ3B0ICgnKS5jb25jYXQoZm9udFNpemUsICdweCknKSxcbiAgICAgICAgZm9udFdlaWdodDogYm9sZCA/ICdib2xkJyA6ICdub3JtYWwnLFxuICAgICAgICBtZXNzYWdlS2V5OiBtaXNzaW5nLFxuICAgICAgICBleHBlY3RlZENvbnRyYXN0UmF0aW86IGV4cGVjdGVkICsgJzoxJyxcbiAgICAgICAgc2hhZG93Q29sb3I6IHNoYWRvd0NvbG9yID8gc2hhZG93Q29sb3IudG9IZXhTdHJpbmcoKSA6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBpZiAoZmdDb2xvciA9PT0gbnVsbCB8fCBiZ0NvbG9yID09PSBudWxsIHx8IGVxdWFsUmF0aW8gfHwgc2hvcnRUZXh0Q29udGVudCAmJiAhaWdub3JlTGVuZ3RoICYmICFpc1ZhbGlkKSB7XG4gICAgICAgIG1pc3NpbmcgPSBudWxsO1xuICAgICAgICBpbmNvbXBsZXRlX2RhdGFfZGVmYXVsdC5jbGVhcigpO1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhiZ05vZGVzKTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2RlcyhiZ05vZGVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5kUHNldWRvRWxlbWVudCh2Tm9kZSwgX3JlZjEzMikge1xuICAgICAgdmFyIF9yZWYxMzIkcHNldWRvU2l6ZVRociA9IF9yZWYxMzIucHNldWRvU2l6ZVRocmVzaG9sZCwgcHNldWRvU2l6ZVRocmVzaG9sZCA9IF9yZWYxMzIkcHNldWRvU2l6ZVRociA9PT0gdm9pZCAwID8gLjI1IDogX3JlZjEzMiRwc2V1ZG9TaXplVGhyLCBfcmVmMTMyJGlnbm9yZVBzZXVkbyA9IF9yZWYxMzIuaWdub3JlUHNldWRvLCBpZ25vcmVQc2V1ZG8gPSBfcmVmMTMyJGlnbm9yZVBzZXVkbyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTMyJGlnbm9yZVBzZXVkbztcbiAgICAgIGlmIChpZ25vcmVQc2V1ZG8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHJlY3QgPSB2Tm9kZS5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gICAgICB2YXIgbWluaW11bVNpemUgPSByZWN0LndpZHRoICogcmVjdC5oZWlnaHQgKiBwc2V1ZG9TaXplVGhyZXNob2xkO1xuICAgICAgZG8ge1xuICAgICAgICB2YXIgYmVmb3JlU2l6ZSA9IGdldFBzZXVkb0VsZW1lbnRBcmVhKHZOb2RlLmFjdHVhbE5vZGUsICc6YmVmb3JlJyk7XG4gICAgICAgIHZhciBhZnRlclNpemUgPSBnZXRQc2V1ZG9FbGVtZW50QXJlYSh2Tm9kZS5hY3R1YWxOb2RlLCAnOmFmdGVyJyk7XG4gICAgICAgIGlmIChiZWZvcmVTaXplICsgYWZ0ZXJTaXplID4gbWluaW11bVNpemUpIHtcbiAgICAgICAgICByZXR1cm4gdk5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKHZOb2RlID0gdk5vZGUucGFyZW50KTtcbiAgICB9XG4gICAgdmFyIGdldFBzZXVkb0VsZW1lbnRBcmVhID0gbWVtb2l6ZV9kZWZhdWx0KGZ1bmN0aW9uIGdldFBzZXVkb0VsZW1lbnRBcmVhMihub2RlLCBwc2V1ZG8pIHtcbiAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIHBzZXVkbyk7XG4gICAgICB2YXIgbWF0Y2hQc2V1ZG9TdHlsZSA9IGZ1bmN0aW9uIG1hdGNoUHNldWRvU3R5bGUocHJvcCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCkgPT09IHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGlmIChtYXRjaFBzZXVkb1N0eWxlKCdjb250ZW50JywgJ25vbmUnKSB8fCBtYXRjaFBzZXVkb1N0eWxlKCdkaXNwbGF5JywgJ25vbmUnKSB8fCBtYXRjaFBzZXVkb1N0eWxlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpIHx8IG1hdGNoUHNldWRvU3R5bGUoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGdldF9vd25fYmFja2dyb3VuZF9jb2xvcl9kZWZhdWx0KHN0eWxlKS5hbHBoYSA9PT0gMCAmJiBtYXRjaFBzZXVkb1N0eWxlKCdiYWNrZ3JvdW5kLWltYWdlJywgJ25vbmUnKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHZhciBwc2V1ZG9XaWR0aCA9IHBhcnNlVW5pdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpKTtcbiAgICAgIHZhciBwc2V1ZG9IZWlnaHQgPSBwYXJzZVVuaXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykpO1xuICAgICAgaWYgKHBzZXVkb1dpZHRoLnVuaXQgIT09ICdweCcgfHwgcHNldWRvSGVpZ2h0LnVuaXQgIT09ICdweCcpIHtcbiAgICAgICAgcmV0dXJuIHBzZXVkb1dpZHRoLnZhbHVlID09PSAwIHx8IHBzZXVkb0hlaWdodC52YWx1ZSA9PT0gMCA/IDAgOiBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwc2V1ZG9XaWR0aC52YWx1ZSAqIHBzZXVkb0hlaWdodC52YWx1ZTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiB0ZXh0SXNFbW9qaXModmlzaWJsZVRleHQpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBub25CbXA6IHRydWVcbiAgICAgIH07XG4gICAgICB2YXIgaGFzVW5pY29kZUNoYXJzID0gaGFzX3VuaWNvZGVfZGVmYXVsdCh2aXNpYmxlVGV4dCwgb3B0aW9ucyk7XG4gICAgICB2YXIgaGFzTm9uVW5pY29kZUNoYXJzID0gc2FuaXRpemVfZGVmYXVsdChyZW1vdmVfdW5pY29kZV9kZWZhdWx0KHZpc2libGVUZXh0LCBvcHRpb25zKSkgPT09ICcnO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGVDaGFycyAmJiBoYXNOb25Vbmljb2RlQ2hhcnM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlVW5pdChzdHIpIHtcbiAgICAgIHZhciB1bml0UmVnZXggPSAvXihbMC05Ll0rKShbYS16XSspJC9pO1xuICAgICAgdmFyIF9yZWYxMzMgPSBzdHIubWF0Y2godW5pdFJlZ2V4KSB8fCBbXSwgX3JlZjEzNCA9IF9zbGljZWRUb0FycmF5KF9yZWYxMzMsIDMpLCBfcmVmMTM0JCA9IF9yZWYxMzRbMV0sIHZhbHVlID0gX3JlZjEzNCQgPT09IHZvaWQgMCA/ICcnIDogX3JlZjEzNCQsIF9yZWYxMzQkMiA9IF9yZWYxMzRbMl0sIHVuaXQgPSBfcmVmMTM0JDIgPT09IHZvaWQgMCA/ICcnIDogX3JlZjEzNCQyO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHBhcnNlRmxvYXQodmFsdWUpLFxuICAgICAgICB1bml0OiB1bml0LnRvTG93ZXJDYXNlKClcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBWQUxJRF9UQUdfTkFNRVNfRk9SX1NDUk9MTEFCTEVfUkVHSU9OUyA9IHtcbiAgICAgIEFSVElDTEU6IHRydWUsXG4gICAgICBBU0lERTogdHJ1ZSxcbiAgICAgIE5BVjogdHJ1ZSxcbiAgICAgIFNFQ1RJT046IHRydWVcbiAgICB9O1xuICAgIHZhciBWQUxJRF9ST0xFU19GT1JfU0NST0xMQUJMRV9SRUdJT05TID0ge1xuICAgICAgYWxlcnQ6IHRydWUsXG4gICAgICBhbGVydGRpYWxvZzogdHJ1ZSxcbiAgICAgIGFwcGxpY2F0aW9uOiB0cnVlLFxuICAgICAgYXJ0aWNsZTogdHJ1ZSxcbiAgICAgIGJhbm5lcjogZmFsc2UsXG4gICAgICBjb21wbGVtZW50YXJ5OiB0cnVlLFxuICAgICAgY29udGVudGluZm86IHRydWUsXG4gICAgICBkaWFsb2c6IHRydWUsXG4gICAgICBmb3JtOiB0cnVlLFxuICAgICAgbG9nOiB0cnVlLFxuICAgICAgbWFpbjogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IHRydWUsXG4gICAgICByZWdpb246IHRydWUsXG4gICAgICBzZWFyY2g6IGZhbHNlLFxuICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgdGFicGFuZWw6IHRydWVcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHZhbGlkU2Nyb2xsYWJsZVRhZ05hbWUobm9kZSkge1xuICAgICAgdmFyIG5vZGVOYW1lMiA9IG5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgIHJldHVybiBWQUxJRF9UQUdfTkFNRVNfRk9SX1NDUk9MTEFCTEVfUkVHSU9OU1tub2RlTmFtZTJdIHx8IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZFNjcm9sbGFibGVSb2xlKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciByb2xlID0gZ2V0X2V4cGxpY2l0X3JvbGVfZGVmYXVsdChub2RlKTtcbiAgICAgIGlmICghcm9sZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gVkFMSURfUk9MRVNfRk9SX1NDUk9MTEFCTEVfUkVHSU9OU1tyb2xlXSB8fCBvcHRpb25zLnJvbGVzLmluY2x1ZGVzKHJvbGUpIHx8IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZFNjcm9sbGFibGVTZW1hbnRpY3NFdmFsdWF0ZShub2RlLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsaWRTY3JvbGxhYmxlUm9sZShub2RlLCBvcHRpb25zKSB8fCB2YWxpZFNjcm9sbGFibGVUYWdOYW1lKG5vZGUpO1xuICAgIH1cbiAgICB2YXIgdmFsaWRfc2Nyb2xsYWJsZV9zZW1hbnRpY3NfZXZhbHVhdGVfZGVmYXVsdCA9IHZhbGlkU2Nyb2xsYWJsZVNlbWFudGljc0V2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIHVuc3VwcG9ydGVkcm9sZUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUsIHtcbiAgICAgICAgZHB1YjogdHJ1ZSxcbiAgICAgICAgZmFsbGJhY2s6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdmFyIGlzVW5zdXBwb3J0ZWQgPSBpc191bnN1cHBvcnRlZF9yb2xlX2RlZmF1bHQocm9sZSk7XG4gICAgICBpZiAoaXNVbnN1cHBvcnRlZCkge1xuICAgICAgICB0aGlzLmRhdGEocm9sZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNVbnN1cHBvcnRlZDtcbiAgICB9XG4gICAgdmFyIHVuc3VwcG9ydGVkcm9sZV9ldmFsdWF0ZV9kZWZhdWx0ID0gdW5zdXBwb3J0ZWRyb2xlRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gbm9JbXBsaWNpdEV4cGxpY2l0TGFiZWxFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlLCB7XG4gICAgICAgIG5vSW1wbGljaXQ6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kYXRhKHJvbGUpO1xuICAgICAgdmFyIGxhYmVsMztcbiAgICAgIHZhciBhY2NUZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGFiZWwzID0gc2FuaXRpemVfZGVmYXVsdChsYWJlbF90ZXh0X2RlZmF1bHQodmlydHVhbE5vZGUpKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBhY2NUZXh0ID0gc2FuaXRpemVfZGVmYXVsdChfYWNjZXNzaWJsZVRleHRWaXJ0dWFsKHZpcnR1YWxOb2RlKSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0gY2F0Y2ggKF91bnVzZWQxNykge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKCFhY2NUZXh0ICYmICFsYWJlbDMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFhY2NUZXh0ICYmIGxhYmVsMykge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKCFhY2NUZXh0LmluY2x1ZGVzKGxhYmVsMykpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG5vX2ltcGxpY2l0X2V4cGxpY2l0X2xhYmVsX2V2YWx1YXRlX2RlZmF1bHQgPSBub0ltcGxpY2l0RXhwbGljaXRMYWJlbEV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudEZvY3VzYWJsZUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICByZXR1cm4gX2lzRm9jdXNhYmxlKHZpcnR1YWxOb2RlKTtcbiAgICB9XG4gICAgdmFyIGlzX2VsZW1lbnRfZm9jdXNhYmxlX2V2YWx1YXRlX2RlZmF1bHQgPSBpc0VsZW1lbnRGb2N1c2FibGVFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBpbnZhbGlkcm9sZUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgYWxsUm9sZXMgPSB0b2tlbl9saXN0X2RlZmF1bHQodmlydHVhbE5vZGUuYXR0cigncm9sZScpKTtcbiAgICAgIHZhciBhbGxJbnZhbGlkID0gYWxsUm9sZXMuZXZlcnkoZnVuY3Rpb24ocm9sZSkge1xuICAgICAgICByZXR1cm4gIWlzX3ZhbGlkX3JvbGVfZGVmYXVsdChyb2xlLnRvTG93ZXJDYXNlKCksIHtcbiAgICAgICAgICBhbGxvd0Fic3RyYWN0OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWxsSW52YWxpZCkge1xuICAgICAgICB0aGlzLmRhdGEoYWxsUm9sZXMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGludmFsaWRyb2xlX2V2YWx1YXRlX2RlZmF1bHQgPSBpbnZhbGlkcm9sZUV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGhhc1dpZGdldFJvbGVFdmFsdWF0ZShub2RlKSB7XG4gICAgICB2YXIgcm9sZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdyb2xlJyk7XG4gICAgICBpZiAocm9sZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcm9sZVR5cGUgPSBnZXRfcm9sZV90eXBlX2RlZmF1bHQocm9sZSk7XG4gICAgICByZXR1cm4gcm9sZVR5cGUgPT09ICd3aWRnZXQnIHx8IHJvbGVUeXBlID09PSAnY29tcG9zaXRlJztcbiAgICB9XG4gICAgdmFyIGhhc193aWRnZXRfcm9sZV9ldmFsdWF0ZV9kZWZhdWx0ID0gaGFzV2lkZ2V0Um9sZUV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGhhc0dsb2JhbEFyaWFBdHRyaWJ1dGVFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGdsb2JhbEF0dHJzID0gZ2V0X2dsb2JhbF9hcmlhX2F0dHJzX2RlZmF1bHQoKS5maWx0ZXIoZnVuY3Rpb24oYXR0cikge1xuICAgICAgICByZXR1cm4gdmlydHVhbE5vZGUuaGFzQXR0cihhdHRyKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kYXRhKGdsb2JhbEF0dHJzKTtcbiAgICAgIHJldHVybiBnbG9iYWxBdHRycy5sZW5ndGggPiAwO1xuICAgIH1cbiAgICB2YXIgaGFzX2dsb2JhbF9hcmlhX2F0dHJpYnV0ZV9ldmFsdWF0ZV9kZWZhdWx0ID0gaGFzR2xvYmFsQXJpYUF0dHJpYnV0ZUV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIG5vbmVQcmVzZW50YXRpb25PbkVsZW1lbnRXaXRoTm9JbXBsaWNpdFJvbGUodmlydHVhbE5vZGUsIGV4cGxpY2l0Um9sZXMpIHtcbiAgICAgIHZhciBoYXNJbXBsaWNpdFJvbGUgPSBpbXBsaWNpdF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgcmV0dXJuICFoYXNJbXBsaWNpdFJvbGUgJiYgZXhwbGljaXRSb2xlcy5sZW5ndGggPT09IDIgJiYgZXhwbGljaXRSb2xlcy5pbmNsdWRlcygnbm9uZScpICYmIGV4cGxpY2l0Um9sZXMuaW5jbHVkZXMoJ3ByZXNlbnRhdGlvbicpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmYWxsYmFja3JvbGVFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGV4cGxpY2l0Um9sZXMgPSB0b2tlbl9saXN0X2RlZmF1bHQodmlydHVhbE5vZGUuYXR0cigncm9sZScpKTtcbiAgICAgIGlmIChleHBsaWNpdFJvbGVzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub25lUHJlc2VudGF0aW9uT25FbGVtZW50V2l0aE5vSW1wbGljaXRSb2xlKHZpcnR1YWxOb2RlLCBleHBsaWNpdFJvbGVzKSA/IHZvaWQgMCA6IHRydWU7XG4gICAgfVxuICAgIHZhciBmYWxsYmFja3JvbGVfZXZhbHVhdGVfZGVmYXVsdCA9IGZhbGxiYWNrcm9sZUV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZWRyb2xlRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciByb2xlID0gZ2V0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSwge1xuICAgICAgICBkcHViOiB0cnVlLFxuICAgICAgICBmYWxsYmFjazogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2YXIgcm9sZURlZmluaXRpb24gPSBzdGFuZGFyZHNfZGVmYXVsdC5hcmlhUm9sZXNbcm9sZV07XG4gICAgICBpZiAoIShyb2xlRGVmaW5pdGlvbiAhPT0gbnVsbCAmJiByb2xlRGVmaW5pdGlvbiAhPT0gdm9pZCAwICYmIHJvbGVEZWZpbml0aW9uLmRlcHJlY2F0ZWQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YShyb2xlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBicmFpbGxlUm9sZURlc2NyaXB0aW9uRXF1aXZhbGVudEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgX3ZpcnR1YWxOb2RlJGF0dHI7XG4gICAgICB2YXIgYnJhaWxsZVJvbGVEZXNjID0gKF92aXJ0dWFsTm9kZSRhdHRyID0gdmlydHVhbE5vZGUuYXR0cignYXJpYS1icmFpbGxlcm9sZWRlc2NyaXB0aW9uJykpICE9PSBudWxsICYmIF92aXJ0dWFsTm9kZSRhdHRyICE9PSB2b2lkIDAgPyBfdmlydHVhbE5vZGUkYXR0ciA6ICcnO1xuICAgICAgaWYgKHNhbml0aXplX2RlZmF1bHQoYnJhaWxsZVJvbGVEZXNjKSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcm9sZURlc2MgPSB2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLXJvbGVkZXNjcmlwdGlvbicpO1xuICAgICAgaWYgKHR5cGVvZiByb2xlRGVzYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICBtZXNzYWdlS2V5OiAnbm9Sb2xlRGVzY3JpcHRpb24nXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc2FuaXRpemVfZGVmYXVsdChyb2xlRGVzYykgPT09ICcnKSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogJ2VtcHR5Um9sZURlc2NyaXB0aW9uJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJyYWlsbGVMYWJlbEVxdWl2YWxlbnRFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIF92aXJ0dWFsTm9kZSRhdHRyMjtcbiAgICAgIHZhciBicmFpbGxlTGFiZWwgPSAoX3ZpcnR1YWxOb2RlJGF0dHIyID0gdmlydHVhbE5vZGUuYXR0cignYXJpYS1icmFpbGxlbGFiZWwnKSkgIT09IG51bGwgJiYgX3ZpcnR1YWxOb2RlJGF0dHIyICE9PSB2b2lkIDAgPyBfdmlydHVhbE5vZGUkYXR0cjIgOiAnJztcbiAgICAgIGlmICghYnJhaWxsZUxhYmVsLnRyaW0oKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZV9kZWZhdWx0KF9hY2Nlc3NpYmxlVGV4dFZpcnR1YWwodmlydHVhbE5vZGUpKSAhPT0gJyc7XG4gICAgICB9IGNhdGNoIChfdW51c2VkMTgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXJpYVZhbGlkQXR0clZhbHVlRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIG9wdGlvbnMgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMudmFsdWUpID8gb3B0aW9ucy52YWx1ZSA6IFtdO1xuICAgICAgdmFyIG5lZWRzUmV2aWV3ID0gJyc7XG4gICAgICB2YXIgbWVzc2FnZUtleSA9ICcnO1xuICAgICAgdmFyIGludmFsaWQgPSBbXTtcbiAgICAgIHZhciBhcmlhID0gL15hcmlhLS87XG4gICAgICB2YXIgc2tpcEF0dHJzID0gWyAnYXJpYS1lcnJvcm1lc3NhZ2UnIF07XG4gICAgICB2YXIgcHJlQ2hlY2tzID0ge1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IGZ1bmN0aW9uIGFyaWFDb250cm9scygpIHtcbiAgICAgICAgICB2YXIgaGFzUG9wdXAgPSBbICdmYWxzZScsIG51bGwgXS5pbmNsdWRlcyh2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWhhc3BvcHVwJykpID09PSBmYWxzZTtcbiAgICAgICAgICBpZiAoaGFzUG9wdXApIHtcbiAgICAgICAgICAgIG5lZWRzUmV2aWV3ID0gJ2FyaWEtY29udHJvbHM9XCInLmNvbmNhdCh2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWNvbnRyb2xzJyksICdcIicpO1xuICAgICAgICAgICAgbWVzc2FnZUtleSA9ICdjb250cm9sc1dpdGhpblBvcHVwJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZpcnR1YWxOb2RlLmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSAhPT0gJ2ZhbHNlJyAmJiB2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLXNlbGVjdGVkJykgIT09ICdmYWxzZScgJiYgaGFzUG9wdXAgPT09IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICAnYXJpYS1jdXJyZW50JzogZnVuY3Rpb24gYXJpYUN1cnJlbnQodmFsaWRWYWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsaWRWYWx1ZSkge1xuICAgICAgICAgICAgbmVlZHNSZXZpZXcgPSAnYXJpYS1jdXJyZW50PVwiJy5jb25jYXQodmlydHVhbE5vZGUuYXR0cignYXJpYS1jdXJyZW50JyksICdcIicpO1xuICAgICAgICAgICAgbWVzc2FnZUtleSA9ICdhcmlhQ3VycmVudCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtb3ducyc6IGZ1bmN0aW9uIGFyaWFPd25zKCkge1xuICAgICAgICAgIHJldHVybiB2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWV4cGFuZGVkJykgIT09ICdmYWxzZSc7XG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogZnVuY3Rpb24gYXJpYURlc2NyaWJlZGJ5KHZhbGlkVmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbGlkVmFsdWUpIHtcbiAgICAgICAgICAgIG5lZWRzUmV2aWV3ID0gJ2FyaWEtZGVzY3JpYmVkYnk9XCInLmNvbmNhdCh2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JyksICdcIicpO1xuICAgICAgICAgICAgbWVzc2FnZUtleSA9IGF4ZS5fdHJlZSAmJiBheGUuX3RyZWVbMF0uX2hhc1NoYWRvd1Jvb3QgPyAnbm9JZFNoYWRvdycgOiAnbm9JZCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGZ1bmN0aW9uIGFyaWFMYWJlbGxlZGJ5KHZhbGlkVmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbGlkVmFsdWUpIHtcbiAgICAgICAgICAgIG5lZWRzUmV2aWV3ID0gJ2FyaWEtbGFiZWxsZWRieT1cIicuY29uY2F0KHZpcnR1YWxOb2RlLmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpLCAnXCInKTtcbiAgICAgICAgICAgIG1lc3NhZ2VLZXkgPSBheGUuX3RyZWUgJiYgYXhlLl90cmVlWzBdLl9oYXNTaGFkb3dSb290ID8gJ25vSWRTaGFkb3cnIDogJ25vSWQnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZpcnR1YWxOb2RlLmF0dHJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGF0dHJOYW1lKSB7XG4gICAgICAgIGlmIChza2lwQXR0cnMuaW5jbHVkZXMoYXR0ck5hbWUpIHx8IG9wdGlvbnMuaW5jbHVkZXMoYXR0ck5hbWUpIHx8ICFhcmlhLnRlc3QoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWxpZFZhbHVlO1xuICAgICAgICB2YXIgYXR0clZhbHVlID0gdmlydHVhbE5vZGUuYXR0cihhdHRyTmFtZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFsaWRWYWx1ZSA9IHZhbGlkYXRlX2F0dHJfdmFsdWVfZGVmYXVsdCh2aXJ0dWFsTm9kZSwgYXR0ck5hbWUpO1xuICAgICAgICB9IGNhdGNoIChfdW51c2VkMTkpIHtcbiAgICAgICAgICBuZWVkc1JldmlldyA9ICcnLmNvbmNhdChhdHRyTmFtZSwgJz1cIicpLmNvbmNhdChhdHRyVmFsdWUsICdcIicpO1xuICAgICAgICAgIG1lc3NhZ2VLZXkgPSAnaWRyZWZzJztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwcmVDaGVja3NbYXR0ck5hbWVdID8gcHJlQ2hlY2tzW2F0dHJOYW1lXSh2YWxpZFZhbHVlKSA6IHRydWUpICYmICF2YWxpZFZhbHVlKSB7XG4gICAgICAgICAgaWYgKGF0dHJWYWx1ZSA9PT0gJycgJiYgIWlzU3RyaW5nVHlwZShhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgIG5lZWRzUmV2aWV3ID0gYXR0ck5hbWU7XG4gICAgICAgICAgICBtZXNzYWdlS2V5ID0gJ2VtcHR5JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW52YWxpZC5wdXNoKCcnLmNvbmNhdChhdHRyTmFtZSwgJz1cIicpLmNvbmNhdChhdHRyVmFsdWUsICdcIicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGludmFsaWQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZGF0YShpbnZhbGlkKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRzUmV2aWV3KSB7XG4gICAgICAgIHRoaXMuZGF0YSh7XG4gICAgICAgICAgbWVzc2FnZUtleTogbWVzc2FnZUtleSxcbiAgICAgICAgICBuZWVkc1JldmlldzogbmVlZHNSZXZpZXdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNTdHJpbmdUeXBlKGF0dHJOYW1lKSB7XG4gICAgICB2YXIgX3N0YW5kYXJkc19kZWZhdWx0JGFyO1xuICAgICAgcmV0dXJuICgoX3N0YW5kYXJkc19kZWZhdWx0JGFyID0gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYUF0dHJzW2F0dHJOYW1lXSkgPT09IG51bGwgfHwgX3N0YW5kYXJkc19kZWZhdWx0JGFyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhbmRhcmRzX2RlZmF1bHQkYXIudHlwZSkgPT09ICdzdHJpbmcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcmlhVmFsaWRBdHRyRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIG9wdGlvbnMgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMudmFsdWUpID8gb3B0aW9ucy52YWx1ZSA6IFtdO1xuICAgICAgdmFyIGludmFsaWQgPSBbXTtcbiAgICAgIHZhciBhcmlhID0gL15hcmlhLS87XG4gICAgICB2aXJ0dWFsTm9kZS5hdHRyTmFtZXMuZm9yRWFjaChmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmluZGV4T2YoYXR0cikgPT09IC0xICYmIGFyaWEudGVzdChhdHRyKSAmJiAhdmFsaWRhdGVfYXR0cl9kZWZhdWx0KGF0dHIpKSB7XG4gICAgICAgICAgaW52YWxpZC5wdXNoKGF0dHIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChpbnZhbGlkLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRhdGEoaW52YWxpZCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgYXJpYV92YWxpZF9hdHRyX2V2YWx1YXRlX2RlZmF1bHQgPSBhcmlhVmFsaWRBdHRyRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gYXJpYVVuc3VwcG9ydGVkQXR0ckV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgdW5zdXBwb3J0ZWRBdHRycyA9IHZpcnR1YWxOb2RlLmF0dHJOYW1lcy5maWx0ZXIoZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlID0gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYUF0dHJzW25hbWVdO1xuICAgICAgICBpZiAoIXZhbGlkYXRlX2F0dHJfZGVmYXVsdChuYW1lKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdW5zdXBwb3J0ZWQgPSBhdHRyaWJ1dGUudW5zdXBwb3J0ZWQ7XG4gICAgICAgIGlmIChfdHlwZW9mKHVuc3VwcG9ydGVkKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXR1cm4gISF1bnN1cHBvcnRlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIW1hdGNoZXNfZGVmYXVsdDIobm9kZSwgdW5zdXBwb3J0ZWQuZXhjZXB0aW9ucyk7XG4gICAgICB9KTtcbiAgICAgIGlmICh1bnN1cHBvcnRlZEF0dHJzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRhdGEodW5zdXBwb3J0ZWRBdHRycyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgYXJpYV91bnN1cHBvcnRlZF9hdHRyX2V2YWx1YXRlX2RlZmF1bHQgPSBhcmlhVW5zdXBwb3J0ZWRBdHRyRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gYXJpYVJvbGVkZXNjcmlwdGlvbkV2YWx1YXRlKG5vZGUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciB2aXJ0dWFsTm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlKTtcbiAgICAgIHZhciBzdXBwb3J0ZWRSb2xlcyA9IG9wdGlvbnMuc3VwcG9ydGVkUm9sZXMgfHwgW107XG4gICAgICBpZiAoc3VwcG9ydGVkUm9sZXMuaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAocm9sZSAmJiByb2xlICE9PSAncHJlc2VudGF0aW9uJyAmJiByb2xlICE9PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGFyaWFfcm9sZWRlc2NyaXB0aW9uX2V2YWx1YXRlX2RlZmF1bHQgPSBhcmlhUm9sZWRlc2NyaXB0aW9uRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gZ2V0TWlzc2luZ0NvbnRleHQodmlydHVhbE5vZGUsIG93bkdyb3VwUm9sZXMsIHJlcUNvbnRleHQsIGluY2x1ZGVFbGVtZW50KSB7XG4gICAgICB2YXIgZXhwbGljaXRSb2xlMiA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgaWYgKCFyZXFDb250ZXh0KSB7XG4gICAgICAgIHJlcUNvbnRleHQgPSByZXF1aXJlZF9jb250ZXh0X2RlZmF1bHQoZXhwbGljaXRSb2xlMik7XG4gICAgICB9XG4gICAgICBpZiAoIXJlcUNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgYWxsb3dzR3JvdXAgPSByZXFDb250ZXh0LmluY2x1ZGVzKCdncm91cCcpO1xuICAgICAgdmFyIHZOb2RlID0gaW5jbHVkZUVsZW1lbnQgPyB2aXJ0dWFsTm9kZSA6IHZpcnR1YWxOb2RlLnBhcmVudDtcbiAgICAgIHdoaWxlICh2Tm9kZSkge1xuICAgICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodk5vZGUsIHtcbiAgICAgICAgICBub1ByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJvbGUpIHtcbiAgICAgICAgICB2Tm9kZSA9IHZOb2RlLnBhcmVudDtcbiAgICAgICAgfSBlbHNlIGlmIChyb2xlID09PSAnZ3JvdXAnICYmIGFsbG93c0dyb3VwKSB7XG4gICAgICAgICAgaWYgKG93bkdyb3VwUm9sZXMuaW5jbHVkZXMoZXhwbGljaXRSb2xlMikpIHtcbiAgICAgICAgICAgIHJlcUNvbnRleHQucHVzaChleHBsaWNpdFJvbGUyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVxQ29udGV4dCA9IHJlcUNvbnRleHQuZmlsdGVyKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgIHJldHVybiByICE9PSAnZ3JvdXAnO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZOb2RlID0gdk5vZGUucGFyZW50O1xuICAgICAgICB9IGVsc2UgaWYgKHJlcUNvbnRleHQuaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVxQ29udGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcUNvbnRleHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEFyaWFPd25lcnMoZWxlbWVudCkge1xuICAgICAgdmFyIG93bmVycyA9IFtdO1xuICAgICAgdmFyIG8gPSBudWxsO1xuICAgICAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpKSB7XG4gICAgICAgICAgdmFyIF9pZDUgPSBlc2NhcGVfc2VsZWN0b3JfZGVmYXVsdChlbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgICAgICAgdmFyIGRvYyA9IGdldF9yb290X25vZGVfZGVmYXVsdDIoZWxlbWVudCk7XG4gICAgICAgICAgbyA9IGRvYy5xdWVyeVNlbGVjdG9yKCdbYXJpYS1vd25zfj0nLmNvbmNhdChfaWQ1LCAnXScpKTtcbiAgICAgICAgICBpZiAobykge1xuICAgICAgICAgICAgb3duZXJzLnB1c2gobyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3duZXJzLmxlbmd0aCA/IG93bmVycyA6IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFyaWFSZXF1aXJlZFBhcmVudEV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgb3duR3JvdXBSb2xlcyA9IG9wdGlvbnMgJiYgQXJyYXkuaXNBcnJheShvcHRpb25zLm93bkdyb3VwUm9sZXMpID8gb3B0aW9ucy5vd25Hcm91cFJvbGVzIDogW107XG4gICAgICB2YXIgbWlzc2luZ1BhcmVudHMgPSBnZXRNaXNzaW5nQ29udGV4dCh2aXJ0dWFsTm9kZSwgb3duR3JvdXBSb2xlcyk7XG4gICAgICBpZiAoIW1pc3NpbmdQYXJlbnRzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG93bmVycyA9IGdldEFyaWFPd25lcnMobm9kZSk7XG4gICAgICBpZiAob3duZXJzKSB7XG4gICAgICAgIGZvciAodmFyIF9pNDIgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgX2k0MiA8IGw7IF9pNDIrKykge1xuICAgICAgICAgIG1pc3NpbmdQYXJlbnRzID0gZ2V0TWlzc2luZ0NvbnRleHQoZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQob3duZXJzW19pNDJdKSwgb3duR3JvdXBSb2xlcywgbWlzc2luZ1BhcmVudHMsIHRydWUpO1xuICAgICAgICAgIGlmICghbWlzc2luZ1BhcmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5kYXRhKG1pc3NpbmdQYXJlbnRzKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGFyaWFfcmVxdWlyZWRfcGFyZW50X2V2YWx1YXRlX2RlZmF1bHQgPSBhcmlhUmVxdWlyZWRQYXJlbnRFdmFsdWF0ZTtcbiAgICBmdW5jdGlvbiBhcmlhUmVxdWlyZWRDaGlsZHJlbkV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgcmV2aWV3RW1wdHkgPSBvcHRpb25zICYmIEFycmF5LmlzQXJyYXkob3B0aW9ucy5yZXZpZXdFbXB0eSkgPyBvcHRpb25zLnJldmlld0VtcHR5IDogW107XG4gICAgICB2YXIgZXhwbGljaXRSb2xlMiA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUsIHtcbiAgICAgICAgZHB1YjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2YXIgcmVxdWlyZWQgPSByZXF1aXJlZF9vd25lZF9kZWZhdWx0KGV4cGxpY2l0Um9sZTIpO1xuICAgICAgaWYgKHJlcXVpcmVkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG93bmVkUm9sZXMgPSBnZXRPd25lZFJvbGVzKHZpcnR1YWxOb2RlLCByZXF1aXJlZCk7XG4gICAgICB2YXIgdW5hbGxvd2VkID0gb3duZWRSb2xlcy5maWx0ZXIoZnVuY3Rpb24oX3JlZjEzNSkge1xuICAgICAgICB2YXIgcm9sZSA9IF9yZWYxMzUucm9sZSwgdk5vZGUgPSBfcmVmMTM1LnZOb2RlO1xuICAgICAgICByZXR1cm4gdk5vZGUucHJvcHMubm9kZVR5cGUgPT09IDEgJiYgIXJlcXVpcmVkLmluY2x1ZGVzKHJvbGUpO1xuICAgICAgfSk7XG4gICAgICBpZiAodW5hbGxvd2VkLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnJlbGF0ZWROb2Rlcyh1bmFsbG93ZWQubWFwKGZ1bmN0aW9uKF9yZWYxMzYpIHtcbiAgICAgICAgICB2YXIgdk5vZGUgPSBfcmVmMTM2LnZOb2RlO1xuICAgICAgICAgIHJldHVybiB2Tm9kZTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLmRhdGEoe1xuICAgICAgICAgIG1lc3NhZ2VLZXk6ICd1bmFsbG93ZWQnLFxuICAgICAgICAgIHZhbHVlczogdW5hbGxvd2VkLm1hcChmdW5jdGlvbihfcmVmMTM3KSB7XG4gICAgICAgICAgICB2YXIgdk5vZGUgPSBfcmVmMTM3LnZOb2RlLCBhdHRyID0gX3JlZjEzNy5hdHRyO1xuICAgICAgICAgICAgcmV0dXJuIGdldFVuYWxsb3dlZFNlbGVjdG9yKHZOb2RlLCBhdHRyKTtcbiAgICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24oc2VsZWN0b3IsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2Yoc2VsZWN0b3IpID09PSBpbmRleDtcbiAgICAgICAgICB9KS5qb2luKCcsICcpXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaGFzUmVxdWlyZWRDaGlsZHJlbihyZXF1aXJlZCwgb3duZWRSb2xlcykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmlydHVhbE5vZGUuYXR0cignYXJpYS1idXN5JykgPT09ICd0cnVlJykge1xuICAgICAgICB0aGlzLmRhdGEoe1xuICAgICAgICAgIG1lc3NhZ2VLZXk6ICdhcmlhLWJ1c3knXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YShyZXF1aXJlZCk7XG4gICAgICBpZiAocmV2aWV3RW1wdHkuaW5jbHVkZXMoZXhwbGljaXRSb2xlMikgJiYgIW93bmVkUm9sZXMuc29tZShpc0NvbnRlbnQpKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldE93bmVkUm9sZXModmlydHVhbE5vZGUsIHJlcXVpcmVkKSB7XG4gICAgICB2YXIgdk5vZGU7XG4gICAgICB2YXIgb3duZWRSb2xlcyA9IFtdO1xuICAgICAgdmFyIG93bmVkVmlydHVhbCA9IGdldF9vd25lZF92aXJ0dWFsX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgdmFyIF9sb29wMTAgPSBmdW5jdGlvbiBfbG9vcDEwKCkge1xuICAgICAgICBpZiAodk5vZGUucHJvcHMubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICBvd25lZFJvbGVzLnB1c2goe1xuICAgICAgICAgICAgdk5vZGU6IHZOb2RlLFxuICAgICAgICAgICAgcm9sZTogbnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2Tm9kZS5wcm9wcy5ub2RlVHlwZSAhPT0gMSB8fCAhX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVycyh2Tm9kZSkpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodk5vZGUsIHtcbiAgICAgICAgICBub1ByZXNlbnRhdGlvbmFsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZ2xvYmFsQXJpYUF0dHIgPSBnZXRHbG9iYWxBcmlhQXR0cih2Tm9kZSk7XG4gICAgICAgIHZhciBoYXNHbG9iYWxBcmlhT3JGb2N1c2FibGUgPSAhIWdsb2JhbEFyaWFBdHRyIHx8IF9pc0ZvY3VzYWJsZSh2Tm9kZSk7XG4gICAgICAgIGlmICghcm9sZSAmJiAhaGFzR2xvYmFsQXJpYU9yRm9jdXNhYmxlIHx8IFsgJ2dyb3VwJywgJ3Jvd2dyb3VwJyBdLmluY2x1ZGVzKHJvbGUpICYmIHJlcXVpcmVkLnNvbWUoZnVuY3Rpb24ocmVxdWlyZWRSb2xlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVpcmVkUm9sZSA9PT0gcm9sZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBvd25lZFZpcnR1YWwucHVzaC5hcHBseShvd25lZFZpcnR1YWwsIF90b0NvbnN1bWFibGVBcnJheSh2Tm9kZS5jaGlsZHJlbikpO1xuICAgICAgICB9IGVsc2UgaWYgKHJvbGUgfHwgaGFzR2xvYmFsQXJpYU9yRm9jdXNhYmxlKSB7XG4gICAgICAgICAgdmFyIGF0dHIgPSBnbG9iYWxBcmlhQXR0ciB8fCAndGFiaW5kZXgnO1xuICAgICAgICAgIG93bmVkUm9sZXMucHVzaCh7XG4gICAgICAgICAgICByb2xlOiByb2xlLFxuICAgICAgICAgICAgYXR0cjogYXR0cixcbiAgICAgICAgICAgIHZOb2RlOiB2Tm9kZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgd2hpbGUgKHZOb2RlID0gb3duZWRWaXJ0dWFsLnNoaWZ0KCkpIHtcbiAgICAgICAgaWYgKF9sb29wMTAoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3duZWRSb2xlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzUmVxdWlyZWRDaGlsZHJlbihyZXF1aXJlZCwgb3duZWRSb2xlcykge1xuICAgICAgcmV0dXJuIG93bmVkUm9sZXMuc29tZShmdW5jdGlvbihfcmVmMTM4KSB7XG4gICAgICAgIHZhciByb2xlID0gX3JlZjEzOC5yb2xlO1xuICAgICAgICByZXR1cm4gcm9sZSAmJiByZXF1aXJlZC5pbmNsdWRlcyhyb2xlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRHbG9iYWxBcmlhQXR0cih2Tm9kZSkge1xuICAgICAgcmV0dXJuIGdldF9nbG9iYWxfYXJpYV9hdHRyc19kZWZhdWx0KCkuZmluZChmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgIHJldHVybiB2Tm9kZS5oYXNBdHRyKGF0dHIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFVuYWxsb3dlZFNlbGVjdG9yKHZOb2RlLCBhdHRyKSB7XG4gICAgICB2YXIgX3ZOb2RlJHByb3BzID0gdk5vZGUucHJvcHMsIG5vZGVOYW1lMiA9IF92Tm9kZSRwcm9wcy5ub2RlTmFtZSwgbm9kZVR5cGUgPSBfdk5vZGUkcHJvcHMubm9kZVR5cGU7XG4gICAgICBpZiAobm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgcmV0dXJuICcjdGV4dCc7XG4gICAgICB9XG4gICAgICB2YXIgcm9sZSA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQodk5vZGUsIHtcbiAgICAgICAgZHB1YjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBpZiAocm9sZSkge1xuICAgICAgICByZXR1cm4gJ1tyb2xlPScuY29uY2F0KHJvbGUsICddJyk7XG4gICAgICB9XG4gICAgICBpZiAoYXR0cikge1xuICAgICAgICByZXR1cm4gbm9kZU5hbWUyICsgJ1snLmNvbmNhdChhdHRyLCAnXScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGVOYW1lMjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNDb250ZW50KF9yZWYxMzkpIHtcbiAgICAgIHZhciB2Tm9kZSA9IF9yZWYxMzkudk5vZGU7XG4gICAgICBpZiAodk5vZGUucHJvcHMubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgcmV0dXJuIHZOb2RlLnByb3BzLm5vZGVWYWx1ZS50cmltKCkubGVuZ3RoID4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNfY29udGVudF92aXJ0dWFsX2RlZmF1bHQodk5vZGUsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJpYVJlcXVpcmVkQXR0ckV2YWx1YXRlKG5vZGUpIHtcbiAgICAgIHZhciBfdmlydHVhbE5vZGUkYXR0cjM7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgdmlydHVhbE5vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByb2xlID0gZ2V0X2V4cGxpY2l0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSk7XG4gICAgICB2YXIgYXR0cnMgPSB2aXJ0dWFsTm9kZS5hdHRyTmFtZXM7XG4gICAgICB2YXIgcmVxdWlyZWRBdHRycyA9IHJlcXVpcmVkX2F0dHJfZGVmYXVsdChyb2xlKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnNbcm9sZV0pKSB7XG4gICAgICAgIHJlcXVpcmVkQXR0cnMgPSB1bmlxdWVfYXJyYXlfZGVmYXVsdChvcHRpb25zW3JvbGVdLCByZXF1aXJlZEF0dHJzKTtcbiAgICAgIH1cbiAgICAgIGlmICghcm9sZSB8fCAhYXR0cnMubGVuZ3RoIHx8ICFyZXF1aXJlZEF0dHJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N0YXRpY1NlcGFyYXRvcih2aXJ0dWFsTm9kZSwgcm9sZSkgfHwgaXNDbG9zZWRDb21ib2JveCh2aXJ0dWFsTm9kZSwgcm9sZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAocm9sZSA9PT0gJ3NsaWRlcicgJiYgKF92aXJ0dWFsTm9kZSRhdHRyMyA9IHZpcnR1YWxOb2RlLmF0dHIoJ2FyaWEtdmFsdWV0ZXh0JykpICE9PSBudWxsICYmIF92aXJ0dWFsTm9kZSRhdHRyMyAhPT0gdm9pZCAwICYmIF92aXJ0dWFsTm9kZSRhdHRyMy50cmltKCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZWxtU3BlYyA9IGdldF9lbGVtZW50X3NwZWNfZGVmYXVsdCh2aXJ0dWFsTm9kZSk7XG4gICAgICB2YXIgbWlzc2luZ0F0dHJzID0gcmVxdWlyZWRBdHRycy5maWx0ZXIoZnVuY3Rpb24ocmVxdWlyZWRBdHRyMikge1xuICAgICAgICByZXR1cm4gIXZpcnR1YWxOb2RlLmF0dHIocmVxdWlyZWRBdHRyMikgJiYgIWhhc0ltcGxpY2l0QXR0cihlbG1TcGVjLCByZXF1aXJlZEF0dHIyKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKG1pc3NpbmdBdHRycy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5kYXRhKG1pc3NpbmdBdHRycyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1N0YXRpY1NlcGFyYXRvcih2Tm9kZSwgcm9sZSkge1xuICAgICAgcmV0dXJuIHJvbGUgPT09ICdzZXBhcmF0b3InICYmICFfaXNGb2N1c2FibGUodk5vZGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNJbXBsaWNpdEF0dHIoZWxtU3BlYywgYXR0cikge1xuICAgICAgdmFyIF9lbG1TcGVjJGltcGxpY2l0QXR0cjtcbiAgICAgIHJldHVybiAoKF9lbG1TcGVjJGltcGxpY2l0QXR0ciA9IGVsbVNwZWMuaW1wbGljaXRBdHRycykgPT09IG51bGwgfHwgX2VsbVNwZWMkaW1wbGljaXRBdHRyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZWxtU3BlYyRpbXBsaWNpdEF0dHJbYXR0cl0pICE9PSB2b2lkIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQ2xvc2VkQ29tYm9ib3godk5vZGUsIHJvbGUpIHtcbiAgICAgIHJldHVybiByb2xlID09PSAnY29tYm9ib3gnICYmIHZOb2RlLmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ2ZhbHNlJztcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJpYVByb2hpYml0ZWRBdHRyRXZhbHVhdGUobm9kZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIHZpcnR1YWxOb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgZWxlbWVudHNBbGxvd2VkQXJpYUxhYmVsID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lbGVtZW50c0FsbG93ZWRBcmlhTGFiZWwpIHx8IFtdO1xuICAgICAgdmFyIG5vZGVOYW1lMiA9IHZpcnR1YWxOb2RlLnByb3BzLm5vZGVOYW1lO1xuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlLCB7XG4gICAgICAgIGNocm9taXVtOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHZhciBwcm9oaWJpdGVkTGlzdCA9IGxpc3RQcm9oaWJpdGVkQXR0cnModmlydHVhbE5vZGUsIHJvbGUsIG5vZGVOYW1lMiwgZWxlbWVudHNBbGxvd2VkQXJpYUxhYmVsKTtcbiAgICAgIHZhciBwcm9oaWJpdGVkID0gcHJvaGliaXRlZExpc3QuZmlsdGVyKGZ1bmN0aW9uKGF0dHJOYW1lKSB7XG4gICAgICAgIGlmICghdmlydHVhbE5vZGUuYXR0ck5hbWVzLmluY2x1ZGVzKGF0dHJOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2FuaXRpemVfZGVmYXVsdCh2aXJ0dWFsTm9kZS5hdHRyKGF0dHJOYW1lKSkgIT09ICcnO1xuICAgICAgfSk7XG4gICAgICBpZiAocHJvaGliaXRlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG1lc3NhZ2VLZXkgPSB2aXJ0dWFsTm9kZS5oYXNBdHRyKCdyb2xlJykgPyAnaGFzUm9sZScgOiAnbm9Sb2xlJztcbiAgICAgIG1lc3NhZ2VLZXkgKz0gcHJvaGliaXRlZC5sZW5ndGggPiAxID8gJ1BsdXJhbCcgOiAnU2luZ3VsYXInO1xuICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgcm9sZTogcm9sZSxcbiAgICAgICAgbm9kZU5hbWU6IG5vZGVOYW1lMixcbiAgICAgICAgbWVzc2FnZUtleTogbWVzc2FnZUtleSxcbiAgICAgICAgcHJvaGliaXRlZDogcHJvaGliaXRlZFxuICAgICAgfSk7XG4gICAgICB2YXIgdGV4dENvbnRlbnQgPSBzdWJ0cmVlX3RleHRfZGVmYXVsdCh2aXJ0dWFsTm9kZSwge1xuICAgICAgICBzdWJ0cmVlRGVzY2VuZGFudDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBpZiAoc2FuaXRpemVfZGVmYXVsdCh0ZXh0Q29udGVudCkgIT09ICcnKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGlzdFByb2hpYml0ZWRBdHRycyh2Tm9kZSwgcm9sZSwgbm9kZU5hbWUyLCBlbGVtZW50c0FsbG93ZWRBcmlhTGFiZWwpIHtcbiAgICAgIHZhciByb2xlU3BlYyA9IHN0YW5kYXJkc19kZWZhdWx0LmFyaWFSb2xlc1tyb2xlXTtcbiAgICAgIGlmIChyb2xlU3BlYykge1xuICAgICAgICByZXR1cm4gcm9sZVNwZWMucHJvaGliaXRlZEF0dHJzIHx8IFtdO1xuICAgICAgfVxuICAgICAgaWYgKCEhcm9sZSB8fCBlbGVtZW50c0FsbG93ZWRBcmlhTGFiZWwuaW5jbHVkZXMobm9kZU5hbWUyKSB8fCBnZXRDbG9zZXN0QW5jZXN0b3JSb2xlVHlwZSh2Tm9kZSkgPT09ICd3aWRnZXQnKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScgXTtcbiAgICB9XG4gICAgdmFyIGdldENsb3Nlc3RBbmNlc3RvclJvbGVUeXBlID0gbWVtb2l6ZV9kZWZhdWx0KGZ1bmN0aW9uIGdldENsb3Nlc3RBbmNlc3RvclJvbGVUeXBlTWVtb2l6ZWQodk5vZGUpIHtcbiAgICAgIGlmICghdk5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KHZOb2RlLCB7XG4gICAgICAgIG5vUHJlc2VudGF0aW9uYWw6IHRydWUsXG4gICAgICAgIGNocm9taXVtOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGlmIChyb2xlKSB7XG4gICAgICAgIHJldHVybiBnZXRfcm9sZV90eXBlX2RlZmF1bHQocm9sZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZ2V0Q2xvc2VzdEFuY2VzdG9yUm9sZVR5cGUodk5vZGUucGFyZW50KTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBhcmlhTGV2ZWxFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGFyaWFIZWFkaW5nTGV2ZWwgPSB2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWxldmVsJyk7XG4gICAgICB2YXIgYXJpYUxldmVsID0gcGFyc2VJbnQoYXJpYUhlYWRpbmdMZXZlbCwgMTApO1xuICAgICAgaWYgKGFyaWFMZXZlbCA+IDYpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgYXJpYV9sZXZlbF9ldmFsdWF0ZV9kZWZhdWx0ID0gYXJpYUxldmVsRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gYXJpYUhpZGRlbkJvZHlFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgcmV0dXJuIHZpcnR1YWxOb2RlLmF0dHIoJ2FyaWEtaGlkZGVuJykgIT09ICd0cnVlJztcbiAgICB9XG4gICAgdmFyIGFyaWFfaGlkZGVuX2JvZHlfZXZhbHVhdGVfZGVmYXVsdCA9IGFyaWFIaWRkZW5Cb2R5RXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gYXJpYUVycm9ybWVzc2FnZUV2YWx1YXRlKG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKSB7XG4gICAgICBvcHRpb25zID0gQXJyYXkuaXNBcnJheShvcHRpb25zKSA/IG9wdGlvbnMgOiBbXTtcbiAgICAgIHZhciBlcnJvck1lc3NhZ2VBdHRyID0gdmlydHVhbE5vZGUuYXR0cignYXJpYS1lcnJvcm1lc3NhZ2UnKTtcbiAgICAgIHZhciBoYXNBdHRyID0gdmlydHVhbE5vZGUuaGFzQXR0cignYXJpYS1lcnJvcm1lc3NhZ2UnKTtcbiAgICAgIHZhciBpbnZhaWQgPSB2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWludmFsaWQnKTtcbiAgICAgIHZhciBoYXNJbnZhbGxpZCA9IHZpcnR1YWxOb2RlLmhhc0F0dHIoJ2FyaWEtaW52YWxpZCcpO1xuICAgICAgaWYgKCFoYXNJbnZhbGxpZCB8fCBpbnZhaWQgPT09ICdmYWxzZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB2YWxpZGF0ZUF0dHJWYWx1ZTIoYXR0cikge1xuICAgICAgICBpZiAoYXR0ci50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YW5kYXJkc19kZWZhdWx0LmFyaWFBdHRyc1snYXJpYS1lcnJvcm1lc3NhZ2UnXS5hbGxvd0VtcHR5O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZHJlZjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZHJlZiA9IGF0dHIgJiYgaWRyZWZzX2RlZmF1bHQodmlydHVhbE5vZGUsICdhcmlhLWVycm9ybWVzc2FnZScpWzBdO1xuICAgICAgICB9IGNhdGNoIChfdW51c2VkMjApIHtcbiAgICAgICAgICB0aGlzLmRhdGEoe1xuICAgICAgICAgICAgbWVzc2FnZUtleTogJ2lkcmVmcycsXG4gICAgICAgICAgICB2YWx1ZXM6IHRva2VuX2xpc3RfZGVmYXVsdChhdHRyKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkcmVmKSB7XG4gICAgICAgICAgaWYgKCFfaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzKGlkcmVmKSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgICAgICAgbWVzc2FnZUtleTogJ2hpZGRlbicsXG4gICAgICAgICAgICAgIHZhbHVlczogdG9rZW5fbGlzdF9kZWZhdWx0KGF0dHIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGlkcmVmLmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAnYWxlcnQnIHx8IGlkcmVmLmdldEF0dHJpYnV0ZSgnYXJpYS1saXZlJykgPT09ICdhc3NlcnRpdmUnIHx8IGlkcmVmLmdldEF0dHJpYnV0ZSgnYXJpYS1saXZlJykgPT09ICdwb2xpdGUnIHx8IHRva2VuX2xpc3RfZGVmYXVsdCh2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JykpLmluZGV4T2YoYXR0cikgPiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5pbmRleE9mKGVycm9yTWVzc2FnZUF0dHIpID09PSAtMSAmJiBoYXNBdHRyKSB7XG4gICAgICAgIHRoaXMuZGF0YSh0b2tlbl9saXN0X2RlZmF1bHQoZXJyb3JNZXNzYWdlQXR0cikpO1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVBdHRyVmFsdWUyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlQXR0cik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJpYUNvbmRpdGlvbmFsUm93QXR0cihub2RlKSB7XG4gICAgICB2YXIgX2ludmFsaWRUYWJsZVJvd0F0dHJzLCBfaW52YWxpZFRhYmxlUm93QXR0cnMyO1xuICAgICAgdmFyIF9yZWYxNDAgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LCBpbnZhbGlkVGFibGVSb3dBdHRycyA9IF9yZWYxNDAuaW52YWxpZFRhYmxlUm93QXR0cnM7XG4gICAgICB2YXIgdmlydHVhbE5vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBpbnZhbGlkQXR0cnMgPSAoX2ludmFsaWRUYWJsZVJvd0F0dHJzID0gaW52YWxpZFRhYmxlUm93QXR0cnMgPT09IG51bGwgfHwgaW52YWxpZFRhYmxlUm93QXR0cnMgPT09IHZvaWQgMCB8fCAoX2ludmFsaWRUYWJsZVJvd0F0dHJzMiA9IGludmFsaWRUYWJsZVJvd0F0dHJzLmZpbHRlcikgPT09IG51bGwgfHwgX2ludmFsaWRUYWJsZVJvd0F0dHJzMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ludmFsaWRUYWJsZVJvd0F0dHJzMi5jYWxsKGludmFsaWRUYWJsZVJvd0F0dHJzLCBmdW5jdGlvbihpbnZhbGlkQXR0cikge1xuICAgICAgICByZXR1cm4gdmlydHVhbE5vZGUuaGFzQXR0cihpbnZhbGlkQXR0cik7XG4gICAgICB9KSkgIT09IG51bGwgJiYgX2ludmFsaWRUYWJsZVJvd0F0dHJzICE9PSB2b2lkIDAgPyBfaW52YWxpZFRhYmxlUm93QXR0cnMgOiBbXTtcbiAgICAgIGlmIChpbnZhbGlkQXR0cnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG93bmVyID0gZ2V0Um93T3duZXIodmlydHVhbE5vZGUpO1xuICAgICAgdmFyIG93bmVyUm9sZSA9IG93bmVyICYmIGdldF9yb2xlX2RlZmF1bHQob3duZXIpO1xuICAgICAgaWYgKCFvd25lclJvbGUgfHwgb3duZXJSb2xlID09PSAndHJlZWdyaWQnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1lc3NhZ2VLZXkgPSAncm93Jy5jb25jYXQoaW52YWxpZEF0dHJzLmxlbmd0aCA+IDEgPyAnUGx1cmFsJyA6ICdTaW5ndWxhcicpO1xuICAgICAgdGhpcy5kYXRhKHtcbiAgICAgICAgbWVzc2FnZUtleTogbWVzc2FnZUtleSxcbiAgICAgICAgaW52YWxpZEF0dHJzOiBpbnZhbGlkQXR0cnMsXG4gICAgICAgIG93bmVyUm9sZTogb3duZXJSb2xlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Um93T3duZXIodmlydHVhbE5vZGUpIHtcbiAgICAgIGlmICghdmlydHVhbE5vZGUucGFyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByb3dPd25lclF1ZXJ5ID0gJ3RhYmxlOm5vdChbcm9sZV0pLCBbcm9sZX49XCJ0cmVlZ3JpZFwiXSwgW3JvbGV+PVwidGFibGVcIl0sIFtyb2xlfj1cImdyaWRcIl0nO1xuICAgICAgcmV0dXJuIGNsb3Nlc3RfZGVmYXVsdCh2aXJ0dWFsTm9kZSwgcm93T3duZXJRdWVyeSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFyaWFDb25kaXRpb25hbENoZWNrYm94QXR0cihub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIF92aXJ0dWFsTm9kZSRwcm9wcyA9IHZpcnR1YWxOb2RlLnByb3BzLCBub2RlTmFtZTIgPSBfdmlydHVhbE5vZGUkcHJvcHMubm9kZU5hbWUsIHR5cGUyID0gX3ZpcnR1YWxOb2RlJHByb3BzLnR5cGU7XG4gICAgICB2YXIgYXJpYUNoZWNrZWQgPSBub3JtYWxpemVBcmlhQ2hlY2tlZCh2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWNoZWNrZWQnKSk7XG4gICAgICBpZiAobm9kZU5hbWUyICE9PSAnaW5wdXQnIHx8IHR5cGUyICE9PSAnY2hlY2tib3gnIHx8ICFhcmlhQ2hlY2tlZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGVja1N0YXRlID0gZ2V0Q2hlY2tTdGF0ZSh2aXJ0dWFsTm9kZSk7XG4gICAgICBpZiAoYXJpYUNoZWNrZWQgPT09IGNoZWNrU3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGEoe1xuICAgICAgICBtZXNzYWdlS2V5OiAnY2hlY2tib3gnLFxuICAgICAgICBjaGVja1N0YXRlOiBjaGVja1N0YXRlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q2hlY2tTdGF0ZSh2Tm9kZSkge1xuICAgICAgaWYgKHZOb2RlLnByb3BzLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgcmV0dXJuICdtaXhlZCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdk5vZGUucHJvcHMuY2hlY2tlZCA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUFyaWFDaGVja2VkKGFyaWFDaGVja2VkVmFsKSB7XG4gICAgICBpZiAoIWFyaWFDaGVja2VkVmFsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGFyaWFDaGVja2VkVmFsID0gYXJpYUNoZWNrZWRWYWwudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChbICdtaXhlZCcsICd0cnVlJyBdLmluY2x1ZGVzKGFyaWFDaGVja2VkVmFsKSkge1xuICAgICAgICByZXR1cm4gYXJpYUNoZWNrZWRWYWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ2ZhbHNlJztcbiAgICB9XG4gICAgdmFyIGNvbmRpdGlvbmFsUm9sZU1hcCA9IHtcbiAgICAgIHJvdzogYXJpYUNvbmRpdGlvbmFsUm93QXR0cixcbiAgICAgIGNoZWNrYm94OiBhcmlhQ29uZGl0aW9uYWxDaGVja2JveEF0dHJcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGFyaWFDb25kaXRpb25hbEF0dHJFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlKTtcbiAgICAgIGlmICghY29uZGl0aW9uYWxSb2xlTWFwW3JvbGVdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbmRpdGlvbmFsUm9sZU1hcFtyb2xlXS5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIHZpcnR1YWxOb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJpYUJ1c3lFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgcmV0dXJuIHZpcnR1YWxOb2RlLmF0dHIoJ2FyaWEtYnVzeScpID09PSAndHJ1ZSc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFyaWFBbGxvd2VkUm9sZUV2YWx1YXRlKG5vZGUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciB2aXJ0dWFsTm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIF9vcHRpb25zJGFsbG93SW1wbGljaSA9IG9wdGlvbnMuYWxsb3dJbXBsaWNpdCwgYWxsb3dJbXBsaWNpdCA9IF9vcHRpb25zJGFsbG93SW1wbGljaSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFsbG93SW1wbGljaSwgX29wdGlvbnMkaWdub3JlZFRhZ3MgPSBvcHRpb25zLmlnbm9yZWRUYWdzLCBpZ25vcmVkVGFncyA9IF9vcHRpb25zJGlnbm9yZWRUYWdzID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJGlnbm9yZWRUYWdzO1xuICAgICAgdmFyIG5vZGVOYW1lMiA9IHZpcnR1YWxOb2RlLnByb3BzLm5vZGVOYW1lO1xuICAgICAgaWYgKGlnbm9yZWRUYWdzLm1hcChmdW5jdGlvbih0YWcpIHtcbiAgICAgICAgcmV0dXJuIHRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgfSkuaW5jbHVkZXMobm9kZU5hbWUyKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciB1bmFsbG93ZWRSb2xlcyA9IGdldF9lbGVtZW50X3VuYWxsb3dlZF9yb2xlc19kZWZhdWx0KHZpcnR1YWxOb2RlLCBhbGxvd0ltcGxpY2l0KTtcbiAgICAgIGlmICh1bmFsbG93ZWRSb2xlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5kYXRhKHVuYWxsb3dlZFJvbGVzKTtcbiAgICAgICAgaWYgKCFfaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzKHZpcnR1YWxOb2RlKSkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhcmlhX2FsbG93ZWRfcm9sZV9ldmFsdWF0ZV9kZWZhdWx0ID0gYXJpYUFsbG93ZWRSb2xlRXZhbHVhdGU7XG4gICAgZnVuY3Rpb24gYXJpYUFsbG93ZWRBdHRyRXZhbHVhdGUobm9kZSwgb3B0aW9ucywgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBpbnZhbGlkID0gW107XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgdmFyIGFsbG93ZWQgPSBhbGxvd2VkX2F0dHJfZGVmYXVsdChyb2xlKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnNbcm9sZV0pKSB7XG4gICAgICAgIGFsbG93ZWQgPSB1bmlxdWVfYXJyYXlfZGVmYXVsdChvcHRpb25zW3JvbGVdLmNvbmNhdChhbGxvd2VkKSk7XG4gICAgICB9XG4gICAgICB2YXIgX2l0ZXJhdG9yMjEgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih2aXJ0dWFsTm9kZS5hdHRyTmFtZXMpLCBfc3RlcDIxO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyMS5zKCk7ICEoX3N0ZXAyMSA9IF9pdGVyYXRvcjIxLm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgdmFyIGF0dHJOYW1lID0gX3N0ZXAyMS52YWx1ZTtcbiAgICAgICAgICBpZiAodmFsaWRhdGVfYXR0cl9kZWZhdWx0KGF0dHJOYW1lKSAmJiAhYWxsb3dlZC5pbmNsdWRlcyhhdHRyTmFtZSkgJiYgIWlnbm9yZWRBdHRycyhhdHRyTmFtZSwgdmlydHVhbE5vZGUuYXR0cihhdHRyTmFtZSksIHZpcnR1YWxOb2RlKSkge1xuICAgICAgICAgICAgaW52YWxpZC5wdXNoKGF0dHJOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyMS5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyMS5mKCk7XG4gICAgICB9XG4gICAgICBpZiAoIWludmFsaWQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5kYXRhKGludmFsaWQubWFwKGZ1bmN0aW9uKGF0dHJOYW1lKSB7XG4gICAgICAgIHJldHVybiBhdHRyTmFtZSArICc9XCInICsgdmlydHVhbE5vZGUuYXR0cihhdHRyTmFtZSkgKyAnXCInO1xuICAgICAgfSkpO1xuICAgICAgaWYgKCFyb2xlICYmICFpc19odG1sX2VsZW1lbnRfZGVmYXVsdCh2aXJ0dWFsTm9kZSkgJiYgIV9pc0ZvY3VzYWJsZSh2aXJ0dWFsTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaWdub3JlZEF0dHJzKGF0dHJOYW1lLCBhdHRyVmFsdWUsIHZOb2RlKSB7XG4gICAgICBpZiAoYXR0ck5hbWUgPT09ICdhcmlhLXJlcXVpcmVkJyAmJiBhdHRyVmFsdWUgPT09ICdmYWxzZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYXR0ck5hbWUgPT09ICdhcmlhLW11bHRpbGluZScgJiYgYXR0clZhbHVlID09PSAnZmFsc2UnICYmIHZOb2RlLmhhc0F0dHIoJ2NvbnRlbnRlZGl0YWJsZScpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhYnN0cmFjdHJvbGVFdmFsdWF0ZShub2RlLCBvcHRpb25zLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGFic3RyYWN0Um9sZXMgPSB0b2tlbl9saXN0X2RlZmF1bHQodmlydHVhbE5vZGUuYXR0cigncm9sZScpKS5maWx0ZXIoZnVuY3Rpb24ocm9sZSkge1xuICAgICAgICByZXR1cm4gZ2V0X3JvbGVfdHlwZV9kZWZhdWx0KHJvbGUpID09PSAnYWJzdHJhY3QnO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWJzdHJhY3RSb2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZGF0YShhYnN0cmFjdFJvbGVzKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBhYnN0cmFjdHJvbGVfZXZhbHVhdGVfZGVmYXVsdCA9IGFic3RyYWN0cm9sZUV2YWx1YXRlO1xuICAgIGZ1bmN0aW9uIHhtbExhbmdNaXNtYXRjaE1hdGNoZXMobm9kZSkge1xuICAgICAgdmFyIHByaW1hcnlMYW5nVmFsdWUgPSBnZXRfYmFzZV9sYW5nX2RlZmF1bHQobm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKSk7XG4gICAgICB2YXIgcHJpbWFyeVhtbExhbmdWYWx1ZSA9IGdldF9iYXNlX2xhbmdfZGVmYXVsdChub2RlLmdldEF0dHJpYnV0ZSgneG1sOmxhbmcnKSk7XG4gICAgICByZXR1cm4gdmFsaWRfbGFuZ3NfZGVmYXVsdChwcmltYXJ5TGFuZ1ZhbHVlKSAmJiB2YWxpZF9sYW5nc19kZWZhdWx0KHByaW1hcnlYbWxMYW5nVmFsdWUpO1xuICAgIH1cbiAgICB2YXIgeG1sX2xhbmdfbWlzbWF0Y2hfbWF0Y2hlc19kZWZhdWx0ID0geG1sTGFuZ01pc21hdGNoTWF0Y2hlcztcbiAgICBmdW5jdGlvbiB3aW5kb3dJc1RvcE1hdGNoZXMobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5zZWxmID09PSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcudG9wO1xuICAgIH1cbiAgICB2YXIgd2luZG93X2lzX3RvcF9tYXRjaGVzX2RlZmF1bHQgPSB3aW5kb3dJc1RvcE1hdGNoZXM7XG4gICAgZnVuY3Rpb24gc3ZnTmFtZXNwYWNlTWF0Y2hlcyhub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5vZGVOYW1lMiA9IHZpcnR1YWxOb2RlLnByb3BzLm5vZGVOYW1lO1xuICAgICAgICBpZiAobm9kZU5hbWUyID09PSAnc3ZnJykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIWNsb3Nlc3RfZGVmYXVsdCh2aXJ0dWFsTm9kZSwgJ3N2ZycpO1xuICAgICAgfSBjYXRjaCAoX3VudXNlZDIxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHN2Z19uYW1lc3BhY2VfbWF0Y2hlc19kZWZhdWx0ID0gc3ZnTmFtZXNwYWNlTWF0Y2hlcztcbiAgICBmdW5jdGlvbiB3aWRnZXROb3RJbmxpbmUobm9kZSwgdk5vZGUpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzRm5zLmV2ZXJ5KGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHJldHVybiBmbihub2RlLCB2Tm9kZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIG1hdGNoZXNGbnMgPSBbIGZ1bmN0aW9uKG5vZGUsIHZOb2RlKSB7XG4gICAgICByZXR1cm4gaXNXaWRnZXRUeXBlKHZOb2RlKTtcbiAgICB9LCBmdW5jdGlvbihub2RlLCB2Tm9kZSkge1xuICAgICAgcmV0dXJuIGlzTm90QXJlYUVsZW1lbnQodk5vZGUpO1xuICAgIH0sIGZ1bmN0aW9uKG5vZGUsIHZOb2RlKSB7XG4gICAgICByZXR1cm4gIXN2Z19uYW1lc3BhY2VfbWF0Y2hlc19kZWZhdWx0KG5vZGUsIHZOb2RlKTtcbiAgICB9LCBmdW5jdGlvbihub2RlLCB2Tm9kZSkge1xuICAgICAgcmV0dXJuIF9pc0ZvY3VzYWJsZSh2Tm9kZSk7XG4gICAgfSwgZnVuY3Rpb24obm9kZSwgdk5vZGUpIHtcbiAgICAgIHJldHVybiBfaXNJblRhYk9yZGVyKHZOb2RlKSB8fCAhaGFzV2lkZ2V0QW5jZXN0b3JJblRhYk9yZGVyKHZOb2RlKTtcbiAgICB9LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gIWlzX2luX3RleHRfYmxvY2tfZGVmYXVsdChub2RlLCB7XG4gICAgICAgIG5vTGVuZ3RoQ29tcGFyZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBdO1xuICAgIGZ1bmN0aW9uIGlzV2lkZ2V0VHlwZSh2Tm9kZSkge1xuICAgICAgcmV0dXJuIGdldF9yb2xlX3R5cGVfZGVmYXVsdCh2Tm9kZSkgPT09ICd3aWRnZXQnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc05vdEFyZWFFbGVtZW50KHZOb2RlKSB7XG4gICAgICByZXR1cm4gdk5vZGUucHJvcHMubm9kZU5hbWUgIT09ICdhcmVhJztcbiAgICB9XG4gICAgdmFyIGhhc1dpZGdldEFuY2VzdG9ySW5UYWJPcmRlciA9IG1lbW9pemVfZGVmYXVsdChmdW5jdGlvbiBoYXNXaWRnZXRBbmNlc3RvckluVGFiT3JkZXJNZW1vaXplZCh2Tm9kZSkge1xuICAgICAgaWYgKCEodk5vZGUgIT09IG51bGwgJiYgdk5vZGUgIT09IHZvaWQgMCAmJiB2Tm9kZS5wYXJlbnQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1dpZGdldFR5cGUodk5vZGUucGFyZW50KSAmJiBfaXNJblRhYk9yZGVyKHZOb2RlLnBhcmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzV2lkZ2V0QW5jZXN0b3JJblRhYk9yZGVyTWVtb2l6ZWQodk5vZGUucGFyZW50KTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiB0YWJsZU9yR3JpZFJvbGVNYXRjaGVzKF8sIHZOb2RlKSB7XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodk5vZGUpO1xuICAgICAgcmV0dXJuIFsgJ3RyZWVncmlkJywgJ2dyaWQnLCAndGFibGUnIF0uaW5jbHVkZXMocm9sZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN1bW1hcnlJc0ludGVyYWN0aXZlTWF0Y2hlcyhfLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHBhcmVudCA9IHZpcnR1YWxOb2RlLnBhcmVudDtcbiAgICAgIGlmIChwYXJlbnQucHJvcHMubm9kZU5hbWUgIT09ICdkZXRhaWxzJyB8fCBpc1Nsb3R0ZWRFbG0odmlydHVhbE5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBmaXJzdFN1bW1hcnkgPSBwYXJlbnQuY2hpbGRyZW4uZmluZChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2hpbGQucHJvcHMubm9kZU5hbWUgPT09ICdzdW1tYXJ5JztcbiAgICAgIH0pO1xuICAgICAgaWYgKGZpcnN0U3VtbWFyeSAhPT0gdmlydHVhbE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU2xvdHRlZEVsbSh2Tm9kZSkge1xuICAgICAgdmFyIF92Tm9kZSRhY3R1YWxOb2RlO1xuICAgICAgdmFyIGRvbVBhcmVudCA9IChfdk5vZGUkYWN0dWFsTm9kZSA9IHZOb2RlLmFjdHVhbE5vZGUpID09PSBudWxsIHx8IF92Tm9kZSRhY3R1YWxOb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdk5vZGUkYWN0dWFsTm9kZS5wYXJlbnRFbGVtZW50O1xuICAgICAgcmV0dXJuIGRvbVBhcmVudCAmJiBkb21QYXJlbnQgIT09IHZOb2RlLnBhcmVudC5hY3R1YWxOb2RlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBza2lwTGlua01hdGNoZXMobm9kZSkge1xuICAgICAgcmV0dXJuIF9pc1NraXBMaW5rKG5vZGUpICYmIGlzX29mZnNjcmVlbl9kZWZhdWx0KG5vZGUpO1xuICAgIH1cbiAgICB2YXIgc2tpcF9saW5rX21hdGNoZXNfZGVmYXVsdCA9IHNraXBMaW5rTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBzY3JvbGxhYmxlUmVnaW9uRm9jdXNhYmxlTWF0Y2hlcyhub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgcmV0dXJuIGdldF9zY3JvbGxfZGVmYXVsdChub2RlLCAxMykgIT09IHZvaWQgMCAmJiBfaXNDb21ib2JveFBvcHVwKHZpcnR1YWxOb2RlKSA9PT0gZmFsc2UgJiYgaXNOb25lRW1wdHlFbGVtZW50KHZpcnR1YWxOb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNOb25lRW1wdHlFbGVtZW50KHZOb2RlKSB7XG4gICAgICByZXR1cm4gcXVlcnlfc2VsZWN0b3JfYWxsX2RlZmF1bHQodk5vZGUsICcqJykuc29tZShmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgcmV0dXJuIGhhc19jb250ZW50X3ZpcnR1YWxfZGVmYXVsdChlbG0sIHRydWUsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZXNlbnRhdGlvblJvbGVDb25mbGljdE1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUpIHtcbiAgICAgIHJldHVybiBpbXBsaWNpdF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUsIHtcbiAgICAgICAgY2hyb21pdW1Sb2xlczogdHJ1ZVxuICAgICAgfSkgIT09IG51bGw7XG4gICAgfVxuICAgIHZhciBwcmVzZW50YXRpb25fcm9sZV9jb25mbGljdF9tYXRjaGVzX2RlZmF1bHQgPSBwcmVzZW50YXRpb25Sb2xlQ29uZmxpY3RNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIHBBc0hlYWRpbmdNYXRjaGVzKG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IEFycmF5LmZyb20obm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXMpO1xuICAgICAgdmFyIG5vZGVUZXh0ID0gbm9kZS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICB2YXIgaXNTZW50ZW5jZSA9IC9bLiE/OjtdKD8hWy4hPzo7XSkvZztcbiAgICAgIGlmIChub2RlVGV4dC5sZW5ndGggPT09IDAgfHwgKG5vZGVUZXh0Lm1hdGNoKGlzU2VudGVuY2UpIHx8IFtdKS5sZW5ndGggPj0gMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgc2libGluZ3NBZnRlciA9IGNoaWxkcmVuLnNsaWNlKGNoaWxkcmVuLmluZGV4T2Yobm9kZSkgKyAxKS5maWx0ZXIoZnVuY3Rpb24oZWxtKSB7XG4gICAgICAgIHJldHVybiBlbG0ubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1AnICYmIGVsbS50ZXh0Q29udGVudC50cmltKCkgIT09ICcnO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2libGluZ3NBZnRlci5sZW5ndGggIT09IDA7XG4gICAgfVxuICAgIHZhciBwX2FzX2hlYWRpbmdfbWF0Y2hlc19kZWZhdWx0ID0gcEFzSGVhZGluZ01hdGNoZXM7XG4gICAgZnVuY3Rpb24gbm9FeHBsaWNpdE5hbWVSZXF1aXJlZChub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHJvbGUgPSBnZXRfZXhwbGljaXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlKTtcbiAgICAgIGlmICghcm9sZSB8fCBbICdub25lJywgJ3ByZXNlbnRhdGlvbicgXS5pbmNsdWRlcyhyb2xlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBfcmVmMTQxID0gYXJpYV9yb2xlc19kZWZhdWx0W3JvbGVdIHx8IHt9LCBhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkID0gX3JlZjE0MS5hY2Nlc3NpYmxlTmFtZVJlcXVpcmVkO1xuICAgICAgaWYgKGFjY2Vzc2libGVOYW1lUmVxdWlyZWQgfHwgX2lzRm9jdXNhYmxlKHZpcnR1YWxOb2RlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG5vX2V4cGxpY2l0X25hbWVfcmVxdWlyZWRfbWF0Y2hlc19kZWZhdWx0ID0gbm9FeHBsaWNpdE5hbWVSZXF1aXJlZDtcbiAgICB2YXIgb2JqZWN0X2lzX2xvYWRlZF9tYXRjaGVzX2RlZmF1bHQgPSBmdW5jdGlvbiBvYmplY3RfaXNfbG9hZGVkX21hdGNoZXNfZGVmYXVsdChub2RlLCB2Tm9kZSkge1xuICAgICAgcmV0dXJuIFsgbm9fZXhwbGljaXRfbmFtZV9yZXF1aXJlZF9tYXRjaGVzX2RlZmF1bHQsIG9iamVjdEhhc0xvYWRlZCBdLmV2ZXJ5KGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHJldHVybiBmbihub2RlLCB2Tm9kZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG9iamVjdEhhc0xvYWRlZChub2RlKSB7XG4gICAgICB2YXIgX25vZGUkb3duZXJEb2N1bWVudDtcbiAgICAgIGlmICghKG5vZGUgIT09IG51bGwgJiYgbm9kZSAhPT0gdm9pZCAwICYmIChfbm9kZSRvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50KSAhPT0gbnVsbCAmJiBfbm9kZSRvd25lckRvY3VtZW50ICE9PSB2b2lkIDAgJiYgX25vZGUkb3duZXJEb2N1bWVudC5jcmVhdGVSYW5nZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcmFuZ2UyID0gbm9kZS5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICByYW5nZTIuc2V0U3RhcnQobm9kZSwgMCk7XG4gICAgICByYW5nZTIuc2V0RW5kKG5vZGUsIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHJhbmdlMi5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbm90SHRtbE1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUpIHtcbiAgICAgIHJldHVybiB2aXJ0dWFsTm9kZS5wcm9wcy5ub2RlTmFtZSAhPT0gJ2h0bWwnO1xuICAgIH1cbiAgICB2YXIgbm90X2h0bWxfbWF0Y2hlc19kZWZhdWx0ID0gbm90SHRtbE1hdGNoZXM7XG4gICAgZnVuY3Rpb24gbm9Sb2xlTWF0Y2hlcyhub2RlLCB2Tm9kZSkge1xuICAgICAgcmV0dXJuICF2Tm9kZS5hdHRyKCdyb2xlJyk7XG4gICAgfVxuICAgIHZhciBub19yb2xlX21hdGNoZXNfZGVmYXVsdCA9IG5vUm9sZU1hdGNoZXM7XG4gICAgZnVuY3Rpb24gbm9OZWdhdGl2ZVRhYmluZGV4TWF0Y2hlcyhub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHRhYmluZGV4ID0gcGFyc2VfdGFiaW5kZXhfZGVmYXVsdCh2aXJ0dWFsTm9kZS5hdHRyKCd0YWJpbmRleCcpKTtcbiAgICAgIHJldHVybiB0YWJpbmRleCA9PT0gbnVsbCB8fCB0YWJpbmRleCA+PSAwO1xuICAgIH1cbiAgICB2YXIgbm9fbmVnYXRpdmVfdGFiaW5kZXhfbWF0Y2hlc19kZWZhdWx0ID0gbm9OZWdhdGl2ZVRhYmluZGV4TWF0Y2hlcztcbiAgICBmdW5jdGlvbiBub05hbWluZ01ldGhvZE1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBfZ2V0X2VsZW1lbnRfc3BlY19kZWYzID0gZ2V0X2VsZW1lbnRfc3BlY19kZWZhdWx0KHZpcnR1YWxOb2RlKSwgbmFtaW5nTWV0aG9kcyA9IF9nZXRfZWxlbWVudF9zcGVjX2RlZjMubmFtaW5nTWV0aG9kcztcbiAgICAgIGlmIChuYW1pbmdNZXRob2RzICYmIG5hbWluZ01ldGhvZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChnZXRfZXhwbGljaXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlKSA9PT0gJ2NvbWJvYm94JyAmJiBxdWVyeV9zZWxlY3Rvcl9hbGxfZGVmYXVsdCh2aXJ0dWFsTm9kZSwgJ2lucHV0Om5vdChbdHlwZT1cImhpZGRlblwiXSknKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKF9pc0NvbWJvYm94UG9wdXAodmlydHVhbE5vZGUsIHtcbiAgICAgICAgcG9wdXBSb2xlczogWyAnbGlzdGJveCcgXVxuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBub19uYW1pbmdfbWV0aG9kX21hdGNoZXNfZGVmYXVsdCA9IG5vTmFtaW5nTWV0aG9kTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBub0VtcHR5Um9sZU1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUpIHtcbiAgICAgIGlmICghdmlydHVhbE5vZGUuaGFzQXR0cigncm9sZScpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdmlydHVhbE5vZGUuYXR0cigncm9sZScpLnRyaW0oKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIG5vX2VtcHR5X3JvbGVfbWF0Y2hlc19kZWZhdWx0ID0gbm9FbXB0eVJvbGVNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIG5vQXV0b3BsYXlBdWRpb01hdGNoZXMobm9kZSkge1xuICAgICAgaWYgKCFub2RlLmN1cnJlbnRTcmMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKCdwYXVzZWQnKSB8fCBub2RlLmhhc0F0dHJpYnV0ZSgnbXV0ZWQnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIG5vX2F1dG9wbGF5X2F1ZGlvX21hdGNoZXNfZGVmYXVsdCA9IG5vQXV0b3BsYXlBdWRpb01hdGNoZXM7XG4gICAgZnVuY3Rpb24gbmVzdGVkSW50ZXJhY3RpdmVNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgaWYgKCFyb2xlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhIXN0YW5kYXJkc19kZWZhdWx0LmFyaWFSb2xlc1tyb2xlXS5jaGlsZHJlblByZXNlbnRhdGlvbmFsO1xuICAgIH1cbiAgICB2YXIgbmVzdGVkX2ludGVyYWN0aXZlX21hdGNoZXNfZGVmYXVsdCA9IG5lc3RlZEludGVyYWN0aXZlTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBsaW5rSW5UZXh0QmxvY2tNYXRjaGVzKG5vZGUpIHtcbiAgICAgIHZhciB0ZXh0ID0gc2FuaXRpemVfZGVmYXVsdChub2RlLmlubmVyVGV4dCk7XG4gICAgICB2YXIgcm9sZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdyb2xlJyk7XG4gICAgICBpZiAocm9sZSAmJiByb2xlICE9PSAnbGluaycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghX2lzVmlzaWJsZU9uU2NyZWVuKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc19pbl90ZXh0X2Jsb2NrX2RlZmF1bHQobm9kZSk7XG4gICAgfVxuICAgIHZhciBsaW5rX2luX3RleHRfYmxvY2tfbWF0Y2hlc19kZWZhdWx0ID0gbGlua0luVGV4dEJsb2NrTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBkYXRhVGFibGVNYXRjaGVzKG5vZGUpIHtcbiAgICAgIHJldHVybiAhaXNfZGF0YV90YWJsZV9kZWZhdWx0KG5vZGUpICYmICFfaXNGb2N1c2FibGUobm9kZSk7XG4gICAgfVxuICAgIHZhciBsYXlvdXRfdGFibGVfbWF0Y2hlc19kZWZhdWx0ID0gZGF0YVRhYmxlTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBsYW5kbWFya1VuaXF1ZU1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUpIHtcbiAgICAgIHJldHVybiBpc0xhbmRtYXJrVmlydHVhbCh2aXJ0dWFsTm9kZSkgJiYgX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVycyh2aXJ0dWFsTm9kZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzTGFuZG1hcmtWaXJ0dWFsKHZOb2RlKSB7XG4gICAgICB2YXIgbGFuZG1hcmtSb2xlczIgPSBnZXRfYXJpYV9yb2xlc19ieV90eXBlX2RlZmF1bHQoJ2xhbmRtYXJrJyk7XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQodk5vZGUpO1xuICAgICAgaWYgKCFyb2xlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBub2RlTmFtZTIgPSB2Tm9kZS5wcm9wcy5ub2RlTmFtZTtcbiAgICAgIGlmIChub2RlTmFtZTIgPT09ICdzZWN0aW9uJyB8fCBub2RlTmFtZTIgPT09ICdmb3JtJykge1xuICAgICAgICB2YXIgYWNjZXNzaWJsZVRleHQyID0gX2FjY2Vzc2libGVUZXh0VmlydHVhbCh2Tm9kZSk7XG4gICAgICAgIHJldHVybiAhIWFjY2Vzc2libGVUZXh0MjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsYW5kbWFya1JvbGVzMi5pbmRleE9mKHJvbGUpID49IDAgfHwgcm9sZSA9PT0gJ3JlZ2lvbic7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxhbmRtYXJrSGFzQm9keUNvbnRleHRNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgbmF0aXZlU2NvcGVGaWx0ZXIgPSAnYXJ0aWNsZSwgYXNpZGUsIG1haW4sIG5hdiwgc2VjdGlvbic7XG4gICAgICByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUoJ3JvbGUnKSB8fCAhZmluZF91cF92aXJ0dWFsX2RlZmF1bHQodmlydHVhbE5vZGUsIG5hdGl2ZVNjb3BlRmlsdGVyKTtcbiAgICB9XG4gICAgdmFyIGxhbmRtYXJrX2hhc19ib2R5X2NvbnRleHRfbWF0Y2hlc19kZWZhdWx0ID0gbGFuZG1hcmtIYXNCb2R5Q29udGV4dE1hdGNoZXM7XG4gICAgZnVuY3Rpb24gbGFiZWxNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlKSB7XG4gICAgICBpZiAodmlydHVhbE5vZGUucHJvcHMubm9kZU5hbWUgIT09ICdpbnB1dCcgfHwgdmlydHVhbE5vZGUuaGFzQXR0cigndHlwZScpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlMiA9IHZpcnR1YWxOb2RlLmF0dHIoJ3R5cGUnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIFsgJ2hpZGRlbicsICdpbWFnZScsICdidXR0b24nLCAnc3VibWl0JywgJ3Jlc2V0JyBdLmluY2x1ZGVzKHR5cGUyKSA9PT0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBsYWJlbF9tYXRjaGVzX2RlZmF1bHQgPSBsYWJlbE1hdGNoZXM7XG4gICAgZnVuY3Rpb24gbGFiZWxDb250ZW50TmFtZU1pc21hdGNoTWF0Y2hlcyhub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIHJvbGUgPSBnZXRfcm9sZV9kZWZhdWx0KG5vZGUpO1xuICAgICAgaWYgKCFyb2xlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB3aWRnZXRSb2xlcyA9IGdldF9hcmlhX3JvbGVzX2J5X3R5cGVfZGVmYXVsdCgnd2lkZ2V0Jyk7XG4gICAgICB2YXIgaXNXaWRnZXRUeXBlMiA9IHdpZGdldFJvbGVzLmluY2x1ZGVzKHJvbGUpO1xuICAgICAgaWYgKCFpc1dpZGdldFR5cGUyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciByb2xlc1dpdGhOYW1lRnJvbUNvbnRlbnRzID0gZ2V0X2FyaWFfcm9sZXNfc3VwcG9ydGluZ19uYW1lX2Zyb21fY29udGVudF9kZWZhdWx0KCk7XG4gICAgICBpZiAoIXJvbGVzV2l0aE5hbWVGcm9tQ29udGVudHMuaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFzYW5pdGl6ZV9kZWZhdWx0KF9hcmlhbGFiZWxUZXh0KHZpcnR1YWxOb2RlKSkgJiYgIXNhbml0aXplX2RlZmF1bHQoYXJpYWxhYmVsbGVkYnlfdGV4dF9kZWZhdWx0KG5vZGUpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXNhbml0aXplX2RlZmF1bHQodmlzaWJsZV92aXJ0dWFsX2RlZmF1bHQodmlydHVhbE5vZGUpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGxhYmVsX2NvbnRlbnRfbmFtZV9taXNtYXRjaF9tYXRjaGVzX2RlZmF1bHQgPSBsYWJlbENvbnRlbnROYW1lTWlzbWF0Y2hNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIGlzVmlzaWJsZU9uU2NyZWVuTWF0Y2hlcyhub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgcmV0dXJuIF9pc1Zpc2libGVPblNjcmVlbih2aXJ0dWFsTm9kZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc1Zpc2libGVUZXh0TWF0Y2hlcyhub2RlKSB7XG4gICAgICByZXR1cm4gX2lzVmlzaWJsZU9uU2NyZWVuKG5vZGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0luaXRpYXRvck1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmluaXRpYXRvcjtcbiAgICB9XG4gICAgdmFyIGlzX2luaXRpYXRvcl9tYXRjaGVzX2RlZmF1bHQgPSBpc0luaXRpYXRvck1hdGNoZXM7XG4gICAgZnVuY3Rpb24gaW5zZXJ0ZWRJbnRvRm9jdXNPcmRlck1hdGNoZXMobm9kZSkge1xuICAgICAgcmV0dXJuIGluc2VydGVkX2ludG9fZm9jdXNfb3JkZXJfZGVmYXVsdChub2RlKTtcbiAgICB9XG4gICAgdmFyIGluc2VydGVkX2ludG9fZm9jdXNfb3JkZXJfbWF0Y2hlc19kZWZhdWx0ID0gaW5zZXJ0ZWRJbnRvRm9jdXNPcmRlck1hdGNoZXM7XG4gICAgZnVuY3Rpb24gaWRlbnRpY2FsTGlua3NTYW1lUHVycG9zZU1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciBoYXNBY2NOYW1lID0gISFfYWNjZXNzaWJsZVRleHRWaXJ0dWFsKHZpcnR1YWxOb2RlKTtcbiAgICAgIGlmICghaGFzQWNjTmFtZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcm9sZSA9IGdldF9yb2xlX2RlZmF1bHQobm9kZSk7XG4gICAgICBpZiAocm9sZSAmJiByb2xlICE9PSAnbGluaycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBpZGVudGljYWxfbGlua3Nfc2FtZV9wdXJwb3NlX21hdGNoZXNfZGVmYXVsdCA9IGlkZW50aWNhbExpbmtzU2FtZVB1cnBvc2VNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIGh0bWxOYW1lc3BhY2VNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlKSB7XG4gICAgICByZXR1cm4gIXN2Z19uYW1lc3BhY2VfbWF0Y2hlc19kZWZhdWx0KG5vZGUsIHZpcnR1YWxOb2RlKTtcbiAgICB9XG4gICAgdmFyIGh0bWxfbmFtZXNwYWNlX21hdGNoZXNfZGVmYXVsdCA9IGh0bWxOYW1lc3BhY2VNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIGhlYWRpbmdNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlKSB7XG4gICAgICByZXR1cm4gZ2V0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSkgPT09ICdoZWFkaW5nJztcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzSW1wbGljaXRDaHJvbWl1bVJvbGVNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlKSB7XG4gICAgICByZXR1cm4gaW1wbGljaXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlLCB7XG4gICAgICAgIGNocm9taXVtOiB0cnVlXG4gICAgICB9KSAhPT0gbnVsbDtcbiAgICB9XG4gICAgdmFyIGhhc19pbXBsaWNpdF9jaHJvbWl1bV9yb2xlX21hdGNoZXNfZGVmYXVsdCA9IGhhc0ltcGxpY2l0Q2hyb21pdW1Sb2xlTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBmcmFtZVRpdGxlSGFzVGV4dE1hdGNoZXMobm9kZSkge1xuICAgICAgdmFyIHRpdGxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgICByZXR1cm4gISFzYW5pdGl6ZV9kZWZhdWx0KHRpdGxlKTtcbiAgICB9XG4gICAgdmFyIGZyYW1lX3RpdGxlX2hhc190ZXh0X21hdGNoZXNfZGVmYXVsdCA9IGZyYW1lVGl0bGVIYXNUZXh0TWF0Y2hlcztcbiAgICBmdW5jdGlvbiBmcmFtZUZvY3VzYWJsZUNvbnRlbnRNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgX2NvbnRleHQkc2l6ZSwgX2NvbnRleHQkc2l6ZTI7XG4gICAgICByZXR1cm4gIWNvbnRleHQuaW5pdGlhdG9yICYmICFjb250ZXh0LmZvY3VzYWJsZSAmJiAoKF9jb250ZXh0JHNpemUgPSBjb250ZXh0LnNpemUpID09PSBudWxsIHx8IF9jb250ZXh0JHNpemUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb250ZXh0JHNpemUud2lkdGgpICogKChfY29udGV4dCRzaXplMiA9IGNvbnRleHQuc2l6ZSkgPT09IG51bGwgfHwgX2NvbnRleHQkc2l6ZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb250ZXh0JHNpemUyLmhlaWdodCkgPiAxO1xuICAgIH1cbiAgICB2YXIgZnJhbWVfZm9jdXNhYmxlX2NvbnRlbnRfbWF0Y2hlc19kZWZhdWx0ID0gZnJhbWVGb2N1c2FibGVDb250ZW50TWF0Y2hlcztcbiAgICBmdW5jdGlvbiBkdXBsaWNhdGVJZE1pc2NNYXRjaGVzKG5vZGUpIHtcbiAgICAgIHZhciBpZCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpLnRyaW0oKTtcbiAgICAgIHZhciBpZFNlbGVjdG9yID0gJypbaWQ9XCInLmNvbmNhdChlc2NhcGVfc2VsZWN0b3JfZGVmYXVsdChpZCksICdcIl0nKTtcbiAgICAgIHZhciBpZE1hdGNoaW5nRWxtcyA9IEFycmF5LmZyb20oZ2V0X3Jvb3Rfbm9kZV9kZWZhdWx0Mihub2RlKS5xdWVyeVNlbGVjdG9yQWxsKGlkU2VsZWN0b3IpKTtcbiAgICAgIHJldHVybiAhaXNfYWNjZXNzaWJsZV9yZWZfZGVmYXVsdChub2RlKSAmJiBpZE1hdGNoaW5nRWxtcy5ldmVyeShmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgcmV0dXJuICFfaXNGb2N1c2FibGUoZWxtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgZHVwbGljYXRlX2lkX21pc2NfbWF0Y2hlc19kZWZhdWx0ID0gZHVwbGljYXRlSWRNaXNjTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBkdXBsaWNhdGVJZEFyaWFNYXRjaGVzKG5vZGUpIHtcbiAgICAgIHJldHVybiBpc19hY2Nlc3NpYmxlX3JlZl9kZWZhdWx0KG5vZGUpO1xuICAgIH1cbiAgICB2YXIgZHVwbGljYXRlX2lkX2FyaWFfbWF0Y2hlc19kZWZhdWx0ID0gZHVwbGljYXRlSWRBcmlhTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBkdXBsaWNhdGVJZEFjdGl2ZU1hdGNoZXMobm9kZSkge1xuICAgICAgdmFyIGlkID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykudHJpbSgpO1xuICAgICAgdmFyIGlkU2VsZWN0b3IgPSAnKltpZD1cIicuY29uY2F0KGVzY2FwZV9zZWxlY3Rvcl9kZWZhdWx0KGlkKSwgJ1wiXScpO1xuICAgICAgdmFyIGlkTWF0Y2hpbmdFbG1zID0gQXJyYXkuZnJvbShnZXRfcm9vdF9ub2RlX2RlZmF1bHQyKG5vZGUpLnF1ZXJ5U2VsZWN0b3JBbGwoaWRTZWxlY3RvcikpO1xuICAgICAgcmV0dXJuICFpc19hY2Nlc3NpYmxlX3JlZl9kZWZhdWx0KG5vZGUpICYmIGlkTWF0Y2hpbmdFbG1zLnNvbWUoX2lzRm9jdXNhYmxlKTtcbiAgICB9XG4gICAgdmFyIGR1cGxpY2F0ZV9pZF9hY3RpdmVfbWF0Y2hlc19kZWZhdWx0ID0gZHVwbGljYXRlSWRBY3RpdmVNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIGRhdGFUYWJsZU1hdGNoZXMyKG5vZGUpIHtcbiAgICAgIHJldHVybiBpc19kYXRhX3RhYmxlX2RlZmF1bHQobm9kZSk7XG4gICAgfVxuICAgIHZhciBkYXRhX3RhYmxlX21hdGNoZXNfZGVmYXVsdCA9IGRhdGFUYWJsZU1hdGNoZXMyO1xuICAgIGZ1bmN0aW9uIGRhdGFUYWJsZUxhcmdlTWF0Y2hlcyhub2RlKSB7XG4gICAgICBpZiAoaXNfZGF0YV90YWJsZV9kZWZhdWx0KG5vZGUpKSB7XG4gICAgICAgIHZhciB0YWJsZUFycmF5ID0gdG9fZ3JpZF9kZWZhdWx0KG5vZGUpO1xuICAgICAgICByZXR1cm4gdGFibGVBcnJheS5sZW5ndGggPj0gMyAmJiB0YWJsZUFycmF5WzBdLmxlbmd0aCA+PSAzICYmIHRhYmxlQXJyYXlbMV0ubGVuZ3RoID49IDMgJiYgdGFibGVBcnJheVsyXS5sZW5ndGggPj0gMztcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGRhdGFfdGFibGVfbGFyZ2VfbWF0Y2hlc19kZWZhdWx0ID0gZGF0YVRhYmxlTGFyZ2VNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIGNvbG9yQ29udHJhc3RNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgX3ZpcnR1YWxOb2RlJHByb3BzMiA9IHZpcnR1YWxOb2RlLnByb3BzLCBub2RlTmFtZTIgPSBfdmlydHVhbE5vZGUkcHJvcHMyLm5vZGVOYW1lLCBpbnB1dFR5cGUgPSBfdmlydHVhbE5vZGUkcHJvcHMyLnR5cGU7XG4gICAgICBpZiAobm9kZU5hbWUyID09PSAnb3B0aW9uJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZU5hbWUyID09PSAnc2VsZWN0JyAmJiAhbm9kZS5vcHRpb25zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbm9uVGV4dElucHV0ID0gWyAnaGlkZGVuJywgJ3JhbmdlJywgJ2NvbG9yJywgJ2NoZWNrYm94JywgJ3JhZGlvJywgJ2ltYWdlJyBdO1xuICAgICAgaWYgKG5vZGVOYW1lMiA9PT0gJ2lucHV0JyAmJiBub25UZXh0SW5wdXQuaW5jbHVkZXMoaW5wdXRUeXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNfZGlzYWJsZWRfZGVmYXVsdCh2aXJ0dWFsTm9kZSkgfHwgX2lzSW5lcnQodmlydHVhbE5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBmb3JtRWxlbWVudHMgPSBbICdpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnIF07XG4gICAgICBpZiAoZm9ybUVsZW1lbnRzLmluY2x1ZGVzKG5vZGVOYW1lMikpIHtcbiAgICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIHZhciB0ZXh0SW5kZW50ID0gcGFyc2VJbnQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndGV4dC1pbmRlbnQnKSwgMTApO1xuICAgICAgICBpZiAodGV4dEluZGVudCkge1xuICAgICAgICAgIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICByZWN0ID0ge1xuICAgICAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQgKyB0ZXh0SW5kZW50LFxuICAgICAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQgKyB0ZXh0SW5kZW50XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoIXZpc3VhbGx5X292ZXJsYXBzX2RlZmF1bHQocmVjdCwgbm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgbm9kZVBhcmVudExhYmVsID0gZmluZF91cF92aXJ0dWFsX2RlZmF1bHQodmlydHVhbE5vZGUsICdsYWJlbCcpO1xuICAgICAgaWYgKG5vZGVOYW1lMiA9PT0gJ2xhYmVsJyB8fCBub2RlUGFyZW50TGFiZWwpIHtcbiAgICAgICAgdmFyIGxhYmVsTm9kZSA9IG5vZGVQYXJlbnRMYWJlbCB8fCBub2RlO1xuICAgICAgICB2YXIgbGFiZWxWaXJ0dWFsMyA9IG5vZGVQYXJlbnRMYWJlbCA/IGdldF9ub2RlX2Zyb21fdHJlZV9kZWZhdWx0KG5vZGVQYXJlbnRMYWJlbCkgOiB2aXJ0dWFsTm9kZTtcbiAgICAgICAgaWYgKGxhYmVsTm9kZS5odG1sRm9yKSB7XG4gICAgICAgICAgdmFyIGRvYyA9IGdldF9yb290X25vZGVfZGVmYXVsdDIobGFiZWxOb2RlKTtcbiAgICAgICAgICB2YXIgZXhwbGljaXRDb250cm9sID0gZG9jLmdldEVsZW1lbnRCeUlkKGxhYmVsTm9kZS5odG1sRm9yKTtcbiAgICAgICAgICB2YXIgZXhwbGljaXRDb250cm9sVmlydHVhbCA9IGV4cGxpY2l0Q29udHJvbCAmJiBnZXRfbm9kZV9mcm9tX3RyZWVfZGVmYXVsdChleHBsaWNpdENvbnRyb2wpO1xuICAgICAgICAgIGlmIChleHBsaWNpdENvbnRyb2xWaXJ0dWFsICYmIGlzX2Rpc2FibGVkX2RlZmF1bHQoZXhwbGljaXRDb250cm9sVmlydHVhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHF1ZXJ5ID0gJ2lucHV0Om5vdChbdHlwZT1cImhpZGRlblwiXSxbdHlwZT1cImltYWdlXCJdLFt0eXBlPVwiYnV0dG9uXCJdLFt0eXBlPVwic3VibWl0XCJdLFt0eXBlPVwicmVzZXRcIl0pLCBzZWxlY3QsIHRleHRhcmVhJztcbiAgICAgICAgdmFyIGltcGxpY2l0Q29udHJvbCA9IHF1ZXJ5X3NlbGVjdG9yX2FsbF9kZWZhdWx0KGxhYmVsVmlydHVhbDMsIHF1ZXJ5KVswXTtcbiAgICAgICAgaWYgKGltcGxpY2l0Q29udHJvbCAmJiBpc19kaXNhYmxlZF9kZWZhdWx0KGltcGxpY2l0Q29udHJvbCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBhcmlhTGFiZWxsZWRieUNvbnRyb2xzID0gW107XG4gICAgICB2YXIgYW5jZXN0b3JOb2RlID0gdmlydHVhbE5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3JOb2RlKSB7XG4gICAgICAgIGlmIChhbmNlc3Rvck5vZGUucHJvcHMuaWQpIHtcbiAgICAgICAgICB2YXIgdmlydHVhbENvbnRyb2xzID0gZ2V0X2FjY2Vzc2libGVfcmVmc19kZWZhdWx0KGFuY2VzdG9yTm9kZSkuZmlsdGVyKGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbl9saXN0X2RlZmF1bHQoY29udHJvbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScpIHx8ICcnKS5pbmNsdWRlcyhhbmNlc3Rvck5vZGUucHJvcHMuaWQpO1xuICAgICAgICAgIH0pLm1hcChmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0X25vZGVfZnJvbV90cmVlX2RlZmF1bHQoY29udHJvbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYXJpYUxhYmVsbGVkYnlDb250cm9scy5wdXNoLmFwcGx5KGFyaWFMYWJlbGxlZGJ5Q29udHJvbHMsIF90b0NvbnN1bWFibGVBcnJheSh2aXJ0dWFsQ29udHJvbHMpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3Rvck5vZGUgPSBhbmNlc3Rvck5vZGUucGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKGFyaWFMYWJlbGxlZGJ5Q29udHJvbHMubGVuZ3RoID4gMCAmJiBhcmlhTGFiZWxsZWRieUNvbnRyb2xzLmV2ZXJ5KGlzX2Rpc2FibGVkX2RlZmF1bHQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghaGFzUmVhbFRleHRDaGlsZHJlbih2aXJ0dWFsTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJhbmdlMiA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICB2YXIgY2hpbGROb2RlcyA9IHZpcnR1YWxOb2RlLmNoaWxkcmVuO1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGNoaWxkTm9kZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IGNoaWxkTm9kZXNbaW5kZXhdO1xuICAgICAgICBpZiAoY2hpbGQuYWN0dWFsTm9kZS5ub2RlVHlwZSA9PT0gMyAmJiBzYW5pdGl6ZV9kZWZhdWx0KGNoaWxkLmFjdHVhbE5vZGUubm9kZVZhbHVlKSAhPT0gJycpIHtcbiAgICAgICAgICByYW5nZTIuc2VsZWN0Tm9kZUNvbnRlbnRzKGNoaWxkLmFjdHVhbE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgcmVjdHMgPSBBcnJheS5mcm9tKHJhbmdlMi5nZXRDbGllbnRSZWN0cygpKTtcbiAgICAgIHZhciBjbGlwcGluZ0FuY2VzdG9ycyA9IGdldF9vdmVyZmxvd19oaWRkZW5fYW5jZXN0b3JzX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgcmV0dXJuIHJlY3RzLnNvbWUoZnVuY3Rpb24ocmVjdCkge1xuICAgICAgICB2YXIgb3ZlcmxhcHMgPSB2aXN1YWxseV9vdmVybGFwc19kZWZhdWx0KHJlY3QsIG5vZGUpO1xuICAgICAgICBpZiAoIWNsaXBwaW5nQW5jZXN0b3JzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBvdmVybGFwcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2l0aGluT3ZlcmZsb3cgPSBjbGlwcGluZ0FuY2VzdG9ycy5zb21lKGZ1bmN0aW9uKG92ZXJmbG93Tm9kZSkge1xuICAgICAgICAgIHJldHVybiBfcmVjdHNPdmVybGFwKHJlY3QsIG92ZXJmbG93Tm9kZS5ib3VuZGluZ0NsaWVudFJlY3QpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG92ZXJsYXBzICYmIHdpdGhpbk92ZXJmbG93O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBjb2xvcl9jb250cmFzdF9tYXRjaGVzX2RlZmF1bHQgPSBjb2xvckNvbnRyYXN0TWF0Y2hlcztcbiAgICB2YXIgcmVtb3ZlVW5pY29kZU9wdGlvbnMgPSB7XG4gICAgICBlbW9qaTogdHJ1ZSxcbiAgICAgIG5vbkJtcDogZmFsc2UsXG4gICAgICBwdW5jdHVhdGlvbnM6IHRydWVcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGhhc1JlYWxUZXh0Q2hpbGRyZW4odmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciB2aXNpYmxlVGV4dCA9IHZpc2libGVfdmlydHVhbF9kZWZhdWx0KHZpcnR1YWxOb2RlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICBpZiAodmlzaWJsZVRleHQgPT09ICcnIHx8IHJlbW92ZV91bmljb2RlX2RlZmF1bHQodmlzaWJsZVRleHQsIHJlbW92ZVVuaWNvZGVPcHRpb25zKSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZpcnR1YWxOb2RlLmNoaWxkcmVuLnNvbWUoZnVuY3Rpb24odkNoaWxkKSB7XG4gICAgICAgIHJldHVybiB2Q2hpbGQucHJvcHMubm9kZU5hbWUgPT09ICcjdGV4dCcgJiYgIV9pc0ljb25MaWdhdHVyZSh2Q2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ5cGFzc01hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUsIGNvbnRleHQpIHtcbiAgICAgIGlmIChpc19pbml0aWF0b3JfbWF0Y2hlc19kZWZhdWx0KG5vZGUsIHZpcnR1YWxOb2RlLCBjb250ZXh0KSkge1xuICAgICAgICByZXR1cm4gISFub2RlLnF1ZXJ5U2VsZWN0b3IoJ2FbaHJlZl0nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgYnlwYXNzX21hdGNoZXNfZGVmYXVsdCA9IGJ5cGFzc01hdGNoZXM7XG4gICAgZnVuY3Rpb24gYXV0b2NvbXBsZXRlTWF0Y2hlcyhub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGF1dG9jb21wbGV0ZTIgPSB2aXJ0dWFsTm9kZS5hdHRyKCdhdXRvY29tcGxldGUnKTtcbiAgICAgIGlmICghYXV0b2NvbXBsZXRlMiB8fCBzYW5pdGl6ZV9kZWZhdWx0KGF1dG9jb21wbGV0ZTIpID09PSAnJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbm9kZU5hbWUyID0gdmlydHVhbE5vZGUucHJvcHMubm9kZU5hbWU7XG4gICAgICBpZiAoWyAndGV4dGFyZWEnLCAnaW5wdXQnLCAnc2VsZWN0JyBdLmluY2x1ZGVzKG5vZGVOYW1lMikgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBleGNsdWRlZElucHV0VHlwZXMgPSBbICdzdWJtaXQnLCAncmVzZXQnLCAnYnV0dG9uJywgJ2hpZGRlbicgXTtcbiAgICAgIGlmIChub2RlTmFtZTIgPT09ICdpbnB1dCcgJiYgZXhjbHVkZWRJbnB1dFR5cGVzLmluY2x1ZGVzKHZpcnR1YWxOb2RlLnByb3BzLnR5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmlhRGlzYWJsZWQgPSB2aXJ0dWFsTm9kZS5hdHRyKCdhcmlhLWRpc2FibGVkJykgfHwgJ2ZhbHNlJztcbiAgICAgIGlmICh2aXJ0dWFsTm9kZS5oYXNBdHRyKCdkaXNhYmxlZCcpIHx8IGFyaWFEaXNhYmxlZC50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJvbGUgPSB2aXJ0dWFsTm9kZS5hdHRyKCdyb2xlJyk7XG4gICAgICB2YXIgdGFiSW5kZXggPSBwYXJzZV90YWJpbmRleF9kZWZhdWx0KHZpcnR1YWxOb2RlLmF0dHIoJ3RhYmluZGV4JykpO1xuICAgICAgaWYgKHRhYkluZGV4IDwgMCAmJiByb2xlKSB7XG4gICAgICAgIHZhciByb2xlRGVmID0gc3RhbmRhcmRzX2RlZmF1bHQuYXJpYVJvbGVzW3JvbGVdO1xuICAgICAgICBpZiAocm9sZURlZiA9PT0gdm9pZCAwIHx8IHJvbGVEZWYudHlwZSAhPT0gJ3dpZGdldCcpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0YWJJbmRleCA8IDAgJiYgdmlydHVhbE5vZGUuYWN0dWFsTm9kZSAmJiAhX2lzVmlzaWJsZU9uU2NyZWVuKHZpcnR1YWxOb2RlKSAmJiAhX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVycyh2aXJ0dWFsTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhdXRvY29tcGxldGVfbWF0Y2hlc19kZWZhdWx0ID0gYXV0b2NvbXBsZXRlTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBhcmlhUmVxdWlyZWRQYXJlbnRNYXRjaGVzKG5vZGUsIHZpcnR1YWxOb2RlKSB7XG4gICAgICB2YXIgcm9sZSA9IGdldF9leHBsaWNpdF9yb2xlX2RlZmF1bHQodmlydHVhbE5vZGUpO1xuICAgICAgcmV0dXJuICEhcmVxdWlyZWRfY29udGV4dF9kZWZhdWx0KHJvbGUpO1xuICAgIH1cbiAgICB2YXIgYXJpYV9yZXF1aXJlZF9wYXJlbnRfbWF0Y2hlc19kZWZhdWx0ID0gYXJpYVJlcXVpcmVkUGFyZW50TWF0Y2hlcztcbiAgICBmdW5jdGlvbiBhcmlhUmVxdWlyZWRDaGlsZHJlbk1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUpIHtcbiAgICAgIHZhciByb2xlID0gZ2V0X2V4cGxpY2l0X3JvbGVfZGVmYXVsdCh2aXJ0dWFsTm9kZSwge1xuICAgICAgICBkcHViOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlcXVpcmVkX293bmVkX2RlZmF1bHQocm9sZSk7XG4gICAgfVxuICAgIHZhciBhcmlhX3JlcXVpcmVkX2NoaWxkcmVuX21hdGNoZXNfZGVmYXVsdCA9IGFyaWFSZXF1aXJlZENoaWxkcmVuTWF0Y2hlcztcbiAgICBmdW5jdGlvbiBzaG91bGRNYXRjaEVsZW1lbnQoZWwpIHtcbiAgICAgIGlmICghZWwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNob3VsZE1hdGNoRWxlbWVudChnZXRfY29tcG9zZWRfcGFyZW50X2RlZmF1bHQoZWwpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJpYUhpZGRlbkZvY3VzTWF0Y2hlcyhub2RlKSB7XG4gICAgICByZXR1cm4gc2hvdWxkTWF0Y2hFbGVtZW50KGdldF9jb21wb3NlZF9wYXJlbnRfZGVmYXVsdChub2RlKSk7XG4gICAgfVxuICAgIHZhciBhcmlhX2hpZGRlbl9mb2N1c19tYXRjaGVzX2RlZmF1bHQgPSBhcmlhSGlkZGVuRm9jdXNNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIGFyaWFIYXNBdHRyTWF0Y2hlcyhub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGFyaWEgPSAvXmFyaWEtLztcbiAgICAgIHJldHVybiB2aXJ0dWFsTm9kZS5hdHRyTmFtZXMuc29tZShmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgIHJldHVybiBhcmlhLnRlc3QoYXR0cik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGFyaWFfaGFzX2F0dHJfbWF0Y2hlc19kZWZhdWx0ID0gYXJpYUhhc0F0dHJNYXRjaGVzO1xuICAgIGZ1bmN0aW9uIGFyaWFBbGxvd2VkUm9sZU1hdGNoZXMobm9kZSwgdmlydHVhbE5vZGUpIHtcbiAgICAgIHJldHVybiBnZXRfZXhwbGljaXRfcm9sZV9kZWZhdWx0KHZpcnR1YWxOb2RlLCB7XG4gICAgICAgIGRwdWI6IHRydWUsXG4gICAgICAgIGZhbGxiYWNrOiB0cnVlXG4gICAgICB9KSAhPT0gbnVsbDtcbiAgICB9XG4gICAgdmFyIGFyaWFfYWxsb3dlZF9yb2xlX21hdGNoZXNfZGVmYXVsdCA9IGFyaWFBbGxvd2VkUm9sZU1hdGNoZXM7XG4gICAgZnVuY3Rpb24gYXJpYUFsbG93ZWRBdHRyTWF0Y2hlcyhub2RlLCB2aXJ0dWFsTm9kZSkge1xuICAgICAgdmFyIGFyaWEgPSAvXmFyaWEtLztcbiAgICAgIHZhciBhdHRycyA9IHZpcnR1YWxOb2RlLmF0dHJOYW1lcztcbiAgICAgIGlmIChhdHRycy5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgX2k0MyA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IF9pNDMgPCBsOyBfaTQzKyspIHtcbiAgICAgICAgICBpZiAoYXJpYS50ZXN0KGF0dHJzW19pNDNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBhcmlhX2FsbG93ZWRfYXR0cl9tYXRjaGVzX2RlZmF1bHQgPSBhcmlhQWxsb3dlZEF0dHJNYXRjaGVzO1xuICAgIHZhciBtZXRhZGF0YUZ1bmN0aW9uTWFwID0ge1xuICAgICAgJ2Fic3RyYWN0cm9sZS1ldmFsdWF0ZSc6IGFic3RyYWN0cm9sZV9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2FjY2Vzc2tleXMtYWZ0ZXInOiBhY2Nlc3NrZXlzX2FmdGVyX2RlZmF1bHQsXG4gICAgICAnYWNjZXNza2V5cy1ldmFsdWF0ZSc6IGFjY2Vzc2tleXNfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdhbHQtc3BhY2UtdmFsdWUtZXZhbHVhdGUnOiBhbHRfc3BhY2VfdmFsdWVfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdhcmlhLWFsbG93ZWQtYXR0ci1ldmFsdWF0ZSc6IGFyaWFBbGxvd2VkQXR0ckV2YWx1YXRlLFxuICAgICAgJ2FyaWEtYWxsb3dlZC1hdHRyLW1hdGNoZXMnOiBhcmlhX2FsbG93ZWRfYXR0cl9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnYXJpYS1hbGxvd2VkLXJvbGUtZXZhbHVhdGUnOiBhcmlhX2FsbG93ZWRfcm9sZV9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2FyaWEtYWxsb3dlZC1yb2xlLW1hdGNoZXMnOiBhcmlhX2FsbG93ZWRfcm9sZV9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnYXJpYS1idXN5LWV2YWx1YXRlJzogYXJpYUJ1c3lFdmFsdWF0ZSxcbiAgICAgICdhcmlhLWNvbmRpdGlvbmFsLWF0dHItZXZhbHVhdGUnOiBhcmlhQ29uZGl0aW9uYWxBdHRyRXZhbHVhdGUsXG4gICAgICAnYXJpYS1jb25kaXRpb25hbC1jaGVja2JveC1hdHRyLWV2YWx1YXRlJzogYXJpYUNvbmRpdGlvbmFsQ2hlY2tib3hBdHRyLFxuICAgICAgJ2FyaWEtY29uZGl0aW9uYWwtcm93LWF0dHItZXZhbHVhdGUnOiBhcmlhQ29uZGl0aW9uYWxSb3dBdHRyLFxuICAgICAgJ2FyaWEtZXJyb3JtZXNzYWdlLWV2YWx1YXRlJzogYXJpYUVycm9ybWVzc2FnZUV2YWx1YXRlLFxuICAgICAgJ2FyaWEtaGFzLWF0dHItbWF0Y2hlcyc6IGFyaWFfaGFzX2F0dHJfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ2FyaWEtaGlkZGVuLWJvZHktZXZhbHVhdGUnOiBhcmlhX2hpZGRlbl9ib2R5X2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnYXJpYS1oaWRkZW4tZm9jdXMtbWF0Y2hlcyc6IGFyaWFfaGlkZGVuX2ZvY3VzX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdhcmlhLWxhYmVsLWV2YWx1YXRlJzogYXJpYV9sYWJlbF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2FyaWEtbGFiZWxsZWRieS1ldmFsdWF0ZSc6IGFyaWFfbGFiZWxsZWRieV9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2FyaWEtbGV2ZWwtZXZhbHVhdGUnOiBhcmlhX2xldmVsX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnYXJpYS1wcm9oaWJpdGVkLWF0dHItZXZhbHVhdGUnOiBhcmlhUHJvaGliaXRlZEF0dHJFdmFsdWF0ZSxcbiAgICAgICdhcmlhLXJlcXVpcmVkLWF0dHItZXZhbHVhdGUnOiBhcmlhUmVxdWlyZWRBdHRyRXZhbHVhdGUsXG4gICAgICAnYXJpYS1yZXF1aXJlZC1jaGlsZHJlbi1ldmFsdWF0ZSc6IGFyaWFSZXF1aXJlZENoaWxkcmVuRXZhbHVhdGUsXG4gICAgICAnYXJpYS1yZXF1aXJlZC1jaGlsZHJlbi1tYXRjaGVzJzogYXJpYV9yZXF1aXJlZF9jaGlsZHJlbl9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnYXJpYS1yZXF1aXJlZC1wYXJlbnQtZXZhbHVhdGUnOiBhcmlhX3JlcXVpcmVkX3BhcmVudF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2FyaWEtcmVxdWlyZWQtcGFyZW50LW1hdGNoZXMnOiBhcmlhX3JlcXVpcmVkX3BhcmVudF9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnYXJpYS1yb2xlZGVzY3JpcHRpb24tZXZhbHVhdGUnOiBhcmlhX3JvbGVkZXNjcmlwdGlvbl9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2FyaWEtdW5zdXBwb3J0ZWQtYXR0ci1ldmFsdWF0ZSc6IGFyaWFfdW5zdXBwb3J0ZWRfYXR0cl9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2FyaWEtdmFsaWQtYXR0ci1ldmFsdWF0ZSc6IGFyaWFfdmFsaWRfYXR0cl9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2FyaWEtdmFsaWQtYXR0ci12YWx1ZS1ldmFsdWF0ZSc6IGFyaWFWYWxpZEF0dHJWYWx1ZUV2YWx1YXRlLFxuICAgICAgJ2F0dHItbm9uLXNwYWNlLWNvbnRlbnQtZXZhbHVhdGUnOiBhdHRyX25vbl9zcGFjZV9jb250ZW50X2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnYXV0b2NvbXBsZXRlLWFwcHJvcHJpYXRlLWV2YWx1YXRlJzogYXV0b2NvbXBsZXRlX2FwcHJvcHJpYXRlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnYXV0b2NvbXBsZXRlLW1hdGNoZXMnOiBhdXRvY29tcGxldGVfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ2F1dG9jb21wbGV0ZS12YWxpZC1ldmFsdWF0ZSc6IGF1dG9jb21wbGV0ZV92YWxpZF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2F2b2lkLWlubGluZS1zcGFjaW5nLWV2YWx1YXRlJzogYXZvaWRfaW5saW5lX3NwYWNpbmdfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdicmFpbGxlLWxhYmVsLWVxdWl2YWxlbnQtZXZhbHVhdGUnOiBicmFpbGxlTGFiZWxFcXVpdmFsZW50RXZhbHVhdGUsXG4gICAgICAnYnJhaWxsZS1yb2xlZGVzY3JpcHRpb24tZXF1aXZhbGVudC1ldmFsdWF0ZSc6IGJyYWlsbGVSb2xlRGVzY3JpcHRpb25FcXVpdmFsZW50RXZhbHVhdGUsXG4gICAgICAnYnlwYXNzLW1hdGNoZXMnOiBieXBhc3NfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ2NhcHRpb24tZXZhbHVhdGUnOiBjYXB0aW9uX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnY2FwdGlvbi1mYWtlZC1ldmFsdWF0ZSc6IGNhcHRpb25fZmFrZWRfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdjb2xvci1jb250cmFzdC1ldmFsdWF0ZSc6IGNvbG9yQ29udHJhc3RFdmFsdWF0ZSxcbiAgICAgICdjb2xvci1jb250cmFzdC1tYXRjaGVzJzogY29sb3JfY29udHJhc3RfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ2Nzcy1vcmllbnRhdGlvbi1sb2NrLWV2YWx1YXRlJzogY3NzX29yaWVudGF0aW9uX2xvY2tfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdkYXRhLXRhYmxlLWxhcmdlLW1hdGNoZXMnOiBkYXRhX3RhYmxlX2xhcmdlX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdkYXRhLXRhYmxlLW1hdGNoZXMnOiBkYXRhX3RhYmxlX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdkZXByZWNhdGVkcm9sZS1ldmFsdWF0ZSc6IGRlcHJlY2F0ZWRyb2xlRXZhbHVhdGUsXG4gICAgICAnZGxpdGVtLWV2YWx1YXRlJzogZGxpdGVtX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnZG9jLWhhcy10aXRsZS1ldmFsdWF0ZSc6IGRvY19oYXNfdGl0bGVfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdkdXBsaWNhdGUtaWQtYWN0aXZlLW1hdGNoZXMnOiBkdXBsaWNhdGVfaWRfYWN0aXZlX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdkdXBsaWNhdGUtaWQtYWZ0ZXInOiBkdXBsaWNhdGVfaWRfYWZ0ZXJfZGVmYXVsdCxcbiAgICAgICdkdXBsaWNhdGUtaWQtYXJpYS1tYXRjaGVzJzogZHVwbGljYXRlX2lkX2FyaWFfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ2R1cGxpY2F0ZS1pZC1ldmFsdWF0ZSc6IGR1cGxpY2F0ZV9pZF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2R1cGxpY2F0ZS1pZC1taXNjLW1hdGNoZXMnOiBkdXBsaWNhdGVfaWRfbWlzY19tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnZHVwbGljYXRlLWltZy1sYWJlbC1ldmFsdWF0ZSc6IGR1cGxpY2F0ZV9pbWdfbGFiZWxfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdleGlzdHMtZXZhbHVhdGUnOiBleGlzdHNfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdleHBsaWNpdC1ldmFsdWF0ZSc6IGV4cGxpY2l0X2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnZmFsbGJhY2tyb2xlLWV2YWx1YXRlJzogZmFsbGJhY2tyb2xlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnZm9jdXNhYmxlLWNvbnRlbnQtZXZhbHVhdGUnOiBmb2N1c2FibGVfY29udGVudF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2ZvY3VzYWJsZS1kaXNhYmxlZC1ldmFsdWF0ZSc6IGZvY3VzYWJsZV9kaXNhYmxlZF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2ZvY3VzYWJsZS1lbGVtZW50LWV2YWx1YXRlJzogZm9jdXNhYmxlX2VsZW1lbnRfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdmb2N1c2FibGUtbW9kYWwtb3Blbi1ldmFsdWF0ZSc6IGZvY3VzYWJsZV9tb2RhbF9vcGVuX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnZm9jdXNhYmxlLW5vLW5hbWUtZXZhbHVhdGUnOiBmb2N1c2FibGVfbm9fbmFtZV9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2ZvY3VzYWJsZS1ub3QtdGFiYmFibGUtZXZhbHVhdGUnOiBmb2N1c2FibGVfbm90X3RhYmJhYmxlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnZnJhbWUtZm9jdXNhYmxlLWNvbnRlbnQtZXZhbHVhdGUnOiBmcmFtZUZvY3VzYWJsZUNvbnRlbnRFdmFsdWF0ZSxcbiAgICAgICdmcmFtZS1mb2N1c2FibGUtY29udGVudC1tYXRjaGVzJzogZnJhbWVfZm9jdXNhYmxlX2NvbnRlbnRfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ2ZyYW1lLXRlc3RlZC1hZnRlcic6IGZyYW1lX3Rlc3RlZF9hZnRlcl9kZWZhdWx0LFxuICAgICAgJ2ZyYW1lLXRlc3RlZC1ldmFsdWF0ZSc6IGZyYW1lX3Rlc3RlZF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2ZyYW1lLXRpdGxlLWhhcy10ZXh0LW1hdGNoZXMnOiBmcmFtZV90aXRsZV9oYXNfdGV4dF9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnaGFzLWFsdC1ldmFsdWF0ZSc6IGhhc19hbHRfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdoYXMtZGVzY2VuZGFudC1hZnRlcic6IGhhc19kZXNjZW5kYW50X2FmdGVyX2RlZmF1bHQsXG4gICAgICAnaGFzLWRlc2NlbmRhbnQtZXZhbHVhdGUnOiBoYXNfZGVzY2VuZGFudF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2hhcy1nbG9iYWwtYXJpYS1hdHRyaWJ1dGUtZXZhbHVhdGUnOiBoYXNfZ2xvYmFsX2FyaWFfYXR0cmlidXRlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnaGFzLWltcGxpY2l0LWNocm9taXVtLXJvbGUtbWF0Y2hlcyc6IGhhc19pbXBsaWNpdF9jaHJvbWl1bV9yb2xlX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdoYXMtbGFuZy1ldmFsdWF0ZSc6IGhhc19sYW5nX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnaGFzLXRleHQtY29udGVudC1ldmFsdWF0ZSc6IGhhc1RleHRDb250ZW50RXZhbHVhdGUsXG4gICAgICAnaGFzLXdpZGdldC1yb2xlLWV2YWx1YXRlJzogaGFzX3dpZGdldF9yb2xlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnaGVhZGluZy1tYXRjaGVzJzogaGVhZGluZ01hdGNoZXMsXG4gICAgICAnaGVhZGluZy1vcmRlci1hZnRlcic6IGhlYWRpbmdPcmRlckFmdGVyLFxuICAgICAgJ2hlYWRpbmctb3JkZXItZXZhbHVhdGUnOiBoZWFkaW5nX29yZGVyX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnaGVscC1zYW1lLWFzLWxhYmVsLWV2YWx1YXRlJzogaGVscF9zYW1lX2FzX2xhYmVsX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnaGlkZGVuLWNvbnRlbnQtZXZhbHVhdGUnOiBoaWRkZW5fY29udGVudF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2hpZGRlbi1leHBsaWNpdC1sYWJlbC1ldmFsdWF0ZSc6IGhpZGRlbl9leHBsaWNpdF9sYWJlbF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2h0bWwtbmFtZXNwYWNlLW1hdGNoZXMnOiBodG1sX25hbWVzcGFjZV9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnaHRtbDUtc2NvcGUtZXZhbHVhdGUnOiBodG1sNV9zY29wZV9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2lkZW50aWNhbC1saW5rcy1zYW1lLXB1cnBvc2UtYWZ0ZXInOiBpZGVudGljYWxfbGlua3Nfc2FtZV9wdXJwb3NlX2FmdGVyX2RlZmF1bHQsXG4gICAgICAnaWRlbnRpY2FsLWxpbmtzLXNhbWUtcHVycG9zZS1ldmFsdWF0ZSc6IGlkZW50aWNhbF9saW5rc19zYW1lX3B1cnBvc2VfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdpZGVudGljYWwtbGlua3Mtc2FtZS1wdXJwb3NlLW1hdGNoZXMnOiBpZGVudGljYWxfbGlua3Nfc2FtZV9wdXJwb3NlX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdpbXBsaWNpdC1ldmFsdWF0ZSc6IGltcGxpY2l0X2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnaW5saW5lLXN0eWxlLXByb3BlcnR5LWV2YWx1YXRlJzogaW5saW5lU3R5bGVQcm9wZXJ0eSxcbiAgICAgICdpbnNlcnRlZC1pbnRvLWZvY3VzLW9yZGVyLW1hdGNoZXMnOiBpbnNlcnRlZF9pbnRvX2ZvY3VzX29yZGVyX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdpbnRlcm5hbC1saW5rLXByZXNlbnQtZXZhbHVhdGUnOiBpbnRlcm5hbF9saW5rX3ByZXNlbnRfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdpbnZhbGlkLWNoaWxkcmVuLWV2YWx1YXRlJzogaW52YWxpZENoaWxkcmVuRXZhbHVhdGUsXG4gICAgICAnaW52YWxpZHJvbGUtZXZhbHVhdGUnOiBpbnZhbGlkcm9sZV9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2lzLWVsZW1lbnQtZm9jdXNhYmxlLWV2YWx1YXRlJzogaXNfZWxlbWVudF9mb2N1c2FibGVfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdpcy1pbml0aWF0b3ItbWF0Y2hlcyc6IGlzX2luaXRpYXRvcl9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnaXMtb24tc2NyZWVuLWV2YWx1YXRlJzogaXNfb25fc2NyZWVuX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnaXMtdmlzaWJsZS1tYXRjaGVzJzogaGFzVmlzaWJsZVRleHRNYXRjaGVzLFxuICAgICAgJ2lzLXZpc2libGUtb24tc2NyZWVuLW1hdGNoZXMnOiBpc1Zpc2libGVPblNjcmVlbk1hdGNoZXMsXG4gICAgICAnbGFiZWwtY29udGVudC1uYW1lLW1pc21hdGNoLWV2YWx1YXRlJzogbGFiZWxfY29udGVudF9uYW1lX21pc21hdGNoX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnbGFiZWwtY29udGVudC1uYW1lLW1pc21hdGNoLW1hdGNoZXMnOiBsYWJlbF9jb250ZW50X25hbWVfbWlzbWF0Y2hfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ2xhYmVsLW1hdGNoZXMnOiBsYWJlbF9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnbGFuZG1hcmstaGFzLWJvZHktY29udGV4dC1tYXRjaGVzJzogbGFuZG1hcmtfaGFzX2JvZHlfY29udGV4dF9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnbGFuZG1hcmstaXMtdG9wLWxldmVsLWV2YWx1YXRlJzogbGFuZG1hcmtfaXNfdG9wX2xldmVsX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnbGFuZG1hcmstaXMtdW5pcXVlLWFmdGVyJzogbGFuZG1hcmtfaXNfdW5pcXVlX2FmdGVyX2RlZmF1bHQsXG4gICAgICAnbGFuZG1hcmstaXMtdW5pcXVlLWV2YWx1YXRlJzogbGFuZG1hcmtfaXNfdW5pcXVlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnbGFuZG1hcmstdW5pcXVlLW1hdGNoZXMnOiBsYW5kbWFya1VuaXF1ZU1hdGNoZXMsXG4gICAgICAnbGF5b3V0LXRhYmxlLW1hdGNoZXMnOiBsYXlvdXRfdGFibGVfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ2xpbmstaW4tdGV4dC1ibG9jay1ldmFsdWF0ZSc6IGxpbmtfaW5fdGV4dF9ibG9ja19ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ2xpbmstaW4tdGV4dC1ibG9jay1tYXRjaGVzJzogbGlua19pbl90ZXh0X2Jsb2NrX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdsaW5rLWluLXRleHQtYmxvY2stc3R5bGUtZXZhbHVhdGUnOiBsaW5rSW5UZXh0QmxvY2tTdHlsZUV2YWx1YXRlLFxuICAgICAgJ2xpc3RpdGVtLWV2YWx1YXRlJzogbGlzdGl0ZW1FdmFsdWF0ZSxcbiAgICAgICdtYXRjaGVzLWRlZmluaXRpb24tZXZhbHVhdGUnOiBtYXRjaGVzX2RlZmluaXRpb25fZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdtZXRhLXJlZnJlc2gtZXZhbHVhdGUnOiBtZXRhUmVmcmVzaEV2YWx1YXRlLFxuICAgICAgJ21ldGEtdmlld3BvcnQtc2NhbGUtZXZhbHVhdGUnOiBtZXRhX3ZpZXdwb3J0X3NjYWxlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnbXVsdGlwbGUtbGFiZWwtZXZhbHVhdGUnOiBtdWx0aXBsZV9sYWJlbF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ25lc3RlZC1pbnRlcmFjdGl2ZS1tYXRjaGVzJzogbmVzdGVkX2ludGVyYWN0aXZlX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICduby1hdXRvcGxheS1hdWRpby1ldmFsdWF0ZSc6IG5vX2F1dG9wbGF5X2F1ZGlvX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnbm8tYXV0b3BsYXktYXVkaW8tbWF0Y2hlcyc6IG5vX2F1dG9wbGF5X2F1ZGlvX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICduby1lbXB0eS1yb2xlLW1hdGNoZXMnOiBub19lbXB0eV9yb2xlX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICduby1leHBsaWNpdC1uYW1lLXJlcXVpcmVkLW1hdGNoZXMnOiBub19leHBsaWNpdF9uYW1lX3JlcXVpcmVkX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICduby1mb2N1c2FibGUtY29udGVudC1ldmFsdWF0ZSc6IG5vRm9jdXNhYmxlQ29udGVudEV2YWx1YXRlLFxuICAgICAgJ25vLWltcGxpY2l0LWV4cGxpY2l0LWxhYmVsLWV2YWx1YXRlJzogbm9faW1wbGljaXRfZXhwbGljaXRfbGFiZWxfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICduby1uYW1pbmctbWV0aG9kLW1hdGNoZXMnOiBub19uYW1pbmdfbWV0aG9kX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICduby1uZWdhdGl2ZS10YWJpbmRleC1tYXRjaGVzJzogbm9fbmVnYXRpdmVfdGFiaW5kZXhfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ25vLXJvbGUtbWF0Y2hlcyc6IG5vX3JvbGVfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ25vbi1lbXB0eS1pZi1wcmVzZW50LWV2YWx1YXRlJzogbm9uX2VtcHR5X2lmX3ByZXNlbnRfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdub3QtaHRtbC1tYXRjaGVzJzogbm90X2h0bWxfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ29iamVjdC1pcy1sb2FkZWQtbWF0Y2hlcyc6IG9iamVjdF9pc19sb2FkZWRfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ29ubHktZGxpdGVtcy1ldmFsdWF0ZSc6IG9ubHlEbGl0ZW1zRXZhbHVhdGUsXG4gICAgICAnb25seS1saXN0aXRlbXMtZXZhbHVhdGUnOiBvbmx5X2xpc3RpdGVtc19ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ3AtYXMtaGVhZGluZy1ldmFsdWF0ZSc6IHBfYXNfaGVhZGluZ19ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ3AtYXMtaGVhZGluZy1tYXRjaGVzJzogcF9hc19oZWFkaW5nX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICdwYWdlLW5vLWR1cGxpY2F0ZS1hZnRlcic6IHBhZ2Vfbm9fZHVwbGljYXRlX2FmdGVyX2RlZmF1bHQsXG4gICAgICAncGFnZS1uby1kdXBsaWNhdGUtZXZhbHVhdGUnOiBwYWdlX25vX2R1cGxpY2F0ZV9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ3ByZXNlbnRhdGlvbi1yb2xlLWNvbmZsaWN0LW1hdGNoZXMnOiBwcmVzZW50YXRpb25fcm9sZV9jb25mbGljdF9tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAncHJlc2VudGF0aW9uYWwtcm9sZS1ldmFsdWF0ZSc6IHByZXNlbnRhdGlvbmFsUm9sZUV2YWx1YXRlLFxuICAgICAgJ3JlZ2lvbi1hZnRlcic6IHJlZ2lvbl9hZnRlcl9kZWZhdWx0LFxuICAgICAgJ3JlZ2lvbi1ldmFsdWF0ZSc6IHJlZ2lvbkV2YWx1YXRlLFxuICAgICAgJ3NhbWUtY2FwdGlvbi1zdW1tYXJ5LWV2YWx1YXRlJzogc2FtZV9jYXB0aW9uX3N1bW1hcnlfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdzY29wZS12YWx1ZS1ldmFsdWF0ZSc6IHNjb3BlX3ZhbHVlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnc2Nyb2xsYWJsZS1yZWdpb24tZm9jdXNhYmxlLW1hdGNoZXMnOiBzY3JvbGxhYmxlUmVnaW9uRm9jdXNhYmxlTWF0Y2hlcyxcbiAgICAgICdza2lwLWxpbmstZXZhbHVhdGUnOiBza2lwX2xpbmtfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICdza2lwLWxpbmstbWF0Y2hlcyc6IHNraXBfbGlua19tYXRjaGVzX2RlZmF1bHQsXG4gICAgICAnc3RydWN0dXJlZC1kbGl0ZW1zLWV2YWx1YXRlJzogc3RydWN0dXJlZF9kbGl0ZW1zX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnc3VtbWFyeS1pbnRlcmFjdGl2ZS1tYXRjaGVzJzogc3VtbWFyeUlzSW50ZXJhY3RpdmVNYXRjaGVzLFxuICAgICAgJ3N2Zy1uYW1lc3BhY2UtbWF0Y2hlcyc6IHN2Z19uYW1lc3BhY2VfbWF0Y2hlc19kZWZhdWx0LFxuICAgICAgJ3N2Zy1ub24tZW1wdHktdGl0bGUtZXZhbHVhdGUnOiBzdmdfbm9uX2VtcHR5X3RpdGxlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAndGFiaW5kZXgtZXZhbHVhdGUnOiB0YWJpbmRleF9ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ3RhYmxlLW9yLWdyaWQtcm9sZS1tYXRjaGVzJzogdGFibGVPckdyaWRSb2xlTWF0Y2hlcyxcbiAgICAgICd0YXJnZXQtb2Zmc2V0LWV2YWx1YXRlJzogdGFyZ2V0T2Zmc2V0RXZhbHVhdGUsXG4gICAgICAndGFyZ2V0LXNpemUtZXZhbHVhdGUnOiB0YXJnZXRTaXplRXZhbHVhdGUsXG4gICAgICAndGQtaGFzLWhlYWRlci1ldmFsdWF0ZSc6IHRkX2hhc19oZWFkZXJfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICd0ZC1oZWFkZXJzLWF0dHItZXZhbHVhdGUnOiB0ZEhlYWRlcnNBdHRyRXZhbHVhdGUsXG4gICAgICAndGgtaGFzLWRhdGEtY2VsbHMtZXZhbHVhdGUnOiB0aF9oYXNfZGF0YV9jZWxsc19ldmFsdWF0ZV9kZWZhdWx0LFxuICAgICAgJ3RpdGxlLW9ubHktZXZhbHVhdGUnOiB0aXRsZV9vbmx5X2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAndW5pcXVlLWZyYW1lLXRpdGxlLWFmdGVyJzogdW5pcXVlX2ZyYW1lX3RpdGxlX2FmdGVyX2RlZmF1bHQsXG4gICAgICAndW5pcXVlLWZyYW1lLXRpdGxlLWV2YWx1YXRlJzogdW5pcXVlX2ZyYW1lX3RpdGxlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAndW5zdXBwb3J0ZWRyb2xlLWV2YWx1YXRlJzogdW5zdXBwb3J0ZWRyb2xlX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAndmFsaWQtbGFuZy1ldmFsdWF0ZSc6IHZhbGlkX2xhbmdfZXZhbHVhdGVfZGVmYXVsdCxcbiAgICAgICd2YWxpZC1zY3JvbGxhYmxlLXNlbWFudGljcy1ldmFsdWF0ZSc6IHZhbGlkX3Njcm9sbGFibGVfc2VtYW50aWNzX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAnd2lkZ2V0LW5vdC1pbmxpbmUtbWF0Y2hlcyc6IHdpZGdldE5vdElubGluZSxcbiAgICAgICd3aW5kb3ctaXMtdG9wLW1hdGNoZXMnOiB3aW5kb3dfaXNfdG9wX21hdGNoZXNfZGVmYXVsdCxcbiAgICAgICd4bWwtbGFuZy1taXNtYXRjaC1ldmFsdWF0ZSc6IHhtbF9sYW5nX21pc21hdGNoX2V2YWx1YXRlX2RlZmF1bHQsXG4gICAgICAneG1sLWxhbmctbWlzbWF0Y2gtbWF0Y2hlcyc6IHhtbF9sYW5nX21pc21hdGNoX21hdGNoZXNfZGVmYXVsdFxuICAgIH07XG4gICAgdmFyIG1ldGFkYXRhX2Z1bmN0aW9uX21hcF9kZWZhdWx0ID0gbWV0YWRhdGFGdW5jdGlvbk1hcDtcbiAgICBmdW5jdGlvbiBDaGVja1Jlc3VsdChjaGVjaykge1xuICAgICAgdGhpcy5pZCA9IGNoZWNrLmlkO1xuICAgICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICAgIHRoaXMucmVsYXRlZE5vZGVzID0gW107XG4gICAgICB0aGlzLnJlc3VsdCA9IG51bGw7XG4gICAgfVxuICAgIHZhciBjaGVja19yZXN1bHRfZGVmYXVsdCA9IENoZWNrUmVzdWx0O1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUV4ZWN1dGlvbkNvbnRleHQoc3BlYykge1xuICAgICAgaWYgKHR5cGVvZiBzcGVjID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAobWV0YWRhdGFfZnVuY3Rpb25fbWFwX2RlZmF1bHRbc3BlY10pIHtcbiAgICAgICAgICByZXR1cm4gbWV0YWRhdGFfZnVuY3Rpb25fbWFwX2RlZmF1bHRbc3BlY107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9eXFxzKmZ1bmN0aW9uW1xcc1xcd10qXFwoLy50ZXN0KHNwZWMpKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBzcGVjICsgJzsnKSgpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignRnVuY3Rpb24gSUQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG1ldGFkYXRhLWZ1bmN0aW9uLW1hcDogJy5jb25jYXQoc3BlYykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNwZWM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9wdGlvbnMoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSB8fCBfdHlwZW9mKG9wdGlvbnMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgIHZhbHVlOiBvcHRpb25zXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gQ2hlY2soc3BlYykge1xuICAgICAgaWYgKHNwZWMpIHtcbiAgICAgICAgdGhpcy5pZCA9IHNwZWMuaWQ7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKHNwZWMpO1xuICAgICAgfVxuICAgIH1cbiAgICBDaGVjay5wcm90b3R5cGUuZW5hYmxlZCA9IHRydWU7XG4gICAgQ2hlY2sucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1bihub2RlLCBvcHRpb25zLCBjb250ZXh0LCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIGVuYWJsZWQgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdlbmFibGVkJykgPyBvcHRpb25zLmVuYWJsZWQgOiB0aGlzLmVuYWJsZWQ7XG4gICAgICB2YXIgY2hlY2tPcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMub3B0aW9ucyk7XG4gICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICB2YXIgY2hlY2tSZXN1bHQgPSBuZXcgY2hlY2tfcmVzdWx0X2RlZmF1bHQodGhpcyk7XG4gICAgICAgIHZhciBoZWxwZXIgPSBjaGVja19oZWxwZXJfZGVmYXVsdChjaGVja1Jlc3VsdCwgb3B0aW9ucywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLmV2YWx1YXRlLmNhbGwoaGVscGVyLCBub2RlLmFjdHVhbE5vZGUsIGNoZWNrT3B0aW9ucywgbm9kZSwgY29udGV4dCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAobm9kZSAmJiBub2RlLmFjdHVhbE5vZGUpIHtcbiAgICAgICAgICAgIGUuZXJyb3JOb2RlID0gbm9kZV9zZXJpYWxpemVyX2RlZmF1bHQudG9TcGVjKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaGVscGVyLmlzQXN5bmMpIHtcbiAgICAgICAgICBjaGVja1Jlc3VsdC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgcmVzb2x2ZShjaGVja1Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBDaGVjay5wcm90b3R5cGUucnVuU3luYyA9IGZ1bmN0aW9uIHJ1blN5bmMobm9kZSwgb3B0aW9ucywgY29udGV4dCkge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgX29wdGlvbnMzID0gb3B0aW9ucywgX29wdGlvbnMzJGVuYWJsZWQgPSBfb3B0aW9uczMuZW5hYmxlZCwgZW5hYmxlZCA9IF9vcHRpb25zMyRlbmFibGVkID09PSB2b2lkIDAgPyB0aGlzLmVuYWJsZWQgOiBfb3B0aW9uczMkZW5hYmxlZDtcbiAgICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBjaGVja09wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMob3B0aW9ucy5vcHRpb25zKTtcbiAgICAgIHZhciBjaGVja1Jlc3VsdCA9IG5ldyBjaGVja19yZXN1bHRfZGVmYXVsdCh0aGlzKTtcbiAgICAgIHZhciBoZWxwZXIgPSBjaGVja19oZWxwZXJfZGVmYXVsdChjaGVja1Jlc3VsdCwgb3B0aW9ucyk7XG4gICAgICBoZWxwZXIuYXN5bmMgPSBmdW5jdGlvbiBhc3luYygpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcnVuIGFzeW5jIGNoZWNrIHdoaWxlIGluIGEgc3luY2hyb25vdXMgcnVuJyk7XG4gICAgICB9O1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuZXZhbHVhdGUuY2FsbChoZWxwZXIsIG5vZGUuYWN0dWFsTm9kZSwgY2hlY2tPcHRpb25zLCBub2RlLCBjb250ZXh0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5hY3R1YWxOb2RlKSB7XG4gICAgICAgICAgZS5lcnJvck5vZGUgPSBub2RlX3NlcmlhbGl6ZXJfZGVmYXVsdC50b1NwZWMobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICAgIGNoZWNrUmVzdWx0LnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgIHJldHVybiBjaGVja1Jlc3VsdDtcbiAgICB9O1xuICAgIENoZWNrLnByb3RvdHlwZS5jb25maWd1cmUgPSBmdW5jdGlvbiBjb25maWd1cmUyKHNwZWMpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuICAgICAgaWYgKCFzcGVjLmV2YWx1YXRlIHx8IG1ldGFkYXRhX2Z1bmN0aW9uX21hcF9kZWZhdWx0W3NwZWMuZXZhbHVhdGVdKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsQ2hlY2sgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoJ2VuYWJsZWQnKSkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBzcGVjLmVuYWJsZWQ7XG4gICAgICB9XG4gICAgICBpZiAoc3BlYy5oYXNPd25Qcm9wZXJ0eSgnb3B0aW9ucycpKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbENoZWNrKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zID0gbm9ybWFsaXplT3B0aW9ucyhzcGVjLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHNwZWMub3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgWyAnZXZhbHVhdGUnLCAnYWZ0ZXInIF0uZmlsdGVyKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHNwZWMuaGFzT3duUHJvcGVydHkocHJvcCk7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIF90aGlzOFtwcm9wXSA9IGNyZWF0ZUV4ZWN1dGlvbkNvbnRleHQoc3BlY1twcm9wXSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIENoZWNrLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5faW50ZXJuYWxDaGVjaykge1xuICAgICAgICByZXR1cm4gZGVlcF9tZXJnZV9kZWZhdWx0KHRoaXMub3B0aW9ucywgbm9ybWFsaXplT3B0aW9ucyhvcHRpb25zIHx8IHt9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3B0aW9ucyB8fCB0aGlzLm9wdGlvbnM7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgY2hlY2tfZGVmYXVsdCA9IENoZWNrO1xuICAgIGZ1bmN0aW9uIFJ1bGVSZXN1bHQocnVsZSkge1xuICAgICAgdGhpcy5pZCA9IHJ1bGUuaWQ7XG4gICAgICB0aGlzLnJlc3VsdCA9IGNvbnN0YW50c19kZWZhdWx0Lk5BO1xuICAgICAgdGhpcy5wYWdlTGV2ZWwgPSBydWxlLnBhZ2VMZXZlbDtcbiAgICAgIHRoaXMuaW1wYWN0ID0gbnVsbDtcbiAgICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgICB9XG4gICAgdmFyIHJ1bGVfcmVzdWx0X2RlZmF1bHQgPSBSdWxlUmVzdWx0O1xuICAgIGZ1bmN0aW9uIFJ1bGUoc3BlYywgcGFyZW50QXVkaXQpIHtcbiAgICAgIHRoaXMuX2F1ZGl0ID0gcGFyZW50QXVkaXQ7XG4gICAgICB0aGlzLmlkID0gc3BlYy5pZDtcbiAgICAgIHRoaXMuc2VsZWN0b3IgPSBzcGVjLnNlbGVjdG9yIHx8ICcqJztcbiAgICAgIGlmIChzcGVjLmltcGFjdCkge1xuICAgICAgICBhc3NlcnRfZGVmYXVsdChjb25zdGFudHNfZGVmYXVsdC5pbXBhY3QuaW5jbHVkZXMoc3BlYy5pbXBhY3QpLCAnSW1wYWN0ICcuY29uY2F0KHNwZWMuaW1wYWN0LCAnIGlzIG5vdCBhIHZhbGlkIGltcGFjdCcpKTtcbiAgICAgICAgdGhpcy5pbXBhY3QgPSBzcGVjLmltcGFjdDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXhjbHVkZUhpZGRlbiA9IHR5cGVvZiBzcGVjLmV4Y2x1ZGVIaWRkZW4gPT09ICdib29sZWFuJyA/IHNwZWMuZXhjbHVkZUhpZGRlbiA6IHRydWU7XG4gICAgICB0aGlzLmVuYWJsZWQgPSB0eXBlb2Ygc3BlYy5lbmFibGVkID09PSAnYm9vbGVhbicgPyBzcGVjLmVuYWJsZWQgOiB0cnVlO1xuICAgICAgdGhpcy5wYWdlTGV2ZWwgPSB0eXBlb2Ygc3BlYy5wYWdlTGV2ZWwgPT09ICdib29sZWFuJyA/IHNwZWMucGFnZUxldmVsIDogZmFsc2U7XG4gICAgICB0aGlzLnJldmlld09uRmFpbCA9IHR5cGVvZiBzcGVjLnJldmlld09uRmFpbCA9PT0gJ2Jvb2xlYW4nID8gc3BlYy5yZXZpZXdPbkZhaWwgOiBmYWxzZTtcbiAgICAgIHRoaXMuYW55ID0gc3BlYy5hbnkgfHwgW107XG4gICAgICB0aGlzLmFsbCA9IHNwZWMuYWxsIHx8IFtdO1xuICAgICAgdGhpcy5ub25lID0gc3BlYy5ub25lIHx8IFtdO1xuICAgICAgdGhpcy50YWdzID0gc3BlYy50YWdzIHx8IFtdO1xuICAgICAgdGhpcy5wcmVsb2FkID0gc3BlYy5wcmVsb2FkID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgdGhpcy5hY3RJZHMgPSBzcGVjLmFjdElkcztcbiAgICAgIGlmIChzcGVjLm1hdGNoZXMpIHtcbiAgICAgICAgdGhpcy5tYXRjaGVzID0gY3JlYXRlRXhlY3V0aW9uQ29udGV4dChzcGVjLm1hdGNoZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBSdWxlLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gbWF0Y2hlczMoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFJ1bGUucHJvdG90eXBlLmdhdGhlciA9IGZ1bmN0aW9uIGdhdGhlcihjb250ZXh0KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgbWFya1N0YXJ0ID0gJ21hcmtfZ2F0aGVyX3N0YXJ0XycgKyB0aGlzLmlkO1xuICAgICAgdmFyIG1hcmtFbmQgPSAnbWFya19nYXRoZXJfZW5kXycgKyB0aGlzLmlkO1xuICAgICAgdmFyIG1hcmtIaWRkZW5TdGFydCA9ICdtYXJrX2lzVmlzaWJsZVRvU2NyZWVuUmVhZGVyc19zdGFydF8nICsgdGhpcy5pZDtcbiAgICAgIHZhciBtYXJrSGlkZGVuRW5kID0gJ21hcmtfaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzX2VuZF8nICsgdGhpcy5pZDtcbiAgICAgIGlmIChvcHRpb25zLnBlcmZvcm1hbmNlVGltZXIpIHtcbiAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tYXJrKG1hcmtTdGFydCk7XG4gICAgICB9XG4gICAgICB2YXIgZWxlbWVudHMgPSBfc2VsZWN0KHRoaXMuc2VsZWN0b3IsIGNvbnRleHQpO1xuICAgICAgaWYgKHRoaXMuZXhjbHVkZUhpZGRlbikge1xuICAgICAgICBpZiAob3B0aW9ucy5wZXJmb3JtYW5jZVRpbWVyKSB7XG4gICAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tYXJrKG1hcmtIaWRkZW5TdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudHMgPSBlbGVtZW50cy5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBfaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzKGVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9wdGlvbnMucGVyZm9ybWFuY2VUaW1lcikge1xuICAgICAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQubWFyayhtYXJrSGlkZGVuRW5kKTtcbiAgICAgICAgICBwZXJmb3JtYW5jZV90aW1lcl9kZWZhdWx0Lm1lYXN1cmUoJ3J1bGVfJyArIHRoaXMuaWQgKyAnI2dhdGhlcl9heGUudXRpbHMuaXNWaXNpYmxlVG9TY3JlZW5SZWFkZXJzJywgbWFya0hpZGRlblN0YXJ0LCBtYXJrSGlkZGVuRW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMucGVyZm9ybWFuY2VUaW1lcikge1xuICAgICAgICBwZXJmb3JtYW5jZV90aW1lcl9kZWZhdWx0Lm1hcmsobWFya0VuZCk7XG4gICAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQubWVhc3VyZSgncnVsZV8nICsgdGhpcy5pZCArICcjZ2F0aGVyJywgbWFya1N0YXJ0LCBtYXJrRW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9O1xuICAgIFJ1bGUucHJvdG90eXBlLnJ1bkNoZWNrcyA9IGZ1bmN0aW9uIHJ1bkNoZWNrcyh0eXBlMiwgbm9kZSwgb3B0aW9ucywgY29udGV4dCwgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgc2VsZjIgPSB0aGlzO1xuICAgICAgdmFyIGNoZWNrUXVldWUgPSBxdWV1ZV9kZWZhdWx0KCk7XG4gICAgICB0aGlzW3R5cGUyXS5mb3JFYWNoKGZ1bmN0aW9uKGM0KSB7XG4gICAgICAgIHZhciBjaGVjayA9IHNlbGYyLl9hdWRpdC5jaGVja3NbYzQuaWQgfHwgYzRdO1xuICAgICAgICB2YXIgb3B0aW9uID0gZ2V0X2NoZWNrX29wdGlvbl9kZWZhdWx0KGNoZWNrLCBzZWxmMi5pZCwgb3B0aW9ucyk7XG4gICAgICAgIGNoZWNrUXVldWUuZGVmZXIoZnVuY3Rpb24ocmVzLCByZWopIHtcbiAgICAgICAgICBjaGVjay5ydW4obm9kZSwgb3B0aW9uLCBjb250ZXh0LCByZXMsIHJlaik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBjaGVja1F1ZXVlLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24oY2hlY2spIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICB0eXBlOiB0eXBlMixcbiAgICAgICAgICByZXN1bHRzOiByZXN1bHRzXG4gICAgICAgIH0pO1xuICAgICAgfSlbJ2NhdGNoJ10ocmVqZWN0KTtcbiAgICB9O1xuICAgIFJ1bGUucHJvdG90eXBlLnJ1bkNoZWNrc1N5bmMgPSBmdW5jdGlvbiBydW5DaGVja3NTeW5jKHR5cGUyLCBub2RlLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgICB2YXIgc2VsZjIgPSB0aGlzO1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHRoaXNbdHlwZTJdLmZvckVhY2goZnVuY3Rpb24oYzQpIHtcbiAgICAgICAgdmFyIGNoZWNrID0gc2VsZjIuX2F1ZGl0LmNoZWNrc1tjNC5pZCB8fCBjNF07XG4gICAgICAgIHZhciBvcHRpb24gPSBnZXRfY2hlY2tfb3B0aW9uX2RlZmF1bHQoY2hlY2ssIHNlbGYyLmlkLCBvcHRpb25zKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGNoZWNrLnJ1blN5bmMobm9kZSwgb3B0aW9uLCBjb250ZXh0KSk7XG4gICAgICB9KTtcbiAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbihjaGVjaykge1xuICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGUyLFxuICAgICAgICByZXN1bHRzOiByZXN1bHRzXG4gICAgICB9O1xuICAgIH07XG4gICAgUnVsZS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuMihjb250ZXh0KSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciByZXNvbHZlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVqZWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAob3B0aW9ucy5wZXJmb3JtYW5jZVRpbWVyKSB7XG4gICAgICAgIHRoaXMuX3RyYWNrUGVyZm9ybWFuY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBxID0gcXVldWVfZGVmYXVsdCgpO1xuICAgICAgdmFyIHJ1bGVSZXN1bHQgPSBuZXcgcnVsZV9yZXN1bHRfZGVmYXVsdCh0aGlzKTtcbiAgICAgIHZhciBub2RlcztcbiAgICAgIHRyeSB7XG4gICAgICAgIG5vZGVzID0gdGhpcy5nYXRoZXJBbmRNYXRjaE5vZGVzKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBTdXBwb3J0RXJyb3Ioe1xuICAgICAgICAgIGNhdXNlOiBlcnJvcixcbiAgICAgICAgICBydWxlSWQ6IHRoaXMuaWRcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5wZXJmb3JtYW5jZVRpbWVyKSB7XG4gICAgICAgIHRoaXMuX2xvZ0dhdGhlclBlcmZvcm1hbmNlKG5vZGVzKTtcbiAgICAgIH1cbiAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBxLmRlZmVyKGZ1bmN0aW9uKHJlc29sdmVOb2RlLCByZWplY3ROb2RlKSB7XG4gICAgICAgICAgdmFyIGNoZWNrUXVldWUgPSBxdWV1ZV9kZWZhdWx0KCk7XG4gICAgICAgICAgWyAnYW55JywgJ2FsbCcsICdub25lJyBdLmZvckVhY2goZnVuY3Rpb24odHlwZTIpIHtcbiAgICAgICAgICAgIGNoZWNrUXVldWUuZGVmZXIoZnVuY3Rpb24ocmVzLCByZWopIHtcbiAgICAgICAgICAgICAgX3RoaXM5LnJ1bkNoZWNrcyh0eXBlMiwgbm9kZSwgb3B0aW9ucywgY29udGV4dCwgcmVzLCByZWopO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2hlY2tRdWV1ZS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXRSZXN1bHQocmVzdWx0cyk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5ub2RlID0gbmV3IGRxX2VsZW1lbnRfZGVmYXVsdChub2RlKTtcbiAgICAgICAgICAgICAgcnVsZVJlc3VsdC5ub2Rlcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgIGlmIChfdGhpczkucmV2aWV3T25GYWlsKSB7XG4gICAgICAgICAgICAgICAgWyAnYW55JywgJ2FsbCcgXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUyKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHRbdHlwZTJdLmZvckVhY2goZnVuY3Rpb24oY2hlY2tSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrUmVzdWx0LnJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGVja1Jlc3VsdC5yZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5ub25lLmZvckVhY2goZnVuY3Rpb24oY2hlY2tSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGVja1Jlc3VsdC5yZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tSZXN1bHQucmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlTm9kZSgpO1xuICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uKGVycjIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3ROb2RlKGVycjIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5wZXJmb3JtYW5jZVRpbWVyKSB7XG4gICAgICAgICAgX3RoaXM5Ll9sb2dSdWxlUGVyZm9ybWFuY2UoKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJlc29sdmUocnVsZVJlc3VsdCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucGVyZm9ybWFuY2VUaW1lcikge1xuICAgICAgICAgIF90aGlzOS5fbG9nUnVsZVBlcmZvcm1hbmNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgUnVsZS5wcm90b3R5cGUucnVuU3luYyA9IGZ1bmN0aW9uIHJ1blN5bmMyKGNvbnRleHQpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIGlmIChvcHRpb25zLnBlcmZvcm1hbmNlVGltZXIpIHtcbiAgICAgICAgdGhpcy5fdHJhY2tQZXJmb3JtYW5jZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJ1bGVSZXN1bHQgPSBuZXcgcnVsZV9yZXN1bHRfZGVmYXVsdCh0aGlzKTtcbiAgICAgIHZhciBub2RlcztcbiAgICAgIHRyeSB7XG4gICAgICAgIG5vZGVzID0gdGhpcy5nYXRoZXJBbmRNYXRjaE5vZGVzKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN1cHBvcnRFcnJvcih7XG4gICAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgICAgIHJ1bGVJZDogdGhpcy5pZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnBlcmZvcm1hbmNlVGltZXIpIHtcbiAgICAgICAgdGhpcy5fbG9nR2F0aGVyUGVyZm9ybWFuY2Uobm9kZXMpO1xuICAgICAgfVxuICAgICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIFsgJ2FueScsICdhbGwnLCAnbm9uZScgXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUyKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKF90aGlzMTAucnVuQ2hlY2tzU3luYyh0eXBlMiwgbm9kZSwgb3B0aW9ucywgY29udGV4dCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGdldFJlc3VsdChyZXN1bHRzKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdC5ub2RlID0gbm9kZS5hY3R1YWxOb2RlID8gbmV3IGRxX2VsZW1lbnRfZGVmYXVsdChub2RlKSA6IG51bGw7XG4gICAgICAgICAgcnVsZVJlc3VsdC5ub2Rlcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgaWYgKF90aGlzMTAucmV2aWV3T25GYWlsKSB7XG4gICAgICAgICAgICBbICdhbnknLCAnYWxsJyBdLmZvckVhY2goZnVuY3Rpb24odHlwZTIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0W3R5cGUyXS5mb3JFYWNoKGZ1bmN0aW9uKGNoZWNrUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrUmVzdWx0LnJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrUmVzdWx0LnJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQubm9uZS5mb3JFYWNoKGZ1bmN0aW9uKGNoZWNrUmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmIChjaGVja1Jlc3VsdC5yZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjaGVja1Jlc3VsdC5yZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAob3B0aW9ucy5wZXJmb3JtYW5jZVRpbWVyKSB7XG4gICAgICAgIHRoaXMuX2xvZ1J1bGVQZXJmb3JtYW5jZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJ1bGVSZXN1bHQ7XG4gICAgfTtcbiAgICBSdWxlLnByb3RvdHlwZS5fdHJhY2tQZXJmb3JtYW5jZSA9IGZ1bmN0aW9uIF90cmFja1BlcmZvcm1hbmNlKCkge1xuICAgICAgdGhpcy5fbWFya1N0YXJ0ID0gJ21hcmtfcnVsZV9zdGFydF8nICsgdGhpcy5pZDtcbiAgICAgIHRoaXMuX21hcmtFbmQgPSAnbWFya19ydWxlX2VuZF8nICsgdGhpcy5pZDtcbiAgICAgIHRoaXMuX21hcmtDaGVja3NTdGFydCA9ICdtYXJrX3J1bmNoZWNrc19zdGFydF8nICsgdGhpcy5pZDtcbiAgICAgIHRoaXMuX21hcmtDaGVja3NFbmQgPSAnbWFya19ydW5jaGVja3NfZW5kXycgKyB0aGlzLmlkO1xuICAgIH07XG4gICAgUnVsZS5wcm90b3R5cGUuX2xvZ0dhdGhlclBlcmZvcm1hbmNlID0gZnVuY3Rpb24gX2xvZ0dhdGhlclBlcmZvcm1hbmNlKG5vZGVzKSB7XG4gICAgICBsb2dfZGVmYXVsdCgnZ2F0aGVyICgnLCBub2Rlcy5sZW5ndGgsICcpOicsIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQudGltZUVsYXBzZWQoKSArICdtcycpO1xuICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tYXJrKHRoaXMuX21hcmtDaGVja3NTdGFydCk7XG4gICAgfTtcbiAgICBSdWxlLnByb3RvdHlwZS5fbG9nUnVsZVBlcmZvcm1hbmNlID0gZnVuY3Rpb24gX2xvZ1J1bGVQZXJmb3JtYW5jZSgpIHtcbiAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQubWFyayh0aGlzLl9tYXJrQ2hlY2tzRW5kKTtcbiAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQubWFyayh0aGlzLl9tYXJrRW5kKTtcbiAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQubWVhc3VyZSgncnVuY2hlY2tzXycgKyB0aGlzLmlkLCB0aGlzLl9tYXJrQ2hlY2tzU3RhcnQsIHRoaXMuX21hcmtDaGVja3NFbmQpO1xuICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tZWFzdXJlKCdydWxlXycgKyB0aGlzLmlkLCB0aGlzLl9tYXJrU3RhcnQsIHRoaXMuX21hcmtFbmQpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gZ2V0UmVzdWx0KHJlc3VsdHMpIHtcbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaGFzUmVzdWx0cyA9IGZhbHNlO1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgdmFyIHJlcyA9IHIucmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24oX3Jlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzdWx0W3IudHlwZV0gPSByZXM7XG4gICAgICAgICAgaWYgKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhhc1Jlc3VsdHMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChoYXNSZXN1bHRzKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgUnVsZS5wcm90b3R5cGUuZ2F0aGVyQW5kTWF0Y2hOb2RlcyA9IGZ1bmN0aW9uIGdhdGhlckFuZE1hdGNoTm9kZXMoY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuICAgICAgdmFyIG1hcmtNYXRjaGVzU3RhcnQgPSAnbWFya19tYXRjaGVzX3N0YXJ0XycgKyB0aGlzLmlkO1xuICAgICAgdmFyIG1hcmtNYXRjaGVzRW5kID0gJ21hcmtfbWF0Y2hlc19lbmRfJyArIHRoaXMuaWQ7XG4gICAgICB2YXIgbm9kZXMgPSB0aGlzLmdhdGhlcihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLnBlcmZvcm1hbmNlVGltZXIpIHtcbiAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tYXJrKG1hcmtNYXRjaGVzU3RhcnQpO1xuICAgICAgfVxuICAgICAgbm9kZXMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICByZXR1cm4gX3RoaXMxMS5tYXRjaGVzKG5vZGUuYWN0dWFsTm9kZSwgbm9kZSwgY29udGV4dCk7XG4gICAgICB9KTtcbiAgICAgIGlmIChvcHRpb25zLnBlcmZvcm1hbmNlVGltZXIpIHtcbiAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tYXJrKG1hcmtNYXRjaGVzRW5kKTtcbiAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tZWFzdXJlKCdydWxlXycgKyB0aGlzLmlkICsgJyNtYXRjaGVzJywgbWFya01hdGNoZXNTdGFydCwgbWFya01hdGNoZXNFbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH07XG4gICAgZnVuY3Rpb24gZmluZEFmdGVyQ2hlY2tzKHJ1bGUpIHtcbiAgICAgIHJldHVybiBnZXRfYWxsX2NoZWNrc19kZWZhdWx0KHJ1bGUpLm1hcChmdW5jdGlvbihjNCkge1xuICAgICAgICB2YXIgY2hlY2sgPSBydWxlLl9hdWRpdC5jaGVja3NbYzQuaWQgfHwgYzRdO1xuICAgICAgICByZXR1cm4gY2hlY2sgJiYgdHlwZW9mIGNoZWNrLmFmdGVyID09PSAnZnVuY3Rpb24nID8gY2hlY2sgOiBudWxsO1xuICAgICAgfSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5kQ2hlY2tSZXN1bHRzKG5vZGVzLCBjaGVja0lEKSB7XG4gICAgICB2YXIgY2hlY2tSZXN1bHRzID0gW107XG4gICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGVSZXN1bHQpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IGdldF9hbGxfY2hlY2tzX2RlZmF1bHQobm9kZVJlc3VsdCk7XG4gICAgICAgIGNoZWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNoZWNrUmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGNoZWNrUmVzdWx0LmlkID09PSBjaGVja0lEKSB7XG4gICAgICAgICAgICBjaGVja1Jlc3VsdC5ub2RlID0gbm9kZVJlc3VsdC5ub2RlO1xuICAgICAgICAgICAgY2hlY2tSZXN1bHRzLnB1c2goY2hlY2tSZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjaGVja1Jlc3VsdHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbHRlckNoZWNrcyhjaGVja3MpIHtcbiAgICAgIHJldHVybiBjaGVja3MuZmlsdGVyKGZ1bmN0aW9uKGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBjaGVjay5maWx0ZXJlZCAhPT0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzYW5pdGl6ZU5vZGVzKHJlc3VsdCkge1xuICAgICAgdmFyIGNoZWNrVHlwZXMyID0gWyAnYW55JywgJ2FsbCcsICdub25lJyBdO1xuICAgICAgdmFyIG5vZGVzID0gcmVzdWx0Lm5vZGVzLmZpbHRlcihmdW5jdGlvbihkZXRhaWwpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICAgIGNoZWNrVHlwZXMyLmZvckVhY2goZnVuY3Rpb24odHlwZTIpIHtcbiAgICAgICAgICBkZXRhaWxbdHlwZTJdID0gZmlsdGVyQ2hlY2tzKGRldGFpbFt0eXBlMl0pO1xuICAgICAgICAgIGxlbmd0aCArPSBkZXRhaWxbdHlwZTJdLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsZW5ndGggPiAwO1xuICAgICAgfSk7XG4gICAgICBpZiAocmVzdWx0LnBhZ2VMZXZlbCAmJiBub2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgbm9kZXMgPSBbIG5vZGVzLnJlZHVjZShmdW5jdGlvbihhMiwgYjIpIHtcbiAgICAgICAgICBpZiAoYTIpIHtcbiAgICAgICAgICAgIGNoZWNrVHlwZXMyLmZvckVhY2goZnVuY3Rpb24odHlwZTIpIHtcbiAgICAgICAgICAgICAgYTJbdHlwZTJdLnB1c2guYXBwbHkoYTJbdHlwZTJdLCBiMlt0eXBlMl0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYTI7XG4gICAgICAgICAgfVxuICAgICAgICB9KSBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICBSdWxlLnByb3RvdHlwZS5hZnRlciA9IGZ1bmN0aW9uIGFmdGVyKHJlc3VsdCwgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuICAgICAgdmFyIGFmdGVyQ2hlY2tzID0gZmluZEFmdGVyQ2hlY2tzKHRoaXMpO1xuICAgICAgdmFyIHJ1bGVJRCA9IHRoaXMuaWQ7XG4gICAgICBhZnRlckNoZWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNoZWNrKSB7XG4gICAgICAgIHZhciBiZWZvcmVSZXN1bHRzID0gZmluZENoZWNrUmVzdWx0cyhyZXN1bHQubm9kZXMsIGNoZWNrLmlkKTtcbiAgICAgICAgdmFyIGNoZWNrT3B0aW9uID0gZ2V0X2NoZWNrX29wdGlvbl9kZWZhdWx0KGNoZWNrLCBydWxlSUQsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgYWZ0ZXJSZXN1bHRzID0gY2hlY2suYWZ0ZXIoYmVmb3JlUmVzdWx0cywgY2hlY2tPcHRpb24ub3B0aW9ucyk7XG4gICAgICAgIGlmIChfdGhpczEyLnJldmlld09uRmFpbCkge1xuICAgICAgICAgIGFmdGVyUmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKGNoZWNrUmVzdWx0KSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlQW55QWxsUmVzdWx0cyA9IChfdGhpczEyLmFueS5pbmNsdWRlcyhjaGVja1Jlc3VsdC5pZCkgfHwgX3RoaXMxMi5hbGwuaW5jbHVkZXMoY2hlY2tSZXN1bHQuaWQpKSAmJiBjaGVja1Jlc3VsdC5yZXN1bHQgPT09IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGNoYW5nZU5vbmVSZXN1bHQgPSBfdGhpczEyLm5vbmUuaW5jbHVkZXMoY2hlY2tSZXN1bHQuaWQpICYmIGNoZWNrUmVzdWx0LnJlc3VsdCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VBbnlBbGxSZXN1bHRzIHx8IGNoYW5nZU5vbmVSZXN1bHQpIHtcbiAgICAgICAgICAgICAgY2hlY2tSZXN1bHQucmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJlZm9yZVJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgZGVsZXRlIGl0ZW0ubm9kZTtcbiAgICAgICAgICBpZiAoYWZ0ZXJSZXN1bHRzLmluZGV4T2YoaXRlbSkgPT09IC0xKSB7XG4gICAgICAgICAgICBpdGVtLmZpbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXN1bHQubm9kZXMgPSBzYW5pdGl6ZU5vZGVzKHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgUnVsZS5wcm90b3R5cGUuY29uZmlndXJlID0gZnVuY3Rpb24gY29uZmlndXJlMyhzcGVjKSB7XG4gICAgICBpZiAoc3BlYy5oYXNPd25Qcm9wZXJ0eSgnc2VsZWN0b3InKSkge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc3BlYy5zZWxlY3RvcjtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmhhc093blByb3BlcnR5KCdleGNsdWRlSGlkZGVuJykpIHtcbiAgICAgICAgdGhpcy5leGNsdWRlSGlkZGVuID0gdHlwZW9mIHNwZWMuZXhjbHVkZUhpZGRlbiA9PT0gJ2Jvb2xlYW4nID8gc3BlYy5leGNsdWRlSGlkZGVuIDogdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmhhc093blByb3BlcnR5KCdlbmFibGVkJykpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHlwZW9mIHNwZWMuZW5hYmxlZCA9PT0gJ2Jvb2xlYW4nID8gc3BlYy5lbmFibGVkIDogdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmhhc093blByb3BlcnR5KCdwYWdlTGV2ZWwnKSkge1xuICAgICAgICB0aGlzLnBhZ2VMZXZlbCA9IHR5cGVvZiBzcGVjLnBhZ2VMZXZlbCA9PT0gJ2Jvb2xlYW4nID8gc3BlYy5wYWdlTGV2ZWwgOiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmhhc093blByb3BlcnR5KCdyZXZpZXdPbkZhaWwnKSkge1xuICAgICAgICB0aGlzLnJldmlld09uRmFpbCA9IHR5cGVvZiBzcGVjLnJldmlld09uRmFpbCA9PT0gJ2Jvb2xlYW4nID8gc3BlYy5yZXZpZXdPbkZhaWwgOiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmhhc093blByb3BlcnR5KCdhbnknKSkge1xuICAgICAgICB0aGlzLmFueSA9IHNwZWMuYW55O1xuICAgICAgfVxuICAgICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoJ2FsbCcpKSB7XG4gICAgICAgIHRoaXMuYWxsID0gc3BlYy5hbGw7XG4gICAgICB9XG4gICAgICBpZiAoc3BlYy5oYXNPd25Qcm9wZXJ0eSgnbm9uZScpKSB7XG4gICAgICAgIHRoaXMubm9uZSA9IHNwZWMubm9uZTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmhhc093blByb3BlcnR5KCd0YWdzJykpIHtcbiAgICAgICAgdGhpcy50YWdzID0gc3BlYy50YWdzO1xuICAgICAgfVxuICAgICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoJ2FjdElkcycpKSB7XG4gICAgICAgIHRoaXMuYWN0SWRzID0gc3BlYy5hY3RJZHM7XG4gICAgICB9XG4gICAgICBpZiAoc3BlYy5oYXNPd25Qcm9wZXJ0eSgnbWF0Y2hlcycpKSB7XG4gICAgICAgIHRoaXMubWF0Y2hlcyA9IGNyZWF0ZUV4ZWN1dGlvbkNvbnRleHQoc3BlYy5tYXRjaGVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGVjLmltcGFjdCkge1xuICAgICAgICBhc3NlcnRfZGVmYXVsdChjb25zdGFudHNfZGVmYXVsdC5pbXBhY3QuaW5jbHVkZXMoc3BlYy5pbXBhY3QpLCAnSW1wYWN0ICcuY29uY2F0KHNwZWMuaW1wYWN0LCAnIGlzIG5vdCBhIHZhbGlkIGltcGFjdCcpKTtcbiAgICAgICAgdGhpcy5pbXBhY3QgPSBzcGVjLmltcGFjdDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBpbXBvcnRfZG90MiA9IF9fdG9Nb2R1bGUocmVxdWlyZV9kb1QoKSk7XG4gICAgdmFyIGRvdFJlZ2V4ID0gL1xce1xcey4rP1xcfVxcfS9nO1xuICAgIHZhciBBdWRpdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gQXVkaXQoYXVkaXQpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF1ZGl0KTtcbiAgICAgICAgdGhpcy5sYW5nID0gJ2VuJztcbiAgICAgICAgdGhpcy5kZWZhdWx0Q29uZmlnID0gYXVkaXQ7XG4gICAgICAgIHRoaXMuc3RhbmRhcmRzID0gc3RhbmRhcmRzX2RlZmF1bHQ7XG4gICAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdExvY2FsZSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKEF1ZGl0LCBbIHtcbiAgICAgICAga2V5OiAnX3NldERlZmF1bHRMb2NhbGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldERlZmF1bHRMb2NhbGUoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlZmF1bHRMb2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGxvY2FsZSA9IHtcbiAgICAgICAgICAgIGNoZWNrczoge30sXG4gICAgICAgICAgICBydWxlczoge30sXG4gICAgICAgICAgICBmYWlsdXJlU3VtbWFyaWVzOiB7fSxcbiAgICAgICAgICAgIGluY29tcGxldGVGYWxsYmFja01lc3NhZ2U6ICcnLFxuICAgICAgICAgICAgbGFuZzogdGhpcy5sYW5nXG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgY2hlY2tJRHMgPSBPYmplY3Qua2V5cyh0aGlzLmRhdGEuY2hlY2tzKTtcbiAgICAgICAgICBmb3IgKHZhciBfaTQ0ID0gMDsgX2k0NCA8IGNoZWNrSURzLmxlbmd0aDsgX2k0NCsrKSB7XG4gICAgICAgICAgICB2YXIgX2lkNiA9IGNoZWNrSURzW19pNDRdO1xuICAgICAgICAgICAgdmFyIGNoZWNrID0gdGhpcy5kYXRhLmNoZWNrc1tfaWQ2XTtcbiAgICAgICAgICAgIHZhciBfY2hlY2skbWVzc2FnZXMgPSBjaGVjay5tZXNzYWdlcywgcGFzcyA9IF9jaGVjayRtZXNzYWdlcy5wYXNzLCBmYWlsID0gX2NoZWNrJG1lc3NhZ2VzLmZhaWwsIGluY29tcGxldGUgPSBfY2hlY2skbWVzc2FnZXMuaW5jb21wbGV0ZTtcbiAgICAgICAgICAgIGxvY2FsZS5jaGVja3NbX2lkNl0gPSB7XG4gICAgICAgICAgICAgIHBhc3M6IHBhc3MsXG4gICAgICAgICAgICAgIGZhaWw6IGZhaWwsXG4gICAgICAgICAgICAgIGluY29tcGxldGU6IGluY29tcGxldGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBydWxlSURzID0gT2JqZWN0LmtleXModGhpcy5kYXRhLnJ1bGVzKTtcbiAgICAgICAgICBmb3IgKHZhciBfaTQ1ID0gMDsgX2k0NSA8IHJ1bGVJRHMubGVuZ3RoOyBfaTQ1KyspIHtcbiAgICAgICAgICAgIHZhciBfaWQ3ID0gcnVsZUlEc1tfaTQ1XTtcbiAgICAgICAgICAgIHZhciBydWxlID0gdGhpcy5kYXRhLnJ1bGVzW19pZDddO1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gcnVsZS5kZXNjcmlwdGlvbiwgaGVscCA9IHJ1bGUuaGVscDtcbiAgICAgICAgICAgIGxvY2FsZS5ydWxlc1tfaWQ3XSA9IHtcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICBoZWxwOiBoZWxwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZmFpbHVyZVN1bW1hcmllcyA9IE9iamVjdC5rZXlzKHRoaXMuZGF0YS5mYWlsdXJlU3VtbWFyaWVzKTtcbiAgICAgICAgICBmb3IgKHZhciBfaTQ2ID0gMDsgX2k0NiA8IGZhaWx1cmVTdW1tYXJpZXMubGVuZ3RoOyBfaTQ2KyspIHtcbiAgICAgICAgICAgIHZhciB0eXBlMiA9IGZhaWx1cmVTdW1tYXJpZXNbX2k0Nl07XG4gICAgICAgICAgICB2YXIgZmFpbHVyZVN1bW1hcnkyID0gdGhpcy5kYXRhLmZhaWx1cmVTdW1tYXJpZXNbdHlwZTJdO1xuICAgICAgICAgICAgdmFyIGZhaWx1cmVNZXNzYWdlID0gZmFpbHVyZVN1bW1hcnkyLmZhaWx1cmVNZXNzYWdlO1xuICAgICAgICAgICAgbG9jYWxlLmZhaWx1cmVTdW1tYXJpZXNbdHlwZTJdID0ge1xuICAgICAgICAgICAgICBmYWlsdXJlTWVzc2FnZTogZmFpbHVyZU1lc3NhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvY2FsZS5pbmNvbXBsZXRlRmFsbGJhY2tNZXNzYWdlID0gdGhpcy5kYXRhLmluY29tcGxldGVGYWxsYmFja01lc3NhZ2U7XG4gICAgICAgICAgdGhpcy5fZGVmYXVsdExvY2FsZSA9IGxvY2FsZTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfcmVzZXRMb2NhbGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2V0TG9jYWxlKCkge1xuICAgICAgICAgIHZhciBkZWZhdWx0TG9jYWxlID0gdGhpcy5fZGVmYXVsdExvY2FsZTtcbiAgICAgICAgICBpZiAoIWRlZmF1bHRMb2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5hcHBseUxvY2FsZShkZWZhdWx0TG9jYWxlKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfYXBwbHlDaGVja0xvY2FsZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwbHlDaGVja0xvY2FsZShjaGVja3MpIHtcbiAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNoZWNrcyk7XG4gICAgICAgICAgZm9yICh2YXIgX2k0NyA9IDA7IF9pNDcgPCBrZXlzLmxlbmd0aDsgX2k0NysrKSB7XG4gICAgICAgICAgICB2YXIgX2lkOCA9IGtleXNbX2k0N107XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGF0YS5jaGVja3NbX2lkOF0pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2NhbGUgcHJvdmlkZWQgZm9yIHVua25vd24gY2hlY2s6IFwiJy5jb25jYXQoX2lkOCwgJ1wiJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kYXRhLmNoZWNrc1tfaWQ4XSA9IG1lcmdlQ2hlY2tMb2NhbGUodGhpcy5kYXRhLmNoZWNrc1tfaWQ4XSwgY2hlY2tzW19pZDhdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2FwcGx5UnVsZUxvY2FsZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwbHlSdWxlTG9jYWxlKHJ1bGVzKSB7XG4gICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhydWxlcyk7XG4gICAgICAgICAgZm9yICh2YXIgX2k0OCA9IDA7IF9pNDggPCBrZXlzLmxlbmd0aDsgX2k0OCsrKSB7XG4gICAgICAgICAgICB2YXIgX2lkOSA9IGtleXNbX2k0OF07XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGF0YS5ydWxlc1tfaWQ5XSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvY2FsZSBwcm92aWRlZCBmb3IgdW5rbm93biBydWxlOiBcIicuY29uY2F0KF9pZDksICdcIicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5ydWxlc1tfaWQ5XSA9IG1lcmdlUnVsZUxvY2FsZSh0aGlzLmRhdGEucnVsZXNbX2lkOV0sIHJ1bGVzW19pZDldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2FwcGx5RmFpbHVyZVN1bW1hcmllcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwbHlGYWlsdXJlU3VtbWFyaWVzKG1lc3NhZ2VzKSB7XG4gICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhtZXNzYWdlcyk7XG4gICAgICAgICAgZm9yICh2YXIgX2k0OSA9IDA7IF9pNDkgPCBrZXlzLmxlbmd0aDsgX2k0OSsrKSB7XG4gICAgICAgICAgICB2YXIgX2tleTggPSBrZXlzW19pNDldO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuZmFpbHVyZVN1bW1hcmllc1tfa2V5OF0pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2NhbGUgcHJvdmlkZWQgZm9yIHVua25vd24gZmFpbHVyZU1lc3NhZ2U6IFwiJy5jb25jYXQoX2tleTgsICdcIicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5mYWlsdXJlU3VtbWFyaWVzW19rZXk4XSA9IG1lcmdlRmFpbHVyZU1lc3NhZ2UodGhpcy5kYXRhLmZhaWx1cmVTdW1tYXJpZXNbX2tleThdLCBtZXNzYWdlc1tfa2V5OF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdhcHBseUxvY2FsZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUxvY2FsZShsb2NhbGUpIHtcbiAgICAgICAgICB0aGlzLl9zZXREZWZhdWx0TG9jYWxlKCk7XG4gICAgICAgICAgaWYgKGxvY2FsZS5jaGVja3MpIHtcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5Q2hlY2tMb2NhbGUobG9jYWxlLmNoZWNrcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsb2NhbGUucnVsZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5UnVsZUxvY2FsZShsb2NhbGUucnVsZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobG9jYWxlLmZhaWx1cmVTdW1tYXJpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5RmFpbHVyZVN1bW1hcmllcyhsb2NhbGUuZmFpbHVyZVN1bW1hcmllcywgJ2ZhaWx1cmVTdW1tYXJpZXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxvY2FsZS5pbmNvbXBsZXRlRmFsbGJhY2tNZXNzYWdlKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaW5jb21wbGV0ZUZhbGxiYWNrTWVzc2FnZSA9IG1lcmdlRmFsbGJhY2tNZXNzYWdlKHRoaXMuZGF0YS5pbmNvbXBsZXRlRmFsbGJhY2tNZXNzYWdlLCBsb2NhbGUuaW5jb21wbGV0ZUZhbGxiYWNrTWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsb2NhbGUubGFuZykge1xuICAgICAgICAgICAgdGhpcy5sYW5nID0gbG9jYWxlLmxhbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldEFsbG93ZWRPcmlnaW5zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFsbG93ZWRPcmlnaW5zKGFsbG93ZWRPcmlnaW5zKSB7XG4gICAgICAgICAgdmFyIGRlZmF1bHRPcmlnaW4gPSBnZXREZWZhdWx0T3JpZ2luKCk7XG4gICAgICAgICAgdGhpcy5hbGxvd2VkT3JpZ2lucyA9IFtdO1xuICAgICAgICAgIHZhciBfaXRlcmF0b3IyMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGFsbG93ZWRPcmlnaW5zKSwgX3N0ZXAyMjtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IyMi5zKCk7ICEoX3N0ZXAyMiA9IF9pdGVyYXRvcjIyLm4oKSkuZG9uZTsgKSB7XG4gICAgICAgICAgICAgIHZhciBvcmlnaW4gPSBfc3RlcDIyLnZhbHVlO1xuICAgICAgICAgICAgICBpZiAob3JpZ2luID09PSBjb25zdGFudHNfZGVmYXVsdC5hbGxPcmlnaW5zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGxvd2VkT3JpZ2lucyA9IFsgJyonIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbiAhPT0gY29uc3RhbnRzX2RlZmF1bHQuc2FtZU9yaWdpbikge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsb3dlZE9yaWdpbnMucHVzaChvcmlnaW4pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRlZmF1bHRPcmlnaW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFsbG93ZWRPcmlnaW5zLnB1c2goZGVmYXVsdE9yaWdpbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjIyLmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMjIuZigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfaW5pdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgICAgICB2YXIgYXVkaXQgPSBnZXREZWZhdWx0Q29uZmlndXJhdGlvbih0aGlzLmRlZmF1bHRDb25maWcpO1xuICAgICAgICAgIHRoaXMubGFuZyA9IGF1ZGl0LmxhbmcgfHwgJ2VuJztcbiAgICAgICAgICB0aGlzLnJlcG9ydGVyID0gYXVkaXQucmVwb3J0ZXI7XG4gICAgICAgICAgdGhpcy5jb21tYW5kcyA9IHt9O1xuICAgICAgICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICAgICAgICB0aGlzLmNoZWNrcyA9IHt9O1xuICAgICAgICAgIHRoaXMuYnJhbmQgPSAnYXhlJztcbiAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uID0gJ2F4ZUFQSSc7XG4gICAgICAgICAgdGhpcy50YWdFeGNsdWRlID0gWyAnZXhwZXJpbWVudGFsJywgJ2RlcHJlY2F0ZWQnIF07XG4gICAgICAgICAgdGhpcy5ub0h0bWwgPSBhdWRpdC5ub0h0bWw7XG4gICAgICAgICAgdGhpcy5hbGxvd2VkT3JpZ2lucyA9IGF1ZGl0LmFsbG93ZWRPcmlnaW5zO1xuICAgICAgICAgIHVucGFja1RvT2JqZWN0KGF1ZGl0LnJ1bGVzLCB0aGlzLCAnYWRkUnVsZScpO1xuICAgICAgICAgIHVucGFja1RvT2JqZWN0KGF1ZGl0LmNoZWNrcywgdGhpcywgJ2FkZENoZWNrJyk7XG4gICAgICAgICAgdGhpcy5kYXRhID0ge307XG4gICAgICAgICAgdGhpcy5kYXRhLmNoZWNrcyA9IGF1ZGl0LmRhdGEgJiYgYXVkaXQuZGF0YS5jaGVja3MgfHwge307XG4gICAgICAgICAgdGhpcy5kYXRhLnJ1bGVzID0gYXVkaXQuZGF0YSAmJiBhdWRpdC5kYXRhLnJ1bGVzIHx8IHt9O1xuICAgICAgICAgIHRoaXMuZGF0YS5mYWlsdXJlU3VtbWFyaWVzID0gYXVkaXQuZGF0YSAmJiBhdWRpdC5kYXRhLmZhaWx1cmVTdW1tYXJpZXMgfHwge307XG4gICAgICAgICAgdGhpcy5kYXRhLmluY29tcGxldGVGYWxsYmFja01lc3NhZ2UgPSBhdWRpdC5kYXRhICYmIGF1ZGl0LmRhdGEuaW5jb21wbGV0ZUZhbGxiYWNrTWVzc2FnZSB8fCAnJztcbiAgICAgICAgICB0aGlzLl9jb25zdHJ1Y3RIZWxwVXJscygpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlZ2lzdGVyQ29tbWFuZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlckNvbW1hbmQoY29tbWFuZCkge1xuICAgICAgICAgIHRoaXMuY29tbWFuZHNbY29tbWFuZC5pZF0gPSBjb21tYW5kLmNhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2FkZFJ1bGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUnVsZShzcGVjKSB7XG4gICAgICAgICAgaWYgKHNwZWMubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5ydWxlc1tzcGVjLmlkXSA9IHNwZWMubWV0YWRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBydWxlID0gdGhpcy5nZXRSdWxlKHNwZWMuaWQpO1xuICAgICAgICAgIGlmIChydWxlKSB7XG4gICAgICAgICAgICBydWxlLmNvbmZpZ3VyZShzcGVjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ydWxlcy5wdXNoKG5ldyBSdWxlKHNwZWMsIHRoaXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnYWRkQ2hlY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ2hlY2soc3BlYykge1xuICAgICAgICAgIHZhciBtZXRhZGF0YSA9IHNwZWMubWV0YWRhdGE7XG4gICAgICAgICAgaWYgKF90eXBlb2YobWV0YWRhdGEpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmNoZWNrc1tzcGVjLmlkXSA9IG1ldGFkYXRhO1xuICAgICAgICAgICAgaWYgKF90eXBlb2YobWV0YWRhdGEubWVzc2FnZXMpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhtZXRhZGF0YS5tZXNzYWdlcykuZmlsdGVyKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0YWRhdGEubWVzc2FnZXMuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgdHlwZW9mIG1ldGFkYXRhLm1lc3NhZ2VzW3Byb3BdID09PSAnc3RyaW5nJztcbiAgICAgICAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhLm1lc3NhZ2VzW3Byb3BdLmluZGV4T2YoJ2Z1bmN0aW9uJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIG1ldGFkYXRhLm1lc3NhZ2VzW3Byb3BdID0gbmV3IEZ1bmN0aW9uKCdyZXR1cm4gJyArIG1ldGFkYXRhLm1lc3NhZ2VzW3Byb3BdICsgJzsnKSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmNoZWNrc1tzcGVjLmlkXSkge1xuICAgICAgICAgICAgdGhpcy5jaGVja3Nbc3BlYy5pZF0uY29uZmlndXJlKHNwZWMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrc1tzcGVjLmlkXSA9IG5ldyBjaGVja19kZWZhdWx0KHNwZWMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdydW4nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcnVuKGNvbnRleHQsIG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHRoaXMubm9ybWFsaXplT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICBkcV9lbGVtZW50X2RlZmF1bHQuc2V0UnVuT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICBheGUuX3NlbGVjdENhY2hlID0gW107XG4gICAgICAgICAgdmFyIGFsbFJ1bGVzVG9SdW4gPSBnZXRSdWxlc1RvUnVuKHRoaXMucnVsZXMsIGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICAgIHZhciBydW5Ob3dSdWxlcyA9IGFsbFJ1bGVzVG9SdW4ubm93O1xuICAgICAgICAgIHZhciBydW5MYXRlclJ1bGVzID0gYWxsUnVsZXNUb1J1bi5sYXRlcjtcbiAgICAgICAgICB2YXIgbm93UnVsZXNRdWV1ZSA9IHF1ZXVlX2RlZmF1bHQoKTtcbiAgICAgICAgICBydW5Ob3dSdWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgIG5vd1J1bGVzUXVldWUuZGVmZXIoZ2V0RGVmZmVyZWRSdWxlKHJ1bGUsIGNvbnRleHQsIG9wdGlvbnMpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgcHJlbG9hZGVyUXVldWUgPSBxdWV1ZV9kZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKHJ1bkxhdGVyUnVsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBwcmVsb2FkZXJRdWV1ZS5kZWZlcihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgICAgX3ByZWxvYWQob3B0aW9ucykudGhlbihmdW5jdGlvbihhc3NldHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzKGFzc2V0cyk7XG4gICAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uKGVycjIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkblxcJ3QgbG9hZCBwcmVsb2FkIGFzc2V0czogJywgZXJyMik7XG4gICAgICAgICAgICAgICAgcmVzKHZvaWQgMCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBxdWV1ZUZvck5vd1J1bGVzQW5kUHJlbG9hZGVyID0gcXVldWVfZGVmYXVsdCgpO1xuICAgICAgICAgIHF1ZXVlRm9yTm93UnVsZXNBbmRQcmVsb2FkZXIuZGVmZXIobm93UnVsZXNRdWV1ZSk7XG4gICAgICAgICAgcXVldWVGb3JOb3dSdWxlc0FuZFByZWxvYWRlci5kZWZlcihwcmVsb2FkZXJRdWV1ZSk7XG4gICAgICAgICAgcXVldWVGb3JOb3dSdWxlc0FuZFByZWxvYWRlci50aGVuKGZ1bmN0aW9uKG5vd1J1bGVzQW5kUHJlbG9hZGVyUmVzdWx0cykge1xuICAgICAgICAgICAgdmFyIGFzc2V0c0Zyb21RdWV1ZSA9IG5vd1J1bGVzQW5kUHJlbG9hZGVyUmVzdWx0cy5wb3AoKTtcbiAgICAgICAgICAgIGlmIChhc3NldHNGcm9tUXVldWUgJiYgYXNzZXRzRnJvbVF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gYXNzZXRzRnJvbVF1ZXVlWzBdO1xuICAgICAgICAgICAgICBpZiAoYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IF9leHRlbmRzKHt9LCBjb250ZXh0LCBhc3NldHMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbm93UnVsZXNSZXN1bHRzID0gbm93UnVsZXNBbmRQcmVsb2FkZXJSZXN1bHRzWzBdO1xuICAgICAgICAgICAgaWYgKCFydW5MYXRlclJ1bGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBheGUuX3NlbGVjdENhY2hlID0gdm9pZCAwO1xuICAgICAgICAgICAgICByZXNvbHZlKG5vd1J1bGVzUmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsYXRlclJ1bGVzUXVldWUgPSBxdWV1ZV9kZWZhdWx0KCk7XG4gICAgICAgICAgICBydW5MYXRlclJ1bGVzLmZvckVhY2goZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgICAgICB2YXIgZGVmZXJyZWRSdWxlID0gZ2V0RGVmZmVyZWRSdWxlKHJ1bGUsIGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICBsYXRlclJ1bGVzUXVldWUuZGVmZXIoZGVmZXJyZWRSdWxlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGF0ZXJSdWxlc1F1ZXVlLnRoZW4oZnVuY3Rpb24obGF0ZXJSdWxlUmVzdWx0cykge1xuICAgICAgICAgICAgICBheGUuX3NlbGVjdENhY2hlID0gdm9pZCAwO1xuICAgICAgICAgICAgICByZXNvbHZlKG5vd1J1bGVzUmVzdWx0cy5jb25jYXQobGF0ZXJSdWxlUmVzdWx0cykuZmlsdGVyKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSlbJ2NhdGNoJ10ocmVqZWN0KTtcbiAgICAgICAgICB9KVsnY2F0Y2gnXShyZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2FmdGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyKHJlc3VsdHMsIG9wdGlvbnMpIHtcbiAgICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLnJ1bGVzO1xuICAgICAgICAgIHJldHVybiByZXN1bHRzLm1hcChmdW5jdGlvbihydWxlUmVzdWx0KSB7XG4gICAgICAgICAgICB2YXIgcnVsZSA9IGZpbmRfYnlfZGVmYXVsdChydWxlcywgJ2lkJywgcnVsZVJlc3VsdC5pZCk7XG4gICAgICAgICAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXN1bHQgZm9yIHVua25vd24gcnVsZS4gWW91IG1heSBiZSBydW5uaW5nIG1pc21hdGNoIGF4ZS1jb3JlIHZlcnNpb25zJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVsZS5hZnRlcihydWxlUmVzdWx0LCBvcHRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRSdWxlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGUocnVsZUlkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucnVsZXMuZmluZChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVsZS5pZCA9PT0gcnVsZUlkO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ25vcm1hbGl6ZU9wdGlvbnMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgICAgdmFyIGF1ZGl0ID0gdGhpcztcbiAgICAgICAgICB2YXIgdGFncyA9IFtdO1xuICAgICAgICAgIHZhciBydWxlSWRzID0gW107XG4gICAgICAgICAgYXVkaXQucnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgICBydWxlSWRzLnB1c2gocnVsZS5pZCk7XG4gICAgICAgICAgICBydWxlLnRhZ3MuZm9yRWFjaChmdW5jdGlvbih0YWcpIHtcbiAgICAgICAgICAgICAgaWYgKCF0YWdzLmluY2x1ZGVzKHRhZykpIHtcbiAgICAgICAgICAgICAgICB0YWdzLnB1c2godGFnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKFsgJ29iamVjdCcsICdzdHJpbmcnIF0uaW5jbHVkZXMoX3R5cGVvZihvcHRpb25zLnJ1bk9ubHkpKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnJ1bk9ubHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMucnVuT25seSA9IFsgb3B0aW9ucy5ydW5Pbmx5IF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLnJ1bk9ubHkpKSB7XG4gICAgICAgICAgICAgIHZhciBoYXNUYWcgPSBvcHRpb25zLnJ1bk9ubHkuZmluZChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWdzLmluY2x1ZGVzKHZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHZhciBoYXNSdWxlID0gb3B0aW9ucy5ydW5Pbmx5LmZpbmQoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZUlkcy5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoaGFzVGFnICYmIGhhc1J1bGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3J1bk9ubHkgY2Fubm90IGJlIGJvdGggcnVsZXMgYW5kIHRhZ3MnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoaGFzUnVsZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucnVuT25seSA9IHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdydWxlJyxcbiAgICAgICAgICAgICAgICAgIHZhbHVlczogb3B0aW9ucy5ydW5Pbmx5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnJ1bk9ubHkgPSB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICAgICAgICAgIHZhbHVlczogb3B0aW9ucy5ydW5Pbmx5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9ubHkgPSBvcHRpb25zLnJ1bk9ubHk7XG4gICAgICAgICAgICBpZiAob25seS52YWx1ZSAmJiAhb25seS52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgb25seS52YWx1ZXMgPSBvbmx5LnZhbHVlO1xuICAgICAgICAgICAgICBkZWxldGUgb25seS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShvbmx5LnZhbHVlcykgfHwgb25seS52YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncnVuT25seS52YWx1ZXMgbXVzdCBiZSBhIG5vbi1lbXB0eSBhcnJheScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFsgJ3J1bGUnLCAncnVsZXMnIF0uaW5jbHVkZXMob25seS50eXBlKSkge1xuICAgICAgICAgICAgICBvbmx5LnR5cGUgPSAncnVsZSc7XG4gICAgICAgICAgICAgIG9ubHkudmFsdWVzLmZvckVhY2goZnVuY3Rpb24ocnVsZUlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFydWxlSWRzLmluY2x1ZGVzKHJ1bGVJZCkpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBydWxlIGAnICsgcnVsZUlkICsgJ2AgaW4gb3B0aW9ucy5ydW5Pbmx5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoWyAndGFnJywgJ3RhZ3MnLCB2b2lkIDAgXS5pbmNsdWRlcyhvbmx5LnR5cGUpKSB7XG4gICAgICAgICAgICAgIG9ubHkudHlwZSA9ICd0YWcnO1xuICAgICAgICAgICAgICB2YXIgdW5tYXRjaGVkVGFncyA9IG9ubHkudmFsdWVzLmZpbHRlcihmdW5jdGlvbih0YWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRhZ3MuaW5jbHVkZXModGFnKSAmJiAhL3djYWcyWzEtM11hezEsM30vLnRlc3QodGFnKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmICh1bm1hdGNoZWRUYWdzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGF4ZS5sb2coJ0NvdWxkIG5vdCBmaW5kIHRhZ3MgYCcgKyB1bm1hdGNoZWRUYWdzLmpvaW4oJ2AsIGAnKSArICdgJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBydW5Pbmx5IHR5cGUgXFwnJy5jb25jYXQob25seS50eXBlLCAnXFwnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3R5cGVvZihvcHRpb25zLnJ1bGVzKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMucnVsZXMpLmZvckVhY2goZnVuY3Rpb24ocnVsZUlkKSB7XG4gICAgICAgICAgICAgIGlmICghcnVsZUlkcy5pbmNsdWRlcyhydWxlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHJ1bGUgYCcgKyBydWxlSWQgKyAnYCBpbiBvcHRpb25zLnJ1bGVzJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdzZXRCcmFuZGluZycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRCcmFuZGluZyhicmFuZGluZykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IHtcbiAgICAgICAgICAgIGJyYW5kOiB0aGlzLmJyYW5kLFxuICAgICAgICAgICAgYXBwbGljYXRpb246IHRoaXMuYXBwbGljYXRpb25cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICh0eXBlb2YgYnJhbmRpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uID0gYnJhbmRpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChicmFuZGluZyAmJiBicmFuZGluZy5oYXNPd25Qcm9wZXJ0eSgnYnJhbmQnKSAmJiBicmFuZGluZy5icmFuZCAmJiB0eXBlb2YgYnJhbmRpbmcuYnJhbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmJyYW5kID0gYnJhbmRpbmcuYnJhbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChicmFuZGluZyAmJiBicmFuZGluZy5oYXNPd25Qcm9wZXJ0eSgnYXBwbGljYXRpb24nKSAmJiBicmFuZGluZy5hcHBsaWNhdGlvbiAmJiB0eXBlb2YgYnJhbmRpbmcuYXBwbGljYXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uID0gYnJhbmRpbmcuYXBwbGljYXRpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2NvbnN0cnVjdEhlbHBVcmxzKHByZXZpb3VzKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfY29uc3RydWN0SGVscFVybHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbnN0cnVjdEhlbHBVcmxzKCkge1xuICAgICAgICAgIHZhciBfdGhpczEzID0gdGhpcztcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG4gICAgICAgICAgdmFyIHZlcnNpb24gPSAoYXhlLnZlcnNpb24ubWF0Y2goL15bMS05XVswLTldKlxcLlswLTldKy8pIHx8IFsgJ3gueScgXSlbMF07XG4gICAgICAgICAgdGhpcy5ydWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMxMy5kYXRhLnJ1bGVzW3J1bGUuaWRdKSB7XG4gICAgICAgICAgICAgIF90aGlzMTMuZGF0YS5ydWxlc1tydWxlLmlkXSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1ldGFEYXRhID0gX3RoaXMxMy5kYXRhLnJ1bGVzW3J1bGUuaWRdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXRhRGF0YS5oZWxwVXJsICE9PSAnc3RyaW5nJyB8fCBwcmV2aW91cyAmJiBtZXRhRGF0YS5oZWxwVXJsID09PSBnZXRIZWxwVXJsKHByZXZpb3VzLCBydWxlLmlkLCB2ZXJzaW9uKSkge1xuICAgICAgICAgICAgICBtZXRhRGF0YS5oZWxwVXJsID0gZ2V0SGVscFVybChfdGhpczEzLCBydWxlLmlkLCB2ZXJzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldFJ1bGVzQW5kQ2hlY2tzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0UnVsZXNBbmRDaGVja3MoKSB7XG4gICAgICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgICAgIHRoaXMuX3Jlc2V0TG9jYWxlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gXSk7XG4gICAgfSgpO1xuICAgIHZhciBhdWRpdF9kZWZhdWx0ID0gQXVkaXQ7XG4gICAgZnVuY3Rpb24gZ2V0RGVmYXVsdE9yaWdpbigpIHtcbiAgICAgIGlmICh3aW5kb3cub3JpZ2luICYmIHdpbmRvdy5vcmlnaW4gIT09ICdudWxsJykge1xuICAgICAgICByZXR1cm4gd2luZG93Lm9yaWdpbjtcbiAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLm9yaWdpbiAmJiB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSAnbnVsbCcpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERlZmF1bHRDb25maWd1cmF0aW9uKGF1ZGl0KSB7XG4gICAgICB2YXIgY29uZmlnO1xuICAgICAgaWYgKGF1ZGl0KSB7XG4gICAgICAgIGNvbmZpZyA9IF9jbG9uZShhdWRpdCk7XG4gICAgICAgIGNvbmZpZy5jb21tb25zID0gYXVkaXQuY29tbW9ucztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZyA9IHt9O1xuICAgICAgfVxuICAgICAgY29uZmlnLnJlcG9ydGVyID0gY29uZmlnLnJlcG9ydGVyIHx8IG51bGw7XG4gICAgICBjb25maWcubm9IdG1sID0gY29uZmlnLm5vSHRtbCB8fCBmYWxzZTtcbiAgICAgIGlmICghY29uZmlnLmFsbG93ZWRPcmlnaW5zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0T3JpZ2luID0gZ2V0RGVmYXVsdE9yaWdpbigpO1xuICAgICAgICBjb25maWcuYWxsb3dlZE9yaWdpbnMgPSBkZWZhdWx0T3JpZ2luID8gWyBkZWZhdWx0T3JpZ2luIF0gOiBbXTtcbiAgICAgIH1cbiAgICAgIGNvbmZpZy5ydWxlcyA9IGNvbmZpZy5ydWxlcyB8fCBbXTtcbiAgICAgIGNvbmZpZy5jaGVja3MgPSBjb25maWcuY2hlY2tzIHx8IFtdO1xuICAgICAgY29uZmlnLmRhdGEgPSBfZXh0ZW5kcyh7XG4gICAgICAgIGNoZWNrczoge30sXG4gICAgICAgIHJ1bGVzOiB7fVxuICAgICAgfSwgY29uZmlnLmRhdGEpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG4gICAgZnVuY3Rpb24gdW5wYWNrVG9PYmplY3QoY29sbGVjdGlvbiwgYXVkaXQsIG1ldGhvZCkge1xuICAgICAgdmFyIGksIGw7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gY29sbGVjdGlvbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgYXVkaXRbbWV0aG9kXShjb2xsZWN0aW9uW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1lcmdlQ2hlY2tMb2NhbGUgPSBmdW5jdGlvbiBtZXJnZUNoZWNrTG9jYWxlKGEyLCBiMikge1xuICAgICAgdmFyIHBhc3MgPSBiMi5wYXNzLCBmYWlsID0gYjIuZmFpbDtcbiAgICAgIGlmICh0eXBlb2YgcGFzcyA9PT0gJ3N0cmluZycgJiYgZG90UmVnZXgudGVzdChwYXNzKSkge1xuICAgICAgICBwYXNzID0gaW1wb3J0X2RvdDJbJ2RlZmF1bHQnXS5jb21waWxlKHBhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBmYWlsID09PSAnc3RyaW5nJyAmJiBkb3RSZWdleC50ZXN0KGZhaWwpKSB7XG4gICAgICAgIGZhaWwgPSBpbXBvcnRfZG90MlsnZGVmYXVsdCddLmNvbXBpbGUoZmFpbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGEyLCB7XG4gICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgcGFzczogcGFzcyB8fCBhMi5tZXNzYWdlcy5wYXNzLFxuICAgICAgICAgIGZhaWw6IGZhaWwgfHwgYTIubWVzc2FnZXMuZmFpbCxcbiAgICAgICAgICBpbmNvbXBsZXRlOiBfdHlwZW9mKGEyLm1lc3NhZ2VzLmluY29tcGxldGUpID09PSAnb2JqZWN0JyA/IF9leHRlbmRzKHt9LCBhMi5tZXNzYWdlcy5pbmNvbXBsZXRlLCBiMi5pbmNvbXBsZXRlKSA6IGIyLmluY29tcGxldGVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgbWVyZ2VSdWxlTG9jYWxlID0gZnVuY3Rpb24gbWVyZ2VSdWxlTG9jYWxlKGEyLCBiMikge1xuICAgICAgdmFyIGhlbHAgPSBiMi5oZWxwLCBkZXNjcmlwdGlvbiA9IGIyLmRlc2NyaXB0aW9uO1xuICAgICAgaWYgKHR5cGVvZiBoZWxwID09PSAnc3RyaW5nJyAmJiBkb3RSZWdleC50ZXN0KGhlbHApKSB7XG4gICAgICAgIGhlbHAgPSBpbXBvcnRfZG90MlsnZGVmYXVsdCddLmNvbXBpbGUoaGVscCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRlc2NyaXB0aW9uID09PSAnc3RyaW5nJyAmJiBkb3RSZWdleC50ZXN0KGRlc2NyaXB0aW9uKSkge1xuICAgICAgICBkZXNjcmlwdGlvbiA9IGltcG9ydF9kb3QyWydkZWZhdWx0J10uY29tcGlsZShkZXNjcmlwdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGEyLCB7XG4gICAgICAgIGhlbHA6IGhlbHAgfHwgYTIuaGVscCxcbiAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uIHx8IGEyLmRlc2NyaXB0aW9uXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHZhciBtZXJnZUZhaWx1cmVNZXNzYWdlID0gZnVuY3Rpb24gbWVyZ2VGYWlsdXJlTWVzc2FnZShhMiwgYjIpIHtcbiAgICAgIHZhciBmYWlsdXJlTWVzc2FnZSA9IGIyLmZhaWx1cmVNZXNzYWdlO1xuICAgICAgaWYgKHR5cGVvZiBmYWlsdXJlTWVzc2FnZSA9PT0gJ3N0cmluZycgJiYgZG90UmVnZXgudGVzdChmYWlsdXJlTWVzc2FnZSkpIHtcbiAgICAgICAgZmFpbHVyZU1lc3NhZ2UgPSBpbXBvcnRfZG90MlsnZGVmYXVsdCddLmNvbXBpbGUoZmFpbHVyZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhMiwge1xuICAgICAgICBmYWlsdXJlTWVzc2FnZTogZmFpbHVyZU1lc3NhZ2UgfHwgYTIuZmFpbHVyZU1lc3NhZ2VcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIG1lcmdlRmFsbGJhY2tNZXNzYWdlID0gZnVuY3Rpb24gbWVyZ2VGYWxsYmFja01lc3NhZ2UoYTIsIGIyKSB7XG4gICAgICBpZiAodHlwZW9mIGIyID09PSAnc3RyaW5nJyAmJiBkb3RSZWdleC50ZXN0KGIyKSkge1xuICAgICAgICBiMiA9IGltcG9ydF9kb3QyWydkZWZhdWx0J10uY29tcGlsZShiMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYjIgfHwgYTI7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBnZXRSdWxlc1RvUnVuKHJ1bGVzLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgYmFzZSA9IHtcbiAgICAgICAgbm93OiBbXSxcbiAgICAgICAgbGF0ZXI6IFtdXG4gICAgICB9O1xuICAgICAgdmFyIHNwbGl0UnVsZXMgPSBydWxlcy5yZWR1Y2UoZnVuY3Rpb24ob3V0LCBydWxlKSB7XG4gICAgICAgIGlmICghcnVsZV9zaG91bGRfcnVuX2RlZmF1bHQocnVsZSwgY29udGV4dCwgb3B0aW9ucykpIHtcbiAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChydWxlLnByZWxvYWQpIHtcbiAgICAgICAgICBvdXQubGF0ZXIucHVzaChydWxlKTtcbiAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9XG4gICAgICAgIG91dC5ub3cucHVzaChydWxlKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH0sIGJhc2UpO1xuICAgICAgcmV0dXJuIHNwbGl0UnVsZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERlZmZlcmVkUnVsZShydWxlLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5wZXJmb3JtYW5jZVRpbWVyKSB7XG4gICAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQubWFyaygnbWFya19ydWxlX3N0YXJ0XycgKyBydWxlLmlkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcnVsZS5ydW4oY29udGV4dCwgb3B0aW9ucywgZnVuY3Rpb24ocnVsZVJlc3VsdCkge1xuICAgICAgICAgIHJlc29sdmUocnVsZVJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycjIpIHtcbiAgICAgICAgICBpZiAoIW9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgICAgIHZhciBlcnJSZXN1bHQgPSBPYmplY3QuYXNzaWduKG5ldyBydWxlX3Jlc3VsdF9kZWZhdWx0KHJ1bGUpLCB7XG4gICAgICAgICAgICAgIHJlc3VsdDogY29uc3RhbnRzX2RlZmF1bHQuQ0FOVFRFTEwsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBydW5uaW5nIHRoaXMgcnVsZScsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGVycjIubWVzc2FnZSxcbiAgICAgICAgICAgICAgc3RhY2s6IGVycjIuc3RhY2ssXG4gICAgICAgICAgICAgIGVycm9yOiBlcnIyLFxuICAgICAgICAgICAgICBlcnJvck5vZGU6IGVycjIuZXJyb3JOb2RlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlc29sdmUoZXJyUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KGVycjIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRIZWxwVXJsKF9yZWYxNDIsIHJ1bGVJZCwgdmVyc2lvbikge1xuICAgICAgdmFyIGJyYW5kID0gX3JlZjE0Mi5icmFuZCwgYXBwbGljYXRpb24gPSBfcmVmMTQyLmFwcGxpY2F0aW9uLCBsYW5nID0gX3JlZjE0Mi5sYW5nO1xuICAgICAgcmV0dXJuIGNvbnN0YW50c19kZWZhdWx0LmhlbHBVcmxCYXNlICsgYnJhbmQgKyAnLycgKyAodmVyc2lvbiB8fCBheGUudmVyc2lvbi5zdWJzdHJpbmcoMCwgYXhlLnZlcnNpb24ubGFzdEluZGV4T2YoJy4nKSkpICsgJy8nICsgcnVsZUlkICsgJz9hcHBsaWNhdGlvbj0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFwcGxpY2F0aW9uKSArIChsYW5nICYmIGxhbmcgIT09ICdlbicgPyAnJmxhbmc9JyArIGVuY29kZVVSSUNvbXBvbmVudChsYW5nKSA6ICcnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0dXBHbG9iYWxzKGNvbnRleHQpIHtcbiAgICAgIHZhciBoYXNXaW5kb3cgPSB3aW5kb3cgJiYgJ05vZGUnIGluIHdpbmRvdyAmJiAnTm9kZUxpc3QnIGluIHdpbmRvdztcbiAgICAgIHZhciBoYXNEb2MgPSAhIWRvY3VtZW50O1xuICAgICAgaWYgKGhhc1dpbmRvdyAmJiBoYXNEb2MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFjb250ZXh0IHx8ICFjb250ZXh0Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBcIndpbmRvd1wiIG9yIFwiZG9jdW1lbnRcIiBnbG9iYWxzIG5vdCBkZWZpbmVkIGFuZCBjYW5ub3QgYmUgZGVkdWNlZCBmcm9tIHRoZSBjb250ZXh0LiBFaXRoZXIgc2V0IHRoZSBnbG9iYWxzIGJlZm9yZSBydW5uaW5nIG9yIHBhc3MgaW4gYSB2YWxpZCBFbGVtZW50LicpO1xuICAgICAgfVxuICAgICAgaWYgKCFoYXNEb2MpIHtcbiAgICAgICAgY2FjaGVfZGVmYXVsdC5zZXQoJ2dsb2JhbERvY3VtZW50U2V0JywgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50ID0gY29udGV4dC5vd25lckRvY3VtZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFoYXNXaW5kb3cpIHtcbiAgICAgICAgY2FjaGVfZGVmYXVsdC5zZXQoJ2dsb2JhbFdpbmRvd1NldCcsIHRydWUpO1xuICAgICAgICB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzZXRHbG9iYWxzKCkge1xuICAgICAgaWYgKGNhY2hlX2RlZmF1bHQuZ2V0KCdnbG9iYWxEb2N1bWVudFNldCcpKSB7XG4gICAgICAgIGNhY2hlX2RlZmF1bHQuc2V0KCdnbG9iYWxEb2N1bWVudFNldCcsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGNhY2hlX2RlZmF1bHQuZ2V0KCdnbG9iYWxXaW5kb3dTZXQnKSkge1xuICAgICAgICBjYWNoZV9kZWZhdWx0LnNldCgnZ2xvYmFsV2luZG93U2V0JywgZmFsc2UpO1xuICAgICAgICB3aW5kb3cgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0ZWFyZG93bigpIHtcbiAgICAgIHJlc2V0R2xvYmFscygpO1xuICAgICAgYXhlLl9tZW1vaXplZEZucy5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHJldHVybiBmbi5jbGVhcigpO1xuICAgICAgfSk7XG4gICAgICBjYWNoZV9kZWZhdWx0LmNsZWFyKCk7XG4gICAgICBheGUuX3RyZWUgPSB2b2lkIDA7XG4gICAgICBheGUuX3NlbGVjdG9yRGF0YSA9IHZvaWQgMDtcbiAgICAgIGF4ZS5fc2VsZWN0Q2FjaGUgPSB2b2lkIDA7XG4gICAgfVxuICAgIHZhciB0ZWFyZG93bl9kZWZhdWx0ID0gdGVhcmRvd247XG4gICAgZnVuY3Rpb24gcnVuUnVsZXMoY29udGV4dCwgb3B0aW9ucywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb250ZXh0ID0gbmV3IENvbnRleHQoY29udGV4dCk7XG4gICAgICAgIGF4ZS5fdHJlZSA9IGNvbnRleHQuZmxhdFRyZWU7XG4gICAgICAgIGF4ZS5fc2VsZWN0b3JEYXRhID0gX2dldFNlbGVjdG9yRGF0YShjb250ZXh0LmZsYXRUcmVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGVhcmRvd25fZGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gcmVqZWN0KGUpO1xuICAgICAgfVxuICAgICAgdmFyIHEgPSBxdWV1ZV9kZWZhdWx0KCk7XG4gICAgICB2YXIgYXVkaXQgPSBheGUuX2F1ZGl0O1xuICAgICAgaWYgKG9wdGlvbnMucGVyZm9ybWFuY2VUaW1lcikge1xuICAgICAgICBwZXJmb3JtYW5jZV90aW1lcl9kZWZhdWx0LmF1ZGl0U3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0LmZyYW1lcy5sZW5ndGggJiYgb3B0aW9ucy5pZnJhbWVzICE9PSBmYWxzZSkge1xuICAgICAgICBxLmRlZmVyKGZ1bmN0aW9uKHJlcywgcmVqKSB7XG4gICAgICAgICAgX2NvbGxlY3RSZXN1bHRzRnJvbUZyYW1lcyhjb250ZXh0LCBvcHRpb25zLCAncnVsZXMnLCBudWxsLCByZXMsIHJlaik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcS5kZWZlcihmdW5jdGlvbihyZXMsIHJlaikge1xuICAgICAgICBhdWRpdC5ydW4oY29udGV4dCwgb3B0aW9ucywgcmVzLCByZWopO1xuICAgICAgfSk7XG4gICAgICBxLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChvcHRpb25zLnBlcmZvcm1hbmNlVGltZXIpIHtcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQuYXVkaXRFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdHMgPSBtZXJnZV9yZXN1bHRzX2RlZmF1bHQoZGF0YS5tYXAoZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICByZXN1bHRzOiByZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGlmIChjb250ZXh0LmluaXRpYXRvcikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGVyZm9ybWFuY2VUaW1lcikge1xuICAgICAgICAgICAgICBwZXJmb3JtYW5jZV90aW1lcl9kZWZhdWx0Lm1hcmsoJ2F1ZGl0QWZ0ZXJTdGFydCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0cyA9IGF1ZGl0LmFmdGVyKHJlc3VsdHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGVyZm9ybWFuY2VUaW1lcikge1xuICAgICAgICAgICAgICBwZXJmb3JtYW5jZV90aW1lcl9kZWZhdWx0Lm1hcmsoJ2F1ZGl0QWZ0ZXJFbmQnKTtcbiAgICAgICAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tZWFzdXJlKCdhdWRpdC5hZnRlcicsICdhdWRpdEFmdGVyU3RhcnQnLCAnYXVkaXRBZnRlckVuZCcpO1xuICAgICAgICAgICAgICBwZXJmb3JtYW5jZV90aW1lcl9kZWZhdWx0LmxvZ01lYXN1cmVzKCdhdWRpdC5hZnRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0cy5mb3JFYWNoKF9wdWJsaXNoTWV0YURhdGEpO1xuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMubWFwKF9maW5hbGl6ZVJ1bGVSZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRzLCB0ZWFyZG93bl9kZWZhdWx0KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0ZWFyZG93bl9kZWZhdWx0KCk7XG4gICAgICAgICAgICBsb2dfZGVmYXVsdChlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0ZWFyZG93bl9kZWZhdWx0KCk7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbihlKSB7XG4gICAgICAgIHRlYXJkb3duX2RlZmF1bHQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvYWQoYXVkaXQpIHtcbiAgICAgIGF4ZS5fYXVkaXQgPSBuZXcgYXVkaXRfZGVmYXVsdChhdWRpdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJ1bkNvbW1hbmQoZGF0YSwga2VlcGFsaXZlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHJlc29sdmUgPSBjYWxsYmFjaztcbiAgICAgIHZhciByZWplY3QgPSBmdW5jdGlvbiByZWplY3QyKGVycjIpIHtcbiAgICAgICAgaWYgKGVycjIgaW5zdGFuY2VvZiBFcnJvciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBlcnIyID0gbmV3IEVycm9yKGVycjIpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGVycjIpO1xuICAgICAgfTtcbiAgICAgIHZhciBjb250ZXh0ID0gZGF0YSAmJiBkYXRhLmNvbnRleHQgfHwge307XG4gICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eSgnaW5jbHVkZScpICYmICFjb250ZXh0LmluY2x1ZGUubGVuZ3RoKSB7XG4gICAgICAgIGNvbnRleHQuaW5jbHVkZSA9IFsgZG9jdW1lbnQgXTtcbiAgICAgIH1cbiAgICAgIHZhciBvcHRpb25zID0gZGF0YSAmJiBkYXRhLm9wdGlvbnMgfHwge307XG4gICAgICBzd2l0Y2ggKGRhdGEuY29tbWFuZCkge1xuICAgICAgIGNhc2UgJ3J1bGVzJzpcbiAgICAgICAgcmV0dXJuIHJ1blJ1bGVzKGNvbnRleHQsIG9wdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdHMsIGNsZWFudXBGbikge1xuICAgICAgICAgIHJlc3VsdHMgPSBub2RlX3NlcmlhbGl6ZXJfZGVmYXVsdC5tYXBSYXdSZXN1bHRzKHJlc3VsdHMpO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgY2xlYW51cEZuKCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG5cbiAgICAgICBjYXNlICdjbGVhbnVwLXBsdWdpbic6XG4gICAgICAgIHJldHVybiBjbGVhbnVwX2RlZmF1bHQocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChheGUuX2F1ZGl0ICYmIGF4ZS5fYXVkaXQuY29tbWFuZHMgJiYgYXhlLl9hdWRpdC5jb21tYW5kc1tkYXRhLmNvbW1hbmRdKSB7XG4gICAgICAgICAgcmV0dXJuIGF4ZS5fYXVkaXQuY29tbWFuZHNbZGF0YS5jb21tYW5kXShkYXRhLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdpbmRvdy50b3AgIT09IHdpbmRvdykge1xuICAgICAgX3Jlc3BvbmRhYmxlLnN1YnNjcmliZSgnYXhlLnN0YXJ0JywgcnVuQ29tbWFuZCk7XG4gICAgICBfcmVzcG9uZGFibGUuc3Vic2NyaWJlKCdheGUucGluZycsIGZ1bmN0aW9uKGRhdGEsIGtlZXBhbGl2ZSwgcmVzcG9uZCkge1xuICAgICAgICByZXNwb25kKHtcbiAgICAgICAgICBheGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gUGx1Z2luKHNwZWMpIHtcbiAgICAgIHRoaXMuX3J1biA9IHNwZWMucnVuO1xuICAgICAgdGhpcy5fY29sbGVjdCA9IHNwZWMuY29sbGVjdDtcbiAgICAgIHRoaXMuX3JlZ2lzdHJ5ID0ge307XG4gICAgICBzcGVjLmNvbW1hbmRzLmZvckVhY2goZnVuY3Rpb24oY29tbWFuZCkge1xuICAgICAgICBheGUuX2F1ZGl0LnJlZ2lzdGVyQ29tbWFuZChjb21tYW5kKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBQbHVnaW4ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1bjMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICBQbHVnaW4ucHJvdG90eXBlLmNvbGxlY3QgPSBmdW5jdGlvbiBjb2xsZWN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbGxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIFBsdWdpbi5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIGNsZWFudXAyKGRvbmUpIHtcbiAgICAgIHZhciBxID0gYXhlLnV0aWxzLnF1ZXVlKCk7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLl9yZWdpc3RyeSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcS5kZWZlcihmdW5jdGlvbihfZG9uZSkge1xuICAgICAgICAgIHRoYXQuX3JlZ2lzdHJ5W2tleV0uY2xlYW51cChfZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBxLnRoZW4oZG9uZSk7XG4gICAgfTtcbiAgICBQbHVnaW4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChpbXBsKSB7XG4gICAgICB0aGlzLl9yZWdpc3RyeVtpbXBsLmlkXSA9IGltcGw7XG4gICAgfTtcbiAgICBmdW5jdGlvbiByZWdpc3RlclBsdWdpbihwbHVnaW4pIHtcbiAgICAgIGF4ZS5wbHVnaW5zW3BsdWdpbi5pZF0gPSBuZXcgUGx1Z2luKHBsdWdpbik7XG4gICAgfVxuICAgIHZhciBwbHVnaW5zX2RlZmF1bHQgPSByZWdpc3RlclBsdWdpbjtcbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHZhciBhdWRpdCA9IGF4ZS5fYXVkaXQ7XG4gICAgICBpZiAoIWF1ZGl0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYXVkaXQgY29uZmlndXJlZCcpO1xuICAgICAgfVxuICAgICAgYXVkaXQucmVzZXRSdWxlc0FuZENoZWNrcygpO1xuICAgICAgcmVzZXRTdGFuZGFyZHMoKTtcbiAgICB9XG4gICAgdmFyIHJlc2V0X2RlZmF1bHQgPSByZXNldDtcbiAgICBmdW5jdGlvbiBydW5WaXJ0dWFsUnVsZShydWxlSWQsIHZOb2RlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICBvcHRpb25zLnJlcG9ydGVyID0gb3B0aW9ucy5yZXBvcnRlciB8fCBheGUuX2F1ZGl0LnJlcG9ydGVyIHx8ICd2MSc7XG4gICAgICBheGUuX3NlbGVjdG9yRGF0YSA9IHt9O1xuICAgICAgaWYgKCEodk5vZGUgaW5zdGFuY2VvZiBhYnN0cmFjdF92aXJ0dWFsX25vZGVfZGVmYXVsdCkpIHtcbiAgICAgICAgdk5vZGUgPSBuZXcgc2VyaWFsX3ZpcnR1YWxfbm9kZV9kZWZhdWx0KHZOb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBydWxlID0gX2dldFJ1bGUocnVsZUlkKTtcbiAgICAgIGlmICghcnVsZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcnVsZSBgJyArIHJ1bGVJZCArICdgJyk7XG4gICAgICB9XG4gICAgICBydWxlID0gT2JqZWN0LmNyZWF0ZShydWxlLCB7XG4gICAgICAgIGV4Y2x1ZGVIaWRkZW46IHtcbiAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgICAgaW5pdGlhdG9yOiB0cnVlLFxuICAgICAgICBpbmNsdWRlOiBbIHZOb2RlIF0sXG4gICAgICAgIGV4Y2x1ZGU6IFtdLFxuICAgICAgICBmcmFtZXM6IFtdLFxuICAgICAgICBwYWdlOiBmYWxzZSxcbiAgICAgICAgZm9jdXNhYmxlOiB0cnVlLFxuICAgICAgICBzaXplOiB7fSxcbiAgICAgICAgZmxhdFRyZWU6IFtdXG4gICAgICB9O1xuICAgICAgdmFyIHJhd1Jlc3VsdHMgPSBydWxlLnJ1blN5bmMoY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICBfcHVibGlzaE1ldGFEYXRhKHJhd1Jlc3VsdHMpO1xuICAgICAgX2ZpbmFsaXplUnVsZVJlc3VsdChyYXdSZXN1bHRzKTtcbiAgICAgIHZhciByZXN1bHRzID0gYWdncmVnYXRlX3Jlc3VsdF9kZWZhdWx0KFsgcmF3UmVzdWx0cyBdKTtcbiAgICAgIHJlc3VsdHMudmlvbGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0Lm5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZVJlc3VsdCkge1xuICAgICAgICAgIG5vZGVSZXN1bHQuZmFpbHVyZVN1bW1hcnkgPSBmYWlsdXJlX3N1bW1hcnlfZGVmYXVsdChub2RlUmVzdWx0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgX2dldEVudmlyb25tZW50RGF0YSgpLCByZXN1bHRzLCB7XG4gICAgICAgIHRvb2xPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplUnVuUGFyYW1zKF9yZWYxNDMpIHtcbiAgICAgIHZhciBfcmVmMTQ1LCBfb3B0aW9ucyRyZXBvcnRlciwgX2F4ZSRfYXVkaXQ7XG4gICAgICB2YXIgX3JlZjE0NCA9IF9zbGljZWRUb0FycmF5KF9yZWYxNDMsIDMpLCBjb250ZXh0ID0gX3JlZjE0NFswXSwgb3B0aW9ucyA9IF9yZWYxNDRbMV0sIGNhbGxiYWNrID0gX3JlZjE0NFsyXTtcbiAgICAgIHZhciB0eXBlRXJyID0gbmV3IFR5cGVFcnJvcignYXhlLnJ1biBhcmd1bWVudHMgYXJlIGludmFsaWQnKTtcbiAgICAgIGlmICghX2lzQ29udGV4dFNwZWMoY29udGV4dCkpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB2b2lkIDApIHtcbiAgICAgICAgICB0aHJvdyB0eXBlRXJyO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IGNvbnRleHQ7XG4gICAgICAgIGNvbnRleHQgPSBkb2N1bWVudDtcbiAgICAgIH1cbiAgICAgIGlmIChfdHlwZW9mKG9wdGlvbnMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRocm93IHR5cGVFcnI7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nICYmIGNhbGxiYWNrICE9PSB2b2lkIDApIHtcbiAgICAgICAgdGhyb3cgdHlwZUVycjtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBfY2xvbmUob3B0aW9ucyk7XG4gICAgICBvcHRpb25zLnJlcG9ydGVyID0gKF9yZWYxNDUgPSAoX29wdGlvbnMkcmVwb3J0ZXIgPSBvcHRpb25zLnJlcG9ydGVyKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRyZXBvcnRlciAhPT0gdm9pZCAwID8gX29wdGlvbnMkcmVwb3J0ZXIgOiAoX2F4ZSRfYXVkaXQgPSBheGUuX2F1ZGl0KSA9PT0gbnVsbCB8fCBfYXhlJF9hdWRpdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2F4ZSRfYXVkaXQucmVwb3J0ZXIpICE9PSBudWxsICYmIF9yZWYxNDUgIT09IHZvaWQgMCA/IF9yZWYxNDUgOiAndjEnO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgbm9vcDIgPSBmdW5jdGlvbiBub29wMigpIHt9O1xuICAgIGZ1bmN0aW9uIHJ1bjQoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcpLCBfa2V5OSA9IDA7IF9rZXk5IDwgX2xlbjc7IF9rZXk5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5OV0gPSBhcmd1bWVudHNbX2tleTldO1xuICAgICAgfVxuICAgICAgc2V0dXBHbG9iYWxzKGFyZ3NbMF0pO1xuICAgICAgdmFyIF9ub3JtYWxpemVSdW5QYXJhbXMgPSBub3JtYWxpemVSdW5QYXJhbXMoYXJncyksIGNvbnRleHQgPSBfbm9ybWFsaXplUnVuUGFyYW1zLmNvbnRleHQsIG9wdGlvbnMgPSBfbm9ybWFsaXplUnVuUGFyYW1zLm9wdGlvbnMsIF9ub3JtYWxpemVSdW5QYXJhbXMkYyA9IF9ub3JtYWxpemVSdW5QYXJhbXMuY2FsbGJhY2ssIGNhbGxiYWNrID0gX25vcm1hbGl6ZVJ1blBhcmFtcyRjID09PSB2b2lkIDAgPyBub29wMiA6IF9ub3JtYWxpemVSdW5QYXJhbXMkYztcbiAgICAgIHZhciBfZ2V0UHJvbWlzZUhhbmRsZXJzID0gZ2V0UHJvbWlzZUhhbmRsZXJzKGNhbGxiYWNrKSwgdGhlbmFibGUgPSBfZ2V0UHJvbWlzZUhhbmRsZXJzLnRoZW5hYmxlLCByZXNvbHZlID0gX2dldFByb21pc2VIYW5kbGVycy5yZXNvbHZlLCByZWplY3QgPSBfZ2V0UHJvbWlzZUhhbmRsZXJzLnJlamVjdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGFzc2VydF9kZWZhdWx0KGF4ZS5fYXVkaXQsICdObyBhdWRpdCBjb25maWd1cmVkJyk7XG4gICAgICAgIGFzc2VydF9kZWZhdWx0KCFheGUuX3J1bm5pbmcsICdBeGUgaXMgYWxyZWFkeSBydW5uaW5nLiBVc2UgYGF3YWl0IGF4ZS5ydW4oKWAgdG8gd2FpdCBmb3IgdGhlIHByZXZpb3VzIHJ1biB0byBmaW5pc2ggYmVmb3JlIHN0YXJ0aW5nIGEgbmV3IHJ1bi4nKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUVycm9yKGUsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIGF4ZS5fcnVubmluZyA9IHRydWU7XG4gICAgICBpZiAob3B0aW9ucy5wZXJmb3JtYW5jZVRpbWVyKSB7XG4gICAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQuc3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZVJ1blJ1bGVzKHJhd1Jlc3VsdHMsIHRlYXJkb3duMikge1xuICAgICAgICB2YXIgcmVzcG9uZCA9IGZ1bmN0aW9uIHJlc3BvbmQocmVzdWx0cykge1xuICAgICAgICAgIGlmIChvcHRpb25zLnBlcmZvcm1hbmNlVGltZXIpIHtcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQubWFyaygncmVwb3J0ZXJFbmQnKTtcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQubWVhc3VyZSgncmVwb3J0ZXInLCAncmVwb3J0ZXJTdGFydCcsICdyZXBvcnRlckVuZCcpO1xuICAgICAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5sb2dNZWFzdXJlcygncmVwb3J0ZXInKTtcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlX3RpbWVyX2RlZmF1bHQuZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF4ZS5fcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRlYXJkb3duMigpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGF4ZS5sb2coZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgd3JhcHBlZFJlamVjdCA9IGZ1bmN0aW9uIHdyYXBwZWRSZWplY3QoZXJyMikge1xuICAgICAgICAgIGF4ZS5fcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRlYXJkb3duMigpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZWplY3QoZXJyMik7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYXhlLmxvZyhlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMucGVyZm9ybWFuY2VUaW1lcikge1xuICAgICAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5tYXJrKCdyZXBvcnRlclN0YXJ0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNyZWF0ZVJlcG9ydChyYXdSZXN1bHRzLCBvcHRpb25zLCByZXNwb25kLCB3cmFwcGVkUmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyMikge1xuICAgICAgICAgIHdyYXBwZWRSZWplY3QoZXJyMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVycm9yUnVuUnVsZXMoZXJyMikge1xuICAgICAgICBpZiAob3B0aW9ucy5wZXJmb3JtYW5jZVRpbWVyKSB7XG4gICAgICAgICAgcGVyZm9ybWFuY2VfdGltZXJfZGVmYXVsdC5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBheGUuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgY2FsbGJhY2soZXJyMik7XG4gICAgICAgIHJlamVjdChlcnIyKTtcbiAgICAgIH1cbiAgICAgIGF4ZS5fcnVuUnVsZXMoY29udGV4dCwgb3B0aW9ucywgaGFuZGxlUnVuUnVsZXMsIGVycm9yUnVuUnVsZXMpO1xuICAgICAgcmV0dXJuIHRoZW5hYmxlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRQcm9taXNlSGFuZGxlcnMoY2FsbGJhY2spIHtcbiAgICAgIHZhciB0aGVuYWJsZSwgcmVqZWN0LCByZXNvbHZlO1xuICAgICAgaWYgKHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nICYmIGNhbGxiYWNrID09PSBub29wMikge1xuICAgICAgICB0aGVuYWJsZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKF9yZXNvbHZlLCBfcmVqZWN0KSB7XG4gICAgICAgICAgcmVqZWN0ID0gX3JlamVjdDtcbiAgICAgICAgICByZXNvbHZlID0gX3Jlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlamVjdCA9IGZ1bmN0aW9uIHJlamVjdChlcnIyKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycjIpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGhlbmFibGU6IHRoZW5hYmxlLFxuICAgICAgICByZWplY3Q6IHJlamVjdCxcbiAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlUmVwb3J0KHJhd1Jlc3VsdHMsIG9wdGlvbnMsIHJlc3BvbmQsIHJlamVjdCkge1xuICAgICAgdmFyIHJlcG9ydGVyID0gZ2V0UmVwb3J0ZXIob3B0aW9ucy5yZXBvcnRlcik7XG4gICAgICB2YXIgcmVzdWx0cyA9IHJlcG9ydGVyKHJhd1Jlc3VsdHMsIG9wdGlvbnMsIHJlc3BvbmQsIHJlamVjdCk7XG4gICAgICBpZiAocmVzdWx0cyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHJlc3BvbmQocmVzdWx0cyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycjIsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nICYmIGNhbGxiYWNrICE9PSBub29wMikge1xuICAgICAgICBjYWxsYmFjayhlcnIyLm1lc3NhZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnIyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBydW5QYXJ0aWFsKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW44KSwgX2tleTEwID0gMDsgX2tleTEwIDwgX2xlbjg7IF9rZXkxMCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTEwXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICAgICAgfVxuICAgICAgdmFyIF9ub3JtYWxpemVSdW5QYXJhbXMyID0gbm9ybWFsaXplUnVuUGFyYW1zKGFyZ3MpLCBvcHRpb25zID0gX25vcm1hbGl6ZVJ1blBhcmFtczIub3B0aW9ucywgY29udGV4dCA9IF9ub3JtYWxpemVSdW5QYXJhbXMyLmNvbnRleHQ7XG4gICAgICBhc3NlcnRfZGVmYXVsdChheGUuX2F1ZGl0LCAnQXhlIGlzIG5vdCBjb25maWd1cmVkLiBBdWRpdCBpcyBtaXNzaW5nLicpO1xuICAgICAgYXNzZXJ0X2RlZmF1bHQoIWF4ZS5fcnVubmluZywgJ0F4ZSBpcyBhbHJlYWR5IHJ1bm5pbmcuIFVzZSBgYXdhaXQgYXhlLnJ1bigpYCB0byB3YWl0IGZvciB0aGUgcHJldmlvdXMgcnVuIHRvIGZpbmlzaCBiZWZvcmUgc3RhcnRpbmcgYSBuZXcgcnVuLicpO1xuICAgICAgdmFyIGNvbnRleHRPYmogPSBuZXcgQ29udGV4dChjb250ZXh0LCBheGUuX3RyZWUpO1xuICAgICAgYXhlLl90cmVlID0gY29udGV4dE9iai5mbGF0VHJlZTtcbiAgICAgIGF4ZS5fc2VsZWN0b3JEYXRhID0gX2dldFNlbGVjdG9yRGF0YShjb250ZXh0T2JqLmZsYXRUcmVlKTtcbiAgICAgIGF4ZS5fcnVubmluZyA9IHRydWU7XG4gICAgICBvcHRpb25zLmVsZW1lbnRSZWYgPSBmYWxzZTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXMsIHJlaikge1xuICAgICAgICBheGUuX2F1ZGl0LnJ1bihjb250ZXh0T2JqLCBvcHRpb25zLCByZXMsIHJlaik7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcbiAgICAgICAgcmVzdWx0cyA9IG5vZGVfc2VyaWFsaXplcl9kZWZhdWx0Lm1hcFJhd1Jlc3VsdHMocmVzdWx0cyk7XG4gICAgICAgIHZhciBmcmFtZXMgPSBjb250ZXh0T2JqLmZyYW1lcy5tYXAoZnVuY3Rpb24oX3JlZjE0Nikge1xuICAgICAgICAgIHZhciBub2RlID0gX3JlZjE0Ni5ub2RlO1xuICAgICAgICAgIHJldHVybiBub2RlX3NlcmlhbGl6ZXJfZGVmYXVsdC50b1NwZWMobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZW52aXJvbm1lbnREYXRhO1xuICAgICAgICBpZiAoY29udGV4dE9iai5pbml0aWF0b3IpIHtcbiAgICAgICAgICBlbnZpcm9ubWVudERhdGEgPSBfZ2V0RW52aXJvbm1lbnREYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgYXhlLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRlYXJkb3duX2RlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN1bHRzOiByZXN1bHRzLFxuICAgICAgICAgIGZyYW1lczogZnJhbWVzLFxuICAgICAgICAgIGVudmlyb25tZW50RGF0YTogZW52aXJvbm1lbnREYXRhXG4gICAgICAgIH07XG4gICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbihlcnIyKSB7XG4gICAgICAgIGF4ZS5fcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0ZWFyZG93bl9kZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5pc2hSdW4ocGFydGlhbFJlc3VsdHMpIHtcbiAgICAgIHZhciBfcmVmMTQ4LCBfb3B0aW9ucyRyZXBvcnRlcjIsIF9heGUkX2F1ZGl0MjtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIG9wdGlvbnMgPSBfY2xvbmUob3B0aW9ucyk7XG4gICAgICB2YXIgX3JlZjE0NyA9IHBhcnRpYWxSZXN1bHRzLmZpbmQoZnVuY3Rpb24ocikge1xuICAgICAgICByZXR1cm4gci5lbnZpcm9ubWVudERhdGE7XG4gICAgICB9KSB8fCB7fSwgZW52aXJvbm1lbnREYXRhID0gX3JlZjE0Ny5lbnZpcm9ubWVudERhdGE7XG4gICAgICBheGUuX2F1ZGl0Lm5vcm1hbGl6ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICBvcHRpb25zLnJlcG9ydGVyID0gKF9yZWYxNDggPSAoX29wdGlvbnMkcmVwb3J0ZXIyID0gb3B0aW9ucy5yZXBvcnRlcikgIT09IG51bGwgJiYgX29wdGlvbnMkcmVwb3J0ZXIyICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRyZXBvcnRlcjIgOiAoX2F4ZSRfYXVkaXQyID0gYXhlLl9hdWRpdCkgPT09IG51bGwgfHwgX2F4ZSRfYXVkaXQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYXhlJF9hdWRpdDIucmVwb3J0ZXIpICE9PSBudWxsICYmIF9yZWYxNDggIT09IHZvaWQgMCA/IF9yZWYxNDggOiAndjEnO1xuICAgICAgc2V0RnJhbWVTcGVjKHBhcnRpYWxSZXN1bHRzKTtcbiAgICAgIHZhciByZXN1bHRzID0gbWVyZ2VfcmVzdWx0c19kZWZhdWx0KHBhcnRpYWxSZXN1bHRzKTtcbiAgICAgIHJlc3VsdHMgPSBheGUuX2F1ZGl0LmFmdGVyKHJlc3VsdHMsIG9wdGlvbnMpO1xuICAgICAgcmVzdWx0cy5mb3JFYWNoKF9wdWJsaXNoTWV0YURhdGEpO1xuICAgICAgcmVzdWx0cyA9IHJlc3VsdHMubWFwKF9maW5hbGl6ZVJ1bGVSZXN1bHQpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVJlcG9ydDIocmVzdWx0cywgX2V4dGVuZHMoe1xuICAgICAgICBlbnZpcm9ubWVudERhdGE6IGVudmlyb25tZW50RGF0YVxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRGcmFtZVNwZWMocGFydGlhbFJlc3VsdHMpIHtcbiAgICAgIHZhciBmcmFtZVN0YWNrID0gW107XG4gICAgICB2YXIgX2l0ZXJhdG9yMjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihwYXJ0aWFsUmVzdWx0cyksIF9zdGVwMjM7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjIzLnMoKTsgIShfc3RlcDIzID0gX2l0ZXJhdG9yMjMubigpKS5kb25lOyApIHtcbiAgICAgICAgICB2YXIgcGFydGlhbFJlc3VsdCA9IF9zdGVwMjMudmFsdWU7XG4gICAgICAgICAgdmFyIGZyYW1lU3BlYyA9IGZyYW1lU3RhY2suc2hpZnQoKTtcbiAgICAgICAgICBpZiAoIXBhcnRpYWxSZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJ0aWFsUmVzdWx0LmZyYW1lU3BlYyA9IGZyYW1lU3BlYyAhPT0gbnVsbCAmJiBmcmFtZVNwZWMgIT09IHZvaWQgMCA/IGZyYW1lU3BlYyA6IG51bGw7XG4gICAgICAgICAgdmFyIGZyYW1lU3BlY3MgPSBnZXRNZXJnZWRGcmFtZVNwZWNzKHBhcnRpYWxSZXN1bHQpO1xuICAgICAgICAgIGZyYW1lU3RhY2sudW5zaGlmdC5hcHBseShmcmFtZVN0YWNrLCBfdG9Db25zdW1hYmxlQXJyYXkoZnJhbWVTcGVjcykpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMjMuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMjMuZigpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRNZXJnZWRGcmFtZVNwZWNzKF9yZWYxNDkpIHtcbiAgICAgIHZhciBjaGlsZEZyYW1lU3BlY3MgPSBfcmVmMTQ5LmZyYW1lcywgcGFyZW50RnJhbWVTcGVjID0gX3JlZjE0OS5mcmFtZVNwZWM7XG4gICAgICBpZiAoIXBhcmVudEZyYW1lU3BlYykge1xuICAgICAgICByZXR1cm4gY2hpbGRGcmFtZVNwZWNzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaWxkRnJhbWVTcGVjcy5tYXAoZnVuY3Rpb24oY2hpbGRGcmFtZVNwZWMpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVfc2VyaWFsaXplcl9kZWZhdWx0Lm1lcmdlU3BlY3MoY2hpbGRGcmFtZVNwZWMsIHBhcmVudEZyYW1lU3BlYyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlUmVwb3J0MihyZXN1bHRzLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXBvcnRlciA9IGdldFJlcG9ydGVyKG9wdGlvbnMucmVwb3J0ZXIpO1xuICAgICAgICByZXBvcnRlcihyZXN1bHRzLCBvcHRpb25zLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldHVwKG5vZGUpIHtcbiAgICAgIGlmIChheGUuX3RyZWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBeGUgaXMgYWxyZWFkeSBzZXR1cC4gQ2FsbCBgYXhlLnRlYXJkb3duKClgIGJlZm9yZSBjYWxsaW5nIGBheGUuc2V0dXBgIGFnYWluLicpO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgJiYgX3R5cGVvZihub2RlLmRvY3VtZW50RWxlbWVudCkgPT09ICdvYmplY3QnICYmIF90eXBlb2Yobm9kZS5kZWZhdWx0VmlldykgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG5vZGUgPSBub2RlLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHNldHVwR2xvYmFscyhub2RlKTtcbiAgICAgIGF4ZS5fdHJlZSA9IF9nZXRGbGF0dGVuZWRUcmVlKG5vZGUpO1xuICAgICAgYXhlLl9zZWxlY3RvckRhdGEgPSBfZ2V0U2VsZWN0b3JEYXRhKGF4ZS5fdHJlZSk7XG4gICAgICByZXR1cm4gYXhlLl90cmVlWzBdO1xuICAgIH1cbiAgICB2YXIgc2V0dXBfZGVmYXVsdCA9IHNldHVwO1xuICAgIHZhciBuYVJlcG9ydGVyID0gZnVuY3Rpb24gbmFSZXBvcnRlcihyZXN1bHRzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgY29uc29sZS53YXJuKCdcIm5hXCIgcmVwb3J0ZXIgd2lsbCBiZSBkZXByZWNhdGVkIGluIGF4ZSB2NC4wLiBVc2UgdGhlIFwidjJcIiByZXBvcnRlciBpbnN0ZWFkLicpO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIF9vcHRpb25zNCA9IG9wdGlvbnMsIGVudmlyb25tZW50RGF0YSA9IF9vcHRpb25zNC5lbnZpcm9ubWVudERhdGEsIHRvb2xPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9vcHRpb25zNCwgX2V4Y2x1ZGVkMTUpO1xuICAgICAgY2FsbGJhY2soX2V4dGVuZHMoe30sIF9nZXRFbnZpcm9ubWVudERhdGEoZW52aXJvbm1lbnREYXRhKSwge1xuICAgICAgICB0b29sT3B0aW9uczogdG9vbE9wdGlvbnNcbiAgICAgIH0sIHByb2Nlc3NBZ2dyZWdhdGUocmVzdWx0cywgb3B0aW9ucykpKTtcbiAgICB9O1xuICAgIHZhciBuYV9kZWZhdWx0ID0gbmFSZXBvcnRlcjtcbiAgICB2YXIgbm9QYXNzZXNSZXBvcnRlciA9IGZ1bmN0aW9uIG5vUGFzc2VzUmVwb3J0ZXIocmVzdWx0cywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBfb3B0aW9uczUgPSBvcHRpb25zLCBlbnZpcm9ubWVudERhdGEgPSBfb3B0aW9uczUuZW52aXJvbm1lbnREYXRhLCB0b29sT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfb3B0aW9uczUsIF9leGNsdWRlZDE2KTtcbiAgICAgIG9wdGlvbnMucmVzdWx0VHlwZXMgPSBbICd2aW9sYXRpb25zJyBdO1xuICAgICAgdmFyIF9wcm9jZXNzQWdncmVnYXRlID0gcHJvY2Vzc0FnZ3JlZ2F0ZShyZXN1bHRzLCBvcHRpb25zKSwgdmlvbGF0aW9ucyA9IF9wcm9jZXNzQWdncmVnYXRlLnZpb2xhdGlvbnM7XG4gICAgICBjYWxsYmFjayhfZXh0ZW5kcyh7fSwgX2dldEVudmlyb25tZW50RGF0YShlbnZpcm9ubWVudERhdGEpLCB7XG4gICAgICAgIHRvb2xPcHRpb25zOiB0b29sT3B0aW9ucyxcbiAgICAgICAgdmlvbGF0aW9uczogdmlvbGF0aW9uc1xuICAgICAgfSkpO1xuICAgIH07XG4gICAgdmFyIG5vX3Bhc3Nlc19kZWZhdWx0ID0gbm9QYXNzZXNSZXBvcnRlcjtcbiAgICB2YXIgcmF3UmVwb3J0ZXIgPSBmdW5jdGlvbiByYXdSZXBvcnRlcihyZXN1bHRzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKCFyZXN1bHRzIHx8ICFBcnJheS5pc0FycmF5KHJlc3VsdHMpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICAgIH1cbiAgICAgIHZhciB0cmFuc2Zvcm1lZFJlc3VsdHMgPSByZXN1bHRzLm1hcChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkUmVzdWx0ID0gX2V4dGVuZHMoe30sIHJlc3VsdCk7XG4gICAgICAgIHZhciB0eXBlcyA9IFsgJ3Bhc3NlcycsICd2aW9sYXRpb25zJywgJ2luY29tcGxldGUnLCAnaW5hcHBsaWNhYmxlJyBdO1xuICAgICAgICBmb3IgKHZhciBfaTUwID0gMCwgX3R5cGVzID0gdHlwZXM7IF9pNTAgPCBfdHlwZXMubGVuZ3RoOyBfaTUwKyspIHtcbiAgICAgICAgICB2YXIgdHlwZTIgPSBfdHlwZXNbX2k1MF07XG4gICAgICAgICAgdHJhbnNmb3JtZWRSZXN1bHRbdHlwZTJdID0gbm9kZV9zZXJpYWxpemVyX2RlZmF1bHQubWFwUmF3Tm9kZVJlc3VsdHModHJhbnNmb3JtZWRSZXN1bHRbdHlwZTJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWRSZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIGNhbGxiYWNrKHRyYW5zZm9ybWVkUmVzdWx0cyk7XG4gICAgfTtcbiAgICB2YXIgcmF3X2RlZmF1bHQgPSByYXdSZXBvcnRlcjtcbiAgICB2YXIgcmF3RW52UmVwb3J0ZXIgPSBmdW5jdGlvbiByYXdFbnZSZXBvcnRlcihyZXN1bHRzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIF9vcHRpb25zNiA9IG9wdGlvbnMsIGVudmlyb25tZW50RGF0YSA9IF9vcHRpb25zNi5lbnZpcm9ubWVudERhdGEsIHRvb2xPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9vcHRpb25zNiwgX2V4Y2x1ZGVkMTcpO1xuICAgICAgcmF3X2RlZmF1bHQocmVzdWx0cywgdG9vbE9wdGlvbnMsIGZ1bmN0aW9uKHJhdykge1xuICAgICAgICB2YXIgZW52ID0gX2dldEVudmlyb25tZW50RGF0YShlbnZpcm9ubWVudERhdGEpO1xuICAgICAgICBjYWxsYmFjayh7XG4gICAgICAgICAgcmF3OiByYXcsXG4gICAgICAgICAgZW52OiBlbnZcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHZhciByYXdfZW52X2RlZmF1bHQgPSByYXdFbnZSZXBvcnRlcjtcbiAgICB2YXIgdjFSZXBvcnRlciA9IGZ1bmN0aW9uIHYxUmVwb3J0ZXIocmVzdWx0cywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBfb3B0aW9uczcgPSBvcHRpb25zLCBlbnZpcm9ubWVudERhdGEgPSBfb3B0aW9uczcuZW52aXJvbm1lbnREYXRhLCB0b29sT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfb3B0aW9uczcsIF9leGNsdWRlZDE4KTtcbiAgICAgIHZhciBvdXQgPSBwcm9jZXNzQWdncmVnYXRlKHJlc3VsdHMsIG9wdGlvbnMpO1xuICAgICAgdmFyIGFkZEZhaWx1cmVTdW1tYXJpZXMgPSBmdW5jdGlvbiBhZGRGYWlsdXJlU3VtbWFyaWVzKHJlc3VsdCkge1xuICAgICAgICByZXN1bHQubm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlUmVzdWx0KSB7XG4gICAgICAgICAgbm9kZVJlc3VsdC5mYWlsdXJlU3VtbWFyeSA9IGZhaWx1cmVfc3VtbWFyeV9kZWZhdWx0KG5vZGVSZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICBvdXQuaW5jb21wbGV0ZS5mb3JFYWNoKGFkZEZhaWx1cmVTdW1tYXJpZXMpO1xuICAgICAgb3V0LnZpb2xhdGlvbnMuZm9yRWFjaChhZGRGYWlsdXJlU3VtbWFyaWVzKTtcbiAgICAgIGNhbGxiYWNrKF9leHRlbmRzKHt9LCBfZ2V0RW52aXJvbm1lbnREYXRhKGVudmlyb25tZW50RGF0YSksIHtcbiAgICAgICAgdG9vbE9wdGlvbnM6IHRvb2xPcHRpb25zXG4gICAgICB9LCBvdXQpKTtcbiAgICB9O1xuICAgIHZhciB2MV9kZWZhdWx0ID0gdjFSZXBvcnRlcjtcbiAgICB2YXIgdjJSZXBvcnRlciA9IGZ1bmN0aW9uIHYyUmVwb3J0ZXIocmVzdWx0cywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBfb3B0aW9uczggPSBvcHRpb25zLCBlbnZpcm9ubWVudERhdGEgPSBfb3B0aW9uczguZW52aXJvbm1lbnREYXRhLCB0b29sT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfb3B0aW9uczgsIF9leGNsdWRlZDE5KTtcbiAgICAgIHZhciBvdXQgPSBwcm9jZXNzQWdncmVnYXRlKHJlc3VsdHMsIG9wdGlvbnMpO1xuICAgICAgY2FsbGJhY2soX2V4dGVuZHMoe30sIF9nZXRFbnZpcm9ubWVudERhdGEoZW52aXJvbm1lbnREYXRhKSwge1xuICAgICAgICB0b29sT3B0aW9uczogdG9vbE9wdGlvbnNcbiAgICAgIH0sIG91dCkpO1xuICAgIH07XG4gICAgdmFyIHYyX2RlZmF1bHQgPSB2MlJlcG9ydGVyO1xuICAgIHZhciBfdGhpc1dpbGxCZURlbGV0ZWREb05vdFVzZSA9IHtcbiAgICAgIGJhc2U6IHtcbiAgICAgICAgQXVkaXQ6IGF1ZGl0X2RlZmF1bHQsXG4gICAgICAgIENoZWNrUmVzdWx0OiBjaGVja19yZXN1bHRfZGVmYXVsdCxcbiAgICAgICAgQ2hlY2s6IGNoZWNrX2RlZmF1bHQsXG4gICAgICAgIENvbnRleHQ6IENvbnRleHQsXG4gICAgICAgIFJ1bGVSZXN1bHQ6IHJ1bGVfcmVzdWx0X2RlZmF1bHQsXG4gICAgICAgIFJ1bGU6IFJ1bGUsXG4gICAgICAgIG1ldGFkYXRhRnVuY3Rpb25NYXA6IG1ldGFkYXRhX2Z1bmN0aW9uX21hcF9kZWZhdWx0XG4gICAgICB9LFxuICAgICAgcHVibGljOiB7XG4gICAgICAgIHJlcG9ydGVyczogcmVwb3J0ZXJzXG4gICAgICB9LFxuICAgICAgaGVscGVyczoge1xuICAgICAgICBmYWlsdXJlU3VtbWFyeTogZmFpbHVyZV9zdW1tYXJ5X2RlZmF1bHQsXG4gICAgICAgIGluY29tcGxldGVGYWxsYmFja01lc3NhZ2U6IGluY29tcGxldGVGYWxsYmFja01lc3NhZ2UsXG4gICAgICAgIHByb2Nlc3NBZ2dyZWdhdGU6IHByb2Nlc3NBZ2dyZWdhdGVcbiAgICAgIH0sXG4gICAgICB1dGlsczoge1xuICAgICAgICBzZXREZWZhdWx0RnJhbWVNZXNzZW5nZXI6IHNldERlZmF1bHRGcmFtZU1lc3NlbmdlcixcbiAgICAgICAgY2FjaGVOb2RlU2VsZWN0b3JzOiBjYWNoZU5vZGVTZWxlY3RvcnMsXG4gICAgICAgIGdldE5vZGVzTWF0Y2hpbmdFeHByZXNzaW9uOiBnZXROb2Rlc01hdGNoaW5nRXhwcmVzc2lvbixcbiAgICAgICAgY29udmVydFNlbGVjdG9yOiBfY29udmVydFNlbGVjdG9yXG4gICAgICB9LFxuICAgICAgY29tbW9uczoge1xuICAgICAgICBkb206IHtcbiAgICAgICAgICBuYXRpdmVseUhpZGRlbjogbmF0aXZlbHlIaWRkZW4sXG4gICAgICAgICAgZGlzcGxheUhpZGRlbjogZGlzcGxheUhpZGRlbixcbiAgICAgICAgICB2aXNpYmlsaXR5SGlkZGVuOiB2aXNpYmlsaXR5SGlkZGVuLFxuICAgICAgICAgIGNvbnRlbnRWaXNpYmlsdHlIaWRkZW46IGNvbnRlbnRWaXNpYmlsdHlIaWRkZW4sXG4gICAgICAgICAgYXJpYUhpZGRlbjogYXJpYUhpZGRlbixcbiAgICAgICAgICBvcGFjaXR5SGlkZGVuOiBvcGFjaXR5SGlkZGVuLFxuICAgICAgICAgIHNjcm9sbEhpZGRlbjogc2Nyb2xsSGlkZGVuLFxuICAgICAgICAgIG92ZXJmbG93SGlkZGVuOiBvdmVyZmxvd0hpZGRlbixcbiAgICAgICAgICBjbGlwSGlkZGVuOiBjbGlwSGlkZGVuLFxuICAgICAgICAgIGFyZWFIaWRkZW46IGFyZWFIaWRkZW4sXG4gICAgICAgICAgZGV0YWlsc0hpZGRlbjogZGV0YWlsc0hpZGRlblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgZXhwb3NlZF9mb3JfdGVzdGluZ19kZWZhdWx0ID0gX3RoaXNXaWxsQmVEZWxldGVkRG9Ob3RVc2U7XG4gICAgYXhlLl90aGlzV2lsbEJlRGVsZXRlZERvTm90VXNlID0gZXhwb3NlZF9mb3JfdGVzdGluZ19kZWZhdWx0O1xuICAgIGF4ZS5jb25zdGFudHMgPSBjb25zdGFudHNfZGVmYXVsdDtcbiAgICBheGUubG9nID0gbG9nX2RlZmF1bHQ7XG4gICAgYXhlLkFic3RyYWN0VmlydHVhbE5vZGUgPSBhYnN0cmFjdF92aXJ0dWFsX25vZGVfZGVmYXVsdDtcbiAgICBheGUuU2VyaWFsVmlydHVhbE5vZGUgPSBzZXJpYWxfdmlydHVhbF9ub2RlX2RlZmF1bHQ7XG4gICAgYXhlLlZpcnR1YWxOb2RlID0gdmlydHVhbF9ub2RlX2RlZmF1bHQ7XG4gICAgYXhlLl9jYWNoZSA9IGNhY2hlX2RlZmF1bHQ7XG4gICAgYXhlLmltcG9ydHMgPSBpbXBvcnRzX2V4cG9ydHM7XG4gICAgYXhlLmNsZWFudXAgPSBjbGVhbnVwX2RlZmF1bHQ7XG4gICAgYXhlLmNvbmZpZ3VyZSA9IGNvbmZpZ3VyZV9kZWZhdWx0O1xuICAgIGF4ZS5mcmFtZU1lc3NlbmdlciA9IGZyYW1lTWVzc2VuZ2VyMjtcbiAgICBheGUuZ2V0UnVsZXMgPSBnZXRfcnVsZXNfZGVmYXVsdDtcbiAgICBheGUuX2xvYWQgPSBsb2FkO1xuICAgIGF4ZS5wbHVnaW5zID0ge307XG4gICAgYXhlLnJlZ2lzdGVyUGx1Z2luID0gcGx1Z2luc19kZWZhdWx0O1xuICAgIGF4ZS5oYXNSZXBvcnRlciA9IGhhc1JlcG9ydGVyO1xuICAgIGF4ZS5nZXRSZXBvcnRlciA9IGdldFJlcG9ydGVyO1xuICAgIGF4ZS5hZGRSZXBvcnRlciA9IGFkZFJlcG9ydGVyO1xuICAgIGF4ZS5yZXNldCA9IHJlc2V0X2RlZmF1bHQ7XG4gICAgYXhlLl9ydW5SdWxlcyA9IHJ1blJ1bGVzO1xuICAgIGF4ZS5ydW5WaXJ0dWFsUnVsZSA9IHJ1blZpcnR1YWxSdWxlO1xuICAgIGF4ZS5ydW4gPSBydW40O1xuICAgIGF4ZS5zZXR1cCA9IHNldHVwX2RlZmF1bHQ7XG4gICAgYXhlLnRlYXJkb3duID0gdGVhcmRvd25fZGVmYXVsdDtcbiAgICBheGUucnVuUGFydGlhbCA9IHJ1blBhcnRpYWw7XG4gICAgYXhlLmZpbmlzaFJ1biA9IGZpbmlzaFJ1bjtcbiAgICBheGUuY29tbW9ucyA9IGNvbW1vbnNfZXhwb3J0cztcbiAgICBheGUudXRpbHMgPSB1dGlsc19leHBvcnRzO1xuICAgIGF4ZS5hZGRSZXBvcnRlcignbmEnLCBuYV9kZWZhdWx0KTtcbiAgICBheGUuYWRkUmVwb3J0ZXIoJ25vLXBhc3NlcycsIG5vX3Bhc3Nlc19kZWZhdWx0KTtcbiAgICBheGUuYWRkUmVwb3J0ZXIoJ3Jhd0VudicsIHJhd19lbnZfZGVmYXVsdCk7XG4gICAgYXhlLmFkZFJlcG9ydGVyKCdyYXcnLCByYXdfZGVmYXVsdCk7XG4gICAgYXhlLmFkZFJlcG9ydGVyKCd2MScsIHYxX2RlZmF1bHQpO1xuICAgIGF4ZS5hZGRSZXBvcnRlcigndjInLCB2Ml9kZWZhdWx0LCB0cnVlKTtcbiAgfSkoKTtcbiAgJ3VzZSBzdHJpY3QnO1xuICBheGUuX2xvYWQoe1xuICAgIGxhbmc6ICdlbicsXG4gICAgZGF0YToge1xuICAgICAgcnVsZXM6IHtcbiAgICAgICAgYWNjZXNza2V5czoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGV2ZXJ5IGFjY2Vzc2tleSBhdHRyaWJ1dGUgdmFsdWUgaXMgdW5pcXVlJyxcbiAgICAgICAgICBoZWxwOiAnYWNjZXNza2V5IGF0dHJpYnV0ZSB2YWx1ZSBzaG91bGQgYmUgdW5pcXVlJ1xuICAgICAgICB9LFxuICAgICAgICAnYXJlYS1hbHQnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgPGFyZWE+IGVsZW1lbnRzIG9mIGltYWdlIG1hcHMgaGF2ZSBhbHRlcm5hdGl2ZSB0ZXh0JyxcbiAgICAgICAgICBoZWxwOiAnQWN0aXZlIDxhcmVhPiBlbGVtZW50cyBtdXN0IGhhdmUgYWx0ZXJuYXRpdmUgdGV4dCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtYWxsb3dlZC1hdHRyJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGFuIGVsZW1lbnRcXCdzIHJvbGUgc3VwcG9ydHMgaXRzIEFSSUEgYXR0cmlidXRlcycsXG4gICAgICAgICAgaGVscDogJ0VsZW1lbnRzIG11c3Qgb25seSB1c2Ugc3VwcG9ydGVkIEFSSUEgYXR0cmlidXRlcydcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtYWxsb3dlZC1yb2xlJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHJvbGUgYXR0cmlidXRlIGhhcyBhbiBhcHByb3ByaWF0ZSB2YWx1ZSBmb3IgdGhlIGVsZW1lbnQnLFxuICAgICAgICAgIGhlbHA6ICdBUklBIHJvbGUgc2hvdWxkIGJlIGFwcHJvcHJpYXRlIGZvciB0aGUgZWxlbWVudCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtYnJhaWxsZS1lcXVpdmFsZW50Jzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGFyaWEtYnJhaWxsZWxhYmVsIGFuZCBhcmlhLWJyYWlsbGVyb2xlZGVzY3JpcHRpb24gaGF2ZSBhIG5vbi1icmFpbGxlIGVxdWl2YWxlbnQnLFxuICAgICAgICAgIGhlbHA6ICdhcmlhLWJyYWlsbGUgYXR0cmlidXRlcyBtdXN0IGhhdmUgYSBub24tYnJhaWxsZSBlcXVpdmFsZW50J1xuICAgICAgICB9LFxuICAgICAgICAnYXJpYS1jb21tYW5kLW5hbWUnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgZXZlcnkgQVJJQSBidXR0b24sIGxpbmsgYW5kIG1lbnVpdGVtIGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUnLFxuICAgICAgICAgIGhlbHA6ICdBUklBIGNvbW1hbmRzIG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUnXG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLWNvbmRpdGlvbmFsLWF0dHInOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgQVJJQSBhdHRyaWJ1dGVzIGFyZSB1c2VkIGFzIGRlc2NyaWJlZCBpbiB0aGUgc3BlY2lmaWNhdGlvbiBvZiB0aGUgZWxlbWVudFxcJ3Mgcm9sZScsXG4gICAgICAgICAgaGVscDogJ0FSSUEgYXR0cmlidXRlcyBtdXN0IGJlIHVzZWQgYXMgc3BlY2lmaWVkIGZvciB0aGUgZWxlbWVudFxcJ3Mgcm9sZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtZGVwcmVjYXRlZC1yb2xlJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGVsZW1lbnRzIGRvIG5vdCB1c2UgZGVwcmVjYXRlZCByb2xlcycsXG4gICAgICAgICAgaGVscDogJ0RlcHJlY2F0ZWQgQVJJQSByb2xlcyBtdXN0IG5vdCBiZSB1c2VkJ1xuICAgICAgICB9LFxuICAgICAgICAnYXJpYS1kaWFsb2ctbmFtZSc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBldmVyeSBBUklBIGRpYWxvZyBhbmQgYWxlcnRkaWFsb2cgbm9kZSBoYXMgYW4gYWNjZXNzaWJsZSBuYW1lJyxcbiAgICAgICAgICBoZWxwOiAnQVJJQSBkaWFsb2cgYW5kIGFsZXJ0ZGlhbG9nIG5vZGVzIHNob3VsZCBoYXZlIGFuIGFjY2Vzc2libGUgbmFtZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtaGlkZGVuLWJvZHknOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgYXJpYS1oaWRkZW49XCJ0cnVlXCIgaXMgbm90IHByZXNlbnQgb24gdGhlIGRvY3VtZW50IGJvZHkuJyxcbiAgICAgICAgICBoZWxwOiAnYXJpYS1oaWRkZW49XCJ0cnVlXCIgbXVzdCBub3QgYmUgcHJlc2VudCBvbiB0aGUgZG9jdW1lbnQgYm9keSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtaGlkZGVuLWZvY3VzJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGFyaWEtaGlkZGVuIGVsZW1lbnRzIGFyZSBub3QgZm9jdXNhYmxlIG5vciBjb250YWluIGZvY3VzYWJsZSBlbGVtZW50cycsXG4gICAgICAgICAgaGVscDogJ0FSSUEgaGlkZGVuIGVsZW1lbnQgbXVzdCBub3QgYmUgZm9jdXNhYmxlIG9yIGNvbnRhaW4gZm9jdXNhYmxlIGVsZW1lbnRzJ1xuICAgICAgICB9LFxuICAgICAgICAnYXJpYS1pbnB1dC1maWVsZC1uYW1lJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGV2ZXJ5IEFSSUEgaW5wdXQgZmllbGQgaGFzIGFuIGFjY2Vzc2libGUgbmFtZScsXG4gICAgICAgICAgaGVscDogJ0FSSUEgaW5wdXQgZmllbGRzIG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUnXG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLW1ldGVyLW5hbWUnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgZXZlcnkgQVJJQSBtZXRlciBub2RlIGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUnLFxuICAgICAgICAgIGhlbHA6ICdBUklBIG1ldGVyIG5vZGVzIG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUnXG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLXByb2dyZXNzYmFyLW5hbWUnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgZXZlcnkgQVJJQSBwcm9ncmVzc2JhciBub2RlIGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUnLFxuICAgICAgICAgIGhlbHA6ICdBUklBIHByb2dyZXNzYmFyIG5vZGVzIG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUnXG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLXByb2hpYml0ZWQtYXR0cic6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBBUklBIGF0dHJpYnV0ZXMgYXJlIG5vdCBwcm9oaWJpdGVkIGZvciBhbiBlbGVtZW50XFwncyByb2xlJyxcbiAgICAgICAgICBoZWxwOiAnRWxlbWVudHMgbXVzdCBvbmx5IHVzZSBwZXJtaXR0ZWQgQVJJQSBhdHRyaWJ1dGVzJ1xuICAgICAgICB9LFxuICAgICAgICAnYXJpYS1yZXF1aXJlZC1hdHRyJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGVsZW1lbnRzIHdpdGggQVJJQSByb2xlcyBoYXZlIGFsbCByZXF1aXJlZCBBUklBIGF0dHJpYnV0ZXMnLFxuICAgICAgICAgIGhlbHA6ICdSZXF1aXJlZCBBUklBIGF0dHJpYnV0ZXMgbXVzdCBiZSBwcm92aWRlZCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtcmVxdWlyZWQtY2hpbGRyZW4nOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgZWxlbWVudHMgd2l0aCBhbiBBUklBIHJvbGUgdGhhdCByZXF1aXJlIGNoaWxkIHJvbGVzIGNvbnRhaW4gdGhlbScsXG4gICAgICAgICAgaGVscDogJ0NlcnRhaW4gQVJJQSByb2xlcyBtdXN0IGNvbnRhaW4gcGFydGljdWxhciBjaGlsZHJlbidcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtcmVxdWlyZWQtcGFyZW50Jzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGVsZW1lbnRzIHdpdGggYW4gQVJJQSByb2xlIHRoYXQgcmVxdWlyZSBwYXJlbnQgcm9sZXMgYXJlIGNvbnRhaW5lZCBieSB0aGVtJyxcbiAgICAgICAgICBoZWxwOiAnQ2VydGFpbiBBUklBIHJvbGVzIG11c3QgYmUgY29udGFpbmVkIGJ5IHBhcnRpY3VsYXIgcGFyZW50cydcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGFyaWEtcm9sZWRlc2NyaXB0aW9uIGlzIG9ubHkgdXNlZCBvbiBlbGVtZW50cyB3aXRoIGFuIGltcGxpY2l0IG9yIGV4cGxpY2l0IHJvbGUnLFxuICAgICAgICAgIGhlbHA6ICdhcmlhLXJvbGVkZXNjcmlwdGlvbiBtdXN0IGJlIG9uIGVsZW1lbnRzIHdpdGggYSBzZW1hbnRpYyByb2xlJ1xuICAgICAgICB9LFxuICAgICAgICAnYXJpYS1yb2xlcyc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBhbGwgZWxlbWVudHMgd2l0aCBhIHJvbGUgYXR0cmlidXRlIHVzZSBhIHZhbGlkIHZhbHVlJyxcbiAgICAgICAgICBoZWxwOiAnQVJJQSByb2xlcyB1c2VkIG11c3QgY29uZm9ybSB0byB2YWxpZCB2YWx1ZXMnXG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLXRleHQnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgcm9sZT1cInRleHRcIiBpcyB1c2VkIG9uIGVsZW1lbnRzIHdpdGggbm8gZm9jdXNhYmxlIGRlc2NlbmRhbnRzJyxcbiAgICAgICAgICBoZWxwOiAnXCJyb2xlPXRleHRcIiBzaG91bGQgaGF2ZSBubyBmb2N1c2FibGUgZGVzY2VuZGFudHMnXG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLXRvZ2dsZS1maWVsZC1uYW1lJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGV2ZXJ5IEFSSUEgdG9nZ2xlIGZpZWxkIGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUnLFxuICAgICAgICAgIGhlbHA6ICdBUklBIHRvZ2dsZSBmaWVsZHMgbXVzdCBoYXZlIGFuIGFjY2Vzc2libGUgbmFtZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtdG9vbHRpcC1uYW1lJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGV2ZXJ5IEFSSUEgdG9vbHRpcCBub2RlIGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUnLFxuICAgICAgICAgIGhlbHA6ICdBUklBIHRvb2x0aXAgbm9kZXMgbXVzdCBoYXZlIGFuIGFjY2Vzc2libGUgbmFtZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtdHJlZWl0ZW0tbmFtZSc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBldmVyeSBBUklBIHRyZWVpdGVtIG5vZGUgaGFzIGFuIGFjY2Vzc2libGUgbmFtZScsXG4gICAgICAgICAgaGVscDogJ0FSSUEgdHJlZWl0ZW0gbm9kZXMgc2hvdWxkIGhhdmUgYW4gYWNjZXNzaWJsZSBuYW1lJ1xuICAgICAgICB9LFxuICAgICAgICAnYXJpYS12YWxpZC1hdHRyLXZhbHVlJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGFsbCBBUklBIGF0dHJpYnV0ZXMgaGF2ZSB2YWxpZCB2YWx1ZXMnLFxuICAgICAgICAgIGhlbHA6ICdBUklBIGF0dHJpYnV0ZXMgbXVzdCBjb25mb3JtIHRvIHZhbGlkIHZhbHVlcydcbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtdmFsaWQtYXR0cic6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBhdHRyaWJ1dGVzIHRoYXQgYmVnaW4gd2l0aCBhcmlhLSBhcmUgdmFsaWQgQVJJQSBhdHRyaWJ1dGVzJyxcbiAgICAgICAgICBoZWxwOiAnQVJJQSBhdHRyaWJ1dGVzIG11c3QgY29uZm9ybSB0byB2YWxpZCBuYW1lcydcbiAgICAgICAgfSxcbiAgICAgICAgJ2F1ZGlvLWNhcHRpb24nOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgPGF1ZGlvPiBlbGVtZW50cyBoYXZlIGNhcHRpb25zJyxcbiAgICAgICAgICBoZWxwOiAnPGF1ZGlvPiBlbGVtZW50cyBtdXN0IGhhdmUgYSBjYXB0aW9ucyB0cmFjaydcbiAgICAgICAgfSxcbiAgICAgICAgJ2F1dG9jb21wbGV0ZS12YWxpZCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGUgYXV0b2NvbXBsZXRlIGF0dHJpYnV0ZSBpcyBjb3JyZWN0IGFuZCBzdWl0YWJsZSBmb3IgdGhlIGZvcm0gZmllbGQnLFxuICAgICAgICAgIGhlbHA6ICdhdXRvY29tcGxldGUgYXR0cmlidXRlIG11c3QgYmUgdXNlZCBjb3JyZWN0bHknXG4gICAgICAgIH0sXG4gICAgICAgICdhdm9pZC1pbmxpbmUtc3BhY2luZyc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGF0IHRleHQgc3BhY2luZyBzZXQgdGhyb3VnaCBzdHlsZSBhdHRyaWJ1dGVzIGNhbiBiZSBhZGp1c3RlZCB3aXRoIGN1c3RvbSBzdHlsZXNoZWV0cycsXG4gICAgICAgICAgaGVscDogJ0lubGluZSB0ZXh0IHNwYWNpbmcgbXVzdCBiZSBhZGp1c3RhYmxlIHdpdGggY3VzdG9tIHN0eWxlc2hlZXRzJ1xuICAgICAgICB9LFxuICAgICAgICBibGluazoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIDxibGluaz4gZWxlbWVudHMgYXJlIG5vdCB1c2VkJyxcbiAgICAgICAgICBoZWxwOiAnPGJsaW5rPiBlbGVtZW50cyBhcmUgZGVwcmVjYXRlZCBhbmQgbXVzdCBub3QgYmUgdXNlZCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2J1dHRvbi1uYW1lJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGJ1dHRvbnMgaGF2ZSBkaXNjZXJuaWJsZSB0ZXh0JyxcbiAgICAgICAgICBoZWxwOiAnQnV0dG9ucyBtdXN0IGhhdmUgZGlzY2VybmlibGUgdGV4dCdcbiAgICAgICAgfSxcbiAgICAgICAgYnlwYXNzOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgZWFjaCBwYWdlIGhhcyBhdCBsZWFzdCBvbmUgbWVjaGFuaXNtIGZvciBhIHVzZXIgdG8gYnlwYXNzIG5hdmlnYXRpb24gYW5kIGp1bXAgc3RyYWlnaHQgdG8gdGhlIGNvbnRlbnQnLFxuICAgICAgICAgIGhlbHA6ICdQYWdlIG11c3QgaGF2ZSBtZWFucyB0byBieXBhc3MgcmVwZWF0ZWQgYmxvY2tzJ1xuICAgICAgICB9LFxuICAgICAgICAnY29sb3ItY29udHJhc3QtZW5oYW5jZWQnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgdGhlIGNvbnRyYXN0IGJldHdlZW4gZm9yZWdyb3VuZCBhbmQgYmFja2dyb3VuZCBjb2xvcnMgbWVldHMgV0NBRyAyIEFBQSBlbmhhbmNlZCBjb250cmFzdCByYXRpbyB0aHJlc2hvbGRzJyxcbiAgICAgICAgICBoZWxwOiAnRWxlbWVudHMgbXVzdCBtZWV0IGVuaGFuY2VkIGNvbG9yIGNvbnRyYXN0IHJhdGlvIHRocmVzaG9sZHMnXG4gICAgICAgIH0sXG4gICAgICAgICdjb2xvci1jb250cmFzdCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGUgY29udHJhc3QgYmV0d2VlbiBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kIGNvbG9ycyBtZWV0cyBXQ0FHIDIgQUEgbWluaW11bSBjb250cmFzdCByYXRpbyB0aHJlc2hvbGRzJyxcbiAgICAgICAgICBoZWxwOiAnRWxlbWVudHMgbXVzdCBtZWV0IG1pbmltdW0gY29sb3IgY29udHJhc3QgcmF0aW8gdGhyZXNob2xkcydcbiAgICAgICAgfSxcbiAgICAgICAgJ2Nzcy1vcmllbnRhdGlvbi1sb2NrJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGNvbnRlbnQgaXMgbm90IGxvY2tlZCB0byBhbnkgc3BlY2lmaWMgZGlzcGxheSBvcmllbnRhdGlvbiwgYW5kIHRoZSBjb250ZW50IGlzIG9wZXJhYmxlIGluIGFsbCBkaXNwbGF5IG9yaWVudGF0aW9ucycsXG4gICAgICAgICAgaGVscDogJ0NTUyBNZWRpYSBxdWVyaWVzIG11c3Qgbm90IGxvY2sgZGlzcGxheSBvcmllbnRhdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgJ2RlZmluaXRpb24tbGlzdCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSA8ZGw+IGVsZW1lbnRzIGFyZSBzdHJ1Y3R1cmVkIGNvcnJlY3RseScsXG4gICAgICAgICAgaGVscDogJzxkbD4gZWxlbWVudHMgbXVzdCBvbmx5IGRpcmVjdGx5IGNvbnRhaW4gcHJvcGVybHktb3JkZXJlZCA8ZHQ+IGFuZCA8ZGQ+IGdyb3VwcywgPHNjcmlwdD4sIDx0ZW1wbGF0ZT4gb3IgPGRpdj4gZWxlbWVudHMnXG4gICAgICAgIH0sXG4gICAgICAgIGRsaXRlbToge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIDxkdD4gYW5kIDxkZD4gZWxlbWVudHMgYXJlIGNvbnRhaW5lZCBieSBhIDxkbD4nLFxuICAgICAgICAgIGhlbHA6ICc8ZHQ+IGFuZCA8ZGQ+IGVsZW1lbnRzIG11c3QgYmUgY29udGFpbmVkIGJ5IGEgPGRsPidcbiAgICAgICAgfSxcbiAgICAgICAgJ2RvY3VtZW50LXRpdGxlJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGVhY2ggSFRNTCBkb2N1bWVudCBjb250YWlucyBhIG5vbi1lbXB0eSA8dGl0bGU+IGVsZW1lbnQnLFxuICAgICAgICAgIGhlbHA6ICdEb2N1bWVudHMgbXVzdCBoYXZlIDx0aXRsZT4gZWxlbWVudCB0byBhaWQgaW4gbmF2aWdhdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgJ2R1cGxpY2F0ZS1pZC1hY3RpdmUnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgZXZlcnkgaWQgYXR0cmlidXRlIHZhbHVlIG9mIGFjdGl2ZSBlbGVtZW50cyBpcyB1bmlxdWUnLFxuICAgICAgICAgIGhlbHA6ICdJRHMgb2YgYWN0aXZlIGVsZW1lbnRzIG11c3QgYmUgdW5pcXVlJ1xuICAgICAgICB9LFxuICAgICAgICAnZHVwbGljYXRlLWlkLWFyaWEnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgZXZlcnkgaWQgYXR0cmlidXRlIHZhbHVlIHVzZWQgaW4gQVJJQSBhbmQgaW4gbGFiZWxzIGlzIHVuaXF1ZScsXG4gICAgICAgICAgaGVscDogJ0lEcyB1c2VkIGluIEFSSUEgYW5kIGxhYmVscyBtdXN0IGJlIHVuaXF1ZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2R1cGxpY2F0ZS1pZCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBldmVyeSBpZCBhdHRyaWJ1dGUgdmFsdWUgaXMgdW5pcXVlJyxcbiAgICAgICAgICBoZWxwOiAnaWQgYXR0cmlidXRlIHZhbHVlIG11c3QgYmUgdW5pcXVlJ1xuICAgICAgICB9LFxuICAgICAgICAnZW1wdHktaGVhZGluZyc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBoZWFkaW5ncyBoYXZlIGRpc2Nlcm5pYmxlIHRleHQnLFxuICAgICAgICAgIGhlbHA6ICdIZWFkaW5ncyBzaG91bGQgbm90IGJlIGVtcHR5J1xuICAgICAgICB9LFxuICAgICAgICAnZW1wdHktdGFibGUtaGVhZGVyJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRhYmxlIGhlYWRlcnMgaGF2ZSBkaXNjZXJuaWJsZSB0ZXh0JyxcbiAgICAgICAgICBoZWxwOiAnVGFibGUgaGVhZGVyIHRleHQgc2hvdWxkIG5vdCBiZSBlbXB0eSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2ZvY3VzLW9yZGVyLXNlbWFudGljcyc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBlbGVtZW50cyBpbiB0aGUgZm9jdXMgb3JkZXIgaGF2ZSBhIHJvbGUgYXBwcm9wcmlhdGUgZm9yIGludGVyYWN0aXZlIGNvbnRlbnQnLFxuICAgICAgICAgIGhlbHA6ICdFbGVtZW50cyBpbiB0aGUgZm9jdXMgb3JkZXIgc2hvdWxkIGhhdmUgYW4gYXBwcm9wcmlhdGUgcm9sZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2Zvcm0tZmllbGQtbXVsdGlwbGUtbGFiZWxzJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGZvcm0gZmllbGQgZG9lcyBub3QgaGF2ZSBtdWx0aXBsZSBsYWJlbCBlbGVtZW50cycsXG4gICAgICAgICAgaGVscDogJ0Zvcm0gZmllbGQgbXVzdCBub3QgaGF2ZSBtdWx0aXBsZSBsYWJlbCBlbGVtZW50cydcbiAgICAgICAgfSxcbiAgICAgICAgJ2ZyYW1lLWZvY3VzYWJsZS1jb250ZW50Jzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIDxmcmFtZT4gYW5kIDxpZnJhbWU+IGVsZW1lbnRzIHdpdGggZm9jdXNhYmxlIGNvbnRlbnQgZG8gbm90IGhhdmUgdGFiaW5kZXg9LTEnLFxuICAgICAgICAgIGhlbHA6ICdGcmFtZXMgd2l0aCBmb2N1c2FibGUgY29udGVudCBtdXN0IG5vdCBoYXZlIHRhYmluZGV4PS0xJ1xuICAgICAgICB9LFxuICAgICAgICAnZnJhbWUtdGVzdGVkJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIDxpZnJhbWU+IGFuZCA8ZnJhbWU+IGVsZW1lbnRzIGNvbnRhaW4gdGhlIGF4ZS1jb3JlIHNjcmlwdCcsXG4gICAgICAgICAgaGVscDogJ0ZyYW1lcyBzaG91bGQgYmUgdGVzdGVkIHdpdGggYXhlLWNvcmUnXG4gICAgICAgIH0sXG4gICAgICAgICdmcmFtZS10aXRsZS11bmlxdWUnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgPGlmcmFtZT4gYW5kIDxmcmFtZT4gZWxlbWVudHMgY29udGFpbiBhIHVuaXF1ZSB0aXRsZSBhdHRyaWJ1dGUnLFxuICAgICAgICAgIGhlbHA6ICdGcmFtZXMgbXVzdCBoYXZlIGEgdW5pcXVlIHRpdGxlIGF0dHJpYnV0ZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2ZyYW1lLXRpdGxlJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIDxpZnJhbWU+IGFuZCA8ZnJhbWU+IGVsZW1lbnRzIGhhdmUgYW4gYWNjZXNzaWJsZSBuYW1lJyxcbiAgICAgICAgICBoZWxwOiAnRnJhbWVzIG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUnXG4gICAgICAgIH0sXG4gICAgICAgICdoZWFkaW5nLW9yZGVyJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoZSBvcmRlciBvZiBoZWFkaW5ncyBpcyBzZW1hbnRpY2FsbHkgY29ycmVjdCcsXG4gICAgICAgICAgaGVscDogJ0hlYWRpbmcgbGV2ZWxzIHNob3VsZCBvbmx5IGluY3JlYXNlIGJ5IG9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2hpZGRlbi1jb250ZW50Jzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnSW5mb3JtcyB1c2VycyBhYm91dCBoaWRkZW4gY29udGVudC4nLFxuICAgICAgICAgIGhlbHA6ICdIaWRkZW4gY29udGVudCBvbiB0aGUgcGFnZSBzaG91bGQgYmUgYW5hbHl6ZWQnXG4gICAgICAgIH0sXG4gICAgICAgICdodG1sLWhhcy1sYW5nJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGV2ZXJ5IEhUTUwgZG9jdW1lbnQgaGFzIGEgbGFuZyBhdHRyaWJ1dGUnLFxuICAgICAgICAgIGhlbHA6ICc8aHRtbD4gZWxlbWVudCBtdXN0IGhhdmUgYSBsYW5nIGF0dHJpYnV0ZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2h0bWwtbGFuZy12YWxpZCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGUgbGFuZyBhdHRyaWJ1dGUgb2YgdGhlIDxodG1sPiBlbGVtZW50IGhhcyBhIHZhbGlkIHZhbHVlJyxcbiAgICAgICAgICBoZWxwOiAnPGh0bWw+IGVsZW1lbnQgbXVzdCBoYXZlIGEgdmFsaWQgdmFsdWUgZm9yIHRoZSBsYW5nIGF0dHJpYnV0ZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2h0bWwteG1sLWxhbmctbWlzbWF0Y2gnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgdGhhdCBIVE1MIGVsZW1lbnRzIHdpdGggYm90aCB2YWxpZCBsYW5nIGFuZCB4bWw6bGFuZyBhdHRyaWJ1dGVzIGFncmVlIG9uIHRoZSBiYXNlIGxhbmd1YWdlIG9mIHRoZSBwYWdlJyxcbiAgICAgICAgICBoZWxwOiAnSFRNTCBlbGVtZW50cyB3aXRoIGxhbmcgYW5kIHhtbDpsYW5nIG11c3QgaGF2ZSB0aGUgc2FtZSBiYXNlIGxhbmd1YWdlJ1xuICAgICAgICB9LFxuICAgICAgICAnaWRlbnRpY2FsLWxpbmtzLXNhbWUtcHVycG9zZSc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGF0IGxpbmtzIHdpdGggdGhlIHNhbWUgYWNjZXNzaWJsZSBuYW1lIHNlcnZlIGEgc2ltaWxhciBwdXJwb3NlJyxcbiAgICAgICAgICBoZWxwOiAnTGlua3Mgd2l0aCB0aGUgc2FtZSBuYW1lIG11c3QgaGF2ZSBhIHNpbWlsYXIgcHVycG9zZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2ltYWdlLWFsdCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSA8aW1nPiBlbGVtZW50cyBoYXZlIGFsdGVybmF0aXZlIHRleHQgb3IgYSByb2xlIG9mIG5vbmUgb3IgcHJlc2VudGF0aW9uJyxcbiAgICAgICAgICBoZWxwOiAnSW1hZ2VzIG11c3QgaGF2ZSBhbHRlcm5hdGl2ZSB0ZXh0J1xuICAgICAgICB9LFxuICAgICAgICAnaW1hZ2UtcmVkdW5kYW50LWFsdCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBpbWFnZSBhbHRlcm5hdGl2ZSBpcyBub3QgcmVwZWF0ZWQgYXMgdGV4dCcsXG4gICAgICAgICAgaGVscDogJ0FsdGVybmF0aXZlIHRleHQgb2YgaW1hZ2VzIHNob3VsZCBub3QgYmUgcmVwZWF0ZWQgYXMgdGV4dCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2lucHV0LWJ1dHRvbi1uYW1lJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGlucHV0IGJ1dHRvbnMgaGF2ZSBkaXNjZXJuaWJsZSB0ZXh0JyxcbiAgICAgICAgICBoZWxwOiAnSW5wdXQgYnV0dG9ucyBtdXN0IGhhdmUgZGlzY2VybmlibGUgdGV4dCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2lucHV0LWltYWdlLWFsdCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSA8aW5wdXQgdHlwZT1cImltYWdlXCI+IGVsZW1lbnRzIGhhdmUgYWx0ZXJuYXRpdmUgdGV4dCcsXG4gICAgICAgICAgaGVscDogJ0ltYWdlIGJ1dHRvbnMgbXVzdCBoYXZlIGFsdGVybmF0aXZlIHRleHQnXG4gICAgICAgIH0sXG4gICAgICAgICdsYWJlbC1jb250ZW50LW5hbWUtbWlzbWF0Y2gnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgdGhhdCBlbGVtZW50cyBsYWJlbGxlZCB0aHJvdWdoIHRoZWlyIGNvbnRlbnQgbXVzdCBoYXZlIHRoZWlyIHZpc2libGUgdGV4dCBhcyBwYXJ0IG9mIHRoZWlyIGFjY2Vzc2libGUgbmFtZScsXG4gICAgICAgICAgaGVscDogJ0VsZW1lbnRzIG11c3QgaGF2ZSB0aGVpciB2aXNpYmxlIHRleHQgYXMgcGFydCBvZiB0aGVpciBhY2Nlc3NpYmxlIG5hbWUnXG4gICAgICAgIH0sXG4gICAgICAgICdsYWJlbC10aXRsZS1vbmx5Jzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoYXQgZXZlcnkgZm9ybSBlbGVtZW50IGhhcyBhIHZpc2libGUgbGFiZWwgYW5kIGlzIG5vdCBzb2xlbHkgbGFiZWxlZCB1c2luZyBoaWRkZW4gbGFiZWxzLCBvciB0aGUgdGl0bGUgb3IgYXJpYS1kZXNjcmliZWRieSBhdHRyaWJ1dGVzJyxcbiAgICAgICAgICBoZWxwOiAnRm9ybSBlbGVtZW50cyBzaG91bGQgaGF2ZSBhIHZpc2libGUgbGFiZWwnXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgZXZlcnkgZm9ybSBlbGVtZW50IGhhcyBhIGxhYmVsJyxcbiAgICAgICAgICBoZWxwOiAnRm9ybSBlbGVtZW50cyBtdXN0IGhhdmUgbGFiZWxzJ1xuICAgICAgICB9LFxuICAgICAgICAnbGFuZG1hcmstYmFubmVyLWlzLXRvcC1sZXZlbCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGUgYmFubmVyIGxhbmRtYXJrIGlzIGF0IHRvcCBsZXZlbCcsXG4gICAgICAgICAgaGVscDogJ0Jhbm5lciBsYW5kbWFyayBzaG91bGQgbm90IGJlIGNvbnRhaW5lZCBpbiBhbm90aGVyIGxhbmRtYXJrJ1xuICAgICAgICB9LFxuICAgICAgICAnbGFuZG1hcmstY29tcGxlbWVudGFyeS1pcy10b3AtbGV2ZWwnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgdGhlIGNvbXBsZW1lbnRhcnkgbGFuZG1hcmsgb3IgYXNpZGUgaXMgYXQgdG9wIGxldmVsJyxcbiAgICAgICAgICBoZWxwOiAnQXNpZGUgc2hvdWxkIG5vdCBiZSBjb250YWluZWQgaW4gYW5vdGhlciBsYW5kbWFyaydcbiAgICAgICAgfSxcbiAgICAgICAgJ2xhbmRtYXJrLWNvbnRlbnRpbmZvLWlzLXRvcC1sZXZlbCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGUgY29udGVudGluZm8gbGFuZG1hcmsgaXMgYXQgdG9wIGxldmVsJyxcbiAgICAgICAgICBoZWxwOiAnQ29udGVudGluZm8gbGFuZG1hcmsgc2hvdWxkIG5vdCBiZSBjb250YWluZWQgaW4gYW5vdGhlciBsYW5kbWFyaydcbiAgICAgICAgfSxcbiAgICAgICAgJ2xhbmRtYXJrLW1haW4taXMtdG9wLWxldmVsJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoZSBtYWluIGxhbmRtYXJrIGlzIGF0IHRvcCBsZXZlbCcsXG4gICAgICAgICAgaGVscDogJ01haW4gbGFuZG1hcmsgc2hvdWxkIG5vdCBiZSBjb250YWluZWQgaW4gYW5vdGhlciBsYW5kbWFyaydcbiAgICAgICAgfSxcbiAgICAgICAgJ2xhbmRtYXJrLW5vLWR1cGxpY2F0ZS1iYW5uZXInOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgdGhlIGRvY3VtZW50IGhhcyBhdCBtb3N0IG9uZSBiYW5uZXIgbGFuZG1hcmsnLFxuICAgICAgICAgIGhlbHA6ICdEb2N1bWVudCBzaG91bGQgbm90IGhhdmUgbW9yZSB0aGFuIG9uZSBiYW5uZXIgbGFuZG1hcmsnXG4gICAgICAgIH0sXG4gICAgICAgICdsYW5kbWFyay1uby1kdXBsaWNhdGUtY29udGVudGluZm8nOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgdGhlIGRvY3VtZW50IGhhcyBhdCBtb3N0IG9uZSBjb250ZW50aW5mbyBsYW5kbWFyaycsXG4gICAgICAgICAgaGVscDogJ0RvY3VtZW50IHNob3VsZCBub3QgaGF2ZSBtb3JlIHRoYW4gb25lIGNvbnRlbnRpbmZvIGxhbmRtYXJrJ1xuICAgICAgICB9LFxuICAgICAgICAnbGFuZG1hcmstbm8tZHVwbGljYXRlLW1haW4nOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgdGhlIGRvY3VtZW50IGhhcyBhdCBtb3N0IG9uZSBtYWluIGxhbmRtYXJrJyxcbiAgICAgICAgICBoZWxwOiAnRG9jdW1lbnQgc2hvdWxkIG5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgbWFpbiBsYW5kbWFyaydcbiAgICAgICAgfSxcbiAgICAgICAgJ2xhbmRtYXJrLW9uZS1tYWluJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoZSBkb2N1bWVudCBoYXMgYSBtYWluIGxhbmRtYXJrJyxcbiAgICAgICAgICBoZWxwOiAnRG9jdW1lbnQgc2hvdWxkIGhhdmUgb25lIG1haW4gbGFuZG1hcmsnXG4gICAgICAgIH0sXG4gICAgICAgICdsYW5kbWFyay11bmlxdWUnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgbGFuZG1hcmtzIGFyZSB1bmlxdWUnLFxuICAgICAgICAgIGhlbHA6ICdMYW5kbWFya3Mgc2hvdWxkIGhhdmUgYSB1bmlxdWUgcm9sZSBvciByb2xlL2xhYmVsL3RpdGxlIChpLmUuIGFjY2Vzc2libGUgbmFtZSkgY29tYmluYXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgICdsaW5rLWluLXRleHQtYmxvY2snOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgbGlua3MgYXJlIGRpc3Rpbmd1aXNoZWQgZnJvbSBzdXJyb3VuZGluZyB0ZXh0IGluIGEgd2F5IHRoYXQgZG9lcyBub3QgcmVseSBvbiBjb2xvcicsXG4gICAgICAgICAgaGVscDogJ0xpbmtzIG11c3QgYmUgZGlzdGluZ3Vpc2hhYmxlIHdpdGhvdXQgcmVseWluZyBvbiBjb2xvcidcbiAgICAgICAgfSxcbiAgICAgICAgJ2xpbmstbmFtZSc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBsaW5rcyBoYXZlIGRpc2Nlcm5pYmxlIHRleHQnLFxuICAgICAgICAgIGhlbHA6ICdMaW5rcyBtdXN0IGhhdmUgZGlzY2VybmlibGUgdGV4dCdcbiAgICAgICAgfSxcbiAgICAgICAgbGlzdDoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoYXQgbGlzdHMgYXJlIHN0cnVjdHVyZWQgY29ycmVjdGx5JyxcbiAgICAgICAgICBoZWxwOiAnPHVsPiBhbmQgPG9sPiBtdXN0IG9ubHkgZGlyZWN0bHkgY29udGFpbiA8bGk+LCA8c2NyaXB0PiBvciA8dGVtcGxhdGU+IGVsZW1lbnRzJ1xuICAgICAgICB9LFxuICAgICAgICBsaXN0aXRlbToge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIDxsaT4gZWxlbWVudHMgYXJlIHVzZWQgc2VtYW50aWNhbGx5JyxcbiAgICAgICAgICBoZWxwOiAnPGxpPiBlbGVtZW50cyBtdXN0IGJlIGNvbnRhaW5lZCBpbiBhIDx1bD4gb3IgPG9sPidcbiAgICAgICAgfSxcbiAgICAgICAgbWFycXVlZToge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIDxtYXJxdWVlPiBlbGVtZW50cyBhcmUgbm90IHVzZWQnLFxuICAgICAgICAgIGhlbHA6ICc8bWFycXVlZT4gZWxlbWVudHMgYXJlIGRlcHJlY2F0ZWQgYW5kIG11c3Qgbm90IGJlIHVzZWQnXG4gICAgICAgIH0sXG4gICAgICAgICdtZXRhLXJlZnJlc2gtbm8tZXhjZXB0aW9ucyc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSA8bWV0YSBodHRwLWVxdWl2PVwicmVmcmVzaFwiPiBpcyBub3QgdXNlZCBmb3IgZGVsYXllZCByZWZyZXNoJyxcbiAgICAgICAgICBoZWxwOiAnRGVsYXllZCByZWZyZXNoIG11c3Qgbm90IGJlIHVzZWQnXG4gICAgICAgIH0sXG4gICAgICAgICdtZXRhLXJlZnJlc2gnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgPG1ldGEgaHR0cC1lcXVpdj1cInJlZnJlc2hcIj4gaXMgbm90IHVzZWQgZm9yIGRlbGF5ZWQgcmVmcmVzaCcsXG4gICAgICAgICAgaGVscDogJ0RlbGF5ZWQgcmVmcmVzaCB1bmRlciAyMCBob3VycyBtdXN0IG5vdCBiZSB1c2VkJ1xuICAgICAgICB9LFxuICAgICAgICAnbWV0YS12aWV3cG9ydC1sYXJnZSc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSA8bWV0YSBuYW1lPVwidmlld3BvcnRcIj4gY2FuIHNjYWxlIGEgc2lnbmlmaWNhbnQgYW1vdW50JyxcbiAgICAgICAgICBoZWxwOiAnVXNlcnMgc2hvdWxkIGJlIGFibGUgdG8gem9vbSBhbmQgc2NhbGUgdGhlIHRleHQgdXAgdG8gNTAwJSdcbiAgICAgICAgfSxcbiAgICAgICAgJ21ldGEtdmlld3BvcnQnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCI+IGRvZXMgbm90IGRpc2FibGUgdGV4dCBzY2FsaW5nIGFuZCB6b29taW5nJyxcbiAgICAgICAgICBoZWxwOiAnWm9vbWluZyBhbmQgc2NhbGluZyBtdXN0IG5vdCBiZSBkaXNhYmxlZCdcbiAgICAgICAgfSxcbiAgICAgICAgJ25lc3RlZC1pbnRlcmFjdGl2ZSc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBpbnRlcmFjdGl2ZSBjb250cm9scyBhcmUgbm90IG5lc3RlZCBhcyB0aGV5IGFyZSBub3QgYWx3YXlzIGFubm91bmNlZCBieSBzY3JlZW4gcmVhZGVycyBvciBjYW4gY2F1c2UgZm9jdXMgcHJvYmxlbXMgZm9yIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMnLFxuICAgICAgICAgIGhlbHA6ICdJbnRlcmFjdGl2ZSBjb250cm9scyBtdXN0IG5vdCBiZSBuZXN0ZWQnXG4gICAgICAgIH0sXG4gICAgICAgICduby1hdXRvcGxheS1hdWRpbyc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSA8dmlkZW8+IG9yIDxhdWRpbz4gZWxlbWVudHMgZG8gbm90IGF1dG9wbGF5IGF1ZGlvIGZvciBtb3JlIHRoYW4gMyBzZWNvbmRzIHdpdGhvdXQgYSBjb250cm9sIG1lY2hhbmlzbSB0byBzdG9wIG9yIG11dGUgdGhlIGF1ZGlvJyxcbiAgICAgICAgICBoZWxwOiAnPHZpZGVvPiBvciA8YXVkaW8+IGVsZW1lbnRzIG11c3Qgbm90IHBsYXkgYXV0b21hdGljYWxseSdcbiAgICAgICAgfSxcbiAgICAgICAgJ29iamVjdC1hbHQnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgPG9iamVjdD4gZWxlbWVudHMgaGF2ZSBhbHRlcm5hdGl2ZSB0ZXh0JyxcbiAgICAgICAgICBoZWxwOiAnPG9iamVjdD4gZWxlbWVudHMgbXVzdCBoYXZlIGFsdGVybmF0aXZlIHRleHQnXG4gICAgICAgIH0sXG4gICAgICAgICdwLWFzLWhlYWRpbmcnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgYm9sZCwgaXRhbGljIHRleHQgYW5kIGZvbnQtc2l6ZSBpcyBub3QgdXNlZCB0byBzdHlsZSA8cD4gZWxlbWVudHMgYXMgYSBoZWFkaW5nJyxcbiAgICAgICAgICBoZWxwOiAnU3R5bGVkIDxwPiBlbGVtZW50cyBtdXN0IG5vdCBiZSB1c2VkIGFzIGhlYWRpbmdzJ1xuICAgICAgICB9LFxuICAgICAgICAncGFnZS1oYXMtaGVhZGluZy1vbmUnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgdGhhdCB0aGUgcGFnZSwgb3IgYXQgbGVhc3Qgb25lIG9mIGl0cyBmcmFtZXMgY29udGFpbnMgYSBsZXZlbC1vbmUgaGVhZGluZycsXG4gICAgICAgICAgaGVscDogJ1BhZ2Ugc2hvdWxkIGNvbnRhaW4gYSBsZXZlbC1vbmUgaGVhZGluZydcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByZXNlbnRhdGlvbi1yb2xlLWNvbmZsaWN0Jzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRWxlbWVudHMgbWFya2VkIGFzIHByZXNlbnRhdGlvbmFsIHNob3VsZCBub3QgaGF2ZSBnbG9iYWwgQVJJQSBvciB0YWJpbmRleCB0byBlbnN1cmUgYWxsIHNjcmVlbiByZWFkZXJzIGlnbm9yZSB0aGVtJyxcbiAgICAgICAgICBoZWxwOiAnRW5zdXJlIGVsZW1lbnRzIG1hcmtlZCBhcyBwcmVzZW50YXRpb25hbCBhcmUgY29uc2lzdGVudGx5IGlnbm9yZWQnXG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lvbjoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIGFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcycsXG4gICAgICAgICAgaGVscDogJ0FsbCBwYWdlIGNvbnRlbnQgc2hvdWxkIGJlIGNvbnRhaW5lZCBieSBsYW5kbWFya3MnXG4gICAgICAgIH0sXG4gICAgICAgICdyb2xlLWltZy1hbHQnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgW3JvbGU9XCJpbWdcIl0gZWxlbWVudHMgaGF2ZSBhbHRlcm5hdGl2ZSB0ZXh0JyxcbiAgICAgICAgICBoZWxwOiAnW3JvbGU9XCJpbWdcIl0gZWxlbWVudHMgbXVzdCBoYXZlIGFuIGFsdGVybmF0aXZlIHRleHQnXG4gICAgICAgIH0sXG4gICAgICAgICdzY29wZS1hdHRyLXZhbGlkJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoZSBzY29wZSBhdHRyaWJ1dGUgaXMgdXNlZCBjb3JyZWN0bHkgb24gdGFibGVzJyxcbiAgICAgICAgICBoZWxwOiAnc2NvcGUgYXR0cmlidXRlIHNob3VsZCBiZSB1c2VkIGNvcnJlY3RseSdcbiAgICAgICAgfSxcbiAgICAgICAgJ3Njcm9sbGFibGUtcmVnaW9uLWZvY3VzYWJsZSc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBlbGVtZW50cyB0aGF0IGhhdmUgc2Nyb2xsYWJsZSBjb250ZW50IGFyZSBhY2Nlc3NpYmxlIGJ5IGtleWJvYXJkJyxcbiAgICAgICAgICBoZWxwOiAnU2Nyb2xsYWJsZSByZWdpb24gbXVzdCBoYXZlIGtleWJvYXJkIGFjY2VzcydcbiAgICAgICAgfSxcbiAgICAgICAgJ3NlbGVjdC1uYW1lJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHNlbGVjdCBlbGVtZW50IGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUnLFxuICAgICAgICAgIGhlbHA6ICdTZWxlY3QgZWxlbWVudCBtdXN0IGhhdmUgYW4gYWNjZXNzaWJsZSBuYW1lJ1xuICAgICAgICB9LFxuICAgICAgICAnc2VydmVyLXNpZGUtaW1hZ2UtbWFwJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoYXQgc2VydmVyLXNpZGUgaW1hZ2UgbWFwcyBhcmUgbm90IHVzZWQnLFxuICAgICAgICAgIGhlbHA6ICdTZXJ2ZXItc2lkZSBpbWFnZSBtYXBzIG11c3Qgbm90IGJlIHVzZWQnXG4gICAgICAgIH0sXG4gICAgICAgICdza2lwLWxpbmsnOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgYWxsIHNraXAgbGlua3MgaGF2ZSBhIGZvY3VzYWJsZSB0YXJnZXQnLFxuICAgICAgICAgIGhlbHA6ICdUaGUgc2tpcC1saW5rIHRhcmdldCBzaG91bGQgZXhpc3QgYW5kIGJlIGZvY3VzYWJsZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ3N1bW1hcnktbmFtZSc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBzdW1tYXJ5IGVsZW1lbnRzIGhhdmUgZGlzY2VybmlibGUgdGV4dCcsXG4gICAgICAgICAgaGVscDogJ1N1bW1hcnkgZWxlbWVudHMgbXVzdCBoYXZlIGRpc2Nlcm5pYmxlIHRleHQnXG4gICAgICAgIH0sXG4gICAgICAgICdzdmctaW1nLWFsdCc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSA8c3ZnPiBlbGVtZW50cyB3aXRoIGFuIGltZywgZ3JhcGhpY3MtZG9jdW1lbnQgb3IgZ3JhcGhpY3Mtc3ltYm9sIHJvbGUgaGF2ZSBhbiBhY2Nlc3NpYmxlIHRleHQnLFxuICAgICAgICAgIGhlbHA6ICc8c3ZnPiBlbGVtZW50cyB3aXRoIGFuIGltZyByb2xlIG11c3QgaGF2ZSBhbiBhbHRlcm5hdGl2ZSB0ZXh0J1xuICAgICAgICB9LFxuICAgICAgICB0YWJpbmRleDoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRhYmluZGV4IGF0dHJpYnV0ZSB2YWx1ZXMgYXJlIG5vdCBncmVhdGVyIHRoYW4gMCcsXG4gICAgICAgICAgaGVscDogJ0VsZW1lbnRzIHNob3VsZCBub3QgaGF2ZSB0YWJpbmRleCBncmVhdGVyIHRoYW4gemVybydcbiAgICAgICAgfSxcbiAgICAgICAgJ3RhYmxlLWR1cGxpY2F0ZS1uYW1lJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoZSA8Y2FwdGlvbj4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIHRoZSBzYW1lIHRleHQgYXMgdGhlIHN1bW1hcnkgYXR0cmlidXRlJyxcbiAgICAgICAgICBoZWxwOiAnVGFibGVzIHNob3VsZCBub3QgaGF2ZSB0aGUgc2FtZSBzdW1tYXJ5IGFuZCBjYXB0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICAndGFibGUtZmFrZS1jYXB0aW9uJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRoYXQgdGFibGVzIHdpdGggYSBjYXB0aW9uIHVzZSB0aGUgPGNhcHRpb24+IGVsZW1lbnQuJyxcbiAgICAgICAgICBoZWxwOiAnRGF0YSBvciBoZWFkZXIgY2VsbHMgbXVzdCBub3QgYmUgdXNlZCB0byBnaXZlIGNhcHRpb24gdG8gYSBkYXRhIHRhYmxlLidcbiAgICAgICAgfSxcbiAgICAgICAgJ3RhcmdldC1zaXplJzoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW5zdXJlIHRvdWNoIHRhcmdldHMgaGF2ZSBzdWZmaWNpZW50IHNpemUgYW5kIHNwYWNlJyxcbiAgICAgICAgICBoZWxwOiAnQWxsIHRvdWNoIHRhcmdldHMgbXVzdCBiZSAyNHB4IGxhcmdlLCBvciBsZWF2ZSBzdWZmaWNpZW50IHNwYWNlJ1xuICAgICAgICB9LFxuICAgICAgICAndGQtaGFzLWhlYWRlcic6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGF0IGVhY2ggbm9uLWVtcHR5IGRhdGEgY2VsbCBpbiBhIDx0YWJsZT4gbGFyZ2VyIHRoYW4gMyBieSAzICBoYXMgb25lIG9yIG1vcmUgdGFibGUgaGVhZGVycycsXG4gICAgICAgICAgaGVscDogJ05vbi1lbXB0eSA8dGQ+IGVsZW1lbnRzIGluIGxhcmdlciA8dGFibGU+IG11c3QgaGF2ZSBhbiBhc3NvY2lhdGVkIHRhYmxlIGhlYWRlcidcbiAgICAgICAgfSxcbiAgICAgICAgJ3RkLWhlYWRlcnMtYXR0cic6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGF0IGVhY2ggY2VsbCBpbiBhIHRhYmxlIHRoYXQgdXNlcyB0aGUgaGVhZGVycyBhdHRyaWJ1dGUgcmVmZXJzIG9ubHkgdG8gb3RoZXIgY2VsbHMgaW4gdGhhdCB0YWJsZScsXG4gICAgICAgICAgaGVscDogJ1RhYmxlIGNlbGxzIHRoYXQgdXNlIHRoZSBoZWFkZXJzIGF0dHJpYnV0ZSBtdXN0IG9ubHkgcmVmZXIgdG8gY2VsbHMgaW4gdGhlIHNhbWUgdGFibGUnXG4gICAgICAgIH0sXG4gICAgICAgICd0aC1oYXMtZGF0YS1jZWxscyc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSB0aGF0IDx0aD4gZWxlbWVudHMgYW5kIGVsZW1lbnRzIHdpdGggcm9sZT1jb2x1bW5oZWFkZXIvcm93aGVhZGVyIGhhdmUgZGF0YSBjZWxscyB0aGV5IGRlc2NyaWJlJyxcbiAgICAgICAgICBoZWxwOiAnVGFibGUgaGVhZGVycyBpbiBhIGRhdGEgdGFibGUgbXVzdCByZWZlciB0byBkYXRhIGNlbGxzJ1xuICAgICAgICB9LFxuICAgICAgICAndmFsaWQtbGFuZyc6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Vuc3VyZSBsYW5nIGF0dHJpYnV0ZXMgaGF2ZSB2YWxpZCB2YWx1ZXMnLFxuICAgICAgICAgIGhlbHA6ICdsYW5nIGF0dHJpYnV0ZSBtdXN0IGhhdmUgYSB2YWxpZCB2YWx1ZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ3ZpZGVvLWNhcHRpb24nOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgPHZpZGVvPiBlbGVtZW50cyBoYXZlIGNhcHRpb25zJyxcbiAgICAgICAgICBoZWxwOiAnPHZpZGVvPiBlbGVtZW50cyBtdXN0IGhhdmUgY2FwdGlvbnMnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjaGVja3M6IHtcbiAgICAgICAgYWJzdHJhY3Ryb2xlOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBYnN0cmFjdCByb2xlcyBhcmUgbm90IHVzZWQnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBzaW5ndWxhcjogJ0Fic3RyYWN0IHJvbGUgY2Fubm90IGJlIGRpcmVjdGx5IHVzZWQ6ICR7ZGF0YS52YWx1ZXN9JyxcbiAgICAgICAgICAgICAgcGx1cmFsOiAnQWJzdHJhY3Qgcm9sZXMgY2Fubm90IGJlIGRpcmVjdGx5IHVzZWQ6ICR7ZGF0YS52YWx1ZXN9J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtYWxsb3dlZC1hdHRyJzoge1xuICAgICAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0FSSUEgYXR0cmlidXRlcyBhcmUgdXNlZCBjb3JyZWN0bHkgZm9yIHRoZSBkZWZpbmVkIHJvbGUnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBzaW5ndWxhcjogJ0FSSUEgYXR0cmlidXRlIGlzIG5vdCBhbGxvd2VkOiAke2RhdGEudmFsdWVzfScsXG4gICAgICAgICAgICAgIHBsdXJhbDogJ0FSSUEgYXR0cmlidXRlcyBhcmUgbm90IGFsbG93ZWQ6ICR7ZGF0YS52YWx1ZXN9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHByb2JsZW0gaWYgdGhlIEFSSUEgYXR0cmlidXRlIGlzIGlnbm9yZWQgb24gdGhpcyBlbGVtZW50OiAke2RhdGEudmFsdWVzfSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLWFsbG93ZWQtcm9sZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBUklBIHJvbGUgaXMgYWxsb3dlZCBmb3IgZ2l2ZW4gZWxlbWVudCcsXG4gICAgICAgICAgICBmYWlsOiB7XG4gICAgICAgICAgICAgIHNpbmd1bGFyOiAnQVJJQSByb2xlICR7ZGF0YS52YWx1ZXN9IGlzIG5vdCBhbGxvd2VkIGZvciBnaXZlbiBlbGVtZW50JyxcbiAgICAgICAgICAgICAgcGx1cmFsOiAnQVJJQSByb2xlcyAke2RhdGEudmFsdWVzfSBhcmUgbm90IGFsbG93ZWQgZm9yIGdpdmVuIGVsZW1lbnQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jb21wbGV0ZToge1xuICAgICAgICAgICAgICBzaW5ndWxhcjogJ0FSSUEgcm9sZSAke2RhdGEudmFsdWVzfSBtdXN0IGJlIHJlbW92ZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBtYWRlIHZpc2libGUsIGFzIGl0IGlzIG5vdCBhbGxvd2VkIGZvciB0aGUgZWxlbWVudCcsXG4gICAgICAgICAgICAgIHBsdXJhbDogJ0FSSUEgcm9sZXMgJHtkYXRhLnZhbHVlc30gbXVzdCBiZSByZW1vdmVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgbWFkZSB2aXNpYmxlLCBhcyB0aGV5IGFyZSBub3QgYWxsb3dlZCBmb3IgdGhlIGVsZW1lbnQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnYXJpYS1idXN5Jzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudCBoYXMgYW4gYXJpYS1idXN5IGF0dHJpYnV0ZScsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudCB1c2VzIGFyaWEtYnVzeT1cInRydWVcIiB3aGlsZSBzaG93aW5nIGEgbG9hZGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtY29uZGl0aW9uYWwtYXR0cic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0FSSUEgYXR0cmlidXRlIGlzIGFsbG93ZWQnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBjaGVja2JveDogJ1JlbW92ZSBhcmlhLWNoZWNrZWQsIG9yIHNldCBpdCB0byBcIiR7ZGF0YS5jaGVja1N0YXRlfVwiIHRvIG1hdGNoIHRoZSByZWFsIGNoZWNrYm94IHN0YXRlJyxcbiAgICAgICAgICAgICAgcm93U2luZ3VsYXI6ICdUaGlzIGF0dHJpYnV0ZSBpcyBzdXBwb3J0ZWQgd2l0aCB0cmVlZ3JpZCByb3dzLCBidXQgbm90ICR7ZGF0YS5vd25lclJvbGV9OiAke2RhdGEuaW52YWxpZEF0dHJzfScsXG4gICAgICAgICAgICAgIHJvd1BsdXJhbDogJ1RoZXNlIGF0dHJpYnV0ZXMgYXJlIHN1cHBvcnRlZCB3aXRoIHRyZWVncmlkIHJvd3MsIGJ1dCBub3QgJHtkYXRhLm93bmVyUm9sZX06ICR7ZGF0YS5pbnZhbGlkQXR0cnN9J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtZXJyb3JtZXNzYWdlJzoge1xuICAgICAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ2FyaWEtZXJyb3JtZXNzYWdlIGV4aXN0cyBhbmQgcmVmZXJlbmNlcyBlbGVtZW50cyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIHRoYXQgdXNlIGEgc3VwcG9ydGVkIGFyaWEtZXJyb3JtZXNzYWdlIHRlY2huaXF1ZScsXG4gICAgICAgICAgICBmYWlsOiB7XG4gICAgICAgICAgICAgIHNpbmd1bGFyOiAnYXJpYS1lcnJvcm1lc3NhZ2UgdmFsdWUgYCR7ZGF0YS52YWx1ZXN9YCBtdXN0IHVzZSBhIHRlY2huaXF1ZSB0byBhbm5vdW5jZSB0aGUgbWVzc2FnZSAoZS5nLiwgYXJpYS1saXZlLCBhcmlhLWRlc2NyaWJlZGJ5LCByb2xlPWFsZXJ0LCBldGMuKScsXG4gICAgICAgICAgICAgIHBsdXJhbDogJ2FyaWEtZXJyb3JtZXNzYWdlIHZhbHVlcyBgJHtkYXRhLnZhbHVlc31gIG11c3QgdXNlIGEgdGVjaG5pcXVlIHRvIGFubm91bmNlIHRoZSBtZXNzYWdlIChlLmcuLCBhcmlhLWxpdmUsIGFyaWEtZGVzY3JpYmVkYnksIHJvbGU9YWxlcnQsIGV0Yy4pJyxcbiAgICAgICAgICAgICAgaGlkZGVuOiAnYXJpYS1lcnJvcm1lc3NhZ2UgdmFsdWUgYCR7ZGF0YS52YWx1ZXN9YCBjYW5ub3QgcmVmZXJlbmNlIGEgaGlkZGVuIGVsZW1lbnQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jb21wbGV0ZToge1xuICAgICAgICAgICAgICBzaW5ndWxhcjogJ0Vuc3VyZSBhcmlhLWVycm9ybWVzc2FnZSB2YWx1ZSBgJHtkYXRhLnZhbHVlc31gIHJlZmVyZW5jZXMgYW4gZXhpc3RpbmcgZWxlbWVudCcsXG4gICAgICAgICAgICAgIHBsdXJhbDogJ0Vuc3VyZSBhcmlhLWVycm9ybWVzc2FnZSB2YWx1ZXMgYCR7ZGF0YS52YWx1ZXN9YCByZWZlcmVuY2UgZXhpc3RpbmcgZWxlbWVudHMnLFxuICAgICAgICAgICAgICBpZHJlZnM6ICdVbmFibGUgdG8gZGV0ZXJtaW5lIGlmIGFyaWEtZXJyb3JtZXNzYWdlIGVsZW1lbnQgZXhpc3RzIG9uIHRoZSBwYWdlOiAke2RhdGEudmFsdWVzfSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLWhpZGRlbi1ib2R5Jzoge1xuICAgICAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ05vIGFyaWEtaGlkZGVuIGF0dHJpYnV0ZSBpcyBwcmVzZW50IG9uIGRvY3VtZW50IGJvZHknLFxuICAgICAgICAgICAgZmFpbDogJ2FyaWEtaGlkZGVuPXRydWUgc2hvdWxkIG5vdCBiZSBwcmVzZW50IG9uIHRoZSBkb2N1bWVudCBib2R5J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtbGV2ZWwnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdhcmlhLWxldmVsIHZhbHVlcyBhcmUgdmFsaWQnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ2FyaWEtbGV2ZWwgdmFsdWVzIGdyZWF0ZXIgdGhhbiA2IGFyZSBub3Qgc3VwcG9ydGVkIGluIGFsbCBzY3JlZW5yZWFkZXIgYW5kIGJyb3dzZXIgY29tYmluYXRpb25zJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtcHJvaGliaXRlZC1hdHRyJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnQVJJQSBhdHRyaWJ1dGUgaXMgYWxsb3dlZCcsXG4gICAgICAgICAgICBmYWlsOiB7XG4gICAgICAgICAgICAgIGhhc1JvbGVQbHVyYWw6ICcke2RhdGEucHJvaGliaXRlZH0gYXR0cmlidXRlcyBjYW5ub3QgYmUgdXNlZCB3aXRoIHJvbGUgXCIke2RhdGEucm9sZX1cIi4nLFxuICAgICAgICAgICAgICBoYXNSb2xlU2luZ3VsYXI6ICcke2RhdGEucHJvaGliaXRlZH0gYXR0cmlidXRlIGNhbm5vdCBiZSB1c2VkIHdpdGggcm9sZSBcIiR7ZGF0YS5yb2xlfVwiLicsXG4gICAgICAgICAgICAgIG5vUm9sZVBsdXJhbDogJyR7ZGF0YS5wcm9oaWJpdGVkfSBhdHRyaWJ1dGVzIGNhbm5vdCBiZSB1c2VkIG9uIGEgJHtkYXRhLm5vZGVOYW1lfSB3aXRoIG5vIHZhbGlkIHJvbGUgYXR0cmlidXRlLicsXG4gICAgICAgICAgICAgIG5vUm9sZVNpbmd1bGFyOiAnJHtkYXRhLnByb2hpYml0ZWR9IGF0dHJpYnV0ZSBjYW5ub3QgYmUgdXNlZCBvbiBhICR7ZGF0YS5ub2RlTmFtZX0gd2l0aCBubyB2YWxpZCByb2xlIGF0dHJpYnV0ZS4nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jb21wbGV0ZToge1xuICAgICAgICAgICAgICBoYXNSb2xlU2luZ3VsYXI6ICcke2RhdGEucHJvaGliaXRlZH0gYXR0cmlidXRlIGlzIG5vdCB3ZWxsIHN1cHBvcnRlZCB3aXRoIHJvbGUgXCIke2RhdGEucm9sZX1cIi4nLFxuICAgICAgICAgICAgICBoYXNSb2xlUGx1cmFsOiAnJHtkYXRhLnByb2hpYml0ZWR9IGF0dHJpYnV0ZXMgYXJlIG5vdCB3ZWxsIHN1cHBvcnRlZCB3aXRoIHJvbGUgXCIke2RhdGEucm9sZX1cIi4nLFxuICAgICAgICAgICAgICBub1JvbGVTaW5ndWxhcjogJyR7ZGF0YS5wcm9oaWJpdGVkfSBhdHRyaWJ1dGUgaXMgbm90IHdlbGwgc3VwcG9ydGVkIG9uIGEgJHtkYXRhLm5vZGVOYW1lfSB3aXRoIG5vIHZhbGlkIHJvbGUgYXR0cmlidXRlLicsXG4gICAgICAgICAgICAgIG5vUm9sZVBsdXJhbDogJyR7ZGF0YS5wcm9oaWJpdGVkfSBhdHRyaWJ1dGVzIGFyZSBub3Qgd2VsbCBzdXBwb3J0ZWQgb24gYSAke2RhdGEubm9kZU5hbWV9IHdpdGggbm8gdmFsaWQgcm9sZSBhdHRyaWJ1dGUuJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtcmVxdWlyZWQtYXR0cic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBbGwgcmVxdWlyZWQgQVJJQSBhdHRyaWJ1dGVzIGFyZSBwcmVzZW50JyxcbiAgICAgICAgICAgIGZhaWw6IHtcbiAgICAgICAgICAgICAgc2luZ3VsYXI6ICdSZXF1aXJlZCBBUklBIGF0dHJpYnV0ZSBub3QgcHJlc2VudDogJHtkYXRhLnZhbHVlc30nLFxuICAgICAgICAgICAgICBwbHVyYWw6ICdSZXF1aXJlZCBBUklBIGF0dHJpYnV0ZXMgbm90IHByZXNlbnQ6ICR7ZGF0YS52YWx1ZXN9J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtcmVxdWlyZWQtY2hpbGRyZW4nOiB7XG4gICAgICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6ICdSZXF1aXJlZCBBUklBIGNoaWxkcmVuIGFyZSBwcmVzZW50JyxcbiAgICAgICAgICAgICAgJ2FyaWEtYnVzeSc6ICdFbGVtZW50IGhhcyBhbiBhcmlhLWJ1c3kgYXR0cmlidXRlLCBzbyBpdCBpcyBhbGxvd2VkIHRvIG9taXQgcmVxdWlyZWQgY2hpbGRyZW4nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBzaW5ndWxhcjogJ1JlcXVpcmVkIEFSSUEgY2hpbGQgcm9sZSBub3QgcHJlc2VudDogJHtkYXRhLnZhbHVlc30nLFxuICAgICAgICAgICAgICBwbHVyYWw6ICdSZXF1aXJlZCBBUklBIGNoaWxkcmVuIHJvbGUgbm90IHByZXNlbnQ6ICR7ZGF0YS52YWx1ZXN9JyxcbiAgICAgICAgICAgICAgdW5hbGxvd2VkOiAnRWxlbWVudCBoYXMgY2hpbGRyZW4gd2hpY2ggYXJlIG5vdCBhbGxvd2VkOiAke2RhdGEudmFsdWVzfSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiB7XG4gICAgICAgICAgICAgIHNpbmd1bGFyOiAnRXhwZWN0aW5nIEFSSUEgY2hpbGQgcm9sZSB0byBiZSBhZGRlZDogJHtkYXRhLnZhbHVlc30nLFxuICAgICAgICAgICAgICBwbHVyYWw6ICdFeHBlY3RpbmcgQVJJQSBjaGlsZHJlbiByb2xlIHRvIGJlIGFkZGVkOiAke2RhdGEudmFsdWVzfSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLXJlcXVpcmVkLXBhcmVudCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdSZXF1aXJlZCBBUklBIHBhcmVudCByb2xlIHByZXNlbnQnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBzaW5ndWxhcjogJ1JlcXVpcmVkIEFSSUEgcGFyZW50IHJvbGUgbm90IHByZXNlbnQ6ICR7ZGF0YS52YWx1ZXN9JyxcbiAgICAgICAgICAgICAgcGx1cmFsOiAnUmVxdWlyZWQgQVJJQSBwYXJlbnRzIHJvbGUgbm90IHByZXNlbnQ6ICR7ZGF0YS52YWx1ZXN9J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnYXJpYS1yb2xlZGVzY3JpcHRpb24gdXNlZCBvbiBhIHN1cHBvcnRlZCBzZW1hbnRpYyByb2xlJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdDaGVjayB0aGF0IHRoZSBhcmlhLXJvbGVkZXNjcmlwdGlvbiBpcyBhbm5vdW5jZWQgYnkgc3VwcG9ydGVkIHNjcmVlbiByZWFkZXJzJyxcbiAgICAgICAgICAgIGZhaWw6ICdHaXZlIHRoZSBlbGVtZW50IGEgcm9sZSB0aGF0IHN1cHBvcnRzIGFyaWEtcm9sZWRlc2NyaXB0aW9uJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtdW5zdXBwb3J0ZWQtYXR0cic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBUklBIGF0dHJpYnV0ZSBpcyBzdXBwb3J0ZWQnLFxuICAgICAgICAgICAgZmFpbDogJ0FSSUEgYXR0cmlidXRlIGlzIG5vdCB3aWRlbHkgc3VwcG9ydGVkIGluIHNjcmVlbiByZWFkZXJzIGFuZCBhc3Npc3RpdmUgdGVjaG5vbG9naWVzOiAke2RhdGEudmFsdWVzfSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdhcmlhLXZhbGlkLWF0dHItdmFsdWUnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnQVJJQSBhdHRyaWJ1dGUgdmFsdWVzIGFyZSB2YWxpZCcsXG4gICAgICAgICAgICBmYWlsOiB7XG4gICAgICAgICAgICAgIHNpbmd1bGFyOiAnSW52YWxpZCBBUklBIGF0dHJpYnV0ZSB2YWx1ZTogJHtkYXRhLnZhbHVlc30nLFxuICAgICAgICAgICAgICBwbHVyYWw6ICdJbnZhbGlkIEFSSUEgYXR0cmlidXRlIHZhbHVlczogJHtkYXRhLnZhbHVlc30nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jb21wbGV0ZToge1xuICAgICAgICAgICAgICBub0lkOiAnQVJJQSBhdHRyaWJ1dGUgZWxlbWVudCBJRCBkb2VzIG5vdCBleGlzdCBvbiB0aGUgcGFnZTogJHtkYXRhLm5lZWRzUmV2aWV3fScsXG4gICAgICAgICAgICAgIG5vSWRTaGFkb3c6ICdBUklBIGF0dHJpYnV0ZSBlbGVtZW50IElEIGRvZXMgbm90IGV4aXN0IG9uIHRoZSBwYWdlIG9yIGlzIGEgZGVzY2VuZGFudCBvZiBhIGRpZmZlcmVudCBzaGFkb3cgRE9NIHRyZWU6ICR7ZGF0YS5uZWVkc1Jldmlld30nLFxuICAgICAgICAgICAgICBhcmlhQ3VycmVudDogJ0FSSUEgYXR0cmlidXRlIHZhbHVlIGlzIGludmFsaWQgYW5kIHdpbGwgYmUgdHJlYXRlZCBhcyBcImFyaWEtY3VycmVudD10cnVlXCI6ICR7ZGF0YS5uZWVkc1Jldmlld30nLFxuICAgICAgICAgICAgICBpZHJlZnM6ICdVbmFibGUgdG8gZGV0ZXJtaW5lIGlmIEFSSUEgYXR0cmlidXRlIGVsZW1lbnQgSUQgZXhpc3RzIG9uIHRoZSBwYWdlOiAke2RhdGEubmVlZHNSZXZpZXd9JyxcbiAgICAgICAgICAgICAgZW1wdHk6ICdBUklBIGF0dHJpYnV0ZSB2YWx1ZSBpcyBpZ25vcmVkIHdoaWxlIGVtcHR5OiAke2RhdGEubmVlZHNSZXZpZXd9JyxcbiAgICAgICAgICAgICAgY29udHJvbHNXaXRoaW5Qb3B1cDogJ1VuYWJsZSB0byBkZXRlcm1pbmUgaWYgYXJpYS1jb250cm9scyByZWZlcmVuY2VkIElEIGV4aXN0cyBvbiB0aGUgcGFnZSB3aGlsZSB1c2luZyBhcmlhLWhhc3BvcHVwOiAke2RhdGEubmVlZHNSZXZpZXd9J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtdmFsaWQtYXR0cic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBUklBIGF0dHJpYnV0ZSBuYW1lIGlzIHZhbGlkJyxcbiAgICAgICAgICAgIGZhaWw6IHtcbiAgICAgICAgICAgICAgc2luZ3VsYXI6ICdJbnZhbGlkIEFSSUEgYXR0cmlidXRlIG5hbWU6ICR7ZGF0YS52YWx1ZXN9JyxcbiAgICAgICAgICAgICAgcGx1cmFsOiAnSW52YWxpZCBBUklBIGF0dHJpYnV0ZSBuYW1lczogJHtkYXRhLnZhbHVlc30nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnYnJhaWxsZS1sYWJlbC1lcXVpdmFsZW50Jzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnYXJpYS1icmFpbGxlbGFiZWwgaXMgdXNlZCBvbiBhbiBlbGVtZW50IHdpdGggYWNjZXNzaWJsZSB0ZXh0JyxcbiAgICAgICAgICAgIGZhaWw6ICdhcmlhLWJyYWlsbGVsYWJlbCBpcyB1c2VkIG9uIGFuIGVsZW1lbnQgd2l0aCBubyBhY2Nlc3NpYmxlIHRleHQnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ1VuYWJsZSB0byBjb21wdXRlIGFjY2Vzc2libGUgdGV4dCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdicmFpbGxlLXJvbGVkZXNjcmlwdGlvbi1lcXVpdmFsZW50Jzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnYXJpYS1icmFpbGxlcm9sZWRlc2NyaXB0aW9uIGlzIHVzZWQgb24gYW4gZWxlbWVudCB3aXRoIGFyaWEtcm9sZWRlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIGZhaWw6IHtcbiAgICAgICAgICAgICAgbm9Sb2xlRGVzY3JpcHRpb246ICdhcmlhLWJyYWlsbGVyb2xlZGVzY3JpcHRpb24gaXMgdXNlZCBvbiBhbiBlbGVtZW50IHdpdGggbm8gYXJpYS1yb2xlZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgICBlbXB0eVJvbGVEZXNjcmlwdGlvbjogJ2FyaWEtYnJhaWxsZXJvbGVkZXNjcmlwdGlvbiBpcyB1c2VkIG9uIGFuIGVsZW1lbnQgd2l0aCBhbiBlbXB0eSBhcmlhLXJvbGVkZXNjcmlwdGlvbidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlcHJlY2F0ZWRyb2xlOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnQVJJQSByb2xlIGlzIG5vdCBkZXByZWNhdGVkJyxcbiAgICAgICAgICAgIGZhaWw6ICdUaGUgcm9sZSB1c2VkIGlzIGRlcHJlY2F0ZWQ6ICR7ZGF0YX0nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmYWxsYmFja3JvbGU6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ09ubHkgb25lIHJvbGUgdmFsdWUgdXNlZCcsXG4gICAgICAgICAgICBmYWlsOiAnVXNlIG9ubHkgb25lIHJvbGUgdmFsdWUsIHNpbmNlIGZhbGxiYWNrIHJvbGVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG9sZGVyIGJyb3dzZXJzJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdVc2Ugb25seSByb2xlIFxcJ3ByZXNlbnRhdGlvblxcJyBvciBcXCdub25lXFwnIHNpbmNlIHRoZXkgYXJlIHN5bm9ueW1vdXMuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2hhcy1nbG9iYWwtYXJpYS1hdHRyaWJ1dGUnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiB7XG4gICAgICAgICAgICAgIHNpbmd1bGFyOiAnRWxlbWVudCBoYXMgZ2xvYmFsIEFSSUEgYXR0cmlidXRlOiAke2RhdGEudmFsdWVzfScsXG4gICAgICAgICAgICAgIHBsdXJhbDogJ0VsZW1lbnQgaGFzIGdsb2JhbCBBUklBIGF0dHJpYnV0ZXM6ICR7ZGF0YS52YWx1ZXN9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhaWw6ICdFbGVtZW50IGRvZXMgbm90IGhhdmUgZ2xvYmFsIEFSSUEgYXR0cmlidXRlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2hhcy13aWRnZXQtcm9sZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGhhcyBhIHdpZGdldCByb2xlLicsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudCBkb2VzIG5vdCBoYXZlIGEgd2lkZ2V0IHJvbGUuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZHJvbGU6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBUklBIHJvbGUgaXMgdmFsaWQnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBzaW5ndWxhcjogJ1JvbGUgbXVzdCBiZSBvbmUgb2YgdGhlIHZhbGlkIEFSSUEgcm9sZXM6ICR7ZGF0YS52YWx1ZXN9JyxcbiAgICAgICAgICAgICAgcGx1cmFsOiAnUm9sZXMgbXVzdCBiZSBvbmUgb2YgdGhlIHZhbGlkIEFSSUEgcm9sZXM6ICR7ZGF0YS52YWx1ZXN9J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2lzLWVsZW1lbnQtZm9jdXNhYmxlJzoge1xuICAgICAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnQgaXMgZm9jdXNhYmxlLicsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudCBpcyBub3QgZm9jdXNhYmxlLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICduby1pbXBsaWNpdC1leHBsaWNpdC1sYWJlbCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ1RoZXJlIGlzIG5vIG1pc21hdGNoIGJldHdlZW4gYSA8bGFiZWw+IGFuZCBhY2Nlc3NpYmxlIG5hbWUnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ0NoZWNrIHRoYXQgdGhlIDxsYWJlbD4gZG9lcyBub3QgbmVlZCBiZSBwYXJ0IG9mIHRoZSBBUklBICR7ZGF0YX0gZmllbGRcXCdzIG5hbWUnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1bnN1cHBvcnRlZHJvbGU6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBUklBIHJvbGUgaXMgc3VwcG9ydGVkJyxcbiAgICAgICAgICAgIGZhaWw6ICdUaGUgcm9sZSB1c2VkIGlzIG5vdCB3aWRlbHkgc3VwcG9ydGVkIGluIHNjcmVlbiByZWFkZXJzIGFuZCBhc3Npc3RpdmUgdGVjaG5vbG9naWVzOiAke2RhdGF9J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ3ZhbGlkLXNjcm9sbGFibGUtc2VtYW50aWNzJzoge1xuICAgICAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnQgaGFzIHZhbGlkIHNlbWFudGljcyBmb3IgYW4gZWxlbWVudCBpbiB0aGUgZm9jdXMgb3JkZXIuJyxcbiAgICAgICAgICAgIGZhaWw6ICdFbGVtZW50IGhhcyBpbnZhbGlkIHNlbWFudGljcyBmb3IgYW4gZWxlbWVudCBpbiB0aGUgZm9jdXMgb3JkZXIuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2NvbG9yLWNvbnRyYXN0LWVuaGFuY2VkJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiAke2RhdGEuY29udHJhc3RSYXRpb30nLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBkZWZhdWx0OiAnRWxlbWVudCBoYXMgaW5zdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mICR7ZGF0YS5jb250cmFzdFJhdGlvfSAoZm9yZWdyb3VuZCBjb2xvcjogJHtkYXRhLmZnQ29sb3J9LCBiYWNrZ3JvdW5kIGNvbG9yOiAke2RhdGEuYmdDb2xvcn0sIGZvbnQgc2l6ZTogJHtkYXRhLmZvbnRTaXplfSwgZm9udCB3ZWlnaHQ6ICR7ZGF0YS5mb250V2VpZ2h0fSkuIEV4cGVjdGVkIGNvbnRyYXN0IHJhdGlvIG9mICR7ZGF0YS5leHBlY3RlZENvbnRyYXN0UmF0aW99JyxcbiAgICAgICAgICAgICAgZmdPblNoYWRvd0NvbG9yOiAnRWxlbWVudCBoYXMgaW5zdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mICR7ZGF0YS5jb250cmFzdFJhdGlvfSBiZXR3ZWVuIHRoZSBmb3JlZ3JvdW5kIGFuZCBzaGFkb3cgY29sb3IgKGZvcmVncm91bmQgY29sb3I6ICR7ZGF0YS5mZ0NvbG9yfSwgdGV4dC1zaGFkb3cgY29sb3I6ICR7ZGF0YS5zaGFkb3dDb2xvcn0sIGZvbnQgc2l6ZTogJHtkYXRhLmZvbnRTaXplfSwgZm9udCB3ZWlnaHQ6ICR7ZGF0YS5mb250V2VpZ2h0fSkuIEV4cGVjdGVkIGNvbnRyYXN0IHJhdGlvIG9mICR7ZGF0YS5leHBlY3RlZENvbnRyYXN0UmF0aW99JyxcbiAgICAgICAgICAgICAgc2hhZG93T25CZ0NvbG9yOiAnRWxlbWVudCBoYXMgaW5zdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mICR7ZGF0YS5jb250cmFzdFJhdGlvfSBiZXR3ZWVuIHRoZSBzaGFkb3cgY29sb3IgYW5kIGJhY2tncm91bmQgY29sb3IgKHRleHQtc2hhZG93IGNvbG9yOiAke2RhdGEuc2hhZG93Q29sb3J9LCBiYWNrZ3JvdW5kIGNvbG9yOiAke2RhdGEuYmdDb2xvcn0sIGZvbnQgc2l6ZTogJHtkYXRhLmZvbnRTaXplfSwgZm9udCB3ZWlnaHQ6ICR7ZGF0YS5mb250V2VpZ2h0fSkuIEV4cGVjdGVkIGNvbnRyYXN0IHJhdGlvIG9mICR7ZGF0YS5leHBlY3RlZENvbnRyYXN0UmF0aW99J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY29tcGxldGU6IHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogJ1VuYWJsZSB0byBkZXRlcm1pbmUgY29udHJhc3QgcmF0aW8nLFxuICAgICAgICAgICAgICBiZ0ltYWdlOiAnRWxlbWVudFxcJ3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGltYWdlJyxcbiAgICAgICAgICAgICAgYmdHcmFkaWVudDogJ0VsZW1lbnRcXCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBncmFkaWVudCcsXG4gICAgICAgICAgICAgIGltZ05vZGU6ICdFbGVtZW50XFwncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgZWxlbWVudCBjb250YWlucyBhbiBpbWFnZSBub2RlJyxcbiAgICAgICAgICAgICAgYmdPdmVybGFwOiAnRWxlbWVudFxcJ3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50JyxcbiAgICAgICAgICAgICAgZmdBbHBoYTogJ0VsZW1lbnRcXCdzIGZvcmVncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBvZiBhbHBoYSB0cmFuc3BhcmVuY3knLFxuICAgICAgICAgICAgICBlbG1QYXJ0aWFsbHlPYnNjdXJlZDogJ0VsZW1lbnRcXCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdFxcJ3MgcGFydGlhbGx5IG9ic2N1cmVkIGJ5IGFub3RoZXIgZWxlbWVudCcsXG4gICAgICAgICAgICAgIGVsbVBhcnRpYWxseU9ic2N1cmluZzogJ0VsZW1lbnRcXCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBwYXJ0aWFsbHkgb3ZlcmxhcHMgb3RoZXIgZWxlbWVudHMnLFxuICAgICAgICAgICAgICBvdXRzaWRlVmlld3BvcnQ6ICdFbGVtZW50XFwncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgaXRcXCdzIG91dHNpZGUgdGhlIHZpZXdwb3J0JyxcbiAgICAgICAgICAgICAgZXF1YWxSYXRpbzogJ0VsZW1lbnQgaGFzIGEgMToxIGNvbnRyYXN0IHJhdGlvIHdpdGggdGhlIGJhY2tncm91bmQnLFxuICAgICAgICAgICAgICBzaG9ydFRleHRDb250ZW50OiAnRWxlbWVudCBjb250ZW50IGlzIHRvbyBzaG9ydCB0byBkZXRlcm1pbmUgaWYgaXQgaXMgYWN0dWFsIHRleHQgY29udGVudCcsXG4gICAgICAgICAgICAgIG5vbkJtcDogJ0VsZW1lbnQgY29udGVudCBjb250YWlucyBvbmx5IG5vbi10ZXh0IGNoYXJhY3RlcnMnLFxuICAgICAgICAgICAgICBwc2V1ZG9Db250ZW50OiAnRWxlbWVudFxcJ3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBwc2V1ZG8gZWxlbWVudCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdjb2xvci1jb250cmFzdCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczoge1xuICAgICAgICAgICAgICBkZWZhdWx0OiAnRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiAke2RhdGEuY29udHJhc3RSYXRpb30nLFxuICAgICAgICAgICAgICBoaWRkZW46ICdFbGVtZW50IGlzIGhpZGRlbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWlsOiB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6ICdFbGVtZW50IGhhcyBpbnN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgJHtkYXRhLmNvbnRyYXN0UmF0aW99IChmb3JlZ3JvdW5kIGNvbG9yOiAke2RhdGEuZmdDb2xvcn0sIGJhY2tncm91bmQgY29sb3I6ICR7ZGF0YS5iZ0NvbG9yfSwgZm9udCBzaXplOiAke2RhdGEuZm9udFNpemV9LCBmb250IHdlaWdodDogJHtkYXRhLmZvbnRXZWlnaHR9KS4gRXhwZWN0ZWQgY29udHJhc3QgcmF0aW8gb2YgJHtkYXRhLmV4cGVjdGVkQ29udHJhc3RSYXRpb30nLFxuICAgICAgICAgICAgICBmZ09uU2hhZG93Q29sb3I6ICdFbGVtZW50IGhhcyBpbnN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgJHtkYXRhLmNvbnRyYXN0UmF0aW99IGJldHdlZW4gdGhlIGZvcmVncm91bmQgYW5kIHNoYWRvdyBjb2xvciAoZm9yZWdyb3VuZCBjb2xvcjogJHtkYXRhLmZnQ29sb3J9LCB0ZXh0LXNoYWRvdyBjb2xvcjogJHtkYXRhLnNoYWRvd0NvbG9yfSwgZm9udCBzaXplOiAke2RhdGEuZm9udFNpemV9LCBmb250IHdlaWdodDogJHtkYXRhLmZvbnRXZWlnaHR9KS4gRXhwZWN0ZWQgY29udHJhc3QgcmF0aW8gb2YgJHtkYXRhLmV4cGVjdGVkQ29udHJhc3RSYXRpb30nLFxuICAgICAgICAgICAgICBzaGFkb3dPbkJnQ29sb3I6ICdFbGVtZW50IGhhcyBpbnN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgJHtkYXRhLmNvbnRyYXN0UmF0aW99IGJldHdlZW4gdGhlIHNoYWRvdyBjb2xvciBhbmQgYmFja2dyb3VuZCBjb2xvciAodGV4dC1zaGFkb3cgY29sb3I6ICR7ZGF0YS5zaGFkb3dDb2xvcn0sIGJhY2tncm91bmQgY29sb3I6ICR7ZGF0YS5iZ0NvbG9yfSwgZm9udCBzaXplOiAke2RhdGEuZm9udFNpemV9LCBmb250IHdlaWdodDogJHtkYXRhLmZvbnRXZWlnaHR9KS4gRXhwZWN0ZWQgY29udHJhc3QgcmF0aW8gb2YgJHtkYXRhLmV4cGVjdGVkQ29udHJhc3RSYXRpb30nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jb21wbGV0ZToge1xuICAgICAgICAgICAgICBkZWZhdWx0OiAnVW5hYmxlIHRvIGRldGVybWluZSBjb250cmFzdCByYXRpbycsXG4gICAgICAgICAgICAgIGJnSW1hZ2U6ICdFbGVtZW50XFwncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgaW1hZ2UnLFxuICAgICAgICAgICAgICBiZ0dyYWRpZW50OiAnRWxlbWVudFxcJ3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50JyxcbiAgICAgICAgICAgICAgaW1nTm9kZTogJ0VsZW1lbnRcXCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBlbGVtZW50IGNvbnRhaW5zIGFuIGltYWdlIG5vZGUnLFxuICAgICAgICAgICAgICBiZ092ZXJsYXA6ICdFbGVtZW50XFwncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgaXQgaXMgb3ZlcmxhcHBlZCBieSBhbm90aGVyIGVsZW1lbnQnLFxuICAgICAgICAgICAgICBjb21wbGV4VGV4dFNoYWRvd3M6ICdFbGVtZW50XFwncyBjb250cmFzdCBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IHVzZXMgY29tcGxleCB0ZXh0IHNoYWRvd3MnLFxuICAgICAgICAgICAgICBmZ0FscGhhOiAnRWxlbWVudFxcJ3MgZm9yZWdyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIG9mIGFscGhhIHRyYW5zcGFyZW5jeScsXG4gICAgICAgICAgICAgIGVsbVBhcnRpYWxseU9ic2N1cmVkOiAnRWxlbWVudFxcJ3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0XFwncyBwYXJ0aWFsbHkgb2JzY3VyZWQgYnkgYW5vdGhlciBlbGVtZW50JyxcbiAgICAgICAgICAgICAgZWxtUGFydGlhbGx5T2JzY3VyaW5nOiAnRWxlbWVudFxcJ3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IHBhcnRpYWxseSBvdmVybGFwcyBvdGhlciBlbGVtZW50cycsXG4gICAgICAgICAgICAgIG91dHNpZGVWaWV3cG9ydDogJ0VsZW1lbnRcXCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdFxcJ3Mgb3V0c2lkZSB0aGUgdmlld3BvcnQnLFxuICAgICAgICAgICAgICBlcXVhbFJhdGlvOiAnRWxlbWVudCBoYXMgYSAxOjEgY29udHJhc3QgcmF0aW8gd2l0aCB0aGUgYmFja2dyb3VuZCcsXG4gICAgICAgICAgICAgIHNob3J0VGV4dENvbnRlbnQ6ICdFbGVtZW50IGNvbnRlbnQgaXMgdG9vIHNob3J0IHRvIGRldGVybWluZSBpZiBpdCBpcyBhY3R1YWwgdGV4dCBjb250ZW50JyxcbiAgICAgICAgICAgICAgbm9uQm1wOiAnRWxlbWVudCBjb250ZW50IGNvbnRhaW5zIG9ubHkgbm9uLXRleHQgY2hhcmFjdGVycycsXG4gICAgICAgICAgICAgIHBzZXVkb0NvbnRlbnQ6ICdFbGVtZW50XFwncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIHBzZXVkbyBlbGVtZW50J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2xpbmstaW4tdGV4dC1ibG9jay1zdHlsZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0xpbmtzIGNhbiBiZSBkaXN0aW5ndWlzaGVkIGZyb20gc3Vycm91bmRpbmcgdGV4dCBieSB2aXN1YWwgc3R5bGluZycsXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6ICdDaGVjayBpZiB0aGUgbGluayBuZWVkcyBzdHlsaW5nIHRvIGRpc3Rpbmd1aXNoIGl0IGZyb20gbmVhcmJ5IHRleHQnLFxuICAgICAgICAgICAgICBwc2V1ZG9Db250ZW50OiAnQ2hlY2sgaWYgdGhlIGxpbmtcXCdzIHBzZXVkbyBzdHlsZSBpcyBzdWZmaWNpZW50IHRvIGRpc3Rpbmd1aXNoIGl0IGZyb20gdGhlIHN1cnJvdW5kaW5nIHRleHQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFpbDogJ1RoZSBsaW5rIGhhcyBubyBzdHlsaW5nIChzdWNoIGFzIHVuZGVybGluZSkgdG8gZGlzdGluZ3Vpc2ggaXQgZnJvbSB0aGUgc3Vycm91bmRpbmcgdGV4dCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdsaW5rLWluLXRleHQtYmxvY2snOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdMaW5rcyBjYW4gYmUgZGlzdGluZ3Vpc2hlZCBmcm9tIHN1cnJvdW5kaW5nIHRleHQgaW4gc29tZSB3YXkgb3RoZXIgdGhhbiBieSBjb2xvcicsXG4gICAgICAgICAgICBmYWlsOiB7XG4gICAgICAgICAgICAgIGZnQ29udHJhc3Q6ICdUaGUgbGluayBoYXMgaW5zdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mICR7ZGF0YS5jb250cmFzdFJhdGlvfToxIHdpdGggdGhlIHN1cnJvdW5kaW5nIHRleHQuIChNaW5pbXVtIGNvbnRyYXN0IGlzICR7ZGF0YS5yZXF1aXJlZENvbnRyYXN0UmF0aW99OjEsIGxpbmsgdGV4dDogJHtkYXRhLm5vZGVDb2xvcn0sIHN1cnJvdW5kaW5nIHRleHQ6ICR7ZGF0YS5wYXJlbnRDb2xvcn0pJyxcbiAgICAgICAgICAgICAgYmdDb250cmFzdDogJ1RoZSBsaW5rIGJhY2tncm91bmQgaGFzIGluc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiAke2RhdGEuY29udHJhc3RSYXRpb30gKE1pbmltdW0gY29udHJhc3QgaXMgJHtkYXRhLnJlcXVpcmVkQ29udHJhc3RSYXRpb306MSwgbGluayBiYWNrZ3JvdW5kIGNvbG9yOiAke2RhdGEubm9kZUJhY2tncm91bmRDb2xvcn0sIHN1cnJvdW5kaW5nIGJhY2tncm91bmQgY29sb3I6ICR7ZGF0YS5wYXJlbnRCYWNrZ3JvdW5kQ29sb3J9KSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6ICdFbGVtZW50XFwncyBmb3JlZ3JvdW5kIGNvbnRyYXN0IHJhdGlvIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkJyxcbiAgICAgICAgICAgICAgYmdDb250cmFzdDogJ0VsZW1lbnRcXCdzIGJhY2tncm91bmQgY29udHJhc3QgcmF0aW8gY291bGQgbm90IGJlIGRldGVybWluZWQnLFxuICAgICAgICAgICAgICBiZ0ltYWdlOiAnRWxlbWVudFxcJ3MgY29udHJhc3QgcmF0aW8gY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBpbWFnZScsXG4gICAgICAgICAgICAgIGJnR3JhZGllbnQ6ICdFbGVtZW50XFwncyBjb250cmFzdCByYXRpbyBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50JyxcbiAgICAgICAgICAgICAgaW1nTm9kZTogJ0VsZW1lbnRcXCdzIGNvbnRyYXN0IHJhdGlvIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgZWxlbWVudCBjb250YWlucyBhbiBpbWFnZSBub2RlJyxcbiAgICAgICAgICAgICAgYmdPdmVybGFwOiAnRWxlbWVudFxcJ3MgY29udHJhc3QgcmF0aW8gY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBvZiBlbGVtZW50IG92ZXJsYXAnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnYXV0b2NvbXBsZXRlLWFwcHJvcHJpYXRlJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnVGhlIGF1dG9jb21wbGV0ZSB2YWx1ZSBpcyBvbiBhbiBhcHByb3ByaWF0ZSBlbGVtZW50JyxcbiAgICAgICAgICAgIGZhaWw6ICdUaGUgYXV0b2NvbXBsZXRlIHZhbHVlIGlzIGluYXBwcm9wcmlhdGUgZm9yIHRoaXMgdHlwZSBvZiBpbnB1dCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdhdXRvY29tcGxldGUtdmFsaWQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICd0aGUgYXV0b2NvbXBsZXRlIGF0dHJpYnV0ZSBpcyBjb3JyZWN0bHkgZm9ybWF0dGVkJyxcbiAgICAgICAgICAgIGZhaWw6ICd0aGUgYXV0b2NvbXBsZXRlIGF0dHJpYnV0ZSBpcyBpbmNvcnJlY3RseSBmb3JtYXR0ZWQnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ3RoZSBhdXRvY29tcGxldGUgYXR0cmlidXRlIGhhcyBhIG5vbi1zdGFuZGFyZCB2YWx1ZS4gQ2hlY2sgd2hldGhlciBhbnkgc3RhbmRhcmQgdmFsdWUgY291bGQgYmUgdXNlZCBpbnN0ZWFkLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFjY2Vzc2tleXM6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0FjY2Vzc2tleSBhdHRyaWJ1dGUgdmFsdWUgaXMgdW5pcXVlJyxcbiAgICAgICAgICAgIGZhaWw6ICdEb2N1bWVudCBoYXMgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0aGUgc2FtZSBhY2Nlc3NrZXknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZm9jdXNhYmxlLWNvbnRlbnQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGNvbnRhaW5zIGZvY3VzYWJsZSBlbGVtZW50cycsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudCBzaG91bGQgaGF2ZSBmb2N1c2FibGUgY29udGVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdmb2N1c2FibGUtZGlzYWJsZWQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdObyBmb2N1c2FibGUgZWxlbWVudHMgY29udGFpbmVkIHdpdGhpbiBlbGVtZW50JyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdDaGVjayBpZiB0aGUgZm9jdXNhYmxlIGVsZW1lbnRzIGltbWVkaWF0ZWx5IG1vdmUgdGhlIGZvY3VzIGluZGljYXRvcicsXG4gICAgICAgICAgICBmYWlsOiAnRm9jdXNhYmxlIGNvbnRlbnQgc2hvdWxkIGJlIGRpc2FibGVkIG9yIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2ZvY3VzYWJsZS1lbGVtZW50Jzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudCBpcyBmb2N1c2FibGUnLFxuICAgICAgICAgICAgZmFpbDogJ0VsZW1lbnQgc2hvdWxkIGJlIGZvY3VzYWJsZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdmb2N1c2FibGUtbW9kYWwtb3Blbic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ05vIGZvY3VzYWJsZSBlbGVtZW50cyB3aGlsZSBhIG1vZGFsIGlzIG9wZW4nLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ0NoZWNrIHRoYXQgZm9jdXNhYmxlIGVsZW1lbnRzIGFyZSBub3QgdGFiYmFibGUgaW4gdGhlIGN1cnJlbnQgc3RhdGUnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZm9jdXNhYmxlLW5vLW5hbWUnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCcsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudCBpcyBpbiB0YWIgb3JkZXIgYW5kIGRvZXMgbm90IGhhdmUgYWNjZXNzaWJsZSB0ZXh0JyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdVbmFibGUgdG8gZGV0ZXJtaW5lIGlmIGVsZW1lbnQgaGFzIGFuIGFjY2Vzc2libGUgbmFtZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdmb2N1c2FibGUtbm90LXRhYmJhYmxlJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnTm8gZm9jdXNhYmxlIGVsZW1lbnRzIGNvbnRhaW5lZCB3aXRoaW4gZWxlbWVudCcsXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiAnQ2hlY2sgaWYgdGhlIGZvY3VzYWJsZSBlbGVtZW50cyBpbW1lZGlhdGVseSBtb3ZlIHRoZSBmb2N1cyBpbmRpY2F0b3InLFxuICAgICAgICAgICAgZmFpbDogJ0ZvY3VzYWJsZSBjb250ZW50IHNob3VsZCBoYXZlIHRhYmluZGV4PVwiLTFcIiBvciBiZSByZW1vdmVkIGZyb20gdGhlIERPTSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdmcmFtZS1mb2N1c2FibGUtY29udGVudCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMnLFxuICAgICAgICAgICAgZmFpbDogJ0VsZW1lbnQgaGFzIGZvY3VzYWJsZSBkZXNjZW5kYW50cycsXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiAnQ291bGQgbm90IGRldGVybWluZSBpZiBlbGVtZW50IGhhcyBkZXNjZW5kYW50cydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdsYW5kbWFyay1pcy10b3AtbGV2ZWwnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnVGhlICR7ZGF0YS5yb2xlfSBsYW5kbWFyayBpcyBhdCB0aGUgdG9wIGxldmVsLicsXG4gICAgICAgICAgICBmYWlsOiAnVGhlICR7ZGF0YS5yb2xlfSBsYW5kbWFyayBpcyBjb250YWluZWQgaW4gYW5vdGhlciBsYW5kbWFyay4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnbm8tZm9jdXNhYmxlLWNvbnRlbnQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzJyxcbiAgICAgICAgICAgIGZhaWw6IHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogJ0VsZW1lbnQgaGFzIGZvY3VzYWJsZSBkZXNjZW5kYW50cycsXG4gICAgICAgICAgICAgIG5vdEhpZGRlbjogJ1VzaW5nIGEgbmVnYXRpdmUgdGFiaW5kZXggb24gYW4gZWxlbWVudCBpbnNpZGUgYW4gaW50ZXJhY3RpdmUgY29udHJvbCBkb2VzIG5vdCBwcmV2ZW50IGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMgZnJvbSBmb2N1c2luZyB0aGUgZWxlbWVudCAoZXZlbiB3aXRoIGFyaWEtaGlkZGVuPVwidHJ1ZVwiKSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiAnQ291bGQgbm90IGRldGVybWluZSBpZiBlbGVtZW50IGhhcyBkZXNjZW5kYW50cydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdwYWdlLWhhcy1oZWFkaW5nLW9uZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdQYWdlIGhhcyBhdCBsZWFzdCBvbmUgbGV2ZWwtb25lIGhlYWRpbmcnLFxuICAgICAgICAgICAgZmFpbDogJ1BhZ2UgbXVzdCBoYXZlIGEgbGV2ZWwtb25lIGhlYWRpbmcnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAncGFnZS1oYXMtbWFpbic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdEb2N1bWVudCBoYXMgYXQgbGVhc3Qgb25lIG1haW4gbGFuZG1hcmsnLFxuICAgICAgICAgICAgZmFpbDogJ0RvY3VtZW50IGRvZXMgbm90IGhhdmUgYSBtYWluIGxhbmRtYXJrJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ3BhZ2Utbm8tZHVwbGljYXRlLWJhbm5lcic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdEb2N1bWVudCBkb2VzIG5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgYmFubmVyIGxhbmRtYXJrJyxcbiAgICAgICAgICAgIGZhaWw6ICdEb2N1bWVudCBoYXMgbW9yZSB0aGFuIG9uZSBiYW5uZXIgbGFuZG1hcmsnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAncGFnZS1uby1kdXBsaWNhdGUtY29udGVudGluZm8nOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRG9jdW1lbnQgZG9lcyBub3QgaGF2ZSBtb3JlIHRoYW4gb25lIGNvbnRlbnRpbmZvIGxhbmRtYXJrJyxcbiAgICAgICAgICAgIGZhaWw6ICdEb2N1bWVudCBoYXMgbW9yZSB0aGFuIG9uZSBjb250ZW50aW5mbyBsYW5kbWFyaydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdwYWdlLW5vLWR1cGxpY2F0ZS1tYWluJzoge1xuICAgICAgICAgIGltcGFjdDogJ21vZGVyYXRlJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0RvY3VtZW50IGRvZXMgbm90IGhhdmUgbW9yZSB0aGFuIG9uZSBtYWluIGxhbmRtYXJrJyxcbiAgICAgICAgICAgIGZhaWw6ICdEb2N1bWVudCBoYXMgbW9yZSB0aGFuIG9uZSBtYWluIGxhbmRtYXJrJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGFiaW5kZXg6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIHRhYmluZGV4IGdyZWF0ZXIgdGhhbiAwJyxcbiAgICAgICAgICAgIGZhaWw6ICdFbGVtZW50IGhhcyBhIHRhYmluZGV4IGdyZWF0ZXIgdGhhbiAwJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FsdC1zcGFjZS12YWx1ZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUnLFxuICAgICAgICAgICAgZmFpbDogJ0VsZW1lbnQgaGFzIGFuIGFsdCBhdHRyaWJ1dGUgY29udGFpbmluZyBvbmx5IGEgc3BhY2UgY2hhcmFjdGVyLCB3aGljaCBpcyBub3QgaWdub3JlZCBieSBhbGwgc2NyZWVuIHJlYWRlcnMnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZHVwbGljYXRlLWltZy1sYWJlbCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0JyxcbiAgICAgICAgICAgIGZhaWw6ICdFbGVtZW50IGNvbnRhaW5zIDxpbWc+IGVsZW1lbnQgd2l0aCBhbHQgdGV4dCB0aGF0IGR1cGxpY2F0ZXMgZXhpc3RpbmcgdGV4dCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdleHBsaWNpdC1sYWJlbCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGhhcyBhbiBleHBsaWNpdCA8bGFiZWw+JyxcbiAgICAgICAgICAgIGZhaWw6ICdFbGVtZW50IGRvZXMgbm90IGhhdmUgYW4gZXhwbGljaXQgPGxhYmVsPicsXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiAnVW5hYmxlIHRvIGRldGVybWluZSBpZiBmb3JtIGVsZW1lbnQgaGFzIGFuIGV4cGxpY2l0IDxsYWJlbD4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnaGVscC1zYW1lLWFzLWxhYmVsJzoge1xuICAgICAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0hlbHAgdGV4dCAodGl0bGUgb3IgYXJpYS1kZXNjcmliZWRieSkgZG9lcyBub3QgZHVwbGljYXRlIGxhYmVsIHRleHQnLFxuICAgICAgICAgICAgZmFpbDogJ0hlbHAgdGV4dCAodGl0bGUgb3IgYXJpYS1kZXNjcmliZWRieSkgdGV4dCBpcyB0aGUgc2FtZSBhcyB0aGUgbGFiZWwgdGV4dCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdoaWRkZW4tZXhwbGljaXQtbGFiZWwnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRm9ybSBlbGVtZW50IGhhcyBhIHZpc2libGUgZXhwbGljaXQgPGxhYmVsPicsXG4gICAgICAgICAgICBmYWlsOiAnRm9ybSBlbGVtZW50IGhhcyBleHBsaWNpdCA8bGFiZWw+IHRoYXQgaXMgaGlkZGVuJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdVbmFibGUgdG8gZGV0ZXJtaW5lIGlmIGZvcm0gZWxlbWVudCBoYXMgZXhwbGljaXQgPGxhYmVsPiB0aGF0IGlzIGhpZGRlbidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdpbXBsaWNpdC1sYWJlbCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGhhcyBhbiBpbXBsaWNpdCAod3JhcHBlZCkgPGxhYmVsPicsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudCBkb2VzIG5vdCBoYXZlIGFuIGltcGxpY2l0ICh3cmFwcGVkKSA8bGFiZWw+JyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdVbmFibGUgdG8gZGV0ZXJtaW5lIGlmIGZvcm0gZWxlbWVudCBoYXMgYW4gaW1wbGljaXQgKHdyYXBwZWQpIDxsYWJlbD4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnbGFiZWwtY29udGVudC1uYW1lLW1pc21hdGNoJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudCBjb250YWlucyB2aXNpYmxlIHRleHQgYXMgcGFydCBvZiBpdFxcJ3MgYWNjZXNzaWJsZSBuYW1lJyxcbiAgICAgICAgICAgIGZhaWw6ICdUZXh0IGluc2lkZSB0aGUgZWxlbWVudCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFjY2Vzc2libGUgbmFtZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdtdWx0aXBsZS1sYWJlbCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdGb3JtIGZpZWxkIGRvZXMgbm90IGhhdmUgbXVsdGlwbGUgbGFiZWwgZWxlbWVudHMnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ011bHRpcGxlIGxhYmVsIGVsZW1lbnRzIGlzIG5vdCB3aWRlbHkgc3VwcG9ydGVkIGluIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMuIEVuc3VyZSB0aGUgZmlyc3QgbGFiZWwgY29udGFpbnMgYWxsIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbi4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndGl0bGUtb25seSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0Zvcm0gZWxlbWVudCBkb2VzIG5vdCBzb2xlbHkgdXNlIHRpdGxlIGF0dHJpYnV0ZSBmb3IgaXRzIGxhYmVsJyxcbiAgICAgICAgICAgIGZhaWw6ICdPbmx5IHRpdGxlIHVzZWQgdG8gZ2VuZXJhdGUgbGFiZWwgZm9yIGZvcm0gZWxlbWVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdsYW5kbWFyay1pcy11bmlxdWUnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnTGFuZG1hcmtzIG11c3QgaGF2ZSBhIHVuaXF1ZSByb2xlIG9yIHJvbGUvbGFiZWwvdGl0bGUgKGkuZS4gYWNjZXNzaWJsZSBuYW1lKSBjb21iaW5hdGlvbicsXG4gICAgICAgICAgICBmYWlsOiAnVGhlIGxhbmRtYXJrIG11c3QgaGF2ZSBhIHVuaXF1ZSBhcmlhLWxhYmVsLCBhcmlhLWxhYmVsbGVkYnksIG9yIHRpdGxlIHRvIG1ha2UgbGFuZG1hcmtzIGRpc3Rpbmd1aXNoYWJsZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdoYXMtbGFuZyc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ1RoZSA8aHRtbD4gZWxlbWVudCBoYXMgYSBsYW5nIGF0dHJpYnV0ZScsXG4gICAgICAgICAgICBmYWlsOiB7XG4gICAgICAgICAgICAgIG5vWEhUTUw6ICdUaGUgeG1sOmxhbmcgYXR0cmlidXRlIGlzIG5vdCB2YWxpZCBvbiBIVE1MIHBhZ2VzLCB1c2UgdGhlIGxhbmcgYXR0cmlidXRlLicsXG4gICAgICAgICAgICAgIG5vTGFuZzogJ1RoZSA8aHRtbD4gZWxlbWVudCBkb2VzIG5vdCBoYXZlIGEgbGFuZyBhdHRyaWJ1dGUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndmFsaWQtbGFuZyc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ1ZhbHVlIG9mIGxhbmcgYXR0cmlidXRlIGlzIGluY2x1ZGVkIGluIHRoZSBsaXN0IG9mIHZhbGlkIGxhbmd1YWdlcycsXG4gICAgICAgICAgICBmYWlsOiAnVmFsdWUgb2YgbGFuZyBhdHRyaWJ1dGUgbm90IGluY2x1ZGVkIGluIHRoZSBsaXN0IG9mIHZhbGlkIGxhbmd1YWdlcydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICd4bWwtbGFuZy1taXNtYXRjaCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdMYW5nIGFuZCB4bWw6bGFuZyBhdHRyaWJ1dGVzIGhhdmUgdGhlIHNhbWUgYmFzZSBsYW5ndWFnZScsXG4gICAgICAgICAgICBmYWlsOiAnTGFuZyBhbmQgeG1sOmxhbmcgYXR0cmlidXRlcyBkbyBub3QgaGF2ZSB0aGUgc2FtZSBiYXNlIGxhbmd1YWdlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGxpdGVtOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdEZXNjcmlwdGlvbiBsaXN0IGl0ZW0gaGFzIGEgPGRsPiBwYXJlbnQgZWxlbWVudCcsXG4gICAgICAgICAgICBmYWlsOiAnRGVzY3JpcHRpb24gbGlzdCBpdGVtIGRvZXMgbm90IGhhdmUgYSA8ZGw+IHBhcmVudCBlbGVtZW50J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGlzdGl0ZW06IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0xpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBkZWZhdWx0OiAnTGlzdCBpdGVtIGRvZXMgbm90IGhhdmUgYSA8dWw+LCA8b2w+IHBhcmVudCBlbGVtZW50JyxcbiAgICAgICAgICAgICAgcm9sZU5vdFZhbGlkOiAnTGlzdCBpdGVtIHBhcmVudCBlbGVtZW50IGhhcyBhIHJvbGUgdGhhdCBpcyBub3Qgcm9sZT1cImxpc3RcIidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdvbmx5LWRsaXRlbXMnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdkbCBlbGVtZW50IG9ubHkgaGFzIGRpcmVjdCBjaGlsZHJlbiB0aGF0IGFyZSBhbGxvd2VkIGluc2lkZTsgPGR0PiwgPGRkPiwgb3IgPGRpdj4gZWxlbWVudHMnLFxuICAgICAgICAgICAgZmFpbDogJ2RsIGVsZW1lbnQgaGFzIGRpcmVjdCBjaGlsZHJlbiB0aGF0IGFyZSBub3QgYWxsb3dlZDogJHtkYXRhLnZhbHVlc30nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnb25seS1saXN0aXRlbXMnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdMaXN0IGVsZW1lbnQgb25seSBoYXMgZGlyZWN0IGNoaWxkcmVuIHRoYXQgYXJlIGFsbG93ZWQgaW5zaWRlIDxsaT4gZWxlbWVudHMnLFxuICAgICAgICAgICAgZmFpbDogJ0xpc3QgZWxlbWVudCBoYXMgZGlyZWN0IGNoaWxkcmVuIHRoYXQgYXJlIG5vdCBhbGxvd2VkOiAke2RhdGEudmFsdWVzfSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdzdHJ1Y3R1cmVkLWRsaXRlbXMnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdXaGVuIG5vdCBlbXB0eSwgZWxlbWVudCBoYXMgYm90aCA8ZHQ+IGFuZCA8ZGQ+IGVsZW1lbnRzJyxcbiAgICAgICAgICAgIGZhaWw6ICdXaGVuIG5vdCBlbXB0eSwgZWxlbWVudCBkb2VzIG5vdCBoYXZlIGF0IGxlYXN0IG9uZSA8ZHQ+IGVsZW1lbnQgZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIDxkZD4gZWxlbWVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhcHRpb246IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdUaGUgbXVsdGltZWRpYSBlbGVtZW50IGhhcyBhIGNhcHRpb25zIHRyYWNrJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdDaGVjayB0aGF0IGNhcHRpb25zIGFyZSBhdmFpbGFibGUgZm9yIHRoZSBlbGVtZW50J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2ZyYW1lLXRlc3RlZCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdUaGUgaWZyYW1lIHdhcyB0ZXN0ZWQgd2l0aCBheGUtY29yZScsXG4gICAgICAgICAgICBmYWlsOiAnVGhlIGlmcmFtZSBjb3VsZCBub3QgYmUgdGVzdGVkIHdpdGggYXhlLWNvcmUnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ1RoZSBpZnJhbWUgc3RpbGwgaGFzIHRvIGJlIHRlc3RlZCB3aXRoIGF4ZS1jb3JlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ25vLWF1dG9wbGF5LWF1ZGlvJzoge1xuICAgICAgICAgIGltcGFjdDogJ21vZGVyYXRlJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJzx2aWRlbz4gb3IgPGF1ZGlvPiBkb2VzIG5vdCBvdXRwdXQgYXVkaW8gZm9yIG1vcmUgdGhhbiBhbGxvd2VkIGR1cmF0aW9uIG9yIGhhcyBjb250cm9scyBtZWNoYW5pc20nLFxuICAgICAgICAgICAgZmFpbDogJzx2aWRlbz4gb3IgPGF1ZGlvPiBvdXRwdXRzIGF1ZGlvIGZvciBtb3JlIHRoYW4gYWxsb3dlZCBkdXJhdGlvbiBhbmQgZG9lcyBub3QgaGF2ZSBhIGNvbnRyb2xzIG1lY2hhbmlzbScsXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiAnQ2hlY2sgdGhhdCB0aGUgPHZpZGVvPiBvciA8YXVkaW8+IGRvZXMgbm90IG91dHB1dCBhdWRpbyBmb3IgbW9yZSB0aGFuIGFsbG93ZWQgZHVyYXRpb24gb3IgcHJvdmlkZXMgYSBjb250cm9scyBtZWNoYW5pc20nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnY3NzLW9yaWVudGF0aW9uLWxvY2snOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdEaXNwbGF5IGlzIG9wZXJhYmxlLCBhbmQgb3JpZW50YXRpb24gbG9jayBkb2VzIG5vdCBleGlzdCcsXG4gICAgICAgICAgICBmYWlsOiAnQ1NTIE9yaWVudGF0aW9uIGxvY2sgaXMgYXBwbGllZCwgYW5kIG1ha2VzIGRpc3BsYXkgaW5vcGVyYWJsZScsXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiAnQ1NTIE9yaWVudGF0aW9uIGxvY2sgY2Fubm90IGJlIGRldGVybWluZWQnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnbWV0YS12aWV3cG9ydC1sYXJnZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICc8bWV0YT4gdGFnIGRvZXMgbm90IHByZXZlbnQgc2lnbmlmaWNhbnQgem9vbWluZyBvbiBtb2JpbGUgZGV2aWNlcycsXG4gICAgICAgICAgICBmYWlsOiAnPG1ldGE+IHRhZyBsaW1pdHMgem9vbWluZyBvbiBtb2JpbGUgZGV2aWNlcydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdtZXRhLXZpZXdwb3J0Jzoge1xuICAgICAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJzxtZXRhPiB0YWcgZG9lcyBub3QgZGlzYWJsZSB6b29taW5nIG9uIG1vYmlsZSBkZXZpY2VzJyxcbiAgICAgICAgICAgIGZhaWw6ICcke2RhdGF9IG9uIDxtZXRhPiB0YWcgZGlzYWJsZXMgem9vbWluZyBvbiBtb2JpbGUgZGV2aWNlcydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICd0YXJnZXQtb2Zmc2V0Jzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6ICdUYXJnZXQgaGFzIHN1ZmZpY2llbnQgc3BhY2UgZnJvbSBpdHMgY2xvc2VzdCBuZWlnaGJvcnMuIFNhZmUgY2xpY2thYmxlIHNwYWNlIGhhcyBhIGRpYW1ldGVyIG9mICR7ZGF0YS5jbG9zZXN0T2Zmc2V0fXB4IHdoaWNoIGlzIGF0IGxlYXN0ICR7ZGF0YS5taW5PZmZzZXR9cHguJyxcbiAgICAgICAgICAgICAgbGFyZ2U6ICdUYXJnZXQgZmFyIGV4Y2VlZHMgdGhlIG1pbmltdW0gc2l6ZSBvZiAke2RhdGEubWluT2Zmc2V0fXB4LidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWlsOiAnVGFyZ2V0IGhhcyBpbnN1ZmZpY2llbnQgc3BhY2UgdG8gaXRzIGNsb3Nlc3QgbmVpZ2hib3JzLiBTYWZlIGNsaWNrYWJsZSBzcGFjZSBoYXMgYSBkaWFtZXRlciBvZiAke2RhdGEuY2xvc2VzdE9mZnNldH1weCBpbnN0ZWFkIG9mIGF0IGxlYXN0ICR7ZGF0YS5taW5PZmZzZXR9cHguJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6IHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogJ0VsZW1lbnQgd2l0aCBuZWdhdGl2ZSB0YWJpbmRleCBoYXMgaW5zdWZmaWNpZW50IHNwYWNlIHRvIGl0cyBjbG9zZXN0IG5laWdoYm9ycy4gU2FmZSBjbGlja2FibGUgc3BhY2UgaGFzIGEgZGlhbWV0ZXIgb2YgJHtkYXRhLmNsb3Nlc3RPZmZzZXR9cHggaW5zdGVhZCBvZiBhdCBsZWFzdCAke2RhdGEubWluT2Zmc2V0fXB4LiBJcyB0aGlzIGEgdGFyZ2V0PycsXG4gICAgICAgICAgICAgIG5vblRhYmJhYmxlTmVpZ2hib3I6ICdUYXJnZXQgaGFzIGluc3VmZmljaWVudCBzcGFjZSB0byBpdHMgY2xvc2VzdCBuZWlnaGJvcnMuIFNhZmUgY2xpY2thYmxlIHNwYWNlIGhhcyBhIGRpYW1ldGVyIG9mICR7ZGF0YS5jbG9zZXN0T2Zmc2V0fXB4IGluc3RlYWQgb2YgYXQgbGVhc3QgJHtkYXRhLm1pbk9mZnNldH1weC4gSXMgdGhlIG5laWdoYm9yIGEgdGFyZ2V0PycsXG4gICAgICAgICAgICAgIHRvb01hbnlSZWN0czogJ0NvdWxkIG5vdCBnZXQgdGhlIHRhcmdldCBzaXplIGJlY2F1c2UgdGhlcmUgYXJlIHRvbyBtYW55IG92ZXJsYXBwaW5nIGVsZW1lbnRzJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ3RhcmdldC1zaXplJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6ICdDb250cm9sIGhhcyBzdWZmaWNpZW50IHNpemUgKCR7ZGF0YS53aWR0aH1weCBieSAke2RhdGEuaGVpZ2h0fXB4LCBzaG91bGQgYmUgYXQgbGVhc3QgJHtkYXRhLm1pblNpemV9cHggYnkgJHtkYXRhLm1pblNpemV9cHgpJyxcbiAgICAgICAgICAgICAgb2JzY3VyZWQ6ICdDb250cm9sIGlzIGlnbm9yZWQgYmVjYXVzZSBpdCBpcyBmdWxseSBvYnNjdXJlZCBhbmQgdGh1cyBub3QgY2xpY2thYmxlJyxcbiAgICAgICAgICAgICAgbGFyZ2U6ICdUYXJnZXQgZmFyIGV4Y2VlZHMgdGhlIG1pbmltdW0gc2l6ZSBvZiAke2RhdGEubWluU2l6ZX1weC4nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBkZWZhdWx0OiAnVGFyZ2V0IGhhcyBpbnN1ZmZpY2llbnQgc2l6ZSAoJHtkYXRhLndpZHRofXB4IGJ5ICR7ZGF0YS5oZWlnaHR9cHgsIHNob3VsZCBiZSBhdCBsZWFzdCAke2RhdGEubWluU2l6ZX1weCBieSAke2RhdGEubWluU2l6ZX1weCknLFxuICAgICAgICAgICAgICBwYXJ0aWFsbHlPYnNjdXJlZDogJ1RhcmdldCBoYXMgaW5zdWZmaWNpZW50IHNpemUgYmVjYXVzZSBpdCBpcyBwYXJ0aWFsbHkgb2JzY3VyZWQgKHNtYWxsZXN0IHNwYWNlIGlzICR7ZGF0YS53aWR0aH1weCBieSAke2RhdGEuaGVpZ2h0fXB4LCBzaG91bGQgYmUgYXQgbGVhc3QgJHtkYXRhLm1pblNpemV9cHggYnkgJHtkYXRhLm1pblNpemV9cHgpJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY29tcGxldGU6IHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogJ0VsZW1lbnQgd2l0aCBuZWdhdGl2ZSB0YWJpbmRleCBoYXMgaW5zdWZmaWNpZW50IHNpemUgKCR7ZGF0YS53aWR0aH1weCBieSAke2RhdGEuaGVpZ2h0fXB4LCBzaG91bGQgYmUgYXQgbGVhc3QgJHtkYXRhLm1pblNpemV9cHggYnkgJHtkYXRhLm1pblNpemV9cHgpLiBJcyB0aGlzIGEgdGFyZ2V0PycsXG4gICAgICAgICAgICAgIGNvbnRlbnRPdmVyZmxvdzogJ0VsZW1lbnQgc2l6ZSBjb3VsZCBub3QgYmUgYWNjdXJhdGVseSBkZXRlcm1pbmVkIGR1ZSB0byBvdmVyZmxvdyBjb250ZW50JyxcbiAgICAgICAgICAgICAgcGFydGlhbGx5T2JzY3VyZWQ6ICdFbGVtZW50IHdpdGggbmVnYXRpdmUgdGFiaW5kZXggaGFzIGluc3VmZmljaWVudCBzaXplIGJlY2F1c2UgaXQgaXMgcGFydGlhbGx5IG9ic2N1cmVkIChzbWFsbGVzdCBzcGFjZSBpcyAke2RhdGEud2lkdGh9cHggYnkgJHtkYXRhLmhlaWdodH1weCwgc2hvdWxkIGJlIGF0IGxlYXN0ICR7ZGF0YS5taW5TaXplfXB4IGJ5ICR7ZGF0YS5taW5TaXplfXB4KS4gSXMgdGhpcyBhIHRhcmdldD8nLFxuICAgICAgICAgICAgICBwYXJ0aWFsbHlPYnNjdXJlZE5vblRhYmJhYmxlOiAnVGFyZ2V0IGhhcyBpbnN1ZmZpY2llbnQgc2l6ZSBiZWNhdXNlIGl0IGlzIHBhcnRpYWxseSBvYnNjdXJlZCBieSBhIG5laWdoYm9yIHdpdGggbmVnYXRpdmUgdGFiaW5kZXggKHNtYWxsZXN0IHNwYWNlIGlzICR7ZGF0YS53aWR0aH1weCBieSAke2RhdGEuaGVpZ2h0fXB4LCBzaG91bGQgYmUgYXQgbGVhc3QgJHtkYXRhLm1pblNpemV9cHggYnkgJHtkYXRhLm1pblNpemV9cHgpLiBJcyB0aGUgbmVpZ2hib3IgYSB0YXJnZXQ/JyxcbiAgICAgICAgICAgICAgdG9vTWFueVJlY3RzOiAnQ291bGQgbm90IGdldCB0aGUgdGFyZ2V0IHNpemUgYmVjYXVzZSB0aGVyZSBhcmUgdG9vIG1hbnkgb3ZlcmxhcHBpbmcgZWxlbWVudHMnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnaGVhZGVyLXByZXNlbnQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdQYWdlIGhhcyBhIGhlYWRpbmcnLFxuICAgICAgICAgICAgZmFpbDogJ1BhZ2UgZG9lcyBub3QgaGF2ZSBhIGhlYWRpbmcnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnaGVhZGluZy1vcmRlcic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdIZWFkaW5nIG9yZGVyIHZhbGlkJyxcbiAgICAgICAgICAgIGZhaWw6ICdIZWFkaW5nIG9yZGVyIGludmFsaWQnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ1VuYWJsZSB0byBkZXRlcm1pbmUgcHJldmlvdXMgaGVhZGluZydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdpZGVudGljYWwtbGlua3Mtc2FtZS1wdXJwb3NlJzoge1xuICAgICAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ1RoZXJlIGFyZSBubyBvdGhlciBsaW5rcyB3aXRoIHRoZSBzYW1lIG5hbWUsIHRoYXQgZ28gdG8gYSBkaWZmZXJlbnQgVVJMJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdDaGVjayB0aGF0IGxpbmtzIGhhdmUgdGhlIHNhbWUgcHVycG9zZSwgb3IgYXJlIGludGVudGlvbmFsbHkgYW1iaWd1b3VzLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdpbnRlcm5hbC1saW5rLXByZXNlbnQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdWYWxpZCBza2lwIGxpbmsgZm91bmQnLFxuICAgICAgICAgICAgZmFpbDogJ05vIHZhbGlkIHNraXAgbGluayBmb3VuZCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxhbmRtYXJrOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdQYWdlIGhhcyBhIGxhbmRtYXJrIHJlZ2lvbicsXG4gICAgICAgICAgICBmYWlsOiAnUGFnZSBkb2VzIG5vdCBoYXZlIGEgbGFuZG1hcmsgcmVnaW9uJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ21ldGEtcmVmcmVzaC1uby1leGNlcHRpb25zJzoge1xuICAgICAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJzxtZXRhPiB0YWcgZG9lcyBub3QgaW1tZWRpYXRlbHkgcmVmcmVzaCB0aGUgcGFnZScsXG4gICAgICAgICAgICBmYWlsOiAnPG1ldGE+IHRhZyBmb3JjZXMgdGltZWQgcmVmcmVzaCBvZiBwYWdlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ21ldGEtcmVmcmVzaCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICc8bWV0YT4gdGFnIGRvZXMgbm90IGltbWVkaWF0ZWx5IHJlZnJlc2ggdGhlIHBhZ2UnLFxuICAgICAgICAgICAgZmFpbDogJzxtZXRhPiB0YWcgZm9yY2VzIHRpbWVkIHJlZnJlc2ggb2YgcGFnZSAobGVzcyB0aGFuIDIwIGhvdXJzKSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdwLWFzLWhlYWRpbmcnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICc8cD4gZWxlbWVudHMgYXJlIG5vdCBzdHlsZWQgYXMgaGVhZGluZ3MnLFxuICAgICAgICAgICAgZmFpbDogJ0hlYWRpbmcgZWxlbWVudHMgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBvZiBzdHlsZWQgPHA+IGVsZW1lbnRzJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdVbmFibGUgdG8gZGV0ZXJtaW5lIGlmIDxwPiBlbGVtZW50cyBhcmUgc3R5bGVkIGFzIGhlYWRpbmdzJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVnaW9uOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzJyxcbiAgICAgICAgICAgIGZhaWw6ICdTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdza2lwLWxpbmsnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnU2tpcCBsaW5rIHRhcmdldCBleGlzdHMnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ1NraXAgbGluayB0YXJnZXQgc2hvdWxkIGJlY29tZSB2aXNpYmxlIG9uIGFjdGl2YXRpb24nLFxuICAgICAgICAgICAgZmFpbDogJ05vIHNraXAgbGluayB0YXJnZXQnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndW5pcXVlLWZyYW1lLXRpdGxlJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudFxcJ3MgdGl0bGUgYXR0cmlidXRlIGlzIHVuaXF1ZScsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudFxcJ3MgdGl0bGUgYXR0cmlidXRlIGlzIG5vdCB1bmlxdWUnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZHVwbGljYXRlLWlkLWFjdGl2ZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0RvY3VtZW50IGhhcyBubyBhY3RpdmUgZWxlbWVudHMgdGhhdCBzaGFyZSB0aGUgc2FtZSBpZCBhdHRyaWJ1dGUnLFxuICAgICAgICAgICAgZmFpbDogJ0RvY3VtZW50IGhhcyBhY3RpdmUgZWxlbWVudHMgd2l0aCB0aGUgc2FtZSBpZCBhdHRyaWJ1dGU6ICR7ZGF0YX0nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZHVwbGljYXRlLWlkLWFyaWEnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRG9jdW1lbnQgaGFzIG5vIGVsZW1lbnRzIHJlZmVyZW5jZWQgd2l0aCBBUklBIG9yIGxhYmVscyB0aGF0IHNoYXJlIHRoZSBzYW1lIGlkIGF0dHJpYnV0ZScsXG4gICAgICAgICAgICBmYWlsOiAnRG9jdW1lbnQgaGFzIG11bHRpcGxlIGVsZW1lbnRzIHJlZmVyZW5jZWQgd2l0aCBBUklBIHdpdGggdGhlIHNhbWUgaWQgYXR0cmlidXRlOiAke2RhdGF9J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2R1cGxpY2F0ZS1pZCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdEb2N1bWVudCBoYXMgbm8gc3RhdGljIGVsZW1lbnRzIHRoYXQgc2hhcmUgdGhlIHNhbWUgaWQgYXR0cmlidXRlJyxcbiAgICAgICAgICAgIGZhaWw6ICdEb2N1bWVudCBoYXMgbXVsdGlwbGUgc3RhdGljIGVsZW1lbnRzIHdpdGggdGhlIHNhbWUgaWQgYXR0cmlidXRlOiAke2RhdGF9J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2FyaWEtbGFiZWwnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdhcmlhLWxhYmVsIGF0dHJpYnV0ZSBleGlzdHMgYW5kIGlzIG5vdCBlbXB0eScsXG4gICAgICAgICAgICBmYWlsOiAnYXJpYS1sYWJlbCBhdHRyaWJ1dGUgZG9lcyBub3QgZXhpc3Qgb3IgaXMgZW1wdHknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5Jzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnYXJpYS1sYWJlbGxlZGJ5IGF0dHJpYnV0ZSBleGlzdHMgYW5kIHJlZmVyZW5jZXMgZWxlbWVudHMgdGhhdCBhcmUgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycycsXG4gICAgICAgICAgICBmYWlsOiAnYXJpYS1sYWJlbGxlZGJ5IGF0dHJpYnV0ZSBkb2VzIG5vdCBleGlzdCwgcmVmZXJlbmNlcyBlbGVtZW50cyB0aGF0IGRvIG5vdCBleGlzdCBvciByZWZlcmVuY2VzIGVsZW1lbnRzIHRoYXQgYXJlIGVtcHR5JyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdFbnN1cmUgYXJpYS1sYWJlbGxlZGJ5IHJlZmVyZW5jZXMgYW4gZXhpc3RpbmcgZWxlbWVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdhdm9pZC1pbmxpbmUtc3BhY2luZyc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ05vIGlubGluZSBzdHlsZXMgd2l0aCBcXCchaW1wb3J0YW50XFwnIHRoYXQgYWZmZWN0IHRleHQgc3BhY2luZyBoYXMgYmVlbiBzcGVjaWZpZWQnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBzaW5ndWxhcjogJ1JlbW92ZSBcXCchaW1wb3J0YW50XFwnIGZyb20gaW5saW5lIHN0eWxlICR7ZGF0YS52YWx1ZXN9LCBhcyBvdmVycmlkaW5nIHRoaXMgaXMgbm90IHN1cHBvcnRlZCBieSBtb3N0IGJyb3dzZXJzJyxcbiAgICAgICAgICAgICAgcGx1cmFsOiAnUmVtb3ZlIFxcJyFpbXBvcnRhbnRcXCcgZnJvbSBpbmxpbmUgc3R5bGVzICR7ZGF0YS52YWx1ZXN9LCBhcyBvdmVycmlkaW5nIHRoaXMgaXMgbm90IHN1cHBvcnRlZCBieSBtb3N0IGJyb3dzZXJzJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2J1dHRvbi1oYXMtdmlzaWJsZS10ZXh0Jzoge1xuICAgICAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnQgaGFzIGlubmVyIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzJyxcbiAgICAgICAgICAgIGZhaWw6ICdFbGVtZW50IGRvZXMgbm90IGhhdmUgaW5uZXIgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ1VuYWJsZSB0byBkZXRlcm1pbmUgaWYgZWxlbWVudCBoYXMgY2hpbGRyZW4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZG9jLWhhcy10aXRsZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0RvY3VtZW50IGhhcyBhIG5vbi1lbXB0eSA8dGl0bGU+IGVsZW1lbnQnLFxuICAgICAgICAgICAgZmFpbDogJ0RvY3VtZW50IGRvZXMgbm90IGhhdmUgYSBub24tZW1wdHkgPHRpdGxlPiBlbGVtZW50J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXhpc3RzOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudCBkb2VzIG5vdCBleGlzdCcsXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiAnRWxlbWVudCBleGlzdHMnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnaGFzLWFsdCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGhhcyBhbiBhbHQgYXR0cmlidXRlJyxcbiAgICAgICAgICAgIGZhaWw6ICdFbGVtZW50IGRvZXMgbm90IGhhdmUgYW4gYWx0IGF0dHJpYnV0ZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdoYXMtdmlzaWJsZS10ZXh0Jzoge1xuICAgICAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzJyxcbiAgICAgICAgICAgIGZhaWw6ICdFbGVtZW50IGRvZXMgbm90IGhhdmUgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ1VuYWJsZSB0byBkZXRlcm1pbmUgaWYgZWxlbWVudCBoYXMgY2hpbGRyZW4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnaW1wb3J0YW50LWxldHRlci1zcGFjaW5nJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnTGV0dGVyLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtJyxcbiAgICAgICAgICAgIGZhaWw6ICdsZXR0ZXItc3BhY2luZyBpbiB0aGUgc3R5bGUgYXR0cmlidXRlIG11c3Qgbm90IHVzZSAhaW1wb3J0YW50LCBvciBiZSBhdCAke2RhdGEubWluVmFsdWV9ZW0gKGN1cnJlbnQgJHtkYXRhLnZhbHVlfWVtKSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdpbXBvcnRhbnQtbGluZS1oZWlnaHQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdsaW5lLWhlaWdodCBpbiB0aGUgc3R5bGUgYXR0cmlidXRlIGlzIG5vdCBzZXQgdG8gIWltcG9ydGFudCwgb3IgbWVldHMgdGhlIG1pbmltdW0nLFxuICAgICAgICAgICAgZmFpbDogJ2xpbmUtaGVpZ2h0IGluIHRoZSBzdHlsZSBhdHRyaWJ1dGUgbXVzdCBub3QgdXNlICFpbXBvcnRhbnQsIG9yIGJlIGF0ICR7ZGF0YS5taW5WYWx1ZX1lbSAoY3VycmVudCAke2RhdGEudmFsdWV9ZW0pJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2ltcG9ydGFudC13b3JkLXNwYWNpbmcnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICd3b3JkLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtJyxcbiAgICAgICAgICAgIGZhaWw6ICd3b3JkLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBtdXN0IG5vdCB1c2UgIWltcG9ydGFudCwgb3IgYmUgYXQgJHtkYXRhLm1pblZhbHVlfWVtIChjdXJyZW50ICR7ZGF0YS52YWx1ZX1lbSknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnaXMtb24tc2NyZWVuJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudCBpcyBub3QgdmlzaWJsZScsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudCBpcyB2aXNpYmxlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ25vbi1lbXB0eS1hbHQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudCBoYXMgYSBub24tZW1wdHkgYWx0IGF0dHJpYnV0ZScsXG4gICAgICAgICAgICBmYWlsOiB7XG4gICAgICAgICAgICAgIG5vQXR0cjogJ0VsZW1lbnQgaGFzIG5vIGFsdCBhdHRyaWJ1dGUnLFxuICAgICAgICAgICAgICBlbXB0eUF0dHI6ICdFbGVtZW50IGhhcyBhbiBlbXB0eSBhbHQgYXR0cmlidXRlJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ25vbi1lbXB0eS1pZi1wcmVzZW50Jzoge1xuICAgICAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczoge1xuICAgICAgICAgICAgICBkZWZhdWx0OiAnRWxlbWVudCBkb2VzIG5vdCBoYXZlIGEgdmFsdWUgYXR0cmlidXRlJyxcbiAgICAgICAgICAgICAgJ2hhcy1sYWJlbCc6ICdFbGVtZW50IGhhcyBhIG5vbi1lbXB0eSB2YWx1ZSBhdHRyaWJ1dGUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFpbDogJ0VsZW1lbnQgaGFzIGEgdmFsdWUgYXR0cmlidXRlIGFuZCB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIGVtcHR5J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ25vbi1lbXB0eS1wbGFjZWhvbGRlcic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnQgaGFzIGEgcGxhY2Vob2xkZXIgYXR0cmlidXRlJyxcbiAgICAgICAgICAgIGZhaWw6IHtcbiAgICAgICAgICAgICAgbm9BdHRyOiAnRWxlbWVudCBoYXMgbm8gcGxhY2Vob2xkZXIgYXR0cmlidXRlJyxcbiAgICAgICAgICAgICAgZW1wdHlBdHRyOiAnRWxlbWVudCBoYXMgYW4gZW1wdHkgcGxhY2Vob2xkZXIgYXR0cmlidXRlJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ25vbi1lbXB0eS10aXRsZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnQgaGFzIGEgdGl0bGUgYXR0cmlidXRlJyxcbiAgICAgICAgICAgIGZhaWw6IHtcbiAgICAgICAgICAgICAgbm9BdHRyOiAnRWxlbWVudCBoYXMgbm8gdGl0bGUgYXR0cmlidXRlJyxcbiAgICAgICAgICAgICAgZW1wdHlBdHRyOiAnRWxlbWVudCBoYXMgYW4gZW1wdHkgdGl0bGUgYXR0cmlidXRlJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ25vbi1lbXB0eS12YWx1ZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50IGhhcyBhIG5vbi1lbXB0eSB2YWx1ZSBhdHRyaWJ1dGUnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBub0F0dHI6ICdFbGVtZW50IGhhcyBubyB2YWx1ZSBhdHRyaWJ1dGUnLFxuICAgICAgICAgICAgICBlbXB0eUF0dHI6ICdFbGVtZW50IGhhcyBhbiBlbXB0eSB2YWx1ZSBhdHRyaWJ1dGUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAncHJlc2VudGF0aW9uYWwtcm9sZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdFbGVtZW50XFwncyBkZWZhdWx0IHNlbWFudGljcyB3ZXJlIG92ZXJyaWRkZW4gd2l0aCByb2xlPVwiJHtkYXRhLnJvbGV9XCInLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBkZWZhdWx0OiAnRWxlbWVudFxcJ3MgZGVmYXVsdCBzZW1hbnRpY3Mgd2VyZSBub3Qgb3ZlcnJpZGRlbiB3aXRoIHJvbGU9XCJub25lXCIgb3Igcm9sZT1cInByZXNlbnRhdGlvblwiJyxcbiAgICAgICAgICAgICAgZ2xvYmFsQXJpYTogJ0VsZW1lbnRcXCdzIHJvbGUgaXMgbm90IHByZXNlbnRhdGlvbmFsIGJlY2F1c2UgaXQgaGFzIGEgZ2xvYmFsIEFSSUEgYXR0cmlidXRlJyxcbiAgICAgICAgICAgICAgZm9jdXNhYmxlOiAnRWxlbWVudFxcJ3Mgcm9sZSBpcyBub3QgcHJlc2VudGF0aW9uYWwgYmVjYXVzZSBpdCBpcyBmb2N1c2FibGUnLFxuICAgICAgICAgICAgICBib3RoOiAnRWxlbWVudFxcJ3Mgcm9sZSBpcyBub3QgcHJlc2VudGF0aW9uYWwgYmVjYXVzZSBpdCBoYXMgYSBnbG9iYWwgQVJJQSBhdHRyaWJ1dGUgYW5kIGlzIGZvY3VzYWJsZScsXG4gICAgICAgICAgICAgIGlmcmFtZTogJ1VzaW5nIHRoZSBcInRpdGxlXCIgYXR0cmlidXRlIG9uIGFuICR7ZGF0YS5ub2RlTmFtZX0gZWxlbWVudCB3aXRoIGEgcHJlc2VudGF0aW9uYWwgcm9sZSBiZWhhdmVzIGluY29uc2lzdGVudGx5IGJldHdlZW4gc2NyZWVuIHJlYWRlcnMnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAncm9sZS1ub25lJzoge1xuICAgICAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnRcXCdzIGRlZmF1bHQgc2VtYW50aWNzIHdlcmUgb3ZlcnJpZGRlbiB3aXRoIHJvbGU9XCJub25lXCInLFxuICAgICAgICAgICAgZmFpbDogJ0VsZW1lbnRcXCdzIGRlZmF1bHQgc2VtYW50aWNzIHdlcmUgbm90IG92ZXJyaWRkZW4gd2l0aCByb2xlPVwibm9uZVwiJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ3JvbGUtcHJlc2VudGF0aW9uJzoge1xuICAgICAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ0VsZW1lbnRcXCdzIGRlZmF1bHQgc2VtYW50aWNzIHdlcmUgb3ZlcnJpZGRlbiB3aXRoIHJvbGU9XCJwcmVzZW50YXRpb25cIicsXG4gICAgICAgICAgICBmYWlsOiAnRWxlbWVudFxcJ3MgZGVmYXVsdCBzZW1hbnRpY3Mgd2VyZSBub3Qgb3ZlcnJpZGRlbiB3aXRoIHJvbGU9XCJwcmVzZW50YXRpb25cIidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdzdmctbm9uLWVtcHR5LXRpdGxlJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnRWxlbWVudCBoYXMgYSBjaGlsZCB0aGF0IGlzIGEgdGl0bGUnLFxuICAgICAgICAgICAgZmFpbDoge1xuICAgICAgICAgICAgICBub1RpdGxlOiAnRWxlbWVudCBoYXMgbm8gY2hpbGQgdGhhdCBpcyBhIHRpdGxlJyxcbiAgICAgICAgICAgICAgZW1wdHlUaXRsZTogJ0VsZW1lbnQgY2hpbGQgdGl0bGUgaXMgZW1wdHknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ1VuYWJsZSB0byBkZXRlcm1pbmUgZWxlbWVudCBoYXMgYSBjaGlsZCB0aGF0IGlzIGEgdGl0bGUnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnY2FwdGlvbi1mYWtlZCc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgcGFzczogJ1RoZSBmaXJzdCByb3cgb2YgYSB0YWJsZSBpcyBub3QgdXNlZCBhcyBhIGNhcHRpb24nLFxuICAgICAgICAgICAgZmFpbDogJ1RoZSBmaXJzdCBjaGlsZCBvZiB0aGUgdGFibGUgc2hvdWxkIGJlIGEgY2FwdGlvbiBpbnN0ZWFkIG9mIGEgdGFibGUgY2VsbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdodG1sNS1zY29wZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdTY29wZSBhdHRyaWJ1dGUgaXMgb25seSB1c2VkIG9uIHRhYmxlIGhlYWRlciBlbGVtZW50cyAoPHRoPiknLFxuICAgICAgICAgICAgZmFpbDogJ0luIEhUTUwgNSwgc2NvcGUgYXR0cmlidXRlcyBtYXkgb25seSBiZSB1c2VkIG9uIHRhYmxlIGhlYWRlciBlbGVtZW50cyAoPHRoPiknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnc2FtZS1jYXB0aW9uLXN1bW1hcnknOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnQ29udGVudCBvZiBzdW1tYXJ5IGF0dHJpYnV0ZSBhbmQgPGNhcHRpb24+IGFyZSBub3QgZHVwbGljYXRlZCcsXG4gICAgICAgICAgICBmYWlsOiAnQ29udGVudCBvZiBzdW1tYXJ5IGF0dHJpYnV0ZSBhbmQgPGNhcHRpb24+IGVsZW1lbnQgYXJlIGlkZW50aWNhbCcsXG4gICAgICAgICAgICBpbmNvbXBsZXRlOiAnVW5hYmxlIHRvIGRldGVybWluZSBpZiA8dGFibGU+IGVsZW1lbnQgaGFzIGEgY2FwdGlvbidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdzY29wZS12YWx1ZSc6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdTY29wZSBhdHRyaWJ1dGUgaXMgdXNlZCBjb3JyZWN0bHknLFxuICAgICAgICAgICAgZmFpbDogJ1RoZSB2YWx1ZSBvZiB0aGUgc2NvcGUgYXR0cmlidXRlIG1heSBvbmx5IGJlIFxcJ3Jvd1xcJyBvciBcXCdjb2xcXCcnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndGQtaGFzLWhlYWRlcic6IHtcbiAgICAgICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBbGwgbm9uLWVtcHR5IGRhdGEgY2VsbHMgaGF2ZSB0YWJsZSBoZWFkZXJzJyxcbiAgICAgICAgICAgIGZhaWw6ICdTb21lIG5vbi1lbXB0eSBkYXRhIGNlbGxzIGRvIG5vdCBoYXZlIHRhYmxlIGhlYWRlcnMnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndGQtaGVhZGVycy1hdHRyJzoge1xuICAgICAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnVGhlIGhlYWRlcnMgYXR0cmlidXRlIGlzIGV4Y2x1c2l2ZWx5IHVzZWQgdG8gcmVmZXIgdG8gb3RoZXIgY2VsbHMgaW4gdGhlIHRhYmxlJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdUaGUgaGVhZGVycyBhdHRyaWJ1dGUgaXMgZW1wdHknLFxuICAgICAgICAgICAgZmFpbDogJ1RoZSBoZWFkZXJzIGF0dHJpYnV0ZSBpcyBub3QgZXhjbHVzaXZlbHkgdXNlZCB0byByZWZlciB0byBvdGhlciBjZWxscyBpbiB0aGUgdGFibGUnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndGgtaGFzLWRhdGEtY2VsbHMnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHBhc3M6ICdBbGwgdGFibGUgaGVhZGVyIGNlbGxzIHJlZmVyIHRvIGRhdGEgY2VsbHMnLFxuICAgICAgICAgICAgZmFpbDogJ05vdCBhbGwgdGFibGUgaGVhZGVyIGNlbGxzIHJlZmVyIHRvIGRhdGEgY2VsbHMnLFxuICAgICAgICAgICAgaW5jb21wbGV0ZTogJ1RhYmxlIGRhdGEgY2VsbHMgYXJlIG1pc3Npbmcgb3IgZW1wdHknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnaGlkZGVuLWNvbnRlbnQnOiB7XG4gICAgICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBwYXNzOiAnQWxsIGNvbnRlbnQgb24gdGhlIHBhZ2UgaGFzIGJlZW4gYW5hbHl6ZWQuJyxcbiAgICAgICAgICAgIGZhaWw6ICdUaGVyZSB3ZXJlIHByb2JsZW1zIGFuYWx5emluZyB0aGUgY29udGVudCBvbiB0aGlzIHBhZ2UuJyxcbiAgICAgICAgICAgIGluY29tcGxldGU6ICdUaGVyZSBpcyBoaWRkZW4gY29udGVudCBvbiB0aGUgcGFnZSB0aGF0IHdhcyBub3QgYW5hbHl6ZWQuIFlvdSB3aWxsIG5lZWQgdG8gdHJpZ2dlciB0aGUgZGlzcGxheSBvZiB0aGlzIGNvbnRlbnQgaW4gb3JkZXIgdG8gYW5hbHl6ZSBpdC4nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZmFpbHVyZVN1bW1hcmllczoge1xuICAgICAgICBhbnk6IHtcbiAgICAgICAgICBmYWlsdXJlTWVzc2FnZTogZnVuY3Rpb24gYW5vbnltb3VzKGl0KSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0gJ0ZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzonO1xuICAgICAgICAgICAgdmFyIGFycjEgPSBpdDtcbiAgICAgICAgICAgIGlmIChhcnIxKSB7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSwgaTEgPSAtMSwgbDEgPSBhcnIxLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgIHdoaWxlIChpMSA8IGwxKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBhcnIxW2kxICs9IDFdO1xuICAgICAgICAgICAgICAgIG91dCArPSAnXFxuICAnICsgdmFsdWUuc3BsaXQoJ1xcbicpLmpvaW4oJ1xcbiAgJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBub25lOiB7XG4gICAgICAgICAgZmFpbHVyZU1lc3NhZ2U6IGZ1bmN0aW9uIGFub255bW91cyhpdCkge1xuICAgICAgICAgICAgdmFyIG91dCA9ICdGaXggYWxsIG9mIHRoZSBmb2xsb3dpbmc6JztcbiAgICAgICAgICAgIHZhciBhcnIxID0gaXQ7XG4gICAgICAgICAgICBpZiAoYXJyMSkge1xuICAgICAgICAgICAgICB2YXIgdmFsdWUsIGkxID0gLTEsIGwxID0gYXJyMS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICB3aGlsZSAoaTEgPCBsMSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gYXJyMVtpMSArPSAxXTtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJ1xcbiAgJyArIHZhbHVlLnNwbGl0KCdcXG4nKS5qb2luKCdcXG4gICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluY29tcGxldGVGYWxsYmFja01lc3NhZ2U6ICdheGUgY291bGRuXFwndCB0ZWxsIHRoZSByZWFzb24uIFRpbWUgdG8gYnJlYWsgb3V0IHRoZSBlbGVtZW50IGluc3BlY3RvciEnXG4gICAgfSxcbiAgICBydWxlczogWyB7XG4gICAgICBpZDogJ2FjY2Vzc2tleXMnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ1thY2Nlc3NrZXldJyxcbiAgICAgIGV4Y2x1ZGVIaWRkZW46IGZhbHNlLFxuICAgICAgdGFnczogWyAnY2F0LmtleWJvYXJkJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFsgJ2FjY2Vzc2tleXMnIF1cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyZWEtYWx0JyxcbiAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgIHNlbGVjdG9yOiAnbWFwIGFyZWFbaHJlZl0nLFxuICAgICAgZXhjbHVkZUhpZGRlbjogZmFsc2UsXG4gICAgICB0YWdzOiBbICdjYXQudGV4dC1hbHRlcm5hdGl2ZXMnLCAnd2NhZzJhJywgJ3djYWcyNDQnLCAnd2NhZzQxMicsICdzZWN0aW9uNTA4JywgJ3NlY3Rpb241MDguMjIuYScsICdUVHY1JywgJ1RUNi5hJywgJ0VOLTMwMS01NDknLCAnRU4tOS4yLjQuNCcsICdFTi05LjQuMS4yJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnYzQ4N2FlJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICdhbHQnXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbm9uLWVtcHR5LWFsdCdcbiAgICAgIH0sICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLWFsbG93ZWQtYXR0cicsXG4gICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICBtYXRjaGVzOiAnYXJpYS1hbGxvd2VkLWF0dHItbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuYXJpYScsICd3Y2FnMmEnLCAnd2NhZzQxMicsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInIF0sXG4gICAgICBhY3RJZHM6IFsgJzVjMDFlYScgXSxcbiAgICAgIGFsbDogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICB2YWxpZFRyZWVSb3dBdHRyczogWyAnYXJpYS1wb3NpbnNldCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWxldmVsJyBdXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnYXJpYS1hbGxvd2VkLWF0dHInXG4gICAgICB9IF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogWyAnYXJpYS11bnN1cHBvcnRlZC1hdHRyJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLWFsbG93ZWQtcm9sZScsXG4gICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICBleGNsdWRlSGlkZGVuOiBmYWxzZSxcbiAgICAgIHNlbGVjdG9yOiAnW3JvbGVdJyxcbiAgICAgIG1hdGNoZXM6ICdhcmlhLWFsbG93ZWQtcm9sZS1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGFsbG93SW1wbGljaXQ6IHRydWUsXG4gICAgICAgICAgaWdub3JlZFRhZ3M6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnYXJpYS1hbGxvd2VkLXJvbGUnXG4gICAgICB9IF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1icmFpbGxlLWVxdWl2YWxlbnQnLFxuICAgICAgcmV2aWV3T25GYWlsOiB0cnVlLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ1thcmlhLWJyYWlsbGVyb2xlZGVzY3JpcHRpb25dLCBbYXJpYS1icmFpbGxlbGFiZWxdJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ0VOLTMwMS01NDknLCAnRU4tOS40LjEuMicgXSxcbiAgICAgIGFsbDogWyAnYnJhaWxsZS1yb2xlZGVzY3JpcHRpb24tZXF1aXZhbGVudCcsICdicmFpbGxlLWxhYmVsLWVxdWl2YWxlbnQnIF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtY29tbWFuZC1uYW1lJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdbcm9sZT1cImxpbmtcIl0sIFtyb2xlPVwiYnV0dG9uXCJdLCBbcm9sZT1cIm1lbnVpdGVtXCJdJyxcbiAgICAgIG1hdGNoZXM6ICduby1uYW1pbmctbWV0aG9kLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmFyaWEnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnVFR2NScsICdUVDYuYScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICc5N2E0ZTEnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdoYXMtdmlzaWJsZS10ZXh0JywgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5Jywge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYXR0cmlidXRlOiAndGl0bGUnXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbm9uLWVtcHR5LXRpdGxlJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtY29uZGl0aW9uYWwtYXR0cicsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIG1hdGNoZXM6ICdhcmlhLWFsbG93ZWQtYXR0ci1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ0VOLTMwMS01NDknLCAnRU4tOS40LjEuMicgXSxcbiAgICAgIGFjdElkczogWyAnNWMwMWVhJyBdLFxuICAgICAgYWxsOiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGludmFsaWRUYWJsZVJvd0F0dHJzOiBbICdhcmlhLXBvc2luc2V0JywgJ2FyaWEtc2V0c2l6ZScsICdhcmlhLWV4cGFuZGVkJywgJ2FyaWEtbGV2ZWwnIF1cbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdhcmlhLWNvbmRpdGlvbmFsLWF0dHInXG4gICAgICB9IF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtZGVwcmVjYXRlZC1yb2xlJyxcbiAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgIHNlbGVjdG9yOiAnW3JvbGVdJyxcbiAgICAgIG1hdGNoZXM6ICduby1lbXB0eS1yb2xlLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmFyaWEnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnRU4tMzAxLTU0OScsICdFTi05LjQuMS4yJyBdLFxuICAgICAgYWN0SWRzOiBbICc2NzRiMTAnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFsgJ2RlcHJlY2F0ZWRyb2xlJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLWRpYWxvZy1uYW1lJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdbcm9sZT1cImRpYWxvZ1wiXSwgW3JvbGU9XCJhbGVydGRpYWxvZ1wiXScsXG4gICAgICBtYXRjaGVzOiAnbm8tbmFtaW5nLW1ldGhvZC1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLWhpZGRlbi1ib2R5JyxcbiAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgIHNlbGVjdG9yOiAnYm9keScsXG4gICAgICBleGNsdWRlSGlkZGVuOiBmYWxzZSxcbiAgICAgIG1hdGNoZXM6ICdpcy1pbml0aWF0b3ItbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuYXJpYScsICd3Y2FnMmEnLCAnd2NhZzEzMScsICd3Y2FnNDEyJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjMuMScsICdFTi05LjQuMS4yJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnYXJpYS1oaWRkZW4tYm9keScgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLWhpZGRlbi1mb2N1cycsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnW2FyaWEtaGlkZGVuPVwidHJ1ZVwiXScsXG4gICAgICBtYXRjaGVzOiAnYXJpYS1oaWRkZW4tZm9jdXMtbWF0Y2hlcycsXG4gICAgICBleGNsdWRlSGlkZGVuOiBmYWxzZSxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5uYW1lLXJvbGUtdmFsdWUnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnVFR2NScsICdUVDYuYScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInIF0sXG4gICAgICBhY3RJZHM6IFsgJzZjZmE4NCcgXSxcbiAgICAgIGFsbDogWyAnZm9jdXNhYmxlLW1vZGFsLW9wZW4nLCAnZm9jdXNhYmxlLWRpc2FibGVkJywgJ2ZvY3VzYWJsZS1ub3QtdGFiYmFibGUnIF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtaW5wdXQtZmllbGQtbmFtZScsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnW3JvbGU9XCJjb21ib2JveFwiXSwgW3JvbGU9XCJsaXN0Ym94XCJdLCBbcm9sZT1cInNlYXJjaGJveFwiXSwgW3JvbGU9XCJzbGlkZXJcIl0sIFtyb2xlPVwic3BpbmJ1dHRvblwiXSwgW3JvbGU9XCJ0ZXh0Ym94XCJdJyxcbiAgICAgIG1hdGNoZXM6ICduby1uYW1pbmctbWV0aG9kLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmFyaWEnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnVFR2NScsICdUVDUuYycsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICdlMDg2ZTUnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFsgJ25vLWltcGxpY2l0LWV4cGxpY2l0LWxhYmVsJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLW1ldGVyLW5hbWUnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ1tyb2xlPVwibWV0ZXJcIl0nLFxuICAgICAgbWF0Y2hlczogJ25vLW5hbWluZy1tZXRob2QtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuYXJpYScsICd3Y2FnMmEnLCAnd2NhZzExMScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS4xLjEnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLXByb2dyZXNzYmFyLW5hbWUnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ1tyb2xlPVwicHJvZ3Jlc3NiYXJcIl0nLFxuICAgICAgbWF0Y2hlczogJ25vLW5hbWluZy1tZXRob2QtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuYXJpYScsICd3Y2FnMmEnLCAnd2NhZzExMScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS4xLjEnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLXByb2hpYml0ZWQtYXR0cicsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIG1hdGNoZXM6ICdhcmlhLWFsbG93ZWQtYXR0ci1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ0VOLTMwMS01NDknLCAnRU4tOS40LjEuMicgXSxcbiAgICAgIGFjdElkczogWyAnNWMwMWVhJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGVsZW1lbnRzQWxsb3dlZEFyaWFMYWJlbDogWyAnYXBwbGV0JywgJ2lucHV0JyBdXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnYXJpYS1wcm9oaWJpdGVkLWF0dHInXG4gICAgICB9IF1cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtcmVxdWlyZWQtYXR0cicsXG4gICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICBzZWxlY3RvcjogJ1tyb2xlXScsXG4gICAgICB0YWdzOiBbICdjYXQuYXJpYScsICd3Y2FnMmEnLCAnd2NhZzQxMicsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInIF0sXG4gICAgICBhY3RJZHM6IFsgJzRlOGFiNicgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ2FyaWEtcmVxdWlyZWQtYXR0cicgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLXJlcXVpcmVkLWNoaWxkcmVuJyxcbiAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgIHNlbGVjdG9yOiAnW3JvbGVdJyxcbiAgICAgIG1hdGNoZXM6ICdhcmlhLXJlcXVpcmVkLWNoaWxkcmVuLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmFyaWEnLCAnd2NhZzJhJywgJ3djYWcxMzEnLCAnRU4tMzAxLTU0OScsICdFTi05LjEuMy4xJyBdLFxuICAgICAgYWN0SWRzOiBbICdiYzRhNzUnLCAnZmY4OWM5JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICByZXZpZXdFbXB0eTogWyAnZG9jLWJpYmxpb2dyYXBoeScsICdkb2MtZW5kbm90ZXMnLCAnZ3JpZCcsICdsaXN0JywgJ2xpc3Rib3gnLCAnbWVudScsICdtZW51YmFyJywgJ3RhYmxlJywgJ3RhYmxpc3QnLCAndHJlZScsICd0cmVlZ3JpZCcsICdyb3dncm91cCcgXVxuICAgICAgICB9LFxuICAgICAgICBpZDogJ2FyaWEtcmVxdWlyZWQtY2hpbGRyZW4nXG4gICAgICB9IF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1yZXF1aXJlZC1wYXJlbnQnLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICdbcm9sZV0nLFxuICAgICAgbWF0Y2hlczogJ2FyaWEtcmVxdWlyZWQtcGFyZW50LW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmFyaWEnLCAnd2NhZzJhJywgJ3djYWcxMzEnLCAnRU4tMzAxLTU0OScsICdFTi05LjEuMy4xJyBdLFxuICAgICAgYWN0SWRzOiBbICdmZjg5YzknIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG93bkdyb3VwUm9sZXM6IFsgJ2xpc3RpdGVtJywgJ3RyZWVpdGVtJyBdXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnYXJpYS1yZXF1aXJlZC1wYXJlbnQnXG4gICAgICB9IF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1yb2xlZGVzY3JpcHRpb24nLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ1thcmlhLXJvbGVkZXNjcmlwdGlvbl0nLFxuICAgICAgdGFnczogWyAnY2F0LmFyaWEnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnRU4tMzAxLTU0OScsICdFTi05LjQuMS4yJywgJ2RlcHJlY2F0ZWQnIF0sXG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgc3VwcG9ydGVkUm9sZXM6IFsgJ2J1dHRvbicsICdpbWcnLCAnY2hlY2tib3gnLCAncmFkaW8nLCAnY29tYm9ib3gnLCAnbWVudWl0ZW1jaGVja2JveCcsICdtZW51aXRlbXJhZGlvJyBdXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnYXJpYS1yb2xlZGVzY3JpcHRpb24nXG4gICAgICB9IF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1yb2xlcycsXG4gICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICBzZWxlY3RvcjogJ1tyb2xlXScsXG4gICAgICBtYXRjaGVzOiAnbm8tZW1wdHktcm9sZS1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ0VOLTMwMS01NDknLCAnRU4tOS40LjEuMicgXSxcbiAgICAgIGFjdElkczogWyAnNjc0YjEwJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbICdpbnZhbGlkcm9sZScsICdhYnN0cmFjdHJvbGUnLCAndW5zdXBwb3J0ZWRyb2xlJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLXRleHQnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ1tyb2xlPXRleHRdJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICduby1mb2N1c2FibGUtY29udGVudCcgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLXRvZ2dsZS1maWVsZC1uYW1lJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdbcm9sZT1cImNoZWNrYm94XCJdLCBbcm9sZT1cIm1lbnVpdGVtY2hlY2tib3hcIl0sIFtyb2xlPVwibWVudWl0ZW1yYWRpb1wiXSwgW3JvbGU9XCJyYWRpb1wiXSwgW3JvbGU9XCJzd2l0Y2hcIl0sIFtyb2xlPVwib3B0aW9uXCJdJyxcbiAgICAgIG1hdGNoZXM6ICduby1uYW1pbmctbWV0aG9kLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmFyaWEnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnVFR2NScsICdUVDUuYycsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICdlMDg2ZTUnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdoYXMtdmlzaWJsZS10ZXh0JywgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5Jywge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYXR0cmlidXRlOiAndGl0bGUnXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbm9uLWVtcHR5LXRpdGxlJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogWyAnbm8taW1wbGljaXQtZXhwbGljaXQtbGFiZWwnIF1cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtdG9vbHRpcC1uYW1lJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdbcm9sZT1cInRvb2x0aXBcIl0nLFxuICAgICAgbWF0Y2hlczogJ25vLW5hbWluZy1tZXRob2QtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuYXJpYScsICd3Y2FnMmEnLCAnd2NhZzQxMicsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdoYXMtdmlzaWJsZS10ZXh0JywgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5Jywge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYXR0cmlidXRlOiAndGl0bGUnXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbm9uLWVtcHR5LXRpdGxlJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtdHJlZWl0ZW0tbmFtZScsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnW3JvbGU9XCJ0cmVlaXRlbVwiXScsXG4gICAgICBtYXRjaGVzOiAnbm8tbmFtaW5nLW1ldGhvZC1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdoYXMtdmlzaWJsZS10ZXh0JywgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5Jywge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYXR0cmlidXRlOiAndGl0bGUnXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbm9uLWVtcHR5LXRpdGxlJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtdmFsaWQtYXR0ci12YWx1ZScsXG4gICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICBtYXRjaGVzOiAnYXJpYS1oYXMtYXR0ci1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ0VOLTMwMS01NDknLCAnRU4tOS40LjEuMicgXSxcbiAgICAgIGFjdElkczogWyAnNmE3MjgxJyBdLFxuICAgICAgYWxsOiBbIHtcbiAgICAgICAgb3B0aW9uczogW10sXG4gICAgICAgIGlkOiAnYXJpYS12YWxpZC1hdHRyLXZhbHVlJ1xuICAgICAgfSwgJ2FyaWEtZXJyb3JtZXNzYWdlJywgJ2FyaWEtbGV2ZWwnIF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtdmFsaWQtYXR0cicsXG4gICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICBtYXRjaGVzOiAnYXJpYS1oYXMtYXR0ci1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5hcmlhJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ0VOLTMwMS01NDknLCAnRU4tOS40LjEuMicgXSxcbiAgICAgIGFjdElkczogWyAnNWY5OWE3JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyB7XG4gICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICBpZDogJ2FyaWEtdmFsaWQtYXR0cidcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhdWRpby1jYXB0aW9uJyxcbiAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgIHNlbGVjdG9yOiAnYXVkaW8nLFxuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBleGNsdWRlSGlkZGVuOiBmYWxzZSxcbiAgICAgIHRhZ3M6IFsgJ2NhdC50aW1lLWFuZC1tZWRpYScsICd3Y2FnMmEnLCAnd2NhZzEyMScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS4yLjEnLCAnc2VjdGlvbjUwOCcsICdzZWN0aW9uNTA4LjIyLmEnLCAnZGVwcmVjYXRlZCcgXSxcbiAgICAgIGFjdElkczogWyAnMmViMTc2JywgJ2FmYjQyMycgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogWyAnY2FwdGlvbicgXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXV0b2NvbXBsZXRlLXZhbGlkJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgbWF0Y2hlczogJ2F1dG9jb21wbGV0ZS1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5mb3JtcycsICd3Y2FnMjFhYScsICd3Y2FnMTM1JywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjMuNScsICdBQ1QnIF0sXG4gICAgICBhY3RJZHM6IFsgJzczZjJjMicgXSxcbiAgICAgIGFsbDogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBzdGF0ZVRlcm1zOiBbICdub25lJywgJ2ZhbHNlJywgJ3RydWUnLCAnZGlzYWJsZWQnLCAnZW5hYmxlZCcsICd1bmRlZmluZWQnLCAnbnVsbCcgXSxcbiAgICAgICAgICBpZ25vcmVkVmFsdWVzOiBbICd0ZXh0JywgJ3Byb25vdW5zJywgJ2dlbmRlcicsICdtZXNzYWdlJywgJ2NvbnRlbnQnIF1cbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdhdXRvY29tcGxldGUtdmFsaWQnXG4gICAgICB9IF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2F2b2lkLWlubGluZS1zcGFjaW5nJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdbc3R5bGVdJyxcbiAgICAgIG1hdGNoZXM6ICdpcy12aXNpYmxlLW9uLXNjcmVlbi1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zdHJ1Y3R1cmUnLCAnd2NhZzIxYWEnLCAnd2NhZzE0MTInLCAnRU4tMzAxLTU0OScsICdFTi05LjEuNC4xMicsICdBQ1QnIF0sXG4gICAgICBhY3RJZHM6IFsgJzI0YWZjMicsICc5ZTQ1ZWMnLCAnNzhmZDMyJyBdLFxuICAgICAgYWxsOiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGNzc1Byb3BlcnR5OiAnbGV0dGVyLXNwYWNpbmcnLFxuICAgICAgICAgIG1pblZhbHVlOiAuMTJcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdpbXBvcnRhbnQtbGV0dGVyLXNwYWNpbmcnXG4gICAgICB9LCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBjc3NQcm9wZXJ0eTogJ3dvcmQtc3BhY2luZycsXG4gICAgICAgICAgbWluVmFsdWU6IC4xNlxuICAgICAgICB9LFxuICAgICAgICBpZDogJ2ltcG9ydGFudC13b3JkLXNwYWNpbmcnXG4gICAgICB9LCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBtdWx0aUxpbmVPbmx5OiB0cnVlLFxuICAgICAgICAgIGNzc1Byb3BlcnR5OiAnbGluZS1oZWlnaHQnLFxuICAgICAgICAgIG1pblZhbHVlOiAxLjUsXG4gICAgICAgICAgbm9ybWFsVmFsdWU6IDFcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdpbXBvcnRhbnQtbGluZS1oZWlnaHQnXG4gICAgICB9IF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2JsaW5rJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdibGluaycsXG4gICAgICBleGNsdWRlSGlkZGVuOiBmYWxzZSxcbiAgICAgIHRhZ3M6IFsgJ2NhdC50aW1lLWFuZC1tZWRpYScsICd3Y2FnMmEnLCAnd2NhZzIyMicsICdzZWN0aW9uNTA4JywgJ3NlY3Rpb241MDguMjIuaicsICdUVHY1JywgJ1RUMi5iJywgJ0VOLTMwMS01NDknLCAnRU4tOS4yLjIuMicgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogWyAnaXMtb24tc2NyZWVuJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdidXR0b24tbmFtZScsXG4gICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICBzZWxlY3RvcjogJ2J1dHRvbicsXG4gICAgICBtYXRjaGVzOiAnbm8tZXhwbGljaXQtbmFtZS1yZXF1aXJlZC1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5uYW1lLXJvbGUtdmFsdWUnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnc2VjdGlvbjUwOCcsICdzZWN0aW9uNTA4LjIyLmEnLCAnVFR2NScsICdUVDYuYScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICc5N2E0ZTEnLCAnbTZiMXEzJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnYnV0dG9uLWhhcy12aXNpYmxlLXRleHQnLCAnYXJpYS1sYWJlbCcsICdhcmlhLWxhYmVsbGVkYnknLCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICd0aXRsZSdcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdub24tZW1wdHktdGl0bGUnXG4gICAgICB9LCAnaW1wbGljaXQtbGFiZWwnLCAnZXhwbGljaXQtbGFiZWwnLCAncHJlc2VudGF0aW9uYWwtcm9sZScgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdieXBhc3MnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgICAgcGFnZUxldmVsOiB0cnVlLFxuICAgICAgbWF0Y2hlczogJ2J5cGFzcy1tYXRjaGVzJyxcbiAgICAgIHJldmlld09uRmFpbDogdHJ1ZSxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5rZXlib2FyZCcsICd3Y2FnMmEnLCAnd2NhZzI0MScsICdzZWN0aW9uNTA4JywgJ3NlY3Rpb241MDguMjIubycsICdUVHY1JywgJ1RUOS5hJywgJ0VOLTMwMS01NDknLCAnRU4tOS4yLjQuMScgXSxcbiAgICAgIGFjdElkczogWyAnY2Y3N2YyJywgJzA0N2ZlMCcsICdiNDBmZDEnLCAnM2UxMmUxJywgJ3llNWQ2ZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ2ludGVybmFsLWxpbmstcHJlc2VudCcsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHNlbGVjdG9yOiAnOmlzKGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYpOm5vdChbcm9sZV0pLCBbcm9sZT1oZWFkaW5nXSdcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdoZWFkZXItcHJlc2VudCdcbiAgICAgIH0sIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHNlbGVjdG9yOiAnbWFpbiwgW3JvbGU9bWFpbl0nXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbGFuZG1hcmsnXG4gICAgICB9IF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnY29sb3ItY29udHJhc3QtZW5oYW5jZWQnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBtYXRjaGVzOiAnY29sb3ItY29udHJhc3QtbWF0Y2hlcycsXG4gICAgICBleGNsdWRlSGlkZGVuOiBmYWxzZSxcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgdGFnczogWyAnY2F0LmNvbG9yJywgJ3djYWcyYWFhJywgJ3djYWcxNDYnLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICcwOW81Y2cnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGlnbm9yZVVuaWNvZGU6IHRydWUsXG4gICAgICAgICAgaWdub3JlTGVuZ3RoOiBmYWxzZSxcbiAgICAgICAgICBpZ25vcmVQc2V1ZG86IGZhbHNlLFxuICAgICAgICAgIGJvbGRWYWx1ZTogNzAwLFxuICAgICAgICAgIGJvbGRUZXh0UHQ6IDE0LFxuICAgICAgICAgIGxhcmdlVGV4dFB0OiAxOCxcbiAgICAgICAgICBjb250cmFzdFJhdGlvOiB7XG4gICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgZXhwZWN0ZWQ6IDcsXG4gICAgICAgICAgICAgIG1pblRocmVzaG9sZDogNC41XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFyZ2U6IHtcbiAgICAgICAgICAgICAgZXhwZWN0ZWQ6IDQuNSxcbiAgICAgICAgICAgICAgbWluVGhyZXNob2xkOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwc2V1ZG9TaXplVGhyZXNob2xkOiAuMjUsXG4gICAgICAgICAgc2hhZG93T3V0bGluZUVtTWF4OiAuMSxcbiAgICAgICAgICB0ZXh0U3Ryb2tlRW1NaW46IC4wM1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ2NvbG9yLWNvbnRyYXN0LWVuaGFuY2VkJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2NvbG9yLWNvbnRyYXN0JyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgbWF0Y2hlczogJ2NvbG9yLWNvbnRyYXN0LW1hdGNoZXMnLFxuICAgICAgZXhjbHVkZUhpZGRlbjogZmFsc2UsXG4gICAgICB0YWdzOiBbICdjYXQuY29sb3InLCAnd2NhZzJhYScsICd3Y2FnMTQzJywgJ1RUdjUnLCAnVFQxMy5jJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjQuMycsICdBQ1QnIF0sXG4gICAgICBhY3RJZHM6IFsgJ2FmdzRmNycsICcwOW81Y2cnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGlnbm9yZVVuaWNvZGU6IHRydWUsXG4gICAgICAgICAgaWdub3JlTGVuZ3RoOiBmYWxzZSxcbiAgICAgICAgICBpZ25vcmVQc2V1ZG86IGZhbHNlLFxuICAgICAgICAgIGJvbGRWYWx1ZTogNzAwLFxuICAgICAgICAgIGJvbGRUZXh0UHQ6IDE0LFxuICAgICAgICAgIGxhcmdlVGV4dFB0OiAxOCxcbiAgICAgICAgICBjb250cmFzdFJhdGlvOiB7XG4gICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgZXhwZWN0ZWQ6IDQuNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhcmdlOiB7XG4gICAgICAgICAgICAgIGV4cGVjdGVkOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwc2V1ZG9TaXplVGhyZXNob2xkOiAuMjUsXG4gICAgICAgICAgc2hhZG93T3V0bGluZUVtTWF4OiAuMixcbiAgICAgICAgICB0ZXh0U3Ryb2tlRW1NaW46IC4wM1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ2NvbG9yLWNvbnRyYXN0J1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2Nzcy1vcmllbnRhdGlvbi1sb2NrJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdodG1sJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zdHJ1Y3R1cmUnLCAnd2NhZzEzNCcsICd3Y2FnMjFhYScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS4zLjQnLCAnZXhwZXJpbWVudGFsJyBdLFxuICAgICAgYWN0SWRzOiBbICdiMzNlZmYnIF0sXG4gICAgICBhbGw6IFsge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgZGVncmVlVGhyZXNob2xkOiAyXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnY3NzLW9yaWVudGF0aW9uLWxvY2snXG4gICAgICB9IF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogW10sXG4gICAgICBwcmVsb2FkOiB0cnVlXG4gICAgfSwge1xuICAgICAgaWQ6ICdkZWZpbml0aW9uLWxpc3QnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ2RsJyxcbiAgICAgIG1hdGNoZXM6ICduby1yb2xlLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LnN0cnVjdHVyZScsICd3Y2FnMmEnLCAnd2NhZzEzMScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS4zLjEnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFsgJ3N0cnVjdHVyZWQtZGxpdGVtcycsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHZhbGlkUm9sZXM6IFsgJ2RlZmluaXRpb24nLCAndGVybScsICdsaXN0aXRlbScgXSxcbiAgICAgICAgICB2YWxpZE5vZGVOYW1lczogWyAnZHQnLCAnZGQnIF0sXG4gICAgICAgICAgZGl2R3JvdXBzOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnb25seS1kbGl0ZW1zJ1xuICAgICAgfSBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdkbGl0ZW0nLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ2RkLCBkdCcsXG4gICAgICBtYXRjaGVzOiAnbm8tcm9sZS1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zdHJ1Y3R1cmUnLCAnd2NhZzJhJywgJ3djYWcxMzEnLCAnRU4tMzAxLTU0OScsICdFTi05LjEuMy4xJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnZGxpdGVtJyBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2RvY3VtZW50LXRpdGxlJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdodG1sJyxcbiAgICAgIG1hdGNoZXM6ICdpcy1pbml0aWF0b3ItbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQudGV4dC1hbHRlcm5hdGl2ZXMnLCAnd2NhZzJhJywgJ3djYWcyNDInLCAnVFR2NScsICdUVDEyLmEnLCAnRU4tMzAxLTU0OScsICdFTi05LjIuNC4yJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnMjc3OWE1JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnZG9jLWhhcy10aXRsZScgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdkdXBsaWNhdGUtaWQtYWN0aXZlJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdbaWRdJyxcbiAgICAgIG1hdGNoZXM6ICdkdXBsaWNhdGUtaWQtYWN0aXZlLW1hdGNoZXMnLFxuICAgICAgZXhjbHVkZUhpZGRlbjogZmFsc2UsXG4gICAgICB0YWdzOiBbICdjYXQucGFyc2luZycsICd3Y2FnMmEtb2Jzb2xldGUnLCAnd2NhZzQxMScsICdkZXByZWNhdGVkJyBdLFxuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBhY3RJZHM6IFsgJzNlYTBjOCcgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ2R1cGxpY2F0ZS1pZC1hY3RpdmUnIF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnZHVwbGljYXRlLWlkLWFyaWEnLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICdbaWRdJyxcbiAgICAgIG1hdGNoZXM6ICdkdXBsaWNhdGUtaWQtYXJpYS1tYXRjaGVzJyxcbiAgICAgIGV4Y2x1ZGVIaWRkZW46IGZhbHNlLFxuICAgICAgdGFnczogWyAnY2F0LnBhcnNpbmcnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnRU4tMzAxLTU0OScsICdFTi05LjQuMS4yJyBdLFxuICAgICAgcmV2aWV3T25GYWlsOiB0cnVlLFxuICAgICAgYWN0SWRzOiBbICczZWEwYzgnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdkdXBsaWNhdGUtaWQtYXJpYScgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdkdXBsaWNhdGUtaWQnLFxuICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgc2VsZWN0b3I6ICdbaWRdJyxcbiAgICAgIG1hdGNoZXM6ICdkdXBsaWNhdGUtaWQtbWlzYy1tYXRjaGVzJyxcbiAgICAgIGV4Y2x1ZGVIaWRkZW46IGZhbHNlLFxuICAgICAgdGFnczogWyAnY2F0LnBhcnNpbmcnLCAnd2NhZzJhLW9ic29sZXRlJywgJ3djYWc0MTEnLCAnZGVwcmVjYXRlZCcgXSxcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgYWN0SWRzOiBbICczZWEwYzgnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdkdXBsaWNhdGUtaWQnIF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnZW1wdHktaGVhZGluZycsXG4gICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICBzZWxlY3RvcjogJ2gxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIFtyb2xlPVwiaGVhZGluZ1wiXScsXG4gICAgICBtYXRjaGVzOiAnaGVhZGluZy1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5uYW1lLXJvbGUtdmFsdWUnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFjdElkczogWyAnZmZkMGU5JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnaGFzLXZpc2libGUtdGV4dCcsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdlbXB0eS10YWJsZS1oZWFkZXInLFxuICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgc2VsZWN0b3I6ICd0aDpub3QoW3JvbGVdKSwgW3JvbGU9XCJyb3doZWFkZXJcIl0sIFtyb2xlPVwiY29sdW1uaGVhZGVyXCJdJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5uYW1lLXJvbGUtdmFsdWUnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ2hhcy12aXNpYmxlLXRleHQnIF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnZm9jdXMtb3JkZXItc2VtYW50aWNzJyxcbiAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgIHNlbGVjdG9yOiAnZGl2LCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBbcm9sZT1oZWFkaW5nXSwgcCwgc3BhbicsXG4gICAgICBtYXRjaGVzOiAnaW5zZXJ0ZWQtaW50by1mb2N1cy1vcmRlci1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5rZXlib2FyZCcsICdiZXN0LXByYWN0aWNlJywgJ2V4cGVyaW1lbnRhbCcgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsge1xuICAgICAgICBvcHRpb25zOiBbXSxcbiAgICAgICAgaWQ6ICdoYXMtd2lkZ2V0LXJvbGUnXG4gICAgICB9LCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICByb2xlczogWyAndG9vbHRpcCcgXVxuICAgICAgICB9LFxuICAgICAgICBpZDogJ3ZhbGlkLXNjcm9sbGFibGUtc2VtYW50aWNzJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2Zvcm0tZmllbGQtbXVsdGlwbGUtbGFiZWxzJyxcbiAgICAgIGltcGFjdDogJ21vZGVyYXRlJyxcbiAgICAgIHNlbGVjdG9yOiAnaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEnLFxuICAgICAgbWF0Y2hlczogJ2xhYmVsLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmZvcm1zJywgJ3djYWcyYScsICd3Y2FnMzMyJywgJ1RUdjUnLCAnVFQ1LmMnLCAnRU4tMzAxLTU0OScsICdFTi05LjMuMy4yJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbICdtdWx0aXBsZS1sYWJlbCcgXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnZnJhbWUtZm9jdXNhYmxlLWNvbnRlbnQnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgICAgbWF0Y2hlczogJ2ZyYW1lLWZvY3VzYWJsZS1jb250ZW50LW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmtleWJvYXJkJywgJ3djYWcyYScsICd3Y2FnMjExJywgJ1RUdjUnLCAnVFQ0LmEnLCAnRU4tMzAxLTU0OScsICdFTi05LjIuMS4xJyBdLFxuICAgICAgYWN0SWRzOiBbICdha243Ym4nIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdmcmFtZS1mb2N1c2FibGUtY29udGVudCcgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdmcmFtZS10ZXN0ZWQnLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICdodG1sLCBmcmFtZSwgaWZyYW1lJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zdHJ1Y3R1cmUnLCAnYmVzdC1wcmFjdGljZScsICdyZXZpZXctaXRlbScgXSxcbiAgICAgIGFsbDogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBpc1Zpb2xhdGlvbjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdmcmFtZS10ZXN0ZWQnXG4gICAgICB9IF0sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2ZyYW1lLXRpdGxlLXVuaXF1ZScsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnZnJhbWVbdGl0bGVdLCBpZnJhbWVbdGl0bGVdJyxcbiAgICAgIG1hdGNoZXM6ICdmcmFtZS10aXRsZS1oYXMtdGV4dC1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC50ZXh0LWFsdGVybmF0aXZlcycsICd3Y2FnMmEnLCAnd2NhZzQxMicsICdUVHY1JywgJ1RUMTIuZCcsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInIF0sXG4gICAgICBhY3RJZHM6IFsgJzRiMWM2YycgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogWyAndW5pcXVlLWZyYW1lLXRpdGxlJyBdLFxuICAgICAgcmV2aWV3T25GYWlsOiB0cnVlXG4gICAgfSwge1xuICAgICAgaWQ6ICdmcmFtZS10aXRsZScsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnZnJhbWUsIGlmcmFtZScsXG4gICAgICBtYXRjaGVzOiAnbm8tbmVnYXRpdmUtdGFiaW5kZXgtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQudGV4dC1hbHRlcm5hdGl2ZXMnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnc2VjdGlvbjUwOCcsICdzZWN0aW9uNTA4LjIyLmknLCAnVFR2NScsICdUVDEyLmQnLCAnRU4tMzAxLTU0OScsICdFTi05LjQuMS4yJyBdLFxuICAgICAgYWN0SWRzOiBbICdjYWU3NjAnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0sICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsICdwcmVzZW50YXRpb25hbC1yb2xlJyBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2hlYWRpbmctb3JkZXInLFxuICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgc2VsZWN0b3I6ICdoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBbcm9sZT1oZWFkaW5nXScsXG4gICAgICBtYXRjaGVzOiAnaGVhZGluZy1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zZW1hbnRpY3MnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ2hlYWRpbmctb3JkZXInIF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnaGlkZGVuLWNvbnRlbnQnLFxuICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgc2VsZWN0b3I6ICcqJyxcbiAgICAgIGV4Y2x1ZGVIaWRkZW46IGZhbHNlLFxuICAgICAgdGFnczogWyAnY2F0LnN0cnVjdHVyZScsICdiZXN0LXByYWN0aWNlJywgJ2V4cGVyaW1lbnRhbCcsICdyZXZpZXctaXRlbScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ2hpZGRlbi1jb250ZW50JyBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2h0bWwtaGFzLWxhbmcnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgICAgbWF0Y2hlczogJ2lzLWluaXRpYXRvci1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5sYW5ndWFnZScsICd3Y2FnMmEnLCAnd2NhZzMxMScsICdUVHY1JywgJ1RUMTEuYScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMy4xLjEnLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICdiNWMzZjgnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IFsgJ2xhbmcnLCAneG1sOmxhbmcnIF1cbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdoYXMtbGFuZydcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdodG1sLWxhbmctdmFsaWQnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ2h0bWxbbGFuZ106bm90KFtsYW5nPVwiXCJdKSwgaHRtbFt4bWxcXFxcOmxhbmddOm5vdChbeG1sXFxcXDpsYW5nPVwiXCJdKScsXG4gICAgICB0YWdzOiBbICdjYXQubGFuZ3VhZ2UnLCAnd2NhZzJhJywgJ3djYWczMTEnLCAnVFR2NScsICdUVDExLmEnLCAnRU4tMzAxLTU0OScsICdFTi05LjMuMS4xJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnYmYwNTFhJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IFsgJ2xhbmcnLCAneG1sOmxhbmcnIF1cbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICd2YWxpZC1sYW5nJ1xuICAgICAgfSBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdodG1sLXhtbC1sYW5nLW1pc21hdGNoJyxcbiAgICAgIGltcGFjdDogJ21vZGVyYXRlJyxcbiAgICAgIHNlbGVjdG9yOiAnaHRtbFtsYW5nXVt4bWxcXFxcOmxhbmddJyxcbiAgICAgIG1hdGNoZXM6ICd4bWwtbGFuZy1taXNtYXRjaC1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5sYW5ndWFnZScsICd3Y2FnMmEnLCAnd2NhZzMxMScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMy4xLjEnLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICc1YjdhZTAnIF0sXG4gICAgICBhbGw6IFsgJ3htbC1sYW5nLW1pc21hdGNoJyBdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdpZGVudGljYWwtbGlua3Mtc2FtZS1wdXJwb3NlJyxcbiAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgIHNlbGVjdG9yOiAnYVtocmVmXSwgYXJlYVtocmVmXSwgW3JvbGU9XCJsaW5rXCJdJyxcbiAgICAgIGV4Y2x1ZGVIaWRkZW46IGZhbHNlLFxuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBtYXRjaGVzOiAnaWRlbnRpY2FsLWxpbmtzLXNhbWUtcHVycG9zZS1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zZW1hbnRpY3MnLCAnd2NhZzJhYWEnLCAnd2NhZzI0OScgXSxcbiAgICAgIGFjdElkczogWyAnYjIwZTY2JyBdLFxuICAgICAgYWxsOiBbICdpZGVudGljYWwtbGlua3Mtc2FtZS1wdXJwb3NlJyBdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdpbWFnZS1hbHQnLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICdpbWcnLFxuICAgICAgbWF0Y2hlczogJ25vLWV4cGxpY2l0LW5hbWUtcmVxdWlyZWQtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQudGV4dC1hbHRlcm5hdGl2ZXMnLCAnd2NhZzJhJywgJ3djYWcxMTEnLCAnc2VjdGlvbjUwOCcsICdzZWN0aW9uNTA4LjIyLmEnLCAnVFR2NScsICdUVDcuYScsICdUVDcuYicsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS4xLjEnLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICcyM2EyYTgnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdoYXMtYWx0JywgJ2FyaWEtbGFiZWwnLCAnYXJpYS1sYWJlbGxlZGJ5Jywge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYXR0cmlidXRlOiAndGl0bGUnXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbm9uLWVtcHR5LXRpdGxlJ1xuICAgICAgfSwgJ3ByZXNlbnRhdGlvbmFsLXJvbGUnIF0sXG4gICAgICBub25lOiBbICdhbHQtc3BhY2UtdmFsdWUnIF1cbiAgICB9LCB7XG4gICAgICBpZDogJ2ltYWdlLXJlZHVuZGFudC1hbHQnLFxuICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgc2VsZWN0b3I6ICdpbWcnLFxuICAgICAgdGFnczogWyAnY2F0LnRleHQtYWx0ZXJuYXRpdmVzJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFsge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgcGFyZW50U2VsZWN0b3I6ICdidXR0b24sIFtyb2xlPWJ1dHRvbl0sIGFbaHJlZl0sIHAsIGxpLCB0ZCwgdGgnXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnZHVwbGljYXRlLWltZy1sYWJlbCdcbiAgICAgIH0gXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnaW5wdXQtYnV0dG9uLW5hbWUnLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICdpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLCBpbnB1dFt0eXBlPVwic3VibWl0XCJdLCBpbnB1dFt0eXBlPVwicmVzZXRcIl0nLFxuICAgICAgbWF0Y2hlczogJ25vLWV4cGxpY2l0LW5hbWUtcmVxdWlyZWQtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQubmFtZS1yb2xlLXZhbHVlJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5hJywgJ1RUdjUnLCAnVFQ1LmMnLCAnRU4tMzAxLTU0OScsICdFTi05LjQuMS4yJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnOTdhNGUxJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnbm9uLWVtcHR5LWlmLXByZXNlbnQnLCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICd2YWx1ZSdcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdub24tZW1wdHktdmFsdWUnXG4gICAgICB9LCAnYXJpYS1sYWJlbCcsICdhcmlhLWxhYmVsbGVkYnknLCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICd0aXRsZSdcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdub24tZW1wdHktdGl0bGUnXG4gICAgICB9LCAnaW1wbGljaXQtbGFiZWwnLCAnZXhwbGljaXQtbGFiZWwnLCAncHJlc2VudGF0aW9uYWwtcm9sZScgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdpbnB1dC1pbWFnZS1hbHQnLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICdpbnB1dFt0eXBlPVwiaW1hZ2VcIl0nLFxuICAgICAgbWF0Y2hlczogJ25vLWV4cGxpY2l0LW5hbWUtcmVxdWlyZWQtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQudGV4dC1hbHRlcm5hdGl2ZXMnLCAnd2NhZzJhJywgJ3djYWcxMTEnLCAnd2NhZzQxMicsICdzZWN0aW9uNTA4JywgJ3NlY3Rpb241MDguMjIuYScsICdUVHY1JywgJ1RUNy5hJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjEuMScsICdFTi05LjQuMS4yJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnNTk3OTZmJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICdhbHQnXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbm9uLWVtcHR5LWFsdCdcbiAgICAgIH0sICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0sICdpbXBsaWNpdC1sYWJlbCcsICdleHBsaWNpdC1sYWJlbCcgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdsYWJlbC1jb250ZW50LW5hbWUtbWlzbWF0Y2gnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBtYXRjaGVzOiAnbGFiZWwtY29udGVudC1uYW1lLW1pc21hdGNoLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LnNlbWFudGljcycsICd3Y2FnMjFhJywgJ3djYWcyNTMnLCAnRU4tMzAxLTU0OScsICdFTi05LjIuNS4zJywgJ2V4cGVyaW1lbnRhbCcgXSxcbiAgICAgIGFjdElkczogWyAnMmVlOGI4JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBwaXhlbFRocmVzaG9sZDogLjEsXG4gICAgICAgICAgb2NjdXJyZW5jZVRocmVzaG9sZDogM1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ2xhYmVsLWNvbnRlbnQtbmFtZS1taXNtYXRjaCdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdsYWJlbC10aXRsZS1vbmx5JyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYScsXG4gICAgICBtYXRjaGVzOiAnbGFiZWwtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuZm9ybXMnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogWyAndGl0bGUtb25seScgXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbGFiZWwnLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICdpbnB1dCwgdGV4dGFyZWEnLFxuICAgICAgbWF0Y2hlczogJ2xhYmVsLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmZvcm1zJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5uJywgJ1RUdjUnLCAnVFQ1LmMnLCAnRU4tMzAxLTU0OScsICdFTi05LjQuMS4yJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnZTA4NmU1JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnaW1wbGljaXQtbGFiZWwnLCAnZXhwbGljaXQtbGFiZWwnLCAnYXJpYS1sYWJlbCcsICdhcmlhLWxhYmVsbGVkYnknLCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICd0aXRsZSdcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdub24tZW1wdHktdGl0bGUnXG4gICAgICB9LCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICdwbGFjZWhvbGRlcidcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdub24tZW1wdHktcGxhY2Vob2xkZXInXG4gICAgICB9LCAncHJlc2VudGF0aW9uYWwtcm9sZScgXSxcbiAgICAgIG5vbmU6IFsgJ2hpZGRlbi1leHBsaWNpdC1sYWJlbCcgXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbGFuZG1hcmstYmFubmVyLWlzLXRvcC1sZXZlbCcsXG4gICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICBzZWxlY3RvcjogJ2hlYWRlcjpub3QoW3JvbGVdKSwgW3JvbGU9YmFubmVyXScsXG4gICAgICBtYXRjaGVzOiAnbGFuZG1hcmstaGFzLWJvZHktY29udGV4dC1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zZW1hbnRpY3MnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ2xhbmRtYXJrLWlzLXRvcC1sZXZlbCcgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdsYW5kbWFyay1jb21wbGVtZW50YXJ5LWlzLXRvcC1sZXZlbCcsXG4gICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICBzZWxlY3RvcjogJ2FzaWRlOm5vdChbcm9sZV0pLCBbcm9sZT1jb21wbGVtZW50YXJ5XScsXG4gICAgICB0YWdzOiBbICdjYXQuc2VtYW50aWNzJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdsYW5kbWFyay1pcy10b3AtbGV2ZWwnIF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbGFuZG1hcmstY29udGVudGluZm8taXMtdG9wLWxldmVsJyxcbiAgICAgIGltcGFjdDogJ21vZGVyYXRlJyxcbiAgICAgIHNlbGVjdG9yOiAnZm9vdGVyOm5vdChbcm9sZV0pLCBbcm9sZT1jb250ZW50aW5mb10nLFxuICAgICAgbWF0Y2hlczogJ2xhbmRtYXJrLWhhcy1ib2R5LWNvbnRleHQtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuc2VtYW50aWNzJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdsYW5kbWFyay1pcy10b3AtbGV2ZWwnIF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbGFuZG1hcmstbWFpbi1pcy10b3AtbGV2ZWwnLFxuICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgc2VsZWN0b3I6ICdtYWluOm5vdChbcm9sZV0pLCBbcm9sZT1tYWluXScsXG4gICAgICB0YWdzOiBbICdjYXQuc2VtYW50aWNzJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdsYW5kbWFyay1pcy10b3AtbGV2ZWwnIF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbGFuZG1hcmstbm8tZHVwbGljYXRlLWJhbm5lcicsXG4gICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICBzZWxlY3RvcjogJ2hlYWRlcjpub3QoW3JvbGVdKSwgW3JvbGU9YmFubmVyXScsXG4gICAgICB0YWdzOiBbICdjYXQuc2VtYW50aWNzJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHNlbGVjdG9yOiAnaGVhZGVyOm5vdChbcm9sZV0pLCBbcm9sZT1iYW5uZXJdJyxcbiAgICAgICAgICByb2xlOiAnYmFubmVyJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ3BhZ2Utbm8tZHVwbGljYXRlLWJhbm5lcidcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdsYW5kbWFyay1uby1kdXBsaWNhdGUtY29udGVudGluZm8nLFxuICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgc2VsZWN0b3I6ICdmb290ZXI6bm90KFtyb2xlXSksIFtyb2xlPWNvbnRlbnRpbmZvXScsXG4gICAgICB0YWdzOiBbICdjYXQuc2VtYW50aWNzJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHNlbGVjdG9yOiAnZm9vdGVyOm5vdChbcm9sZV0pLCBbcm9sZT1jb250ZW50aW5mb10nLFxuICAgICAgICAgIHJvbGU6ICdjb250ZW50aW5mbydcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdwYWdlLW5vLWR1cGxpY2F0ZS1jb250ZW50aW5mbydcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdsYW5kbWFyay1uby1kdXBsaWNhdGUtbWFpbicsXG4gICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICBzZWxlY3RvcjogJ21haW46bm90KFtyb2xlXSksIFtyb2xlPW1haW5dJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zZW1hbnRpY3MnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgc2VsZWN0b3I6ICdtYWluOm5vdChbcm9sZV0pLCBbcm9sZT1cXCdtYWluXFwnXSdcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdwYWdlLW5vLWR1cGxpY2F0ZS1tYWluJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2xhbmRtYXJrLW9uZS1tYWluJyxcbiAgICAgIGltcGFjdDogJ21vZGVyYXRlJyxcbiAgICAgIHNlbGVjdG9yOiAnaHRtbCcsXG4gICAgICB0YWdzOiBbICdjYXQuc2VtYW50aWNzJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFsge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgc2VsZWN0b3I6ICdtYWluOm5vdChbcm9sZV0pLCBbcm9sZT1cXCdtYWluXFwnXScsXG4gICAgICAgICAgcGFzc0Zvck1vZGFsOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAncGFnZS1oYXMtbWFpbidcbiAgICAgIH0gXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbGFuZG1hcmstdW5pcXVlJyxcbiAgICAgIGltcGFjdDogJ21vZGVyYXRlJyxcbiAgICAgIHNlbGVjdG9yOiAnW3JvbGU9YmFubmVyXSwgW3JvbGU9Y29tcGxlbWVudGFyeV0sIFtyb2xlPWNvbnRlbnRpbmZvXSwgW3JvbGU9bWFpbl0sIFtyb2xlPW5hdmlnYXRpb25dLCBbcm9sZT1yZWdpb25dLCBbcm9sZT1zZWFyY2hdLCBbcm9sZT1mb3JtXSwgZm9ybSwgZm9vdGVyLCBoZWFkZXIsIGFzaWRlLCBtYWluLCBuYXYsIHNlY3Rpb24nLFxuICAgICAgdGFnczogWyAnY2F0LnNlbWFudGljcycsICdiZXN0LXByYWN0aWNlJyBdLFxuICAgICAgbWF0Y2hlczogJ2xhbmRtYXJrLXVuaXF1ZS1tYXRjaGVzJyxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ2xhbmRtYXJrLWlzLXVuaXF1ZScgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdsaW5rLWluLXRleHQtYmxvY2snLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ2FbaHJlZl0sIFtyb2xlPWxpbmtdJyxcbiAgICAgIG1hdGNoZXM6ICdsaW5rLWluLXRleHQtYmxvY2stbWF0Y2hlcycsXG4gICAgICBleGNsdWRlSGlkZGVuOiBmYWxzZSxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5jb2xvcicsICd3Y2FnMmEnLCAnd2NhZzE0MScsICdUVHY1JywgJ1RUMTMuYScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS40LjEnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHJlcXVpcmVkQ29udHJhc3RSYXRpbzogMyxcbiAgICAgICAgICBhbGxvd1NhbWVDb2xvcjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBpZDogJ2xpbmstaW4tdGV4dC1ibG9jaydcbiAgICAgIH0sICdsaW5rLWluLXRleHQtYmxvY2stc3R5bGUnIF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbGluay1uYW1lJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdhW2hyZWZdJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5uYW1lLXJvbGUtdmFsdWUnLCAnd2NhZzJhJywgJ3djYWcyNDQnLCAnd2NhZzQxMicsICdzZWN0aW9uNTA4JywgJ3NlY3Rpb241MDguMjIuYScsICdUVHY1JywgJ1RUNi5hJywgJ0VOLTMwMS01NDknLCAnRU4tOS4yLjQuNCcsICdFTi05LjQuMS4yJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnYzQ4N2FlJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnaGFzLXZpc2libGUtdGV4dCcsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFsgJ2ZvY3VzYWJsZS1uby1uYW1lJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdsaXN0JyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICd1bCwgb2wnLFxuICAgICAgbWF0Y2hlczogJ25vLXJvbGUtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuc3RydWN0dXJlJywgJ3djYWcyYScsICd3Y2FnMTMxJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjMuMScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICB2YWxpZFJvbGVzOiBbICdsaXN0aXRlbScgXSxcbiAgICAgICAgICB2YWxpZE5vZGVOYW1lczogWyAnbGknIF1cbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdvbmx5LWxpc3RpdGVtcydcbiAgICAgIH0gXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbGlzdGl0ZW0nLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ2xpJyxcbiAgICAgIG1hdGNoZXM6ICduby1yb2xlLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LnN0cnVjdHVyZScsICd3Y2FnMmEnLCAnd2NhZzEzMScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS4zLjEnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdsaXN0aXRlbScgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdtYXJxdWVlJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICdtYXJxdWVlJyxcbiAgICAgIGV4Y2x1ZGVIaWRkZW46IGZhbHNlLFxuICAgICAgdGFnczogWyAnY2F0LnBhcnNpbmcnLCAnd2NhZzJhJywgJ3djYWcyMjInLCAnVFR2NScsICdUVDIuYicsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMi4yLjInIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFsgJ2lzLW9uLXNjcmVlbicgXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbWV0YS1yZWZyZXNoLW5vLWV4Y2VwdGlvbnMnLFxuICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgc2VsZWN0b3I6ICdtZXRhW2h0dHAtZXF1aXY9XCJyZWZyZXNoXCJdW2NvbnRlbnRdJyxcbiAgICAgIGV4Y2x1ZGVIaWRkZW46IGZhbHNlLFxuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICB0YWdzOiBbICdjYXQudGltZS1hbmQtbWVkaWEnLCAnd2NhZzJhYWEnLCAnd2NhZzIyNCcsICd3Y2FnMzI1JyBdLFxuICAgICAgYWN0SWRzOiBbICdiaXN6NTgnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG1pbkRlbGF5OiA3MmUzLFxuICAgICAgICAgIG1heERlbGF5OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBpZDogJ21ldGEtcmVmcmVzaC1uby1leGNlcHRpb25zJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ21ldGEtcmVmcmVzaCcsXG4gICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICBzZWxlY3RvcjogJ21ldGFbaHR0cC1lcXVpdj1cInJlZnJlc2hcIl1bY29udGVudF0nLFxuICAgICAgZXhjbHVkZUhpZGRlbjogZmFsc2UsXG4gICAgICB0YWdzOiBbICdjYXQudGltZS1hbmQtbWVkaWEnLCAnd2NhZzJhJywgJ3djYWcyMjEnLCAnVFR2NScsICdUVDguYScsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMi4yLjEnIF0sXG4gICAgICBhY3RJZHM6IFsgJ2JjNjU5YScsICdiaXN6NTgnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG1pbkRlbGF5OiAwLFxuICAgICAgICAgIG1heERlbGF5OiA3MmUzXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbWV0YS1yZWZyZXNoJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ21ldGEtdmlld3BvcnQtbGFyZ2UnLFxuICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgc2VsZWN0b3I6ICdtZXRhW25hbWU9XCJ2aWV3cG9ydFwiXScsXG4gICAgICBtYXRjaGVzOiAnaXMtaW5pdGlhdG9yLW1hdGNoZXMnLFxuICAgICAgZXhjbHVkZUhpZGRlbjogZmFsc2UsXG4gICAgICB0YWdzOiBbICdjYXQuc2Vuc29yeS1hbmQtdmlzdWFsLWN1ZXMnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgc2NhbGVNaW5pbXVtOiA1LFxuICAgICAgICAgIGxvd2VyQm91bmQ6IDJcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdtZXRhLXZpZXdwb3J0LWxhcmdlJ1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ21ldGEtdmlld3BvcnQnLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICdtZXRhW25hbWU9XCJ2aWV3cG9ydFwiXScsXG4gICAgICBtYXRjaGVzOiAnaXMtaW5pdGlhdG9yLW1hdGNoZXMnLFxuICAgICAgZXhjbHVkZUhpZGRlbjogZmFsc2UsXG4gICAgICB0YWdzOiBbICdjYXQuc2Vuc29yeS1hbmQtdmlzdWFsLWN1ZXMnLCAnd2NhZzJhYScsICd3Y2FnMTQ0JywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjQuNCcsICdBQ1QnIF0sXG4gICAgICBhY3RJZHM6IFsgJ2I0ZjBjMycgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgc2NhbGVNaW5pbXVtOiAyXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAnbWV0YS12aWV3cG9ydCdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICduZXN0ZWQtaW50ZXJhY3RpdmUnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBtYXRjaGVzOiAnbmVzdGVkLWludGVyYWN0aXZlLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LmtleWJvYXJkJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ1RUdjUnLCAnVFQ2LmEnLCAnRU4tMzAxLTU0OScsICdFTi05LjQuMS4yJyBdLFxuICAgICAgYWN0SWRzOiBbICczMDduNXonIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICduby1mb2N1c2FibGUtY29udGVudCcgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICduby1hdXRvcGxheS1hdWRpbycsXG4gICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICBleGNsdWRlSGlkZGVuOiBmYWxzZSxcbiAgICAgIHNlbGVjdG9yOiAnYXVkaW9bYXV0b3BsYXldLCB2aWRlb1thdXRvcGxheV0nLFxuICAgICAgbWF0Y2hlczogJ25vLWF1dG9wbGF5LWF1ZGlvLW1hdGNoZXMnLFxuICAgICAgcmV2aWV3T25GYWlsOiB0cnVlLFxuICAgICAgdGFnczogWyAnY2F0LnRpbWUtYW5kLW1lZGlhJywgJ3djYWcyYScsICd3Y2FnMTQyJywgJ1RUdjUnLCAnVFQyLmEnLCAnRU4tMzAxLTU0OScsICdFTi05LjEuNC4yJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnODBmMGJmJyBdLFxuICAgICAgcHJlbG9hZDogdHJ1ZSxcbiAgICAgIGFsbDogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhbGxvd2VkRHVyYXRpb246IDNcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICduby1hdXRvcGxheS1hdWRpbydcbiAgICAgIH0gXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnb2JqZWN0LWFsdCcsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnb2JqZWN0W2RhdGFdJyxcbiAgICAgIG1hdGNoZXM6ICdvYmplY3QtaXMtbG9hZGVkLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LnRleHQtYWx0ZXJuYXRpdmVzJywgJ3djYWcyYScsICd3Y2FnMTExJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5hJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjEuMScgXSxcbiAgICAgIGFjdElkczogWyAnOGZjM2I2JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnYXJpYS1sYWJlbCcsICdhcmlhLWxhYmVsbGVkYnknLCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICd0aXRsZSdcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdub24tZW1wdHktdGl0bGUnXG4gICAgICB9LCAncHJlc2VudGF0aW9uYWwtcm9sZScgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdwLWFzLWhlYWRpbmcnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ3AnLFxuICAgICAgbWF0Y2hlczogJ3AtYXMtaGVhZGluZy1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5zZW1hbnRpY3MnLCAnd2NhZzJhJywgJ3djYWcxMzEnLCAnRU4tMzAxLTU0OScsICdFTi05LjEuMy4xJywgJ2V4cGVyaW1lbnRhbCcgXSxcbiAgICAgIGFsbDogWyB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBtYXJnaW5zOiBbIHtcbiAgICAgICAgICAgIHdlaWdodDogMTUwLFxuICAgICAgICAgICAgaXRhbGljOiB0cnVlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgd2VpZ2h0OiAxNTAsXG4gICAgICAgICAgICBzaXplOiAxLjE1XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgaXRhbGljOiB0cnVlLFxuICAgICAgICAgICAgc2l6ZTogMS4xNVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHNpemU6IDEuNFxuICAgICAgICAgIH0gXSxcbiAgICAgICAgICBwYXNzTGVuZ3RoOiAxLFxuICAgICAgICAgIGZhaWxMZW5ndGg6IC41XG4gICAgICAgIH0sXG4gICAgICAgIGlkOiAncC1hcy1oZWFkaW5nJ1xuICAgICAgfSBdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdwYWdlLWhhcy1oZWFkaW5nLW9uZScsXG4gICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgICAgdGFnczogWyAnY2F0LnNlbWFudGljcycsICdiZXN0LXByYWN0aWNlJyBdLFxuICAgICAgYWxsOiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHNlbGVjdG9yOiAnaDE6bm90KFtyb2xlXSwgW2FyaWEtbGV2ZWxdKSwgOmlzKGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYpOm5vdChbcm9sZV0pW2FyaWEtbGV2ZWw9MV0sIFtyb2xlPWhlYWRpbmddW2FyaWEtbGV2ZWw9MV0nLFxuICAgICAgICAgIHBhc3NGb3JNb2RhbDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBpZDogJ3BhZ2UtaGFzLWhlYWRpbmctb25lJ1xuICAgICAgfSBdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdwcmVzZW50YXRpb24tcm9sZS1jb25mbGljdCcsXG4gICAgICBpbXBhY3Q6ICdtaW5vcicsXG4gICAgICBzZWxlY3RvcjogJ2ltZ1thbHQ9XFwnXFwnXSwgW3JvbGU9XCJub25lXCJdLCBbcm9sZT1cInByZXNlbnRhdGlvblwiXScsXG4gICAgICBtYXRjaGVzOiAnaGFzLWltcGxpY2l0LWNocm9taXVtLXJvbGUtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuYXJpYScsICdiZXN0LXByYWN0aWNlJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnNDZjYTdmJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbICdpcy1lbGVtZW50LWZvY3VzYWJsZScsICdoYXMtZ2xvYmFsLWFyaWEtYXR0cmlidXRlJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdyZWdpb24nLFxuICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgc2VsZWN0b3I6ICdib2R5IConLFxuICAgICAgdGFnczogWyAnY2F0LmtleWJvYXJkJywgJ2Jlc3QtcHJhY3RpY2UnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHJlZ2lvbk1hdGNoZXI6ICdkaWFsb2csIFtyb2xlPWRpYWxvZ10sIFtyb2xlPWFsZXJ0ZGlhbG9nXSwgc3ZnJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ3JlZ2lvbidcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdyb2xlLWltZy1hbHQnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ1tyb2xlPVxcJ2ltZ1xcJ106bm90KGltZywgYXJlYSwgaW5wdXQsIG9iamVjdCknLFxuICAgICAgbWF0Y2hlczogJ2h0bWwtbmFtZXNwYWNlLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LnRleHQtYWx0ZXJuYXRpdmVzJywgJ3djYWcyYScsICd3Y2FnMTExJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5hJywgJ1RUdjUnLCAnVFQ3LmEnLCAnRU4tMzAxLTU0OScsICdFTi05LjEuMS4xJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnMjNhMmE4JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnYXJpYS1sYWJlbCcsICdhcmlhLWxhYmVsbGVkYnknLCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdHRyaWJ1dGU6ICd0aXRsZSdcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdub24tZW1wdHktdGl0bGUnXG4gICAgICB9IF0sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnc2NvcGUtYXR0ci12YWxpZCcsXG4gICAgICBpbXBhY3Q6ICdtb2RlcmF0ZScsXG4gICAgICBzZWxlY3RvcjogJ3RkW3Njb3BlXSwgdGhbc2NvcGVdJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC50YWJsZXMnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogWyAnaHRtbDUtc2NvcGUnLCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICB2YWx1ZXM6IFsgJ3JvdycsICdjb2wnLCAncm93Z3JvdXAnLCAnY29sZ3JvdXAnIF1cbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICdzY29wZS12YWx1ZSdcbiAgICAgIH0gXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAnc2Nyb2xsYWJsZS1yZWdpb24tZm9jdXNhYmxlJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICcqOm5vdChzZWxlY3QsdGV4dGFyZWEpJyxcbiAgICAgIG1hdGNoZXM6ICdzY3JvbGxhYmxlLXJlZ2lvbi1mb2N1c2FibGUtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQua2V5Ym9hcmQnLCAnd2NhZzJhJywgJ3djYWcyMTEnLCAnd2NhZzIxMycsICdUVHY1JywgJ1RUNC5hJywgJ0VOLTMwMS01NDknLCAnRU4tOS4yLjEuMScsICdFTi05LjIuMS4zJyBdLFxuICAgICAgYWN0SWRzOiBbICcwc3N3OWsnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdmb2N1c2FibGUtY29udGVudCcsICdmb2N1c2FibGUtZWxlbWVudCcgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdzZWxlY3QtbmFtZScsXG4gICAgICBpbXBhY3Q6ICdjcml0aWNhbCcsXG4gICAgICBzZWxlY3RvcjogJ3NlbGVjdCcsXG4gICAgICB0YWdzOiBbICdjYXQuZm9ybXMnLCAnd2NhZzJhJywgJ3djYWc0MTInLCAnc2VjdGlvbjUwOCcsICdzZWN0aW9uNTA4LjIyLm4nLCAnVFR2NScsICdUVDUuYycsICdFTi0zMDEtNTQ5JywgJ0VOLTkuNC4xLjInLCAnQUNUJyBdLFxuICAgICAgYWN0SWRzOiBbICdlMDg2ZTUnIF0sXG4gICAgICBhbGw6IFtdLFxuICAgICAgYW55OiBbICdpbXBsaWNpdC1sYWJlbCcsICdleHBsaWNpdC1sYWJlbCcsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0sICdwcmVzZW50YXRpb25hbC1yb2xlJyBdLFxuICAgICAgbm9uZTogWyAnaGlkZGVuLWV4cGxpY2l0LWxhYmVsJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdzZXJ2ZXItc2lkZS1pbWFnZS1tYXAnLFxuICAgICAgaW1wYWN0OiAnbWlub3InLFxuICAgICAgc2VsZWN0b3I6ICdpbWdbaXNtYXBdJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC50ZXh0LWFsdGVybmF0aXZlcycsICd3Y2FnMmEnLCAnd2NhZzIxMScsICdzZWN0aW9uNTA4JywgJ3NlY3Rpb241MDguMjIuZicsICdUVHY1JywgJ1RUNC5hJywgJ0VOLTMwMS01NDknLCAnRU4tOS4yLjEuMScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFtdLFxuICAgICAgbm9uZTogWyAnZXhpc3RzJyBdXG4gICAgfSwge1xuICAgICAgaWQ6ICdza2lwLWxpbmsnLFxuICAgICAgaW1wYWN0OiAnbW9kZXJhdGUnLFxuICAgICAgc2VsZWN0b3I6ICdhW2hyZWZePVwiI1wiXSwgYVtocmVmXj1cIi8jXCJdJyxcbiAgICAgIG1hdGNoZXM6ICdza2lwLWxpbmstbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQua2V5Ym9hcmQnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ3NraXAtbGluaycgXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdzdW1tYXJ5LW5hbWUnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJ3N1bW1hcnknLFxuICAgICAgbWF0Y2hlczogJ3N1bW1hcnktaW50ZXJhY3RpdmUtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQubmFtZS1yb2xlLXZhbHVlJywgJ3djYWcyYScsICd3Y2FnNDEyJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5hJywgJ1RUdjUnLCAnVFQ2LmEnLCAnRU4tMzAxLTU0OScsICdFTi05LjQuMS4yJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnaGFzLXZpc2libGUtdGV4dCcsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdzdmctaW1nLWFsdCcsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnW3JvbGU9XCJpbWdcIl0sIFtyb2xlPVwiZ3JhcGhpY3Mtc3ltYm9sXCJdLCBzdmdbcm9sZT1cImdyYXBoaWNzLWRvY3VtZW50XCJdJyxcbiAgICAgIG1hdGNoZXM6ICdzdmctbmFtZXNwYWNlLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LnRleHQtYWx0ZXJuYXRpdmVzJywgJ3djYWcyYScsICd3Y2FnMTExJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5hJywgJ1RUdjUnLCAnVFQ3LmEnLCAnRU4tMzAxLTU0OScsICdFTi05LjEuMS4xJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnN2Q2NzM0JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogWyAnc3ZnLW5vbi1lbXB0eS10aXRsZScsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieScsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogJ25vbi1lbXB0eS10aXRsZSdcbiAgICAgIH0gXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICd0YWJpbmRleCcsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnW3RhYmluZGV4XScsXG4gICAgICB0YWdzOiBbICdjYXQua2V5Ym9hcmQnLCAnYmVzdC1wcmFjdGljZScgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsgJ3RhYmluZGV4JyBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ3RhYmxlLWR1cGxpY2F0ZS1uYW1lJyxcbiAgICAgIGltcGFjdDogJ21pbm9yJyxcbiAgICAgIHNlbGVjdG9yOiAndGFibGUnLFxuICAgICAgdGFnczogWyAnY2F0LnRhYmxlcycsICdiZXN0LXByYWN0aWNlJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbICdzYW1lLWNhcHRpb24tc3VtbWFyeScgXVxuICAgIH0sIHtcbiAgICAgIGlkOiAndGFibGUtZmFrZS1jYXB0aW9uJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICd0YWJsZScsXG4gICAgICBtYXRjaGVzOiAnZGF0YS10YWJsZS1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC50YWJsZXMnLCAnZXhwZXJpbWVudGFsJywgJ3djYWcyYScsICd3Y2FnMTMxJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5nJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjMuMScgXSxcbiAgICAgIGFsbDogWyAnY2FwdGlvbi1mYWtlZCcgXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAndGFyZ2V0LXNpemUnLFxuICAgICAgaW1wYWN0OiAnc2VyaW91cycsXG4gICAgICBzZWxlY3RvcjogJyonLFxuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBtYXRjaGVzOiAnd2lkZ2V0LW5vdC1pbmxpbmUtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQuc2Vuc29yeS1hbmQtdmlzdWFsLWN1ZXMnLCAnd2NhZzIyYWEnLCAnd2NhZzI1OCcgXSxcbiAgICAgIGFsbDogW10sXG4gICAgICBhbnk6IFsge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgbWluU2l6ZTogMjRcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICd0YXJnZXQtc2l6ZSdcbiAgICAgIH0sIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG1pbk9mZnNldDogMjRcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICd0YXJnZXQtb2Zmc2V0J1xuICAgICAgfSBdLFxuICAgICAgbm9uZTogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ3RkLWhhcy1oZWFkZXInLFxuICAgICAgaW1wYWN0OiAnY3JpdGljYWwnLFxuICAgICAgc2VsZWN0b3I6ICd0YWJsZScsXG4gICAgICBtYXRjaGVzOiAnZGF0YS10YWJsZS1sYXJnZS1tYXRjaGVzJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC50YWJsZXMnLCAnZXhwZXJpbWVudGFsJywgJ3djYWcyYScsICd3Y2FnMTMxJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5nJywgJ1RUdjUnLCAnVFQxNC5iJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjMuMScgXSxcbiAgICAgIGFsbDogWyAndGQtaGFzLWhlYWRlcicgXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAndGQtaGVhZGVycy1hdHRyJyxcbiAgICAgIGltcGFjdDogJ3NlcmlvdXMnLFxuICAgICAgc2VsZWN0b3I6ICd0YWJsZScsXG4gICAgICBtYXRjaGVzOiAndGFibGUtb3ItZ3JpZC1yb2xlLW1hdGNoZXMnLFxuICAgICAgdGFnczogWyAnY2F0LnRhYmxlcycsICd3Y2FnMmEnLCAnd2NhZzEzMScsICdzZWN0aW9uNTA4JywgJ3NlY3Rpb241MDguMjIuZycsICdUVHY1JywgJ1RUMTQuYicsICdFTi0zMDEtNTQ5JywgJ0VOLTkuMS4zLjEnIF0sXG4gICAgICBhY3RJZHM6IFsgJ2EyNWY0NScgXSxcbiAgICAgIGFsbDogWyAndGQtaGVhZGVycy1hdHRyJyBdLFxuICAgICAgYW55OiBbXSxcbiAgICAgIG5vbmU6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICd0aC1oYXMtZGF0YS1jZWxscycsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAndGFibGUnLFxuICAgICAgbWF0Y2hlczogJ2RhdGEtdGFibGUtbWF0Y2hlcycsXG4gICAgICB0YWdzOiBbICdjYXQudGFibGVzJywgJ3djYWcyYScsICd3Y2FnMTMxJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5nJywgJ1RUdjUnLCAnVFQxNC5iJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjMuMScgXSxcbiAgICAgIGFjdElkczogWyAnZDBmNjllJyBdLFxuICAgICAgYWxsOiBbICd0aC1oYXMtZGF0YS1jZWxscycgXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbXVxuICAgIH0sIHtcbiAgICAgIGlkOiAndmFsaWQtbGFuZycsXG4gICAgICBpbXBhY3Q6ICdzZXJpb3VzJyxcbiAgICAgIHNlbGVjdG9yOiAnW2xhbmddOm5vdChodG1sKSwgW3htbFxcXFw6bGFuZ106bm90KGh0bWwpJyxcbiAgICAgIHRhZ3M6IFsgJ2NhdC5sYW5ndWFnZScsICd3Y2FnMmFhJywgJ3djYWczMTInLCAnVFR2NScsICdUVDExLmInLCAnRU4tMzAxLTU0OScsICdFTi05LjMuMS4yJywgJ0FDVCcgXSxcbiAgICAgIGFjdElkczogWyAnZGU0NmU0JyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IFsgJ2xhbmcnLCAneG1sOmxhbmcnIF1cbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICd2YWxpZC1sYW5nJ1xuICAgICAgfSBdXG4gICAgfSwge1xuICAgICAgaWQ6ICd2aWRlby1jYXB0aW9uJyxcbiAgICAgIGltcGFjdDogJ2NyaXRpY2FsJyxcbiAgICAgIHNlbGVjdG9yOiAndmlkZW8nLFxuICAgICAgdGFnczogWyAnY2F0LnRleHQtYWx0ZXJuYXRpdmVzJywgJ3djYWcyYScsICd3Y2FnMTIyJywgJ3NlY3Rpb241MDgnLCAnc2VjdGlvbjUwOC4yMi5hJywgJ1RUdjUnLCAnVFQxNy5hJywgJ0VOLTMwMS01NDknLCAnRU4tOS4xLjIuMicgXSxcbiAgICAgIGFjdElkczogWyAnZWFjNjZiJyBdLFxuICAgICAgYWxsOiBbXSxcbiAgICAgIGFueTogW10sXG4gICAgICBub25lOiBbICdjYXB0aW9uJyBdXG4gICAgfSBdLFxuICAgIGNoZWNrczogWyB7XG4gICAgICBpZDogJ2Fic3RyYWN0cm9sZScsXG4gICAgICBldmFsdWF0ZTogJ2Fic3RyYWN0cm9sZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtYWxsb3dlZC1hdHRyJyxcbiAgICAgIGV2YWx1YXRlOiAnYXJpYS1hbGxvd2VkLWF0dHItZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICB2YWxpZFRyZWVSb3dBdHRyczogWyAnYXJpYS1wb3NpbnNldCcsICdhcmlhLXNldHNpemUnLCAnYXJpYS1leHBhbmRlZCcsICdhcmlhLWxldmVsJyBdXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLWFsbG93ZWQtcm9sZScsXG4gICAgICBldmFsdWF0ZTogJ2FyaWEtYWxsb3dlZC1yb2xlLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWxsb3dJbXBsaWNpdDogdHJ1ZSxcbiAgICAgICAgaWdub3JlZFRhZ3M6IFtdXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLWJ1c3knLFxuICAgICAgZXZhbHVhdGU6ICdhcmlhLWJ1c3ktZXZhbHVhdGUnLFxuICAgICAgZGVwcmVjYXRlZDogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1jb25kaXRpb25hbC1hdHRyJyxcbiAgICAgIGV2YWx1YXRlOiAnYXJpYS1jb25kaXRpb25hbC1hdHRyLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgaW52YWxpZFRhYmxlUm93QXR0cnM6IFsgJ2FyaWEtcG9zaW5zZXQnLCAnYXJpYS1zZXRzaXplJywgJ2FyaWEtZXhwYW5kZWQnLCAnYXJpYS1sZXZlbCcgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1lcnJvcm1lc3NhZ2UnLFxuICAgICAgZXZhbHVhdGU6ICdhcmlhLWVycm9ybWVzc2FnZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtaGlkZGVuLWJvZHknLFxuICAgICAgZXZhbHVhdGU6ICdhcmlhLWhpZGRlbi1ib2R5LWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1sZXZlbCcsXG4gICAgICBldmFsdWF0ZTogJ2FyaWEtbGV2ZWwtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLXByb2hpYml0ZWQtYXR0cicsXG4gICAgICBldmFsdWF0ZTogJ2FyaWEtcHJvaGliaXRlZC1hdHRyLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgZWxlbWVudHNBbGxvd2VkQXJpYUxhYmVsOiBbICdhcHBsZXQnLCAnaW5wdXQnIF1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtcmVxdWlyZWQtYXR0cicsXG4gICAgICBldmFsdWF0ZTogJ2FyaWEtcmVxdWlyZWQtYXR0ci1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtcmVxdWlyZWQtY2hpbGRyZW4nLFxuICAgICAgZXZhbHVhdGU6ICdhcmlhLXJlcXVpcmVkLWNoaWxkcmVuLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcmV2aWV3RW1wdHk6IFsgJ2RvYy1iaWJsaW9ncmFwaHknLCAnZG9jLWVuZG5vdGVzJywgJ2dyaWQnLCAnbGlzdCcsICdsaXN0Ym94JywgJ21lbnUnLCAnbWVudWJhcicsICd0YWJsZScsICd0YWJsaXN0JywgJ3RyZWUnLCAndHJlZWdyaWQnLCAncm93Z3JvdXAnIF1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtcmVxdWlyZWQtcGFyZW50JyxcbiAgICAgIGV2YWx1YXRlOiAnYXJpYS1yZXF1aXJlZC1wYXJlbnQtZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBvd25Hcm91cFJvbGVzOiBbICdsaXN0aXRlbScsICd0cmVlaXRlbScgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1yb2xlZGVzY3JpcHRpb24nLFxuICAgICAgZXZhbHVhdGU6ICdhcmlhLXJvbGVkZXNjcmlwdGlvbi1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHN1cHBvcnRlZFJvbGVzOiBbICdidXR0b24nLCAnaW1nJywgJ2NoZWNrYm94JywgJ3JhZGlvJywgJ2NvbWJvYm94JywgJ21lbnVpdGVtY2hlY2tib3gnLCAnbWVudWl0ZW1yYWRpbycgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS11bnN1cHBvcnRlZC1hdHRyJyxcbiAgICAgIGV2YWx1YXRlOiAnYXJpYS11bnN1cHBvcnRlZC1hdHRyLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS12YWxpZC1hdHRyLXZhbHVlJyxcbiAgICAgIGV2YWx1YXRlOiAnYXJpYS12YWxpZC1hdHRyLXZhbHVlLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdhcmlhLXZhbGlkLWF0dHInLFxuICAgICAgZXZhbHVhdGU6ICdhcmlhLXZhbGlkLWF0dHItZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczogW11cbiAgICB9LCB7XG4gICAgICBpZDogJ2JyYWlsbGUtbGFiZWwtZXF1aXZhbGVudCcsXG4gICAgICBldmFsdWF0ZTogJ2JyYWlsbGUtbGFiZWwtZXF1aXZhbGVudC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2JyYWlsbGUtcm9sZWRlc2NyaXB0aW9uLWVxdWl2YWxlbnQnLFxuICAgICAgZXZhbHVhdGU6ICdicmFpbGxlLXJvbGVkZXNjcmlwdGlvbi1lcXVpdmFsZW50LWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnZGVwcmVjYXRlZHJvbGUnLFxuICAgICAgZXZhbHVhdGU6ICdkZXByZWNhdGVkcm9sZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2ZhbGxiYWNrcm9sZScsXG4gICAgICBldmFsdWF0ZTogJ2ZhbGxiYWNrcm9sZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2hhcy1nbG9iYWwtYXJpYS1hdHRyaWJ1dGUnLFxuICAgICAgZXZhbHVhdGU6ICdoYXMtZ2xvYmFsLWFyaWEtYXR0cmlidXRlLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnaGFzLXdpZGdldC1yb2xlJyxcbiAgICAgIGV2YWx1YXRlOiAnaGFzLXdpZGdldC1yb2xlLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IFtdXG4gICAgfSwge1xuICAgICAgaWQ6ICdpbnZhbGlkcm9sZScsXG4gICAgICBldmFsdWF0ZTogJ2ludmFsaWRyb2xlLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnaXMtZWxlbWVudC1mb2N1c2FibGUnLFxuICAgICAgZXZhbHVhdGU6ICdpcy1lbGVtZW50LWZvY3VzYWJsZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ25vLWltcGxpY2l0LWV4cGxpY2l0LWxhYmVsJyxcbiAgICAgIGV2YWx1YXRlOiAnbm8taW1wbGljaXQtZXhwbGljaXQtbGFiZWwtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICd1bnN1cHBvcnRlZHJvbGUnLFxuICAgICAgZXZhbHVhdGU6ICd1bnN1cHBvcnRlZHJvbGUtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICd2YWxpZC1zY3JvbGxhYmxlLXNlbWFudGljcycsXG4gICAgICBldmFsdWF0ZTogJ3ZhbGlkLXNjcm9sbGFibGUtc2VtYW50aWNzLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcm9sZXM6IFsgJ3Rvb2x0aXAnIF1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ2NvbG9yLWNvbnRyYXN0LWVuaGFuY2VkJyxcbiAgICAgIGV2YWx1YXRlOiAnY29sb3ItY29udHJhc3QtZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBpZ25vcmVVbmljb2RlOiB0cnVlLFxuICAgICAgICBpZ25vcmVMZW5ndGg6IGZhbHNlLFxuICAgICAgICBpZ25vcmVQc2V1ZG86IGZhbHNlLFxuICAgICAgICBib2xkVmFsdWU6IDcwMCxcbiAgICAgICAgYm9sZFRleHRQdDogMTQsXG4gICAgICAgIGxhcmdlVGV4dFB0OiAxOCxcbiAgICAgICAgY29udHJhc3RSYXRpbzoge1xuICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgZXhwZWN0ZWQ6IDcsXG4gICAgICAgICAgICBtaW5UaHJlc2hvbGQ6IDQuNVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGFyZ2U6IHtcbiAgICAgICAgICAgIGV4cGVjdGVkOiA0LjUsXG4gICAgICAgICAgICBtaW5UaHJlc2hvbGQ6IDNcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHBzZXVkb1NpemVUaHJlc2hvbGQ6IC4yNSxcbiAgICAgICAgc2hhZG93T3V0bGluZUVtTWF4OiAuMSxcbiAgICAgICAgdGV4dFN0cm9rZUVtTWluOiAuMDNcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ2NvbG9yLWNvbnRyYXN0JyxcbiAgICAgIGV2YWx1YXRlOiAnY29sb3ItY29udHJhc3QtZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBpZ25vcmVVbmljb2RlOiB0cnVlLFxuICAgICAgICBpZ25vcmVMZW5ndGg6IGZhbHNlLFxuICAgICAgICBpZ25vcmVQc2V1ZG86IGZhbHNlLFxuICAgICAgICBib2xkVmFsdWU6IDcwMCxcbiAgICAgICAgYm9sZFRleHRQdDogMTQsXG4gICAgICAgIGxhcmdlVGV4dFB0OiAxOCxcbiAgICAgICAgY29udHJhc3RSYXRpbzoge1xuICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgZXhwZWN0ZWQ6IDQuNVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGFyZ2U6IHtcbiAgICAgICAgICAgIGV4cGVjdGVkOiAzXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwc2V1ZG9TaXplVGhyZXNob2xkOiAuMjUsXG4gICAgICAgIHNoYWRvd091dGxpbmVFbU1heDogLjIsXG4gICAgICAgIHRleHRTdHJva2VFbU1pbjogLjAzXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdsaW5rLWluLXRleHQtYmxvY2stc3R5bGUnLFxuICAgICAgZXZhbHVhdGU6ICdsaW5rLWluLXRleHQtYmxvY2stc3R5bGUtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdsaW5rLWluLXRleHQtYmxvY2snLFxuICAgICAgZXZhbHVhdGU6ICdsaW5rLWluLXRleHQtYmxvY2stZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICByZXF1aXJlZENvbnRyYXN0UmF0aW86IDMsXG4gICAgICAgIGFsbG93U2FtZUNvbG9yOiB0cnVlXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdhdXRvY29tcGxldGUtYXBwcm9wcmlhdGUnLFxuICAgICAgZXZhbHVhdGU6ICdhdXRvY29tcGxldGUtYXBwcm9wcmlhdGUtZXZhbHVhdGUnLFxuICAgICAgZGVwcmVjYXRlZDogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYXV0b2NvbXBsZXRlLXZhbGlkJyxcbiAgICAgIGV2YWx1YXRlOiAnYXV0b2NvbXBsZXRlLXZhbGlkLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgc3RhdGVUZXJtczogWyAnbm9uZScsICdmYWxzZScsICd0cnVlJywgJ2Rpc2FibGVkJywgJ2VuYWJsZWQnLCAndW5kZWZpbmVkJywgJ251bGwnIF0sXG4gICAgICAgIGlnbm9yZWRWYWx1ZXM6IFsgJ3RleHQnLCAncHJvbm91bnMnLCAnZ2VuZGVyJywgJ21lc3NhZ2UnLCAnY29udGVudCcgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYWNjZXNza2V5cycsXG4gICAgICBldmFsdWF0ZTogJ2FjY2Vzc2tleXMtZXZhbHVhdGUnLFxuICAgICAgYWZ0ZXI6ICdhY2Nlc3NrZXlzLWFmdGVyJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnZm9jdXNhYmxlLWNvbnRlbnQnLFxuICAgICAgZXZhbHVhdGU6ICdmb2N1c2FibGUtY29udGVudC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2ZvY3VzYWJsZS1kaXNhYmxlZCcsXG4gICAgICBldmFsdWF0ZTogJ2ZvY3VzYWJsZS1kaXNhYmxlZC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2ZvY3VzYWJsZS1lbGVtZW50JyxcbiAgICAgIGV2YWx1YXRlOiAnZm9jdXNhYmxlLWVsZW1lbnQtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdmb2N1c2FibGUtbW9kYWwtb3BlbicsXG4gICAgICBldmFsdWF0ZTogJ2ZvY3VzYWJsZS1tb2RhbC1vcGVuLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnZm9jdXNhYmxlLW5vLW5hbWUnLFxuICAgICAgZXZhbHVhdGU6ICdmb2N1c2FibGUtbm8tbmFtZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2ZvY3VzYWJsZS1ub3QtdGFiYmFibGUnLFxuICAgICAgZXZhbHVhdGU6ICdmb2N1c2FibGUtbm90LXRhYmJhYmxlLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnZnJhbWUtZm9jdXNhYmxlLWNvbnRlbnQnLFxuICAgICAgZXZhbHVhdGU6ICdmcmFtZS1mb2N1c2FibGUtY29udGVudC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2xhbmRtYXJrLWlzLXRvcC1sZXZlbCcsXG4gICAgICBldmFsdWF0ZTogJ2xhbmRtYXJrLWlzLXRvcC1sZXZlbC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ25vLWZvY3VzYWJsZS1jb250ZW50JyxcbiAgICAgIGV2YWx1YXRlOiAnbm8tZm9jdXNhYmxlLWNvbnRlbnQtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdwYWdlLWhhcy1oZWFkaW5nLW9uZScsXG4gICAgICBldmFsdWF0ZTogJ2hhcy1kZXNjZW5kYW50LWV2YWx1YXRlJyxcbiAgICAgIGFmdGVyOiAnaGFzLWRlc2NlbmRhbnQtYWZ0ZXInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBzZWxlY3RvcjogJ2gxOm5vdChbcm9sZV0sIFthcmlhLWxldmVsXSksIDppcyhoMSwgaDIsIGgzLCBoNCwgaDUsIGg2KTpub3QoW3JvbGVdKVthcmlhLWxldmVsPTFdLCBbcm9sZT1oZWFkaW5nXVthcmlhLWxldmVsPTFdJyxcbiAgICAgICAgcGFzc0Zvck1vZGFsOiB0cnVlXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdwYWdlLWhhcy1tYWluJyxcbiAgICAgIGV2YWx1YXRlOiAnaGFzLWRlc2NlbmRhbnQtZXZhbHVhdGUnLFxuICAgICAgYWZ0ZXI6ICdoYXMtZGVzY2VuZGFudC1hZnRlcicsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHNlbGVjdG9yOiAnbWFpbjpub3QoW3JvbGVdKSwgW3JvbGU9XFwnbWFpblxcJ10nLFxuICAgICAgICBwYXNzRm9yTW9kYWw6IHRydWVcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ3BhZ2Utbm8tZHVwbGljYXRlLWJhbm5lcicsXG4gICAgICBldmFsdWF0ZTogJ3BhZ2Utbm8tZHVwbGljYXRlLWV2YWx1YXRlJyxcbiAgICAgIGFmdGVyOiAncGFnZS1uby1kdXBsaWNhdGUtYWZ0ZXInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBzZWxlY3RvcjogJ2hlYWRlcjpub3QoW3JvbGVdKSwgW3JvbGU9YmFubmVyXScsXG4gICAgICAgIHJvbGU6ICdiYW5uZXInXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdwYWdlLW5vLWR1cGxpY2F0ZS1jb250ZW50aW5mbycsXG4gICAgICBldmFsdWF0ZTogJ3BhZ2Utbm8tZHVwbGljYXRlLWV2YWx1YXRlJyxcbiAgICAgIGFmdGVyOiAncGFnZS1uby1kdXBsaWNhdGUtYWZ0ZXInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBzZWxlY3RvcjogJ2Zvb3Rlcjpub3QoW3JvbGVdKSwgW3JvbGU9Y29udGVudGluZm9dJyxcbiAgICAgICAgcm9sZTogJ2NvbnRlbnRpbmZvJ1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAncGFnZS1uby1kdXBsaWNhdGUtbWFpbicsXG4gICAgICBldmFsdWF0ZTogJ3BhZ2Utbm8tZHVwbGljYXRlLWV2YWx1YXRlJyxcbiAgICAgIGFmdGVyOiAncGFnZS1uby1kdXBsaWNhdGUtYWZ0ZXInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBzZWxlY3RvcjogJ21haW46bm90KFtyb2xlXSksIFtyb2xlPVxcJ21haW5cXCddJ1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAndGFiaW5kZXgnLFxuICAgICAgZXZhbHVhdGU6ICd0YWJpbmRleC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2FsdC1zcGFjZS12YWx1ZScsXG4gICAgICBldmFsdWF0ZTogJ2FsdC1zcGFjZS12YWx1ZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2R1cGxpY2F0ZS1pbWctbGFiZWwnLFxuICAgICAgZXZhbHVhdGU6ICdkdXBsaWNhdGUtaW1nLWxhYmVsLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcGFyZW50U2VsZWN0b3I6ICdidXR0b24sIFtyb2xlPWJ1dHRvbl0sIGFbaHJlZl0sIHAsIGxpLCB0ZCwgdGgnXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdleHBsaWNpdC1sYWJlbCcsXG4gICAgICBldmFsdWF0ZTogJ2V4cGxpY2l0LWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnaGVscC1zYW1lLWFzLWxhYmVsJyxcbiAgICAgIGV2YWx1YXRlOiAnaGVscC1zYW1lLWFzLWxhYmVsLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnaGlkZGVuLWV4cGxpY2l0LWxhYmVsJyxcbiAgICAgIGV2YWx1YXRlOiAnaGlkZGVuLWV4cGxpY2l0LWxhYmVsLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnaW1wbGljaXQtbGFiZWwnLFxuICAgICAgZXZhbHVhdGU6ICdpbXBsaWNpdC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2xhYmVsLWNvbnRlbnQtbmFtZS1taXNtYXRjaCcsXG4gICAgICBldmFsdWF0ZTogJ2xhYmVsLWNvbnRlbnQtbmFtZS1taXNtYXRjaC1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHBpeGVsVGhyZXNob2xkOiAuMSxcbiAgICAgICAgb2NjdXJyZW5jZVRocmVzaG9sZDogM1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbXVsdGlwbGUtbGFiZWwnLFxuICAgICAgZXZhbHVhdGU6ICdtdWx0aXBsZS1sYWJlbC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ3RpdGxlLW9ubHknLFxuICAgICAgZXZhbHVhdGU6ICd0aXRsZS1vbmx5LWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnbGFuZG1hcmstaXMtdW5pcXVlJyxcbiAgICAgIGV2YWx1YXRlOiAnbGFuZG1hcmstaXMtdW5pcXVlLWV2YWx1YXRlJyxcbiAgICAgIGFmdGVyOiAnbGFuZG1hcmstaXMtdW5pcXVlLWFmdGVyJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnaGFzLWxhbmcnLFxuICAgICAgZXZhbHVhdGU6ICdoYXMtbGFuZy1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IFsgJ2xhbmcnLCAneG1sOmxhbmcnIF1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ3ZhbGlkLWxhbmcnLFxuICAgICAgZXZhbHVhdGU6ICd2YWxpZC1sYW5nLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYXR0cmlidXRlczogWyAnbGFuZycsICd4bWw6bGFuZycgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAneG1sLWxhbmctbWlzbWF0Y2gnLFxuICAgICAgZXZhbHVhdGU6ICd4bWwtbGFuZy1taXNtYXRjaC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2RsaXRlbScsXG4gICAgICBldmFsdWF0ZTogJ2RsaXRlbS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2xpc3RpdGVtJyxcbiAgICAgIGV2YWx1YXRlOiAnbGlzdGl0ZW0tZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdvbmx5LWRsaXRlbXMnLFxuICAgICAgZXZhbHVhdGU6ICdpbnZhbGlkLWNoaWxkcmVuLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdmFsaWRSb2xlczogWyAnZGVmaW5pdGlvbicsICd0ZXJtJywgJ2xpc3RpdGVtJyBdLFxuICAgICAgICB2YWxpZE5vZGVOYW1lczogWyAnZHQnLCAnZGQnIF0sXG4gICAgICAgIGRpdkdyb3VwczogdHJ1ZVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnb25seS1saXN0aXRlbXMnLFxuICAgICAgZXZhbHVhdGU6ICdpbnZhbGlkLWNoaWxkcmVuLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdmFsaWRSb2xlczogWyAnbGlzdGl0ZW0nIF0sXG4gICAgICAgIHZhbGlkTm9kZU5hbWVzOiBbICdsaScgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnc3RydWN0dXJlZC1kbGl0ZW1zJyxcbiAgICAgIGV2YWx1YXRlOiAnc3RydWN0dXJlZC1kbGl0ZW1zLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnY2FwdGlvbicsXG4gICAgICBldmFsdWF0ZTogJ2NhcHRpb24tZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdmcmFtZS10ZXN0ZWQnLFxuICAgICAgZXZhbHVhdGU6ICdmcmFtZS10ZXN0ZWQtZXZhbHVhdGUnLFxuICAgICAgYWZ0ZXI6ICdmcmFtZS10ZXN0ZWQtYWZ0ZXInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBpc1Zpb2xhdGlvbjogZmFsc2VcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ25vLWF1dG9wbGF5LWF1ZGlvJyxcbiAgICAgIGV2YWx1YXRlOiAnbm8tYXV0b3BsYXktYXVkaW8tZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhbGxvd2VkRHVyYXRpb246IDNcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ2Nzcy1vcmllbnRhdGlvbi1sb2NrJyxcbiAgICAgIGV2YWx1YXRlOiAnY3NzLW9yaWVudGF0aW9uLWxvY2stZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBkZWdyZWVUaHJlc2hvbGQ6IDJcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ21ldGEtdmlld3BvcnQtbGFyZ2UnLFxuICAgICAgZXZhbHVhdGU6ICdtZXRhLXZpZXdwb3J0LXNjYWxlLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgc2NhbGVNaW5pbXVtOiA1LFxuICAgICAgICBsb3dlckJvdW5kOiAyXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdtZXRhLXZpZXdwb3J0JyxcbiAgICAgIGV2YWx1YXRlOiAnbWV0YS12aWV3cG9ydC1zY2FsZS1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHNjYWxlTWluaW11bTogMlxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAndGFyZ2V0LW9mZnNldCcsXG4gICAgICBldmFsdWF0ZTogJ3RhcmdldC1vZmZzZXQtZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBtaW5PZmZzZXQ6IDI0XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICd0YXJnZXQtc2l6ZScsXG4gICAgICBldmFsdWF0ZTogJ3RhcmdldC1zaXplLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgbWluU2l6ZTogMjRcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ2hlYWRlci1wcmVzZW50JyxcbiAgICAgIGV2YWx1YXRlOiAnaGFzLWRlc2NlbmRhbnQtZXZhbHVhdGUnLFxuICAgICAgYWZ0ZXI6ICdoYXMtZGVzY2VuZGFudC1hZnRlcicsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHNlbGVjdG9yOiAnOmlzKGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYpOm5vdChbcm9sZV0pLCBbcm9sZT1oZWFkaW5nXSdcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ2hlYWRpbmctb3JkZXInLFxuICAgICAgZXZhbHVhdGU6ICdoZWFkaW5nLW9yZGVyLWV2YWx1YXRlJyxcbiAgICAgIGFmdGVyOiAnaGVhZGluZy1vcmRlci1hZnRlcidcbiAgICB9LCB7XG4gICAgICBpZDogJ2lkZW50aWNhbC1saW5rcy1zYW1lLXB1cnBvc2UnLFxuICAgICAgZXZhbHVhdGU6ICdpZGVudGljYWwtbGlua3Mtc2FtZS1wdXJwb3NlLWV2YWx1YXRlJyxcbiAgICAgIGFmdGVyOiAnaWRlbnRpY2FsLWxpbmtzLXNhbWUtcHVycG9zZS1hZnRlcidcbiAgICB9LCB7XG4gICAgICBpZDogJ2ludGVybmFsLWxpbmstcHJlc2VudCcsXG4gICAgICBldmFsdWF0ZTogJ2ludGVybmFsLWxpbmstcHJlc2VudC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2xhbmRtYXJrJyxcbiAgICAgIGV2YWx1YXRlOiAnaGFzLWRlc2NlbmRhbnQtZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBzZWxlY3RvcjogJ21haW4sIFtyb2xlPW1haW5dJ1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbWV0YS1yZWZyZXNoLW5vLWV4Y2VwdGlvbnMnLFxuICAgICAgZXZhbHVhdGU6ICdtZXRhLXJlZnJlc2gtZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBtaW5EZWxheTogNzJlMyxcbiAgICAgICAgbWF4RGVsYXk6IGZhbHNlXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdtZXRhLXJlZnJlc2gnLFxuICAgICAgZXZhbHVhdGU6ICdtZXRhLXJlZnJlc2gtZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBtaW5EZWxheTogMCxcbiAgICAgICAgbWF4RGVsYXk6IDcyZTNcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ3AtYXMtaGVhZGluZycsXG4gICAgICBldmFsdWF0ZTogJ3AtYXMtaGVhZGluZy1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIG1hcmdpbnM6IFsge1xuICAgICAgICAgIHdlaWdodDogMTUwLFxuICAgICAgICAgIGl0YWxpYzogdHJ1ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgd2VpZ2h0OiAxNTAsXG4gICAgICAgICAgc2l6ZTogMS4xNVxuICAgICAgICB9LCB7XG4gICAgICAgICAgaXRhbGljOiB0cnVlLFxuICAgICAgICAgIHNpemU6IDEuMTVcbiAgICAgICAgfSwge1xuICAgICAgICAgIHNpemU6IDEuNFxuICAgICAgICB9IF0sXG4gICAgICAgIHBhc3NMZW5ndGg6IDEsXG4gICAgICAgIGZhaWxMZW5ndGg6IC41XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdyZWdpb24nLFxuICAgICAgZXZhbHVhdGU6ICdyZWdpb24tZXZhbHVhdGUnLFxuICAgICAgYWZ0ZXI6ICdyZWdpb24tYWZ0ZXInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICByZWdpb25NYXRjaGVyOiAnZGlhbG9nLCBbcm9sZT1kaWFsb2ddLCBbcm9sZT1hbGVydGRpYWxvZ10sIHN2ZydcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ3NraXAtbGluaycsXG4gICAgICBldmFsdWF0ZTogJ3NraXAtbGluay1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ3VuaXF1ZS1mcmFtZS10aXRsZScsXG4gICAgICBldmFsdWF0ZTogJ3VuaXF1ZS1mcmFtZS10aXRsZS1ldmFsdWF0ZScsXG4gICAgICBhZnRlcjogJ3VuaXF1ZS1mcmFtZS10aXRsZS1hZnRlcidcbiAgICB9LCB7XG4gICAgICBpZDogJ2R1cGxpY2F0ZS1pZC1hY3RpdmUnLFxuICAgICAgZXZhbHVhdGU6ICdkdXBsaWNhdGUtaWQtZXZhbHVhdGUnLFxuICAgICAgYWZ0ZXI6ICdkdXBsaWNhdGUtaWQtYWZ0ZXInXG4gICAgfSwge1xuICAgICAgaWQ6ICdkdXBsaWNhdGUtaWQtYXJpYScsXG4gICAgICBldmFsdWF0ZTogJ2R1cGxpY2F0ZS1pZC1ldmFsdWF0ZScsXG4gICAgICBhZnRlcjogJ2R1cGxpY2F0ZS1pZC1hZnRlcidcbiAgICB9LCB7XG4gICAgICBpZDogJ2R1cGxpY2F0ZS1pZCcsXG4gICAgICBldmFsdWF0ZTogJ2R1cGxpY2F0ZS1pZC1ldmFsdWF0ZScsXG4gICAgICBhZnRlcjogJ2R1cGxpY2F0ZS1pZC1hZnRlcidcbiAgICB9LCB7XG4gICAgICBpZDogJ2FyaWEtbGFiZWwnLFxuICAgICAgZXZhbHVhdGU6ICdhcmlhLWxhYmVsLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnYXJpYS1sYWJlbGxlZGJ5JyxcbiAgICAgIGV2YWx1YXRlOiAnYXJpYS1sYWJlbGxlZGJ5LWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnYXZvaWQtaW5saW5lLXNwYWNpbmcnLFxuICAgICAgZXZhbHVhdGU6ICdhdm9pZC1pbmxpbmUtc3BhY2luZy1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGNzc1Byb3BlcnRpZXM6IFsgJ2xpbmUtaGVpZ2h0JywgJ2xldHRlci1zcGFjaW5nJywgJ3dvcmQtc3BhY2luZycgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnYnV0dG9uLWhhcy12aXNpYmxlLXRleHQnLFxuICAgICAgZXZhbHVhdGU6ICdoYXMtdGV4dC1jb250ZW50LWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnZG9jLWhhcy10aXRsZScsXG4gICAgICBldmFsdWF0ZTogJ2RvYy1oYXMtdGl0bGUtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdleGlzdHMnLFxuICAgICAgZXZhbHVhdGU6ICdleGlzdHMtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdoYXMtYWx0JyxcbiAgICAgIGV2YWx1YXRlOiAnaGFzLWFsdC1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2hhcy12aXNpYmxlLXRleHQnLFxuICAgICAgZXZhbHVhdGU6ICdoYXMtdGV4dC1jb250ZW50LWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnaW1wb3J0YW50LWxldHRlci1zcGFjaW5nJyxcbiAgICAgIGV2YWx1YXRlOiAnaW5saW5lLXN0eWxlLXByb3BlcnR5LWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY3NzUHJvcGVydHk6ICdsZXR0ZXItc3BhY2luZycsXG4gICAgICAgIG1pblZhbHVlOiAuMTJcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpZDogJ2ltcG9ydGFudC1saW5lLWhlaWdodCcsXG4gICAgICBldmFsdWF0ZTogJ2lubGluZS1zdHlsZS1wcm9wZXJ0eS1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIG11bHRpTGluZU9ubHk6IHRydWUsXG4gICAgICAgIGNzc1Byb3BlcnR5OiAnbGluZS1oZWlnaHQnLFxuICAgICAgICBtaW5WYWx1ZTogMS41LFxuICAgICAgICBub3JtYWxWYWx1ZTogMVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnaW1wb3J0YW50LXdvcmQtc3BhY2luZycsXG4gICAgICBldmFsdWF0ZTogJ2lubGluZS1zdHlsZS1wcm9wZXJ0eS1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGNzc1Byb3BlcnR5OiAnd29yZC1zcGFjaW5nJyxcbiAgICAgICAgbWluVmFsdWU6IC4xNlxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnaXMtb24tc2NyZWVuJyxcbiAgICAgIGV2YWx1YXRlOiAnaXMtb24tc2NyZWVuLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnbm9uLWVtcHR5LWFsdCcsXG4gICAgICBldmFsdWF0ZTogJ2F0dHItbm9uLXNwYWNlLWNvbnRlbnQtZXZhbHVhdGUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhdHRyaWJ1dGU6ICdhbHQnXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdub24tZW1wdHktaWYtcHJlc2VudCcsXG4gICAgICBldmFsdWF0ZTogJ25vbi1lbXB0eS1pZi1wcmVzZW50LWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnbm9uLWVtcHR5LXBsYWNlaG9sZGVyJyxcbiAgICAgIGV2YWx1YXRlOiAnYXR0ci1ub24tc3BhY2UtY29udGVudC1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGF0dHJpYnV0ZTogJ3BsYWNlaG9sZGVyJ1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbm9uLWVtcHR5LXRpdGxlJyxcbiAgICAgIGV2YWx1YXRlOiAnYXR0ci1ub24tc3BhY2UtY29udGVudC1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAnbm9uLWVtcHR5LXZhbHVlJyxcbiAgICAgIGV2YWx1YXRlOiAnYXR0ci1ub24tc3BhY2UtY29udGVudC1ldmFsdWF0ZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGF0dHJpYnV0ZTogJ3ZhbHVlJ1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAncHJlc2VudGF0aW9uYWwtcm9sZScsXG4gICAgICBldmFsdWF0ZTogJ3ByZXNlbnRhdGlvbmFsLXJvbGUtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdyb2xlLW5vbmUnLFxuICAgICAgZXZhbHVhdGU6ICdtYXRjaGVzLWRlZmluaXRpb24tZXZhbHVhdGUnLFxuICAgICAgZGVwcmVjYXRlZDogdHJ1ZSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgbWF0Y2hlcjoge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIHJvbGU6ICdub25lJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGlkOiAncm9sZS1wcmVzZW50YXRpb24nLFxuICAgICAgZXZhbHVhdGU6ICdtYXRjaGVzLWRlZmluaXRpb24tZXZhbHVhdGUnLFxuICAgICAgZGVwcmVjYXRlZDogdHJ1ZSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgbWF0Y2hlcjoge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIHJvbGU6ICdwcmVzZW50YXRpb24nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICdzdmctbm9uLWVtcHR5LXRpdGxlJyxcbiAgICAgIGV2YWx1YXRlOiAnc3ZnLW5vbi1lbXB0eS10aXRsZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ2NhcHRpb24tZmFrZWQnLFxuICAgICAgZXZhbHVhdGU6ICdjYXB0aW9uLWZha2VkLWV2YWx1YXRlJ1xuICAgIH0sIHtcbiAgICAgIGlkOiAnaHRtbDUtc2NvcGUnLFxuICAgICAgZXZhbHVhdGU6ICdodG1sNS1zY29wZS1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ3NhbWUtY2FwdGlvbi1zdW1tYXJ5JyxcbiAgICAgIGV2YWx1YXRlOiAnc2FtZS1jYXB0aW9uLXN1bW1hcnktZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdzY29wZS12YWx1ZScsXG4gICAgICBldmFsdWF0ZTogJ3Njb3BlLXZhbHVlLWV2YWx1YXRlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdmFsdWVzOiBbICdyb3cnLCAnY29sJywgJ3Jvd2dyb3VwJywgJ2NvbGdyb3VwJyBdXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaWQ6ICd0ZC1oYXMtaGVhZGVyJyxcbiAgICAgIGV2YWx1YXRlOiAndGQtaGFzLWhlYWRlci1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ3RkLWhlYWRlcnMtYXR0cicsXG4gICAgICBldmFsdWF0ZTogJ3RkLWhlYWRlcnMtYXR0ci1ldmFsdWF0ZSdcbiAgICB9LCB7XG4gICAgICBpZDogJ3RoLWhhcy1kYXRhLWNlbGxzJyxcbiAgICAgIGV2YWx1YXRlOiAndGgtaGFzLWRhdGEtY2VsbHMtZXZhbHVhdGUnXG4gICAgfSwge1xuICAgICAgaWQ6ICdoaWRkZW4tY29udGVudCcsXG4gICAgICBldmFsdWF0ZTogJ2hpZGRlbi1jb250ZW50LWV2YWx1YXRlJ1xuICAgIH0gXVxuICB9KTtcbn0pKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnID8gd2luZG93IDogdGhpcyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/axe-core/axe.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/requestidlecallback/index.js":
/*!***************************************************!*\
  !*** ./node_modules/requestidlecallback/index.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/requestidlecallback/index.js\n"));

/***/ })

}]);